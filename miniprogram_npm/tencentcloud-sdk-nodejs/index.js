module.exports = (function() {
var __MODS__ = {};
var __DEFINE__ = function(modId, func, req) { var m = { exports: {}, _tempexports: {} }; __MODS__[modId] = { status: 0, func: func, req: req, m: m }; };
var __REQUIRE__ = function(modId, source) { if(!__MODS__[modId]) return require(source); if(!__MODS__[modId].status) { var m = __MODS__[modId].m; m._exports = m._tempexports; var desp = Object.getOwnPropertyDescriptor(m, "exports"); if (desp && desp.configurable) Object.defineProperty(m, "exports", { set: function (val) { if(typeof val === "object" && val !== m._exports) { m._exports.__proto__ = val.__proto__; Object.keys(val).forEach(function (k) { m._exports[k] = val[k]; }); } m._tempexports = val }, get: function () { return m._tempexports; } }); __MODS__[modId].status = 1; __MODS__[modId].func(__MODS__[modId].req, m, m.exports); } return __MODS__[modId].m.exports; };
var __REQUIRE_WILDCARD__ = function(obj) { if(obj && obj.__esModule) { return obj; } else { var newObj = {}; if(obj != null) { for(var k in obj) { if (Object.prototype.hasOwnProperty.call(obj, k)) newObj[k] = obj[k]; } } newObj.default = obj; return newObj; } };
var __REQUIRE_DEFAULT__ = function(obj) { return obj && obj.__esModule ? obj.default : obj; };
__DEFINE__(1738984248555, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
tslib_1.__exportStar(require("./services"), exports);

}, function(modId) {var map = {"./services":1738984248556}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248556, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var aa_1 = require("./aa");
Object.defineProperty(exports, "aa", { enumerable: true, get: function () { return aa_1.aa; } });
var aai_1 = require("./aai");
Object.defineProperty(exports, "aai", { enumerable: true, get: function () { return aai_1.aai; } });
var aca_1 = require("./aca");
Object.defineProperty(exports, "aca", { enumerable: true, get: function () { return aca_1.aca; } });
var acp_1 = require("./acp");
Object.defineProperty(exports, "acp", { enumerable: true, get: function () { return acp_1.acp; } });
var advisor_1 = require("./advisor");
Object.defineProperty(exports, "advisor", { enumerable: true, get: function () { return advisor_1.advisor; } });
var af_1 = require("./af");
Object.defineProperty(exports, "af", { enumerable: true, get: function () { return af_1.af; } });
var afc_1 = require("./afc");
Object.defineProperty(exports, "afc", { enumerable: true, get: function () { return afc_1.afc; } });
var aiart_1 = require("./aiart");
Object.defineProperty(exports, "aiart", { enumerable: true, get: function () { return aiart_1.aiart; } });
var ame_1 = require("./ame");
Object.defineProperty(exports, "ame", { enumerable: true, get: function () { return ame_1.ame; } });
var ams_1 = require("./ams");
Object.defineProperty(exports, "ams", { enumerable: true, get: function () { return ams_1.ams; } });
var anicloud_1 = require("./anicloud");
Object.defineProperty(exports, "anicloud", { enumerable: true, get: function () { return anicloud_1.anicloud; } });
var antiddos_1 = require("./antiddos");
Object.defineProperty(exports, "antiddos", { enumerable: true, get: function () { return antiddos_1.antiddos; } });
var apcas_1 = require("./apcas");
Object.defineProperty(exports, "apcas", { enumerable: true, get: function () { return apcas_1.apcas; } });
var ape_1 = require("./ape");
Object.defineProperty(exports, "ape", { enumerable: true, get: function () { return ape_1.ape; } });
var api_1 = require("./api");
Object.defineProperty(exports, "api", { enumerable: true, get: function () { return api_1.api; } });
var apigateway_1 = require("./apigateway");
Object.defineProperty(exports, "apigateway", { enumerable: true, get: function () { return apigateway_1.apigateway; } });
var apm_1 = require("./apm");
Object.defineProperty(exports, "apm", { enumerable: true, get: function () { return apm_1.apm; } });
var as_1 = require("./as");
Object.defineProperty(exports, "as", { enumerable: true, get: function () { return as_1.as; } });
var asr_1 = require("./asr");
Object.defineProperty(exports, "asr", { enumerable: true, get: function () { return asr_1.asr; } });
var asw_1 = require("./asw");
Object.defineProperty(exports, "asw", { enumerable: true, get: function () { return asw_1.asw; } });
var ba_1 = require("./ba");
Object.defineProperty(exports, "ba", { enumerable: true, get: function () { return ba_1.ba; } });
var batch_1 = require("./batch");
Object.defineProperty(exports, "batch", { enumerable: true, get: function () { return batch_1.batch; } });
var bda_1 = require("./bda");
Object.defineProperty(exports, "bda", { enumerable: true, get: function () { return bda_1.bda; } });
var bh_1 = require("./bh");
Object.defineProperty(exports, "bh", { enumerable: true, get: function () { return bh_1.bh; } });
var bi_1 = require("./bi");
Object.defineProperty(exports, "bi", { enumerable: true, get: function () { return bi_1.bi; } });
var billing_1 = require("./billing");
Object.defineProperty(exports, "billing", { enumerable: true, get: function () { return billing_1.billing; } });
var bizlive_1 = require("./bizlive");
Object.defineProperty(exports, "bizlive", { enumerable: true, get: function () { return bizlive_1.bizlive; } });
var bm_1 = require("./bm");
Object.defineProperty(exports, "bm", { enumerable: true, get: function () { return bm_1.bm; } });
var bma_1 = require("./bma");
Object.defineProperty(exports, "bma", { enumerable: true, get: function () { return bma_1.bma; } });
var bmeip_1 = require("./bmeip");
Object.defineProperty(exports, "bmeip", { enumerable: true, get: function () { return bmeip_1.bmeip; } });
var bmlb_1 = require("./bmlb");
Object.defineProperty(exports, "bmlb", { enumerable: true, get: function () { return bmlb_1.bmlb; } });
var bmvpc_1 = require("./bmvpc");
Object.defineProperty(exports, "bmvpc", { enumerable: true, get: function () { return bmvpc_1.bmvpc; } });
var bpaas_1 = require("./bpaas");
Object.defineProperty(exports, "bpaas", { enumerable: true, get: function () { return bpaas_1.bpaas; } });
var bri_1 = require("./bri");
Object.defineProperty(exports, "bri", { enumerable: true, get: function () { return bri_1.bri; } });
var bsca_1 = require("./bsca");
Object.defineProperty(exports, "bsca", { enumerable: true, get: function () { return bsca_1.bsca; } });
var btoe_1 = require("./btoe");
Object.defineProperty(exports, "btoe", { enumerable: true, get: function () { return btoe_1.btoe; } });
var ca_1 = require("./ca");
Object.defineProperty(exports, "ca", { enumerable: true, get: function () { return ca_1.ca; } });
var cam_1 = require("./cam");
Object.defineProperty(exports, "cam", { enumerable: true, get: function () { return cam_1.cam; } });
var captcha_1 = require("./captcha");
Object.defineProperty(exports, "captcha", { enumerable: true, get: function () { return captcha_1.captcha; } });
var car_1 = require("./car");
Object.defineProperty(exports, "car", { enumerable: true, get: function () { return car_1.car; } });
var cat_1 = require("./cat");
Object.defineProperty(exports, "cat", { enumerable: true, get: function () { return cat_1.cat; } });
var cbs_1 = require("./cbs");
Object.defineProperty(exports, "cbs", { enumerable: true, get: function () { return cbs_1.cbs; } });
var ccc_1 = require("./ccc");
Object.defineProperty(exports, "ccc", { enumerable: true, get: function () { return ccc_1.ccc; } });
var cdb_1 = require("./cdb");
Object.defineProperty(exports, "cdb", { enumerable: true, get: function () { return cdb_1.cdb; } });
var cdc_1 = require("./cdc");
Object.defineProperty(exports, "cdc", { enumerable: true, get: function () { return cdc_1.cdc; } });
var cdn_1 = require("./cdn");
Object.defineProperty(exports, "cdn", { enumerable: true, get: function () { return cdn_1.cdn; } });
var cds_1 = require("./cds");
Object.defineProperty(exports, "cds", { enumerable: true, get: function () { return cds_1.cds; } });
var cdwch_1 = require("./cdwch");
Object.defineProperty(exports, "cdwch", { enumerable: true, get: function () { return cdwch_1.cdwch; } });
var cdwdoris_1 = require("./cdwdoris");
Object.defineProperty(exports, "cdwdoris", { enumerable: true, get: function () { return cdwdoris_1.cdwdoris; } });
var cdwpg_1 = require("./cdwpg");
Object.defineProperty(exports, "cdwpg", { enumerable: true, get: function () { return cdwpg_1.cdwpg; } });
var cdz_1 = require("./cdz");
Object.defineProperty(exports, "cdz", { enumerable: true, get: function () { return cdz_1.cdz; } });
var cfg_1 = require("./cfg");
Object.defineProperty(exports, "cfg", { enumerable: true, get: function () { return cfg_1.cfg; } });
var cfs_1 = require("./cfs");
Object.defineProperty(exports, "cfs", { enumerable: true, get: function () { return cfs_1.cfs; } });
var cfw_1 = require("./cfw");
Object.defineProperty(exports, "cfw", { enumerable: true, get: function () { return cfw_1.cfw; } });
var chdfs_1 = require("./chdfs");
Object.defineProperty(exports, "chdfs", { enumerable: true, get: function () { return chdfs_1.chdfs; } });
var ciam_1 = require("./ciam");
Object.defineProperty(exports, "ciam", { enumerable: true, get: function () { return ciam_1.ciam; } });
var cii_1 = require("./cii");
Object.defineProperty(exports, "cii", { enumerable: true, get: function () { return cii_1.cii; } });
var cim_1 = require("./cim");
Object.defineProperty(exports, "cim", { enumerable: true, get: function () { return cim_1.cim; } });
var cis_1 = require("./cis");
Object.defineProperty(exports, "cis", { enumerable: true, get: function () { return cis_1.cis; } });
var ckafka_1 = require("./ckafka");
Object.defineProperty(exports, "ckafka", { enumerable: true, get: function () { return ckafka_1.ckafka; } });
var clb_1 = require("./clb");
Object.defineProperty(exports, "clb", { enumerable: true, get: function () { return clb_1.clb; } });
var cloudapp_1 = require("./cloudapp");
Object.defineProperty(exports, "cloudapp", { enumerable: true, get: function () { return cloudapp_1.cloudapp; } });
var cloudaudit_1 = require("./cloudaudit");
Object.defineProperty(exports, "cloudaudit", { enumerable: true, get: function () { return cloudaudit_1.cloudaudit; } });
var cloudhsm_1 = require("./cloudhsm");
Object.defineProperty(exports, "cloudhsm", { enumerable: true, get: function () { return cloudhsm_1.cloudhsm; } });
var cloudstudio_1 = require("./cloudstudio");
Object.defineProperty(exports, "cloudstudio", { enumerable: true, get: function () { return cloudstudio_1.cloudstudio; } });
var cls_1 = require("./cls");
Object.defineProperty(exports, "cls", { enumerable: true, get: function () { return cls_1.cls; } });
var cme_1 = require("./cme");
Object.defineProperty(exports, "cme", { enumerable: true, get: function () { return cme_1.cme; } });
var cmq_1 = require("./cmq");
Object.defineProperty(exports, "cmq", { enumerable: true, get: function () { return cmq_1.cmq; } });
var cms_1 = require("./cms");
Object.defineProperty(exports, "cms", { enumerable: true, get: function () { return cms_1.cms; } });
var config_1 = require("./config");
Object.defineProperty(exports, "config", { enumerable: true, get: function () { return config_1.config; } });
var controlcenter_1 = require("./controlcenter");
Object.defineProperty(exports, "controlcenter", { enumerable: true, get: function () { return controlcenter_1.controlcenter; } });
var cpdp_1 = require("./cpdp");
Object.defineProperty(exports, "cpdp", { enumerable: true, get: function () { return cpdp_1.cpdp; } });
var csip_1 = require("./csip");
Object.defineProperty(exports, "csip", { enumerable: true, get: function () { return csip_1.csip; } });
var csxg_1 = require("./csxg");
Object.defineProperty(exports, "csxg", { enumerable: true, get: function () { return csxg_1.csxg; } });
var cvm_1 = require("./cvm");
Object.defineProperty(exports, "cvm", { enumerable: true, get: function () { return cvm_1.cvm; } });
var cwp_1 = require("./cwp");
Object.defineProperty(exports, "cwp", { enumerable: true, get: function () { return cwp_1.cwp; } });
var cws_1 = require("./cws");
Object.defineProperty(exports, "cws", { enumerable: true, get: function () { return cws_1.cws; } });
var cynosdb_1 = require("./cynosdb");
Object.defineProperty(exports, "cynosdb", { enumerable: true, get: function () { return cynosdb_1.cynosdb; } });
var dasb_1 = require("./dasb");
Object.defineProperty(exports, "dasb", { enumerable: true, get: function () { return dasb_1.dasb; } });
var dataintegration_1 = require("./dataintegration");
Object.defineProperty(exports, "dataintegration", { enumerable: true, get: function () { return dataintegration_1.dataintegration; } });
var dayu_1 = require("./dayu");
Object.defineProperty(exports, "dayu", { enumerable: true, get: function () { return dayu_1.dayu; } });
var dbbrain_1 = require("./dbbrain");
Object.defineProperty(exports, "dbbrain", { enumerable: true, get: function () { return dbbrain_1.dbbrain; } });
var dbdc_1 = require("./dbdc");
Object.defineProperty(exports, "dbdc", { enumerable: true, get: function () { return dbdc_1.dbdc; } });
var dc_1 = require("./dc");
Object.defineProperty(exports, "dc", { enumerable: true, get: function () { return dc_1.dc; } });
var dcdb_1 = require("./dcdb");
Object.defineProperty(exports, "dcdb", { enumerable: true, get: function () { return dcdb_1.dcdb; } });
var dlc_1 = require("./dlc");
Object.defineProperty(exports, "dlc", { enumerable: true, get: function () { return dlc_1.dlc; } });
var dnspod_1 = require("./dnspod");
Object.defineProperty(exports, "dnspod", { enumerable: true, get: function () { return dnspod_1.dnspod; } });
var domain_1 = require("./domain");
Object.defineProperty(exports, "domain", { enumerable: true, get: function () { return domain_1.domain; } });
var drm_1 = require("./drm");
Object.defineProperty(exports, "drm", { enumerable: true, get: function () { return drm_1.drm; } });
var ds_1 = require("./ds");
Object.defineProperty(exports, "ds", { enumerable: true, get: function () { return ds_1.ds; } });
var dsgc_1 = require("./dsgc");
Object.defineProperty(exports, "dsgc", { enumerable: true, get: function () { return dsgc_1.dsgc; } });
var dtf_1 = require("./dtf");
Object.defineProperty(exports, "dtf", { enumerable: true, get: function () { return dtf_1.dtf; } });
var dts_1 = require("./dts");
Object.defineProperty(exports, "dts", { enumerable: true, get: function () { return dts_1.dts; } });
var eb_1 = require("./eb");
Object.defineProperty(exports, "eb", { enumerable: true, get: function () { return eb_1.eb; } });
var ecc_1 = require("./ecc");
Object.defineProperty(exports, "ecc", { enumerable: true, get: function () { return ecc_1.ecc; } });
var ecdn_1 = require("./ecdn");
Object.defineProperty(exports, "ecdn", { enumerable: true, get: function () { return ecdn_1.ecdn; } });
var ecm_1 = require("./ecm");
Object.defineProperty(exports, "ecm", { enumerable: true, get: function () { return ecm_1.ecm; } });
var eiam_1 = require("./eiam");
Object.defineProperty(exports, "eiam", { enumerable: true, get: function () { return eiam_1.eiam; } });
var eis_1 = require("./eis");
Object.defineProperty(exports, "eis", { enumerable: true, get: function () { return eis_1.eis; } });
var emr_1 = require("./emr");
Object.defineProperty(exports, "emr", { enumerable: true, get: function () { return emr_1.emr; } });
var es_1 = require("./es");
Object.defineProperty(exports, "es", { enumerable: true, get: function () { return es_1.es; } });
var ess_1 = require("./ess");
Object.defineProperty(exports, "ess", { enumerable: true, get: function () { return ess_1.ess; } });
var essbasic_1 = require("./essbasic");
Object.defineProperty(exports, "essbasic", { enumerable: true, get: function () { return essbasic_1.essbasic; } });
var facefusion_1 = require("./facefusion");
Object.defineProperty(exports, "facefusion", { enumerable: true, get: function () { return facefusion_1.facefusion; } });
var faceid_1 = require("./faceid");
Object.defineProperty(exports, "faceid", { enumerable: true, get: function () { return faceid_1.faceid; } });
var fmu_1 = require("./fmu");
Object.defineProperty(exports, "fmu", { enumerable: true, get: function () { return fmu_1.fmu; } });
var ft_1 = require("./ft");
Object.defineProperty(exports, "ft", { enumerable: true, get: function () { return ft_1.ft; } });
var gaap_1 = require("./gaap");
Object.defineProperty(exports, "gaap", { enumerable: true, get: function () { return gaap_1.gaap; } });
var gme_1 = require("./gme");
Object.defineProperty(exports, "gme", { enumerable: true, get: function () { return gme_1.gme; } });
var goosefs_1 = require("./goosefs");
Object.defineProperty(exports, "goosefs", { enumerable: true, get: function () { return goosefs_1.goosefs; } });
var gpm_1 = require("./gpm");
Object.defineProperty(exports, "gpm", { enumerable: true, get: function () { return gpm_1.gpm; } });
var gs_1 = require("./gs");
Object.defineProperty(exports, "gs", { enumerable: true, get: function () { return gs_1.gs; } });
var gse_1 = require("./gse");
Object.defineProperty(exports, "gse", { enumerable: true, get: function () { return gse_1.gse; } });
var gwlb_1 = require("./gwlb");
Object.defineProperty(exports, "gwlb", { enumerable: true, get: function () { return gwlb_1.gwlb; } });
var habo_1 = require("./habo");
Object.defineProperty(exports, "habo", { enumerable: true, get: function () { return habo_1.habo; } });
var hai_1 = require("./hai");
Object.defineProperty(exports, "hai", { enumerable: true, get: function () { return hai_1.hai; } });
var hasim_1 = require("./hasim");
Object.defineProperty(exports, "hasim", { enumerable: true, get: function () { return hasim_1.hasim; } });
var hcm_1 = require("./hcm");
Object.defineProperty(exports, "hcm", { enumerable: true, get: function () { return hcm_1.hcm; } });
var hunyuan_1 = require("./hunyuan");
Object.defineProperty(exports, "hunyuan", { enumerable: true, get: function () { return hunyuan_1.hunyuan; } });
var iai_1 = require("./iai");
Object.defineProperty(exports, "iai", { enumerable: true, get: function () { return iai_1.iai; } });
var iap_1 = require("./iap");
Object.defineProperty(exports, "iap", { enumerable: true, get: function () { return iap_1.iap; } });
var ic_1 = require("./ic");
Object.defineProperty(exports, "ic", { enumerable: true, get: function () { return ic_1.ic; } });
var icr_1 = require("./icr");
Object.defineProperty(exports, "icr", { enumerable: true, get: function () { return icr_1.icr; } });
var ie_1 = require("./ie");
Object.defineProperty(exports, "ie", { enumerable: true, get: function () { return ie_1.ie; } });
var iecp_1 = require("./iecp");
Object.defineProperty(exports, "iecp", { enumerable: true, get: function () { return iecp_1.iecp; } });
var ig_1 = require("./ig");
Object.defineProperty(exports, "ig", { enumerable: true, get: function () { return ig_1.ig; } });
var iir_1 = require("./iir");
Object.defineProperty(exports, "iir", { enumerable: true, get: function () { return iir_1.iir; } });
var ims_1 = require("./ims");
Object.defineProperty(exports, "ims", { enumerable: true, get: function () { return ims_1.ims; } });
var ioa_1 = require("./ioa");
Object.defineProperty(exports, "ioa", { enumerable: true, get: function () { return ioa_1.ioa; } });
var iot_1 = require("./iot");
Object.defineProperty(exports, "iot", { enumerable: true, get: function () { return iot_1.iot; } });
var iotcloud_1 = require("./iotcloud");
Object.defineProperty(exports, "iotcloud", { enumerable: true, get: function () { return iotcloud_1.iotcloud; } });
var iotexplorer_1 = require("./iotexplorer");
Object.defineProperty(exports, "iotexplorer", { enumerable: true, get: function () { return iotexplorer_1.iotexplorer; } });
var iottid_1 = require("./iottid");
Object.defineProperty(exports, "iottid", { enumerable: true, get: function () { return iottid_1.iottid; } });
var iotvideo_1 = require("./iotvideo");
Object.defineProperty(exports, "iotvideo", { enumerable: true, get: function () { return iotvideo_1.iotvideo; } });
var iotvideoindustry_1 = require("./iotvideoindustry");
Object.defineProperty(exports, "iotvideoindustry", { enumerable: true, get: function () { return iotvideoindustry_1.iotvideoindustry; } });
var irp_1 = require("./irp");
Object.defineProperty(exports, "irp", { enumerable: true, get: function () { return irp_1.irp; } });
var iss_1 = require("./iss");
Object.defineProperty(exports, "iss", { enumerable: true, get: function () { return iss_1.iss; } });
var ivld_1 = require("./ivld");
Object.defineProperty(exports, "ivld", { enumerable: true, get: function () { return ivld_1.ivld; } });
var keewidb_1 = require("./keewidb");
Object.defineProperty(exports, "keewidb", { enumerable: true, get: function () { return keewidb_1.keewidb; } });
var kms_1 = require("./kms");
Object.defineProperty(exports, "kms", { enumerable: true, get: function () { return kms_1.kms; } });
var lcic_1 = require("./lcic");
Object.defineProperty(exports, "lcic", { enumerable: true, get: function () { return lcic_1.lcic; } });
var lighthouse_1 = require("./lighthouse");
Object.defineProperty(exports, "lighthouse", { enumerable: true, get: function () { return lighthouse_1.lighthouse; } });
var live_1 = require("./live");
Object.defineProperty(exports, "live", { enumerable: true, get: function () { return live_1.live; } });
var lke_1 = require("./lke");
Object.defineProperty(exports, "lke", { enumerable: true, get: function () { return lke_1.lke; } });
var lkeap_1 = require("./lkeap");
Object.defineProperty(exports, "lkeap", { enumerable: true, get: function () { return lkeap_1.lkeap; } });
var lowcode_1 = require("./lowcode");
Object.defineProperty(exports, "lowcode", { enumerable: true, get: function () { return lowcode_1.lowcode; } });
var lp_1 = require("./lp");
Object.defineProperty(exports, "lp", { enumerable: true, get: function () { return lp_1.lp; } });
var mall_1 = require("./mall");
Object.defineProperty(exports, "mall", { enumerable: true, get: function () { return mall_1.mall; } });
var mariadb_1 = require("./mariadb");
Object.defineProperty(exports, "mariadb", { enumerable: true, get: function () { return mariadb_1.mariadb; } });
var market_1 = require("./market");
Object.defineProperty(exports, "market", { enumerable: true, get: function () { return market_1.market; } });
var memcached_1 = require("./memcached");
Object.defineProperty(exports, "memcached", { enumerable: true, get: function () { return memcached_1.memcached; } });
var mgobe_1 = require("./mgobe");
Object.defineProperty(exports, "mgobe", { enumerable: true, get: function () { return mgobe_1.mgobe; } });
var mmps_1 = require("./mmps");
Object.defineProperty(exports, "mmps", { enumerable: true, get: function () { return mmps_1.mmps; } });
var mna_1 = require("./mna");
Object.defineProperty(exports, "mna", { enumerable: true, get: function () { return mna_1.mna; } });
var mongodb_1 = require("./mongodb");
Object.defineProperty(exports, "mongodb", { enumerable: true, get: function () { return mongodb_1.mongodb; } });
var monitor_1 = require("./monitor");
Object.defineProperty(exports, "monitor", { enumerable: true, get: function () { return monitor_1.monitor; } });
var mps_1 = require("./mps");
Object.defineProperty(exports, "mps", { enumerable: true, get: function () { return mps_1.mps; } });
var mqtt_1 = require("./mqtt");
Object.defineProperty(exports, "mqtt", { enumerable: true, get: function () { return mqtt_1.mqtt; } });
var mrs_1 = require("./mrs");
Object.defineProperty(exports, "mrs", { enumerable: true, get: function () { return mrs_1.mrs; } });
var ms_1 = require("./ms");
Object.defineProperty(exports, "ms", { enumerable: true, get: function () { return ms_1.ms; } });
var msp_1 = require("./msp");
Object.defineProperty(exports, "msp", { enumerable: true, get: function () { return msp_1.msp; } });
var mvj_1 = require("./mvj");
Object.defineProperty(exports, "mvj", { enumerable: true, get: function () { return mvj_1.mvj; } });
var nlp_1 = require("./nlp");
Object.defineProperty(exports, "nlp", { enumerable: true, get: function () { return nlp_1.nlp; } });
var npp_1 = require("./npp");
Object.defineProperty(exports, "npp", { enumerable: true, get: function () { return npp_1.npp; } });
var oceanus_1 = require("./oceanus");
Object.defineProperty(exports, "oceanus", { enumerable: true, get: function () { return oceanus_1.oceanus; } });
var ocr_1 = require("./ocr");
Object.defineProperty(exports, "ocr", { enumerable: true, get: function () { return ocr_1.ocr; } });
var omics_1 = require("./omics");
Object.defineProperty(exports, "omics", { enumerable: true, get: function () { return omics_1.omics; } });
var organization_1 = require("./organization");
Object.defineProperty(exports, "organization", { enumerable: true, get: function () { return organization_1.organization; } });
var partners_1 = require("./partners");
Object.defineProperty(exports, "partners", { enumerable: true, get: function () { return partners_1.partners; } });
var pds_1 = require("./pds");
Object.defineProperty(exports, "pds", { enumerable: true, get: function () { return pds_1.pds; } });
var postgres_1 = require("./postgres");
Object.defineProperty(exports, "postgres", { enumerable: true, get: function () { return postgres_1.postgres; } });
var privatedns_1 = require("./privatedns");
Object.defineProperty(exports, "privatedns", { enumerable: true, get: function () { return privatedns_1.privatedns; } });
var pts_1 = require("./pts");
Object.defineProperty(exports, "pts", { enumerable: true, get: function () { return pts_1.pts; } });
var rce_1 = require("./rce");
Object.defineProperty(exports, "rce", { enumerable: true, get: function () { return rce_1.rce; } });
var redis_1 = require("./redis");
Object.defineProperty(exports, "redis", { enumerable: true, get: function () { return redis_1.redis; } });
var region_1 = require("./region");
Object.defineProperty(exports, "region", { enumerable: true, get: function () { return region_1.region; } });
var rkp_1 = require("./rkp");
Object.defineProperty(exports, "rkp", { enumerable: true, get: function () { return rkp_1.rkp; } });
var rp_1 = require("./rp");
Object.defineProperty(exports, "rp", { enumerable: true, get: function () { return rp_1.rp; } });
var rum_1 = require("./rum");
Object.defineProperty(exports, "rum", { enumerable: true, get: function () { return rum_1.rum; } });
var scf_1 = require("./scf");
Object.defineProperty(exports, "scf", { enumerable: true, get: function () { return scf_1.scf; } });
var ses_1 = require("./ses");
Object.defineProperty(exports, "ses", { enumerable: true, get: function () { return ses_1.ses; } });
var smh_1 = require("./smh");
Object.defineProperty(exports, "smh", { enumerable: true, get: function () { return smh_1.smh; } });
var smop_1 = require("./smop");
Object.defineProperty(exports, "smop", { enumerable: true, get: function () { return smop_1.smop; } });
var smpn_1 = require("./smpn");
Object.defineProperty(exports, "smpn", { enumerable: true, get: function () { return smpn_1.smpn; } });
var sms_1 = require("./sms");
Object.defineProperty(exports, "sms", { enumerable: true, get: function () { return sms_1.sms; } });
var soe_1 = require("./soe");
Object.defineProperty(exports, "soe", { enumerable: true, get: function () { return soe_1.soe; } });
var solar_1 = require("./solar");
Object.defineProperty(exports, "solar", { enumerable: true, get: function () { return solar_1.solar; } });
var sqlserver_1 = require("./sqlserver");
Object.defineProperty(exports, "sqlserver", { enumerable: true, get: function () { return sqlserver_1.sqlserver; } });
var ssa_1 = require("./ssa");
Object.defineProperty(exports, "ssa", { enumerable: true, get: function () { return ssa_1.ssa; } });
var ssl_1 = require("./ssl");
Object.defineProperty(exports, "ssl", { enumerable: true, get: function () { return ssl_1.ssl; } });
var sslpod_1 = require("./sslpod");
Object.defineProperty(exports, "sslpod", { enumerable: true, get: function () { return sslpod_1.sslpod; } });
var ssm_1 = require("./ssm");
Object.defineProperty(exports, "ssm", { enumerable: true, get: function () { return ssm_1.ssm; } });
var sts_1 = require("./sts");
Object.defineProperty(exports, "sts", { enumerable: true, get: function () { return sts_1.sts; } });
var svp_1 = require("./svp");
Object.defineProperty(exports, "svp", { enumerable: true, get: function () { return svp_1.svp; } });
var taf_1 = require("./taf");
Object.defineProperty(exports, "taf", { enumerable: true, get: function () { return taf_1.taf; } });
var tag_1 = require("./tag");
Object.defineProperty(exports, "tag", { enumerable: true, get: function () { return tag_1.tag; } });
var tan_1 = require("./tan");
Object.defineProperty(exports, "tan", { enumerable: true, get: function () { return tan_1.tan; } });
var tat_1 = require("./tat");
Object.defineProperty(exports, "tat", { enumerable: true, get: function () { return tat_1.tat; } });
var tav_1 = require("./tav");
Object.defineProperty(exports, "tav", { enumerable: true, get: function () { return tav_1.tav; } });
var tbaas_1 = require("./tbaas");
Object.defineProperty(exports, "tbaas", { enumerable: true, get: function () { return tbaas_1.tbaas; } });
var tbm_1 = require("./tbm");
Object.defineProperty(exports, "tbm", { enumerable: true, get: function () { return tbm_1.tbm; } });
var tbp_1 = require("./tbp");
Object.defineProperty(exports, "tbp", { enumerable: true, get: function () { return tbp_1.tbp; } });
var tcaplusdb_1 = require("./tcaplusdb");
Object.defineProperty(exports, "tcaplusdb", { enumerable: true, get: function () { return tcaplusdb_1.tcaplusdb; } });
var tcb_1 = require("./tcb");
Object.defineProperty(exports, "tcb", { enumerable: true, get: function () { return tcb_1.tcb; } });
var tcbr_1 = require("./tcbr");
Object.defineProperty(exports, "tcbr", { enumerable: true, get: function () { return tcbr_1.tcbr; } });
var tccatalog_1 = require("./tccatalog");
Object.defineProperty(exports, "tccatalog", { enumerable: true, get: function () { return tccatalog_1.tccatalog; } });
var tcex_1 = require("./tcex");
Object.defineProperty(exports, "tcex", { enumerable: true, get: function () { return tcex_1.tcex; } });
var tchd_1 = require("./tchd");
Object.defineProperty(exports, "tchd", { enumerable: true, get: function () { return tchd_1.tchd; } });
var tci_1 = require("./tci");
Object.defineProperty(exports, "tci", { enumerable: true, get: function () { return tci_1.tci; } });
var tcm_1 = require("./tcm");
Object.defineProperty(exports, "tcm", { enumerable: true, get: function () { return tcm_1.tcm; } });
var tcr_1 = require("./tcr");
Object.defineProperty(exports, "tcr", { enumerable: true, get: function () { return tcr_1.tcr; } });
var tcss_1 = require("./tcss");
Object.defineProperty(exports, "tcss", { enumerable: true, get: function () { return tcss_1.tcss; } });
var tdcpg_1 = require("./tdcpg");
Object.defineProperty(exports, "tdcpg", { enumerable: true, get: function () { return tdcpg_1.tdcpg; } });
var tdid_1 = require("./tdid");
Object.defineProperty(exports, "tdid", { enumerable: true, get: function () { return tdid_1.tdid; } });
var tdmq_1 = require("./tdmq");
Object.defineProperty(exports, "tdmq", { enumerable: true, get: function () { return tdmq_1.tdmq; } });
var tds_1 = require("./tds");
Object.defineProperty(exports, "tds", { enumerable: true, get: function () { return tds_1.tds; } });
var tem_1 = require("./tem");
Object.defineProperty(exports, "tem", { enumerable: true, get: function () { return tem_1.tem; } });
var teo_1 = require("./teo");
Object.defineProperty(exports, "teo", { enumerable: true, get: function () { return teo_1.teo; } });
var thpc_1 = require("./thpc");
Object.defineProperty(exports, "thpc", { enumerable: true, get: function () { return thpc_1.thpc; } });
var tia_1 = require("./tia");
Object.defineProperty(exports, "tia", { enumerable: true, get: function () { return tia_1.tia; } });
var tic_1 = require("./tic");
Object.defineProperty(exports, "tic", { enumerable: true, get: function () { return tic_1.tic; } });
var ticm_1 = require("./ticm");
Object.defineProperty(exports, "ticm", { enumerable: true, get: function () { return ticm_1.ticm; } });
var tics_1 = require("./tics");
Object.defineProperty(exports, "tics", { enumerable: true, get: function () { return tics_1.tics; } });
var tiems_1 = require("./tiems");
Object.defineProperty(exports, "tiems", { enumerable: true, get: function () { return tiems_1.tiems; } });
var tiia_1 = require("./tiia");
Object.defineProperty(exports, "tiia", { enumerable: true, get: function () { return tiia_1.tiia; } });
var tione_1 = require("./tione");
Object.defineProperty(exports, "tione", { enumerable: true, get: function () { return tione_1.tione; } });
var tiw_1 = require("./tiw");
Object.defineProperty(exports, "tiw", { enumerable: true, get: function () { return tiw_1.tiw; } });
var tke_1 = require("./tke");
Object.defineProperty(exports, "tke", { enumerable: true, get: function () { return tke_1.tke; } });
var tkgdq_1 = require("./tkgdq");
Object.defineProperty(exports, "tkgdq", { enumerable: true, get: function () { return tkgdq_1.tkgdq; } });
var tms_1 = require("./tms");
Object.defineProperty(exports, "tms", { enumerable: true, get: function () { return tms_1.tms; } });
var tmt_1 = require("./tmt");
Object.defineProperty(exports, "tmt", { enumerable: true, get: function () { return tmt_1.tmt; } });
var tourism_1 = require("./tourism");
Object.defineProperty(exports, "tourism", { enumerable: true, get: function () { return tourism_1.tourism; } });
var trdp_1 = require("./trdp");
Object.defineProperty(exports, "trdp", { enumerable: true, get: function () { return trdp_1.trdp; } });
var trocket_1 = require("./trocket");
Object.defineProperty(exports, "trocket", { enumerable: true, get: function () { return trocket_1.trocket; } });
var trp_1 = require("./trp");
Object.defineProperty(exports, "trp", { enumerable: true, get: function () { return trp_1.trp; } });
var trro_1 = require("./trro");
Object.defineProperty(exports, "trro", { enumerable: true, get: function () { return trro_1.trro; } });
var trtc_1 = require("./trtc");
Object.defineProperty(exports, "trtc", { enumerable: true, get: function () { return trtc_1.trtc; } });
var tse_1 = require("./tse");
Object.defineProperty(exports, "tse", { enumerable: true, get: function () { return tse_1.tse; } });
var tsf_1 = require("./tsf");
Object.defineProperty(exports, "tsf", { enumerable: true, get: function () { return tsf_1.tsf; } });
var tsi_1 = require("./tsi");
Object.defineProperty(exports, "tsi", { enumerable: true, get: function () { return tsi_1.tsi; } });
var tsw_1 = require("./tsw");
Object.defineProperty(exports, "tsw", { enumerable: true, get: function () { return tsw_1.tsw; } });
var tts_1 = require("./tts");
Object.defineProperty(exports, "tts", { enumerable: true, get: function () { return tts_1.tts; } });
var ump_1 = require("./ump");
Object.defineProperty(exports, "ump", { enumerable: true, get: function () { return ump_1.ump; } });
var vcg_1 = require("./vcg");
Object.defineProperty(exports, "vcg", { enumerable: true, get: function () { return vcg_1.vcg; } });
var vclm_1 = require("./vclm");
Object.defineProperty(exports, "vclm", { enumerable: true, get: function () { return vclm_1.vclm; } });
var vcube_1 = require("./vcube");
Object.defineProperty(exports, "vcube", { enumerable: true, get: function () { return vcube_1.vcube; } });
var vdb_1 = require("./vdb");
Object.defineProperty(exports, "vdb", { enumerable: true, get: function () { return vdb_1.vdb; } });
var vm_1 = require("./vm");
Object.defineProperty(exports, "vm", { enumerable: true, get: function () { return vm_1.vm; } });
var vms_1 = require("./vms");
Object.defineProperty(exports, "vms", { enumerable: true, get: function () { return vms_1.vms; } });
var vod_1 = require("./vod");
Object.defineProperty(exports, "vod", { enumerable: true, get: function () { return vod_1.vod; } });
var vpc_1 = require("./vpc");
Object.defineProperty(exports, "vpc", { enumerable: true, get: function () { return vpc_1.vpc; } });
var vrs_1 = require("./vrs");
Object.defineProperty(exports, "vrs", { enumerable: true, get: function () { return vrs_1.vrs; } });
var vtc_1 = require("./vtc");
Object.defineProperty(exports, "vtc", { enumerable: true, get: function () { return vtc_1.vtc; } });
var waf_1 = require("./waf");
Object.defineProperty(exports, "waf", { enumerable: true, get: function () { return waf_1.waf; } });
var wav_1 = require("./wav");
Object.defineProperty(exports, "wav", { enumerable: true, get: function () { return wav_1.wav; } });
var wedata_1 = require("./wedata");
Object.defineProperty(exports, "wedata", { enumerable: true, get: function () { return wedata_1.wedata; } });
var weilingwith_1 = require("./weilingwith");
Object.defineProperty(exports, "weilingwith", { enumerable: true, get: function () { return weilingwith_1.weilingwith; } });
var wss_1 = require("./wss");
Object.defineProperty(exports, "wss", { enumerable: true, get: function () { return wss_1.wss; } });
var yinsuda_1 = require("./yinsuda");
Object.defineProperty(exports, "yinsuda", { enumerable: true, get: function () { return yinsuda_1.yinsuda; } });
var youmall_1 = require("./youmall");
Object.defineProperty(exports, "youmall", { enumerable: true, get: function () { return youmall_1.youmall; } });
var yunjing_1 = require("./yunjing");
Object.defineProperty(exports, "yunjing", { enumerable: true, get: function () { return yunjing_1.yunjing; } });
var yunsou_1 = require("./yunsou");
Object.defineProperty(exports, "yunsou", { enumerable: true, get: function () { return yunsou_1.yunsou; } });

}, function(modId) { var map = {"./aa":1738984248557,"./aai":1738984248569,"./aca":1738984248573,"./acp":1738984248577,"./advisor":1738984248581,"./af":1738984248585,"./afc":1738984248589,"./aiart":1738984248593,"./ame":1738984248597,"./ams":1738984248601,"./anicloud":1738984248608,"./antiddos":1738984248612,"./apcas":1738984248616,"./ape":1738984248620,"./api":1738984248624,"./apigateway":1738984248628,"./apm":1738984248632,"./as":1738984248636,"./asr":1738984248640,"./asw":1738984248644,"./ba":1738984248648,"./batch":1738984248652,"./bda":1738984248656,"./bh":1738984248660,"./bi":1738984248664,"./billing":1738984248668,"./bizlive":1738984248672,"./bm":1738984248676,"./bma":1738984248680,"./bmeip":1738984248687,"./bmlb":1738984248691,"./bmvpc":1738984248695,"./bpaas":1738984248699,"./bri":1738984248703,"./bsca":1738984248707,"./btoe":1738984248711,"./ca":1738984248718,"./cam":1738984248722,"./captcha":1738984248726,"./car":1738984248730,"./cat":1738984248734,"./cbs":1738984248738,"./ccc":1738984248742,"./cdb":1738984248746,"./cdc":1738984248750,"./cdn":1738984248754,"./cds":1738984248758,"./cdwch":1738984248762,"./cdwdoris":1738984248766,"./cdwpg":1738984248770,"./cdz":1738984248774,"./cfg":1738984248778,"./cfs":1738984248782,"./cfw":1738984248786,"./chdfs":1738984248790,"./ciam":1738984248797,"./cii":1738984248801,"./cim":1738984248808,"./cis":1738984248812,"./ckafka":1738984248816,"./clb":1738984248820,"./cloudapp":1738984248824,"./cloudaudit":1738984248828,"./cloudhsm":1738984248832,"./cloudstudio":1738984248836,"./cls":1738984248840,"./cme":1738984248844,"./cmq":1738984248848,"./cms":1738984248852,"./config":1738984248856,"./controlcenter":1738984248860,"./cpdp":1738984248864,"./csip":1738984248868,"./csxg":1738984248872,"./cvm":1738984248876,"./cwp":1738984248880,"./cws":1738984248884,"./cynosdb":1738984248888,"./dasb":1738984248892,"./dataintegration":1738984248896,"./dayu":1738984248900,"./dbbrain":1738984248904,"./dbdc":1738984248911,"./dc":1738984248915,"./dcdb":1738984248919,"./dlc":1738984248923,"./dnspod":1738984248927,"./domain":1738984248931,"./drm":1738984248935,"./ds":1738984248939,"./dsgc":1738984248943,"./dtf":1738984248947,"./dts":1738984248951,"./eb":1738984248958,"./ecc":1738984248962,"./ecdn":1738984248966,"./ecm":1738984248970,"./eiam":1738984248974,"./eis":1738984248978,"./emr":1738984248985,"./es":1738984248989,"./ess":1738984248993,"./essbasic":1738984248997,"./facefusion":1738984249004,"./faceid":1738984249011,"./fmu":1738984249015,"./ft":1738984249019,"./gaap":1738984249023,"./gme":1738984249027,"./goosefs":1738984249031,"./gpm":1738984249035,"./gs":1738984249039,"./gse":1738984249043,"./gwlb":1738984249047,"./habo":1738984249051,"./hai":1738984249055,"./hasim":1738984249059,"./hcm":1738984249063,"./hunyuan":1738984249067,"./iai":1738984249071,"./iap":1738984249078,"./ic":1738984249082,"./icr":1738984249086,"./ie":1738984249090,"./iecp":1738984249094,"./ig":1738984249098,"./iir":1738984249102,"./ims":1738984249106,"./ioa":1738984249113,"./iot":1738984249117,"./iotcloud":1738984249121,"./iotexplorer":1738984249128,"./iottid":1738984249132,"./iotvideo":1738984249136,"./iotvideoindustry":1738984249146,"./irp":1738984249150,"./iss":1738984249157,"./ivld":1738984249161,"./keewidb":1738984249165,"./kms":1738984249169,"./lcic":1738984249173,"./lighthouse":1738984249177,"./live":1738984249181,"./lke":1738984249185,"./lkeap":1738984249189,"./lowcode":1738984249193,"./lp":1738984249197,"./mall":1738984249201,"./mariadb":1738984249205,"./market":1738984249209,"./memcached":1738984249213,"./mgobe":1738984249217,"./mmps":1738984249224,"./mna":1738984249228,"./mongodb":1738984249232,"./monitor":1738984249239,"./mps":1738984249243,"./mqtt":1738984249247,"./mrs":1738984249251,"./ms":1738984249255,"./msp":1738984249259,"./mvj":1738984249263,"./nlp":1738984249267,"./npp":1738984249271,"./oceanus":1738984249275,"./ocr":1738984249279,"./omics":1738984249283,"./organization":1738984249287,"./partners":1738984249294,"./pds":1738984249298,"./postgres":1738984249302,"./privatedns":1738984249306,"./pts":1738984249310,"./rce":1738984249314,"./redis":1738984249318,"./region":1738984249322,"./rkp":1738984249326,"./rp":1738984249330,"./rum":1738984249334,"./scf":1738984249338,"./ses":1738984249342,"./smh":1738984249346,"./smop":1738984249350,"./smpn":1738984249354,"./sms":1738984249358,"./soe":1738984249365,"./solar":1738984249369,"./sqlserver":1738984249373,"./ssa":1738984249377,"./ssl":1738984249381,"./sslpod":1738984249385,"./ssm":1738984249389,"./sts":1738984249393,"./svp":1738984249397,"./taf":1738984249401,"./tag":1738984249405,"./tan":1738984249409,"./tat":1738984249413,"./tav":1738984249417,"./tbaas":1738984249421,"./tbm":1738984249425,"./tbp":1738984249429,"./tcaplusdb":1738984249436,"./tcb":1738984249440,"./tcbr":1738984249444,"./tccatalog":1738984249448,"./tcex":1738984249452,"./tchd":1738984249456,"./tci":1738984249460,"./tcm":1738984249464,"./tcr":1738984249468,"./tcss":1738984249472,"./tdcpg":1738984249476,"./tdid":1738984249480,"./tdmq":1738984249484,"./tds":1738984249488,"./tem":1738984249492,"./teo":1738984249499,"./thpc":1738984249506,"./tia":1738984249516,"./tic":1738984249520,"./ticm":1738984249524,"./tics":1738984249528,"./tiems":1738984249532,"./tiia":1738984249536,"./tione":1738984249540,"./tiw":1738984249547,"./tke":1738984249551,"./tkgdq":1738984249558,"./tms":1738984249562,"./tmt":1738984249569,"./tourism":1738984249573,"./trdp":1738984249577,"./trocket":1738984249581,"./trp":1738984249585,"./trro":1738984249589,"./trtc":1738984249593,"./tse":1738984249597,"./tsf":1738984249601,"./tsi":1738984249605,"./tsw":1738984249609,"./tts":1738984249616,"./ump":1738984249620,"./vcg":1738984249624,"./vclm":1738984249628,"./vcube":1738984249632,"./vdb":1738984249636,"./vm":1738984249640,"./vms":1738984249650,"./vod":1738984249654,"./vpc":1738984249661,"./vrs":1738984249665,"./vtc":1738984249669,"./waf":1738984249673,"./wav":1738984249677,"./wedata":1738984249681,"./weilingwith":1738984249685,"./wss":1738984249689,"./yinsuda":1738984249693,"./youmall":1738984249697,"./yunjing":1738984249701,"./yunsou":1738984249705}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248557, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.aa = void 0;
const v20200224_1 = require("./v20200224");
exports.aa = {
    v20200224: v20200224_1.v20200224,
};

}, function(modId) { var map = {"./v20200224":1738984248558}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248558, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200224 = void 0;
const Models = require("./aa_models");
const aa_client_1 = require("./aa_client");
exports.v20200224 = {
    Client: aa_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./aa_models":1738984248559,"./aa_client":1738984248560}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248559, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248560, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * aa client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("aa.tencentcloudapi.com", "2020-02-24", clientConfig);
    }
    /**
     * 腾讯云活动防刷（ActivityAntiRush，AA）是针对电商、O2O、P2P、游戏、支付等行业在促销活动中遇到“羊毛党”恶意刷取优惠福利的行为时，通过防刷引擎，精准识别出“薅羊毛”恶意行为的活动防刷服务，避免了企业被刷带来的巨大经济损失。
     */
    async QueryActivityAntiRush(req, cb) {
        return this.request("QueryActivityAntiRush", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248561, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractClient = void 0;
const sdk_version_1 = require("./sdk_version");
const interface_1 = require("./interface");
const sign_1 = require("./sign");
const http_connection_1 = require("./http/http_connection");
const tencent_cloud_sdk_exception_1 = require("./exception/tencent_cloud_sdk_exception");
const sse_response_model_1 = require("./sse_response_model");
const uuid_1 = require("uuid");
/**
 * @inner
 */
class AbstractClient {
    /**
     * 实例化client对象
     * @param {string} endpoint 接入点域名
     * @param {string} version 产品版本
     * @param {Credential} credential 认证信息实例
     * @param {string} region 产品地域
     * @param {ClientProfile} profile 可选配置实例
     */
    constructor(endpoint, version, { credential, region, profile = {} }) {
        this.path = "/";
        /**
         * 认证信息实例
         */
        if (credential && "getCredential" in credential) {
            this.credential = credential;
        }
        else {
            this.credential = Object.assign({
                secretId: null,
                secretKey: null,
                token: null,
            }, credential);
        }
        /**
         * 产品地域
         */
        this.region = region || null;
        this.sdkVersion = "SDK_NODEJS_" + sdk_version_1.sdkVersion;
        this.apiVersion = version;
        this.endpoint = (profile && profile.httpProfile && profile.httpProfile.endpoint) || endpoint;
        /**
         * 可选配置实例
         * @type {ClientProfile}
         */
        this.profile = {
            signMethod: (profile && profile.signMethod) || "TC3-HMAC-SHA256",
            httpProfile: Object.assign({
                reqMethod: "POST",
                endpoint: null,
                protocol: "https://",
                reqTimeout: 60,
            }, profile && profile.httpProfile),
            language: profile.language,
        };
        if (this.profile.language && !interface_1.SUPPORT_LANGUAGE_LIST.includes(this.profile.language)) {
            throw new tencent_cloud_sdk_exception_1.default(`Language invalid, choices: ${interface_1.SUPPORT_LANGUAGE_LIST.join("|")}`);
        }
    }
    async getCredential() {
        if ("getCredential" in this.credential) {
            return await this.credential.getCredential();
        }
        return this.credential;
    }
    /**
     * @inner
     */
    async request(action, req, options, cb) {
        if (typeof options === "function") {
            cb = options;
            options = {};
        }
        try {
            const result = await this.doRequest(action, req !== null && req !== void 0 ? req : {}, options);
            cb && cb(null, result);
            return result;
        }
        catch (e) {
            cb && cb(e, null);
            throw e;
        }
    }
    /**
     * @inner
     */
    async requestOctetStream(action, req, options, cb) {
        if (typeof options === "function") {
            cb = options;
            options = {};
        }
        try {
            const result = await this.doRequest(action, req !== null && req !== void 0 ? req : {}, Object.assign({}, options, {
                headers: {
                    "Content-Type": "application/octet-stream; charset=utf-8",
                },
            }));
            cb && cb(null, result);
            return result;
        }
        catch (e) {
            cb && cb(e, null);
            throw e;
        }
    }
    /**
     * @inner
     */
    async doRequest(action, req, options = {}) {
        if (this.profile.signMethod === "TC3-HMAC-SHA256") {
            return this.doRequestWithSign3(action, req, options);
        }
        let params = this.mergeData(req);
        params = await this.formatRequestData(action, params);
        const headers = Object.assign({}, this.profile.httpProfile.headers, options.headers);
        let traceId = "";
        for (let key in headers) {
            if (key.toLowerCase() === "x-tc-traceid") {
                traceId = headers[key];
                break;
            }
        }
        if (!traceId) {
            traceId = uuid_1.v4();
            headers["X-TC-TraceId"] = traceId;
        }
        let res;
        try {
            res = await http_connection_1.HttpConnection.doRequest({
                method: this.profile.httpProfile.reqMethod,
                url: this.profile.httpProfile.protocol + this.endpoint + this.path,
                data: params,
                timeout: this.profile.httpProfile.reqTimeout * 1000,
                headers,
                agent: this.profile.httpProfile.agent,
                proxy: this.profile.httpProfile.proxy,
                signal: options.signal,
            });
        }
        catch (error) {
            throw new tencent_cloud_sdk_exception_1.default(error.message, "", traceId);
        }
        return this.parseResponse(res);
    }
    /**
     * @inner
     */
    async doRequestWithSign3(action, params, options = {}) {
        const headers = Object.assign({}, this.profile.httpProfile.headers, options.headers);
        let traceId = "";
        for (let key in headers) {
            if (key.toLowerCase() === "x-tc-traceid") {
                traceId = headers[key];
                break;
            }
        }
        if (!traceId) {
            traceId = uuid_1.v4();
            headers["X-TC-TraceId"] = traceId;
        }
        let res;
        try {
            const credential = await this.getCredential();
            res = await http_connection_1.HttpConnection.doRequestWithSign3({
                method: this.profile.httpProfile.reqMethod,
                url: this.profile.httpProfile.protocol + this.endpoint + this.path,
                secretId: credential.secretId,
                secretKey: credential.secretKey,
                region: this.region,
                data: params || "",
                service: this.endpoint.split(".")[0],
                action: action,
                version: this.apiVersion,
                multipart: options && options.multipart,
                timeout: this.profile.httpProfile.reqTimeout * 1000,
                token: credential.token,
                requestClient: this.sdkVersion,
                language: this.profile.language,
                headers,
                agent: this.profile.httpProfile.agent,
                proxy: this.profile.httpProfile.proxy,
                signal: options.signal,
            });
        }
        catch (e) {
            throw new tencent_cloud_sdk_exception_1.default(e.message, "", traceId);
        }
        return this.parseResponse(res);
    }
    async parseResponse(res) {
        const traceId = res.headers.get("x-tc-traceid");
        if (res.status !== 200) {
            const tcError = new tencent_cloud_sdk_exception_1.default(res.statusText, "", traceId);
            tcError.httpCode = res.status;
            throw tcError;
        }
        else {
            if (res.headers.get("content-type") === "text/event-stream") {
                return new sse_response_model_1.SSEResponseModel(res.body);
            }
            else {
                const data = await res.json();
                if (data.Response.Error) {
                    const tcError = new tencent_cloud_sdk_exception_1.default(data.Response.Error.Message, data.Response.RequestId, traceId);
                    tcError.code = data.Response.Error.Code;
                    throw tcError;
                }
                else {
                    return data.Response;
                }
            }
        }
    }
    /**
     * @inner
     */
    mergeData(data, prefix = "") {
        const ret = {};
        for (const k in data) {
            if (data[k] === null || data[k] === undefined) {
                continue;
            }
            if (data[k] instanceof Array || data[k] instanceof Object) {
                Object.assign(ret, this.mergeData(data[k], prefix + k + "."));
            }
            else {
                ret[prefix + k] = data[k];
            }
        }
        return ret;
    }
    /**
     * @inner
     */
    async formatRequestData(action, params) {
        params.Action = action;
        params.RequestClient = this.sdkVersion;
        params.Nonce = Math.round(Math.random() * 65535);
        params.Timestamp = Math.round(Date.now() / 1000);
        params.Version = this.apiVersion;
        const credential = await this.getCredential();
        if (credential.secretId) {
            params.SecretId = credential.secretId;
        }
        if (this.region) {
            params.Region = this.region;
        }
        if (credential.token) {
            params.Token = credential.token;
        }
        if (this.profile.language) {
            params.Language = this.profile.language;
        }
        if (this.profile.signMethod) {
            params.SignatureMethod = this.profile.signMethod;
        }
        const signStr = this.formatSignString(params);
        params.Signature = sign_1.default.sign(credential.secretKey, signStr, this.profile.signMethod);
        return params;
    }
    /**
     * @inner
     */
    formatSignString(params) {
        let strParam = "";
        const keys = Object.keys(params);
        keys.sort();
        for (const k in keys) {
            if (!keys.hasOwnProperty(k)) {
                continue;
            }
            //k = k.replace(/_/g, '.');
            strParam += "&" + keys[k] + "=" + params[keys[k]];
        }
        const strSign = this.profile.httpProfile.reqMethod.toLocaleUpperCase() +
            this.endpoint +
            this.path +
            "?" +
            strParam.slice(1);
        return strSign;
    }
}
exports.AbstractClient = AbstractClient;

}, function(modId) { var map = {"./sdk_version":1738984248562,"./interface":1738984248563,"./sign":1738984248564,"./http/http_connection":1738984248566,"./exception/tencent_cloud_sdk_exception":1738984248565,"./sse_response_model":1738984248568}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248562, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.sdkVersion = void 0;
exports.sdkVersion = "4.0.1025";

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248563, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.SUPPORT_LANGUAGE_LIST = void 0;
/**
 * ClientProfile.language 属性支持的取值列表
 */
exports.SUPPORT_LANGUAGE_LIST = ["zh-CN", "en-US"];

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248564, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
const tencent_cloud_sdk_exception_1 = require("./exception/tencent_cloud_sdk_exception");
const crypto = require("crypto");
const url_1 = require("url");
const JSONBigInt = require("json-bigint");
const JSONbigNative = JSONBigInt({ useNativeBigInt: true });
/**
 * @inner
 */
class Sign {
    static sign(secretKey, signStr, signMethod) {
        const signMethodMap = {
            HmacSHA1: "sha1",
            HmacSHA256: "sha256",
        };
        if (!signMethodMap.hasOwnProperty(signMethod)) {
            throw new tencent_cloud_sdk_exception_1.default("signMethod invalid, signMethod only support (HmacSHA1, HmacSHA256)");
        }
        const hmac = crypto.createHmac(signMethodMap[signMethod], secretKey || "");
        return hmac.update(Buffer.from(signStr, "utf8")).digest("base64");
    }
    static sign3({ method = "POST", url = "", payload, timestamp, service, secretId, secretKey, multipart, boundary, headers: configHeaders = {}, }) {
        const urlObj = new url_1.URL(url);
        const contentType = configHeaders["Content-Type"];
        // 通用头部
        let headers = "";
        let signedHeaders = "";
        if (method === "GET") {
            signedHeaders = "content-type";
            headers = `content-type:${contentType}\n`;
        }
        else if (method === "POST") {
            signedHeaders = "content-type";
            if (multipart) {
                headers = `content-type:multipart/form-data; boundary=${boundary}\n`;
            }
            else {
                headers = `content-type:${contentType}\n`;
            }
        }
        headers += `host:${urlObj.hostname}\n`;
        signedHeaders += ";host";
        const path = urlObj.pathname;
        const querystring = urlObj.search.slice(1);
        let payload_hash = "";
        if (multipart) {
            const hash = crypto.createHash("sha256");
            hash.update(`--${boundary}`);
            for (const key in payload) {
                const content = payload[key];
                if (Buffer.isBuffer(content)) {
                    hash.update(`\r\nContent-Disposition: form-data; name="${key}"\r\nContent-Type: application/octet-stream\r\n\r\n`);
                    hash.update(content);
                    hash.update("\r\n");
                }
                else if (typeof content === "string") {
                    hash.update(`\r\nContent-Disposition: form-data; name="${key}"\r\n\r\n`);
                    hash.update(`${content}\r\n`);
                }
                hash.update(`--${boundary}`);
            }
            hash.update(`--\r\n`);
            payload_hash = hash.digest("hex");
        }
        else {
            const hashMessage = Buffer.isBuffer(payload) ? payload : JSONbigNative.stringify(payload);
            payload_hash = payload ? getHash(hashMessage) : getHash("");
        }
        const canonicalRequest = method +
            "\n" +
            path +
            "\n" +
            querystring +
            "\n" +
            headers +
            "\n" +
            signedHeaders +
            "\n" +
            payload_hash;
        const date = getDate(timestamp);
        const StringToSign = "TC3-HMAC-SHA256" +
            "\n" +
            timestamp +
            "\n" +
            `${date}/${service}/tc3_request` +
            "\n" +
            getHash(canonicalRequest);
        const kDate = sha256(date, "TC3" + secretKey);
        const kService = sha256(service, kDate);
        const kSigning = sha256("tc3_request", kService);
        const signature = sha256(StringToSign, kSigning, "hex");
        return `TC3-HMAC-SHA256 Credential=${secretId}/${date}/${service}/tc3_request, SignedHeaders=${signedHeaders}, Signature=${signature}`;
    }
}
exports.default = Sign;
function sha256(message, secret = "", encoding) {
    const hmac = crypto.createHmac("sha256", secret);
    return hmac.update(message).digest(encoding);
}
function getHash(message, encoding = "hex") {
    const hash = crypto.createHash("sha256");
    return hash.update(message).digest(encoding);
}
function getDate(timestamp) {
    const date = new Date(timestamp * 1000);
    const year = date.getUTCFullYear();
    const month = ("0" + (date.getUTCMonth() + 1)).slice(-2);
    const day = ("0" + date.getUTCDate()).slice(-2);
    return `${year}-${month}-${day}`;
}

}, function(modId) { var map = {"./exception/tencent_cloud_sdk_exception":1738984248565}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248565, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @inner
 */
class TencentCloudSDKHttpException extends Error {
    constructor(error, requestId = "", traceId = "") {
        super(error);
        this.requestId = requestId || "";
        this.traceId = traceId || "";
    }
    getMessage() {
        return this.message;
    }
    getRequestId() {
        return this.requestId;
    }
    getTraceId() {
        return this.traceId;
    }
    toString() {
        return ("[TencentCloudSDKException]" +
            "message:" +
            this.getMessage() +
            "  requestId:" +
            this.getRequestId() +
            "  traceId:" +
            this.getTraceId());
    }
    toLocaleString() {
        return ("[TencentCloudSDKException]" +
            "message:" +
            this.getMessage() +
            "  requestId:" +
            this.getRequestId() +
            "  traceId:" +
            this.getTraceId());
    }
}
exports.default = TencentCloudSDKHttpException;

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248566, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpConnection = void 0;
const QueryString = require("querystring");
const url_1 = require("url");
const isStream = require("is-stream");
const getStream = require("get-stream");
const FormData = require("form-data");
const sign_1 = require("../sign");
const fetch_1 = require("./fetch");
const JSONBigInt = require("json-bigint");
const JSONbigNative = JSONBigInt({ useNativeBigInt: true });
/**
 * @inner
 */
class HttpConnection {
    static async doRequest({ method, url, data, timeout, headers = {}, agent, proxy, signal, }) {
        const config = {
            method: method,
            headers: Object.assign({}, headers),
            timeout,
            agent,
            proxy,
            signal,
        };
        if (method === "GET") {
            url += "?" + QueryString.stringify(data);
        }
        else {
            config.headers["Content-Type"] = "application/x-www-form-urlencoded";
            config.body = QueryString.stringify(data);
        }
        return await fetch_1.default(url, config);
    }
    static async doRequestWithSign3({ method, url, data, service, action, region, version, secretId, secretKey, multipart = false, timeout = 60000, token, requestClient, language, headers = {}, agent, proxy, signal, }) {
        // data 中可能带有 readStream，由于需要计算整个 body 的 hash，
        // 所以这里把 readStream 转为 Buffer
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        await convertReadStreamToBuffer(data);
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        data = deepRemoveNull(data);
        const timestamp = parseInt(String(new Date().getTime() / 1000));
        method = method.toUpperCase();
        let payload = "";
        if (method === "GET") {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            data = mergeData(data);
            url += "?" + QueryString.stringify(data);
        }
        if (method === "POST") {
            payload = data;
        }
        const config = {
            method,
            timeout,
            headers: Object.assign({}, headers, {
                Host: new url_1.URL(url).host,
                "X-TC-Action": action,
                "X-TC-Region": region,
                "X-TC-Timestamp": timestamp,
                "X-TC-Version": version,
                "X-TC-Token": token,
                "X-TC-RequestClient": requestClient,
            }),
            agent,
            proxy,
            signal,
        };
        if (token === null || token === undefined) {
            delete config.headers["X-TC-Token"];
        }
        if (region === null || region === undefined) {
            delete config.headers["X-TC-Region"];
        }
        if (language) {
            config.headers["X-TC-Language"] = language;
        }
        let form;
        if (method === "GET") {
            config.headers["Content-Type"] = "application/x-www-form-urlencoded";
        }
        if (method === "POST" && !multipart) {
            config.body = data;
            const contentType = config.headers["Content-Type"] || "application/json";
            if (!isBuffer(data))
                config.body = JSONbigNative.stringify(data);
            config.headers["Content-Type"] = contentType;
        }
        if (method === "POST" && multipart) {
            form = new FormData();
            for (const key in data) {
                form.append(key, data[key]);
            }
            config.body = form;
            config.headers = Object.assign({}, config.headers, form.getHeaders());
        }
        const signature = sign_1.default.sign3({
            method,
            url,
            payload,
            timestamp,
            service,
            secretId,
            secretKey,
            multipart,
            boundary: form ? form.getBoundary() : undefined,
            headers: config.headers,
        });
        config.headers["Authorization"] = signature;
        return await fetch_1.default(url, config);
    }
}
exports.HttpConnection = HttpConnection;
async function convertReadStreamToBuffer(data) {
    for (const key in data) {
        if (isStream(data[key])) {
            data[key] = await getStream.buffer(data[key]);
        }
    }
}
function mergeData(data, prefix = "") {
    const ret = {};
    for (const k in data) {
        if (data[k] === null) {
            continue;
        }
        if (data[k] instanceof Array || data[k] instanceof Object) {
            Object.assign(ret, mergeData(data[k], prefix + k + "."));
        }
        else {
            ret[prefix + k] = data[k];
        }
    }
    return ret;
}
function deepRemoveNull(obj) {
    if (isArray(obj)) {
        return obj.map(deepRemoveNull);
    }
    else if (isObject(obj)) {
        const result = {};
        for (const key in obj) {
            const value = obj[key];
            if (!isNull(value)) {
                result[key] = deepRemoveNull(value);
            }
        }
        return result;
    }
    else {
        return obj;
    }
}
function isBuffer(x) {
    return Buffer.isBuffer(x);
}
function isArray(x) {
    return Array.isArray(x);
}
function isObject(x) {
    return typeof x === "object" && !isArray(x) && !isStream(x) && !isBuffer(x) && x !== null;
}
function isNull(x) {
    return x === null;
}

}, function(modId) { var map = {"../sign":1738984248564,"./fetch":1738984248567}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248567, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const HttpsProxyAgent = require("https-proxy-agent");
function default_1(url, options) {
    const instanceOptions = options || {};
    const proxy = options.proxy || process.env.http_proxy;
    if (!options.agent && proxy) {
        instanceOptions.agent = new HttpsProxyAgent(proxy);
    }
    return node_fetch_1.default(url, instanceOptions);
}
exports.default = default_1;

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248568, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.SSEResponseModel = void 0;
const events_1 = require("events");
class SSEEventEmitter extends events_1.EventEmitter {
}
class SSEResponseModel {
    constructor(stream) {
        this.stream = stream;
        this.eventSource = new SSEEventEmitter();
        this.init();
    }
    /**
     * @inner
     */
    init() {
        const { stream, eventSource } = this;
        stream.on("data", (chunk) => {
            if (chunk !== null) {
                const messages = chunk.toString().split("\n\n");
                for (let i = 0; i < messages.length; i++) {
                    if (messages[i].length > 0) {
                        eventSource.emit("message", this.parseSSEMessage(messages[i]));
                    }
                }
            }
        });
        stream.on("close", () => {
            eventSource.emit("close");
        });
        stream.on("error", (err) => {
            eventSource.emit("error", err);
        });
    }
    /**
     * @inner
     */
    parseSSEMessage(chunk) {
        const message = {
            data: "",
            event: "",
            id: "",
            retry: undefined,
        };
        const lines = chunk.split("\n");
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            // line is of format "<field>:<value>" or "<field>: <value>"
            const colonIndex = line.indexOf(":");
            if (colonIndex <= 0)
                continue; // exclude comments and lines with no values
            const field = line.slice(0, colonIndex);
            const value = line.slice(colonIndex + (line[colonIndex + 1] === " " ? 2 : 1));
            switch (field) {
                case "data":
                    message.data = message.data ? message.data + "\n" + value : value;
                    break;
                case "event":
                    message.event = value;
                    break;
                case "id":
                    message.id = value;
                    break;
                case "retry":
                    const retry = parseInt(value, 10);
                    if (!isNaN(retry)) {
                        // per spec, ignore non-integers
                        message.retry = retry;
                    }
                    break;
            }
        }
        return message;
    }
    on(event, listener) {
        this.eventSource.on(event, listener);
        return this;
    }
    removeListener(event, listener) {
        this.eventSource.removeListener(event, listener);
        return this;
    }
    async *[Symbol.asyncIterator]() {
        for await (const chunk of this.stream) {
            if (chunk !== null) {
                const messages = chunk.toString().split("\n\n");
                for (let i = 0; i < messages.length; i++) {
                    if (messages[i].length > 0) {
                        yield this.parseSSEMessage(messages[i]);
                    }
                }
            }
        }
    }
}
exports.SSEResponseModel = SSEResponseModel;

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248569, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.aai = void 0;
const v20180522_1 = require("./v20180522");
exports.aai = {
    v20180522: v20180522_1.v20180522,
};

}, function(modId) { var map = {"./v20180522":1738984248570}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248570, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180522 = void 0;
const Models = require("./aai_models");
const aai_client_1 = require("./aai_client");
exports.v20180522 = {
    Client: aai_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./aai_models":1738984248571,"./aai_client":1738984248572}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248571, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248572, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * aai client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("aai.tencentcloudapi.com", "2018-05-22", clientConfig);
    }
    /**
     * 该接口是实时流式识别，可同时返回语音识别文本及翻译文本，当前仅支持中文和英文。该接口可配合同传windows客户端，提供会议现场同传服务。
     */
    async SimultaneousInterpreting(req, cb) {
        return this.request("SimultaneousInterpreting", req, cb);
    }
    /**
     * 识别60s内的短语音，当音频放在请求body中传输时整个请求大小不能超过600KB，当音频以url方式传输时，音频时长不可超过60s。所有请求参数放在post的body中采用x-www-form-urlencoded（数据转换成一个字符串（name1=value1&name2=value2…）进行urlencode后）编码传输。现暂只支持中文普通话识别，支持识别8k(16k)的16bit的mp3或者wav音频。
     */
    async SentenceRecognition(req, cb) {
        return this.request("SentenceRecognition", req, cb);
    }
    /**
     * 提供基于文本的基础聊天能力，可以让您的应用快速拥有具备深度语义理解的机器聊天功能。
     */
    async Chat(req, cb) {
        return this.request("Chat", req, cb);
    }
    /**
     * 腾讯云语音合成技术（TTS）可以将任意文本转化为语音，实现让机器和应用张口说话。
腾讯TTS技术可以应用到很多场景，比如，移动APP语音播报新闻；智能设备语音提醒；依靠网上现有节目或少量录音，快速合成明星语音，降低邀约成本；支持车载导航语音合成的个性化语音播报。
内测期间免费使用。
     */
    async TextToVoice(req, cb) {
        return this.request("TextToVoice", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248573, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.aca = void 0;
const v20210323_1 = require("./v20210323");
exports.aca = {
    v20210323: v20210323_1.v20210323,
};

}, function(modId) { var map = {"./v20210323":1738984248574}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248574, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210323 = void 0;
const Models = require("./aca_models");
const aca_client_1 = require("./aca_client");
exports.v20210323 = {
    Client: aca_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./aca_models":1738984248575,"./aca_client":1738984248576}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248575, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248576, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * aca client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("aca.tencentcloudapi.com", "2021-03-23", clientConfig);
    }
    /**
     * 登录获取token
     */
    async LoginHisTool(req, cb) {
        return this.request("LoginHisTool", req, cb);
    }
    /**
     * 药品适应症接口
     */
    async GetDrugIndications(req, cb) {
        return this.request("GetDrugIndications", req, cb);
    }
    /**
     * 登出
     */
    async LoginOutHisTool(req, cb) {
        return this.request("LoginOutHisTool", req, cb);
    }
    /**
     * 辅诊智能预测接口
     */
    async SmartPredict(req, cb) {
        return this.request("SmartPredict", req, cb);
    }
    /**
     * 智能用药接口
     */
    async SmartDrugInfo(req, cb) {
        return this.request("SmartDrugInfo", req, cb);
    }
    /**
     * 用于院方科室管理，获取科室列表和状态、新增或修改科室信息、删除科室。
     */
    async SyncDepartment(req, cb) {
        return this.request("SyncDepartment", req, cb);
    }
    /**
     * 同步标准字典，如给药频次、给药途径、科室、诊断等
     */
    async SyncStandardDict(req, cb) {
        return this.request("SyncStandardDict", req, cb);
    }
    /**
     * 药品同步，一次同步数据不要超过500个
     */
    async UploadDrugs(req, cb) {
        return this.request("UploadDrugs", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248577, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.acp = void 0;
const v20220105_1 = require("./v20220105");
exports.acp = {
    v20220105: v20220105_1.v20220105,
};

}, function(modId) { var map = {"./v20220105":1738984248578}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248578, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220105 = void 0;
const Models = require("./acp_models");
const acp_client_1 = require("./acp_client");
exports.v20220105 = {
    Client: acp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./acp_models":1738984248579,"./acp_client":1738984248580}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248579, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248580, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * acp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("acp.tencentcloudapi.com", "2022-01-05", clientConfig);
    }
    /**
     * 创建应用合规隐私诊断任务
     */
    async CreateAppScanTask(req, cb) {
        return this.request("CreateAppScanTask", req, cb);
    }
    /**
     * App应用合规隐私诊断重试任务
     */
    async CreateAppScanTaskRepeat(req, cb) {
        return this.request("CreateAppScanTaskRepeat", req, cb);
    }
    /**
     * 获取子渠道的App合规诊断任务报告url
     */
    async DescribeChannelTaskReportUrl(req, cb) {
        return this.request("DescribeChannelTaskReportUrl", req, cb);
    }
    /**
     * 查询应用合规平台用户资源的使用情况
     */
    async DescribeResourceUsageInfo(req, cb) {
        return this.request("DescribeResourceUsageInfo", req, cb);
    }
    /**
     * 查询App隐私合规诊断任务状态
     */
    async DescribeScanTaskStatus(req, cb) {
        return this.request("DescribeScanTaskStatus", req, cb);
    }
    /**
     * 获取App合规诊断任务报告url
     */
    async DescribeScanTaskReportUrl(req, cb) {
        return this.request("DescribeScanTaskReportUrl", req, cb);
    }
    /**
     * 获取应用合规文件上传凭证，用于上传诊断文件
     */
    async DescribeFileTicket(req, cb) {
        return this.request("DescribeFileTicket", req, cb);
    }
    /**
     * 获取App隐私合规诊断任务列表
     */
    async DescribeScanTaskList(req, cb) {
        return this.request("DescribeScanTaskList", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248581, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.advisor = void 0;
const v20200721_1 = require("./v20200721");
exports.advisor = {
    v20200721: v20200721_1.v20200721,
};

}, function(modId) { var map = {"./v20200721":1738984248582}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248582, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200721 = void 0;
const Models = require("./advisor_models");
const advisor_client_1 = require("./advisor_client");
exports.v20200721 = {
    Client: advisor_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./advisor_models":1738984248583,"./advisor_client":1738984248584}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248583, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248584, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * advisor client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("advisor.tencentcloudapi.com", "2020-07-21", clientConfig);
    }
    /**
     * 查询评估项风险实例列表
     */
    async DescribeTaskStrategyRisks(req, cb) {
        return this.request("DescribeTaskStrategyRisks", req, cb);
    }
    /**
     * 用于查询评估项的信息
     */
    async DescribeStrategies(req, cb) {
        return this.request("DescribeStrategies", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248585, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.af = void 0;
const v20200226_1 = require("./v20200226");
exports.af = {
    v20200226: v20200226_1.v20200226,
};

}, function(modId) { var map = {"./v20200226":1738984248586}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248586, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200226 = void 0;
const Models = require("./af_models");
const af_client_1 = require("./af_client");
exports.v20200226 = {
    Client: af_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./af_models":1738984248587,"./af_client":1738984248588}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248587, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248588, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * af client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("af.tencentcloudapi.com", "2020-02-26", clientConfig);
    }
    /**
     * 天御反欺诈服务，主要应用于银行、证券、保险、消费金融等金融行业客户，通过腾讯的大数据风控能力，
可以准确识别恶意用户信息，解决客户在支付、活动、理财，风控等业务环节遇到的欺诈威胁，降低企业
的损失。
     */
    async QueryAntiFraud(req, cb) {
        return this.request("QueryAntiFraud", req, cb);
    }
    /**
     * 反欺诈评分接口
     */
    async GetAntiFraud(req, cb) {
        return this.request("GetAntiFraud", req, cb);
    }
    /**
     * 该接口未在使用，后端地址已无法访问，经查近60天日志无正常业务访问记录，申请预下线。

天御反欺诈服务，主要应用于银行、证券、保险、消费金融等金融行业客户，通过腾讯的大数据风控能力，
可以准确识别恶意用户信息，解决客户在支付、活动、理财，风控等业务环节遇到的欺诈威胁，降低企业
的损失。
     */
    async DescribeAntiFraud(req, cb) {
        return this.request("DescribeAntiFraud", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248589, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.afc = void 0;
const v20200226_1 = require("./v20200226");
exports.afc = {
    v20200226: v20200226_1.v20200226,
};

}, function(modId) { var map = {"./v20200226":1738984248590}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248590, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200226 = void 0;
const Models = require("./afc_models");
const afc_client_1 = require("./afc_client");
exports.v20200226 = {
    Client: afc_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./afc_models":1738984248591,"./afc_client":1738984248592}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248591, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248592, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * afc client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("afc.tencentcloudapi.com", "2020-02-26", clientConfig);
    }
    /**
     * 天御反欺诈服务，主要应用于银行、证券、保险、P2P等金融行业客户，通过腾讯的大数据风控能力，
可以准确识别恶意用户信息，解决客户在支付、活动、理财，风控等业务环节遇到的欺诈威胁，降低企业
的损失。
     */
    async QueryAntiFraudVip(req, cb) {
        return this.request("QueryAntiFraudVip", req, cb);
    }
    /**
     * 反欺诈VIP评分接口
     */
    async GetAntiFraudVip(req, cb) {
        return this.request("GetAntiFraudVip", req, cb);
    }
    /**
     * 天御信鸽取数平台接口
     */
    async TransportGeneralInterface(req, cb) {
        return this.request("TransportGeneralInterface", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248593, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.aiart = void 0;
const v20221229_1 = require("./v20221229");
exports.aiart = {
    v20221229: v20221229_1.v20221229,
};

}, function(modId) { var map = {"./v20221229":1738984248594}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248594, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20221229 = void 0;
const Models = require("./aiart_models");
const aiart_client_1 = require("./aiart_client");
exports.v20221229 = {
    Client: aiart_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./aiart_models":1738984248595,"./aiart_client":1738984248596}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248595, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248596, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * aiart client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("aiart.tencentcloudapi.com", "2022-12-29", clientConfig);
    }
    /**
     * 表情动图生成接口将静态照片制作成动态的表情包。分为提交任务和查询任务2个接口。

- 提交任务：提交一个表情动图生成异步任务，获得任务 ID。
- 查询任务：根据任务 ID 查询任务的处理状态、处理结果，任务处理完成后可获得生成图像结果。

表情动图生成默认提供1个并发，代表最多能同时处理1个已提交的任务，上一个任务处理完毕后才能开始处理下一个任务。
     */
    async SubmitMemeJob(req, cb) {
        return this.request("SubmitMemeJob", req, cb);
    }
    /**
     * 线稿生图接口支持上传一张黑白线稿图，按照指定的主体对象以及样式、颜色、材质、风格等的文本描述prompt ，对线稿图进行色彩填充与细节描绘，得到一张完整绘制的图像。生成图分辨率默认为1024:1024。
线稿生图默认提供1个并发任务数，代表最多能同时处理1个已提交的任务，上一个任务处理完毕后才能开始处理下一个任务。
     */
    async SketchToImage(req, cb) {
        return this.request("SketchToImage", req, cb);
    }
    /**
     * 本接口已迁移至腾讯混元大模型-混元生图，即将停止此处维护，可切换至 [混元生图 API](https://cloud.tencent.com/document/product/1729/105969) 继续使用。
文生图（高级版）接口基于高级版文生图大模型，将根据输入的文本描述，智能生成与之相关的结果图。分为提交任务和查询任务2个接口。
提交任务：输入文本等，提交一个文生图（高级版）异步任务，获得任务 ID。
查询任务：根据任务 ID 查询任务的处理状态、处理结果，任务处理完成后可获得生成图像结果。
并发任务数（并发）说明：并发任务数指能同时处理的任务数量。文生图（高级版）默认提供1个并发任务数，代表最多能同时处理1个已提交的任务，上一个任务处理完毕后才能开始处理下一个任务。
     */
    async SubmitTextToImageProJob(req, cb) {
        return this.request("SubmitTextToImageProJob", req, cb);
    }
    /**
     * 商品背景生成接口根据指定的背景描述 Prompt，将商品图中的原背景替换为自定义的新背景并保留商品主体形象，实现商品背景的自由生成与更换。

商品背景生成默认提供1个并发任务数，代表最多能同时处理1个已提交的任务，上一个任务处理完毕后才能开始处理下一个任务。
     */
    async ReplaceBackground(req, cb) {
        return this.request("ReplaceBackground", req, cb);
    }
    /**
     * AI 写真分为上传训练图片、训练写真模型（可选跳过）、生成写真图片3个环节，需要依次调用对应接口。
如果选择免训练模式无需调用本接口。
训练模型分为提交任务和查询任务2个接口：
- 提交训练写真模型任务：完成上传图片后，提交一个训练写真模型异步任务，根据写真模型 ID 开始训练模型。
- 查询训练写真模型任务：根据写真模型 ID 查询训练任务的处理状态、处理结果。

每个写真模型自训练完成起1年内有效，有效期内可使用写真模型 ID 生成图片，期满后需要重新训练。
提交训练写真模型任务按并发计费，无默认并发额度。
     */
    async SubmitTrainPortraitModelJob(req, cb) {
        return this.request("SubmitTrainPortraitModelJob", req, cb);
    }
    /**
     * 扩图接口支持对输入图像按指定宽高比实现智能扩图。
默认提供1个并发，代表最多能同时处理1个已提交的任务。
     */
    async ImageOutpainting(req, cb) {
        return this.request("ImageOutpainting", req, cb);
    }
    /**
     * 百变头像接口将根据输入的人像照片，生成风格百变的头像。
百变头像默认提供1个并发任务数，代表最多能同时处理1个已提交的任务，上一个任务处理完毕后才能开始处理下一个任务。
     */
    async GenerateAvatar(req, cb) {
        return this.request("GenerateAvatar", req, cb);
    }
    /**
     * 表情动图生成接口将静态照片制作成动态的表情包。分为提交任务和查询任务2个接口。
- 提交任务：提交一个表情动图生成异步任务，获得任务 ID。
- 查询任务：根据任务 ID 查询任务的处理状态、处理结果，任务处理完成后可获得生成图像结果。

表情动图生成默认提供1个并发，代表最多能同时处理1个已提交的任务，上一个任务处理完毕后才能开始处理下一个任务。
     */
    async QueryMemeJob(req, cb) {
        return this.request("QueryMemeJob", req, cb);
    }
    /**
     * AI 写真分为上传训练图片、训练写真模型（可选跳过）、生成写真图片3个环节，需要依次调用对应接口。
如果选择免训练模式无需调用本接口。
训练模型分为提交任务和查询任务2个接口：

- 提交训练写真模型任务：完成上传图片后，提交一个训练写真模型异步任务，根据写真模型 ID 开始训练模型。
- 查询训练写真模型任务：根据写真模型 ID 查询训练任务的处理状态、处理结果。

每个写真模型自训练完成起1年内有效，有效期内可使用写真模型 ID 生成图片，期满后需要重新训练。
     */
    async QueryTrainPortraitModelJob(req, cb) {
        return this.request("QueryTrainPortraitModelJob", req, cb);
    }
    /**
     * AI 写真分为上传训练图片、训练写真模型（可选跳过）、生成写真图片3个环节，需要依次调用对应接口。
生成图片分为提交任务和查询任务2个接口：

- 提交生成写真图片任务：选择风格模板，提交一个生成写真图片异步任务，根据写真模型 ID 生成写真图片，获得任务 ID。
- 查询生成写真图片任务：根据任务 ID 查询生成图片任务的处理状态、处理结果。

每个写真模型自训练完成起1年内有效，有效期内可使用写真模型 ID 生成图片，期满后需要重新训练。
     */
    async QueryDrawPortraitJob(req, cb) {
        return this.request("QueryDrawPortraitJob", req, cb);
    }
    /**
     * AI 写真分为上传训练图片、训练写真模型（可选跳过）、生成写真图片3个环节，需要依次调用对应接口。
本接口用于上传人像图片并指定对应的写真模型 ID。上传的图片要求是同一个人，建议上传单人、正脸、脸部区域占比较大、脸部清晰无遮挡、无大角度偏转、无夸张表情的图片。
可选模式：
- 常规训练模式：上传20 - 25张图片用于模型训练，完成训练后可生成写真图片。
- 快速训练模式：仅需上传1张图片用于模型训练，训练速度更快，完成训练后可生成写真图片。
- 免训练模式：仅需上传1张图片，跳过训练环节，直接生成写真图片。

上传写真训练图片默认提供1个并发。
     */
    async UploadTrainPortraitImages(req, cb) {
        return this.request("UploadTrainPortraitImages", req, cb);
    }
    /**
     * **本接口已迁移至腾讯混元大模型-文生图轻量版，即将停止此处维护，可切换至 [文生图轻量版 API](https://cloud.tencent.com/document/product/1729/108738) 继续使用。**

智能文生图接口基于文生图（标准版）模型，将根据输入的文本描述，智能生成与之相关的结果图。

智能文生图默认提供3个并发任务数，代表最多能同时处理3个已提交的任务，上一个任务处理完毕后才能开始处理下一个任务。
     */
    async TextToImage(req, cb) {
        return this.request("TextToImage", req, cb);
    }
    /**
     * 本接口已迁移至腾讯混元大模型-混元生图，即将停止此处维护，可切换至 [混元生图 API](https://cloud.tencent.com/document/product/1729/105970) 继续使用。
文生图（高级版）接口基于高级版文生图大模型，将根据输入的文本描述，智能生成与之相关的结果图。分为提交任务和查询任务2个接口。
提交任务：输入文本等，提交一个文生图（高级版）异步任务，获得任务 ID。
查询任务：根据任务 ID 查询任务的处理状态、处理结果，任务处理完成后可获得生成图像结果。
并发任务数（并发）说明：并发任务数指能同时处理的任务数量。文生图（高级版）默认提供1个并发任务数，代表最多能同时处理1个已提交的任务，上一个任务处理完毕后才能开始处理下一个任务。
     */
    async QueryTextToImageProJob(req, cb) {
        return this.request("QueryTextToImageProJob", req, cb);
    }
    /**
     * AI 写真分为上传训练图片、训练写真模型（可选跳过）、生成写真图片3个环节，需要依次调用对应接口。
生成图片分为提交任务和查询任务2个接口：

- 提交生成写真图片任务：选择风格模板，提交一个生成写真图片异步任务，根据写真模型 ID 生成写真图片，获得任务 ID。
- 查询生成写真图片任务：根据任务 ID 查询生成图片任务的处理状态、处理结果。

每个写真模型自训练完成起1年内有效，有效期内可使用写真模型 ID 生成图片，期满后需要重新训练。
提交生成写真图片任务默认提供1个并发。
     */
    async SubmitDrawPortraitJob(req, cb) {
        return this.request("SubmitDrawPortraitJob", req, cb);
    }
    /**
     * 局部消除接口通过图像 mask 指定需要消除的人、物、文字等区域，在选定区域对图像内容进行消除与重绘补全。
默认提供1个并发，代表最多能同时处理1个已提交的任务。
     */
    async ImageInpaintingRemoval(req, cb) {
        return this.request("ImageInpaintingRemoval", req, cb);
    }
    /**
     * 上传正面全身模特照和服装平铺图，生成模特换装后的图片。
生成的换装图片分辨率和模特照分辨率一致。
模特换装默认提供1个并发任务数，代表最多能同时处理1个已提交的任务，上一个任务处理完毕后才能开始处理下一个任务。
     */
    async ChangeClothes(req, cb) {
        return this.request("ChangeClothes", req, cb);
    }
    /**
     * 图像风格化（图生图）接口提供生成式的图生图风格转化能力，将根据输入的图像及文本描述，智能生成风格转化后的图像。建议避免输入人像过小、姿势复杂、人数较多的人像图片。
图像风格化（图生图）默认提供3个并发任务数，代表最多能同时处理3个已提交的任务，上一个任务处理完毕后才能开始处理下一个任务。
     */
    async ImageToImage(req, cb) {
        return this.request("ImageToImage", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248597, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ame = void 0;
const v20190916_1 = require("./v20190916");
exports.ame = {
    v20190916: v20190916_1.v20190916,
};

}, function(modId) { var map = {"./v20190916":1738984248598}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248598, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190916 = void 0;
const Models = require("./ame_models");
const ame_client_1 = require("./ame_client");
exports.v20190916 = {
    Client: ame_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ame_models":1738984248599,"./ame_client":1738984248600}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248599, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248600, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ame client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ame.tencentcloudapi.com", "2019-09-16", clientConfig);
    }
    /**
     * 获取已购曲库包列表接口
     */
    async DescribePackages(req, cb) {
        return this.request("DescribePackages", req, cb);
    }
    /**
     * 根据接口的模式及歌曲ID来取得歌词信息或者波形图信息。
     */
    async DescribeLyric(req, cb) {
        return this.request("DescribeLyric", req, cb);
    }
    /**
     * 该服务后续会停用，不再建议使用
     */
    async DescribeItems(req, cb) {
        return this.request("DescribeItems", req, cb);
    }
    /**
     * 获取授权项目信息列表
     */
    async DescribeAuthInfo(req, cb) {
        return this.request("DescribeAuthInfo", req, cb);
    }
    /**
     * 根据 Id 列表查询歌曲的详细信息，包含基础信息及播放信息。
     */
    async BatchDescribeKTVMusicDetails(req, cb) {
        return this.request("BatchDescribeKTVMusicDetails", req, cb);
    }
    /**
     * 获取授权项目下已购云音乐列表
     */
    async DescribeCloudMusicPurchased(req, cb) {
        return this.request("DescribeCloudMusicPurchased", req, cb);
    }
    /**
     * 根据购买曲库包用户可查询已回退的歌曲信息
     */
    async DescribePkgOfflineMusic(req, cb) {
        return this.request("DescribePkgOfflineMusic", req, cb);
    }
    /**
     * 根据歌手id，返回该歌手下歌曲列表。



     */
    async DescribeKTVSingerMusics(req, cb) {
        return this.request("DescribeKTVSingerMusics", req, cb);
    }
    /**
     * 获取曲库包歌曲播放信息接口
     */
    async DescribeMusic(req, cb) {
        return this.request("DescribeMusic", req, cb);
    }
    /**
     * 获取直播互动曲库联想词
     */
    async DescribeKTVSuggestions(req, cb) {
        return this.request("DescribeKTVSuggestions", req, cb);
    }
    /**
     * 根据资源方，需要变更的参数，请求该接口进行变更，为空的参数默认为无变更
     */
    async ModifyMusicOnShelves(req, cb) {
        return this.request("ModifyMusicOnShelves", req, cb);
    }
    /**
     * 获取直播互动曲库标签分组信息和标签信息
     */
    async DescribeKTVMusicTags(req, cb) {
        return this.request("DescribeKTVMusicTags", req, cb);
    }
    /**
     * 获取曲库包下已核销歌曲列表接口
     */
    async DescribePackageItems(req, cb) {
        return this.request("DescribePackageItems", req, cb);
    }
    /**
     * 根据资源方所传MusicId进行将歌曲进行下架，多个MusicId使用逗号隔开
     */
    async TakeMusicOffShelves(req, cb) {
        return this.request("TakeMusicOffShelves", req, cb);
    }
    /**
     * 获取直播互动曲库推荐歌单列表。
     */
    async DescribeKTVPlaylists(req, cb) {
        return this.request("DescribeKTVPlaylists", req, cb);
    }
    /**
     * 创建机器人，支持进入 RTC 房间，播放直播互动曲库歌曲。
     */
    async CreateKTVRobot(req, cb) {
        return this.request("CreateKTVRobot", req, cb);
    }
    /**
     * 下发操作机器人指令，支持播放、暂停、恢复、歌单设置等操作指令，实现对机器人行为的控制。
     */
    async SyncKTVRobotCommand(req, cb) {
        return this.request("SyncKTVRobotCommand", req, cb);
    }
    /**
     * 获取直播互动曲库歌曲的周榜和月榜
     */
    async DescribeKTVTopList(req, cb) {
        return this.request("DescribeKTVTopList", req, cb);
    }
    /**
     * 根据歌单 Id 获取歌单详情，包括歌单的基础信息以及歌曲列表。
     */
    async DescribeKTVPlaylistDetail(req, cb) {
        return this.request("DescribeKTVPlaylistDetail", req, cb);
    }
    /**
     * 客户上报用户数据功能，为了更好地为用户提供优质服务
     */
    async ReportData(req, cb) {
        return this.request("ReportData", req, cb);
    }
    /**
     * 获取直播互动曲库歌手分类信息
     */
    async DescribeKTVSingerCategories(req, cb) {
        return this.request("DescribeKTVSingerCategories", req, cb);
    }
    /**
     * 该服务后续会停用，不再建议使用
     */
    async DescribeStations(req, cb) {
        return this.request("DescribeStations", req, cb);
    }
    /**
     * 根据 Id 查询歌曲的详细信息，包含基础信息及播放信息。
     */
    async DescribeKTVMusicDetail(req, cb) {
        return this.request("DescribeKTVMusicDetail", req, cb);
    }
    /**
     * 根据歌曲ID查询歌曲信息
     */
    async DescribeItemById(req, cb) {
        return this.request("DescribeItemById", req, cb);
    }
    /**
     * 根据音乐信息查询音乐是否在售
     */
    async DescribeMusicSaleStatus(req, cb) {
        return this.request("DescribeMusicSaleStatus", req, cb);
    }
    /**
     * 根据过滤条件，返回匹配的歌手列表。
     */
    async DescribeKTVSingers(req, cb) {
        return this.request("DescribeKTVSingers", req, cb);
    }
    /**
     * 销毁机器人，机器人退出 RTC 房间。
     */
    async DestroyKTVRobot(req, cb) {
        return this.request("DestroyKTVRobot", req, cb);
    }
    /**
     * 获取云音乐播放信息接口
     */
    async DescribeCloudMusic(req, cb) {
        return this.request("DescribeCloudMusic", req, cb);
    }
    /**
     * 根据资源方所传歌曲信息，进行歌曲上架，多个歌曲同时请求时，需构造复合结构进行请求
     */
    async PutMusicOnTheShelves(req, cb) {
        return this.request("PutMusicOnTheShelves", req, cb);
    }
    /**
     * 获取机器人列表，支持 Id、状态等过滤条件。
     */
    async DescribeKTVRobots(req, cb) {
        return this.request("DescribeKTVRobots", req, cb);
    }
    /**
     * 根据搜索条件，返回匹配的歌曲列表。
     */
    async SearchKTVMusics(req, cb) {
        return this.request("SearchKTVMusics", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248601, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ams = void 0;
const v20200608_1 = require("./v20200608");
const v20201229_1 = require("./v20201229");
exports.ams = {
    v20200608: v20200608_1.v20200608,
    v20201229: v20201229_1.v20201229,
};

}, function(modId) { var map = {"./v20200608":1738984248602,"./v20201229":1738984248605}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248602, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200608 = void 0;
const Models = require("./ams_models");
const ams_client_1 = require("./ams_client");
exports.v20200608 = {
    Client: ams_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ams_models":1738984248603,"./ams_client":1738984248604}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248603, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248604, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ams client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ams.tencentcloudapi.com", "2020-06-08", clientConfig);
    }
    /**
     * 控制台识别统计
     */
    async DescribeAudioStat(req, cb) {
        return this.request("DescribeAudioStat", req, cb);
    }
    /**
     * 查看任务详情
     */
    async DescribeTaskDetail(req, cb) {
        return this.request("DescribeTaskDetail", req, cb);
    }
    /**
     * 创建业务配置，1个账号最多可以创建20个配置，可定义音频审核的场景，如色情、谩骂等，

在创建业务配置之前，你需要以下步骤：
1. 开通COS存储桶功能，新建存储桶，例如 cms_segments，用来存储 视频转换过程中生成对音频和图片。
2. 然后在COS控制台，授权天御内容安全主账号 对 cms_segments 存储桶对读写权限。具体授权操作，参考https://cloud.tencent.com/document/product/436/38648

     */
    async CreateBizConfig(req, cb) {
        return this.request("CreateBizConfig", req, cb);
    }
    /**
     * 查看单个配置
     */
    async DescribeBizConfig(req, cb) {
        return this.request("DescribeBizConfig", req, cb);
    }
    /**
     * 取消任务
     */
    async CancelTask(req, cb) {
        return this.request("CancelTask", req, cb);
    }
    /**
     * 本接口（Audio Moderation）用于提交音频内容（包括音频文件或流地址）进行智能审核任务，使用前请您登陆控制台开通音频内容安全服务。

### 功能使用说明：
- 前往“内容安全控制台-音频内容安全”开启使用音频内容安全服务，首次开通可获得20小时免费调用时长

### 接口功能说明：
- 支持对音频流或音频文件进行检测，判断其中是否包含违规内容；
- 支持设置回调地址 Callback 获取检测结果，或通过接口(查询音频检测结果)主动轮询获取检测结果；
- 支持识别违规内容，包括：低俗、谩骂、色情、涉政、广告等场景；
- 支持批量提交检测任务。检测任务列表最多支持10个；

### 音频文件调用说明：
- 音频文件大小支持：文件 < 500M；
- 音频文件时长支持：< 1小时；
- 音频码率类型支持：128 Kbps - 256 Kbps ；
- 音频文件支持格式：wav、mp3、aac、flac、amr、3gp、 m4a、wma、ogg、ape；
- 支持音视频文件分离并对音频文件进行独立识别；

### 音频流调用说明：
- 音频流时长支持：< 3小时；
- 音频码率类型支持：128 Kbps - 256 Kbps ；
- 音频流支持的传输协议：RTMP、HTTP、HTTPS；
- 音频流格式支持的类型：rtp、srtp、rtmp、rtmps、mmsh、 mmst、hls、http、tcp、https、m3u8；
- 支持音视频流分离并对音频流进行独立识别；
     */
    async CreateAudioModerationTask(req, cb) {
        return this.request("CreateAudioModerationTask", req, cb);
    }
    /**
     * 音频审核明细列表
     */
    async DescribeAmsList(req, cb) {
        return this.request("DescribeAmsList", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248605, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201229 = void 0;
const Models = require("./ams_models");
const ams_client_1 = require("./ams_client");
exports.v20201229 = {
    Client: ams_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ams_models":1738984248606,"./ams_client":1738984248607}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248606, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248607, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ams client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ams.tencentcloudapi.com", "2020-12-29", clientConfig);
    }
    /**
     * 本接口（Audio Moderation）用于提交音频内容（包括音频文件或流地址）进行智能审核任务，使用前请您使用腾讯云主账号登录控制台[开通音频内容安全服务](https://console.cloud.tencent.com/cms)并调整好对应的业务配置。<br>

### 功能使用说明：
- 前往“[内容安全控制台-音频内容安全](https://console.cloud.tencent.com/cms)”开启使用音频内容安全服务，首次开通可获得**10小时**免费调用时长，有效期为1个月。
- 默认接口请求频率限制：**20次/秒**，对于异步审核任务（点播音频），超出频率限制的请求会自动排入待审核队列，对于同步审核任务（直播音频），超出频率限制将会报错。
- 默认并发审核路数限制：点播默认10路，异步审核任务（点播音频）数量超过并发审核路数时，将会进入排队；直播默认100路，同步审核任务（直播音频）超过并发审核路数，接口会返回错误。

### 接口功能说明：
- 支持对音频流或音频文件进行检测，判断其中是否包含违规内容；
- 支持设置回调地址 Callback 获取检测结果（对于已在审核的任务，最长回调时间为用户配置的**切片时长 + 2s**），或通过接口(查询音频检测结果)主动轮询获取检测结果；
- 支持识别违规内容，包括：低俗、谩骂、色情、广告等场景；
- 支持批量提交检测任务，检测任务列表**最多支持10个**。

### 音频文件调用说明：
- 音频文件大小支持：**文件 < 500M**；
- 音频文件时长支持：**< 1小时**；
- 音频码率类型支持：128 Kbps - 256 Kbps ；
- 音频文件支持格式：wav、mp3、aac、flac、amr、3gp、 m4a、wma、ogg、ape；
- （**当输入为视频文件时**）支持分离视频文件音轨，并对音频内容进行独立审核。

### 音频流调用说明：
- 音频流时长支持：**< 3小时**；
- 音频码率类型支持：128 Kbps - 256 Kbps ；
- 音频流支持的传输协议：RTMP、HTTP、HTTPS；
- 音频流格式支持的类型：rtp、srtp、rtmp、rtmps、mmsh、 mmst、hls、http、tcp、https、m3u8；
- （**当输入为视频流时**）支持提取视频流音轨，并对音频内容进行独立审核。

### 直播断流处理说明：
- 请确认已对接[取消任务](https://cloud.tencent.com/document/product/1219/53258)。
- 如果直播任务取消/结束，则终止直播拉流并退出审核。
- 如果直播任务没有取消/结束，直播视频推流因故中断，产品将在将在10分钟内持续拉流重试。如果10分钟检测到音频切片数据，则恢复正常审核，反之，则终止拉流并退出审核。在拉流终止后，用户如有审核需求，需重新送审。
     */
    async CreateAudioModerationTask(req, cb) {
        return this.request("CreateAudioModerationTask", req, cb);
    }
    /**
     * 本接口（CreateAudioModerationSyncTask） 用于提交短音频内容进行智能审核任务，使用前请您使用腾讯云主账号登录控制台 [开通音频内容安全服务](https://console.cloud.tencent.com/cms/audio/package) 并调整好对应的业务配置。

### 接口使用说明：
- 前往“[内容安全控制台-图片内容安全](https://console.cloud.tencent.com/cms/audio/package)”开启使用音频内容安全服务，首次开通服务的用户可免费领用试用套餐包，包含**10小时**免费调用时长，有效期为1个月。
- 该接口为收费接口，计费方式敬请参见 [腾讯云音频内容安全定价](https://cloud.tencent.com/product/ams/pricing)。

### 接口调用说明：
- 音频文件大小支持：**文件 <= 4M**;
- 音频文件**时长不超过60s**，超过60s音频调用则报错；
- 音频文件支持格式：**wav (PCM编码)** 、**mp3**、**aac**、**m4a** (采样率：16kHz~48kHz，位深：16bit 小端，声道数：单声道/双声道，建议格式：**16kHz/16bit/单声道**)；
- 接口仅限音频文件传入，视频文件传入请调用长音频异步接口；
- 接口**默认QPS为20**，如需自定义配置并发或请求频率，请工单咨询；
- 接口**默认超时为10s**，请求如超过该时长则接口会报错。
     */
    async CreateAudioModerationSyncTask(req, cb) {
        return this.request("CreateAudioModerationSyncTask", req, cb);
    }
    /**
     * 通过该接口可查看音频审核任务的详情信息，包括任务状态、检测结果、音频文件识别出的对应文本内容、检测结果所对应的恶意标签及推荐的后续操作等，具体输出内容可查看输出参数示例。
     */
    async DescribeTaskDetail(req, cb) {
        return this.request("DescribeTaskDetail", req, cb);
    }
    /**
     * 通过该接口可查看审核任务列表；您也可根据多种业务信息（业务类型、审核结果、任务状态等）筛选审核任务列表。任务列表输出内容包括当前查询的任务总量、任务名称、任务状态、音频审核类型、基于检测结果的恶意标签及其后续操作等，具体输出内容可查看输出参数示例。<br>默认接口请求频率限制：**20次/秒**。
     */
    async DescribeTasks(req, cb) {
        return this.request("DescribeTasks", req, cb);
    }
    /**
     * 可使用该接口取消审核任务。请求成功后，接口返回RequestId则说明取消成功。<br>默认接口请求频率限制：**20次/秒**。
     */
    async CancelTask(req, cb) {
        return this.request("CancelTask", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248608, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.anicloud = void 0;
const v20220923_1 = require("./v20220923");
exports.anicloud = {
    v20220923: v20220923_1.v20220923,
};

}, function(modId) { var map = {"./v20220923":1738984248609}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248609, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220923 = void 0;
const Models = require("./anicloud_models");
const anicloud_client_1 = require("./anicloud_client");
exports.v20220923 = {
    Client: anicloud_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./anicloud_models":1738984248610,"./anicloud_client":1738984248611}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248610, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248611, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * anicloud client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("anicloud.tencentcloudapi.com", "2022-09-23", clientConfig);
    }
    /**
     * 查看appid是否存在
     */
    async CheckAppidExist(req, cb) {
        return this.request("CheckAppidExist", req, cb);
    }
    /**
     * 查询购买资源
     */
    async QueryResource(req, cb) {
        return this.request("QueryResource", req, cb);
    }
    /**
     * 查询资源信息
     */
    async QueryResourceInfo(req, cb) {
        return this.request("QueryResourceInfo", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248612, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.antiddos = void 0;
const v20200309_1 = require("./v20200309");
exports.antiddos = {
    v20200309: v20200309_1.v20200309,
};

}, function(modId) { var map = {"./v20200309":1738984248613}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248613, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200309 = void 0;
const Models = require("./antiddos_models");
const antiddos_client_1 = require("./antiddos_client");
exports.v20200309 = {
    Client: antiddos_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./antiddos_models":1738984248614,"./antiddos_client":1738984248615}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248614, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248615, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * antiddos client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("antiddos.tencentcloudapi.com", "2020-03-09", clientConfig);
    }
    /**
     * 修改CC频率限制策略
     */
    async ModifyCCReqLimitPolicy(req, cb) {
        return this.request("ModifyCCReqLimitPolicy", req, cb);
    }
    /**
     * 修改DDoS黑白名单列表
     */
    async ModifyDDoSBlackWhiteIpList(req, cb) {
        return this.request("ModifyDDoSBlackWhiteIpList", req, cb);
    }
    /**
     * 查询账号维度待处理风险信息，包括是否为付费用户，查询攻击中、封堵中、过期资源数量等
     */
    async DescribePendingRiskInfo(req, cb) {
        return this.request("DescribePendingRiskInfo", req, cb);
    }
    /**
     * 查询与证书ID对于域名匹配的七层规则
     */
    async DescribeL7RulesBySSLCertId(req, cb) {
        return this.request("DescribeL7RulesBySSLCertId", req, cb);
    }
    /**
     * 高防IP获取7层规则
     */
    async DescribeBGPIPL7Rules(req, cb) {
        return this.request("DescribeBGPIPL7Rules", req, cb);
    }
    /**
     * 获取单IP告警阈值配置列表
     */
    async DescribeListIPAlarmConfig(req, cb) {
        return this.request("DescribeListIPAlarmConfig", req, cb);
    }
    /**
     * 获取单IP默认告警阈值配置
     */
    async DescribeDefaultAlarmThreshold(req, cb) {
        return this.request("DescribeDefaultAlarmThreshold", req, cb);
    }
    /**
     * 获取DDoS连接抑制配置列表
     */
    async DescribeDDoSConnectLimitList(req, cb) {
        return this.request("DescribeDDoSConnectLimitList", req, cb);
    }
    /**
     * 获取L7转发规则健康检查异常结果列表
     */
    async DescribeNewL7RulesErrHealth(req, cb) {
        return this.request("DescribeNewL7RulesErrHealth", req, cb);
    }
    /**
     * 获取CC四层黑白名单列表
     */
    async DescribeCcBlackWhiteIpList(req, cb) {
        return this.request("DescribeCcBlackWhiteIpList", req, cb);
    }
    /**
     * 接口变更

获取DDoS防护的IP黑白名单
     */
    async DescribeBlackWhiteIpList(req, cb) {
        return this.request("DescribeBlackWhiteIpList", req, cb);
    }
    /**
     * 获取边界防护CC防护等级列表
     */
    async DescribeCCLevelList(req, cb) {
        return this.request("DescribeCCLevelList", req, cb);
    }
    /**
     * 新增CC精准防护策略
     */
    async CreateCCPrecisionPolicy(req, cb) {
        return this.request("CreateCCPrecisionPolicy", req, cb);
    }
    /**
     * 获取CC清洗阈值列表
     */
    async DescribeCCThresholdList(req, cb) {
        return this.request("DescribeCCThresholdList", req, cb);
    }
    /**
     * 设置单IP告警阈值配置
     */
    async CreateIPAlarmThresholdConfig(req, cb) {
        return this.request("CreateIPAlarmThresholdConfig", req, cb);
    }
    /**
     * 获取DDoS防护的特征过滤规则列表
     */
    async DescribeListPacketFilterConfig(req, cb) {
        return this.request("DescribeListPacketFilterConfig", req, cb);
    }
    /**
     * 添加DDoS防护的端口acl策略
     */
    async CreatePortAclConfig(req, cb) {
        return this.request("CreatePortAclConfig", req, cb);
    }
    /**
     * 获取基础防护攻击状态
     */
    async DescribeBasicDeviceStatus(req, cb) {
        return this.request("DescribeBasicDeviceStatus", req, cb);
    }
    /**
     * 本接口 (AssociateDDoSEipLoadBalancer) 用于将高防弹性公网IP绑定到负载均衡指定内网 IP 上。
     */
    async AssociateDDoSEipLoadBalancer(req, cb) {
        return this.request("AssociateDDoSEipLoadBalancer", req, cb);
    }
    /**
     * 添加7层转发规则
     */
    async CreateNewL7Rules(req, cb) {
        return this.request("CreateNewL7Rules", req, cb);
    }
    /**
     * 删除DDoS防护的水印防护配置
     */
    async DeleteWaterPrintConfig(req, cb) {
        return this.request("DeleteWaterPrintConfig", req, cb);
    }
    /**
     * 新增CC频率限制策略
     */
    async CreateCCReqLimitPolicy(req, cb) {
        return this.request("CreateCCReqLimitPolicy", req, cb);
    }
    /**
     * 开启或关闭DDoS防护的水印防护配置
     */
    async SwitchWaterPrintConfig(req, cb) {
        return this.request("SwitchWaterPrintConfig", req, cb);
    }
    /**
     * 获取DDoS防护的协议封禁配置列表
     */
    async DescribeListProtocolBlockConfig(req, cb) {
        return this.request("DescribeListProtocolBlockConfig", req, cb);
    }
    /**
     * 创建一个域名，可用于在封堵时调度切换IP
     */
    async CreateSchedulingDomain(req, cb) {
        return this.request("CreateSchedulingDomain", req, cb);
    }
    /**
     * 本接口 (DisassociateDDoSEipAddress) 用于解绑高防弹性公网IP。
     */
    async DisassociateDDoSEipAddress(req, cb) {
        return this.request("DisassociateDDoSEipAddress", req, cb);
    }
    /**
     * 设置DDoS防护的协议封禁配置
     */
    async CreateProtocolBlockConfig(req, cb) {
        return this.request("CreateProtocolBlockConfig", req, cb);
    }
    /**
     * 删除DDoS防护的IP网段黑白名单
     */
    async DeleteDDoSBlackWhiteIpList(req, cb) {
        return this.request("DeleteDDoSBlackWhiteIpList", req, cb);
    }
    /**
     * 批量配置L7转发规则的证书供SSL测调用
     */
    async CreateL7RuleCerts(req, cb) {
        return this.request("CreateL7RuleCerts", req, cb);
    }
    /**
     * 本接口 (AssociateDDoSEipAddress) 用于将高防弹性公网IP绑定到实例或弹性网卡的指定内网 IP 上。
     */
    async AssociateDDoSEipAddress(req, cb) {
        return this.request("AssociateDDoSEipAddress", req, cb);
    }
    /**
     * 修改智能解析域名名称
     */
    async ModifyDomainUsrName(req, cb) {
        return this.request("ModifyDomainUsrName", req, cb);
    }
    /**
     * 获取防护概览DDoS攻击流量带宽和攻击包速率数据
     */
    async DescribeOverviewDDoSTrend(req, cb) {
        return this.request("DescribeOverviewDDoSTrend", req, cb);
    }
    /**
     * 删除DDoS防护的访问限速配置
     */
    async DeleteDDoSSpeedLimitConfig(req, cb) {
        return this.request("DeleteDDoSSpeedLimitConfig", req, cb);
    }
    /**
     * 高防IP获取7层规则
     */
    async DescribeNewL7Rules(req, cb) {
        return this.request("DescribeNewL7Rules", req, cb);
    }
    /**
     * 获取IP封堵列表
     */
    async DescribeIpBlockList(req, cb) {
        return this.request("DescribeIpBlockList", req, cb);
    }
    /**
     * 修改CC防护等级
     */
    async ModifyCCLevelPolicy(req, cb) {
        return this.request("ModifyCCLevelPolicy", req, cb);
    }
    /**
     * 获取高防IP资产实例列表

     */
    async DescribeListBGPIPInstances(req, cb) {
        return this.request("DescribeListBGPIPInstances", req, cb);
    }
    /**
     * 修改7层转发规则
     */
    async ModifyNewDomainRules(req, cb) {
        return this.request("ModifyNewDomainRules", req, cb);
    }
    /**
     * 获取防护概览总请求峰值(QPS)和攻击请求(QPS)以及总请求次数和攻击请求次数
     */
    async DescribeOverviewCCTrend(req, cb) {
        return this.request("DescribeOverviewCCTrend", req, cb);
    }
    /**
     * 获取CC分级策略
     */
    async DescribeCCLevelPolicy(req, cb) {
        return this.request("DescribeCCLevelPolicy", req, cb);
    }
    /**
     * 获取智能调度域名列表
     */
    async DescribeListSchedulingDomain(req, cb) {
        return this.request("DescribeListSchedulingDomain", req, cb);
    }
    /**
     * 添加DDoS防护的区域封禁配置
     */
    async CreateDDoSGeoIPBlockConfig(req, cb) {
        return this.request("CreateDDoSGeoIPBlockConfig", req, cb);
    }
    /**
     * 获取高防包流量折线图
     */
    async DescribeBgpBizTrend(req, cb) {
        return this.request("DescribeBgpBizTrend", req, cb);
    }
    /**
     * 获取CC频率限制策略列表
     */
    async DescribeCCReqLimitPolicyList(req, cb) {
        return this.request("DescribeCCReqLimitPolicyList", req, cb);
    }
    /**
     * 删除CC分级策略
     */
    async DeleteCCLevelPolicy(req, cb) {
        return this.request("DeleteCCLevelPolicy", req, cb);
    }
    /**
     * 拉取防护概览指标
     */
    async DescribeOverviewIndex(req, cb) {
        return this.request("DescribeOverviewIndex", req, cb);
    }
    /**
     * 添加DDoS防护的访问限速配置
     */
    async CreateDDoSSpeedLimitConfig(req, cb) {
        return this.request("CreateDDoSSpeedLimitConfig", req, cb);
    }
    /**
     * 获取业务流量状态码统计列表
     */
    async DescribeBizHttpStatus(req, cb) {
        return this.request("DescribeBizHttpStatus", req, cb);
    }
    /**
     * 获取高防包资产实例列表
     */
    async DescribeListBGPInstances(req, cb) {
        return this.request("DescribeListBGPInstances", req, cb);
    }
    /**
     * 删除DDoS防护的端口acl策略
     */
    async DeletePortAclConfig(req, cb) {
        return this.request("DeletePortAclConfig", req, cb);
    }
    /**
     * 获取DDoS防护的水印防护配置列表
     */
    async DescribeListWaterPrintConfig(req, cb) {
        return this.request("DescribeListWaterPrintConfig", req, cb);
    }
    /**
     * 获取DDoS防护的区域封禁配置列表
     */
    async DescribeListDDoSGeoIPBlockConfig(req, cb) {
        return this.request("DescribeListDDoSGeoIPBlockConfig", req, cb);
    }
    /**
     * 删除CC防护的区域封禁配置
     */
    async DeleteCcGeoIPBlockConfig(req, cb) {
        return this.request("DeleteCcGeoIPBlockConfig", req, cb);
    }
    /**
     * 获取DDoS防护的端口acl策略列表
     */
    async DescribeListPortAclList(req, cb) {
        return this.request("DescribeListPortAclList", req, cb);
    }
    /**
     * 获取转发监听器列表
     */
    async DescribeListListener(req, cb) {
        return this.request("DescribeListListener", req, cb);
    }
    /**
     * 修改DDoS清洗阈值
     */
    async ModifyDDoSThreshold(req, cb) {
        return this.request("ModifyDDoSThreshold", req, cb);
    }
    /**
     * 修改DDoS防护的特征过滤规则
     */
    async ModifyPacketFilterConfig(req, cb) {
        return this.request("ModifyPacketFilterConfig", req, cb);
    }
    /**
     * 添加DDoS防护的特征过滤规则
     */
    async CreatePacketFilterConfig(req, cb) {
        return this.request("CreatePacketFilterConfig", req, cb);
    }
    /**
     * 获取DDoS防护的IP黑白名单列表
     */
    async DescribeListBlackWhiteIpList(req, cb) {
        return this.request("DescribeListBlackWhiteIpList", req, cb);
    }
    /**
     * 修改CC四层黑白名单
     */
    async ModifyCcBlackWhiteIpList(req, cb) {
        return this.request("ModifyCcBlackWhiteIpList", req, cb);
    }
    /**
     * 获取高防IP业务监控流量曲线
     */
    async DescribeBizMonitorTrend(req, cb) {
        return this.request("DescribeBizMonitorTrend", req, cb);
    }
    /**
     * 绑定IP到高防包实例，支持独享包、共享包（新版）；需要注意的是此接口绑定或解绑IP是异步接口，当处于绑定或解绑中时，则不允许再进行绑定或解绑，需要等待当前绑定或解绑完成。
     */
    async CreateBoundIP(req, cb) {
        return this.request("CreateBoundIP", req, cb);
    }
    /**
     * 获取防护概览的ddos攻击事件
     */
    async DescribeOverviewDDoSEventList(req, cb) {
        return this.request("DescribeOverviewDDoSEventList", req, cb);
    }
    /**
     * 设置单IP默认告警阈值配置
     */
    async CreateDefaultAlarmThreshold(req, cb) {
        return this.request("CreateDefaultAlarmThreshold", req, cb);
    }
    /**
     * 添加DDoS防护的水印防护配置
     */
    async CreateWaterPrintConfig(req, cb) {
        return this.request("CreateWaterPrintConfig", req, cb);
    }
    /**
     * 获取DDoS防护的AI防护开关列表
     */
    async DescribeListDDoSAI(req, cb) {
        return this.request("DescribeListDDoSAI", req, cb);
    }
    /**
     * 获取DDoS防护的访问限速配置列表
     */
    async DescribeListDDoSSpeedLimitConfig(req, cb) {
        return this.request("DescribeListDDoSSpeedLimitConfig", req, cb);
    }
    /**
     * 拉取防护概览攻击趋势
     */
    async DescribeOverviewAttackTrend(req, cb) {
        return this.request("DescribeOverviewAttackTrend", req, cb);
    }
    /**
     * 添加DDoS防护的IP黑白名单
     */
    async CreateBlackWhiteIpList(req, cb) {
        return this.request("CreateBlackWhiteIpList", req, cb);
    }
    /**
     * 获取DDoS攻击流量带宽和攻击包速率数据
     */
    async DescribeDDoSTrend(req, cb) {
        return this.request("DescribeDDoSTrend", req, cb);
    }
    /**
     * 设置DDoS防护的AI防护开关
     */
    async CreateDDoSAI(req, cb) {
        return this.request("CreateDDoSAI", req, cb);
    }
    /**
     * 删除DDoS防护的特征过滤规则
     */
    async DeletePacketFilterConfig(req, cb) {
        return this.request("DeletePacketFilterConfig", req, cb);
    }
    /**
     * 读取或修改DDoS的防护等级
     */
    async ModifyDDoSLevel(req, cb) {
        return this.request("ModifyDDoSLevel", req, cb);
    }
    /**
     * 批量添加DDoS防护的端口acl策略
     */
    async CreatePortAclConfigList(req, cb) {
        return this.request("CreatePortAclConfigList", req, cb);
    }
    /**
     * 新建CC防护的地域封禁配置
     */
    async CreateCcGeoIPBlockConfig(req, cb) {
        return this.request("CreateCcGeoIPBlockConfig", req, cb);
    }
    /**
     * 新建CC四层黑白名单
     */
    async CreateCcBlackWhiteIpList(req, cb) {
        return this.request("CreateCcBlackWhiteIpList", req, cb);
    }
    /**
     * 修改DDoS防护的访问限速配置
     */
    async ModifyDDoSSpeedLimitConfig(req, cb) {
        return this.request("ModifyDDoSSpeedLimitConfig", req, cb);
    }
    /**
     * 获取业务流量曲线
     */
    async DescribeBizTrend(req, cb) {
        return this.request("DescribeBizTrend", req, cb);
    }
    /**
     * 删除DDoS防护的区域封禁配置
     */
    async DeleteDDoSGeoIPBlockConfig(req, cb) {
        return this.request("DeleteDDoSGeoIPBlockConfig", req, cb);
    }
    /**
     * 获取CC精准防护列表
     */
    async DescribeCCPrecisionPlyList(req, cb) {
        return this.request("DescribeCCPrecisionPlyList", req, cb);
    }
    /**
     * 修改DDoS防护的端口acl策略
     */
    async ModifyPortAclConfig(req, cb) {
        return this.request("ModifyPortAclConfig", req, cb);
    }
    /**
     * 修改CC清洗阈值
     */
    async ModifyCCThresholdPolicy(req, cb) {
        return this.request("ModifyCCThresholdPolicy", req, cb);
    }
    /**
     * 删除CC清洗阈值策略
     */
    async DeleteCCThresholdPolicy(req, cb) {
        return this.request("DeleteCCThresholdPolicy", req, cb);
    }
    /**
     * 删除DDoS防护的水印防护密钥
     */
    async DeleteWaterPrintKey(req, cb) {
        return this.request("DeleteWaterPrintKey", req, cb);
    }
    /**
     * 添加DDoS防护的IP网段黑白名单
     */
    async CreateDDoSBlackWhiteIpList(req, cb) {
        return this.request("CreateDDoSBlackWhiteIpList", req, cb);
    }
    /**
     * 获取CC攻击指标数据，包括总请求峰值(QPS)和攻击请求(QPS)以及总请求次数和攻击请求次数
     */
    async DescribeCCTrend(req, cb) {
        return this.request("DescribeCCTrend", req, cb);
    }
    /**
     * 删除CC四层黑白名单
     */
    async DeleteCcBlackWhiteIpList(req, cb) {
        return this.request("DeleteCcBlackWhiteIpList", req, cb);
    }
    /**
     * 接口变更

获取防护阈值配置列表，包括DDoS的AI、等级、CC阈值开关等
     */
    async DescribeListProtectThresholdConfig(req, cb) {
        return this.request("DescribeListProtectThresholdConfig", req, cb);
    }
    /**
     * 删除CC精准防护策略
     */
    async DeleteCCPrecisionPolicy(req, cb) {
        return this.request("DeleteCCPrecisionPolicy", req, cb);
    }
    /**
     * 获取DDoS防护的IP网段黑白名单
     */
    async DescribeDDoSBlackWhiteIpList(req, cb) {
        return this.request("DescribeDDoSBlackWhiteIpList", req, cb);
    }
    /**
     * 配置DDoS连接抑制选项
     */
    async CreateDDoSConnectLimit(req, cb) {
        return this.request("CreateDDoSConnectLimit", req, cb);
    }
    /**
     * 修改CC精准防护策略
     */
    async ModifyCCPrecisionPolicy(req, cb) {
        return this.request("ModifyCCPrecisionPolicy", req, cb);
    }
    /**
     * 获取CC防护的区域封禁配置列表
     */
    async DescribeCcGeoIPBlockConfigList(req, cb) {
        return this.request("DescribeCcGeoIPBlockConfigList", req, cb);
    }
    /**
     * 添加DDoS防护的水印防护密钥
     */
    async CreateWaterPrintKey(req, cb) {
        return this.request("CreateWaterPrintKey", req, cb);
    }
    /**
     * 修改DDoS防护的区域封禁配置
     */
    async ModifyDDoSGeoIPBlockConfig(req, cb) {
        return this.request("ModifyDDoSGeoIPBlockConfig", req, cb);
    }
    /**
     * 删除CC频率限制策略
     */
    async DeleteCCRequestLimitPolicy(req, cb) {
        return this.request("DeleteCCRequestLimitPolicy", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248616, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.apcas = void 0;
const v20201127_1 = require("./v20201127");
exports.apcas = {
    v20201127: v20201127_1.v20201127,
};

}, function(modId) { var map = {"./v20201127":1738984248617}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248617, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201127 = void 0;
const Models = require("./apcas_models");
const apcas_client_1 = require("./apcas_client");
exports.v20201127 = {
    Client: apcas_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./apcas_models":1738984248618,"./apcas_client":1738984248619}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248618, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248619, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * apcas client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("apcas.tencentcloudapi.com", "2020-11-27", clientConfig);
    }
    /**
     * 获取日/月/周/总调用量统计数据
     */
    async QueryGeneralStat(req, cb) {
        return this.request("QueryGeneralStat", req, cb);
    }
    /**
     * 查询当前账号AppID下的画像洞察任务列表
     */
    async GetTaskList(req, cb) {
        return this.request("GetTaskList", req, cb);
    }
    /**
     * 按时间维度获取调用量统计
     */
    async QueryCallStat(req, cb) {
        return this.request("QueryCallStat", req, cb);
    }
    /**
     * 上传群体画像的ID列表（支持的ID类型：0:imei 7:IDFA 8:MD5(imei)），后台返回生成的画像分析任务ID
     */
    async UploadId(req, cb) {
        return this.request("UploadId", req, cb);
    }
    /**
     * 查询画像洞察任务详情
     */
    async GetTaskDetail(req, cb) {
        return this.request("GetTaskDetail", req, cb);
    }
    /**
     * 查询调用明细
     */
    async QueryCallDetails(req, cb) {
        return this.request("QueryCallDetails", req, cb);
    }
    /**
     * 根据传入的设备号（IMEI、IDFA、手机号、手机号MD5），返回意向评级结果
     */
    async PredictRating(req, cb) {
        return this.request("PredictRating", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248620, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ape = void 0;
const v20200513_1 = require("./v20200513");
exports.ape = {
    v20200513: v20200513_1.v20200513,
};

}, function(modId) { var map = {"./v20200513":1738984248621}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248621, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200513 = void 0;
const Models = require("./ape_models");
const ape_client_1 = require("./ape_client");
exports.v20200513 = {
    Client: ape_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ape_models":1738984248622,"./ape_client":1738984248623}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248622, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248623, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ape client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ape.tencentcloudapi.com", "2020-05-13", clientConfig);
    }
    /**
     * 分页查询授权人列表
     */
    async DescribeAuthUsers(req, cb) {
        return this.request("DescribeAuthUsers", req, cb);
    }
    /**
     * 获取用户图片下载记录
     */
    async DescribeDownloadInfos(req, cb) {
        return this.request("DescribeDownloadInfos", req, cb);
    }
    /**
     * 批量获取授权书下载地址
     */
    async BatchDescribeOrderCertificate(req, cb) {
        return this.request("BatchDescribeOrderCertificate", req, cb);
    }
    /**
     * 根据关键字搜索图片列表
     */
    async DescribeImages(req, cb) {
        return this.request("DescribeImages", req, cb);
    }
    /**
     * 核销图片，获取原图URL地址
     */
    async CreateOrderAndDownloads(req, cb) {
        return this.request("CreateOrderAndDownloads", req, cb);
    }
    /**
     * 根据ID查询一张图片的详细信息
     */
    async DescribeImage(req, cb) {
        return this.request("DescribeImage", req, cb);
    }
    /**
     * 购买一张图片并且支付
     */
    async CreateOrderAndPay(req, cb) {
        return this.request("CreateOrderAndPay", req, cb);
    }
    /**
     * 批量获取图片下载地址
     */
    async BatchDescribeOrderImage(req, cb) {
        return this.request("BatchDescribeOrderImage", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248624, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.api = void 0;
const v20201106_1 = require("./v20201106");
exports.api = {
    v20201106: v20201106_1.v20201106,
};

}, function(modId) { var map = {"./v20201106":1738984248625}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248625, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201106 = void 0;
const Models = require("./api_models");
const api_client_1 = require("./api_client");
exports.v20201106 = {
    Client: api_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./api_models":1738984248626,"./api_client":1738984248627}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248626, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248627, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * api client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("api.tencentcloudapi.com", "2020-11-06", clientConfig);
    }
    /**
     * 本接口(DescribeProducts)用于查询各个支持地域列表查询的产品信息。
     */
    async DescribeProducts(req, cb) {
        return this.request("DescribeProducts", req, cb);
    }
    /**
     * 本接口(DescribeRegions)用于查询各个产品支持地域信息。
     */
    async DescribeRegions(req, cb) {
        return this.request("DescribeRegions", req, cb);
    }
    /**
     * 本接口(DescribeZones)用于查询产品可用区信息。
     */
    async DescribeZones(req, cb) {
        return this.request("DescribeZones", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248628, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.apigateway = void 0;
const v20180808_1 = require("./v20180808");
exports.apigateway = {
    v20180808: v20180808_1.v20180808,
};

}, function(modId) { var map = {"./v20180808":1738984248629}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248629, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180808 = void 0;
const Models = require("./apigateway_models");
const apigateway_client_1 = require("./apigateway_client");
exports.v20180808 = {
    Client: apigateway_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./apigateway_models":1738984248630,"./apigateway_client":1738984248631}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248630, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248631, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * apigateway client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("apigateway.tencentcloudapi.com", "2018-08-08", clientConfig);
    }
    /**
     * 本接口（CreateService）用于创建服务。
API 网关使用的最大单元为服务，每个服务中可创建多个 API 接口。每个服务有一个默认域名供客户调用，用户也可绑定自定义域名到此服务中。
     */
    async CreateService(req, cb) {
        return this.request("CreateService", req, cb);
    }
    /**
     * 本接口（DescribeUsagePlanStatus）用于查询使用计划的列表。
     */
    async DescribeUsagePlansStatus(req, cb) {
        return this.request("DescribeUsagePlansStatus", req, cb);
    }
    /**
     * 查询 API 文档详情
     */
    async DescribeAPIDocDetail(req, cb) {
        return this.request("DescribeAPIDocDetail", req, cb);
    }
    /**
     * 本接口（DescribeApiAppBindApisStatus）查询应用绑定的Api列表。
     */
    async DescribeApiAppBindApisStatus(req, cb) {
        return this.request("DescribeApiAppBindApisStatus", req, cb);
    }
    /**
     * 本接口（DescribeUsagePlanSecretIds）用于查询使用计划绑定的密钥列表。
在 API 网关中，一个使用计划可绑定多个密钥对，可使用本接口查询使用计划绑定的密钥列表。
     */
    async DescribeUsagePlanSecretIds(req, cb) {
        return this.request("DescribeUsagePlanSecretIds", req, cb);
    }
    /**
     * 本接口（DescribeServiceForApiApp）用于应用使用者查询一个服务的详细信息、包括服务的描述、域名、协议等信息。
     */
    async DescribeServiceForApiApp(req, cb) {
        return this.request("DescribeServiceForApiApp", req, cb);
    }
    /**
     * 本接口（ModifyIPStrategy）用于修改服务IP策略。
     */
    async ModifyIPStrategy(req, cb) {
        return this.request("ModifyIPStrategy", req, cb);
    }
    /**
     * 本接口（UpdateService）用于从服务已发布的环境中将运行版本切换到特定版本。用户在使用 API 网关创建服务并发布服务到某个环境后，如在开发过程产生多个版本需要切换，此时可调用本接口。
     */
    async UpdateService(req, cb) {
        return this.request("UpdateService", req, cb);
    }
    /**
     * 修改API网关插件。
     */
    async ModifyPlugin(req, cb) {
        return this.request("ModifyPlugin", req, cb);
    }
    /**
     * 本接口（DeleteApiApp）用于删除已经创建的应用。
     */
    async DeleteApiApp(req, cb) {
        return this.request("DeleteApiApp", req, cb);
    }
    /**
     * 展示API上已绑定的插件列表。
     */
    async DescribePluginsByApi(req, cb) {
        return this.request("DescribePluginsByApi", req, cb);
    }
    /**
     * 本接口（DescribeServicesStatus）用于搜索查询某一个服务或多个服务的列表，并返回服务相关的域名、时间等信息。
     */
    async DescribeServicesStatus(req, cb) {
        return this.request("DescribeServicesStatus", req, cb);
    }
    /**
     * 查询 API 文档列表
     */
    async DescribeAPIDocs(req, cb) {
        return this.request("DescribeAPIDocs", req, cb);
    }
    /**
     * 本接口（CreateUsagePlan）用于创建使用计划。
用户在使用 API 网关时，需要创建使用计划并将其绑定到服务的环境中使用。
     */
    async CreateUsagePlan(req, cb) {
        return this.request("CreateUsagePlan", req, cb);
    }
    /**
     * 展示插件相关的API列表，包括已绑定的和未绑定的API信息。
     */
    async DescribeAllPluginApis(req, cb) {
        return this.request("DescribeAllPluginApis", req, cb);
    }
    /**
     * 本接口（UnBindIPStrategy）用于服务解绑IP策略。
     */
    async UnBindIPStrategy(req, cb) {
        return this.request("UnBindIPStrategy", req, cb);
    }
    /**
     * 重置API文档密码
     */
    async ResetAPIDocPassword(req, cb) {
        return this.request("ResetAPIDocPassword", req, cb);
    }
    /**
     * 查询指定插件下绑定的API信息
     */
    async DescribePluginApis(req, cb) {
        return this.request("DescribePluginApis", req, cb);
    }
    /**
     * 本接口（DisableApiKey）用于禁用一对 API 密钥。
     */
    async DisableApiKey(req, cb) {
        return this.request("DisableApiKey", req, cb);
    }
    /**
     * 本接口（DescribeApiEnvironmentStrategy）用于展示API绑定的限流策略。
     */
    async DescribeApiEnvironmentStrategy(req, cb) {
        return this.request("DescribeApiEnvironmentStrategy", req, cb);
    }
    /**
     * 本接口（DescribeApiAppsStatus）查询应用列表。
     */
    async DescribeApiAppsStatus(req, cb) {
        return this.request("DescribeApiAppsStatus", req, cb);
    }
    /**
     * 本接口（DescribeApiApp）用于根据应用ID搜索应用。此接口已下线，如需使用功能请使用DescribeApiAppsStatus接口。
     */
    async DescribeApiApp(req, cb) {
        return this.request("DescribeApiApp", req, cb);
    }
    /**
     * 本接口（ModifyUsagePlan）用于修改使用计划的名称，描述及 QPS。
     */
    async ModifyUsagePlan(req, cb) {
        return this.request("ModifyUsagePlan", req, cb);
    }
    /**
     * 查询后端通道列表详情
     */
    async DescribeUpstreams(req, cb) {
        return this.request("DescribeUpstreams", req, cb);
    }
    /**
     * 本接口（DescribeApi）用于查询用户 API 网关的 API 接口的详细信息。​
     */
    async DescribeApi(req, cb) {
        return this.request("DescribeApi", req, cb);
    }
    /**
     * 本接口（UnbindApiApp）用于解除应用和API绑定。
     */
    async UnbindApiApp(req, cb) {
        return this.request("UnbindApiApp", req, cb);
    }
    /**
     * 本接口（DeleteUsagePlan）用于删除使用计划。
     */
    async DeleteUsagePlan(req, cb) {
        return this.request("DeleteUsagePlan", req, cb);
    }
    /**
     * 本接口（CreateApiApp）用于创建应用。
     */
    async CreateApiApp(req, cb) {
        return this.request("CreateApiApp", req, cb);
    }
    /**
     * 本接口（DescribeApiKeysStatus）用于查询密钥列表。
当用户创建了多个密钥对时，可使用本接口查询一个或多个 API 密钥信息。
     */
    async DescribeApiKeysStatus(req, cb) {
        return this.request("DescribeApiKeysStatus", req, cb);
    }
    /**
     * 创建 API 文档
     */
    async CreateAPIDoc(req, cb) {
        return this.request("CreateAPIDoc", req, cb);
    }
    /**
     * 本接口（DescribeIPStrategyApisStatus）用于查询IP策略可以绑定的API列表。即服务下所有API和该策略已绑定API的差集。
     */
    async DescribeIPStrategyApisStatus(req, cb) {
        return this.request("DescribeIPStrategyApisStatus", req, cb);
    }
    /**
     * 本接口（UnReleaseService）用于下线服务。
用户发布服务到某个环境后，此服务中的 API 方可被调用者进行调用，当用户需要将此服务从发布环境中下线时，可调用此 API。下线后的服务不可被调用。
     */
    async UnReleaseService(req, cb) {
        return this.request("UnReleaseService", req, cb);
    }
    /**
     * 本接口（DescribeServiceEnvironmentReleaseHistory）用于查询服务环境的发布历史。
用户在创建好服务后需要发布到某个环境中才能进行使用，本接口用于查询一个服务某个环境的发布记录。
     */
    async DescribeServiceEnvironmentReleaseHistory(req, cb) {
        return this.request("DescribeServiceEnvironmentReleaseHistory", req, cb);
    }
    /**
     * 本接口（DeleteApi）用于删除已经创建的API。
     */
    async DeleteApi(req, cb) {
        return this.request("DeleteApi", req, cb);
    }
    /**
     * 本接口（UpdateApiAppKey）用于更新应用密钥。
     */
    async UpdateApiAppKey(req, cb) {
        return this.request("UpdateApiAppKey", req, cb);
    }
    /**
     * 创建专享实例
     */
    async CreateExclusiveInstances(req, cb) {
        return this.request("CreateExclusiveInstances", req, cb);
    }
    /**
     * 本接口（DescribeServiceSubDomainMappings）用于查询自定义域名的路径映射。
API 网关可绑定自定义域名到服务，并且可以对自定义域名的路径进行映射，可自定义不同的路径映射到服务中的三个环境，本接口用于查询绑定服务的自定义域名的路径映射列表。
     */
    async DescribeServiceSubDomainMappings(req, cb) {
        return this.request("DescribeServiceSubDomainMappings", req, cb);
    }
    /**
     * 本接口（BindEnvironment）用于绑定使用计划到服务或API。
用户在发布服务到某个环境中后，如果 API 需要鉴权，还需要绑定使用计划才能进行调用，此接口用户将使用计划绑定到特定环境。
目前支持绑定使用计划到API，但是同一个服务不能同时存在绑定到服务的使用计划和绑定到API的使用计划，所以对已经绑定过服务级别使用计划的环境，请先使用 服务级别使用计划降级 接口进行降级操作。
     */
    async BindEnvironment(req, cb) {
        return this.request("BindEnvironment", req, cb);
    }
    /**
     * 修改 API 文档
     */
    async ModifyAPIDoc(req, cb) {
        return this.request("ModifyAPIDoc", req, cb);
    }
    /**
     * 本接口（UnBindSecretIds）用于为使用计划解绑密钥。
     */
    async UnBindSecretIds(req, cb) {
        return this.request("UnBindSecretIds", req, cb);
    }
    /**
     * 本接口（DescribeIPStrategy）用于查询IP策略详情。
     */
    async DescribeIPStrategy(req, cb) {
        return this.request("DescribeIPStrategy", req, cb);
    }
    /**
     * 修改后端通道
     */
    async ModifyUpstream(req, cb) {
        return this.request("ModifyUpstream", req, cb);
    }
    /**
     * 本接口（DescribeServiceReleaseVersion）查询一个服务下面所有已经发布的版本列表。
用户在发布服务时，常有多个版本发布，可使用本接口查询已发布的版本。
     */
    async DescribeServiceReleaseVersion(req, cb) {
        return this.request("DescribeServiceReleaseVersion", req, cb);
    }
    /**
     * 本接口（DescribeApisStatus）用于查看一个服务下的某个 API 或所有 API 列表及其相关信息。
     */
    async DescribeApisStatus(req, cb) {
        return this.request("DescribeApisStatus", req, cb);
    }
    /**
     * 本接口（CreateApiKey）用于创建一对新的 API 密钥。
     */
    async CreateApiKey(req, cb) {
        return this.request("CreateApiKey", req, cb);
    }
    /**
     * 本接口（ModifySubDomain）用于修改服务的自定义域名设置中的路径映射，可以修改绑定自定义域名之前的路径映射规则。
     */
    async ModifySubDomain(req, cb) {
        return this.request("ModifySubDomain", req, cb);
    }
    /**
     * 本接口（DeleteIPStrategy）用于删除服务IP策略。
     */
    async DeleteIPStrategy(req, cb) {
        return this.request("DeleteIPStrategy", req, cb);
    }
    /**
     * 本接口（ReleaseService）用于发布服务。
API 网关的服务创建后，需要发布到某个环境方生效后，使用者才能进行调用，此接口用于发布服务到环境，如 release 环境。
     */
    async ReleaseService(req, cb) {
        return this.request("ReleaseService", req, cb);
    }
    /**
     * 本接口（DescribeExclusiveInstances）用于查询独享实例列表信息。
     */
    async DescribeExclusiveInstances(req, cb) {
        return this.request("DescribeExclusiveInstances", req, cb);
    }
    /**
     * 本接口（DescribeService）用于查询一个服务的详细信息、包括服务的描述、域名、协议、创建时间、发布情况等信息。
     */
    async DescribeService(req, cb) {
        return this.request("DescribeService", req, cb);
    }
    /**
     * 创建API网关插件。
     */
    async CreatePlugin(req, cb) {
        return this.request("CreatePlugin", req, cb);
    }
    /**
     * 展示插件列表和详情，支持分页，支持按照插件类型查询，支持按照插件ID批量查询，支持按照插件名称查询。
     */
    async DescribePlugins(req, cb) {
        return this.request("DescribePlugins", req, cb);
    }
    /**
     * 本接口（DeleteApiKey）用于删除一对 API 密钥。
     */
    async DeleteApiKey(req, cb) {
        return this.request("DeleteApiKey", req, cb);
    }
    /**
     * 本接口（CreateApi）用于创建 API 接口，创建 API 前，用户需要先创建服务，每个 API 都有自己归属的服务。
     */
    async CreateApi(req, cb) {
        return this.request("CreateApi", req, cb);
    }
    /**
     * 本接口（DescribeExclusiveInstanceDetail）用于查询独享实例详情信息。
     */
    async DescribeExclusiveInstanceDetail(req, cb) {
        return this.request("DescribeExclusiveInstanceDetail", req, cb);
    }
    /**
     * 绑定插件到API上。
     */
    async AttachPlugin(req, cb) {
        return this.request("AttachPlugin", req, cb);
    }
    /**
     * 本接口（BindApiApp）用于绑定应用到API。
     */
    async BindApiApp(req, cb) {
        return this.request("BindApiApp", req, cb);
    }
    /**
     * 本接口（DescribeApiBindApiAppsStatus）查询Api绑定的应用列表。
     */
    async DescribeApiBindApiAppsStatus(req, cb) {
        return this.request("DescribeApiBindApiAppsStatus", req, cb);
    }
    /**
     * 本接口DescribeLogSearch用于搜索日志
     */
    async DescribeLogSearch(req, cb) {
        return this.request("DescribeLogSearch", req, cb);
    }
    /**
     * 本接口（DeleteService）用于删除 API 网关中某个服务。
     */
    async DeleteService(req, cb) {
        return this.request("DeleteService", req, cb);
    }
    /**
     * 提供增量更新API能力，主要是给程序调用（区别于ModifyApi，该接口是需要传入API的全量参数，对console使用较友好）
     */
    async ModifyApiIncrement(req, cb) {
        return this.request("ModifyApiIncrement", req, cb);
    }
    /**
     * 本接口（DescribeApiUsagePlan）用于查询服务中 API 使用计划详情。
服务若需要鉴权限流生效，则需要绑定使用计划到此服务中，本接口用于查询绑定到一个服务及其中 API 的所有使用计划。
     */
    async DescribeApiUsagePlan(req, cb) {
        return this.request("DescribeApiUsagePlan", req, cb);
    }
    /**
     * 获取专享实例网络配置列表
     */
    async DescribeInstancesNetworkConfig(req, cb) {
        return this.request("DescribeInstancesNetworkConfig", req, cb);
    }
    /**
     * 本接口（DescribeIPStrategysStatus）用于查询服务IP策略列表，因为接口名拼写错误，已不推荐使用，请优先使用DescribeIPStrategiesStatus接口。
     */
    async DescribeIPStrategysStatus(req, cb) {
        return this.request("DescribeIPStrategysStatus", req, cb);
    }
    /**
     * 本接口（ModifyServiceEnvironmentStrategy）用于修改服务限流策略
     */
    async ModifyServiceEnvironmentStrategy(req, cb) {
        return this.request("ModifyServiceEnvironmentStrategy", req, cb);
    }
    /**
     * 本接口（ModifyExclusiveInstance）用于修改独享实例信息。​
     */
    async ModifyExclusiveInstance(req, cb) {
        return this.request("ModifyExclusiveInstance", req, cb);
    }
    /**
     * 用于创建后端通道
     */
    async CreateUpstream(req, cb) {
        return this.request("CreateUpstream", req, cb);
    }
    /**
     * 本接口（DescribeUsagePlanEnvironments）用于查询使用计划绑定的环境列表。
用户在绑定了某个使用计划到环境后，可使用本接口查询这个使用计划绑定的所有服务的环境。
     */
    async DescribeUsagePlanEnvironments(req, cb) {
        return this.request("DescribeUsagePlanEnvironments", req, cb);
    }
    /**
     * 展示插件详情，支持按照插件ID进行。
     */
    async DescribePlugin(req, cb) {
        return this.request("DescribePlugin", req, cb);
    }
    /**
     * 解除插件与API绑定
     */
    async DetachPlugin(req, cb) {
        return this.request("DetachPlugin", req, cb);
    }
    /**
     * 本接口（DescribeServiceEnvironmentList）用于查询一个服务的环境列表，可查询到此服务下所有环境及其状态。
     */
    async DescribeServiceEnvironmentList(req, cb) {
        return this.request("DescribeServiceEnvironmentList", req, cb);
    }
    /**
     * 删除后端通道，需要注意有API绑定时，不允许删除
     */
    async DeleteUpstream(req, cb) {
        return this.request("DeleteUpstream", req, cb);
    }
    /**
     * 本接口（UnBindSubDomain）用于解绑自定义域名。
用户使用 API 网关绑定了自定义域名到服务中后，若想要解绑此自定义域名，可使用此接口。
     */
    async UnBindSubDomain(req, cb) {
        return this.request("UnBindSubDomain", req, cb);
    }
    /**
     * 本接口（DescribeServiceEnvironmentStrategy）用于展示服务限流策略。
     */
    async DescribeServiceEnvironmentStrategy(req, cb) {
        return this.request("DescribeServiceEnvironmentStrategy", req, cb);
    }
    /**
     * 本接口（DeleteServiceSubDomainMapping）用于删除服务中某个环境的自定义域名映射。
当用户使用自定义域名，并使用了自定义映射时，可使用此接口。但需注意，若删除了所有环境的映射时，调用此 API 均会返回失败。
     */
    async DeleteServiceSubDomainMapping(req, cb) {
        return this.request("DeleteServiceSubDomainMapping", req, cb);
    }
    /**
     * 本接口（DescribeApiKey）用于查询密钥详情。
用户在创建密钥后，可用此接口查询一个 API 密钥的详情，该接口会显示密钥 Key。
     */
    async DescribeApiKey(req, cb) {
        return this.request("DescribeApiKey", req, cb);
    }
    /**
     * 查询后端通道所绑定的API列表
     */
    async DescribeUpstreamBindApis(req, cb) {
        return this.request("DescribeUpstreamBindApis", req, cb);
    }
    /**
     * 本接口（ImportOpenApi）用于将OpenAPI规范定义的API导入到API网关。
     */
    async ImportOpenApi(req, cb) {
        return this.request("ImportOpenApi", req, cb);
    }
    /**
     * 本接口（ModifyService）用于修改服务的相关信息。当服务创建后，服务的名称、描述和服务类型均可被修改。
     */
    async ModifyService(req, cb) {
        return this.request("ModifyService", req, cb);
    }
    /**
     * 本接口（BindSecretIds）用于为使用计划绑定密钥。
将密钥绑定到某个使用计划，并将此使用计划绑定到某个服务发布的环境上，调用者方可使用此密钥调用这个服务中的 API，可使用本接口为使用计划绑定密钥。
     */
    async BindSecretIds(req, cb) {
        return this.request("BindSecretIds", req, cb);
    }
    /**
     * 本接口（DescribeApiForApiApp）用于应用使用者查询部署于 API 网关的 API 接口的详细信息。​
     */
    async DescribeApiForApiApp(req, cb) {
        return this.request("DescribeApiForApiApp", req, cb);
    }
    /**
     * 构建 API 文档
     */
    async BuildAPIDoc(req, cb) {
        return this.request("BuildAPIDoc", req, cb);
    }
    /**
     * 本接口（ModifyApiEnvironmentStrategy）用于修改API限流策略
     */
    async ModifyApiEnvironmentStrategy(req, cb) {
        return this.request("ModifyApiEnvironmentStrategy", req, cb);
    }
    /**
     * 本接口（ModifyApi）用于修改 API 接口，可调用此接口对已经配置的 API 接口进行编辑修改。修改后的 API 需要重新发布 API 所在的服务到对应环境方能生效。
     */
    async ModifyApi(req, cb) {
        return this.request("ModifyApi", req, cb);
    }
    /**
     * 本接口（DemoteServiceUsagePlan）用于将某个服务在某个环境的使用计划，降级到API上。
如果服务内没有API不允许进行此操作。
如果当前环境没有发布，不允许进行此操作。
     */
    async DemoteServiceUsagePlan(req, cb) {
        return this.request("DemoteServiceUsagePlan", req, cb);
    }
    /**
     * 本接口（DescribeServiceSubDomains）用于查询自定义域名列表。
API 网关可绑定自定义域名到服务，用于服务调用。此接口用于查询用户绑定在服务的自定义域名列表。
     */
    async DescribeServiceSubDomains(req, cb) {
        return this.request("DescribeServiceSubDomains", req, cb);
    }
    /**
     * 本接口（DescribeServiceUsagePlan）用于查询服务使用计划详情。
服务若需要鉴权限流生效，则需要绑定使用计划到此服务中，本接口用于查询绑定到一个服务的所有使用计划。
     */
    async DescribeServiceUsagePlan(req, cb) {
        return this.request("DescribeServiceUsagePlan", req, cb);
    }
    /**
     * Get the list of supported regions for dedicated instances
     */
    async DescribeExclusiveInstanceRegions(req, cb) {
        return this.request("DescribeExclusiveInstanceRegions", req, cb);
    }
    /**
     * 本接口（UpdateApiKey）用于更换用户已创建的一对 API 密钥。
     */
    async UpdateApiKey(req, cb) {
        return this.request("UpdateApiKey", req, cb);
    }
    /**
     * 删除API网关插件
     */
    async DeletePlugin(req, cb) {
        return this.request("DeletePlugin", req, cb);
    }
    /**
     * 本接口（BindIPStrategy）用于API绑定IP策略。
     */
    async BindIPStrategy(req, cb) {
        return this.request("BindIPStrategy", req, cb);
    }
    /**
     * 本接口（EnableApiKey）用于启动一对被禁用的 API 密钥。
     */
    async EnableApiKey(req, cb) {
        return this.request("EnableApiKey", req, cb);
    }
    /**
     * 本接口（CreateIPStrategy）用于创建服务IP策略。
     */
    async CreateIPStrategy(req, cb) {
        return this.request("CreateIPStrategy", req, cb);
    }
    /**
     * 删除 API 文档
     */
    async DeleteAPIDoc(req, cb) {
        return this.request("DeleteAPIDoc", req, cb);
    }
    /**
     * 查询专享实例列表（新）
     */
    async DescribeExclusiveInstancesStatus(req, cb) {
        return this.request("DescribeExclusiveInstancesStatus", req, cb);
    }
    /**
     * 本接口（UnBindEnvironment）用于将使用计划从特定环境解绑。
     */
    async UnBindEnvironment(req, cb) {
        return this.request("UnBindEnvironment", req, cb);
    }
    /**
     * 本接口（ModifyApiApp）用于修改已经创建的应用。
     */
    async ModifyApiApp(req, cb) {
        return this.request("ModifyApiApp", req, cb);
    }
    /**
     * 本接口（DescribeUsagePlan）用于查询一个使用计划的详细信息，包括名称、QPS、创建时间绑定的环境等。
     */
    async DescribeUsagePlan(req, cb) {
        return this.request("DescribeUsagePlan", req, cb);
    }
    /**
     * 本接口（BindSubDomain）用于绑定自定义域名到服务。
API 网关中每个服务都会提供一个默认的域名供用户调用，但当用户想使用自己的已有域名时，也可以将自定义域名绑定到此服务，在做好备案、与默认域名的 CNAME 后，可直接调用自定义域名。
     */
    async BindSubDomain(req, cb) {
        return this.request("BindSubDomain", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248632, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.apm = void 0;
const v20210622_1 = require("./v20210622");
exports.apm = {
    v20210622: v20210622_1.v20210622,
};

}, function(modId) { var map = {"./v20210622":1738984248633}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248633, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210622 = void 0;
const Models = require("./apm_models");
const apm_client_1 = require("./apm_client");
exports.v20210622 = {
    Client: apm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./apm_models":1738984248634,"./apm_client":1738984248635}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248634, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248635, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * apm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("apm.tencentcloudapi.com", "2021-06-22", clientConfig);
    }
    /**
     * 查询应用配置信息
     */
    async DescribeGeneralApmApplicationConfig(req, cb) {
        return this.request("DescribeGeneralApmApplicationConfig", req, cb);
    }
    /**
     * 根据维度名和过滤条件，查询维度数据.
     */
    async DescribeTagValues(req, cb) {
        return this.request("DescribeTagValues", req, cb);
    }
    /**
     * 通用查询调用链列表
     */
    async DescribeGeneralSpanList(req, cb) {
        return this.request("DescribeGeneralSpanList", req, cb);
    }
    /**
     * 获取 APM 业务系统列表
     */
    async DescribeApmInstances(req, cb) {
        return this.request("DescribeApmInstances", req, cb);
    }
    /**
     * 获取 APM 接入点
     */
    async DescribeApmAgent(req, cb) {
        return this.request("DescribeApmAgent", req, cb);
    }
    /**
     * 修改APM业务系统接口
     */
    async ModifyApmInstance(req, cb) {
        return this.request("ModifyApmInstance", req, cb);
    }
    /**
     * 对外开放的openApi，客户可以灵活的指定需要修改的字段，再加入需要修改的服务列表.
     */
    async ModifyGeneralApmApplicationConfig(req, cb) {
        return this.request("ModifyGeneralApmApplicationConfig", req, cb);
    }
    /**
     * 获取指标数据通用接口。用户根据需要上送请求参数，返回对应的指标数据。
接口调用频率限制为：20次/秒，1200次/分钟。单请求的数据点数限制为1440个。
     */
    async DescribeGeneralMetricData(req, cb) {
        return this.request("DescribeGeneralMetricData", req, cb);
    }
    /**
     * 查询指标列表接口，查询指标更推荐使用DescribeGeneralMetricData接口
     */
    async DescribeMetricRecords(req, cb) {
        return this.request("DescribeMetricRecords", req, cb);
    }
    /**
     * 销毁 APM 业务系统
     */
    async TerminateApmInstance(req, cb) {
        return this.request("TerminateApmInstance", req, cb);
    }
    /**
     * 业务购买 APM 业务系统，调用该接口创建
     */
    async CreateApmInstance(req, cb) {
        return this.request("CreateApmInstance", req, cb);
    }
    /**
     * 应用概览数据拉取
     */
    async DescribeServiceOverview(req, cb) {
        return this.request("DescribeServiceOverview", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248636, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.as = void 0;
const v20180419_1 = require("./v20180419");
exports.as = {
    v20180419: v20180419_1.v20180419,
};

}, function(modId) { var map = {"./v20180419":1738984248637}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248637, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180419 = void 0;
const Models = require("./as_models");
const as_client_1 = require("./as_client");
exports.v20180419 = {
    Client: as_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./as_models":1738984248638,"./as_client":1738984248639}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248638, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248639, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * as client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("as.tencentcloudapi.com", "2018-04-19", clientConfig);
    }
    /**
     * 暂停正在执行的实例刷新活动。
* 暂停状态下，伸缩组也会处于停用中状态
* 当前正在更新或扩容的实例不会暂停，待更新的实例会暂停更新
* 进行缩容时，所有实例都已经更新完成，此时无法暂停
     */
    async StopInstanceRefresh(req, cb) {
        return this.request("StopInstanceRefresh", req, cb);
    }
    /**
     * 本接口（ExecuteScalingPolicy）用于执行伸缩策略。

* 可以根据伸缩策略ID执行伸缩策略。
* 伸缩策略所属伸缩组处于伸缩活动时，会拒绝执行伸缩策略。
* 本接口不支持执行目标追踪策略。
     */
    async ExecuteScalingPolicy(req, cb) {
        return this.request("ExecuteScalingPolicy", req, cb);
    }
    /**
     * 本接口（CreateAutoScalingGroup）用于创建伸缩组
     */
    async CreateAutoScalingGroup(req, cb) {
        return this.request("CreateAutoScalingGroup", req, cb);
    }
    /**
     * 本接口（ClearLaunchConfigurationAttributes）用于将启动配置内的特定属性完全清空。
     */
    async ClearLaunchConfigurationAttributes(req, cb) {
        return this.request("ClearLaunchConfigurationAttributes", req, cb);
    }
    /**
     * 根据启动配置中参数，刷新伸缩组内运行中状态 CVM 实例，返回实例刷新活动的 RefreshActivityId。
* 对于重装实例的刷新方式（目前仅支持重装），重装时仅会从启动配置中获取 ImageId、UserData、EnhancedService、 HostName、LoginSettings 参数进行刷新，实例的其他参数不会刷新
* 实例刷新期间（包括暂停状态），伸缩组会被停用。不建议刷新期间修改关联启动配置，否则会影响刷新参数，造成实例配置不一致
* 滚动更新模式会分成多批次进行刷新实例，单批次中若存在刷新失败实例，活动会进入失败暂停状态
* 若待刷新实例被移出或销毁，会被标记为 NOT_FOUND 状态，不阻塞实例刷新活动
* 运行中状态实例与最新启动配置参数一致，实例也会再次刷新
     */
    async StartInstanceRefresh(req, cb) {
        return this.request("StartInstanceRefresh", req, cb);
    }
    /**
     * 本接口（ModifyScalingPolicy）用于修改告警触发策略。
     */
    async ModifyScalingPolicy(req, cb) {
        return this.request("ModifyScalingPolicy", req, cb);
    }
    /**
     * 本接口（ModifyLoadBalancerTargetAttributes）用于修改伸缩组内负载均衡器的目标规则属性。
     */
    async ModifyLoadBalancerTargetAttributes(req, cb) {
        return this.request("ModifyLoadBalancerTargetAttributes", req, cb);
    }
    /**
     * 本接口 (DescribeNotificationConfigurations) 用于查询一个或多个通知的详细信息。

可以根据通知ID、伸缩组ID等信息来查询通知的详细信息。过滤信息详细请见过滤器`Filter`。
如果参数为空，返回当前用户一定数量（Limit所指定的数量，默认为20）的通知。
     */
    async DescribeNotificationConfigurations(req, cb) {
        return this.request("DescribeNotificationConfigurations", req, cb);
    }
    /**
     * 本接口（DeleteAutoScalingGroup）用于删除指定伸缩组，删除前提是伸缩组内无运行中（IN_SERVICE）状态的实例且当前未在执行伸缩活动。删除伸缩组后，创建失败（CREATION_FAILED）、中止失败（TERMINATION_FAILED）、解绑失败（DETACH_FAILED）等非运行中状态的实例不会被销毁。
     */
    async DeleteAutoScalingGroup(req, cb) {
        return this.request("DeleteAutoScalingGroup", req, cb);
    }
    /**
     * 为伸缩组指定数量扩容实例，返回扩容活动的 ActivityId。
* 伸缩组需要未处于活动中
* 伸缩组处于停用状态时，该接口也会生效，可参考[停用伸缩组](https://cloud.tencent.com/document/api/377/20435)文档查看伸缩组停用状态的影响范围
* 接口会增加期望实例数，新的期望实例数需要小于等于最大实例数
* 扩容如果失败或者部分成功，最后期望实例数只会增加实际成功的实例数量
* 竞价混合模式中一次扩容可能触发多个伸缩活动，该接口仅返回第一个伸缩活动的 ActivityId
     */
    async ScaleOutInstances(req, cb) {
        return this.request("ScaleOutInstances", req, cb);
    }
    /**
     * 伸缩组内实例退出备用中状态。
* 备用中状态的实例负载均衡器权重值为 0，退出备用中状态后，权重值也会恢复
* 对备用中状态实例进行开关机操作也会使其退出备用中状态
     */
    async ExitStandby(req, cb) {
        return this.request("ExitStandby", req, cb);
    }
    /**
     * 本接口（StartAutoScalingInstances）用于开启伸缩组内 CVM 实例。
* 开机成功，实例转为`IN_SERVICE`状态后，会增加期望实例数，期望实例数不可超过设置的最大值
* 本接口支持批量操作，每次请求开机实例的上限为100
     */
    async StartAutoScalingInstances(req, cb) {
        return this.request("StartAutoScalingInstances", req, cb);
    }
    /**
     * 已有替代接口ModifyLaunchConfiguration。该接口存在覆盖参数风险，目前官网已隐藏

本接口（UpgradeLaunchConfiguration）用于升级启动配置。

* 本接口用于升级启动配置，采用“完全覆盖”风格，无论之前参数如何，统一按照接口参数设置为新的配置。对于非必填字段，不填写则按照默认值赋值。
* 升级修改启动配置后，已经使用该启动配置扩容的存量实例不会发生变更，此后使用该启动配置的新增实例会按照新的配置进行扩容。
     */
    async UpgradeLaunchConfiguration(req, cb) {
        return this.request("UpgradeLaunchConfiguration", req, cb);
    }
    /**
     * 本接口（DescribeRefreshActivities）用于查询伸缩组的实例刷新活动记录。
     */
    async DescribeRefreshActivities(req, cb) {
        return this.request("DescribeRefreshActivities", req, cb);
    }
    /**
     * 此接口用于修改生命周期挂钩。
     */
    async ModifyLifecycleHook(req, cb) {
        return this.request("ModifyLifecycleHook", req, cb);
    }
    /**
     * 本接口（DetachLoadBalancers）用于从伸缩组移出负载均衡器，本接口不会销毁负载均衡器。
     */
    async DetachLoadBalancers(req, cb) {
        return this.request("DetachLoadBalancers", req, cb);
    }
    /**
     * 本接口（AttachInstances）用于将 CVM 实例添加到伸缩组。
* 仅支持添加处于`RUNNING`（运行中）或`STOPPED`（已关机）状态的 CVM 实例
* 添加的 CVM 实例需要和伸缩组 VPC 网络一致

     */
    async AttachInstances(req, cb) {
        return this.request("AttachInstances", req, cb);
    }
    /**
     * 本接口（DescribeScalingPolicies）用于查询告警触发策略。
     */
    async DescribeScalingPolicies(req, cb) {
        return this.request("DescribeScalingPolicies", req, cb);
    }
    /**
     * 本接口（DeleteScheduledAction）用于删除特定的定时任务。
     */
    async DeleteScheduledAction(req, cb) {
        return this.request("DeleteScheduledAction", req, cb);
    }
    /**
     * 此接口（AttachLoadBalancers）用于将负载均衡器添加到伸缩组。
     */
    async AttachLoadBalancers(req, cb) {
        return this.request("AttachLoadBalancers", req, cb);
    }
    /**
     * 本接口（DetachInstances）用于从伸缩组移出 CVM 实例，本接口不会销毁实例。
* 如果移出指定实例后，伸缩组内处于`IN_SERVICE`状态的实例数量小于伸缩组最小值，接口将报错
* 如果伸缩组处于`DISABLED`状态，移出操作不校验`IN_SERVICE`实例数量和最小值的关系
* 对于伸缩组配置的 CLB，实例在离开伸缩组时，AS 会进行解挂载动作
     */
    async DetachInstances(req, cb) {
        return this.request("DetachInstances", req, cb);
    }
    /**
     * 为伸缩组指定数量缩容实例，返回缩容活动的 ActivityId。
* 伸缩组需要未处于活动中
* 伸缩组处于停用状态时，该接口也会生效，可参考[停用伸缩组](https://cloud.tencent.com/document/api/377/20435)文档查看伸缩组停用状态的影响范围
* 根据伸缩组的`TerminationPolicies`策略，选择被缩容的实例，可参考[缩容处理](https://cloud.tencent.com/document/product/377/8563)
* 接口只会选择`IN_SERVICE`实例缩容，如果需要缩容其他状态实例，可以使用 [DetachInstances](https://cloud.tencent.com/document/api/377/20436) 或 [RemoveInstances](https://cloud.tencent.com/document/api/377/20431) 接口
* 接口会减少期望实例数，新的期望实例数需要大于等于最小实例数
* 缩容如果失败或者部分成功，最后期望实例数只会扣减实际缩容成功的实例数量
     */
    async ScaleInInstances(req, cb) {
        return this.request("ScaleInInstances", req, cb);
    }
    /**
     * 本接口（CreateScheduledAction）用于创建定时任务。
     */
    async CreateScheduledAction(req, cb) {
        return this.request("CreateScheduledAction", req, cb);
    }
    /**
     * 本接口（SetInstancesProtection）用于设置实例保护。
实例设置保护之后，当发生不健康替换、报警策略、期望值变更等触发缩容时，将不对此实例缩容操作。
     */
    async SetInstancesProtection(req, cb) {
        return this.request("SetInstancesProtection", req, cb);
    }
    /**
     * 此接口用于查询伸缩组配置建议。
     */
    async DescribeAutoScalingAdvices(req, cb) {
        return this.request("DescribeAutoScalingAdvices", req, cb);
    }
    /**
     * 本接口（RemoveInstances）用于从伸缩组删除 CVM 实例。根据当前的产品逻辑，如果实例由弹性伸缩自动创建，则实例会被销毁；如果实例系创建后加入伸缩组的，则会从伸缩组中移除，保留实例。
* 如果删除指定实例后，伸缩组内处于`IN_SERVICE`状态的实例数量小于伸缩组最小值，接口将报错
* 如果伸缩组处于`DISABLED`状态，删除操作不校验`IN_SERVICE`实例数量和最小值的关系
* 对于伸缩组配置的 CLB，实例在离开伸缩组时，AS 会进行解挂载动作
     */
    async RemoveInstances(req, cb) {
        return this.request("RemoveInstances", req, cb);
    }
    /**
     * 本接口（DeleteScalingPolicy）用于删除告警触发策略。
     */
    async DeleteScalingPolicy(req, cb) {
        return this.request("DeleteScalingPolicy", req, cb);
    }
    /**
     * 本接口（CompleteLifecycleAction）用于完成生命周期动作。

* 用户通过调用本接口，指定一个具体的生命周期挂钩的结果（“CONITNUE”或者“ABANDON”）。如果一直不调用本接口，则生命周期挂钩会在超时后按照“DefaultResult”进行处理。
     */
    async CompleteLifecycleAction(req, cb) {
        return this.request("CompleteLifecycleAction", req, cb);
    }
    /**
     * 本接口（ModifyLoadBalancers）用于修改伸缩组的负载均衡器。

* 本接口用于为伸缩组指定新的负载均衡器配置，采用`完全覆盖`风格，无论之前配置如何，`统一按照接口参数配置为新的负载均衡器`。
* 如果要为伸缩组清空负载均衡器，则在调用本接口时仅指定伸缩组ID，不指定具体负载均衡器。
* 本接口会立即修改伸缩组的负载均衡器，并生成一个伸缩活动，异步修改存量实例的负载均衡器。
     */
    async ModifyLoadBalancers(req, cb) {
        return this.request("ModifyLoadBalancers", req, cb);
    }
    /**
     * 本接口（ModifyDesiredCapacity）用于修改指定伸缩组的期望实例数
     */
    async ModifyDesiredCapacity(req, cb) {
        return this.request("ModifyDesiredCapacity", req, cb);
    }
    /**
     * 回滚操作会生成一个新的实例刷新活动，该活动也支持分批次刷新以及暂停、恢复、取消操作，接口返回回滚活动的 RefreshActivityId。
* 原活动中待刷新实例变更为已取消，忽略不存在实例，其他状态实例进入回滚流程
* 原活动中正在刷新的实例不会立刻终止，刷新结束后再执行回滚活动
* 暂停状态或最近一次成功的刷新活动支持回滚，其他状态不支持回滚
* 原活动刷新方式为重装实例时，对于 ImageId参数，会自动恢复到回滚前镜像 ID；对于 UserData、EnhancedService、LoginSettings、 HostName 参数，依然会从启动配置中读取，需用户在回滚前自行修改启动配置
* 回滚活动暂不支持 MaxSurge 参数
     */
    async RollbackInstanceRefresh(req, cb) {
        return this.request("RollbackInstanceRefresh", req, cb);
    }
    /**
     * 本接口（ModifyNotificationConfiguration）用于修改通知。
* 通知的接收端类型不支持修改。
     */
    async ModifyNotificationConfiguration(req, cb) {
        return this.request("ModifyNotificationConfiguration", req, cb);
    }
    /**
     * 本接口（StopAutoScalingInstances）用于关闭伸缩组内 CVM 实例。
* 关机方式采用`SOFT_FIRST`方式，表示在正常关闭失败后进行强制关闭
* 关闭`IN_SERVICE`状态的实例，会减少期望实例数，期望实例数不可低于设置的最小值
* 使用`STOP_CHARGING`选项关机，待关机的实例需要满足[关机不收费条件](https://cloud.tencent.com/document/product/213/19918)
* 本接口支持批量操作，每次请求关机实例的上限为100
     */
    async StopAutoScalingInstances(req, cb) {
        return this.request("StopAutoScalingInstances", req, cb);
    }
    /**
     * 本接口（CreateLaunchConfiguration）用于创建新的启动配置。

* 启动配置，可以通过 `ModifyLaunchConfigurationAttributes` 修改少量字段。如需使用新的启动配置，建议重新创建启动配置。

* 每个项目最多只能创建20个启动配置，详见[使用限制](https://cloud.tencent.com/document/product/377/3120)。
     */
    async CreateLaunchConfiguration(req, cb) {
        return this.request("CreateLaunchConfiguration", req, cb);
    }
    /**
     * 本接口（ModifyAutoScalingGroup）用于修改伸缩组。
     */
    async ModifyAutoScalingGroup(req, cb) {
        return this.request("ModifyAutoScalingGroup", req, cb);
    }
    /**
     * 本接口（CreateNotificationConfiguration）用于创建通知。
通知到 CMQ 主题或队列时，消息内容如下：
```
{
    "Service": "Tencent Cloud Auto Scaling",
    "CreatedTime": "2021-10-11T10:15:11Z", // 活动创建时间
    "AppId": "100000000",
    "ActivityId": "asa-fznnvrja", // 伸缩活动ID
    "AutoScalingGroupId": "asg-pc2oqu2z", // 伸缩组ID
    "ActivityType": "SCALE_OUT",  // 伸缩活动类型
    "StatusCode": "SUCCESSFUL",   // 伸缩活动结果
    "Description": "Activity was launched in response to a difference between desired capacity and actual capacity,
    scale out 1 instance(s).", // 伸缩活动描述
    "StartTime": "2021-10-11T10:15:11Z",  // 活动开始时间
    "EndTime": "2021-10-11T10:15:32Z",    // 活动结束时间
    "DetailedStatusMessageSet": [ // 活动内部错误集合（非空不代表活动失败）
        {
            "Code": "InvalidInstanceType",
            "Zone": "ap-guangzhou-2",
            "InstanceId": "",
            "InstanceChargeType": "POSTPAID_BY_HOUR",
            "SubnetId": "subnet-4t5mgeuu",
            "Message": "The specified instance type `S5.LARGE8` is invalid in `subnet-4t5mgeuu`, `ap-guangzhou-2`.",
            "InstanceType": "S5.LARGE8"
        }
    ]
}
```
     */
    async CreateNotificationConfiguration(req, cb) {
        return this.request("CreateNotificationConfiguration", req, cb);
    }
    /**
     * 本接口（DescribeAutoScalingInstances）用于查询弹性伸缩关联实例的信息。

* 可以根据实例ID、伸缩组ID等信息来查询实例的详细信息。过滤信息详细请见过滤器`Filter`。
* 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的实例。
     */
    async DescribeAutoScalingInstances(req, cb) {
        return this.request("DescribeAutoScalingInstances", req, cb);
    }
    /**
     * 本接口（CreateAutoScalingGroupFromInstance）用于根据实例创建启动配置及伸缩组。

说明：根据按包年包月计费的实例所创建的伸缩组，其扩容的实例为按量计费实例。
     */
    async CreateAutoScalingGroupFromInstance(req, cb) {
        return this.request("CreateAutoScalingGroupFromInstance", req, cb);
    }
    /**
     * 本接口（CreateLifecycleHook）用于创建生命周期挂钩。

* 您可以为生命周期挂钩配置消息通知或执行自动化助手命令。

如果您配置了通知消息，弹性伸缩会通知您的TDMQ消息队列，通知内容形如：

```
{
    "Service": "Tencent Cloud Auto Scaling",
    "Time": "2019-03-14T10:15:11Z",
    "AppId": "1251783334",
    "ActivityId": "asa-fznnvrja",
    "AutoScalingGroupId": "asg-rrrrtttt",
    "LifecycleHookId": "ash-xxxxyyyy",
    "LifecycleHookName": "my-hook",
    "LifecycleActionToken": "3080e1c9-0efe-4dd7-ad3b-90cd6618298f",
    "InstanceId": "ins-aaaabbbb",
    "LifecycleTransition": "INSTANCE_LAUNCHING",
    "NotificationMetadata": ""
}
```
     */
    async CreateLifecycleHook(req, cb) {
        return this.request("CreateLifecycleHook", req, cb);
    }
    /**
     * 本接口（UpgradeLifecycleHook）用于升级生命周期挂钩。

* 本接口用于升级生命周期挂钩，采用“完全覆盖”风格，无论之前参数如何，统一按照接口参数设置为新的配置。对于非必填字段，不填写则按照默认值赋值。
     */
    async UpgradeLifecycleHook(req, cb) {
        return this.request("UpgradeLifecycleHook", req, cb);
    }
    /**
     * 本接口（DisableAutoScalingGroup）用于停用指定伸缩组。
* 停用伸缩组后，自动触发的伸缩活动不再进行，包括：
    - 告警策略触发的伸缩活动
    - 匹配期望实例数的伸缩活动
    - 不健康实例替换活动
    - 定时任务
* 停用伸缩组后，手动触发的伸缩活动允许进行，包括：
    - 指定数量扩容实例（ScaleOutInstances）
    - 指定数量缩容实例（ScaleInInstances）
    - 从伸缩组中移出 CVM 实例（DetachInstances）
    - 从伸缩组中删除 CVM 实例（RemoveInstances）
    - 添加 CVM 实例到伸缩组（AttachInstances）
    - 关闭伸缩组内 CVM 实例（StopAutoScalingInstances）
    - 开启伸缩组内 CVM 实例（StartAutoScalingInstances）
     */
    async DisableAutoScalingGroup(req, cb) {
        return this.request("DisableAutoScalingGroup", req, cb);
    }
    /**
     * 本接口（DescribeLaunchConfigurations）用于查询启动配置的信息。

* 可以根据启动配置ID、启动配置名称等信息来查询启动配置的详细信息。过滤信息详细请见过滤器`Filter`。
* 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的启动配置。
     */
    async DescribeLaunchConfigurations(req, cb) {
        return this.request("DescribeLaunchConfigurations", req, cb);
    }
    /**
     * 本接口（CreateScalingPolicy）用于创建告警触发策略。
     */
    async CreateScalingPolicy(req, cb) {
        return this.request("CreateScalingPolicy", req, cb);
    }
    /**
     * 本接口（DeleteLaunchConfiguration）用于删除启动配置。

* 若启动配置在伸缩组中属于生效状态，则该启动配置不允许删除。

     */
    async DeleteLaunchConfiguration(req, cb) {
        return this.request("DeleteLaunchConfiguration", req, cb);
    }
    /**
     * 本接口（DeleteLifecycleHook）用于删除生命周期挂钩。
     */
    async DeleteLifecycleHook(req, cb) {
        return this.request("DeleteLifecycleHook", req, cb);
    }
    /**
     * 本接口（DescribeAutoScalingGroupLastActivities）用于查询伸缩组的最新一次伸缩活动记录。
     */
    async DescribeAutoScalingGroupLastActivities(req, cb) {
        return this.request("DescribeAutoScalingGroupLastActivities", req, cb);
    }
    /**
     * 本接口（DescribeLifecycleHooks）用于查询生命周期挂钩信息。

* 可以根据伸缩组ID、生命周期挂钩ID或者生命周期挂钩名称等信息来查询生命周期挂钩的详细信息。过滤信息详细请见过滤器`Filter`。
* 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的生命周期挂钩。
     */
    async DescribeLifecycleHooks(req, cb) {
        return this.request("DescribeLifecycleHooks", req, cb);
    }
    /**
     * 本接口（EnableAutoScalingGroup）用于启用指定伸缩组。
     */
    async EnableAutoScalingGroup(req, cb) {
        return this.request("EnableAutoScalingGroup", req, cb);
    }
    /**
     * 本接口 (DescribeScheduledActions) 用于查询一个或多个定时任务的详细信息。

* 可以根据定时任务ID、定时任务名称或者伸缩组ID等信息来查询定时任务的详细信息。过滤信息详细请见过滤器`Filter`。
* 如果参数为空，返回当前用户一定数量（Limit所指定的数量，默认为20）的定时任务。
     */
    async DescribeScheduledActions(req, cb) {
        return this.request("DescribeScheduledActions", req, cb);
    }
    /**
     * 本接口（DescribeAutoScalingGroups）用于查询伸缩组信息。

* 可以根据伸缩组ID、伸缩组名称或者启动配置ID等信息来查询伸缩组的详细信息。过滤信息详细请见过滤器`Filter`。
* 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的伸缩组。
     */
    async DescribeAutoScalingGroups(req, cb) {
        return this.request("DescribeAutoScalingGroups", req, cb);
    }
    /**
     * 本接口（ModifyScheduledAction）用于修改定时任务。
     */
    async ModifyScheduledAction(req, cb) {
        return this.request("ModifyScheduledAction", req, cb);
    }
    /**
     * 本接口（DescribeAutoScalingActivities）用于查询伸缩组的伸缩活动记录。
     */
    async DescribeAutoScalingActivities(req, cb) {
        return this.request("DescribeAutoScalingActivities", req, cb);
    }
    /**
     * 本接口（DeleteNotificationConfiguration）用于删除特定的通知。
     */
    async DeleteNotificationConfiguration(req, cb) {
        return this.request("DeleteNotificationConfiguration", req, cb);
    }
    /**
     * 恢复暂停状态的实例刷新活动，使其重试当前批次刷新失败实例或继续刷新后续批次，非暂停状态下调用该接口无效。

- 使用 MaxSurge 参数时活动可能会处于扩容或缩容失败导致的暂停状态，也可以使用该接口重试扩缩容。
     */
    async ResumeInstanceRefresh(req, cb) {
        return this.request("ResumeInstanceRefresh", req, cb);
    }
    /**
     * 取消伸缩组的实例刷新活动。
* 已刷新/正在刷新的批次不受影响，待刷新批次被取消
* 刷新失败的实例保持备用中状态，需用户手动处理后尝试退出备用中状态或销毁
* 取消后不允许回滚操作，也不支持恢复操作
* 因 maxSurge 参数而临时扩容的实例在取消后会自动销毁
* 进行缩容时，所有实例都已经更新完成，此时无法取消
     */
    async CancelInstanceRefresh(req, cb) {
        return this.request("CancelInstanceRefresh", req, cb);
    }
    /**
     * 本接口（DescribeAccountLimits）用于查询用户账户在弹性伸缩中的资源限制。
     */
    async DescribeAccountLimits(req, cb) {
        return this.request("DescribeAccountLimits", req, cb);
    }
    /**
     * 本接口（ModifyLaunchConfigurationAttributes）用于修改启动配置部分属性。

* 修改启动配置后，已经使用该启动配置扩容的存量实例不会发生变更，此后使用该启动配置的新增实例会按照新的配置进行扩容。
* 本接口支持修改部分简单类型。
     */
    async ModifyLaunchConfigurationAttributes(req, cb) {
        return this.request("ModifyLaunchConfigurationAttributes", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248640, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.asr = void 0;
const v20190614_1 = require("./v20190614");
exports.asr = {
    v20190614: v20190614_1.v20190614,
};

}, function(modId) { var map = {"./v20190614":1738984248641}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248641, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190614 = void 0;
const Models = require("./asr_models");
const asr_client_1 = require("./asr_client");
exports.v20190614 = {
    Client: asr_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./asr_models":1738984248642,"./asr_client":1738984248643}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248642, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248643, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * asr client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("asr.tencentcloudapi.com", "2019-06-14", clientConfig);
    }
    /**
     * 查询用户用量
     */
    async GetUsageByDate(req, cb) {
        return this.request("GetUsageByDate", req, cb);
    }
    /**
     * 通过比对两段音频内说话人的声纹，得到一个打分，可通过打分判断两段音频声纹相似度,  打分区间[0 - 100]。 音频要求：16k采样率， 16bit位深，pcm或者wav格式， 单声道，总时长不超过30秒的音频，base64编码数据大小不超过2M，音频内容只有一个说话人声音，并且尽可能清晰，这样结果更加准确。
     */
    async VoicePrintCompare(req, cb) {
        return this.request("VoicePrintCompare", req, cb);
    }
    /**
     * 用户通过本接口进行对应的词表信息更新。
     */
    async UpdateAsrVocab(req, cb) {
        return this.request("UpdateAsrVocab", req, cb);
    }
    /**
     * 本接口用于对语音流进行准实时识别，通过异步回调来返回识别结果。适用于直播审核等场景。
<br>• 支持rtmp、rtsp等流媒体协议，以及各类基于http协议的直播流(不支持hls)
<br>• 音频流时长无限制，服务会自动拉取音频流数据，若连续10分钟拉不到流数据时，服务会终止识别任务
<br>• 服务通过回调的方式来提供识别结果，用户需要提供CallbackUrl。回调时机为一小段话(最长15秒)回调一次。
<br>• 签名方法参考 [公共参数](https://cloud.tencent.com/document/api/1093/35640) 中签名方法v3。
<br>• 默认单账号限制并发数为20路，如您有提高并发限制的需求，请提[工单](https://console.cloud.tencent.com/workorder/category)进行咨询。
     */
    async CreateAsyncRecognitionTask(req, cb) {
        return this.request("CreateAsyncRecognitionTask", req, cb);
    }
    /**
     * 查询自学习模型列表
     */
    async GetCustomizationList(req, cb) {
        return this.request("GetCustomizationList", req, cb);
    }
    /**
     * 统计并返回注册的说话人id总数
     */
    async VoicePrintCount(req, cb) {
        return this.request("VoicePrintCount", req, cb);
    }
    /**
     * 用户通过该接口，可获得所有的热词表及其信息。
     */
    async GetAsrVocabList(req, cb) {
        return this.request("GetAsrVocabList", req, cb);
    }
    /**
     * 用户根据词表的ID可以获取对应的热词表信息
     */
    async GetAsrVocab(req, cb) {
        return this.request("GetAsrVocab", req, cb);
    }
    /**
     * 用户通过该接口可以设置热词表的默认状态。初始状态为0，用户可设置状态为1，即为默认状态。默认状态表示用户在请求识别时，如不设置热词表ID，则默认使用状态为1的热词表。
     */
    async SetVocabState(req, cb) {
        return this.request("SetVocabState", req, cb);
    }
    /**
     * 用户通过本接口进行热词表的下载，获得词表权重文件形式的 base64 值，文件形式为通过 “|” 分割的词和权重，即 word|weight 的形式。
     */
    async DownloadAsrVocab(req, cb) {
        return this.request("DownloadAsrVocab", req, cb);
    }
    /**
     * 用户使用该接口可以创建自学习模型，以供识别调用。

注意：调用该接口后，模型会自动训练。新建模型成功后，调用ModifyCustomizationState接口修改为上线状态，即可在识别请求中使用对应模型ID。
     */
    async CreateCustomization(req, cb) {
        return this.request("CreateCustomization", req, cb);
    }
    /**
     * 说话人验证1:N接口，可以通过传入一段说话人音频，并且指定已存在的groupId, 和返回topN,  接口返回groupId内所有声纹和传入音频声纹比对打分TopN的结果。
     */
    async VoicePrintGroupVerify(req, cb) {
        return this.request("VoicePrintGroupVerify", req, cb);
    }
    /**
     * 用户通过本接口进行热词表的删除。
     */
    async DeleteAsrVocab(req, cb) {
        return this.request("DeleteAsrVocab", req, cb);
    }
    /**
     * 用户通过该接口，可获得所有的关键词表及其信息。
     */
    async GetAsrKeyWordLibList(req, cb) {
        return this.request("GetAsrKeyWordLibList", req, cb);
    }
    /**
     * 本接口用于对60秒之内的短音频文件进行识别。
•   支持中文普通话、英语、粤语、日语、越南语、马来语、印度尼西亚语、菲律宾语、泰语、葡萄牙语、土耳其语、阿拉伯语、印地语、法语、德语、上海话、四川话、武汉话、贵阳话、昆明话、西安话、郑州话、太原话、兰州话、银川话、西宁话、南京话、合肥话、南昌话、长沙话、苏州话、杭州话、济南话、天津话、石家庄话、黑龙江话、吉林话、辽宁话。
•   支持本地语音文件上传和语音URL上传两种请求方式，音频时长不能超过60s，音频文件大小不能超过3MB。推荐使用 [腾讯云COS](https://cloud.tencent.com/document/product/436/38484) 来存储音频、生成URL并提交请求，此种方式会走内网下载音频，极大降低整体请求时延；并且不会产生外网和流量下行费用，可节约成本（COS桶权限需要设置公有读私有写，或URL设置时效访问签名）
•   音频格式支持wav、pcm、ogg-opus、speex、silk、mp3、m4a、aac、 amr。
•   请求方法为 HTTP POST , Content-Type为"application/json; charset=utf-8"
•   签名方法参考 [公共参数](https://cloud.tencent.com/document/api/1093/35640) 中签名方法v3。
•   默认接口请求频率限制：30次/秒，如您有提高请求频率限制的需求，请[前往购买](https://buy.cloud.tencent.com/asr)。
     */
    async SentenceRecognition(req, cb) {
        return this.request("SentenceRecognition", req, cb);
    }
    /**
     * 用户通过本接口进行对应的关键词表信息更新。
     */
    async UpdateAsrKeyWordLib(req, cb) {
        return this.request("UpdateAsrKeyWordLib", req, cb);
    }
    /**
     * 本接口用于更新和覆盖已注册的音频数据和说话人昵称，更新后原有的音频数据将失效。
     */
    async VoicePrintUpdate(req, cb) {
        return this.request("VoicePrintUpdate", req, cb);
    }
    /**
     * 本接口可对较长的录音文件进行识别。如希望直接使用带界面的语音识别产品，请访问[产品体验中心](https://console.cloud.tencent.com/asr/demonstrate)。产品计费标准请查阅 [计费概述（在线版）](https://cloud.tencent.com/document/product/1093/35686)
• 接口默认限频：20次/秒。此处仅限制任务提交频次，与识别结果返回时效无关
• 返回时效：异步回调，非实时返回。最长3小时返回识别结果，**大多数情况下，1小时的音频1-3分钟即可完成识别**。请注意：上述返回时长不含音频下载时延，且30分钟内发送超过1000小时录音或2万条任务的情况除外
• 音频格式：wav、mp3、m4a、flv、mp4、wma、3gp、amr、aac、ogg-opus、flac
• 支持语言：在本页面上搜索 **EngineModelType**，或前往 [产品功能](https://cloud.tencent.com/document/product/1093/35682) 查看
• 音频提交方式：本接口支持**音频 URL 、本地音频文件**两种请求方式。推荐使用 [腾讯云COS](https://cloud.tencent.com/document/product/436/38484) 来存储、生成URL并提交任务，此种方式将不产生外网和流量下行费用，可节约成本、提升任务速度（COS桶权限需要设置公有读私有写，或URL设置外部可访问）
• 音频限制：音频 URL 时长不能大于5小时，文件大小不超过1GB；本地音频文件不能大于5MB
• 如何获取识别结果：支持**回调或轮询**的方式获取结果，具体请参考 [录音文件识别结果查询](https://cloud.tencent.com/document/product/1093/37822)
• 识别结果有效时间：识别结果在服务端保存24小时
• 签名方法参考 [公共参数](https://cloud.tencent.com/document/api/1093/35640) 中签名方法 v3
     */
    async CreateRecTask(req, cb) {
        return this.request("CreateRecTask", req, cb);
    }
    /**
     * 调用录音文件识别请求接口后，有回调和轮询两种方式获取识别结果。
• **注意任务有效期为24小时，超过24小时的任务请不要再查询，且不要依赖TaskId作为业务唯一ID，不同日期可能出现重复TaskId。**
• 当采用回调方式时，识别完成后会将结果通过 POST 请求的形式通知到用户在请求时填写的回调 URL，具体请参见[ 录音识别结果回调 ](https://cloud.tencent.com/document/product/1093/52632)。
• 当采用轮询方式时，需要主动提交任务ID来轮询识别结果，共有任务成功、等待、执行中和失败四种结果，具体信息请参见下文说明。
•   请求方法为 HTTP POST , Content-Type为"application/json; charset=utf-8"
•   签名方法参考 [公共参数](https://cloud.tencent.com/document/api/1093/35640) 中签名方法v3。
•   默认接口请求频率限制：50次/秒，如您有提高请求频率限制的需求，请提[工单](https://console.cloud.tencent.com/workorder/category)进行咨询。
     */
    async DescribeTaskStatus(req, cb) {
        return this.request("DescribeTaskStatus", req, cb);
    }
    /**
     * 说话人注册接口用于注册一个指定音频，生成一个唯一的说话人id，后续可通过说话人验证接口验证其它音频和已有的说话人ID匹配度，注册时可指定说话人昵称，方便标识说话人ID，  说话人昵称可重复配置。
（注: 一个appid最多可以注册1000个说话人ID，一个说话人ID仅支持一条音频注册，后续可通过更新接口进行更新）

使用须知
支持的输入格式：编码文件(PCM, WAV)、16 bit采样位数、单声道（mono）。

支持的音频采样率：16000 Hz。
     */
    async VoicePrintEnroll(req, cb) {
        return this.request("VoicePrintEnroll", req, cb);
    }
    /**
     * 本接口用于校验传入音频与已注册音频的匹配程度，通过指定说话人ID（VoicePrintId）和一段音频进行音频和说话人的匹配度判断
     */
    async VoicePrintVerify(req, cb) {
        return this.request("VoicePrintVerify", req, cb);
    }
    /**
     * 本接口用于查询当前在运行的语音流异步识别任务列表。
<br>•   签名方法参考 [公共参数](https://cloud.tencent.com/document/api/1093/35640) 中签名方法v3。
     */
    async DescribeAsyncRecognitionTasks(req, cb) {
        return this.request("DescribeAsyncRecognitionTasks", req, cb);
    }
    /**
     * 本接口用于以删除已经注册的说话人信息（删除之后，原有的说话人ID和说话人音频数据都会失效）
     */
    async VoicePrintDelete(req, cb) {
        return this.request("VoicePrintDelete", req, cb);
    }
    /**
     * 用户通过本接口进行关键字词表的创建。
<br>•   默认每个用户最多可创建30个关键字词表。
<br>•   每个关键词词表最多可添加100个词，每个词最多5个汉字或15个字符。
<br>•   词表通过本地文件形式上传。
<br>•   本地文件必须为UTF-8编码格式，每行仅添加一个词且不能包含标点和特殊字符。
     */
    async CreateAsrKeyWordLib(req, cb) {
        return this.request("CreateAsrKeyWordLib", req, cb);
    }
    /**
     * 用户通过该接口可以更新自学习模型，如模型名称、模型类型、模型语料。
     */
    async ModifyCustomization(req, cb) {
        return this.request("ModifyCustomization", req, cb);
    }
    /**
     * 本接口用于关闭语音流异步识别任务。
     */
    async CloseAsyncRecognitionTask(req, cb) {
        return this.request("CloseAsyncRecognitionTask", req, cb);
    }
    /**
     * 通过自学习模型id获取自学习模型详细信息
     */
    async GetModelInfo(req, cb) {
        return this.request("GetModelInfo", req, cb);
    }
    /**
     * 用户通过本接口进行关键词表的删除。
     */
    async DeleteAsrKeyWordLib(req, cb) {
        return this.request("DeleteAsrKeyWordLib", req, cb);
    }
    /**
     * 通过该接口，用户可以修改自学习模型状态，上下线自学习模型
     */
    async ModifyCustomizationState(req, cb) {
        return this.request("ModifyCustomizationState", req, cb);
    }
    /**
     * 用户通过本接口进行热词表的创建。
<br>•   默认最多可创建30个热词表。
<br>•   每个热词表最多可添加1000个词，每个词最长10个汉字或30个英文字符，不能超出限制。
<br>•   热词表可以通过数组或者本地文件形式上传。
<br>•   本地文件必须为UTF-8编码格式，每行仅添加一个热词且不能包含标点和特殊字符。
<br>•   热词权重取值范围为[1,11]之间的整数或者100，权重越大代表该词被识别出来的概率越大。
<br>• 注意:  热词权重设置为11时，当前热词将升级为超级热词，建议仅将重要且必须生效的热词设置到11，设置过多权重为11的热词将影响整体字准率。
     */
    async CreateAsrVocab(req, cb) {
        return this.request("CreateAsrVocab", req, cb);
    }
    /**
     * 用户通过该接口可以删除自学习模型
     */
    async DeleteCustomization(req, cb) {
        return this.request("DeleteCustomization", req, cb);
    }
    /**
     * 用户通过该接口可以下载自学习模型的语料
     */
    async DownloadCustomization(req, cb) {
        return this.request("DownloadCustomization", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248644, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.asw = void 0;
const v20200722_1 = require("./v20200722");
exports.asw = {
    v20200722: v20200722_1.v20200722,
};

}, function(modId) { var map = {"./v20200722":1738984248645}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248645, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200722 = void 0;
const Models = require("./asw_models");
const asw_client_1 = require("./asw_client");
exports.v20200722 = {
    Client: asw_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./asw_models":1738984248646,"./asw_client":1738984248647}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248646, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248647, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * asw client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("asw.tencentcloudapi.com", "2020-07-22", clientConfig);
    }
    /**
     * 为指定的状态机启动一次执行
     */
    async StartExecution(req, cb) {
        return this.request("StartExecution", req, cb);
    }
    /**
     * 终止某个状态机
     */
    async StopExecution(req, cb) {
        return this.request("StopExecution", req, cb);
    }
    /**
     * 一次执行会有很多步骤，经过很多节点，这个接口描述某一次执行的事件的历史
     */
    async DescribeExecutionHistory(req, cb) {
        return this.request("DescribeExecutionHistory", req, cb);
    }
    /**
     * 查询执行详细信息
     */
    async DescribeExecution(req, cb) {
        return this.request("DescribeExecution", req, cb);
    }
    /**
     * 查询指定用户下所有状态机，以列表形式返回
     */
    async DescribeFlowServices(req, cb) {
        return this.request("DescribeFlowServices", req, cb);
    }
    /**
     * 对状态机的执行历史进行描述.
     */
    async DescribeExecutions(req, cb) {
        return this.request("DescribeExecutions", req, cb);
    }
    /**
     * 该接口用于生成状态机服务
     */
    async CreateFlowService(req, cb) {
        return this.request("CreateFlowService", req, cb);
    }
    /**
     * 查询该用户指定状态机下的详情数据。
     */
    async DescribeFlowServiceDetail(req, cb) {
        return this.request("DescribeFlowServiceDetail", req, cb);
    }
    /**
     * 该接口用于修改状态机
     */
    async ModifyFlowService(req, cb) {
        return this.request("ModifyFlowService", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248648, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ba = void 0;
const v20200720_1 = require("./v20200720");
exports.ba = {
    v20200720: v20200720_1.v20200720,
};

}, function(modId) { var map = {"./v20200720":1738984248649}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248649, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200720 = void 0;
const Models = require("./ba_models");
const ba_client_1 = require("./ba_client");
exports.v20200720 = {
    Client: ba_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ba_models":1738984248650,"./ba_client":1738984248651}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248650, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248651, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ba client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ba.tencentcloudapi.com", "2020-07-20", clientConfig);
    }
    /**
     * 将备案ICP订单下的一个网站信息 同步给订单下其他网站，需要被同步的网站被检查通过(isCheck:true)；
只有指定的网站信息字段能被同步
     */
    async SyncIcpOrderWebInfo(req, cb) {
        return this.request("SyncIcpOrderWebInfo", req, cb);
    }
    /**
     * 创建渠道备案小程序二维码
     */
    async CreateWeappQRUrl(req, cb) {
        return this.request("CreateWeappQRUrl", req, cb);
    }
    /**
     * 获取实名认证信息
     */
    async DescribeGetAuthInfo(req, cb) {
        return this.request("DescribeGetAuthInfo", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248652, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.batch = void 0;
const v20170312_1 = require("./v20170312");
exports.batch = {
    v20170312: v20170312_1.v20170312,
};

}, function(modId) { var map = {"./v20170312":1738984248653}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248653, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20170312 = void 0;
const Models = require("./batch_models");
const batch_client_1 = require("./batch_client");
exports.v20170312 = {
    Client: batch_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./batch_models":1738984248654,"./batch_client":1738984248655}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248654, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248655, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * batch client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("batch.tencentcloudapi.com", "2017-03-12", clientConfig);
    }
    /**
     * 用于查询计算环境的详细信息
     */
    async DescribeComputeEnv(req, cb) {
        return this.request("DescribeComputeEnv", req, cb);
    }
    /**
     * 用于创建任务模板
     */
    async CreateTaskTemplate(req, cb) {
        return this.request("CreateTaskTemplate", req, cb);
    }
    /**
     * 创建黑石计算环境
     */
    async CreateCpmComputeEnv(req, cb) {
        return this.request("CreateCpmComputeEnv", req, cb);
    }
    /**
     * 用于销毁计算节点。
对于状态为CREATED、CREATION_FAILED、RUNNING和ABNORMAL的节点，允许销毁处理。
     */
    async TerminateComputeNode(req, cb) {
        return this.request("TerminateComputeNode", req, cb);
    }
    /**
     * 用于查询若干个作业的概览信息
     */
    async DescribeJobs(req, cb) {
        return this.request("DescribeJobs", req, cb);
    }
    /**
     * 查看可用的CVM机型配置信息
     */
    async DescribeAvailableCvmInstanceTypes(req, cb) {
        return this.request("DescribeAvailableCvmInstanceTypes", req, cb);
    }
    /**
     * 此接口可将已存在实例添加到计算环境中。
实例需要满足如下条件：<br/>
1.实例不在批量计算系统中。<br/>
2.实例状态要求处于运行中。<br/>
3.支持预付费实例，按小时后付费实例，专享子机实例。不支持竞价实例。<br/>

此接口会将加入到计算环境中的实例重设UserData和重装操作系统。
     */
    async AttachInstances(req, cb) {
        return this.request("AttachInstances", req, cb);
    }
    /**
     * 用于创建计算环境
     */
    async CreateComputeEnv(req, cb) {
        return this.request("CreateComputeEnv", req, cb);
    }
    /**
     * 用于删除计算环境
     */
    async DeleteComputeEnv(req, cb) {
        return this.request("DeleteComputeEnv", req, cb);
    }
    /**
     * 将添加到计算环境中的实例从计算环境中移出。若是由批量计算自动创建的计算节点实例则不允许移出。
     */
    async DetachInstances(req, cb) {
        return this.request("DetachInstances", req, cb);
    }
    /**
     * 用于获取任务多个实例标准输出和标准错误日志。
     */
    async DescribeTaskLogs(req, cb) {
        return this.request("DescribeTaskLogs", req, cb);
    }
    /**
     * 用于终止作业。
当作业处于“SUBMITTED”状态时，禁止终止操作；当作业处于“SUCCEED”状态时，终止操作不会生效。
终止作业是一个异步过程。整个终止过程的耗时和任务总数成正比。终止的效果相当于所含的所有任务实例进行TerminateTaskInstance操作。具体效果和用法可参考TerminateTaskInstance。
     */
    async TerminateJob(req, cb) {
        return this.request("TerminateJob", req, cb);
    }
    /**
     * 用于查询指定任务的详细信息，包括任务内部的任务实例信息。
     */
    async DescribeTask(req, cb) {
        return this.request("DescribeTask", req, cb);
    }
    /**
     * 获取批量计算可用区机型配置信息
     */
    async DescribeCvmZoneInstanceConfigInfos(req, cb) {
        return this.request("DescribeCvmZoneInstanceConfigInfos", req, cb);
    }
    /**
     * 用于查看一个作业的详细信息，包括内部任务（Task）和依赖（Dependence）信息。
     */
    async DescribeJob(req, cb) {
        return this.request("DescribeJob", req, cb);
    }
    /**
     * 用于提交一个作业
     */
    async SubmitJob(req, cb) {
        return this.request("SubmitJob", req, cb);
    }
    /**
     * 用于批量销毁计算节点，不允许重复销毁同一个节点。
     */
    async TerminateComputeNodes(req, cb) {
        return this.request("TerminateComputeNodes", req, cb);
    }
    /**
     * 用于查询任务模板信息
     */
    async DescribeTaskTemplates(req, cb) {
        return this.request("DescribeTaskTemplates", req, cb);
    }
    /**
     * 目前对CVM现有实例族分类，每一类包含若干实例族。该接口用于查询实例分类信息。
     */
    async DescribeInstanceCategories(req, cb) {
        return this.request("DescribeInstanceCategories", req, cb);
    }
    /**
     * 用于删除任务模板信息
     */
    async DeleteTaskTemplates(req, cb) {
        return this.request("DeleteTaskTemplates", req, cb);
    }
    /**
     * 用于终止任务实例。
对于状态已经为“SUCCEED”和“FAILED”的任务实例，不做处理。
对于状态为“SUBMITTED”、“PENDING”、“RUNNABLE”的任务实例，状态将置为“FAILED”状态。
对于状态为“STARTING”、“RUNNING”、“FAILED_INTERRUPTED”的任务实例，分区两种情况：如果未显示指定计算环境，会先销毁CVM服务器，然后将状态置为“FAILED”，具有一定耗时；如果指定了计算环境EnvId，任务实例状态置为“FAILED”，并重启执行该任务的CVM服务器，具有一定的耗时。
对于状态为“FAILED_INTERRUPTED”的任务实例，终止操作实际成功之后，相关资源和配额才会释放。
     */
    async TerminateTaskInstance(req, cb) {
        return this.request("TerminateTaskInstance", req, cb);
    }
    /**
     * 用于修改计算环境属性
     */
    async ModifyComputeEnv(req, cb) {
        return this.request("ModifyComputeEnv", req, cb);
    }
    /**
     * 用于查询指定作业的提交信息，其返回内容包括 JobId 和 SubmitJob 接口中作为输入参数的作业提交信息
     */
    async DescribeJobSubmitInfo(req, cb) {
        return this.request("DescribeJobSubmitInfo", req, cb);
    }
    /**
     * 查看计算环境的创建信息。
     */
    async DescribeComputeEnvCreateInfo(req, cb) {
        return this.request("DescribeComputeEnvCreateInfo", req, cb);
    }
    /**
     * 用于查询计算环境的活动信息
     */
    async DescribeComputeEnvActivities(req, cb) {
        return this.request("DescribeComputeEnvActivities", req, cb);
    }
    /**
     * 用于查看计算环境创建信息列表，包括名称、描述、类型、环境参数、通知及期望节点数等。
     */
    async DescribeComputeEnvCreateInfos(req, cb) {
        return this.request("DescribeComputeEnvCreateInfos", req, cb);
    }
    /**
     * 用于删除作业记录。
删除作业的效果相当于删除作业相关的所有信息。删除成功后，作业相关的所有信息都无法查询。
待删除的作业必须处于完结状态，且其内部包含的所有任务实例也必须处于完结状态，否则会禁止操作。完结状态，是指处于 SUCCEED 或 FAILED 状态。
     */
    async DeleteJob(req, cb) {
        return this.request("DeleteJob", req, cb);
    }
    /**
     * 创建黑石计算环境时，查询批量计算环境支持的黑石操作系统信息
     */
    async DescribeCpmOsInfo(req, cb) {
        return this.request("DescribeCpmOsInfo", req, cb);
    }
    /**
     * 用于查看计算环境列表
     */
    async DescribeComputeEnvs(req, cb) {
        return this.request("DescribeComputeEnvs", req, cb);
    }
    /**
     * 用于修改任务模板
     */
    async ModifyTaskTemplate(req, cb) {
        return this.request("ModifyTaskTemplate", req, cb);
    }
    /**
     * 用于重试作业中失败的任务实例。
当且仅当作业处于“FAILED”状态，支持重试操作。重试操作成功后，作业会按照“DAG”中指定的任务依赖关系，依次重试各个任务中失败的任务实例。任务实例的历史信息将被重置，如同首次运行一样，参与后续的调度和执行。
     */
    async RetryJobs(req, cb) {
        return this.request("RetryJobs", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248656, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.bda = void 0;
const v20200324_1 = require("./v20200324");
exports.bda = {
    v20200324: v20200324_1.v20200324,
};

}, function(modId) { var map = {"./v20200324":1738984248657}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248657, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200324 = void 0;
const Models = require("./bda_models");
const bda_client_1 = require("./bda_client");
exports.v20200324 = {
    Client: bda_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./bda_models":1738984248658,"./bda_client":1738984248659}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248658, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248659, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * bda client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("bda.tencentcloudapi.com", "2020-03-24", clientConfig);
    }
    /**
     * 本接口用于对一组待识别的人体动作轨迹（Trace）图片，在人体库中识别出最相似的 TopK 人体，按照相似度从大到小排列。

人体动作轨迹（Trace）图片要求：图片中当且仅包含一个人体。人体完整、无遮挡。

> 请注意：
- 我们希望您的输入为严格符合动作轨迹图片要求的图片。如果您输入的图片不符合动作轨迹图片要求，会对最终效果产生较大负面影响；
- 人体动作轨迹，是一个包含1-5张图片的图片序列。您可以输入1张图片作为动作轨迹，也可以输入多张。单个动作轨迹中包含越多符合质量的图片，搜索效果越好。
- 构成人体动作轨迹单张图片大小不得超过2M，分辨率不得超过1920*1080。
     */
    async SearchTrace(req, cb) {
        return this.request("SearchTrace", req, cb);
    }
    /**
     * 终止指定视频人像分割处理任务
     */
    async TerminateSegmentationTask(req, cb) {
        return this.request("TerminateSegmentationTask", req, cb);
    }
    /**
     * 获取人体库汇总信息。
     */
    async GetSummaryInfo(req, cb) {
        return this.request("GetSummaryInfo", req, cb);
    }
    /**
     * 检测给定图片中的人体（Body）的位置信息及属性信息。

     */
    async DetectBody(req, cb) {
        return this.request("DetectBody", req, cb);
    }
    /**
     * 即二分类人像分割，识别传入图片中人体的完整轮廓，进行抠像。
     */
    async SegmentPortraitPic(req, cb) {
        return this.request("SegmentPortraitPic", req, cb);
    }
    /**
     * 检测图片中人体的14个关键点。建议用于人体图像清晰、无遮挡的场景。支持一张图片中存在多个人体的识别。

     */
    async DetectBodyJoints(req, cb) {
        return this.request("DetectBodyJoints", req, cb);
    }
    /**
     * 将一个人体动作轨迹添加到一个人员中。一个人员最多允许包含 5 个人体动作轨迹。同一人的人体动作轨迹越多，搜索识别效果越好。

>请注意：
- 我们希望您的输入为 严格符合动作轨迹图片 要求的图片。如果您输入的图片不符合动作轨迹图片要求，会对最终效果产生较大负面影响。请您尽量保证一个Trace中的图片人体清晰、无遮挡、连贯。
- 一个人体动作轨迹（Trace）可以包含1-5张人体图片。提供越多质量高的人体图片有助于提升最终识别结果。
- 无论您在单个Trace中提供了多少张人体图片，我们都将生成一个对应的动作轨迹（Trace）信息。即，Trace仅和本次输入的图片序列相关，和图片的个数无关。
- 输入的图片组中，若有部分图片输入不合法（如图片大小过大、分辨率过大、无法解码等），我们将舍弃这部分图片，确保合法图片被正确搜索。即，我们将尽可能保证请求成功，去除不合法的输入；
- 构成人体动作轨迹单张图片大小限制为2M，分辨率限制为1920*1080。
     */
    async CreateTrace(req, cb) {
        return this.request("CreateTrace", req, cb);
    }
    /**
     * 删除该人体库及包含的所有的人员。
     */
    async DeleteGroup(req, cb) {
        return this.request("DeleteGroup", req, cb);
    }
    /**
     * 删除人员。
     */
    async DeletePerson(req, cb) {
        return this.request("DeletePerson", req, cb);
    }
    /**
     * 修改人员信息。
     */
    async ModifyPersonInfo(req, cb) {
        return this.request("ModifyPersonInfo", req, cb);
    }
    /**
     * 修改人体库名称、备注。
     */
    async ModifyGroup(req, cb) {
        return this.request("ModifyGroup", req, cb);
    }
    /**
     * 获取人体库列表。
     */
    async GetGroupList(req, cb) {
        return this.request("GetGroupList", req, cb);
    }
    /**
     * 可以查看单条任务的处理情况，包括处理状态，处理结果。
     */
    async DescribeSegmentationTask(req, cb) {
        return this.request("DescribeSegmentationTask", req, cb);
    }
    /**
     * 用于创建一个空的人体库，如果人体库已存在返回错误。

1个APPID下最多有2000W个人体动作轨迹（Trace），最多1W个人体库（Group）。

单个人体库（Group）最多10W个人体动作轨迹（Trace）。

单个人员（Person）最多添加 5 个人体动作轨迹（Trace）。
     */
    async CreateGroup(req, cb) {
        return this.request("CreateGroup", req, cb);
    }
    /**
     * 创建人员，添加对应人员的人体动作轨迹信息。

请注意：
- 我们希望您的输入为 严格符合动作轨迹图片 要求的图片。如果您输入的图片不符合动作轨迹图片要求，会对最终效果产生较大负面影响。请您尽量保证一个Trace中的图片人体清晰、无遮挡、连贯；
- 一个人体动作轨迹（Trace）可以包含1-5张人体图片。提供越多质量高的人体图片有助于提升最终识别结果；
- 无论您在单个Trace中提供了多少张人体图片，我们都将生成一个对应的动作轨迹（Trace）信息。即，Trace仅和本次输入的图片序列相关，和图片的个数无关；
- 输入的图片组中，若有部分图片输入不合法（如图片大小过大、分辨率过大、无法解码等），我们将舍弃这部分图片，确保合法图片被正确搜索。即，我们将尽可能保证请求成功，去除不合法的输入；
- 构成人体动作轨迹单张图片大小不得超过2M，分辨率不得超过1920*1080。
     */
    async CreatePerson(req, cb) {
        return this.request("CreatePerson", req, cb);
    }
    /**
     * 在前后景分割的基础上优化多分类分割，支持对头发、五官等的分割，既作为换发型、挂件等底层技术，也可用于抠人头、抠人脸等玩法
     */
    async SegmentCustomizedPortraitPic(req, cb) {
        return this.request("SegmentCustomizedPortraitPic", req, cb);
    }
    /**
     * 获取指定人体库中的人员列表。
     */
    async GetPersonList(req, cb) {
        return this.request("GetPersonList", req, cb);
    }
    /**
     * 本接口为人像分割在线处理接口组中的提交任务接口，可以对提交的资源进行处理视频流/图片流识别视频作品中的人像区域，进行一键抠像、背景替换、人像虚化等后期处理。
     */
    async CreateSegmentationTask(req, cb) {
        return this.request("CreateSegmentationTask", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248660, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.bh = void 0;
const v20230418_1 = require("./v20230418");
exports.bh = {
    v20230418: v20230418_1.v20230418,
};

}, function(modId) { var map = {"./v20230418":1738984248661}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248661, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20230418 = void 0;
const Models = require("./bh_models");
const bh_client_1 = require("./bh_client");
exports.v20230418 = {
    Client: bh_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./bh_models":1738984248662,"./bh_client":1738984248663}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248662, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248663, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * bh client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("bh.tencentcloudapi.com", "2023-04-18", clientConfig);
    }
    /**
     * 修改资产组
     */
    async ModifyDeviceGroup(req, cb) {
        return this.request("ModifyDeviceGroup", req, cb);
    }
    /**
     * 查询资产组成员列表
     */
    async DescribeDeviceGroupMembers(req, cb) {
        return this.request("DescribeDeviceGroupMembers", req, cb);
    }
    /**
     * 设置OAuth认证参数
     */
    async ModifyOAuthSetting(req, cb) {
        return this.request("ModifyOAuthSetting", req, cb);
    }
    /**
     * 修改高危命令模板
     */
    async ModifyCmdTemplate(req, cb) {
        return this.request("ModifyCmdTemplate", req, cb);
    }
    /**
     * 查询登录日志
     */
    async DescribeLoginEvent(req, cb) {
        return this.request("DescribeLoginEvent", req, cb);
    }
    /**
     * 新建资产组
     */
    async CreateDeviceGroup(req, cb) {
        return this.request("CreateDeviceGroup", req, cb);
    }
    /**
     * 查询主机账号列表
     */
    async DescribeDeviceAccounts(req, cb) {
        return this.request("DescribeDeviceAccounts", req, cb);
    }
    /**
     * 重置用户
     */
    async ResetUser(req, cb) {
        return this.request("ResetUser", req, cb);
    }
    /**
     * 删除主机
     */
    async DeleteDevices(req, cb) {
        return this.request("DeleteDevices", req, cb);
    }
    /**
     * 创建修改密码任务
     */
    async CreateChangePwdTask(req, cb) {
        return this.request("CreateChangePwdTask", req, cb);
    }
    /**
     * 查询用户组列表
     */
    async DescribeUserGroups(req, cb) {
        return this.request("DescribeUserGroups", req, cb);
    }
    /**
     * 查询网络域
     */
    async DescribeDomains(req, cb) {
        return this.request("DescribeDomains", req, cb);
    }
    /**
     * 开通服务，初始化资源，只针对新购资源
     */
    async DeployResource(req, cb) {
        return this.request("DeployResource", req, cb);
    }
    /**
     * 修改资产信息
     */
    async ModifyDevice(req, cb) {
        return this.request("ModifyDevice", req, cb);
    }
    /**
     * 修改资产绑定的堡垒机服务
     */
    async BindDeviceResource(req, cb) {
        return this.request("BindDeviceResource", req, cb);
    }
    /**
     * 绑定主机账号密码
     */
    async BindDeviceAccountPassword(req, cb) {
        return this.request("BindDeviceAccountPassword", req, cb);
    }
    /**
     * 文件传输检索
     */
    async SearchFile(req, cb) {
        return this.request("SearchFile", req, cb);
    }
    /**
     * 搜索会话
     */
    async SearchSession(req, cb) {
        return this.request("SearchSession", req, cb);
    }
    /**
     * 删除访问权限
     */
    async DeleteAcls(req, cb) {
        return this.request("DeleteAcls", req, cb);
    }
    /**
     * 查询用户购买的堡垒机服务信息，包括资源ID、授权点数、VPC、过期时间等。
     */
    async DescribeResources(req, cb) {
        return this.request("DescribeResources", req, cb);
    }
    /**
     * 删除用户组成员
     */
    async DeleteUserGroupMembers(req, cb) {
        return this.request("DeleteUserGroupMembers", req, cb);
    }
    /**
     * 更新修改密码任务
     */
    async ModifyChangePwdTask(req, cb) {
        return this.request("ModifyChangePwdTask", req, cb);
    }
    /**
     * 创建手工资产同步任务
     */
    async CreateAssetSyncJob(req, cb) {
        return this.request("CreateAssetSyncJob", req, cb);
    }
    /**
     * 查询访问权限列表
     */
    async DescribeAcls(req, cb) {
        return this.request("DescribeAcls", req, cb);
    }
    /**
     * 执行改密任务
     */
    async RunChangePwdTask(req, cb) {
        return this.request("RunChangePwdTask", req, cb);
    }
    /**
     * 清除设备账号绑定密码
     */
    async ResetDeviceAccountPassword(req, cb) {
        return this.request("ResetDeviceAccountPassword", req, cb);
    }
    /**
     * 修改用户组
     */
    async ModifyUserGroup(req, cb) {
        return this.request("ModifyUserGroup", req, cb);
    }
    /**
     * 删除资产组
     */
    async DeleteDeviceGroups(req, cb) {
        return this.request("DeleteDeviceGroups", req, cb);
    }
    /**
     * 修改访问权限
     */
    async ModifyAcl(req, cb) {
        return this.request("ModifyAcl", req, cb);
    }
    /**
     * 删除用户
     */
    async DeleteUsers(req, cb) {
        return this.request("DeleteUsers", req, cb);
    }
    /**
     * 新建访问权限
     */
    async CreateAcl(req, cb) {
        return this.request("CreateAcl", req, cb);
    }
    /**
     * 根据会话Id搜索Command
     */
    async SearchCommandBySid(req, cb) {
        return this.request("SearchCommandBySid", req, cb);
    }
    /**
     * 清除设备账号绑定的密钥
     */
    async ResetDeviceAccountPrivateKey(req, cb) {
        return this.request("ResetDeviceAccountPrivateKey", req, cb);
    }
    /**
     * 查询资产同步状态
     */
    async DescribeAssetSyncStatus(req, cb) {
        return this.request("DescribeAssetSyncStatus", req, cb);
    }
    /**
     * 新建主机账号
     */
    async CreateDeviceAccount(req, cb) {
        return this.request("CreateDeviceAccount", req, cb);
    }
    /**
     * 查询改密任务详情
     */
    async DescribeChangePwdTaskDetail(req, cb) {
        return this.request("DescribeChangePwdTaskDetail", req, cb);
    }
    /**
     * 删除资产组成员
     */
    async DeleteDeviceGroupMembers(req, cb) {
        return this.request("DeleteDeviceGroupMembers", req, cb);
    }
    /**
     * 删除改密任务
     */
    async DeleteChangePwdTask(req, cb) {
        return this.request("DeleteChangePwdTask", req, cb);
    }
    /**
     * 查询操作日志
     */
    async DescribeOperationEvent(req, cb) {
        return this.request("DescribeOperationEvent", req, cb);
    }
    /**
     * 删除主机账号
     */
    async DeleteDeviceAccounts(req, cb) {
        return this.request("DeleteDeviceAccounts", req, cb);
    }
    /**
     * 删除用户组
     */
    async DeleteUserGroups(req, cb) {
        return this.request("DeleteUserGroups", req, cb);
    }
    /**
     * 新建高危命令模板
     */
    async CreateCmdTemplate(req, cb) {
        return this.request("CreateCmdTemplate", req, cb);
    }
    /**
     * 资源变配
     */
    async ModifyResource(req, cb) {
        return this.request("ModifyResource", req, cb);
    }
    /**
     * 搜索审计日志
     */
    async SearchAuditLog(req, cb) {
        return this.request("SearchAuditLog", req, cb);
    }
    /**
     * 修改用户信息
     */
    async ModifyUser(req, cb) {
        return this.request("ModifyUser", req, cb);
    }
    /**
     * 查询命令模板列表
     */
    async DescribeCmdTemplates(req, cb) {
        return this.request("DescribeCmdTemplates", req, cb);
    }
    /**
     * 删除高危命令模板
     */
    async DeleteCmdTemplates(req, cb) {
        return this.request("DeleteCmdTemplates", req, cb);
    }
    /**
     * 添加用户组成员
     */
    async AddUserGroupMembers(req, cb) {
        return this.request("AddUserGroupMembers", req, cb);
    }
    /**
     * 查询资产组列表
     */
    async DescribeDeviceGroups(req, cb) {
        return this.request("DescribeDeviceGroups", req, cb);
    }
    /**
     * 查询用户列表
     */
    async DescribeUsers(req, cb) {
        return this.request("DescribeUsers", req, cb);
    }
    /**
     * 查询资产列表
     */
    async DescribeDevices(req, cb) {
        return this.request("DescribeDevices", req, cb);
    }
    /**
     * 查询用户组成员列表
     */
    async DescribeUserGroupMembers(req, cb) {
        return this.request("DescribeUserGroupMembers", req, cb);
    }
    /**
     * 搜索文件传输会话下文件操作列表
     */
    async SearchFileBySid(req, cb) {
        return this.request("SearchFileBySid", req, cb);
    }
    /**
     * 导入外部资产信息
     */
    async ImportExternalDevice(req, cb) {
        return this.request("ImportExternalDevice", req, cb);
    }
    /**
     * 查询改密任务列表
     */
    async DescribeChangePwdTask(req, cb) {
        return this.request("DescribeChangePwdTask", req, cb);
    }
    /**
     * 添加资产组成员
     */
    async AddDeviceGroupMembers(req, cb) {
        return this.request("AddDeviceGroupMembers", req, cb);
    }
    /**
     * 新建用户组
     */
    async CreateUserGroup(req, cb) {
        return this.request("CreateUserGroup", req, cb);
    }
    /**
     * 创建堡垒机实例
     */
    async CreateResource(req, cb) {
        return this.request("CreateResource", req, cb);
    }
    /**
     * 新建用户
     */
    async CreateUser(req, cb) {
        return this.request("CreateUser", req, cb);
    }
    /**
     * 绑定主机账号私钥
     */
    async BindDeviceAccountPrivateKey(req, cb) {
        return this.request("BindDeviceAccountPrivateKey", req, cb);
    }
    /**
     * 命令执行检索
     */
    async SearchCommand(req, cb) {
        return this.request("SearchCommand", req, cb);
    }
    /**
     * 命令检索
     */
    async SearchSessionCommand(req, cb) {
        return this.request("SearchSessionCommand", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248664, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.bi = void 0;
const v20220105_1 = require("./v20220105");
exports.bi = {
    v20220105: v20220105_1.v20220105,
};

}, function(modId) { var map = {"./v20220105":1738984248665}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248665, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220105 = void 0;
const Models = require("./bi_models");
const bi_client_1 = require("./bi_client");
exports.v20220105 = {
    Client: bi_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./bi_models":1738984248666,"./bi_client":1738984248667}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248666, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248667, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * bi client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("bi.tencentcloudapi.com", "2022-01-05", clientConfig);
    }
    /**
     * 更新数据源
     */
    async ModifyDatasource(req, cb) {
        return this.request("ModifyDatasource", req, cb);
    }
    /**
     * 查询数据源列表
     */
    async DescribeDatasourceList(req, cb) {
        return this.request("DescribeDatasourceList", req, cb);
    }
    /**
     * 创建数据源
     */
    async CreateDatasource(req, cb) {
        return this.request("CreateDatasource", req, cb);
    }
    /**
     * 项目详情接口
     */
    async DescribeProjectInfo(req, cb) {
        return this.request("DescribeProjectInfo", req, cb);
    }
    /**
     * 申请延长Token可用时间接口-强鉴权
     */
    async ApplyEmbedInterval(req, cb) {
        return this.request("ApplyEmbedInterval", req, cb);
    }
    /**
     * 页面截图导出
     */
    async ExportScreenPage(req, cb) {
        return this.request("ExportScreenPage", req, cb);
    }
    /**
     * 修改用户角色信息
     */
    async ModifyUserRole(req, cb) {
        return this.request("ModifyUserRole", req, cb);
    }
    /**
     * 创建云数据库
     */
    async CreateDatasourceCloud(req, cb) {
        return this.request("CreateDatasourceCloud", req, cb);
    }
    /**
     * 创建嵌出报表-强鉴权
     */
    async CreateEmbedToken(req, cb) {
        return this.request("CreateEmbedToken", req, cb);
    }
    /**
     * 创建用户角色
     */
    async CreateUserRole(req, cb) {
        return this.request("CreateUserRole", req, cb);
    }
    /**
     * 删除数据源
     */
    async DeleteDatasource(req, cb) {
        return this.request("DeleteDatasource", req, cb);
    }
    /**
     * 删除用户角色，会删除用户
     */
    async DeleteUserRole(req, cb) {
        return this.request("DeleteUserRole", req, cb);
    }
    /**
     * 修改项目信息
     */
    async ModifyProject(req, cb) {
        return this.request("ModifyProject", req, cb);
    }
    /**
     * 用户角色列表
     */
    async DescribeUserRoleList(req, cb) {
        return this.request("DescribeUserRoleList", req, cb);
    }
    /**
     * 查询页面组件信息
     */
    async DescribePageWidgetList(req, cb) {
        return this.request("DescribePageWidgetList", req, cb);
    }
    /**
     * 项目内-用户角色列表
     */
    async DescribeUserRoleProjectList(req, cb) {
        return this.request("DescribeUserRoleProjectList", req, cb);
    }
    /**
     * 更新云数据库
     */
    async ModifyDatasourceCloud(req, cb) {
        return this.request("ModifyDatasourceCloud", req, cb);
    }
    /**
     * 项目内-创建用户角色
     */
    async CreateUserRoleProject(req, cb) {
        return this.request("CreateUserRoleProject", req, cb);
    }
    /**
     * 项目内-删除用户角色
     */
    async DeleteUserRoleProject(req, cb) {
        return this.request("DeleteUserRoleProject", req, cb);
    }
    /**
     * 创建项目
     */
    async CreateProject(req, cb) {
        return this.request("CreateProject", req, cb);
    }
    /**
     * 项目内-用户接口
     */
    async DescribeUserProjectList(req, cb) {
        return this.request("DescribeUserProjectList", req, cb);
    }
    /**
     * 删除项目
     */
    async DeleteProject(req, cb) {
        return this.request("DeleteProject", req, cb);
    }
    /**
     * 项目-修改用户角色信息
     */
    async ModifyUserRoleProject(req, cb) {
        return this.request("ModifyUserRoleProject", req, cb);
    }
    /**
     * 项目信息
     */
    async DescribeProjectList(req, cb) {
        return this.request("DescribeProjectList", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248668, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.billing = void 0;
const v20180709_1 = require("./v20180709");
exports.billing = {
    v20180709: v20180709_1.v20180709,
};

}, function(modId) { var map = {"./v20180709":1738984248669}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248669, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180709 = void 0;
const Models = require("./billing_models");
const billing_client_1 = require("./billing_client");
exports.v20180709 = {
    Client: billing_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./billing_models":1738984248670,"./billing_client":1738984248671}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248670, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248671, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * billing client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("billing.tencentcloudapi.com", "2018-07-09", clientConfig);
    }
    /**
     * 成员账号获取管理账号代付账单（费用明细）。
注意事项：在请求接口时，由于网络不稳定或其它异常，可能会导致请求失败。如果您遇到这种情况，我们建议您在接口请求失败时，手动发起重试操作，这样可以更好地确保您的接口请求能够成功执行。
     */
    async DescribeBillDetailForOrganization(req, cb) {
        return this.request("DescribeBillDetailForOrganization", req, cb);
    }
    /**
     * 获取按资源汇总消耗详情
     */
    async DescribeCostSummaryByResource(req, cb) {
        return this.request("DescribeCostSummaryByResource", req, cb);
    }
    /**
     * 获取收支明细列表，支持翻页和参数过滤
     */
    async DescribeBillList(req, cb) {
        return this.request("DescribeBillList", req, cb);
    }
    /**
     * 查询当前用户节省计划覆盖率明细数据，如无特别说明，金额单位均为元（国内站）或者美元（国际站）。
     */
    async DescribeSavingPlanCoverage(req, cb) {
        return this.request("DescribeSavingPlanCoverage", req, cb);
    }
    /**
     * 查询分账账单按资源汇总
     */
    async DescribeAllocationSummaryByResource(req, cb) {
        return this.request("DescribeAllocationSummaryByResource", req, cb);
    }
    /**
     * 获取账单资源汇总数据
     */
    async DescribeBillResourceSummary(req, cb) {
        return this.request("DescribeBillResourceSummary", req, cb);
    }
    /**
     * 查询分账账单按产品汇总
     */
    async DescribeAllocationSummaryByBusiness(req, cb) {
        return this.request("DescribeAllocationSummaryByBusiness", req, cb);
    }
    /**
     * 查询资源目录筛选条件
     */
    async DescribeAllocateConditions(req, cb) {
        return this.request("DescribeAllocateConditions", req, cb);
    }
    /**
     * 接口迁移到其他业务

查用当前用户明细节省计划总览查询时段内的使用情况
     */
    async DescribeSavingPlanOverview(req, cb) {
        return this.request("DescribeSavingPlanOverview", req, cb);
    }
    /**
     * 查询分账账单日概览
     */
    async DescribeAllocationOverview(req, cb) {
        return this.request("DescribeAllocationOverview", req, cb);
    }
    /**
     * 获取已接入标准用量明细模板产品的用量明细数据，目前已接入并支持查询的产品包括：云联络中心、实时音视频、实时音视频、智能媒资托管、CODING DevOps、全球IP应用加速
     */
    async DescribeDosageDetailList(req, cb) {
        return this.request("DescribeDosageDetailList", req, cb);
    }
    /**
     * 批量设置分账标签
     */
    async CreateAllocationTag(req, cb) {
        return this.request("CreateAllocationTag", req, cb);
    }
    /**
     * 获取代金券相关信息
     */
    async DescribeVoucherInfo(req, cb) {
        return this.request("DescribeVoucherInfo", req, cb);
    }
    /**
     * 获取按项目汇总消耗详情
     */
    async DescribeCostSummaryByProject(req, cb) {
        return this.request("DescribeCostSummaryByProject", req, cb);
    }
    /**
     * 查看成本分析明细
     */
    async DescribeCostExplorerSummary(req, cb) {
        return this.request("DescribeCostExplorerSummary", req, cb);
    }
    /**
     * 成员账号获取管理账号代付账单（按资源汇总）
     */
    async DescribeBillResourceSummaryForOrganization(req, cb) {
        return this.request("DescribeBillResourceSummaryForOrganization", req, cb);
    }
    /**
     * 获取账单明细数据。
注意事项：
1.在请求接口时，由于网络不稳定或其它异常，可能会导致请求失败。如果您遇到这种情况，我们建议您在接口请求失败时，手动发起重试操作，这样可以更好地确保您的接口请求能够成功执行。
2.对于账单明细数据量级很大（例如每月账单明细量级超过20w）的客户，通过 API 调用账单数据效率较低，建议您开通账单数据存储功能，通过存储桶中获取账单文件进行分析。[账单存储至COS桶](https://cloud.tencent.com/document/product/555/61275)
     */
    async DescribeBillDetail(req, cb) {
        return this.request("DescribeBillDetail", req, cb);
    }
    /**
     * 该接口支持通过传参，按照产品、项目、地域、计费模式和标签五个维度获取账单费用明细。
     */
    async DescribeBillSummary(req, cb) {
        return this.request("DescribeBillSummary", req, cb);
    }
    /**
     * 获取按计费模式汇总费用分布
     */
    async DescribeBillSummaryByPayMode(req, cb) {
        return this.request("DescribeBillSummaryByPayMode", req, cb);
    }
    /**
     * 获取按地域汇总消耗详情
     */
    async DescribeCostSummaryByRegion(req, cb) {
        return this.request("DescribeCostSummaryByRegion", req, cb);
    }
    /**
     * 查询分账账单费用趋势
     */
    async DescribeAllocationTrendByMonth(req, cb) {
        return this.request("DescribeAllocationTrendByMonth", req, cb);
    }
    /**
     * 该接口支持通过传参，获取L0-PDF、L1-汇总、L2-资源、L3-明细、账单包、五类账单文件下载链接
     */
    async DescribeBillDownloadUrl(req, cb) {
        return this.request("DescribeBillDownloadUrl", req, cb);
    }
    /**
     * 获取COS产品用量明细
     */
    async DescribeDosageCosDetailByDate(req, cb) {
        return this.request("DescribeDosageCosDetailByDate", req, cb);
    }
    /**
     * 查询分账账单筛选条件
     */
    async DescribeAllocationBillConditions(req, cb) {
        return this.request("DescribeAllocationBillConditions", req, cb);
    }
    /**
     * 获取云账户余额信息。
     */
    async DescribeAccountBalance(req, cb) {
        return this.request("DescribeAccountBalance", req, cb);
    }
    /**
     * 按日期获取产品用量明细
     */
    async DescribeDosageDetailByDate(req, cb) {
        return this.request("DescribeDosageDetailByDate", req, cb);
    }
    /**
     * 接口迁移到其他业务

查用当前用户明细节省计划查询时段内的使用情况
     */
    async DescribeSavingPlanUsage(req, cb) {
        return this.request("DescribeSavingPlanUsage", req, cb);
    }
    /**
     * 可以通过API获取当前UIN是否有调账，客户可以更快地主动地获取调账情况。
     */
    async DescribeBillAdjustInfo(req, cb) {
        return this.request("DescribeBillAdjustInfo", req, cb);
    }
    /**
     * 查询分账账单明细
     */
    async DescribeAllocationBillDetail(req, cb) {
        return this.request("DescribeAllocationBillDetail", req, cb);
    }
    /**
     * 获取按地域汇总费用分布
     */
    async DescribeBillSummaryByRegion(req, cb) {
        return this.request("DescribeBillSummaryByRegion", req, cb);
    }
    /**
     * 获取按项目汇总费用分布
     */
    async DescribeBillSummaryByProject(req, cb) {
        return this.request("DescribeBillSummaryByProject", req, cb);
    }
    /**
     * 查询分账账单月概览
     */
    async DescribeAllocationMonthOverview(req, cb) {
        return this.request("DescribeAllocationMonthOverview", req, cb);
    }
    /**
     * 获取按标签汇总费用分布
     */
    async DescribeBillSummaryByTag(req, cb) {
        return this.request("DescribeBillSummaryByTag", req, cb);
    }
    /**
     * 该接口支持通过传参，按照产品、项目、地域、计费模式和标签五个维度获取账单费用明细。
     */
    async DescribeBillSummaryForOrganization(req, cb) {
        return this.request("DescribeBillSummaryForOrganization", req, cb);
    }
    /**
     * 查询分账账单资源归集汇总
     */
    async DescribeGatherResource(req, cb) {
        return this.request("DescribeGatherResource", req, cb);
    }
    /**
     * 查询节省计划详情
     */
    async DescribeSavingPlanResourceInfo(req, cb) {
        return this.request("DescribeSavingPlanResourceInfo", req, cb);
    }
    /**
     * 获取分账标签
     */
    async DescribeTagList(req, cb) {
        return this.request("DescribeTagList", req, cb);
    }
    /**
     * 获取代金券使用记录
     */
    async DescribeVoucherUsageDetails(req, cb) {
        return this.request("DescribeVoucherUsageDetails", req, cb);
    }
    /**
     * 支付订单
     */
    async PayDeals(req, cb) {
        return this.request("PayDeals", req, cb);
    }
    /**
     * 接口迁移到其他业务

创建节省计划订单，创建订单完成需调用PayDeals接口完成订单支付
     */
    async CreateSavingPlanOrder(req, cb) {
        return this.request("CreateSavingPlanOrder", req, cb);
    }
    /**
     * 批量取消设置分账标签
     */
    async DeleteAllocationTag(req, cb) {
        return this.request("DeleteAllocationTag", req, cb);
    }
    /**
     * 查询订单
     */
    async DescribeDealsByCond(req, cb) {
        return this.request("DescribeDealsByCond", req, cb);
    }
    /**
     * 获取按产品汇总消耗详情
     */
    async DescribeCostSummaryByProduct(req, cb) {
        return this.request("DescribeCostSummaryByProduct", req, cb);
    }
    /**
     * 查询分账账单按组件汇总
     */
    async DescribeAllocationSummaryByItem(req, cb) {
        return this.request("DescribeAllocationSummaryByItem", req, cb);
    }
    /**
     * 获取产品汇总费用分布
     */
    async DescribeBillSummaryByProduct(req, cb) {
        return this.request("DescribeBillSummaryByProduct", req, cb);
    }
    /**
     * 查询消耗明细

注意事项：
1. 对于消耗明细数据量级很大（例如每月消耗明细量级超过100w）的客户，通过 API 调用明细数据会有超时风险，建议您开通消耗账单数据存储功能，通过存储桶中获取账单文件进行分析。[账单存储至COS桶](https://cloud.tencent.com/document/product/555/61275)
     */
    async DescribeCostDetail(req, cb) {
        return this.request("DescribeCostDetail", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248672, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.bizlive = void 0;
const v20190313_1 = require("./v20190313");
exports.bizlive = {
    v20190313: v20190313_1.v20190313,
};

}, function(modId) { var map = {"./v20190313":1738984248673}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248673, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190313 = void 0;
const Models = require("./bizlive_models");
const bizlive_client_1 = require("./bizlive_client");
exports.v20190313 = {
    Client: bizlive_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./bizlive_models":1738984248674,"./bizlive_client":1738984248675}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248674, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248675, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * bizlive client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("bizlive.tencentcloudapi.com", "2019-03-13", clientConfig);
    }
    /**
     * 禁止某条流的推送，可以预设某个时刻将流恢复。
     */
    async ForbidLiveStream(req, cb) {
        return this.request("ForbidLiveStream", req, cb);
    }
    /**
     * 强制退出游戏
     */
    async StopGame(req, cb) {
        return this.request("StopGame", req, cb);
    }
    /**
     * 注册聊天室
     */
    async RegisterIM(req, cb) {
        return this.request("RegisterIM", req, cb);
    }
    /**
     * 查询空闲机器数量
     */
    async DescribeWorkers(req, cb) {
        return this.request("DescribeWorkers", req, cb);
    }
    /**
     * 查询播放数据，支持按流名称查询详细播放数据，也可按播放域名查询详细总数据。
     */
    async DescribeStreamPlayInfoList(req, cb) {
        return this.request("DescribeStreamPlayInfoList", req, cb);
    }
    /**
     * 创建会话
     */
    async CreateSession(req, cb) {
        return this.request("CreateSession", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248676, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.bm = void 0;
const v20180423_1 = require("./v20180423");
exports.bm = {
    v20180423: v20180423_1.v20180423,
};

}, function(modId) { var map = {"./v20180423":1738984248677}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248677, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180423 = void 0;
const Models = require("./bm_models");
const bm_client_1 = require("./bm_client");
exports.v20180423 = {
    Client: bm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./bm_models":1738984248678,"./bm_client":1738984248679}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248678, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248679, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * bm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("bm.tencentcloudapi.com", "2018-04-23", clientConfig);
    }
    /**
     * 获取自定义脚本信息列表
     */
    async DescribeUserCmds(req, cb) {
        return this.request("DescribeUserCmds", req, cb);
    }
    /**
     * 重启机器
     */
    async RebootDevices(req, cb) {
        return this.request("RebootDevices", req, cb);
    }
    /**
     * 允许修改规则信息及关联故障类型
     */
    async ModifyPsaRegulation(req, cb) {
        return this.request("ModifyPsaRegulation", req, cb);
    }
    /**
     * 获取预授权规则列表
     */
    async DescribePsaRegulations(req, cb) {
        return this.request("DescribePsaRegulations", req, cb);
    }
    /**
     * 修改物理机服务器自动续费标志
     */
    async ModifyDeviceAutoRenewFlag(req, cb) {
        return this.request("ModifyDeviceAutoRenewFlag", req, cb);
    }
    /**
     * 销毁黑石物理机实例：可以销毁物理机列表中的竞价实例，或回收站列表中所有计费模式的实例
     */
    async OfflineDevices(req, cb) {
        return this.request("OfflineDevices", req, cb);
    }
    /**
     * 修改物理机内网IP（不重装系统）
     */
    async ModifyLanIp(req, cb) {
        return this.request("ModifyLanIp", req, cb);
    }
    /**
     * 运行自定义脚本
     */
    async RunUserCmd(req, cb) {
        return this.request("RunUserCmd", req, cb);
    }
    /**
     * 查询自定义镜像制作进度
     */
    async DescribeCustomImageProcess(req, cb) {
        return this.request("DescribeCustomImageProcess", req, cb);
    }
    /**
     * 开启服务器
     */
    async StartDevices(req, cb) {
        return this.request("StartDevices", req, cb);
    }
    /**
     * 重装操作系统
     */
    async ReloadDeviceOs(req, cb) {
        return this.request("ReloadDeviceOs", req, cb);
    }
    /**
     * 查询设备硬件配置信息，如 CPU 型号，内存大小，磁盘大小和数量
     */
    async DescribeDeviceHardwareInfo(req, cb) {
        return this.request("DescribeDeviceHardwareInfo", req, cb);
    }
    /**
     * 获取自定义脚本任务列表
     */
    async DescribeUserCmdTasks(req, cb) {
        return this.request("DescribeUserCmdTasks", req, cb);
    }
    /**
     * 创建预授权规则
     */
    async CreatePsaRegulation(req, cb) {
        return this.request("CreatePsaRegulation", req, cb);
    }
    /**
     * 获取设备类型
     */
    async DescribeDeviceClass(req, cb) {
        return this.request("DescribeDeviceClass", req, cb);
    }
    /**
     * 购买黑石物理机
     */
    async BuyDevices(req, cb) {
        return this.request("BuyDevices", req, cb);
    }
    /**
     * 修改自定义脚本
     */
    async ModifyUserCmd(req, cb) {
        return this.request("ModifyUserCmd", req, cb);
    }
    /**
     * 删除自定义脚本
     */
    async DeleteUserCmds(req, cb) {
        return this.request("DeleteUserCmds", req, cb);
    }
    /**
     * 查询托管设备带外信息
     */
    async DescribeHostedDeviceOutBandInfo(req, cb) {
        return this.request("DescribeHostedDeviceOutBandInfo", req, cb);
    }
    /**
     * 为预授权规则绑定标签
     */
    async BindPsaTag(req, cb) {
        return this.request("BindPsaTag", req, cb);
    }
    /**
     * 删除自定义镜像<br>
正用于部署或重装中的镜像被删除后，镜像文件将保留一段时间，直到部署或重装结束
     */
    async DeleteCustomImages(req, cb) {
        return this.request("DeleteCustomImages", req, cb);
    }
    /**
     * 删除预授权规则
     */
    async DeletePsaRegulation(req, cb) {
        return this.request("DeletePsaRegulation", req, cb);
    }
    /**
     * 创建自定义脚本
     */
    async CreateUserCmd(req, cb) {
        return this.request("CreateUserCmd", req, cb);
    }
    /**
     * 查询自定义机型部件信息，包括CpuId对应的型号，DiskTypeId对应的磁盘类型
     */
    async DescribeHardwareSpecification(req, cb) {
        return this.request("DescribeHardwareSpecification", req, cb);
    }
    /**
     * 服务器绑定CAM角色
     */
    async DetachCamRole(req, cb) {
        return this.request("DetachCamRole", req, cb);
    }
    /**
     * 服务器绑定CAM角色，该角色授权访问黑石物理服务器服务，为黑石物理服务器提供了访问资源的权限，如请求服务器的临时证书
     */
    async AttachCamRole(req, cb) {
        return this.request("AttachCamRole", req, cb);
    }
    /**
     * 查询指定机型所支持的操作系统
     */
    async DescribeOsInfo(req, cb) {
        return this.request("DescribeOsInfo", req, cb);
    }
    /**
     * 获取异步操作状态的完成状态
     */
    async DescribeOperationResult(req, cb) {
        return this.request("DescribeOperationResult", req, cb);
    }
    /**
     * 用于修改自定义镜像名或描述
     */
    async ModifyCustomImageAttribute(req, cb) {
        return this.request("ModifyCustomImageAttribute", req, cb);
    }
    /**
     * 查询服务器所在的位置，如机架，上联交换机等信息
     */
    async DescribeDevicePosition(req, cb) {
        return this.request("DescribeDevicePosition", req, cb);
    }
    /**
     * 查询地域以及可用区
     */
    async DescribeRegions(req, cb) {
        return this.request("DescribeRegions", req, cb);
    }
    /**
     * 获取自定义脚本任务详细信息
     */
    async DescribeUserCmdTaskInfo(req, cb) {
        return this.request("DescribeUserCmdTaskInfo", req, cb);
    }
    /**
     * 查询服务器价格信息，支持设备的批量查找，支持标准机型和弹性机型的混合查找
     */
    async DescribeDevicePriceInfo(req, cb) {
        return this.request("DescribeDevicePriceInfo", req, cb);
    }
    /**
     * 退回物理机至回收站，支持批量退还不同计费模式的物理机（包括预付费、后付费、预付费转后付费）
     */
    async ReturnDevices(req, cb) {
        return this.request("ReturnDevices", req, cb);
    }
    /**
     * 获取维修任务操作日志
     */
    async DescribeTaskOperationLog(req, cb) {
        return this.request("DescribeTaskOperationLog", req, cb);
    }
    /**
     * 将设备的预付费模式修改为后付费计费模式，支持批量转换。（前提是客户要加入黑石物理机后付费计费的白名单，申请黑石物理机后付费可以联系腾讯云客服）
     */
    async ModifyPayModePre2Post(req, cb) {
        return this.request("ModifyPayModePre2Post", req, cb);
    }
    /**
     * 解除标签与预授权规则的绑定
     */
    async UnbindPsaTag(req, cb) {
        return this.request("UnbindPsaTag", req, cb);
    }
    /**
     * 创建黑石竞价实例
     */
    async CreateSpotDevice(req, cb) {
        return this.request("CreateSpotDevice", req, cb);
    }
    /**
     * 修改服务器名称
     */
    async ModifyDeviceAliases(req, cb) {
        return this.request("ModifyDeviceAliases", req, cb);
    }
    /**
     * 查询设备库存
     */
    async DescribeDeviceInventory(req, cb) {
        return this.request("DescribeDeviceInventory", req, cb);
    }
    /**
     * 查询设备操作日志， 如设备重启，重装，设置密码等操作
     */
    async DescribeDeviceOperationLog(req, cb) {
        return this.request("DescribeDeviceOperationLog", req, cb);
    }
    /**
     * 获取用户维修任务列表及详细信息<br>
<br>
TaskStatus（任务状态ID）与状态中文名的对应关系如下：<br>
1：未授权<br>
2：处理中<br>
3：待确认<br>
4：未授权-暂不处理<br>
5：已恢复<br>
6：待确认-未恢复<br>
     */
    async DescribeTaskInfo(req, cb) {
        return this.request("DescribeTaskInfo", req, cb);
    }
    /**
     * 此接口用于操作维修任务<br>
入参TaskId为维修任务ID<br>
入参Operate表示对维修任务的操作，支持如下取值：<br>
AuthorizeRepair（授权维修）<br>
Ignore（暂不提醒）<br>
ConfirmRecovered（维修完成后，确认故障恢复）<br>
ConfirmUnRecovered（维修完成后，确认故障未恢复，该操作已不推荐用）<br>
NeedRepairAgain（维修完成后，故障未恢复，需要重新维修，推荐用此操作打回）<br>
入参OperateRemark仅在Operate为NeedRepairAgain时有效，表示打回重修原因，建议给出打回的具体原因。<br>
<br>
操作约束（当前任务状态(TaskStatus)->对应可执行的操作）：<br>
未授权(1)->授权维修；暂不处理<br>
暂不处理(4)->授权维修<br>
待确认(3)->确认故障恢复；确认故障未恢复；需要重新维修<br>
未恢复(6)->确认故障恢复<br>
<br>
对于Ping不可达故障的任务，还允许：<br>
未授权->确认故障恢复<br>
暂不处理->确认故障恢复<br>
<br>
处理中与已恢复状态的任务不允许进行操作。<br>
<br>
详细信息请访问：https://cloud.tencent.com/document/product/386/18190
     */
    async RepairTaskControl(req, cb) {
        return this.request("RepairTaskControl", req, cb);
    }
    /**
     * 查询物理服务器，可以按照实例，业务IP等过滤
     */
    async DescribeDevices(req, cb) {
        return this.request("DescribeDevices", req, cb);
    }
    /**
     * 维修任务配置获取
     */
    async DescribeRepairTaskConstant(req, cb) {
        return this.request("DescribeRepairTaskConstant", req, cb);
    }
    /**
     * 设置带外VPN认证用户密码
     */
    async SetOutBandVpnAuthPassword(req, cb) {
        return this.request("SetOutBandVpnAuthPassword", req, cb);
    }
    /**
     * 查看自定义镜像列表
     */
    async DescribeCustomImages(req, cb) {
        return this.request("DescribeCustomImages", req, cb);
    }
    /**
     * 恢复回收站中的物理机（仅限后付费的物理机）
     */
    async RecoverDevices(req, cb) {
        return this.request("RecoverDevices", req, cb);
    }
    /**
     * 获取物理机的分区格式
     */
    async DescribeDevicePartition(req, cb) {
        return this.request("DescribeDevicePartition", req, cb);
    }
    /**
     * 关闭服务器
     */
    async ShutdownDevices(req, cb) {
        return this.request("ShutdownDevices", req, cb);
    }
    /**
     * 重置服务器密码
     */
    async ResetDevicePassword(req, cb) {
        return this.request("ResetDevicePassword", req, cb);
    }
    /**
     * 查询机型支持的RAID方式， 并返回系统盘的分区和逻辑盘的列表
     */
    async DescribeDeviceClassPartition(req, cb) {
        return this.request("DescribeDeviceClassPartition", req, cb);
    }
    /**
     * 创建自定义镜像<br>
每个AppId在每个可用区最多保留20个自定义镜像
     */
    async CreateCustomImage(req, cb) {
        return this.request("CreateCustomImage", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248680, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.bma = void 0;
const v20210624_1 = require("./v20210624");
const v20221115_1 = require("./v20221115");
exports.bma = {
    v20210624: v20210624_1.v20210624,
    v20221115: v20221115_1.v20221115,
};

}, function(modId) { var map = {"./v20210624":1738984248681,"./v20221115":1738984248684}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248681, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210624 = void 0;
const Models = require("./bma_models");
const bma_client_1 = require("./bma_client");
exports.v20210624 = {
    Client: bma_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./bma_models":1738984248682,"./bma_client":1738984248683}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248682, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248683, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * bma client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("bma.tencentcloudapi.com", "2021-06-24", clientConfig);
    }
    /**
     * 更新作品
     */
    async UpdateCRWork(req, cb) {
        return this.request("UpdateCRWork", req, cb);
    }
    /**
     * 新建过程取证码
     */
    async CreateCRDesktopCode(req, cb) {
        return this.request("CreateCRDesktopCode", req, cb);
    }
    /**
     * 查询企业信息
     */
    async DescribeBPCompanyInfo(req, cb) {
        return this.request("DescribeBPCompanyInfo", req, cb);
    }
    /**
     * 本接口用于个人认证，新接入用户必须认证后才可以进行后续操作（个人认证和企业认证二选一），只需认证一次即可
     */
    async CreateCRUserVerify(req, cb) {
        return this.request("CreateCRUserVerify", req, cb);
    }
    /**
     * 新建作品
     */
    async CreateCRWork(req, cb) {
        return this.request("CreateCRWork", req, cb);
    }
    /**
     * 添加下线工单
     */
    async CreateBPOfflineTicket(req, cb) {
        return this.request("CreateBPOfflineTicket", req, cb);
    }
    /**
     * 查询取证详情
     */
    async DescribeCRObtainDetail(req, cb) {
        return this.request("DescribeCRObtainDetail", req, cb);
    }
    /**
     * 新建协查处置

     */
    async CreateCRBlock(req, cb) {
        return this.request("CreateCRBlock", req, cb);
    }
    /**
     * 取证申请
     */
    async ModifyCRObtainStatus(req, cb) {
        return this.request("ModifyCRObtainStatus", req, cb);
    }
    /**
     * 版权保护-新建发函接口
     */
    async CreateCRRight(req, cb) {
        return this.request("CreateCRRight", req, cb);
    }
    /**
     * 修改下线材料
     */
    async ModifyBPOfflineAttachment(req, cb) {
        return this.request("ModifyBPOfflineAttachment", req, cb);
    }
    /**
     * 开启/关闭监测
     */
    async ModifyCRMonitor(req, cb) {
        return this.request("ModifyCRMonitor", req, cb);
    }
    /**
     * 版权保护-查询作品监测详情接口
     */
    async DescribeCRMonitorDetail(req, cb) {
        return this.request("DescribeCRMonitorDetail", req, cb);
    }
    /**
     * 添加仿冒链接（举报）
     */
    async CreateBPFakeURL(req, cb) {
        return this.request("CreateBPFakeURL", req, cb);
    }
    /**
     * 权属文件添加
     */
    async CreateCRRightFile(req, cb) {
        return this.request("CreateCRRightFile", req, cb);
    }
    /**
     * 修改白名单列表
     */
    async ModifyCRWhiteList(req, cb) {
        return this.request("ModifyCRWhiteList", req, cb);
    }
    /**
     * 协查处置申请
     */
    async ModifyCRBlockStatus(req, cb) {
        return this.request("ModifyCRBlockStatus", req, cb);
    }
    /**
     * 添加误报工单
     */
    async CreateBPFalseTicket(req, cb) {
        return this.request("CreateBPFalseTicket", req, cb);
    }
    /**
     * 添加保护网站
     */
    async CreateBPProtectURLs(req, cb) {
        return this.request("CreateBPProtectURLs", req, cb);
    }
    /**
     * 查询举报列表
     */
    async DescribeBPReportFakeURLs(req, cb) {
        return this.request("DescribeBPReportFakeURLs", req, cb);
    }
    /**
     * 查询仿冒链接
     */
    async DescribeBPFakeURLs(req, cb) {
        return this.request("DescribeBPFakeURLs", req, cb);
    }
    /**
     * 查询作品基本信息
     */
    async DescribeCRWorkInfo(req, cb) {
        return this.request("DescribeCRWorkInfo", req, cb);
    }
    /**
     * 版权保护-查询监测列表接口
     */
    async DescribeCRMonitors(req, cb) {
        return this.request("DescribeCRMonitors", req, cb);
    }
    /**
     * 发函申请
     */
    async ModifyCRRightStatus(req, cb) {
        return this.request("ModifyCRRightStatus", req, cb);
    }
    /**
     * 添加下线材料
     */
    async CreateBPOfflineAttachment(req, cb) {
        return this.request("CreateBPOfflineAttachment", req, cb);
    }
    /**
     * 查询保护网站
     */
    async DescribeBPProtectURLs(req, cb) {
        return this.request("DescribeBPProtectURLs", req, cb);
    }
    /**
     * 举报侵权链接
     */
    async CreateCRTort(req, cb) {
        return this.request("CreateCRTort", req, cb);
    }
    /**
     * 本接口用于企业认证，新接入用户必须认证后才可以进行后续操作（个人认证和企业认证二选一），只需认证一次即可
     */
    async CreateCRCompanyVerify(req, cb) {
        return this.request("CreateCRCompanyVerify", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248684, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20221115 = void 0;
const Models = require("./bma_models");
const bma_client_1 = require("./bma_client");
exports.v20221115 = {
    Client: bma_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./bma_models":1738984248685,"./bma_client":1738984248686}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248685, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248686, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * bma client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("bma.tencentcloudapi.com", "2022-11-15", clientConfig);
    }
    /**
     * 查询白名单列表
     */
    async DescribeBPWhiteLists(req, cb) {
        return this.request("DescribeBPWhiteLists", req, cb);
    }
    /**
     * 添加白名单
     */
    async CreateBPWhiteList(req, cb) {
        return this.request("CreateBPWhiteList", req, cb);
    }
    /**
     * 仿冒应用举报
     */
    async CreateBPFakeAPP(req, cb) {
        return this.request("CreateBPFakeAPP", req, cb);
    }
    /**
     * 删除白名单
     */
    async DeleteBPWhiteList(req, cb) {
        return this.request("DeleteBPWhiteList", req, cb);
    }
    /**
     * 批量仿冒网址举报
     */
    async CreateBPFakeURLs(req, cb) {
        return this.request("CreateBPFakeURLs", req, cb);
    }
    /**
     * 添加品牌
     */
    async CreateBPBrand(req, cb) {
        return this.request("CreateBPBrand", req, cb);
    }
    /**
     * 查询品牌列表
     */
    async DescribeBPBrands(req, cb) {
        return this.request("DescribeBPBrands", req, cb);
    }
    /**
     * 批量仿冒应用举报
     */
    async CreateBPFakeAPPList(req, cb) {
        return this.request("CreateBPFakeAPPList", req, cb);
    }
    /**
     * 查询仿冒应用列表
     */
    async DescribeBPFakeAPPList(req, cb) {
        return this.request("DescribeBPFakeAPPList", req, cb);
    }
    /**
     * 查询仿冒网址列表
     */
    async DescribeBPFakeURLs(req, cb) {
        return this.request("DescribeBPFakeURLs", req, cb);
    }
    /**
     * 仿冒网址举报
     */
    async CreateBPFakeURL(req, cb) {
        return this.request("CreateBPFakeURL", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248687, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.bmeip = void 0;
const v20180625_1 = require("./v20180625");
exports.bmeip = {
    v20180625: v20180625_1.v20180625,
};

}, function(modId) { var map = {"./v20180625":1738984248688}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248688, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180625 = void 0;
const Models = require("./bmeip_models");
const bmeip_client_1 = require("./bmeip_client");
exports.v20180625 = {
    Client: bmeip_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./bmeip_models":1738984248689,"./bmeip_client":1738984248690}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248689, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248690, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * bmeip client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("bmeip.tencentcloudapi.com", "2018-06-25", clientConfig);
    }
    /**
     * 解绑黑石EIP
     */
    async UnbindRs(req, cb) {
        return this.request("UnbindRs", req, cb);
    }
    /**
     * BindHosted接口用于绑定黑石弹性公网IP到黑石托管机器上
     */
    async BindHosted(req, cb) {
        return this.request("BindHosted", req, cb);
    }
    /**
     * 创建黑石弹性公网 EIP ACL
     */
    async CreateEipAcl(req, cb) {
        return this.request("CreateEipAcl", req, cb);
    }
    /**
     * 创建黑石弹性公网IP
     */
    async CreateEip(req, cb) {
        return this.request("CreateEip", req, cb);
    }
    /**
     * 修改弹性公网IP ACL
     */
    async ModifyEipAcl(req, cb) {
        return this.request("ModifyEipAcl", req, cb);
    }
    /**
     * 查询黑石EIP 限额
     */
    async DescribeEipQuota(req, cb) {
        return this.request("DescribeEipQuota", req, cb);
    }
    /**
     * 绑定黑石EIP
     */
    async BindRs(req, cb) {
        return this.request("BindRs", req, cb);
    }
    /**
     * 黑石EIP查询任务状态
     */
    async DescribeEipTask(req, cb) {
        return this.request("DescribeEipTask", req, cb);
    }
    /**
     * UnbindHosted接口用于解绑托管机器上的EIP
     */
    async UnbindHosted(req, cb) {
        return this.request("UnbindHosted", req, cb);
    }
    /**
     * 黑石EIP解绑VPCIP
     */
    async UnbindVpcIp(req, cb) {
        return this.request("UnbindVpcIp", req, cb);
    }
    /**
     * 释放黑石弹性公网IP
     */
    async DeleteEip(req, cb) {
        return this.request("DeleteEip", req, cb);
    }
    /**
     * 黑石EIP修改计费方式
     */
    async ModifyEipCharge(req, cb) {
        return this.request("ModifyEipCharge", req, cb);
    }
    /**
     * 更新黑石EIP名称
     */
    async ModifyEipName(req, cb) {
        return this.request("ModifyEipName", req, cb);
    }
    /**
     * 此接口用于为某个 EIP 关联 ACL。
     */
    async BindEipAcls(req, cb) {
        return this.request("BindEipAcls", req, cb);
    }
    /**
     * 删除弹性公网IP ACL
     */
    async DeleteEipAcl(req, cb) {
        return this.request("DeleteEipAcl", req, cb);
    }
    /**
     * 解绑弹性公网IP ACL
     */
    async UnbindEipAcls(req, cb) {
        return this.request("UnbindEipAcls", req, cb);
    }
    /**
     * 黑石EIP查询接口
     */
    async DescribeEips(req, cb) {
        return this.request("DescribeEips", req, cb);
    }
    /**
     * 黑石EIP绑定VPC IP
     */
    async BindVpcIp(req, cb) {
        return this.request("BindVpcIp", req, cb);
    }
    /**
     * 批量解绑物理机弹性公网IP接口
     */
    async UnbindRsList(req, cb) {
        return this.request("UnbindRsList", req, cb);
    }
    /**
     * 查询弹性公网IP ACL
     */
    async DescribeEipAcls(req, cb) {
        return this.request("DescribeEipAcls", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248691, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.bmlb = void 0;
const v20180625_1 = require("./v20180625");
exports.bmlb = {
    v20180625: v20180625_1.v20180625,
};

}, function(modId) { var map = {"./v20180625":1738984248692}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248692, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180625 = void 0;
const Models = require("./bmlb_models");
const bmlb_client_1 = require("./bmlb_client");
exports.v20180625 = {
    Client: bmlb_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./bmlb_models":1738984248693,"./bmlb_client":1738984248694}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248693, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248694, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * bmlb client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("bmlb.tencentcloudapi.com", "2018-06-25", clientConfig);
    }
    /**
     * 获取黑石负载均衡七层监听器列表信息。
     */
    async DescribeL7Listeners(req, cb) {
        return this.request("DescribeL7Listeners", req, cb);
    }
    /**
     * 从流量镜像实例上解绑流量镜像接收机。
     */
    async UnbindTrafficMirrorReceivers(req, cb) {
        return this.request("UnbindTrafficMirrorReceivers", req, cb);
    }
    /**
     * 修改黑石负载均衡七层转发路径后端实例权重。
     */
    async ModifyL7BackendWeight(req, cb) {
        return this.request("ModifyL7BackendWeight", req, cb);
    }
    /**
     * 修改黑石负载均衡四层监听器后端实例权重功能。
     */
    async ModifyL4BackendWeight(req, cb) {
        return this.request("ModifyL4BackendWeight", req, cb);
    }
    /**
     * 创建黑石四层负载均衡监听器功能。黑石负载均衡四层监听器提供了转发用户请求的具体规则，包括端口、协议、会话保持、健康检查等参数。
     */
    async CreateL4Listeners(req, cb) {
        return this.request("CreateL4Listeners", req, cb);
    }
    /**
     * 解绑黑石负载均衡四层监听器物理服务器。
     */
    async UnbindL4Backends(req, cb) {
        return this.request("UnbindL4Backends", req, cb);
    }
    /**
     * 修改黑石负载均衡七层监听器。
     */
    async ModifyL7Listener(req, cb) {
        return this.request("ModifyL7Listener", req, cb);
    }
    /**
     * 删除已创建的黑石流量镜像实例，删除过程是异步执行的，因此需要使用查询任务接口获取删除的结果。
     */
    async DeleteTrafficMirror(req, cb) {
        return this.request("DeleteTrafficMirror", req, cb);
    }
    /**
     * 创建黑石负载均衡七层转发规则。
     */
    async CreateL7Rules(req, cb) {
        return this.request("CreateL7Rules", req, cb);
    }
    /**
     * 获取流量镜像接收机健康状态。
     */
    async DescribeTrafficMirrorReceiverHealthStatus(req, cb) {
        return this.request("DescribeTrafficMirrorReceiverHealthStatus", req, cb);
    }
    /**
     * 解绑黑石物理服务器或者托管服务器到七层转发路径功能。
     */
    async UnbindL7Backends(req, cb) {
        return this.request("UnbindL7Backends", req, cb);
    }
    /**
     * 删除黑石负载均衡七层转发规则。
     */
    async DeleteL7Rules(req, cb) {
        return this.request("DeleteL7Rules", req, cb);
    }
    /**
     * 查找绑定了某主机或者指定监听器名称的黑石负载均衡四层监听器。
     */
    async DescribeL4ListenerInfo(req, cb) {
        return this.request("DescribeL4ListenerInfo", req, cb);
    }
    /**
     * 获取流量镜像的监听器列表信息。
     */
    async DescribeTrafficMirrorListeners(req, cb) {
        return this.request("DescribeTrafficMirrorListeners", req, cb);
    }
    /**
     * 修改黑石负载均衡七层转发路径。
     */
    async ModifyL7Locations(req, cb) {
        return this.request("ModifyL7Locations", req, cb);
    }
    /**
     * 修改黑石负载均衡四层监听器后端实例端口。
     */
    async ModifyL4BackendPort(req, cb) {
        return this.request("ModifyL4BackendPort", req, cb);
    }
    /**
     * 删除用户指定的黑石负载均衡实例。
     */
    async DeleteLoadBalancer(req, cb) {
        return this.request("DeleteLoadBalancer", req, cb);
    }
    /**
     * 用来创建黑石负载均衡。为了使用黑石负载均衡服务，您必须要创建一个或者多个负载均衡实例。通过成功调用该接口，会返回负载均衡实例的唯一ID。用户可以购买的黑石负载均衡实例类型分为：公网类型、内网类型。公网类型负载均衡对应一个BGP VIP，可用于快速访问公网负载均衡绑定的物理服务器；内网类型负载均衡对应一个腾讯云内部的VIP，不能通过Internet访问，可快速访问内网负载均衡绑定的物理服务器。
     */
    async CreateLoadBalancers(req, cb) {
        return this.request("CreateLoadBalancers", req, cb);
    }
    /**
     * 获取黑石负载均衡七层转发规则。
     */
    async DescribeL7Rules(req, cb) {
        return this.request("DescribeL7Rules", req, cb);
    }
    /**
     * 查询负载均衡实例异步任务的执行情况。
     */
    async DescribeLoadBalancerTaskResult(req, cb) {
        return this.request("DescribeLoadBalancerTaskResult", req, cb);
    }
    /**
     * 查找绑定了某主机或者有某转发域名黑石负载均衡七层监听器。
     */
    async DescribeL7ListenerInfo(req, cb) {
        return this.request("DescribeL7ListenerInfo", req, cb);
    }
    /**
     * 获取黑石负载均衡四层监听器。
     */
    async DescribeL4Listeners(req, cb) {
        return this.request("DescribeL4Listeners", req, cb);
    }
    /**
     * 设置流量镜像的健康检查参数。
     */
    async SetTrafficMirrorHealthSwitch(req, cb) {
        return this.request("SetTrafficMirrorHealthSwitch", req, cb);
    }
    /**
     * 获取黑石负载均衡实例列表
     */
    async DescribeLoadBalancers(req, cb) {
        return this.request("DescribeLoadBalancers", req, cb);
    }
    /**
     * 删除黑石负载均衡监听器。
     */
    async DeleteListeners(req, cb) {
        return this.request("DeleteListeners", req, cb);
    }
    /**
     * 获取黑石负载均衡证书详情。
     */
    async DescribeCertDetail(req, cb) {
        return this.request("DescribeCertDetail", req, cb);
    }
    /**
     * 解绑流量镜像监听器。
     */
    async UnbindTrafficMirrorListeners(req, cb) {
        return this.request("UnbindTrafficMirrorListeners", req, cb);
    }
    /**
     * 修改黑石负载均衡七层转发路径后端实例端口。
     */
    async ModifyL7BackendPort(req, cb) {
        return this.request("ModifyL7BackendPort", req, cb);
    }
    /**
     * 获取黑石负载均衡七层监听器绑定的主机列表
     */
    async DescribeL7Backends(req, cb) {
        return this.request("DescribeL7Backends", req, cb);
    }
    /**
     * 创建流量镜像实例。
     */
    async CreateTrafficMirror(req, cb) {
        return this.request("CreateTrafficMirror", req, cb);
    }
    /**
     * 修改黑石负载均衡四层监听器后端探测端口。
     */
    async ModifyL4BackendProbePort(req, cb) {
        return this.request("ModifyL4BackendProbePort", req, cb);
    }
    /**
     * 绑定黑石服务器到四层监听器。服务器包括物理服务器、虚拟机以及半托管机器。
     */
    async BindL4Backends(req, cb) {
        return this.request("BindL4Backends", req, cb);
    }
    /**
     * 绑定黑石物理服务器成为流量镜像接收机。
     */
    async BindTrafficMirrorReceivers(req, cb) {
        return this.request("BindTrafficMirrorReceivers", req, cb);
    }
    /**
     * 更新黑石负载均衡证书。
     */
    async ReplaceCert(req, cb) {
        return this.request("ReplaceCert", req, cb);
    }
    /**
     * 删除黑石负载均衡七层转发域名。
     */
    async DeleteL7Domains(req, cb) {
        return this.request("DeleteL7Domains", req, cb);
    }
    /**
     * 获取流量镜像实例的列表信息。
     */
    async DescribeTrafficMirrors(req, cb) {
        return this.request("DescribeTrafficMirrors", req, cb);
    }
    /**
     * 获取指定VPC下的7层监听器(支持模糊匹配)。
     */
    async DescribeL7ListenersEx(req, cb) {
        return this.request("DescribeL7ListenersEx", req, cb);
    }
    /**
     * 创建黑石负载均衡证书。
     */
    async UploadCert(req, cb) {
        return this.request("UploadCert", req, cb);
    }
    /**
     * 绑定黑石物理服务器或半托管服务器到七层转发路径。
     */
    async BindL7Backends(req, cb) {
        return this.request("BindL7Backends", req, cb);
    }
    /**
     * 获取黑石负载均衡四层监听器绑定的主机列表。
     */
    async DescribeL4Backends(req, cb) {
        return this.request("DescribeL4Backends", req, cb);
    }
    /**
     * 绑定黑石服务器七层监听器到流量镜像实例。
     */
    async BindTrafficMirrorListeners(req, cb) {
        return this.request("BindTrafficMirrorListeners", req, cb);
    }
    /**
     * 根据输入参数来修改黑石负载均衡实例的基本配置信息。可能的信息包括负载均衡实例的名称，域名前缀。
     */
    async ModifyLoadBalancer(req, cb) {
        return this.request("ModifyLoadBalancer", req, cb);
    }
    /**
     * 设置流量镜像的别名。
     */
    async SetTrafficMirrorAlias(req, cb) {
        return this.request("SetTrafficMirrorAlias", req, cb);
    }
    /**
     * 获取黑石负载均衡端口相关信息。
     */
    async DescribeLoadBalancerPortInfo(req, cb) {
        return this.request("DescribeLoadBalancerPortInfo", req, cb);
    }
    /**
     * 更改黑石负载均衡的计费方式
     */
    async ModifyLoadBalancerChargeMode(req, cb) {
        return this.request("ModifyLoadBalancerChargeMode", req, cb);
    }
    /**
     * 创建黑石负载均衡七层监听器功能。负载均衡七层监听器提供了转发用户请求的具体规则，包括端口、协议等参数。
     */
    async CreateL7Listeners(req, cb) {
        return this.request("CreateL7Listeners", req, cb);
    }
    /**
     * 查询黑石物理机和虚机以及托管服务器绑定的黑石负载均衡详情。
     */
    async DescribeDevicesBindInfo(req, cb) {
        return this.request("DescribeDevicesBindInfo", req, cb);
    }
    /**
     * 修改黑石负载均衡四层监听器。
     */
    async ModifyL4Listener(req, cb) {
        return this.request("ModifyL4Listener", req, cb);
    }
    /**
     * 获取指定流量镜像实例的接收机信息。
     */
    async DescribeTrafficMirrorReceivers(req, cb) {
        return this.request("DescribeTrafficMirrorReceivers", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248695, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.bmvpc = void 0;
const v20180625_1 = require("./v20180625");
exports.bmvpc = {
    v20180625: v20180625_1.v20180625,
};

}, function(modId) { var map = {"./v20180625":1738984248696}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248696, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180625 = void 0;
const Models = require("./bmvpc_models");
const bmvpc_client_1 = require("./bmvpc_client");
exports.v20180625 = {
    Client: bmvpc_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./bmvpc_models":1738984248697,"./bmvpc_client":1738984248698}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248697, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248698, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * bmvpc client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("bmvpc.tencentcloudapi.com", "2018-06-25", clientConfig);
    }
    /**
     * 本接口(DownloadCustomerGatewayConfiguration)用于下载VPN通道配置。
     */
    async DownloadCustomerGatewayConfiguration(req, cb) {
        return this.request("DownloadCustomerGatewayConfiguration", req, cb);
    }
    /**
     * 本接口（DescribeCustomerGateways）用于查询对端网关列表。
     */
    async DescribeCustomerGateways(req, cb) {
        return this.request("DescribeCustomerGateways", req, cb);
    }
    /**
     * 创建对等连接
     */
    async CreateVpcPeerConnection(req, cb) {
        return this.request("CreateVpcPeerConnection", req, cb);
    }
    /**
     * 批量注册虚拟IP，异步接口。通过接口来查询任务进度。每次请求最多注册256个IP
     */
    async AsyncRegisterIps(req, cb) {
        return this.request("AsyncRegisterIps", req, cb);
    }
    /**
     * 本接口（DescribeRouteTables）用于查询路由表。
     */
    async DescribeRouteTables(req, cb) {
        return this.request("DescribeRouteTables", req, cb);
    }
    /**
     * NAT网关解绑该EIP后，NAT网关将不会使用该EIP作为访问外网的源IP地址

     */
    async UnbindEipsFromNatGateway(req, cb) {
        return this.request("UnbindEipsFromNatGateway", req, cb);
    }
    /**
     * NAT网关绑定EIP接口，可将EIP绑定到NAT网关，该EIP作为访问外网的源IP地址，将流量发送到Internet
     */
    async BindEipsToNatGateway(req, cb) {
        return this.request("BindEipsToNatGateway", req, cb);
    }
    /**
     * 修改黑石对等连接
     */
    async ModifyVpcPeerConnection(req, cb) {
        return this.request("ModifyVpcPeerConnection", req, cb);
    }
    /**
     * 创建黑石私有网络
     */
    async CreateVpc(req, cb) {
        return this.request("CreateVpc", req, cb);
    }
    /**
     * 创建NAT网关接口，可针对网段方式、子网全部IP、子网部分IP这三种方式创建NAT网关
     */
    async CreateNatGateway(req, cb) {
        return this.request("CreateNatGateway", req, cb);
    }
    /**
     * 获取子网内可用IP列表
     */
    async DescribeSubnetAvailableIps(req, cb) {
        return this.request("DescribeSubnetAvailableIps", req, cb);
    }
    /**
     * 本接口（DescribeRoutePolicies）用于查询路由表条目。
     */
    async DescribeRoutePolicies(req, cb) {
        return this.request("DescribeRoutePolicies", req, cb);
    }
    /**
     * 本接口(DeleteVpc)用于删除黑石私有网络(VPC)。

删除私有网络前，请清理该私有网络下所有资源，包括子网、负载均衡、弹性 IP、对等连接、NAT 网关、专线通道、SSLVPN 等资源。
     */
    async DeleteVpc(req, cb) {
        return this.request("DeleteVpc", req, cb);
    }
    /**
     * 本接口用于托管机器从VLANID不为5的子网中移除。
1) 不能从vlanId 为5的子网中移除。
2) 每次调用最多能支持传入10台物理机。
     */
    async DeleteHostedInterface(req, cb) {
        return this.request("DeleteHostedInterface", req, cb);
    }
    /**
     * 注销私有网络IP为空闲
     */
    async DeregisterIps(req, cb) {
        return this.request("DeregisterIps", req, cb);
    }
    /**
     * 修改自定义路由
     */
    async ModifyRoutePolicy(req, cb) {
        return this.request("ModifyRoutePolicy", req, cb);
    }
    /**
     * 物理机加入子网
     */
    async CreateInterfaces(req, cb) {
        return this.request("CreateInterfaces", req, cb);
    }
    /**
     * 本接口（ModifyCustomerGatewayAttribute）用于修改对端网关信息。
     */
    async ModifyCustomerGatewayAttribute(req, cb) {
        return this.request("ModifyCustomerGatewayAttribute", req, cb);
    }
    /**
     * 删除黑石路由表路由规则
     */
    async DeleteRoutePolicy(req, cb) {
        return this.request("DeleteRoutePolicy", req, cb);
    }
    /**
     * 本接口（ModifyVpnConnectionAttribute）用于修改VPN通道。
     */
    async ModifyVpnConnectionAttribute(req, cb) {
        return this.request("ModifyVpnConnectionAttribute", req, cb);
    }
    /**
     * 本接口(DeleteVpnConnection)用于删除VPN通道。
     */
    async DeleteVpnConnection(req, cb) {
        return this.request("DeleteVpnConnection", req, cb);
    }
    /**
     * 本接口（DeleteVpnGateway）用于删除VPN网关。
     */
    async DeleteVpnGateway(req, cb) {
        return this.request("DeleteVpnGateway", req, cb);
    }
    /**
     * 可用于将子网的部分IP绑定到NAT网关
     */
    async BindIpsToNatGateway(req, cb) {
        return this.request("BindIpsToNatGateway", req, cb);
    }
    /**
     * 本接口（ModifyVpnGatewayAttribute）用于修改VPN网关属性。
     */
    async ModifyVpnGatewayAttribute(req, cb) {
        return this.request("ModifyVpnGatewayAttribute", req, cb);
    }
    /**
     * NAT网关解绑IP接口，可将子网的部分IP从NAT网关中解绑
     */
    async UnbindIpsFromNatGateway(req, cb) {
        return this.request("UnbindIpsFromNatGateway", req, cb);
    }
    /**
     * 本接口（DeleteCustomerGateway）用于删除对端网关。
     */
    async DeleteCustomerGateway(req, cb) {
        return this.request("DeleteCustomerGateway", req, cb);
    }
    /**
     * 本接口（DeleteSubnet）用于删除黑石私有网络子网。
删除子网前，请清理该子网下所有资源，包括物理机、负载均衡、黑石数据库、弹性IP、NAT网关等资源
     */
    async DeleteSubnet(req, cb) {
        return this.request("DeleteSubnet", req, cb);
    }
    /**
     * 修改子网属性
     */
    async ModifySubnetAttribute(req, cb) {
        return this.request("ModifySubnetAttribute", req, cb);
    }
    /**
     * 可获取NAT网关绑定的子网信息
     */
    async DescribeNatSubnets(req, cb) {
        return this.request("DescribeNatSubnets", req, cb);
    }
    /**
     * 拒绝黑石对等连接申请
     */
    async RejectVpcPeerConnection(req, cb) {
        return this.request("RejectVpcPeerConnection", req, cb);
    }
    /**
     * 本接口（DescribeSubnets）用于查询黑石子网列表。
     */
    async DescribeSubnets(req, cb) {
        return this.request("DescribeSubnets", req, cb);
    }
    /**
     * 物理机可以加入物理机子网，虚拟子网，DOCKER子网，通过此接口可以查询物理机加入的子网。
     */
    async DescribeSubnetByDevice(req, cb) {
        return this.request("DescribeSubnetByDevice", req, cb);
    }
    /**
     * 修改路由表
     */
    async ModifyRouteTable(req, cb) {
        return this.request("ModifyRouteTable", req, cb);
    }
    /**
     * 修改子网DHCP Relay属性
     */
    async ModifySubnetDHCPRelay(req, cb) {
        return this.request("ModifySubnetDHCPRelay", req, cb);
    }
    /**
     * 本接口（DescribeVpcView）用于查询VPC网络拓扑视图。
     */
    async DescribeVpcView(req, cb) {
        return this.request("DescribeVpcView", req, cb);
    }
    /**
     * 退还虚拟IP。此接口只能退还虚拟IP，物理机IP不能退还。
     */
    async DeleteVirtualIp(req, cb) {
        return this.request("DeleteVirtualIp", req, cb);
    }
    /**
     * 本接口（CreateCustomerGateway）用于创建对端网关。
     */
    async CreateCustomerGateway(req, cb) {
        return this.request("CreateCustomerGateway", req, cb);
    }
    /**
     * 根据任务ID，获取任务的执行状态
     */
    async DescribeTaskStatus(req, cb) {
        return this.request("DescribeTaskStatus", req, cb);
    }
    /**
     * 创建黑石Docker子网， 如果不指定VlanId，将会分配2000--2999范围的VlanId; 子网会关闭分布式网关
     */
    async CreateDockerSubnetWithVlan(req, cb) {
        return this.request("CreateDockerSubnetWithVlan", req, cb);
    }
    /**
     * 升级NAT网关接口，可NAT网关修改为小型NAT网关、中型NAT网关、以及大型NAT网关

     */
    async UpgradeNatGateway(req, cb) {
        return this.request("UpgradeNatGateway", req, cb);
    }
    /**
     * 创建黑石路由表的路由规则
     */
    async CreateRoutePolicies(req, cb) {
        return this.request("CreateRoutePolicies", req, cb);
    }
    /**
     * 查询黑石私有网络关联资源
     */
    async DescribeVpcResource(req, cb) {
        return this.request("DescribeVpcResource", req, cb);
    }
    /**
     * NAT网关解绑子网接口，可将子网解绑NAT网关
     */
    async UnbindSubnetsFromNatGateway(req, cb) {
        return this.request("UnbindSubnetsFromNatGateway", req, cb);
    }
    /**
     * 本接口(ResetVpnConnection)用于重置VPN通道。
     */
    async ResetVpnConnection(req, cb) {
        return this.request("ResetVpnConnection", req, cb);
    }
    /**
     * 本接口（DescribeVpnGateways）用于查询VPN网关列表。
     */
    async DescribeVpnGateways(req, cb) {
        return this.request("DescribeVpnGateways", req, cb);
    }
    /**
     * 托管机器移除子网批量接口，传入一台托管机器和多个子网，批量移除这些子网。异步接口，接口返回TaskId。
     */
    async DeleteHostedInterfaces(req, cb) {
        return this.request("DeleteHostedInterfaces", req, cb);
    }
    /**
     * 接受黑石对等连接
     */
    async AcceptVpcPeerConnection(req, cb) {
        return this.request("AcceptVpcPeerConnection", req, cb);
    }
    /**
     * 本接口（DescribeVpcQuota）用于查询用户VPC相关配额限制。
     */
    async DescribeVpcQuota(req, cb) {
        return this.request("DescribeVpcQuota", req, cb);
    }
    /**
     * 获取NAT网关信息，包括NAT网关 ID、网关名称、私有网络、网关并发连接上限、绑定EIP列表等
     */
    async DescribeNatGateways(req, cb) {
        return this.request("DescribeNatGateways", req, cb);
    }
    /**
     * NAT网关绑定子网后，该子网内全部IP可出公网
     */
    async BindSubnetsToNatGateway(req, cb) {
        return this.request("BindSubnetsToNatGateway", req, cb);
    }
    /**
     * 物理机移除子网批量接口，传入一台物理机和多个子网，批量移除这些子网。异步接口，接口返回TaskId。
     */
    async DeleteInterfaces(req, cb) {
        return this.request("DeleteInterfaces", req, cb);
    }
    /**
     * 本接口（CreateHostedInterface）用于黑石托管机器加入带VLANID不为5的子网。

1) 不能加入vlanId 为5的子网，只能加入VLANID范围为2000-2999的子网。
2) 每台托管机器最多可以加入20个子网。
3) 每次调用最多能支持传入10台托管机器。
     */
    async CreateHostedInterface(req, cb) {
        return this.request("CreateHostedInterface", req, cb);
    }
    /**
     *  本接口（DescribeVpnConnections）查询VPN通道列表。
     */
    async DescribeVpnConnections(req, cb) {
        return this.request("DescribeVpnConnections", req, cb);
    }
    /**
     * 托管可以加入物理机子网，虚拟子网，DOCKER子网，通过此接口可以查询托管加入的子网。
     */
    async DescribeSubnetByHostedDevice(req, cb) {
        return this.request("DescribeSubnetByHostedDevice", req, cb);
    }
    /**
     * 获取对等连接列表
     */
    async DescribeVpcPeerConnections(req, cb) {
        return this.request("DescribeVpcPeerConnections", req, cb);
    }
    /**
     * 本接口（DescribeVpcs）用于查询私有网络列表。
本接口不传参数时，返回默认排序下的前20条VPC信息。
     */
    async DescribeVpcs(req, cb) {
        return this.request("DescribeVpcs", req, cb);
    }
    /**
     * 删除黑石对等连接
     */
    async DeleteVpcPeerConnection(req, cb) {
        return this.request("DeleteVpcPeerConnection", req, cb);
    }
    /**
     * 本接口（ModifyVpcAttribute）用于修改VPC的标识名称和控制VPC的监控起停。
     */
    async ModifyVpcAttribute(req, cb) {
        return this.request("ModifyVpcAttribute", req, cb);
    }
    /**
     * 删除NAT网关
     */
    async DeleteNatGateway(req, cb) {
        return this.request("DeleteNatGateway", req, cb);
    }
    /**
     * 创建黑石虚拟子网， 虚拟子网用于在黑石上创建虚拟网络，与黑石子网要做好规划。虚拟子网会分配2000-2999的VlanId。
     */
    async CreateVirtualSubnetWithVlan(req, cb) {
        return this.request("CreateVirtualSubnetWithVlan", req, cb);
    }
    /**
     * 创建黑石私有网络的子网
访问管理: 用户可以对VpcId进行授权操作。例如设置资源为["qcs::bmvpc:::unVpc/vpc-xxxxx"]
     */
    async CreateSubnet(req, cb) {
        return this.request("CreateSubnet", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248699, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.bpaas = void 0;
const v20181217_1 = require("./v20181217");
exports.bpaas = {
    v20181217: v20181217_1.v20181217,
};

}, function(modId) { var map = {"./v20181217":1738984248700}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248700, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20181217 = void 0;
const Models = require("./bpaas_models");
const bpaas_client_1 = require("./bpaas_client");
exports.v20181217 = {
    Client: bpaas_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./bpaas_models":1738984248701,"./bpaas_client":1738984248702}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248701, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248702, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * bpaas client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("bpaas.tencentcloudapi.com", "2018-12-17", clientConfig);
    }
    /**
     * 查看审批详情
     */
    async GetBpaasApproveDetail(req, cb) {
        return this.request("GetBpaasApproveDetail", req, cb);
    }
    /**
     * 外部审批申请单
     */
    async OutApproveBpaasApplication(req, cb) {
        return this.request("OutApproveBpaasApplication", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248703, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.bri = void 0;
const v20190328_1 = require("./v20190328");
exports.bri = {
    v20190328: v20190328_1.v20190328,
};

}, function(modId) { var map = {"./v20190328":1738984248704}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248704, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190328 = void 0;
const Models = require("./bri_models");
const bri_client_1 = require("./bri_client");
exports.v20190328 = {
    Client: bri_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./bri_models":1738984248705,"./bri_client":1738984248706}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248705, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248706, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * bri client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("bri.tencentcloudapi.com", "2019-03-28", clientConfig);
    }
    /**
     * 产品不在使用，业务已经下线

输入业务名 (bri_num, bri_dev, bri_ip, bri_apk, bri_url, bri_social 六种之一)  及其 相应字段, 获取业务风险分数和标签。

当业务名为bri_num时，必须填PhoneNumber字段.

当业务名为bri_dev时, 必须填Imei字段.

当业务名为bri_ip时，必须填IP字段.

当业务名为bri_apk时，必须填 (PackageName,CertMd5,FileSize) 三个字段 或者 FileMd5一个字段.

当业务名为bri_url时，必须填Url字段.

当业务名为bri_social时，必须填QQ和Wechat字段两者其中一个或者两个.
     */
    async DescribeBRI(req, cb) {
        return this.request("DescribeBRI", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248707, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.bsca = void 0;
const v20210811_1 = require("./v20210811");
exports.bsca = {
    v20210811: v20210811_1.v20210811,
};

}, function(modId) { var map = {"./v20210811":1738984248708}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248708, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210811 = void 0;
const Models = require("./bsca_models");
const bsca_client_1 = require("./bsca_client");
exports.v20210811 = {
    Client: bsca_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./bsca_models":1738984248709,"./bsca_client":1738984248710}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248709, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248710, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * bsca client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("bsca.tencentcloudapi.com", "2021-08-11", clientConfig);
    }
    /**
     * 根据输入的组件名、组件类型搜索相应的组件，返回符合条件的组件列表
     */
    async SearchKBComponent(req, cb) {
        return this.request("SearchKBComponent", req, cb);
    }
    /**
     * 查询特定组件的版本列表
     */
    async DescribeKBComponentVersionList(req, cb) {
        return this.request("DescribeKBComponentVersionList", req, cb);
    }
    /**
     * 本接口(DescribeKBComponent)用于在知识库中查询开源组件信息。本接口根据用户输入的PURL在知识库中寻找对应的开源组件，其中Name为必填字段。
     */
    async DescribeKBComponent(req, cb) {
        return this.request("DescribeKBComponent", req, cb);
    }
    /**
     * 本接口(DescribeKBLicense)用于在知识库中查询许可证信息。
     */
    async DescribeKBLicense(req, cb) {
        return this.request("DescribeKBLicense", req, cb);
    }
    /**
     * 本接口(MatchKBPURLList)用于在知识库中匹配与特征对应的开源组件列表。
     */
    async MatchKBPURLList(req, cb) {
        return this.request("MatchKBPURLList", req, cb);
    }
    /**
     * 本接口(DescribeKBComponentVulnerability)用于在知识库中查询开源组件的漏洞信息。
     */
    async DescribeKBComponentVulnerability(req, cb) {
        return this.request("DescribeKBComponentVulnerability", req, cb);
    }
    /**
     * 本接口(DescribeKBVulnerability)用于在知识库中查询漏洞详细信息，支持根据CVE、Vul ID、CNVD ID、CNNVD ID查询。
     */
    async DescribeKBVulnerability(req, cb) {
        return this.request("DescribeKBVulnerability", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248711, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.btoe = void 0;
const v20210514_1 = require("./v20210514");
const v20210303_1 = require("./v20210303");
exports.btoe = {
    v20210514: v20210514_1.v20210514,
    v20210303: v20210303_1.v20210303,
};

}, function(modId) { var map = {"./v20210514":1738984248712,"./v20210303":1738984248715}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248712, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210514 = void 0;
const Models = require("./btoe_models");
const btoe_client_1 = require("./btoe_client");
exports.v20210514 = {
    Client: btoe_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./btoe_models":1738984248713,"./btoe_client":1738984248714}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248713, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248714, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * btoe client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("btoe.tencentcloudapi.com", "2021-05-14", clientConfig);
    }
    /**
     * 用户通过存证编码向BTOE查询存证电子凭证信息。
     */
    async GetDepositCert(req, cb) {
        return this.request("GetDepositCert", req, cb);
    }
    /**
     * 用户通过本接口向BTOE写入待存证的原文数据Hash值，BTOE对业务数据Hash值存证上链，并生成含有电子签章的区块链存证电子凭证。
     */
    async CreateHashDeposit(req, cb) {
        return this.request("CreateHashDeposit", req, cb);
    }
    /**
     * 用户通过存证编码向BTOE获取存证文件的下载URL。
-注：Hash类存证、业务数据明文存证不产生存证文件。
     */
    async GetDepositFile(req, cb) {
        return this.request("GetDepositFile", req, cb);
    }
    /**
     * 用户通过本接口向BTOE写入待存证的视频的原文件或下载URL，BTOE对视频原文件存储后，将其Hash值存证上链，并生成含有电子签章的区块链存证电子凭证。视频文件支持格式：mp4、avi、mkv、mov、flv,wmv,rmvb,3gp；文件大小限制：直接上传原文件不大于5MB。
     */
    async CreateVideoDeposit(req, cb) {
        return this.request("CreateVideoDeposit", req, cb);
    }
    /**
     * 用户通过本接口向BTOE写入待存证的文档原文件或下载URL，BTOE对文档原文件存储后，将其Hash值存证上链，并生成含有电子签章的区块链存证电子凭证。文档类型支持格式：doc、docx、xls、xlsx、ppt、pptx、 pdf、html、txt、md、csv；原文件上传大小不超过5 MB，下载URL文件大小不超过10 MB。
     */
    async CreateDocDeposit(req, cb) {
        return this.request("CreateDocDeposit", req, cb);
    }
    /**
     * 用户通过本接口向BTOE写入待存证的原文数据Hash值，BTOE对业务数据Hash值存证上链，本接口不生成区块链存证电子凭证。
     */
    async CreateHashDepositNoCert(req, cb) {
        return this.request("CreateHashDepositNoCert", req, cb);
    }
    /**
     * 用户通过本接口向BTOE写入待存证的图片原文件或下载URL，BTOE对图片原文件存储后，将其Hash值存证上链，并生成含有电子签章的区块链存证电子凭证。图片类型支持格式：png、jpg、jpeg、bmp、gif、svg；原文件上传大小不超过5 MB，下载URL文件大小不超过10 MB。
     */
    async CreateImageDeposit(req, cb) {
        return this.request("CreateImageDeposit", req, cb);
    }
    /**
     * 用户通过本接口向BTOE写入待存证的音频原文件或下载URL，BTOE对音频原文件存储后，将其Hash值存证上链，并生成含有电子签章的区块链存证电子凭证。音频类型支持格式：mp3、wav、wma、midi、flac；原文件上传大小不超过5 MB，下载URL文件大小不超过25 MB。
     */
    async CreateAudioDeposit(req, cb) {
        return this.request("CreateAudioDeposit", req, cb);
    }
    /**
     * 用户通过本接口向BTOE写入待存证的原文数据Hash值，BTOE对业务数据Hash值存证上链，并生成无电子签章的区块链存证电子凭证。
     */
    async CreateHashDepositNoSeal(req, cb) {
        return this.request("CreateHashDepositNoSeal", req, cb);
    }
    /**
     * 用户向BTOE核验存证结果中的区块链交易hash的真实性
     */
    async VerifyEvidenceBlockChainTxHash(req, cb) {
        return this.request("VerifyEvidenceBlockChainTxHash", req, cb);
    }
    /**
     * 用户存证内容hash向BTOE核验存证记录的真实性。
     */
    async VerifyEvidenceHash(req, cb) {
        return this.request("VerifyEvidenceHash", req, cb);
    }
    /**
     * 用户通过存证编码向BTOE查询存证基本信息。
     */
    async GetDepositInfo(req, cb) {
        return this.request("GetDepositInfo", req, cb);
    }
    /**
     * 用户通过本接口向BTOE写入待存证的业务数据明文，业务数据明文存证写入后不可修改，BTOE对业务数据明文存证生成含有电子签章的区块链存证电子凭证。
     */
    async CreateDataDeposit(req, cb) {
        return this.request("CreateDataDeposit", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248715, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210303 = void 0;
const Models = require("./btoe_models");
const btoe_client_1 = require("./btoe_client");
exports.v20210303 = {
    Client: btoe_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./btoe_models":1738984248716,"./btoe_client":1738984248717}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248716, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248717, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * btoe client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("btoe.tencentcloudapi.com", "2021-03-03", clientConfig);
    }
    /**
     * 功能迭代，已上线更高版本的接口2021-05-14

用户通过存证编码向BTOE查询存证电子凭证信息。
     */
    async GetDepositCert(req, cb) {
        return this.request("GetDepositCert", req, cb);
    }
    /**
     * 功能迭代，已上线更高版本的接口2021-05-14

用户通过本接口向BTOE写入待存证的原文数据Hash值，BTOE对业务数据Hash值存证上链，并生成含有电子签章的区块链存证电子凭证。
     */
    async CreateHashDeposit(req, cb) {
        return this.request("CreateHashDeposit", req, cb);
    }
    /**
     * 功能迭代，已上线更高版本的接口2021-05-14

用户通过存证编码向BTOE获取存证文件的下载URL。
-注：Hash类存证、业务数据明文存证不产生存证文件。
     */
    async GetDepositFile(req, cb) {
        return this.request("GetDepositFile", req, cb);
    }
    /**
     * 功能迭代，已上线更高版本的接口2021-05-14

用户通过本接口向BTOE写入待存证的视频的原文件或下载URL，BTOE对视频原文件存储后，将其Hash值存证上链，并生成含有电子签章的区块链存证电子凭证。视频文件支持格式：mp4、avi、mkv、mov、flv,wmv,rmvb,3gp；文件大小限制：直接上传原文件不大于5MB，下载URL文件大小不大于200 MB。
     */
    async CreateVideoDeposit(req, cb) {
        return this.request("CreateVideoDeposit", req, cb);
    }
    /**
     * 功能迭代，已上线更高版本的接口2021-05-14

用户通过本接口向BTOE写入待存证的文档原文件或下载URL，BTOE对文档原文件存储后，将其Hash值存证上链，并生成含有电子签章的区块链存证电子凭证。文档类型支持格式：doc、docx、xls、xlsx、ppt、pptx、 pdf、html、txt、md、csv；原文件上传大小不超过5 MB，下载URL文件大小不超过10 MB。
     */
    async CreateDocDeposit(req, cb) {
        return this.request("CreateDocDeposit", req, cb);
    }
    /**
     * 功能迭代，已上线更高版本的接口2021-05-14

用户通过本接口向BTOE写入待存证的原文数据Hash值，BTOE对业务数据Hash值存证上链，本接口不生成区块链存证电子凭证。
     */
    async CreateHashDepositNoCert(req, cb) {
        return this.request("CreateHashDepositNoCert", req, cb);
    }
    /**
     * 功能迭代，已上线更高版本的接口2021-05-14

用户通过本接口向BTOE写入待存证的图片原文件或下载URL，BTOE对图片原文件存储后，将其Hash值存证上链，并生成含有电子签章的区块链存证电子凭证。图片类型支持格式：png、jpg、jpeg、bmp、gif、svg；原文件上传大小不超过5 MB，下载URL文件大小不超过10 MB。
     */
    async CreateImageDeposit(req, cb) {
        return this.request("CreateImageDeposit", req, cb);
    }
    /**
     * 功能迭代，已上线更高版本的接口2021-05-14

用户通过本接口向BTOE写入待存证的音频原文件或下载URL，BTOE对音频原文件存储后，将其Hash值存证上链，并生成含有电子签章的区块链存证电子凭证。音频类型支持格式：mp3、wav、wma、midi、flac；原文件上传大小不超过5 MB，下载URL文件大小不超过25 MB。
     */
    async CreateAudioDeposit(req, cb) {
        return this.request("CreateAudioDeposit", req, cb);
    }
    /**
     * 功能迭代，已上线更高版本的接口2021-05-14

用户通过本接口向BTOE写入待存证的原文数据Hash值，BTOE对业务数据Hash值存证上链，并生成无电子签章的区块链存证电子凭证。
     */
    async CreateHashDepositNoSeal(req, cb) {
        return this.request("CreateHashDepositNoSeal", req, cb);
    }
    /**
     * 功能迭代，已上线更高版本的接口2021-05-14

用户通过存证编码向BTOE查询存证基本信息。
     */
    async GetDepositInfo(req, cb) {
        return this.request("GetDepositInfo", req, cb);
    }
    /**
     * 功能迭代，已上线更高版本的接口2021-05-14

用户通过本接口向BTOE提交待存证网页的URL，BTOE对URL进行网页快照，并将快照图片存储，将网页快照Hash值存证上链，并生成含有电子签章的区块链存证电子凭证。URL格式必须以http、https开头。
     */
    async CreateWebpageDeposit(req, cb) {
        return this.request("CreateWebpageDeposit", req, cb);
    }
    /**
     * 功能迭代，已上线更高版本的接口2021-05-14

用户通过本接口向BTOE写入待存证的业务数据明文，业务数据明文存证写入后不可修改，BTOE对业务数据明文存证生成含有电子签章的区块链存证电子凭证。
     */
    async CreateDataDeposit(req, cb) {
        return this.request("CreateDataDeposit", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248718, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ca = void 0;
const v20230228_1 = require("./v20230228");
exports.ca = {
    v20230228: v20230228_1.v20230228,
};

}, function(modId) { var map = {"./v20230228":1738984248719}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248719, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20230228 = void 0;
const Models = require("./ca_models");
const ca_client_1 = require("./ca_client");
exports.v20230228 = {
    Client: ca_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ca_models":1738984248720,"./ca_client":1738984248721}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248720, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248721, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ca client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ca.tencentcloudapi.com", "2023-02-28", clientConfig);
    }
    /**
     * 下载验签报告url，url有效期默认12小时
     */
    async DescribeVerifyReport(req, cb) {
        return this.request("DescribeVerifyReport", req, cb);
    }
    /**
     * 文件上传接口
     */
    async UploadFile(req, cb) {
        return this.request("UploadFile", req, cb);
    }
    /**
     * 创建签名验证报告任务，此接口为异步盖章接口，盖章时效24小时。
     */
    async CreateVerifyReport(req, cb) {
        return this.request("CreateVerifyReport", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248722, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cam = void 0;
const v20190116_1 = require("./v20190116");
exports.cam = {
    v20190116: v20190116_1.v20190116,
};

}, function(modId) { var map = {"./v20190116":1738984248723}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248723, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190116 = void 0;
const Models = require("./cam_models");
const cam_client_1 = require("./cam_client");
exports.v20190116 = {
    Client: cam_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cam_models":1738984248724,"./cam_client":1738984248725}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248724, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248725, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cam client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cam.tencentcloudapi.com", "2019-01-16", clientConfig);
    }
    /**
     * 创建子用户
     */
    async AddUser(req, cb) {
        return this.request("AddUser", req, cb);
    }
    /**
     * 创建服务相关角色
     */
    async CreateServiceLinkedRole(req, cb) {
        return this.request("CreateServiceLinkedRole", req, cb);
    }
    /**
     * 获取用户权限边界
     */
    async GetUserPermissionBoundary(req, cb) {
        return this.request("GetUserPermissionBoundary", req, cb);
    }
    /**
     * 查询账户摘要
     */
    async GetAccountSummary(req, cb) {
        return this.request("GetAccountSummary", req, cb);
    }
    /**
     * 删除角色权限边界
     */
    async DeleteRolePermissionsBoundary(req, cb) {
        return this.request("DeleteRolePermissionsBoundary", req, cb);
    }
    /**
     * 获取消息接收人列表
     */
    async ListReceiver(req, cb) {
        return this.request("ListReceiver", req, cb);
    }
    /**
     * 本接口（ListAttachedGroupPolicies）可用于查询用户组关联的策略列表。
     */
    async ListAttachedGroupPolicies(req, cb) {
        return this.request("ListAttachedGroupPolicies", req, cb);
    }
    /**
     * 验证自定义多因子Token
     */
    async ConsumeCustomMFAToken(req, cb) {
        return this.request("ConsumeCustomMFAToken", req, cb);
    }
    /**
     * 更新子用户
     */
    async UpdateUser(req, cb) {
        return this.request("UpdateUser", req, cb);
    }
    /**
     * 获取自定义多因子Token关联信息
     */
    async GetCustomMFATokenInfo(req, cb) {
        return this.request("GetCustomMFATokenInfo", req, cb);
    }
    /**
     * 查询子用户
     */
    async GetUser(req, cb) {
        return this.request("GetUser", req, cb);
    }
    /**
     * 修改用户OIDC配置
     */
    async UpdateUserOIDCConfig(req, cb) {
        return this.request("UpdateUserOIDCConfig", req, cb);
    }
    /**
     * 根据删除TaskId获取服务相关角色删除状态
     */
    async GetServiceLinkedRoleDeletionStatus(req, cb) {
        return this.request("GetServiceLinkedRoleDeletionStatus", req, cb);
    }
    /**
     * 查询用户OIDC配置
     */
    async DescribeUserOIDCConfig(req, cb) {
        return this.request("DescribeUserOIDCConfig", req, cb);
    }
    /**
     * 修改用户SAML配置
     */
    async UpdateUserSAMLConfig(req, cb) {
        return this.request("UpdateUserSAMLConfig", req, cb);
    }
    /**
     * 为CAM用户创建访问密钥
     */
    async CreateAccessKey(req, cb) {
        return this.request("CreateAccessKey", req, cb);
    }
    /**
     * 删除子用户
     */
    async DeleteUser(req, cb) {
        return this.request("DeleteUser", req, cb);
    }
    /**
     * 本接口（UpdateRoleDescription）用于修改角色的描述信息。
     */
    async UpdateRoleDescription(req, cb) {
        return this.request("UpdateRoleDescription", req, cb);
    }
    /**
     * 获取数据流认证Token
     */
    async BuildDataFlowAuthToken(req, cb) {
        return this.request("BuildDataFlowAuthToken", req, cb);
    }
    /**
     * 更新SAML身份提供商信息
     */
    async UpdateSAMLProvider(req, cb) {
        return this.request("UpdateSAMLProvider", req, cb);
    }
    /**
     * 角色解绑标签。
     */
    async UntagRole(req, cb) {
        return this.request("UntagRole", req, cb);
    }
    /**
     * 通过子用户UIN列表查询子用户
     */
    async DescribeSubAccounts(req, cb) {
        return this.request("DescribeSubAccounts", req, cb);
    }
    /**
     * 从用户组删除用户
     */
    async RemoveUserFromGroup(req, cb) {
        return this.request("RemoveUserFromGroup", req, cb);
    }
    /**
     * 查询SAML身份提供商列表
     */
    async ListSAMLProviders(req, cb) {
        return this.request("ListSAMLProviders", req, cb);
    }
    /**
     * 查询用户组关联的用户列表
     */
    async ListUsersForGroup(req, cb) {
        return this.request("ListUsersForGroup", req, cb);
    }
    /**
     * 查询用户组详情
     */
    async GetGroup(req, cb) {
        return this.request("GetGroup", req, cb);
    }
    /**
     * 创建用户OIDC配置。只能创建一个用户OIDC身份提供商，并且创建用户OIDC配置之后会自动关闭用户SAML SSO身份提供商。
     */
    async CreateUserOIDCConfig(req, cb) {
        return this.request("CreateUserOIDCConfig", req, cb);
    }
    /**
     * 为CAM用户删除访问密钥。
此接口属于高风险操作，删除密钥后不可恢复，腾讯云将永久拒绝此密钥的所有请求，请谨慎使用。
     */
    async DeleteAccessKey(req, cb) {
        return this.request("DeleteAccessKey", req, cb);
    }
    /**
     * 获取用户AppId
     */
    async GetUserAppId(req, cb) {
        return this.request("GetUserAppId", req, cb);
    }
    /**
     * 设置角色权限边界
     */
    async PutRolePermissionsBoundary(req, cb) {
        return this.request("PutRolePermissionsBoundary", req, cb);
    }
    /**
     * 删除服务相关角色
     */
    async DeleteServiceLinkedRole(req, cb) {
        return this.request("DeleteServiceLinkedRole", req, cb);
    }
    /**
     * 拉取子用户
     */
    async ListUsers(req, cb) {
        return this.request("ListUsers", req, cb);
    }
    /**
     * 查询用户SAML配置
     */
    async DescribeUserSAMLConfig(req, cb) {
        return this.request("DescribeUserSAMLConfig", req, cb);
    }
    /**
     * 本接口（DetachRolePolicy）用于解除绑定角色的策略。
     */
    async DetachRolePolicy(req, cb) {
        return this.request("DetachRolePolicy", req, cb);
    }
    /**
     * 本接口（DescribeRoleList）用于获取账号下的角色列表。
     */
    async DescribeRoleList(req, cb) {
        return this.request("DescribeRoleList", req, cb);
    }
    /**
     * 创建SAML身份提供商
     */
    async CreateSAMLProvider(req, cb) {
        return this.request("CreateSAMLProvider", req, cb);
    }
    /**
     * 删除OIDC身份提供商
     */
    async DeleteOIDCConfig(req, cb) {
        return this.request("DeleteOIDCConfig", req, cb);
    }
    /**
     * 修改角色OIDC配置
     */
    async UpdateOIDCConfig(req, cb) {
        return this.request("UpdateOIDCConfig", req, cb);
    }
    /**
     * 本接口（DeleteRole）用于删除指定角色。
     */
    async DeleteRole(req, cb) {
        return this.request("DeleteRole", req, cb);
    }
    /**
     * 本接口（AttachGroupPolicy）可用于绑定策略到用户组。
     */
    async AttachGroupPolicy(req, cb) {
        return this.request("AttachGroupPolicy", req, cb);
    }
    /**
     * 获取所有已授权服务
     */
    async ListPoliciesGrantingServiceAccess(req, cb) {
        return this.request("ListPoliciesGrantingServiceAccess", req, cb);
    }
    /**
     * 为CAM用户更新访问密钥
     */
    async UpdateAccessKey(req, cb) {
        return this.request("UpdateAccessKey", req, cb);
    }
    /**
     * 本接口（UpdatePolicy ）可用于更新策略。
如果已存在策略版本，本接口会直接更新策略的默认版本，不会创建新版本，如果不存在任何策略版本，则直接创建一个默认版本。
     */
    async UpdatePolicy(req, cb) {
        return this.request("UpdatePolicy", req, cb);
    }
    /**
     * 本接口（ListAttachedUserPolicies）可用于查询子账号关联的策略列表。
     */
    async ListAttachedUserPolicies(req, cb) {
        return this.request("ListAttachedUserPolicies", req, cb);
    }
    /**
     * 该接口（CreatePolicyVersion）用于新增策略版本，用户创建了一个策略版本之后可以方便的通过变更策略版本的方式来变更策略。
     */
    async CreatePolicyVersion(req, cb) {
        return this.request("CreatePolicyVersion", req, cb);
    }
    /**
     * 获取协作者列表
     */
    async ListCollaborators(req, cb) {
        return this.request("ListCollaborators", req, cb);
    }
    /**
     * 角色绑定标签
     */
    async TagRole(req, cb) {
        return this.request("TagRole", req, cb);
    }
    /**
     * 本接口（UpdateRoleConsoleLogin）用于修改角色是否可登录。
     */
    async UpdateRoleConsoleLogin(req, cb) {
        return this.request("UpdateRoleConsoleLogin", req, cb);
    }
    /**
     * 本接口（AttachUserPolicy）可用于绑定到用户的策略。
     */
    async AttachUserPolicy(req, cb) {
        return this.request("AttachUserPolicy", req, cb);
    }
    /**
     * 本接口（UpdateAssumeRolePolicy）用于修改角色信任策略的策略文档。
     */
    async UpdateAssumeRolePolicy(req, cb) {
        return this.request("UpdateAssumeRolePolicy", req, cb);
    }
    /**
     * 设置子用户的登录保护和敏感操作校验方式
     */
    async SetMfaFlag(req, cb) {
        return this.request("SetMfaFlag", req, cb);
    }
    /**
     * 获取密钥最近使用情况
     */
    async GetSecurityLastUsed(req, cb) {
        return this.request("GetSecurityLastUsed", req, cb);
    }
    /**
     * 创建用户组
     */
    async CreateGroup(req, cb) {
        return this.request("CreateGroup", req, cb);
    }
    /**
     * 本接口（DeletePolicy）可用于删除策略。
     */
    async DeletePolicy(req, cb) {
        return this.request("DeletePolicy", req, cb);
    }
    /**
     * 本接口（DeletePolicyVersion）可用于删除一个策略的策略版本。
     */
    async DeletePolicyVersion(req, cb) {
        return this.request("DeletePolicyVersion", req, cb);
    }
    /**
     * 列出指定CAM用户的访问密钥
     */
    async ListAccessKeys(req, cb) {
        return this.request("ListAccessKeys", req, cb);
    }
    /**
     * 删除用户组
     */
    async DeleteGroup(req, cb) {
        return this.request("DeleteGroup", req, cb);
    }
    /**
     * 创建消息接收人接口：仅允许已完成实名认证的用户访问消息接收人接口，并对每个用户限制每天最多请求10次。
     */
    async CreateMessageReceiver(req, cb) {
        return this.request("CreateMessageReceiver", req, cb);
    }
    /**
     * 创建角色OIDC配置
     */
    async CreateOIDCConfig(req, cb) {
        return this.request("CreateOIDCConfig", req, cb);
    }
    /**
     * 该接口（GetPolicyVersion）用于查询策略版本详情
     */
    async GetPolicyVersion(req, cb) {
        return this.request("GetPolicyVersion", req, cb);
    }
    /**
     * 列出用户关联的策略（包括随组关联）
     */
    async ListAttachedUserAllPolicies(req, cb) {
        return this.request("ListAttachedUserAllPolicies", req, cb);
    }
    /**
     * 本接口（SetDefaultPolicyVersion）可用于设置生效的策略版本。
     */
    async SetDefaultPolicyVersion(req, cb) {
        return this.request("SetDefaultPolicyVersion", req, cb);
    }
    /**
     * 本接口（DetachGroupPolicy）可用于解除绑定到用户组的策略。
     */
    async DetachGroupPolicy(req, cb) {
        return this.request("DetachGroupPolicy", req, cb);
    }
    /**
     * 查询用户安全设置
     */
    async DescribeSafeAuthFlag(req, cb) {
        return this.request("DescribeSafeAuthFlag", req, cb);
    }
    /**
     * 查询安全设置(国际站)
     */
    async DescribeSafeAuthFlagIntl(req, cb) {
        return this.request("DescribeSafeAuthFlagIntl", req, cb);
    }
    /**
     * 修改角色会话时长
     */
    async UpdateRoleSessionDuration(req, cb) {
        return this.request("UpdateRoleSessionDuration", req, cb);
    }
    /**
     * 查询用户组列表
     */
    async ListGroups(req, cb) {
        return this.request("ListGroups", req, cb);
    }
    /**
     * 获取企业微信子用户列表
     */
    async ListWeChatWorkSubAccounts(req, cb) {
        return this.request("ListWeChatWorkSubAccounts", req, cb);
    }
    /**
     * 该接口（ListPolicyVersions）用于获取策略版本列表
     */
    async ListPolicyVersions(req, cb) {
        return this.request("ListPolicyVersions", req, cb);
    }
    /**
     * 更新用户组
     */
    async UpdateGroup(req, cb) {
        return this.request("UpdateGroup", req, cb);
    }
    /**
     * 本接口（CreatePolicy）可用于创建策略。
     */
    async CreatePolicy(req, cb) {
        return this.request("CreatePolicy", req, cb);
    }
    /**
     * 本接口（DetachUserPolicy）可用于解除绑定到用户的策略。
     */
    async DetachUserPolicy(req, cb) {
        return this.request("DetachUserPolicy", req, cb);
    }
    /**
     * 列出用户关联的用户组
     */
    async ListGroupsForUser(req, cb) {
        return this.request("ListGroupsForUser", req, cb);
    }
    /**
     * 删除消息接收人
     */
    async DeleteMessageReceiver(req, cb) {
        return this.request("DeleteMessageReceiver", req, cb);
    }
    /**
     * 查询SAML身份提供商详情
     */
    async GetSAMLProvider(req, cb) {
        return this.request("GetSAMLProvider", req, cb);
    }
    /**
     * 本接口（CreateRole）用于创建角色。
     */
    async CreateRole(req, cb) {
        return this.request("CreateRole", req, cb);
    }
    /**
     * 本接口（ListAttachedRolePolicies）用于获取角色绑定的策略列表。
     */
    async ListAttachedRolePolicies(req, cb) {
        return this.request("ListAttachedRolePolicies", req, cb);
    }
    /**
     * 删除SAML身份提供商
     */
    async DeleteSAMLProvider(req, cb) {
        return this.request("DeleteSAMLProvider", req, cb);
    }
    /**
     * 本接口（GetPolicy）可用于查询查看策略详情。
     */
    async GetPolicy(req, cb) {
        return this.request("GetPolicy", req, cb);
    }
    /**
     * 获取角色权限边界
     */
    async GetRolePermissionBoundary(req, cb) {
        return this.request("GetRolePermissionBoundary", req, cb);
    }
    /**
     * 删除用户权限边界
     */
    async DeleteUserPermissionsBoundary(req, cb) {
        return this.request("DeleteUserPermissionsBoundary", req, cb);
    }
    /**
     * 查询角色OIDC配置
     */
    async DescribeOIDCConfig(req, cb) {
        return this.request("DescribeOIDCConfig", req, cb);
    }
    /**
     * 本接口（ListEntitiesForPolicy）可用于查询策略关联的实体列表。
     */
    async ListEntitiesForPolicy(req, cb) {
        return this.request("ListEntitiesForPolicy", req, cb);
    }
    /**
     * 设置用户权限边界
     */
    async PutUserPermissionsBoundary(req, cb) {
        return this.request("PutUserPermissionsBoundary", req, cb);
    }
    /**
     * 创建用户SAML配置
     */
    async CreateUserSAMLConfig(req, cb) {
        return this.request("CreateUserSAMLConfig", req, cb);
    }
    /**
     * 用户加入到用户组
     */
    async AddUserToGroup(req, cb) {
        return this.request("AddUserToGroup", req, cb);
    }
    /**
     * 本接口（AttachRolePolicy）用于绑定策略到角色。
     */
    async AttachRolePolicy(req, cb) {
        return this.request("AttachRolePolicy", req, cb);
    }
    /**
     * 获取子账号安全设置
     */
    async DescribeSafeAuthFlagColl(req, cb) {
        return this.request("DescribeSafeAuthFlagColl", req, cb);
    }
    /**
     * 本接口（GetRole）用于获取指定角色的详细信息。
     */
    async GetRole(req, cb) {
        return this.request("GetRole", req, cb);
    }
    /**
     * 本接口（ListPolicies）可用于查询策略列表。
     */
    async ListPolicies(req, cb) {
        return this.request("ListPolicies", req, cb);
    }
    /**
     * 禁用用户SSO
     */
    async DisableUserSSO(req, cb) {
        return this.request("DisableUserSSO", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248726, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.captcha = void 0;
const v20190722_1 = require("./v20190722");
exports.captcha = {
    v20190722: v20190722_1.v20190722,
};

}, function(modId) { var map = {"./v20190722":1738984248727}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248727, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190722 = void 0;
const Models = require("./captcha_models");
const captcha_client_1 = require("./captcha_client");
exports.v20190722 = {
    Client: captcha_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./captcha_models":1738984248728,"./captcha_client":1738984248729}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248728, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248729, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * captcha client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("captcha.tencentcloudapi.com", "2019-07-22", clientConfig);
    }
    /**
     * Rce融合验证核查验证码票据结果(Web及APP)
     */
    async DescribeCaptchaRceResult(req, cb) {
        return this.request("DescribeCaptchaRceResult", req, cb);
    }
    /**
     * 核查验证码小程序插件票据接入风控结果(已停用)
     */
    async DescribeCaptchaMiniRiskResult(req, cb) {
        return this.request("DescribeCaptchaMiniRiskResult", req, cb);
    }
    /**
     * 安全验证码用户操作票据数据查询
     */
    async DescribeCaptchaTicketData(req, cb) {
        return this.request("DescribeCaptchaTicketData", req, cb);
    }
    /**
     * 查询全部验证的统计数据，包括：总请求量、总验证量、总验证通过量、总验证拦截量等数据。
     */
    async GetTotalRequestStatistics(req, cb) {
        return this.request("GetTotalRequestStatistics", req, cb);
    }
    /**
     * 安全验证码查询请求数据概况，例如：按照时间段查询数据  昨日请求量、昨日恶意比例、昨日验证量、昨日通过量、昨日恶意拦截量……
     */
    async DescribeCaptchaDataSum(req, cb) {
        return this.request("DescribeCaptchaDataSum", req, cb);
    }
    /**
     * 安全验证码用户操作数据查询，验证码加载耗时type = 1 、拦截情况type = 2、 一周通过平均尝试次数 type = 3、尝试次数分布 type = 4
     */
    async DescribeCaptchaOperData(req, cb) {
        return this.request("DescribeCaptchaOperData", req, cb);
    }
    /**
     * 安全验证码小程序插件分类查询数据接口，请求量type=0、通过量type=1、验证量type=2、拦截量type=3 小时级查询（五小时左右延迟）
     */
    async DescribeCaptchaMiniData(req, cb) {
        return this.request("DescribeCaptchaMiniData", req, cb);
    }
    /**
     * 安全验证码小程序插件用户操作数据查询
     */
    async DescribeCaptchaMiniOperData(req, cb) {
        return this.request("DescribeCaptchaMiniOperData", req, cb);
    }
    /**
     * 安全验证码分类查询数据接口，请求量type=0、通过量type=1、验证量type=2、拦截量type=3  分钟级查询
     */
    async DescribeCaptchaData(req, cb) {
        return this.request("DescribeCaptchaData", req, cb);
    }
    /**
     * 安全验证码小程序插件查询请求数据概况
     */
    async DescribeCaptchaMiniDataSum(req, cb) {
        return this.request("DescribeCaptchaMiniDataSum", req, cb);
    }
    /**
     * 查询单个CaptchaAppID票据校验数据，包括：票据校验量、票据校验通过量、票据校验拦截量。
     */
    async GetTicketStatistics(req, cb) {
        return this.request("GetTicketStatistics", req, cb);
    }
    /**
     * 核查验证码票据结果(小程序插件)
     */
    async DescribeCaptchaMiniResult(req, cb) {
        return this.request("DescribeCaptchaMiniResult", req, cb);
    }
    /**
     * 更新验证码应用APPId信息
     */
    async UpdateCaptchaAppIdInfo(req, cb) {
        return this.request("UpdateCaptchaAppIdInfo", req, cb);
    }
    /**
     * 查询全部票据校验的统计数据，包括：总票据校验量、总票据校验通过量、总票据校验拦截量。
     */
    async GetTotalTicketStatistics(req, cb) {
        return this.request("GetTotalTicketStatistics", req, cb);
    }
    /**
     * 安全验证码获取用户注册所有APPId和应用名称
     */
    async DescribeCaptchaUserAllAppId(req, cb) {
        return this.request("DescribeCaptchaUserAllAppId", req, cb);
    }
    /**
     * 查询单个CaptchaAppID验证的统计数据，包括：请求量、验证量、验证通过量、验证拦截量。
     */
    async GetRequestStatistics(req, cb) {
        return this.request("GetRequestStatistics", req, cb);
    }
    /**
     * 查询安全验证码应用APPId信息
     */
    async DescribeCaptchaAppIdInfo(req, cb) {
        return this.request("DescribeCaptchaAppIdInfo", req, cb);
    }
    /**
     * 核查验证码票据结果(Web及APP)
     */
    async DescribeCaptchaResult(req, cb) {
        return this.request("DescribeCaptchaResult", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248730, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.car = void 0;
const v20220110_1 = require("./v20220110");
exports.car = {
    v20220110: v20220110_1.v20220110,
};

}, function(modId) { var map = {"./v20220110":1738984248731}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248731, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220110 = void 0;
const Models = require("./car_models");
const car_client_1 = require("./car_client");
exports.v20220110 = {
    Client: car_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./car_models":1738984248732,"./car_client":1738984248733}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248732, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248733, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * car client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("car.tencentcloudapi.com", "2022-01-10", clientConfig);
    }
    /**
     * 本接口用于申请并发。接口超时时间：20秒。
     */
    async ApplyConcurrent(req, cb) {
        return this.request("ApplyConcurrent", req, cb);
    }
    /**
     * 销毁会话。如果该会话开启了云端推流，那么销毁会话时会结束云端推流。
     */
    async DestroySession(req, cb) {
        return this.request("DestroySession", req, cb);
    }
    /**
     * 开始云端推流。云端推流 codec 根据客户端（SDK）能力来自动选择，默认优先顺序为 H265、H264、VP8、VP9。
     */
    async StartPublishStream(req, cb) {
        return this.request("StartPublishStream", req, cb);
    }
    /**
     * 停止云端推流
     */
    async StopPublishStream(req, cb) {
        return this.request("StopPublishStream", req, cb);
    }
    /**
     * 开始云端推流到指定URL。云端推流 codec 根据客户端（SDK）能力来自动选择，默认优先顺序为 H265、H264、VP8、VP9。该推流方式需要单独计费，详细计费方式请查看[指定地址推流费用说明](https://cloud.tencent.com/document/product/1547/72168#98ac188a-d122-4caf-88be-05268ecefdf6)
     */
    async StartPublishStreamWithURL(req, cb) {
        return this.request("StartPublishStreamWithURL", req, cb);
    }
    /**
     * 本接口用于创建会话。接口超时时间：5秒。
     */
    async CreateSession(req, cb) {
        return this.request("CreateSession", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248734, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cat = void 0;
const v20180409_1 = require("./v20180409");
exports.cat = {
    v20180409: v20180409_1.v20180409,
};

}, function(modId) { var map = {"./v20180409":1738984248735}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248735, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180409 = void 0;
const Models = require("./cat_models");
const cat_client_1 = require("./cat_client");
exports.v20180409 = {
    Client: cat_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cat_models":1738984248736,"./cat_client":1738984248737}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248736, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248737, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cat client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cat.tencentcloudapi.com", "2018-04-09", clientConfig);
    }
    /**
     * 暂停任务
     */
    async SuspendProbeTask(req, cb) {
        return this.request("SuspendProbeTask", req, cb);
    }
    /**
     * 查询云拨测指标数据，指标支持使用sum,avg,max,min聚合函数进行指标数据查询
拨测频率与groupby聚合时间设置关联，如拨测频率为 30 分钟，则 grouby 聚合时间建议设置为大于30分钟，避免出现查询数据为空的情况
     */
    async DescribeProbeMetricData(req, cb) {
        return this.request("DescribeProbeMetricData", req, cb);
    }
    /**
     * 查询拨测任务列表
     */
    async DescribeProbeTasks(req, cb) {
        return this.request("DescribeProbeTasks", req, cb);
    }
    /**
     * 更新探测任务属性
     */
    async UpdateProbeTaskAttributes(req, cb) {
        return this.request("UpdateProbeTaskAttributes", req, cb);
    }
    /**
     * 获取拨测节点
     */
    async DescribeNodes(req, cb) {
        return this.request("DescribeNodes", req, cb);
    }
    /**
     * 获取历史即时拨测任务
     */
    async DescribeInstantTasks(req, cb) {
        return this.request("DescribeInstantTasks", req, cb);
    }
    /**
     * 批量更新拨测任务配置
     */
    async UpdateProbeTaskConfigurationList(req, cb) {
        return this.request("UpdateProbeTaskConfigurationList", req, cb);
    }
    /**
     * 批量创建拨测任务
     */
    async CreateProbeTasks(req, cb) {
        return this.request("CreateProbeTasks", req, cb);
    }
    /**
     * 查询拨测节点
     */
    async DescribeProbeNodes(req, cb) {
        return this.request("DescribeProbeNodes", req, cb);
    }
    /**
     * 根据时间范围、任务ID、运营商等条件查询单次拨测详情数据
     */
    async DescribeDetailedSingleProbeData(req, cb) {
        return this.request("DescribeDetailedSingleProbeData", req, cb);
    }
    /**
     * 删除拨测任务
     */
    async DeleteProbeTask(req, cb) {
        return this.request("DeleteProbeTask", req, cb);
    }
    /**
     * 恢复拨测任务
     */
    async ResumeProbeTask(req, cb) {
        return this.request("ResumeProbeTask", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248738, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cbs = void 0;
const v20170312_1 = require("./v20170312");
exports.cbs = {
    v20170312: v20170312_1.v20170312,
};

}, function(modId) { var map = {"./v20170312":1738984248739}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248739, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20170312 = void 0;
const Models = require("./cbs_models");
const cbs_client_1 = require("./cbs_client");
exports.v20170312 = {
    Client: cbs_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cbs_models":1738984248740,"./cbs_client":1738984248741}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248740, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248741, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cbs client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cbs.tencentcloudapi.com", "2017-03-12", clientConfig);
    }
    /**
     * 本接口（ModifyDiskExtraPerformance）用于调整云硬盘额外的性能。

* 目前仅支持增强型SSD云硬盘(CLOUD_HSSD)和极速型SSD云硬盘（CLOUD_TSSD）。
     */
    async ModifyDiskExtraPerformance(req, cb) {
        return this.request("ModifyDiskExtraPerformance", req, cb);
    }
    /**
     * 本接口（RenewDisk）用于续费云硬盘。

* 只支持预付费的云硬盘。云硬盘类型可以通过[DescribeDisks](/document/product/362/16315)接口查询，见输出参数中DiskChargeType字段解释。
* 支持与挂载实例一起续费的场景，需要在[DiskChargePrepaid](/document/product/362/15669#DiskChargePrepaid)参数中指定CurInstanceDeadline，此时会按对齐到子机续费后的到期时间来续费。
     */
    async RenewDisk(req, cb) {
        return this.request("RenewDisk", req, cb);
    }
    /**
     * 本接口（ApplyDiskBackup）用于回滚备份点到原云硬盘。

* 仅支持回滚到原云硬盘上。对于数据盘备份点，如果您需要复制备份点数据到其它云硬盘上，请先使用 CreateSnapshot 将备份点转换为快照，然后使用 CreateDisks 接口创建新的弹性云硬盘，将快照数据复制到新购云硬盘上。
* 用于回滚的备份点必须处于NORMAL状态。备份点状态可以通过DescribeDiskBackups接口查询，见输出参数中BackupState字段解释。
* 如果是弹性云硬盘，则云硬盘必须处于未挂载状态，云硬盘挂载状态可以通过DescribeDisks接口查询，见Attached字段解释；如果是随实例一起购买的非弹性云硬盘，则实例必须处于关机状态，实例状态可以通过DescribeInstancesStatus接口查询。
     */
    async ApplyDiskBackup(req, cb) {
        return this.request("ApplyDiskBackup", req, cb);
    }
    /**
     * 本接口（CopySnapshotCrossRegions）用于快照跨地域复制。

* 本接口为异步接口，当跨地域复制的请求下发成功后会返回一个新的快照ID，此时快照未立即复制到目标地域，可请求目标地域的[DescribeSnapshots](/document/product/362/15647)接口查询新快照的状态，判断是否复制完成。如果快照的状态为“NORMAL”，表示快照复制完成。
* 本接口实现的快照跨地域复制操作将产生跨地域流量，预计2022年第三季度会针对此功能进行商业化计费；请留意后续站内信公告，避免产生预期外扣费。
     */
    async CopySnapshotCrossRegions(req, cb) {
        return this.request("CopySnapshotCrossRegions", req, cb);
    }
    /**
     * 本接口（DescribeInstancesDiskNum）用于查询实例已挂载云硬盘数量。

* 支持批量操作，当传入多个云服务器实例ID，返回结果会分别列出每个云服务器挂载的云硬盘数量。
     */
    async DescribeInstancesDiskNum(req, cb) {
        return this.request("DescribeInstancesDiskNum", req, cb);
    }
    /**
     * 本接口（InquiryPriceResizeDisk）用于扩容云硬盘询价。
     */
    async InquiryPriceResizeDisk(req, cb) {
        return this.request("InquiryPriceResizeDisk", req, cb);
    }
    /**
     * 本接口（InquirePriceModifyDiskExtraPerformance）用于调整云硬盘额外性能询价。
     */
    async InquirePriceModifyDiskExtraPerformance(req, cb) {
        return this.request("InquirePriceModifyDiskExtraPerformance", req, cb);
    }
    /**
     * 本接口（DescribeAutoSnapshotPolicies）用于查询定期快照策略。

* 可以根据定期快照策略ID、名称或者状态等信息来查询定期快照策略的详细信息，不同条件之间为与(AND)的关系，过滤信息详细请见过滤器`Filter`。
* 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的定期快照策略表。
     */
    async DescribeAutoSnapshotPolicies(req, cb) {
        return this.request("DescribeAutoSnapshotPolicies", req, cb);
    }
    /**
     * 本接口（AttachDisks）用于挂载云硬盘。
 
* 支持批量操作，将多块云盘挂载到同一云主机。如果多个云盘中存在不允许挂载的云盘，则操作不执行，返回特定的错误码。
* 本接口为异步接口，当挂载云盘的请求成功返回时，表示后台已发起挂载云盘的操作，可通过接口[DescribeDisks](/document/product/362/16315)来查询对应云盘的状态，如果云盘的状态由“ATTACHING”变为“ATTACHED”，则为挂载成功。
     */
    async AttachDisks(req, cb) {
        return this.request("AttachDisks", req, cb);
    }
    /**
     * 本接口（ModifyDisksRenewFlag）用于修改云硬盘续费标识，支持批量修改。
     */
    async ModifyDisksRenewFlag(req, cb) {
        return this.request("ModifyDisksRenewFlag", req, cb);
    }
    /**
     * 本接口（InquirePricePriceModifyDiskBackupQuota）用于修改云硬盘备份点配额询价。
     */
    async InquirePriceModifyDiskBackupQuota(req, cb) {
        return this.request("InquirePriceModifyDiskBackupQuota", req, cb);
    }
    /**
     * 批量删除指定的云硬盘备份点。
     */
    async DeleteDiskBackups(req, cb) {
        return this.request("DeleteDiskBackups", req, cb);
    }
    /**
     * 本接口（ModifyAutoSnapshotPolicyAttribute）用于修改定期快照策略属性。

* 可通过该接口修改定期快照策略的执行策略、名称、是否激活等属性。
* 修改保留天数时必须保证不与是否永久保留属性冲突，否则整个操作失败，以特定的错误码返回。
     */
    async ModifyAutoSnapshotPolicyAttribute(req, cb) {
        return this.request("ModifyAutoSnapshotPolicyAttribute", req, cb);
    }
    /**
     * 本接口（InquiryPriceCreateDisks）用于创建云硬盘询价。

* 支持查询创建多块云硬盘的价格，此时返回结果为总价格。
     */
    async InquiryPriceCreateDisks(req, cb) {
        return this.request("InquiryPriceCreateDisks", req, cb);
    }
    /**
     * 本接口（DescribeDiskBackups）用于查询备份点的详细信息。

根据备份点ID、创建备份点的云硬盘ID、创建备份点的云硬盘类型等对结果进行过滤，不同条件之间为与(AND)的关系，过滤信息详细请见过滤器Filter。
如果参数为空，返回当前用户一定数量（Limit所指定的数量，默认为20）的备份点列表。
     */
    async DescribeDiskBackups(req, cb) {
        return this.request("DescribeDiskBackups", req, cb);
    }
    /**
     * 本接口（DeleteAutoSnapshotPolicies）用于删除定期快照策略。

*  支持批量操作。如果多个定期快照策略存在无法删除的，则操作不执行，以特定错误码返回。
     */
    async DeleteAutoSnapshotPolicies(req, cb) {
        return this.request("DeleteAutoSnapshotPolicies", req, cb);
    }
    /**
     * 重新初始化云硬盘至云硬盘初始创建时的状态。使用云硬盘的重新初始化功能时需要注意以下4点：
1. 如果云硬盘是由快照创建的，则重新初始化会通过此快照重新回滚此云硬盘，即将云硬盘恢复为与快照一致的状态；
2. 如果云硬盘不是通过快照创建的，则重新初始化会清空此云硬盘的数据；请在重新初始化云硬盘前检查并备份必要的数据；
3. 当前仅未挂载的、非共享属性的数据盘云硬盘支持重新初始化；
4. 当创建此云硬盘的原始快照被删除时，不再支持重新初始化此云硬盘。
     */
    async InitializeDisks(req, cb) {
        return this.request("InitializeDisks", req, cb);
    }
    /**
     * 本接口（DescribeDisks）用于查询云硬盘列表。

* 可以根据云硬盘ID、云硬盘类型或者云硬盘状态等信息来查询云硬盘的详细信息，不同条件之间为与(AND)的关系，过滤信息详细请见过滤器`Filter`。
* 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的云硬盘列表。
     */
    async DescribeDisks(req, cb) {
        return this.request("DescribeDisks", req, cb);
    }
    /**
     * 此接口 (ModifyDiskBackupQuota) 用于修改云硬盘备份点配额。
     */
    async ModifyDiskBackupQuota(req, cb) {
        return this.request("ModifyDiskBackupQuota", req, cb);
    }
    /**
     * 本接口（CreateDisks）用于创建云硬盘。

* 预付费云盘的购买会预先扣除本次云盘购买所需金额，在调用本接口前请确保账户余额充足。
* 本接口支持传入数据盘快照来创建云盘，实现将快照数据复制到新购云盘上。
* 本接口为异步接口，当创建请求下发成功后会返回一个新建的云盘ID列表，此时云盘的创建并未立即完成。可以通过调用[DescribeDisks](/document/product/362/16315)接口根据DiskId查询对应云盘，如果能查到云盘，且状态为'UNATTACHED'或'ATTACHED'，则表示创建成功。
     */
    async CreateDisks(req, cb) {
        return this.request("CreateDisks", req, cb);
    }
    /**
     * * 只支持修改弹性云盘的项目ID。随云主机创建的云硬盘项目ID与云主机联动。可以通过[DescribeDisks](/document/product/362/16315)接口查询，见输出参数中Portable字段解释。
* “云硬盘名称”仅为方便用户自己管理之用，腾讯云并不以此名称作为提交工单或是进行云盘管理操作的依据。
* 支持批量操作，如果传入多个云盘ID，则所有云盘修改为同一属性。如果存在不允许操作的云盘，则操作不执行，以特定错误码返回。
     */
    async ModifyDiskAttributes(req, cb) {
        return this.request("ModifyDiskAttributes", req, cb);
    }
    /**
     * 本接口（DeleteSnapshots）用于删除快照。

* 快照必须处于NORMAL状态，快照状态可以通过[DescribeSnapshots](/document/product/362/15647)接口查询，见输出参数中SnapshotState字段解释。
* 支持批量操作。如果多个快照存在无法删除的快照，则操作不执行，以特定的错误码返回。
     */
    async DeleteSnapshots(req, cb) {
        return this.request("DeleteSnapshots", req, cb);
    }
    /**
     * 本接口（ModifySnapshotAttribute）用于修改指定快照的属性。

* 本接口支持修改快照名称及到期时间，以及将非永久快照修改为永久快照。
* “快照名称”仅为方便用户管理之用，腾讯云并不以此名称作为提交工单或是进行快照管理操作的依据。
     */
    async ModifySnapshotAttribute(req, cb) {
        return this.request("ModifySnapshotAttribute", req, cb);
    }
    /**
     * 本接口（DescribeDiskAssociatedAutoSnapshotPolicy）用于查询云盘绑定的定期快照策略。
     */
    async DescribeDiskAssociatedAutoSnapshotPolicy(req, cb) {
        return this.request("DescribeDiskAssociatedAutoSnapshotPolicy", req, cb);
    }
    /**
     * 本接口（BindAutoSnapshotPolicy）用于绑定云硬盘到指定的定期快照策略。

* 每个地域下的定期快照策略配额限制请参考文档[定期快照](/document/product/362/8191)。
* 当已绑定定期快照策略的云硬盘处于未使用状态（即弹性云盘未挂载或非弹性云盘的主机处于关机状态）将不会创建定期快照。
     */
    async BindAutoSnapshotPolicy(req, cb) {
        return this.request("BindAutoSnapshotPolicy", req, cb);
    }
    /**
     * 本接口（DescribeSnapshots）用于查询快照的详细信息。

* 根据快照ID、创建快照的云硬盘ID、创建快照的云硬盘类型等对结果进行过滤，不同条件之间为与(AND)的关系，过滤信息详细请见过滤器`Filter`。
*  如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的快照列表。
     */
    async DescribeSnapshots(req, cb) {
        return this.request("DescribeSnapshots", req, cb);
    }
    /**
     * 本接口（DescribeSnapshotSharePermission）用于查询快照的分享信息。
     */
    async DescribeSnapshotSharePermission(req, cb) {
        return this.request("DescribeSnapshotSharePermission", req, cb);
    }
    /**
     * 本接口（CreateAutoSnapshotPolicy）用于创建定期快照策略。

* 每个地域可创建的定期快照策略数量限制请参考文档[定期快照](/document/product/362/8191)。
* 每个地域可创建的快照有数量和容量的限制，具体请见腾讯云控制台快照页面提示，如果快照超配额，定期快照创建会失败。
     */
    async CreateAutoSnapshotPolicy(req, cb) {
        return this.request("CreateAutoSnapshotPolicy", req, cb);
    }
    /**
     * 本接口 (ModifyDisksChargeType) 用于切换云硬盘的计费模式。

非弹性云硬盘不支持此接口，请通过修改实例计费模式接口将实例连同非弹性云硬盘一起转换。
默认接口请求频率限制：10次/秒。
     */
    async ModifyDisksChargeType(req, cb) {
        return this.request("ModifyDisksChargeType", req, cb);
    }
    /**
     * 本接口（TerminateDisks）用于退还云硬盘。

* 不再使用的云盘，可通过本接口主动退还。
* 本接口支持退还预付费云盘和按小时后付费云盘。按小时后付费云盘可直接退还，预付费云盘需符合退还规则。
* 支持批量操作，每次请求批量云硬盘的上限为100。如果批量云盘存在不允许操作的，请求会以特定错误码返回。
     */
    async TerminateDisks(req, cb) {
        return this.request("TerminateDisks", req, cb);
    }
    /**
     * 本接口（DescribeDiskConfigQuota）用于查询云硬盘配额。
     */
    async DescribeDiskConfigQuota(req, cb) {
        return this.request("DescribeDiskConfigQuota", req, cb);
    }
    /**
     * 本接口（UnbindAutoSnapshotPolicy）用于解除云硬盘绑定的定期快照策略。

* 支持批量操作，可一次解除多个云盘与同一定期快照策略的绑定。
* 如果传入的云盘未绑定到当前定期快照策略，接口将自动跳过，仅解绑与当前定期快照策略绑定的云盘。
     */
    async UnbindAutoSnapshotPolicy(req, cb) {
        return this.request("UnbindAutoSnapshotPolicy", req, cb);
    }
    /**
     * 为云硬盘创建一个备份点。
     */
    async CreateDiskBackup(req, cb) {
        return this.request("CreateDiskBackup", req, cb);
    }
    /**
     * 本接口（DescribeDiskStoragePool）查询用户的云硬盘独享集群列表。

* 可以根据独享集群ID(CdcId)、可用区(zone)等信息来查询和过滤云硬盘独享集群详细信息，不同的过滤条件之间为与(AND)的关系，过滤信息详细请见过滤器`Filter`。
* 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的云硬盘独享集群列表。
     */
    async DescribeDiskStoragePool(req, cb) {
        return this.request("DescribeDiskStoragePool", req, cb);
    }
    /**
     * 本接口（ApplySnapshot）用于回滚快照到原云硬盘。

* 仅支持回滚到原云硬盘上。对于数据盘快照，如果您需要复制快照数据到其它云硬盘上，请使用[CreateDisks](/document/product/362/16312)接口创建新的弹性云盘，将快照数据复制到新购云盘上。
* 用于回滚的快照必须处于NORMAL状态。快照状态可以通过[DescribeSnapshots](/document/product/362/15647)接口查询，见输出参数中SnapshotState字段解释。
* 如果是弹性云盘，则云盘必须处于未挂载状态，云硬盘挂载状态可以通过[DescribeDisks](/document/product/362/16315)接口查询，见Attached字段解释；如果是随实例一起购买的非弹性云盘，则实例必须处于关机状态，实例状态可以通过[DescribeInstancesStatus](/document/product/213/15738)接口查询。
     */
    async ApplySnapshot(req, cb) {
        return this.request("ApplySnapshot", req, cb);
    }
    /**
     * 本接口（ModifySnapshotsSharePermission）用于修改快照分享信息。

分享快照后，被分享账户可以通过该快照创建云硬盘。
* 每个快照最多可分享给50个账户。
* 分享快照无法更改名称，描述，仅可用于创建云硬盘。
* 只支持分享到对方账户相同地域。
* 仅支持分享数据盘快照。
     */
    async ModifySnapshotsSharePermission(req, cb) {
        return this.request("ModifySnapshotsSharePermission", req, cb);
    }
    /**
     * 该接口用于查询用户快照使用概览，包括快照总容量、计费容量等信息。
     */
    async DescribeSnapshotOverview(req, cb) {
        return this.request("DescribeSnapshotOverview", req, cb);
    }
    /**
     * 本接口（DetachDisks）用于卸载云硬盘。

* 支持批量操作，卸载挂载在同一主机上的多块云盘。如果多块云盘中存在不允许卸载的云盘，则操作不执行，返回特定的错误码。
* 本接口为异步接口，当请求成功返回时，云盘并未立即从主机卸载，可通过接口[DescribeDisks](/document/product/362/16315)来查询对应云盘的状态，如果云盘的状态由“ATTACHED”变为“UNATTACHED”，则为卸载成功。
     */
    async DetachDisks(req, cb) {
        return this.request("DetachDisks", req, cb);
    }
    /**
     * 为进一步规范化API命名，该接口决定预下线，新接口命名为：DescribeSnapshotOverview

获取快照概览信息
     */
    async GetSnapOverview(req, cb) {
        return this.request("GetSnapOverview", req, cb);
    }
    /**
     * 本接口（ResizeDisk）用于扩容云硬盘。

* 只支持扩容弹性云盘。云硬盘类型可以通过[DescribeDisks](/document/product/362/16315)接口查询，见输出参数中Portable字段解释。非弹性云硬盘需通过[ResizeInstanceDisks](/document/product/213/15731)接口扩容。
* 本接口为异步接口，接口成功返回时，云盘并未立即扩容到指定大小，可通过接口[DescribeDisks](/document/product/362/16315)来查询对应云盘的状态，如果云盘的状态为“EXPANDING”，表示正在扩容中。
     */
    async ResizeDisk(req, cb) {
        return this.request("ResizeDisk", req, cb);
    }
    /**
     * 本接口（CreateSnapshot）用于对指定云盘创建快照。

* 只有具有快照能力的云硬盘才能创建快照。云硬盘是否具有快照能力可由[DescribeDisks](/document/product/362/16315)接口查询，见SnapshotAbility字段。
* 可创建快照数量限制见[产品使用限制](https://cloud.tencent.com/doc/product/362/5145)。
* 当前支持将备份点转化为普通快照，转化之后可能会收取快照使用费用，备份点不保留，其占用的备份点配额也将被释放。
     */
    async CreateSnapshot(req, cb) {
        return this.request("CreateSnapshot", req, cb);
    }
    /**
     * 本接口（InquiryPriceRenewDisks）用于续费云硬盘询价。

* 只支持查询预付费模式的弹性云盘续费价格。
* 支持与挂载实例一起续费的场景，需要在[DiskChargePrepaid](/document/product/362/15669#DiskChargePrepaid)参数中指定CurInstanceDeadline，此时会按对齐到实例续费后的到期时间来续费询价。
* 支持为多块云盘指定不同的续费时长，此时返回的价格为多块云盘续费的总价格。
     */
    async InquiryPriceRenewDisks(req, cb) {
        return this.request("InquiryPriceRenewDisks", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248742, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ccc = void 0;
const v20200210_1 = require("./v20200210");
exports.ccc = {
    v20200210: v20200210_1.v20200210,
};

}, function(modId) { var map = {"./v20200210":1738984248743}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248743, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200210 = void 0;
const Models = require("./ccc_models");
const ccc_client_1 = require("./ccc_client");
exports.v20200210 = {
    Client: ccc_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ccc_models":1738984248744,"./ccc_client":1738984248745}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248744, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248745, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ccc client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ccc.tencentcloudapi.com", "2020-02-10", clientConfig);
    }
    /**
     * 修改客服账号
     */
    async ModifyStaff(req, cb) {
        return this.request("ModifyStaff", req, cb);
    }
    /**
     * 查询话机列表信息
     */
    async DescribeExtensions(req, cb) {
        return this.request("DescribeExtensions", req, cb);
    }
    /**
     * 批量查询自动外呼任务
     */
    async DescribeAutoCalloutTasks(req, cb) {
        return this.request("DescribeAutoCalloutTasks", req, cb);
    }
    /**
     * 用于调用AI模型发起外呼通话，仅限自有电话号码使用，目前开通高级版座席**限时**免费体验。

发起通话前，请先确认您的AI模型是否兼容 OpenAI、Azure 或 Minimax 协议，并前往模型服务商网站获取相关鉴权信息。 具体功能说明请参考文档 [腾讯云联络中心AI通话平台](https://cloud.tencent.com/document/product/679/112100)。
     */
    async CreateAICall(req, cb) {
        return this.request("CreateAICall", req, cb);
    }
    /**
     * 拉取会话录音转文本信息
     */
    async DescribeTelRecordAsr(req, cb) {
        return this.request("DescribeTelRecordAsr", req, cb);
    }
    /**
     * 停止自动外呼任务
     */
    async StopAutoCalloutTask(req, cb) {
        return this.request("StopAutoCalloutTask", req, cb);
    }
    /**
     * 停用号码
     */
    async DisableCCCPhoneNumber(req, cb) {
        return this.request("DisableCCCPhoneNumber", req, cb);
    }
    /**
     * 获取当前正在通话的会话列表
     */
    async DescribePSTNActiveSessionList(req, cb) {
        return this.request("DescribePSTNActiveSessionList", req, cb);
    }
    /**
     * 删除话机账号
     */
    async DeleteExtension(req, cb) {
        return this.request("DeleteExtension", req, cb);
    }
    /**
     * 获取指定服务记录文本聊天内容，需要先使用查询在线客服记录（DescribeIMCdrs） API 获取服务记录 SessionId。

文本聊天记录只保存了 1 年内的，1 年之前会自动清理。
     */
    async DescribeChatMessages(req, cb) {
        return this.request("DescribeChatMessages", req, cb);
    }
    /**
     * 绑定座席所属技能组
     */
    async BindStaffSkillGroupList(req, cb) {
        return this.request("BindStaffSkillGroupList", req, cb);
    }
    /**
     * 绑定号码外呼技能组
     */
    async BindNumberCallOutSkillGroup(req, cb) {
        return this.request("BindNumberCallOutSkillGroup", req, cb);
    }
    /**
     * 获取包括全媒体和文本会话两种类型的服务记录。
     */
    async DescribeIMCdrs(req, cb) {
        return this.request("DescribeIMCdrs", req, cb);
    }
    /**
     * 查询IVR音频文件列表信息
     */
    async DescribeIvrAudioList(req, cb) {
        return this.request("DescribeIvrAudioList", req, cb);
    }
    /**
     * 删除坐席信息
     */
    async DeleteStaff(req, cb) {
        return this.request("DeleteStaff", req, cb);
    }
    /**
     * 修改公司资质申请，只能修改状态为驳回或待审核的申请单。（1、首次使用接口，建议先在云联络中心控制台查看各个资料模板:https://console.cloud.tencent.com/ccc/enterprise/update。2、参数中图片Url建议使用腾讯云Cos存储的临时链接）
     */
    async ModifyCompanyApply(req, cb) {
        return this.request("ModifyCompanyApply", req, cb);
    }
    /**
     * 创建话机账号
     */
    async CreateExtension(req, cb) {
        return this.request("CreateExtension", req, cb);
    }
    /**
     * 重置话机注册密码
     */
    async ResetExtensionPassword(req, cb) {
        return this.request("ResetExtensionPassword", req, cb);
    }
    /**
     * 按实例获取电话消耗统计
     */
    async DescribeTelCallInfo(req, cb) {
        return this.request("DescribeTelCallInfo", req, cb);
    }
    /**
     * 上传IVR中使用的音频文件，每日上传文件限制50个。（参数中音频文件Url建议使用腾讯云Cos存储的临时链接）
     */
    async UploadIvrAudio(req, cb) {
        return this.request("UploadIvrAudio", req, cb);
    }
    /**
     * 获取话机信息
     */
    async DescribeExtension(req, cb) {
        return this.request("DescribeExtension", req, cb);
    }
    /**
     * 查询单状态
     */
    async DescribeCarrierPrivilegeNumberApplicants(req, cb) {
        return this.request("DescribeCarrierPrivilegeNumberApplicants", req, cb);
    }
    /**
     * 获取 PSTN 会话信息
     */
    async DescribeTelSession(req, cb) {
        return this.request("DescribeTelSession", req, cb);
    }
    /**
     * 创建外呼会话，当前仅支持双呼，即先使用平台号码呼出到坐席手机上，坐席接听后，然后再外呼用户，而且由于运营商频率限制，坐席手机号必须先加白名单，避免频控导致外呼失败。
     */
    async CreateCallOutSession(req, cb) {
        return this.request("CreateCallOutSession", req, cb);
    }
    /**
     * 查询预测式外呼任务列表
     */
    async DescribePredictiveDialingCampaigns(req, cb) {
        return this.request("DescribePredictiveDialingCampaigns", req, cb);
    }
    /**
     * 查询自动外呼任务详情
     */
    async DescribeAutoCalloutTask(req, cb) {
        return this.request("DescribeAutoCalloutTask", req, cb);
    }
    /**
     * 查询预测式外呼呼叫列表
     */
    async DescribePredictiveDialingSessions(req, cb) {
        return this.request("DescribePredictiveDialingSessions", req, cb);
    }
    /**
     * 创建公司资质申请（1、首次使用接口，建议先在云联络中心控制台查看各个资料模板:https://console.cloud.tencent.com/ccc/enterprise/update。2、参数中图片Url建议使用腾讯云Cos存储的临时链接）
     */
    async CreateCompanyApply(req, cb) {
        return this.request("CreateCompanyApply", req, cb);
    }
    /**
     * 获取电话服务记录与录音
     */
    async DescribeTelCdr(req, cb) {
        return this.request("DescribeTelCdr", req, cb);
    }
    /**
     * 获取技能组信息列表
     */
    async DescribeSkillGroupInfoList(req, cb) {
        return this.request("DescribeSkillGroupInfoList", req, cb);
    }
    /**
     * 解绑号码外呼技能组
     */
    async UnbindNumberCallOutSkillGroup(req, cb) {
        return this.request("UnbindNumberCallOutSkillGroup", req, cb);
    }
    /**
     * 修改客户自携号码审批单
     */
    async ModifyOwnNumberApply(req, cb) {
        return this.request("ModifyOwnNumberApply", req, cb);
    }
    /**
     * 创建预测式外呼任务
     */
    async CreatePredictiveDialingCampaign(req, cb) {
        return this.request("CreatePredictiveDialingCampaign", req, cb);
    }
    /**
     * 用于无限频率地呼叫坐席手机
     */
    async CreateCarrierPrivilegeNumberApplicant(req, cb) {
        return this.request("CreateCarrierPrivilegeNumberApplicant", req, cb);
    }
    /**
     * 获取 AI 通话内容提取结果。
     */
    async DescribeAICallExtractResult(req, cb) {
        return this.request("DescribeAICallExtractResult", req, cb);
    }
    /**
     * 创建客户自携号码接入审核
     */
    async CreateOwnNumberApply(req, cb) {
        return this.request("CreateOwnNumberApply", req, cb);
    }
    /**
     * 获取用户购买信息列表
     */
    async DescribeCCCBuyInfoList(req, cb) {
        return this.request("DescribeCCCBuyInfoList", req, cb);
    }
    /**
     * 恢复预测式外呼任务
     */
    async ResumePredictiveDialingCampaign(req, cb) {
        return this.request("ResumePredictiveDialingCampaign", req, cb);
    }
    /**
     * 新建技能组
     */
    async CreateCCCSkillGroup(req, cb) {
        return this.request("CreateCCCSkillGroup", req, cb);
    }
    /**
     * 解绑坐席所属技能组
     */
    async UnbindStaffSkillGroupList(req, cb) {
        return this.request("UnbindStaffSkillGroupList", req, cb);
    }
    /**
     * 修改座席的密码
     */
    async ModifyStaffPassword(req, cb) {
        return this.request("ModifyStaffPassword", req, cb);
    }
    /**
     * 获取坐席信息列表
     */
    async DescribeStaffInfoList(req, cb) {
        return this.request("DescribeStaffInfoList", req, cb);
    }
    /**
     * 查询预测式外呼任务
     */
    async DescribePredictiveDialingCampaign(req, cb) {
        return this.request("DescribePredictiveDialingCampaign", req, cb);
    }
    /**
     * 获取坐席实时状态统计指标
     */
    async DescribeStaffStatusMetrics(req, cb) {
        return this.request("DescribeStaffStatusMetrics", req, cb);
    }
    /**
     * 创建客服账号。
     */
    async CreateStaff(req, cb) {
        return this.request("CreateStaff", req, cb);
    }
    /**
     * 创建关联 IVR 的会话，仅高级版支持，目前支持呼入和自动外呼两种 IVR 类型。收到请求后 TCCC 会先尝试呼通被叫，然后进入 IVR 流程。
     */
    async CreateIVRSession(req, cb) {
        return this.request("CreateIVRSession", req, cb);
    }
    /**
     * 创建自动外呼任务
     */
    async CreateAutoCalloutTask(req, cb) {
        return this.request("CreateAutoCalloutTask", req, cb);
    }
    /**
     * 修改话机账号(绑定技能组、绑定坐席账号)
     */
    async ModifyExtension(req, cb) {
        return this.request("ModifyExtension", req, cb);
    }
    /**
     * 更新技能组
     */
    async UpdateCCCSkillGroup(req, cb) {
        return this.request("UpdateCCCSkillGroup", req, cb);
    }
    /**
     * 创建用户数据签名
     */
    async CreateUserSig(req, cb) {
        return this.request("CreateUserSig", req, cb);
    }
    /**
     * 挂断电话
     */
    async HangUpCall(req, cb) {
        return this.request("HangUpCall", req, cb);
    }
    /**
     * 暂停预测式外呼任务
     */
    async PausePredictiveDialingCampaign(req, cb) {
        return this.request("PausePredictiveDialingCampaign", req, cb);
    }
    /**
     * 创建管理端访问链接
     */
    async CreateAdminURL(req, cb) {
        return this.request("CreateAdminURL", req, cb);
    }
    /**
     * 获取主被叫受保护的电话服务记录与录音
     */
    async DescribeProtectedTelCdr(req, cb) {
        return this.request("DescribeProtectedTelCdr", req, cb);
    }
    /**
     * 获取包括全媒体和文本会话两种类型的服务记录。
     */
    async DescribeIMCdrList(req, cb) {
        return this.request("DescribeIMCdrList", req, cb);
    }
    /**
     * 获取呼入实时数据统计指标
     */
    async DescribeCallInMetrics(req, cb) {
        return this.request("DescribeCallInMetrics", req, cb);
    }
    /**
     * 创建 SDK 登录 Token。
     */
    async CreateSDKLoginToken(req, cb) {
        return this.request("CreateSDKLoginToken", req, cb);
    }
    /**
     * 查询生效运营商白名单规则
     */
    async DescribeActiveCarrierPrivilegeNumber(req, cb) {
        return this.request("DescribeActiveCarrierPrivilegeNumber", req, cb);
    }
    /**
     * 查询号码列表
     */
    async DescribeNumbers(req, cb) {
        return this.request("DescribeNumbers", req, cb);
    }
    /**
     * 停止预测式外呼任务
     */
    async AbortPredictiveDialingCampaign(req, cb) {
        return this.request("AbortPredictiveDialingCampaign", req, cb);
    }
    /**
     * 查询公司资质申请列表
     */
    async DescribeCompanyList(req, cb) {
        return this.request("DescribeCompanyList", req, cb);
    }
    /**
     * 用于调用AI模型发起外呼通话，仅限自有电话号码使用，目前开通高级版座席**限时**免费体验。

发起通话前，请先确认您的AI模型是否兼容 OpenAI、Azure 或 Minimax 协议，并前往模型服务商网站获取相关鉴权信息。 具体功能说明请参考文档 [腾讯云联络中心AI通话平台](https://cloud.tencent.com/document/product/679/112100)。
     */
    async CreateAIAgentCall(req, cb) {
        return this.request("CreateAIAgentCall", req, cb);
    }
    /**
     * 删除预测式外呼任务
     */
    async DeletePredictiveDialingCampaign(req, cb) {
        return this.request("DeletePredictiveDialingCampaign", req, cb);
    }
    /**
     * 任务未启动前，更新预测式外呼任务。
     */
    async UpdatePredictiveDialingCampaign(req, cb) {
        return this.request("UpdatePredictiveDialingCampaign", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248746, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cdb = void 0;
const v20170320_1 = require("./v20170320");
exports.cdb = {
    v20170320: v20170320_1.v20170320,
};

}, function(modId) { var map = {"./v20170320":1738984248747}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248747, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20170320 = void 0;
const Models = require("./cdb_models");
const cdb_client_1 = require("./cdb_client");
exports.v20170320 = {
    Client: cdb_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cdb_models":1738984248748,"./cdb_client":1738984248749}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248748, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248749, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cdb client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cdb.tencentcloudapi.com", "2017-03-20", clientConfig);
    }
    /**
     * 本接口(DescribeDBInstanceGTID)用于查询云数据库实例是否开通了 GTID，不支持版本为 5.5 以及以下的实例。
     */
    async DescribeDBInstanceGTID(req, cb) {
        return this.request("DescribeDBInstanceGTID", req, cb);
    }
    /**
     * 本接口(CreateRoInstanceIp)用于创建云数据库只读实例的独立VIP。
     */
    async CreateRoInstanceIp(req, cb) {
        return this.request("CreateRoInstanceIp", req, cb);
    }
    /**
     * 本接口(CreateAuditPolicy)用于创建云数据库实例的审计策略，即将审计规则绑定到具体的云数据库实例上。
     */
    async CreateAuditPolicy(req, cb) {
        return this.request("CreateAuditPolicy", req, cb);
    }
    /**
     * 本接口(DescribeTableColumns)用于查询云数据库实例的指定数据库表的列信息，仅支持主实例和灾备实例。
     */
    async DescribeTableColumns(req, cb) {
        return this.request("DescribeTableColumns", req, cb);
    }
    /**
     * 开启SSL连接功能。
     */
    async OpenSSL(req, cb) {
        return this.request("OpenSSL", req, cb);
    }
    /**
     * 本接口（DescribeDBFeatures）用于查询云数据库版本属性，包括是否支持数据库加密、数据库审计等功能。
     */
    async DescribeDBFeatures(req, cb) {
        return this.request("DescribeDBFeatures", req, cb);
    }
    /**
     * 本接口（CreateAuditRuleTemplate）用于创建审计规则模板。
     */
    async CreateAuditRuleTemplate(req, cb) {
        return this.request("CreateAuditRuleTemplate", req, cb);
    }
    /**
     * 本接口(BalanceRoGroupLoad)用于重新均衡 RO 组内实例的负载。注意，RO 组内 RO 实例会有一次数据库连接瞬断，请确保应用程序能重连数据库，谨慎操作。
     */
    async BalanceRoGroupLoad(req, cb) {
        return this.request("BalanceRoGroupLoad", req, cb);
    }
    /**
     * 本接口(IsolateDBInstance)用于隔离云数据库实例，隔离后不能通过IP和端口访问数据库。隔离的实例可在回收站中进行开机。若为欠费隔离，请尽快进行充值。
     */
    async IsolateDBInstance(req, cb) {
        return this.request("IsolateDBInstance", req, cb);
    }
    /**
     * 本接口（RestartDBInstances）用于重启云数据库实例。

注意：
1、本接口支持主实例、只读实例、灾备实例进行重启操作。
2、实例状态必须为正常，并且没有其他异步任务在执行中。
     */
    async RestartDBInstances(req, cb) {
        return this.request("RestartDBInstances", req, cb);
    }
    /**
     * 本接口(ModifyInstanceTag)用于对实例标签进行添加、修改或者删除。
     */
    async ModifyInstanceTag(req, cb) {
        return this.request("ModifyInstanceTag", req, cb);
    }
    /**
     * 本接口(DescribeTimeWindow)用于查询云数据库实例的维护时间窗口。
     */
    async DescribeTimeWindow(req, cb) {
        return this.request("DescribeTimeWindow", req, cb);
    }
    /**
     * 该接口（DescribeInstanceUpgradeCheckJob）查询实例版本升级校验任务。
     */
    async DescribeInstanceUpgradeCheckJob(req, cb) {
        return this.request("DescribeInstanceUpgradeCheckJob", req, cb);
    }
    /**
     * 本接口(DescribeBackupOverview)用于查询用户的备份概览。返回用户当前备份总个数、备份总的占用容量、赠送的免费容量、计费容量（容量单位为字节）。
     */
    async DescribeBackupOverview(req, cb) {
        return this.request("DescribeBackupOverview", req, cb);
    }
    /**
     * 本接口（StopReplication）用于停止 RO 复制，中断从主实例同步数据。
     */
    async StopReplication(req, cb) {
        return this.request("StopReplication", req, cb);
    }
    /**
     * 开启/关闭CDB慢日志、错误日志投递CLS
     */
    async ModifyDBInstanceLogToCLS(req, cb) {
        return this.request("ModifyDBInstanceLogToCLS", req, cb);
    }
    /**
     * 通过该API，可以关闭 CPU 弹性扩容。
     */
    async StopCpuExpand(req, cb) {
        return this.request("StopCpuExpand", req, cb);
    }
    /**
     * 本接口(ModifyDBInstanceName)用于修改云数据库实例的名称。
     */
    async ModifyDBInstanceName(req, cb) {
        return this.request("ModifyDBInstanceName", req, cb);
    }
    /**
     * 本接口(DescribeCdbZoneConfig)用于查询云数据库各地域可售卖的规格配置。
     */
    async DescribeCdbZoneConfig(req, cb) {
        return this.request("DescribeCdbZoneConfig", req, cb);
    }
    /**
     * 实例关闭审计服务
     */
    async CloseAuditService(req, cb) {
        return this.request("CloseAuditService", req, cb);
    }
    /**
     * 本接口(StopRollback) 用于撤销实例正在进行的回档任务，该接口返回一个异步任务id。 撤销结果可以通过 DescribeAsyncRequestInfo 查询任务的执行情况。
     */
    async StopRollback(req, cb) {
        return this.request("StopRollback", req, cb);
    }
    /**
     * 本接口（DescribeInstanceUpgradeType）用于查询数据库实例升级类型。
     */
    async DescribeInstanceUpgradeType(req, cb) {
        return this.request("DescribeInstanceUpgradeType", req, cb);
    }
    /**
     * 本接口(OfflineIsolatedInstances)用于立即下线隔离状态的云数据库实例。进行操作的实例状态必须为隔离状态，即通过 [查询实例列表](https://cloud.tencent.com/document/api/236/15872) 接口查询到 Status 值为 5 的实例。

该接口为异步操作，部分资源的回收可能存在延迟。您可以通过使用 [查询实例列表](https://cloud.tencent.com/document/api/236/15872) 接口，指定实例 InstanceId 和状态 Status 为 [5,6,7] 进行查询，若返回实例为空，则实例资源已全部释放。

注意，实例下线后，相关资源和数据将无法找回，请谨慎操作。
     */
    async OfflineIsolatedInstances(req, cb) {
        return this.request("OfflineIsolatedInstances", req, cb);
    }
    /**
     * 本接口(CreateAuditLogFile)用于创建云数据库实例的审计日志文件。
     */
    async CreateAuditLogFile(req, cb) {
        return this.request("CreateAuditLogFile", req, cb);
    }
    /**
     * 本接口(OpenDBInstanceGTID)用于开启云数据库实例的 GTID，只支持版本为 5.6 以及以上的实例。
     */
    async OpenDBInstanceGTID(req, cb) {
        return this.request("OpenDBInstanceGTID", req, cb);
    }
    /**
     * 本接口(VerifyRootAccount)用于校验云数据库实例的 ROOT 账号是否有足够的权限进行授权操作。
     */
    async VerifyRootAccount(req, cb) {
        return this.request("VerifyRootAccount", req, cb);
    }
    /**
     * 本接口(DescribeRollbackTaskDetail)用于查询云数据库实例回档任务详情。
     */
    async DescribeRollbackTaskDetail(req, cb) {
        return this.request("DescribeRollbackTaskDetail", req, cb);
    }
    /**
     * 本接口（CheckMigrateCluster）用于高可用实例一键迁移到集群版校验。
     */
    async CheckMigrateCluster(req, cb) {
        return this.request("CheckMigrateCluster", req, cb);
    }
    /**
     * 该接口用于修改用户当前地域的备份文件限制下载来源，可以设置内外网均可下载、仅内网可下载，或内网指定的vpc、ip可以下载。
     */
    async ModifyBackupDownloadRestriction(req, cb) {
        return this.request("ModifyBackupDownloadRestriction", req, cb);
    }
    /**
     * 该接口（DescribeParamTemplates）查询参数模板列表，全地域公共参数Region均为ap-guangzhou。
     */
    async DescribeParamTemplates(req, cb) {
        return this.request("DescribeParamTemplates", req, cb);
    }
    /**
     * 本接口(DescribeTasks)用于查询云数据库实例任务列表。
     */
    async DescribeTasks(req, cb) {
        return this.request("DescribeTasks", req, cb);
    }
    /**
     * 本接口(DescribeBackupConfig)用于查询数据库备份配置信息。
     */
    async DescribeBackupConfig(req, cb) {
        return this.request("DescribeBackupConfig", req, cb);
    }
    /**
     * 本接口（OpenDBInstanceEncryption）用于启用实例数据存储加密功能，支持用户指定自定义密钥。

注意，启用实例数据存储加密之前，需要进行以下操作：

1、进行 [实例初始化](https://cloud.tencent.com/document/api/236/15873) 操作；

2、开启 [KMS服务](https://console.cloud.tencent.com/kms2)；

3、对云数据库(MySQL)[授予访问KMS密钥的权限](https://console.cloud.tencent.com/cam/role)，角色名为MySQL_QCSRole，预设策略名为QcloudAccessForMySQLRole；

该 API 耗时可能到10s，客户端可能超时，如果调用 API 返回 InternalError ，请您调用DescribeDBInstanceInfo 确认后端加密是否开通成功。
     */
    async OpenDBInstanceEncryption(req, cb) {
        return this.request("OpenDBInstanceEncryption", req, cb);
    }
    /**
     * 本接口(CloseWanService)用于关闭云数据库实例的外网访问。关闭外网访问后，外网地址将不可访问。
     */
    async CloseWanService(req, cb) {
        return this.request("CloseWanService", req, cb);
    }
    /**
     * 该接口（DescribeDefaultParams）用于查询默认的可设置参数列表。
     */
    async DescribeDefaultParams(req, cb) {
        return this.request("DescribeDefaultParams", req, cb);
    }
    /**
     * 本接口（DescribeAuditPolicies）用于查询云数据库实例的审计策略。
     */
    async DescribeAuditPolicies(req, cb) {
        return this.request("DescribeAuditPolicies", req, cb);
    }
    /**
     * 本接口(DeleteDatabase)用于在云数据库实例中删除数据库。
     */
    async DeleteDatabase(req, cb) {
        return this.request("DeleteDatabase", req, cb);
    }
    /**
     * 本接口(DescribeTagsOfInstanceIds)用于获取云数据库实例的标签信息。
     */
    async DescribeTagsOfInstanceIds(req, cb) {
        return this.request("DescribeTagsOfInstanceIds", req, cb);
    }
    /**
     * 本接口(DescribeDatabases)用于查询云数据库实例的数据库信息，仅支持主实例和灾备实例，不支持只读实例。
     */
    async DescribeDatabases(req, cb) {
        return this.request("DescribeDatabases", req, cb);
    }
    /**
     * 根据检索条件查询实例错误日志详情。只能查询一个月之内的错误日志。
使用时需要注意：可能存在单条错误日志太大，导致整个http请求的回包太大，进而引发接口超时。一旦发生超时，建议您缩小查询时的Limit参数值，从而降低包的大小，让接口能够及时返回内容。
     */
    async DescribeErrorLogData(req, cb) {
        return this.request("DescribeErrorLogData", req, cb);
    }
    /**
     * 该接口 (SwitchDBInstanceMasterSlave) 支持用户主动切换实例主从角色。
     */
    async SwitchDBInstanceMasterSlave(req, cb) {
        return this.request("SwitchDBInstanceMasterSlave", req, cb);
    }
    /**
     * 本接口(CreateDatabase)用于在云数据库实例中创建数据库。
     */
    async CreateDatabase(req, cb) {
        return this.request("CreateDatabase", req, cb);
    }
    /**
     * 本接口(DisassociateSecurityGroups)用于安全组批量解绑实例。
     */
    async DisassociateSecurityGroups(req, cb) {
        return this.request("DisassociateSecurityGroups", req, cb);
    }
    /**
     * 本接口(RenewDBInstance)用于续费云数据库实例，支持付费模式为包年包月的实例。按量计费实例可通过该接口续费为包年包月的实例。
     */
    async RenewDBInstance(req, cb) {
        return this.request("RenewDBInstance", req, cb);
    }
    /**
     * 本接口(DescribeTables)用于查询云数据库实例的数据库表信息，仅支持主实例和灾备实例，不支持只读实例。
     */
    async DescribeTables(req, cb) {
        return this.request("DescribeTables", req, cb);
    }
    /**
     * 本接口(DescribeAccountPrivileges)用于查询云数据库账户支持的权限信息。
     */
    async DescribeAccountPrivileges(req, cb) {
        return this.request("DescribeAccountPrivileges", req, cb);
    }
    /**
     * 本接口(DescribeDataBackupOverview)用于查询用户在当前地域总的数据备份概览。
     */
    async DescribeDataBackupOverview(req, cb) {
        return this.request("DescribeDataBackupOverview", req, cb);
    }
    /**
     * 本接口（ReleaseIsolatedDBInstances）用于恢复已隔离云数据库实例。仅用于按量计费实例的解隔离，包年包月实例的解隔离请使用 RenewDBInstance 。
     */
    async ReleaseIsolatedDBInstances(req, cb) {
        return this.request("ReleaseIsolatedDBInstances", req, cb);
    }
    /**
     * 本接口（CreateCloneInstance）用于从目标源实例创建一个克隆实例，可以指定克隆实例回档到源实例的指定物理备份文件或者指定的回档时间点。
     */
    async CreateCloneInstance(req, cb) {
        return this.request("CreateCloneInstance", req, cb);
    }
    /**
     * 本接口(ModifyAuditConfig)用于修改云数据库审计策略的服务配置，包括审计日志保存时长等。
     */
    async ModifyAuditConfig(req, cb) {
        return this.request("ModifyAuditConfig", req, cb);
    }
    /**
     * 本接口（ModifyInstancePasswordComplexity）用于修改云数据库实例的密码复杂度。
     */
    async ModifyInstancePasswordComplexity(req, cb) {
        return this.request("ModifyInstancePasswordComplexity", req, cb);
    }
    /**
     * 本接口(ModifyTimeWindow)用于更新云数据库实例的维护时间窗口。
     */
    async ModifyTimeWindow(req, cb) {
        return this.request("ModifyTimeWindow", req, cb);
    }
    /**
     * 根据置放群组ID删除置放群组（置放群组中有资源存在时不能删除该置放群组）
     */
    async DeleteDeployGroups(req, cb) {
        return this.request("DeleteDeployGroups", req, cb);
    }
    /**
     * 本接口(SwitchForUpgrade)用于切换访问新实例，针对主升级中的实例处于待切换状态时，用户可主动发起该流程。
     */
    async SwitchForUpgrade(req, cb) {
        return this.request("SwitchForUpgrade", req, cb);
    }
    /**
     * 删除审计规则模板
     */
    async DeleteAuditRuleTemplates(req, cb) {
        return this.request("DeleteAuditRuleTemplates", req, cb);
    }
    /**
     * 本接口(DescribeBackups)用于查询云数据库实例的备份数据。
     */
    async DescribeBackups(req, cb) {
        return this.request("DescribeBackups", req, cb);
    }
    /**
     * 本接口（DescribeCdbProxyInfo）用于查询数据库代理详情信息。
     */
    async DescribeCdbProxyInfo(req, cb) {
        return this.request("DescribeCdbProxyInfo", req, cb);
    }
    /**
     * 该接口（CreateParamTemplate）用于创建参数模板，全地域公共参数 Region 均为 ap-guangzhou。
     */
    async CreateParamTemplate(req, cb) {
        return this.request("CreateParamTemplate", req, cb);
    }
    /**
     * 本接口（CreateDBInstanceHour）用于创建按量计费的实例，可通过传入实例规格、MySQL 版本号和数量等信息创建云数据库实例，支持主实例、灾备实例和只读实例的创建。

该接口为异步接口，您还可以使用 [查询实例列表](https://cloud.tencent.com/document/api/236/15872) 接口查询该实例的详细信息。当该实例的 Status 为 1，且 TaskStatus 为 0，表示实例已经发货成功。

1. 首先请使用 [获取云数据库可售卖规格](https://cloud.tencent.com/document/api/236/17229) 接口查询可创建的实例规格信息，然后请使用 [查询数据库价格](https://cloud.tencent.com/document/api/236/18566) 接口查询可创建实例的售卖价格；
2. 单次创建实例最大支持 100 个，实例时长最大支持 36 个月；
3. 支持创建 MySQL 5.5、MySQL 5.6 、MySQL 5.7 和 MySQL 8.0 版本；
4. 支持创建主实例、灾备实例和只读实例；
     */
    async CreateDBInstanceHour(req, cb) {
        return this.request("CreateDBInstanceHour", req, cb);
    }
    /**
     * 本接口（AddTimeWindow）用于添加云数据库实例的维护时间窗口，以指定实例在哪些时间段可以自动执行切换访问操作。
     */
    async AddTimeWindow(req, cb) {
        return this.request("AddTimeWindow", req, cb);
    }
    /**
     * 查询实例支持代理版本和参数
     */
    async DescribeProxySupportParam(req, cb) {
        return this.request("DescribeProxySupportParam", req, cb);
    }
    /**
     * 该接口用于查询实例本地binlog保留策略。
     */
    async DescribeLocalBinlogConfig(req, cb) {
        return this.request("DescribeLocalBinlogConfig", req, cb);
    }
    /**
     * 本接口（CreateBackup）用于创建数据库备份。
     */
    async CreateBackup(req, cb) {
        return this.request("CreateBackup", req, cb);
    }
    /**
     * 本接口(ModifyDBInstanceVipVport)用于修改云数据库实例的IP和端口号，也可进行基础网络转 VPC 网络和 VPC 网络下的子网变更。
     */
    async ModifyDBInstanceVipVport(req, cb) {
        return this.request("ModifyDBInstanceVipVport", req, cb);
    }
    /**
     * 本接口(DescribeDBInstanceConfig)用于云数据库实例的配置信息，包括同步模式，部署模式等。
     */
    async DescribeDBInstanceConfig(req, cb) {
        return this.request("DescribeDBInstanceConfig", req, cb);
    }
    /**
     * 本接口（CreateCdbProxyAddress）用于数据库代理增加代理地址。
     */
    async CreateCdbProxyAddress(req, cb) {
        return this.request("CreateCdbProxyAddress", req, cb);
    }
    /**
     * 本接口(DeleteAuditPolicy)用于删除用户的审计策略。
     */
    async DeleteAuditPolicy(req, cb) {
        return this.request("DeleteAuditPolicy", req, cb);
    }
    /**
     * 本接口(DescribeProjectSecurityGroups)用于查询项目的安全组详情。
     */
    async DescribeProjectSecurityGroups(req, cb) {
        return this.request("DescribeProjectSecurityGroups", req, cb);
    }
    /**
     * 本接口(DescribeSlowLogs)用于获取云数据库实例的慢查询日志。说明：若单次查询数据量过大，则有可能响应超时，建议缩短单次查询时间范围，如一小时，避免导致超时。
     */
    async DescribeSlowLogs(req, cb) {
        return this.request("DescribeSlowLogs", req, cb);
    }
    /**
     * 本接口(InquiryPriceUpgradeInstances)用于查询云数据库实例升级的价格，支持查询按量计费或者包年包月实例的升级价格，实例类型支持主实例、灾备实例和只读实例。
     */
    async InquiryPriceUpgradeInstances(req, cb) {
        return this.request("InquiryPriceUpgradeInstances", req, cb);
    }
    /**
     * 该接口用于修改实例本地binlog保留策略。
     */
    async ModifyLocalBinlogConfig(req, cb) {
        return this.request("ModifyLocalBinlogConfig", req, cb);
    }
    /**
     * 本接口（CreateDBInstance）用于创建包年包月的云数据库实例（包括主实例、灾备实例和只读实例），可通过传入实例规格、MySQL 版本号、购买时长和数量等信息创建云数据库实例。

该接口为异步接口，您还可以使用 [查询实例列表](https://cloud.tencent.com/document/api/236/15872) 接口查询该实例的详细信息。当该实例的 Status 为1，且 TaskStatus 为0，表示实例已经发货成功。

1. 首先请使用 [获取云数据库可售卖规格](https://cloud.tencent.com/document/api/236/17229) 接口查询可创建的实例规格信息，然后请使用 [查询数据库价格](https://cloud.tencent.com/document/api/236/18566) 接口查询可创建实例的售卖价格；
2. 单次创建实例最大支持 100 个，实例时长最大支持 36 个月；
3. 支持创建 MySQL 5.5 、 MySQL 5.6 、 MySQL 5.7 、 MySQL 8.0 版本；
4. 支持创建主实例、只读实例、灾备实例；
5. 当入参指定 ParamTemplateId 或 AlarmPolicyList 时，需将SDK提升至最新版本方可支持；
     */
    async CreateDBInstance(req, cb) {
        return this.request("CreateDBInstance", req, cb);
    }
    /**
     * 该接口（ModifyParamTemplate）用于修改参数模板，全地域公共参数Region均为ap-guangzhou。
     */
    async ModifyParamTemplate(req, cb) {
        return this.request("ModifyParamTemplate", req, cb);
    }
    /**
     * 该接口（DescribeInstanceParams）用于查询实例的参数列表。
     */
    async DescribeInstanceParams(req, cb) {
        return this.request("DescribeInstanceParams", req, cb);
    }
    /**
     * 本接口(DescribeBackupEncryptionStatus)用于查询实例默认备份加密状态。
     */
    async DescribeBackupEncryptionStatus(req, cb) {
        return this.request("DescribeBackupEncryptionStatus", req, cb);
    }
    /**
     * 查询代理规格配置
     */
    async DescribeProxyCustomConf(req, cb) {
        return this.request("DescribeProxyCustomConf", req, cb);
    }
    /**
     * 本接口(DescribeDeployGroupList)用于查询用户的置放群组列表，可以指定置放群组 ID 或置放群组名称。
     */
    async DescribeDeployGroupList(req, cb) {
        return this.request("DescribeDeployGroupList", req, cb);
    }
    /**
     * 本接口(StopDBImportJob)用于终止数据导入任务。
     */
    async StopDBImportJob(req, cb) {
        return this.request("StopDBImportJob", req, cb);
    }
    /**
     * 本接口（AnalyzeAuditLogs）用于在不同过滤条件下的审计日志结果集中，选定特定的数据列进行聚合统计。
     */
    async AnalyzeAuditLogs(req, cb) {
        return this.request("AnalyzeAuditLogs", req, cb);
    }
    /**
     * 本接口(CreateAccounts)用于创建云数据库的账户，需要指定新的账户名和域名，以及所对应的密码，同时可以设置账号的备注信息以及最大可用连接数。
     */
    async CreateAccounts(req, cb) {
        return this.request("CreateAccounts", req, cb);
    }
    /**
     * 调整数据库代理配置
     */
    async AdjustCdbProxy(req, cb) {
        return this.request("AdjustCdbProxy", req, cb);
    }
    /**
     * 该接口（ModifyProtectMode）用于修改实例的同步方式。
     */
    async ModifyProtectMode(req, cb) {
        return this.request("ModifyProtectMode", req, cb);
    }
    /**
     * 本接口(UpgradeDBInstanceEngineVersion)用于升级云数据库实例版本，实例类型支持主实例、灾备实例和只读实例等。
     */
    async UpgradeDBInstanceEngineVersion(req, cb) {
        return this.request("UpgradeDBInstanceEngineVersion", req, cb);
    }
    /**
     * 本接口（DescribeAuditLogFiles）用于查询云数据库实例的审计日志文件。
     */
    async DescribeAuditLogFiles(req, cb) {
        return this.request("DescribeAuditLogFiles", req, cb);
    }
    /**
     * 本接口（DescribeBackupDecryptionKey）用于查询备份文件解密密钥。
     */
    async DescribeBackupDecryptionKey(req, cb) {
        return this.request("DescribeBackupDecryptionKey", req, cb);
    }
    /**
     * 该接口（DescribeInstanceParamRecords）用于查询实例参数修改历史。
     */
    async DescribeInstanceParamRecords(req, cb) {
        return this.request("DescribeInstanceParamRecords", req, cb);
    }
    /**
     * 本接口(DescribeBackupSummaries)用于查询备份的统计情况，返回以实例为维度的备份占用容量，以及每个实例的数据备份和日志备份的个数和容量（容量单位为字节）。
     */
    async DescribeBackupSummaries(req, cb) {
        return this.request("DescribeBackupSummaries", req, cb);
    }
    /**
     * 该接口（DescribeParamTemplateInfo）用于查询参数模板详情，全地域公共参数Region均为ap-guangzhou。
     */
    async DescribeParamTemplateInfo(req, cb) {
        return this.request("DescribeParamTemplateInfo", req, cb);
    }
    /**
     * 本接口(DescribeBinlogBackupOverview)用于查询用户在当前地域总的日志备份概览。
     */
    async DescribeBinlogBackupOverview(req, cb) {
        return this.request("DescribeBinlogBackupOverview", req, cb);
    }
    /**
     * 本接口（SwitchDrInstanceToMaster）用于将云数据库灾备实例切换为主实例，注意请求必须发到灾备实例所在的地域。
     */
    async SwitchDrInstanceToMaster(req, cb) {
        return this.request("SwitchDrInstanceToMaster", req, cb);
    }
    /**
     * 本接口（DeleteAccounts）用于删除云数据库的账户。
     */
    async DeleteAccounts(req, cb) {
        return this.request("DeleteAccounts", req, cb);
    }
    /**
     * 本接口（DescribeDBInstanceInfo）用于查询实例基本信息（实例 ID，实例名称，是否开通加密）。
     */
    async DescribeDBInstanceInfo(req, cb) {
        return this.request("DescribeDBInstanceInfo", req, cb);
    }
    /**
     * 本接口（DescribeClusterInfo）用于查询集群版实例信息。
     */
    async DescribeClusterInfo(req, cb) {
        return this.request("DescribeClusterInfo", req, cb);
    }
    /**
     * 本接口(DescribeRollbackRangeTime)用于查询云数据库实例可回档的时间范围。
     */
    async DescribeRollbackRangeTime(req, cb) {
        return this.request("DescribeRollbackRangeTime", req, cb);
    }
    /**
     * 请求关闭数据库代理地址
     */
    async CloseCdbProxyAddress(req, cb) {
        return this.request("CloseCdbProxyAddress", req, cb);
    }
    /**
     * 本接口(DeleteBackup)用于删除数据库备份。本接口只支持删除手动发起的备份。
     */
    async DeleteBackup(req, cb) {
        return this.request("DeleteBackup", req, cb);
    }
    /**
     * 本接口(DescribeRoMinScale)用于获取只读实例购买、升级时的最小规格。
     */
    async DescribeRoMinScale(req, cb) {
        return this.request("DescribeRoMinScale", req, cb);
    }
    /**
     * 修改代理地址描述信息
     */
    async ModifyCdbProxyAddressDesc(req, cb) {
        return this.request("ModifyCdbProxyAddressDesc", req, cb);
    }
    /**
     * 本接口(ModifyAccountHost)用于修改云数据库账户的主机。
     */
    async ModifyAccountHost(req, cb) {
        return this.request("ModifyAccountHost", req, cb);
    }
    /**
     * 本接口（StartReplication）用于开启 RO 复制，从主实例同步数据。
     */
    async StartReplication(req, cb) {
        return this.request("StartReplication", req, cb);
    }
    /**
     * 本接口（AdjustCdbProxyAddress）用于调整数据库代理地址配置。
     */
    async AdjustCdbProxyAddress(req, cb) {
        return this.request("AdjustCdbProxyAddress", req, cb);
    }
    /**
     * 本接口（DescribeAuditInstanceList）用于获取审计实例列表。
     */
    async DescribeAuditInstanceList(req, cb) {
        return this.request("DescribeAuditInstanceList", req, cb);
    }
    /**
     * 本接口(DescribeAuditConfig)用于查询云数据库审计策略的服务配置，包括审计日志保存时长等。
     */
    async DescribeAuditConfig(req, cb) {
        return this.request("DescribeAuditConfig", req, cb);
    }
    /**
     * 手动刷新轮转密码
     */
    async ResetPassword(req, cb) {
        return this.request("ResetPassword", req, cb);
    }
    /**
     * 本接口(ModifyInstanceParam)用于修改云数据库实例的参数。
     */
    async ModifyInstanceParam(req, cb) {
        return this.request("ModifyInstanceParam", req, cb);
    }
    /**
     * 本接口（CloseCDBProxy）用于关闭数据库代理。
     */
    async CloseCDBProxy(req, cb) {
        return this.request("CloseCDBProxy", req, cb);
    }
    /**
     * 修改置放群组的名称或者描述
     */
    async ModifyNameOrDescByDpId(req, cb) {
        return this.request("ModifyNameOrDescByDpId", req, cb);
    }
    /**
     * 本接口(ModifyAccountMaxUserConnections)用于修改云数据库账户最大可用连接数。
     */
    async ModifyAccountMaxUserConnections(req, cb) {
        return this.request("ModifyAccountMaxUserConnections", req, cb);
    }
    /**
     * 本接口(DescribeAsyncRequestInfo)用于查询云数据库实例异步任务的执行结果。
     */
    async DescribeAsyncRequestInfo(req, cb) {
        return this.request("DescribeAsyncRequestInfo", req, cb);
    }
    /**
     * 本接口（DescribeAuditLogs）用于查询数据库审计日志。
     */
    async DescribeAuditLogs(req, cb) {
        return this.request("DescribeAuditLogs", req, cb);
    }
    /**
     * 本接口（DescribeDBInstanceRebootTime）用于查询云数据库实例重启预计所需的时间。
     */
    async DescribeDBInstanceRebootTime(req, cb) {
        return this.request("DescribeDBInstanceRebootTime", req, cb);
    }
    /**
     * 本接口（DescribeDBInstances）用于查询云数据库实例列表，支持通过项目 ID、实例 ID、访问地址、实例状态等过滤条件来筛选实例。支持查询主实例、灾备实例和只读实例信息列表。
     */
    async DescribeDBInstances(req, cb) {
        return this.request("DescribeDBInstances", req, cb);
    }
    /**
     * 本接口（ModifyRoGroupInfo）用于更新云数据库只读组的信息。包括设置实例延迟超限剔除策略，设置只读实例读权重，设置复制延迟时间等。
     */
    async ModifyRoGroupInfo(req, cb) {
        return this.request("ModifyRoGroupInfo", req, cb);
    }
    /**
     * 不再支持审计规则创建

本接口(CreateAuditRule)用于创建用户在当前地域的审计规则。
     */
    async CreateAuditRule(req, cb) {
        return this.request("CreateAuditRule", req, cb);
    }
    /**
     * 本接口(DescribeDBInstanceCharset)用于查询云数据库实例的字符集，获取字符集的名称。
     */
    async DescribeDBInstanceCharset(req, cb) {
        return this.request("DescribeDBInstanceCharset", req, cb);
    }
    /**
     * 本接口(AssociateSecurityGroups)用于安全组批量绑定实例。
     */
    async AssociateSecurityGroups(req, cb) {
        return this.request("AssociateSecurityGroups", req, cb);
    }
    /**
     * 本接口（DescribeDBPrice）用于查询购买或续费云数据库实例的价格，支持查询按量计费或者包年包月的价格。可传入实例类型、购买时长、购买数量、内存大小、硬盘大小和可用区信息等来查询实例价格。可传入实例名称来查询实例续费价格。

注意：对某个地域进行询价，请使用对应地域的接入点，接入点信息请参照 <a href="https://cloud.tencent.com/document/api/236/15832">服务地址</a> 文档。例如：对广州地域进行询价，请把请求发到：cdb.ap-guangzhou.tencentcloudapi.com。同理对上海地域询价，把请求发到：cdb.ap-shanghai.tencentcloudapi.com。
     */
    async DescribeDBPrice(req, cb) {
        return this.request("DescribeDBPrice", req, cb);
    }
    /**
     * 本接口(ModifyAccountPrivileges)用于修改云数据库的账户的权限信息。

注意，修改账号权限时，需要传入该账号下的全量权限信息。用户可以先通过 [查询云数据库账户的权限信息
](https://cloud.tencent.com/document/api/236/17500) 查询该账号下的全量权限信息，然后进行权限修改。
     */
    async ModifyAccountPrivileges(req, cb) {
        return this.request("ModifyAccountPrivileges", req, cb);
    }
    /**
     * 本接口(DescribeDBImportRecords)用于查询云数据库导入任务操作日志。
     */
    async DescribeDBImportRecords(req, cb) {
        return this.request("DescribeDBImportRecords", req, cb);
    }
    /**
     * 查询 SSL 开通情况。如果已经开通 SSL ，会同步返回证书下载链接。
     */
    async DescribeSSLStatus(req, cb) {
        return this.request("DescribeSSLStatus", req, cb);
    }
    /**
     * 本接口(DescribeDBSwitchRecords)用于查询云数据库实例切换记录。
     */
    async DescribeDBSwitchRecords(req, cb) {
        return this.request("DescribeDBSwitchRecords", req, cb);
    }
    /**
     * 本接口（CreateRotationPassword）用于开启密码轮转。
     */
    async CreateRotationPassword(req, cb) {
        return this.request("CreateRotationPassword", req, cb);
    }
    /**
     * 本接口（CreateDBImportJob）用于创建云数据库数据导入任务。
注意，用户进行数据导入任务的文件，必须提前上传到腾讯云。用户须在控制台进行文件导入。
     */
    async CreateDBImportJob(req, cb) {
        return this.request("CreateDBImportJob", req, cb);
    }
    /**
     * 本接口（DescribeAccounts）用于查询云数据库的所有账户信息。
     */
    async DescribeAccounts(req, cb) {
        return this.request("DescribeAccounts", req, cb);
    }
    /**
     * DescribeCpuExpandStrategy

通过该 API 可以查询实例的 CPU 弹性扩容策略
     */
    async DescribeCpuExpandStrategy(req, cb) {
        return this.request("DescribeCpuExpandStrategy", req, cb);
    }
    /**
     * 重新负载均衡数据库代理
     */
    async ReloadBalanceProxyNode(req, cb) {
        return this.request("ReloadBalanceProxyNode", req, cb);
    }
    /**
     * 本接口(ModifyBackupEncryptionStatus)用于设置实例备份文件是否加密。
     */
    async ModifyBackupEncryptionStatus(req, cb) {
        return this.request("ModifyBackupEncryptionStatus", req, cb);
    }
    /**
     * 该接口用户查询当前地域用户设置的默认备份下载来源限制。
     */
    async DescribeBackupDownloadRestriction(req, cb) {
        return this.request("DescribeBackupDownloadRestriction", req, cb);
    }
    /**
     * 重置实例ROOT账号，初始化账号权限
     */
    async ResetRootAccount(req, cb) {
        return this.request("ResetRootAccount", req, cb);
    }
    /**
     * 修改审计规则模板
     */
    async ModifyAuditRuleTemplates(req, cb) {
        return this.request("ModifyAuditRuleTemplates", req, cb);
    }
    /**
     * 该接口（SubmitInstanceUpgradeCheckJob）提交实例版本升级校验任务。
     */
    async SubmitInstanceUpgradeCheckJob(req, cb) {
        return this.request("SubmitInstanceUpgradeCheckJob", req, cb);
    }
    /**
     * 本接口（DeleteRotationPassword）用于关闭实例账户密码轮转。
     */
    async DeleteRotationPassword(req, cb) {
        return this.request("DeleteRotationPassword", req, cb);
    }
    /**
     * 本接口(ModifyAccountPassword)用于修改云数据库账户的密码。
     */
    async ModifyAccountPassword(req, cb) {
        return this.request("ModifyAccountPassword", req, cb);
    }
    /**
     * 本接口(DescribeUploadedFiles)用于查询用户导入的SQL文件列表，全地域公共参数Region均为ap-shanghai。
     */
    async DescribeUploadedFiles(req, cb) {
        return this.request("DescribeUploadedFiles", req, cb);
    }
    /**
     * 本接口(ModifyAccountDescription)用于修改云数据库账户的备注信息。
     */
    async ModifyAccountDescription(req, cb) {
        return this.request("ModifyAccountDescription", req, cb);
    }
    /**
     * 本接口（DescribeSlowLogData）用于使用条件检索实例的慢日志。只允许查看一个月之内的慢日志。
使用时需要注意：可能存在单条慢日志太大，导致整个http请求的回包太大，进而引发接口超时。一旦发生超时，建议您缩小查询时的Limit参数值，从而降低包的大小，让接口能够及时返回内容。
     */
    async DescribeSlowLogData(req, cb) {
        return this.request("DescribeSlowLogData", req, cb);
    }
    /**
     * CDB实例开通审计服务
     */
    async OpenAuditService(req, cb) {
        return this.request("OpenAuditService", req, cb);
    }
    /**
     * 本接口(DeleteAuditLogFile)用于删除云数据库实例的审计日志文件。
     */
    async DeleteAuditLogFile(req, cb) {
        return this.request("DeleteAuditLogFile", req, cb);
    }
    /**
     * 本接口（DescribeAuditRuleTemplates）用于查询审计规则模板信息。
     */
    async DescribeAuditRuleTemplates(req, cb) {
        return this.request("DescribeAuditRuleTemplates", req, cb);
    }
    /**
     * 本接口(ModifyBackupConfig)用于修改数据库备份配置信息。
     */
    async ModifyBackupConfig(req, cb) {
        return this.request("ModifyBackupConfig", req, cb);
    }
    /**
     * 不再支持审计规则创建

本接口(DescribeAuditRules)用于查询用户在当前地域的审计规则。
     */
    async DescribeAuditRules(req, cb) {
        return this.request("DescribeAuditRules", req, cb);
    }
    /**
     * 本接口(DescribeRemoteBackupConfig)用于查询数据库异地备份配置信息。
     */
    async DescribeRemoteBackupConfig(req, cb) {
        return this.request("DescribeRemoteBackupConfig", req, cb);
    }
    /**
     * 修改数据库代理地址VPC信息
     */
    async ModifyCdbProxyAddressVipAndVPort(req, cb) {
        return this.request("ModifyCdbProxyAddressVipAndVPort", req, cb);
    }
    /**
     * 本接口(ModifyDBInstanceProject)用于修改云数据库实例的所属项目。
     */
    async ModifyDBInstanceProject(req, cb) {
        return this.request("ModifyDBInstanceProject", req, cb);
    }
    /**
     * 本接口(DescribeDBInstanceLogToCLS)用于查询实例慢日志、错误日志投递CLS的配置，通过AppId、Region以及实例ID过滤出当前实例日志投递CLS的配置。
     */
    async DescribeDBInstanceLogToCLS(req, cb) {
        return this.request("DescribeDBInstanceLogToCLS", req, cb);
    }
    /**
     * 本接口（DescribeAuditRuleTemplateModifyHistory）用于查询规则模板变更记录。
     */
    async DescribeAuditRuleTemplateModifyHistory(req, cb) {
        return this.request("DescribeAuditRuleTemplateModifyHistory", req, cb);
    }
    /**
     * 本接口（CreateCdbProxy）用于主实例创建数据库代理。
     */
    async CreateCdbProxy(req, cb) {
        return this.request("CreateCdbProxy", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceReadOnlyStatus）用户设置MySQL云数据库实例为只读
     */
    async ModifyDBInstanceReadOnlyStatus(req, cb) {
        return this.request("ModifyDBInstanceReadOnlyStatus", req, cb);
    }
    /**
     * 本接口（ModifyAutoRenewFlag）用于修改云数据库实例的自动续费标记。仅支持包年包月的实例设置自动续费标记。
     */
    async ModifyAutoRenewFlag(req, cb) {
        return this.request("ModifyAutoRenewFlag", req, cb);
    }
    /**
     * 数据库代理配置变更或则升级版本后手动发起立即切换
     */
    async SwitchCDBProxy(req, cb) {
        return this.request("SwitchCDBProxy", req, cb);
    }
    /**
     * 本接口(ModifyAuditService)用于修改云数据库审计日志保存时长、审计规则等服务配置
     */
    async ModifyAuditService(req, cb) {
        return this.request("ModifyAuditService", req, cb);
    }
    /**
     * 配置数据库代理参数
     */
    async ModifyCdbProxyParam(req, cb) {
        return this.request("ModifyCdbProxyParam", req, cb);
    }
    /**
     * 该接口（StartBatchRollback）用于批量回档云数据库实例的库表。
     */
    async StartBatchRollback(req, cb) {
        return this.request("StartBatchRollback", req, cb);
    }
    /**
     * 本接口（DescribeDeviceMonitorInfo）用于查询云数据库物理机当天的监控信息，暂只支持内存488G、硬盘6T的实例查询。
     */
    async DescribeDeviceMonitorInfo(req, cb) {
        return this.request("DescribeDeviceMonitorInfo", req, cb);
    }
    /**
     * 本接口(OpenWanService)用于开通实例外网访问。

注意，实例开通外网访问之前，需要先将实例进行 [实例初始化](https://cloud.tencent.com/document/api/236/15873) 操作。
     */
    async OpenWanService(req, cb) {
        return this.request("OpenWanService", req, cb);
    }
    /**
     * 不再支持审计规则创建

本接口(ModifyAuditRule)用于修改用户的审计规则。
     */
    async ModifyAuditRule(req, cb) {
        return this.request("ModifyAuditRule", req, cb);
    }
    /**
     * 本接口(ModifyDBInstanceSecurityGroups)用于修改实例绑定的安全组。
     */
    async ModifyDBInstanceSecurityGroups(req, cb) {
        return this.request("ModifyDBInstanceSecurityGroups", req, cb);
    }
    /**
     * 不再支持审计规则创建

本接口(DeleteAuditRule)用于删除用户的审计规则。
     */
    async DeleteAuditRule(req, cb) {
        return this.request("DeleteAuditRule", req, cb);
    }
    /**
     * 通过该API，可以开启CPU弹性扩容，包括一次性的手动扩容以及自动弹性扩容。
     */
    async StartCpuExpand(req, cb) {
        return this.request("StartCpuExpand", req, cb);
    }
    /**
     * 本接口(DescribeSupportedPrivileges)用于查询云数据库的支持的权限信息，包括全局权限，数据库权限，表权限以及列权限。
     */
    async DescribeSupportedPrivileges(req, cb) {
        return this.request("DescribeSupportedPrivileges", req, cb);
    }
    /**
     * 该接口（DeleteParamTemplate）用于删除参数模板，全地域公共参数 Region 均为 ap-guangzhou。
     */
    async DeleteParamTemplate(req, cb) {
        return this.request("DeleteParamTemplate", req, cb);
    }
    /**
     * 升级数据库代理版本
     */
    async UpgradeCDBProxyVersion(req, cb) {
        return this.request("UpgradeCDBProxyVersion", req, cb);
    }
    /**
     * 本接口(DescribeBinlogs)用于查询云数据库实例的 binlog 文件列表。
     */
    async DescribeBinlogs(req, cb) {
        return this.request("DescribeBinlogs", req, cb);
    }
    /**
     * 本接口(DescribeDBSecurityGroups)用于查询实例的安全组详情。
     */
    async DescribeDBSecurityGroups(req, cb) {
        return this.request("DescribeDBSecurityGroups", req, cb);
    }
    /**
     * 本接口（DescribeRoGroups）用于查询云数据库实例的所有的 RO 组的信息。
     */
    async DescribeRoGroups(req, cb) {
        return this.request("DescribeRoGroups", req, cb);
    }
    /**
     * 本接口（DescribeCloneList）用于查询用户实例的克隆任务列表。
     */
    async DescribeCloneList(req, cb) {
        return this.request("DescribeCloneList", req, cb);
    }
    /**
     * 本接口（DescribeInstanceAlarmEvents）用于查询实例发生的事件信息。
     */
    async DescribeInstanceAlarmEvents(req, cb) {
        return this.request("DescribeInstanceAlarmEvents", req, cb);
    }
    /**
     * 本接口(UpgradeDBInstance)用于升级或降级云数据库实例的配置，实例类型支持主实例、灾备实例和只读实例。如果进行迁移业务，请一定填写实例规格（CPU、内存），不然系统会默认以最小允许规格传参。
     */
    async UpgradeDBInstance(req, cb) {
        return this.request("UpgradeDBInstance", req, cb);
    }
    /**
     * 关闭SSL连接功能。
     */
    async CloseSSL(req, cb) {
        return this.request("CloseSSL", req, cb);
    }
    /**
     * 本接口（CreateDeployGroup）用于创建放置实例的置放群组。
     */
    async CreateDeployGroup(req, cb) {
        return this.request("CreateDeployGroup", req, cb);
    }
    /**
     * 本接口(ModifyRemoteBackupConfig)用于修改数据库异地备份配置信息。
     */
    async ModifyRemoteBackupConfig(req, cb) {
        return this.request("ModifyRemoteBackupConfig", req, cb);
    }
    /**
     * 本接口(DeleteTimeWindow)用于删除云数据库实例的维护时间窗口。删除实例维护时间窗口之后，默认的维护时间窗为 03:00-04:00，即当选择在维护时间窗口内切换访问新实例时，默认会在 03:00-04:00 点进行切换访问新实例。
     */
    async DeleteTimeWindow(req, cb) {
        return this.request("DeleteTimeWindow", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248750, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cdc = void 0;
const v20201214_1 = require("./v20201214");
exports.cdc = {
    v20201214: v20201214_1.v20201214,
};

}, function(modId) { var map = {"./v20201214":1738984248751}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248751, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201214 = void 0;
const Models = require("./cdc_models");
const cdc_client_1 = require("./cdc_client");
exports.v20201214 = {
    Client: cdc_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cdc_models":1738984248752,"./cdc_client":1738984248753}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248752, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248753, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cdc client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cdc.tencentcloudapi.com", "2020-12-14", clientConfig);
    }
    /**
     * 修改机房设备信息
     */
    async ModifySiteDeviceInfo(req, cb) {
        return this.request("ModifySiteDeviceInfo", req, cb);
    }
    /**
     * 创建专用集群订单
     */
    async CreateDedicatedClusterOrder(req, cb) {
        return this.request("CreateDedicatedClusterOrder", req, cb);
    }
    /**
     * 删除专用集群
     */
    async DeleteDedicatedClusters(req, cb) {
        return this.request("DeleteDedicatedClusters", req, cb);
    }
    /**
     * 修改机房信息
     */
    async ModifySiteInfo(req, cb) {
        return this.request("ModifySiteInfo", req, cb);
    }
    /**
     * 查询专用集群内宿主机的统计信息
     */
    async DescribeDedicatedClusterHostStatistics(req, cb) {
        return this.request("DescribeDedicatedClusterHostStatistics", req, cb);
    }
    /**
     * 修改本地专用集群信息
     */
    async ModifyDedicatedClusterInfo(req, cb) {
        return this.request("ModifyDedicatedClusterInfo", req, cb);
    }
    /**
     * 查询站点列表
     */
    async DescribeSites(req, cb) {
        return this.request("DescribeSites", req, cb);
    }
    /**
     * 查询专用集群订单列表
     */
    async DescribeDedicatedClusterOrders(req, cb) {
        return this.request("DescribeDedicatedClusterOrders", req, cb);
    }
    /**
     * 修改大订单、小订单的状态
     */
    async ModifyOrderStatus(req, cb) {
        return this.request("ModifyOrderStatus", req, cb);
    }
    /**
     * 创建专用集群
     */
    async CreateDedicatedCluster(req, cb) {
        return this.request("CreateDedicatedCluster", req, cb);
    }
    /**
     * 查询专用集群列表
     */
    async DescribeDedicatedClusters(req, cb) {
        return this.request("DescribeDedicatedClusters", req, cb);
    }
    /**
     * 查询专用集群宿主机信息
     */
    async DescribeDedicatedClusterHosts(req, cb) {
        return this.request("DescribeDedicatedClusterHosts", req, cb);
    }
    /**
     * 查询专用集群支持的可用区列表
     */
    async DescribeDedicatedSupportedZones(req, cb) {
        return this.request("DescribeDedicatedSupportedZones", req, cb);
    }
    /**
     * 查询本地专用集群云硬盘仓库信息
     */
    async DescribeDedicatedClusterCbsStatistics(req, cb) {
        return this.request("DescribeDedicatedClusterCbsStatistics", req, cb);
    }
    /**
     * 查询专用集群概览信息
     */
    async DescribeDedicatedClusterOverview(req, cb) {
        return this.request("DescribeDedicatedClusterOverview", req, cb);
    }
    /**
     * 删除站点
     */
    async DeleteSites(req, cb) {
        return this.request("DeleteSites", req, cb);
    }
    /**
     * 查询站点详情
     */
    async DescribeSitesDetail(req, cb) {
        return this.request("DescribeSitesDetail", req, cb);
    }
    /**
     * 查询专用集群内cos的容量信息
     */
    async DescribeDedicatedClusterCosCapacity(req, cb) {
        return this.request("DescribeDedicatedClusterCosCapacity", req, cb);
    }
    /**
     * 查询专用集群支持的实例规格列表
     */
    async DescribeDedicatedClusterInstanceTypes(req, cb) {
        return this.request("DescribeDedicatedClusterInstanceTypes", req, cb);
    }
    /**
     * 查询专有集群配置列表
     */
    async DescribeDedicatedClusterTypes(req, cb) {
        return this.request("DescribeDedicatedClusterTypes", req, cb);
    }
    /**
     * 创建站点
     */
    async CreateSite(req, cb) {
        return this.request("CreateSite", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248754, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cdn = void 0;
const v20180606_1 = require("./v20180606");
exports.cdn = {
    v20180606: v20180606_1.v20180606,
};

}, function(modId) { var map = {"./v20180606":1738984248755}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248755, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180606 = void 0;
const Models = require("./cdn_models");
const cdn_client_1 = require("./cdn_client");
exports.v20180606 = {
    Client: cdn_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cdn_models":1738984248756,"./cdn_client":1738984248757}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248756, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248757, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cdn client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cdn.tencentcloudapi.com", "2018-06-06", clientConfig);
    }
    /**
     * AddCLSTopicDomains 用于新增域名到某日志主题下
     */
    async AddCLSTopicDomains(req, cb) {
        return this.request("AddCLSTopicDomains", req, cb);
    }
    /**
     * ModifyDomainConfig 用于修改内容分发网络加速域名配置信息
注意：
Route 字段，使用点分隔，最后一段称为叶子节点，非叶子节点配置保持不变；
Value 字段，使用 json 进行序列化，其中固定 update 作为 key，配置路径值参考 https://cloud.tencent.com/document/product/228/41116 接口各配置项复杂类型，为配置路径对应复杂类型下的节点。
操作审计相关：接口的入参可能包含密钥等敏感信息，所以此接口的入参不会上报到操作审计。
     */
    async ModifyDomainConfig(req, cb) {
        return this.request("ModifyDomainConfig", req, cb);
    }
    /**
     * DescribeIpStatus 用于查询域名所在加速平台的边缘节点、回源节点明细。注意事项：暂不支持查询边缘节点信息并且数据会存在一定延迟。

>?  若您的业务已迁移至 CDN 控制台，请参考<a href="https://cloud.tencent.com/document/api/228/41954"> CDN 接口文档</a>，使用  CDN 相关API 进行操作。
     */
    async DescribeIpStatus(req, cb) {
        return this.request("DescribeIpStatus", req, cb);
    }
    /**
     * DescribeMapInfo 用于查询省份对应的 ID，运营商对应的 ID 信息。
     */
    async DescribeMapInfo(req, cb) {
        return this.request("DescribeMapInfo", req, cb);
    }
    /**
     * DeleteCdnDomain 用于删除指定加速域名
     */
    async DeleteCdnDomain(req, cb) {
        return this.request("DeleteCdnDomain", req, cb);
    }
    /**
     * VerifyDomainRecord 用于验证域名解析值。
验证域名解析记录值前，您需要通过 [CreateVerifyRecord](https://cloud.tencent.com/document/product/228/48118) 生成校验解析值，验证通过后，24小时有效。
具体流程可参考：[使用API接口进行域名归属校验](https://cloud.tencent.com/document/product/228/61702#.E6.96.B9.E6.B3.95.E4.B8.89.EF.BC.9Aapi-.E6.8E.A5.E5.8F.A3.E6.93.8D.E4.BD.9C)
     */
    async VerifyDomainRecord(req, cb) {
        return this.request("VerifyDomainRecord", req, cb);
    }
    /**
     * 获取Waf攻击Top数据
     */
    async ListTopWafData(req, cb) {
        return this.request("ListTopWafData", req, cb);
    }
    /**
     * DescribeEdgePackTaskStatus 用于查询动态打包任务状态列表
     */
    async DescribeEdgePackTaskStatus(req, cb) {
        return this.request("DescribeEdgePackTaskStatus", req, cb);
    }
    /**
     * 删除SCDN域名
     */
    async DeleteScdnDomain(req, cb) {
        return this.request("DeleteScdnDomain", req, cb);
    }
    /**
     * DescribePayType 用于查询用户的计费类型，计费周期等信息。
     */
    async DescribePayType(req, cb) {
        return this.request("DescribePayType", req, cb);
    }
    /**
     * DescribeDomainsConfig 用于查询内容分发网络加速域名（含境内、境外）的所有配置信息。
     */
    async DescribeDomainsConfig(req, cb) {
        return this.request("DescribeDomainsConfig", req, cb);
    }
    /**
     * AddCdnDomain 用于新增内容分发网络加速域名。1分钟内最多可新增100个域名。
     */
    async AddCdnDomain(req, cb) {
        return this.request("AddCdnDomain", req, cb);
    }
    /**
     * ### <font color=red>**该接口已废弃** </font><br>
GetDisableRecords 用于查询资源禁用历史，及 URL 当前状态。
     */
    async GetDisableRecords(req, cb) {
        return this.request("GetDisableRecords", req, cb);
    }
    /**
     * DescribeIpVisit 用于查询 5 分钟活跃用户数，及日活跃用户数明细

+ 5 分钟活跃用户数：根据日志中客户端 IP，5 分钟粒度去重统计
+ 日活跃用户数：根据日志中客户端 IP，按天粒度去重统计
     */
    async DescribeIpVisit(req, cb) {
        return this.request("DescribeIpVisit", req, cb);
    }
    /**
     * DescribeCdnData 用于查询 CDN 实时访问监控数据，支持以下指标查询：

+ 流量（单位为 byte）
+ 带宽（单位为 bps）
+ 请求数（单位为 次）
+ 命中请求数（单位为 次）
+ 请求命中率（单位为 %）
+ 命中流量（单位为 byte）
+ 流量命中率（单位为 %）
+ 状态码 2xx 汇总及各 2 开头状态码明细（单位为 个）
+ 状态码 3xx 汇总及各 3 开头状态码明细（单位为 个）
+ 状态码 4xx 汇总及各 4 开头状态码明细（单位为 个）
+ 状态码 5xx 汇总及各 5 开头状态码明细（单位为 个）
     */
    async DescribeCdnData(req, cb) {
        return this.request("DescribeCdnData", req, cb);
    }
    /**
     * DescribeHttpsPackages 用于查询 CDN HTTPS请求包详情。
     */
    async DescribeHttpsPackages(req, cb) {
        return this.request("DescribeHttpsPackages", req, cb);
    }
    /**
     * 动态打包任务提交接口
     */
    async CreateEdgePackTask(req, cb) {
        return this.request("CreateEdgePackTask", req, cb);
    }
    /**
     * CreateVerifyRecord 用于生成一条子域名解析，提示客户添加到域名解析上，用于泛域名及域名取回校验归属权。
生成的解析记录可通过 [VerifyDomainRecord](https://cloud.tencent.com/document/product/228/48117) 完成归属权校验。
注意：生成的解析记录有效期为24小时，超过24小时后，需重新生成。
具体流程可参考：[使用API接口进行域名归属校验](https://cloud.tencent.com/document/product/228/61702#.E6.96.B9.E6.B3.95.E4.B8.89.EF.BC.9Aapi-.E6.8E.A5.E5.8F.A3.E6.93.8D.E4.BD.9C)
     */
    async CreateVerifyRecord(req, cb) {
        return this.request("CreateVerifyRecord", req, cb);
    }
    /**
     * CC统计数据查询
     */
    async DescribeCcData(req, cb) {
        return this.request("DescribeCcData", req, cb);
    }
    /**
     * ManageClsTopicDomains 用于管理某日志主题下绑定的域名列表。
     */
    async ManageClsTopicDomains(req, cb) {
        return this.request("ManageClsTopicDomains", req, cb);
    }
    /**
     * ### <font color=red>**该接口已废弃** </font><br>
CreateDiagnoseUrl 用于添加域名诊断任务URL。
     */
    async CreateDiagnoseUrl(req, cb) {
        return this.request("CreateDiagnoseUrl", req, cb);
    }
    /**
     * StartCdnDomain 用于启用已停用域名的加速服务
     */
    async StartCdnDomain(req, cb) {
        return this.request("StartCdnDomain", req, cb);
    }
    /**
     * 拷贝参考域名的配置至新域名。暂不支持自有证书以及定制化配置
     */
    async DuplicateDomainConfig(req, cb) {
        return this.request("DuplicateDomainConfig", req, cb);
    }
    /**
     * StopScdnDomain 用于关闭域名的安全防护配置
     */
    async StopScdnDomain(req, cb) {
        return this.request("StopScdnDomain", req, cb);
    }
    /**
     * ### <font color=red>**该接口已废弃** </font><br>
DescribeDiagnoseReport 用于获取指定报告id的内容。
     */
    async DescribeDiagnoseReport(req, cb) {
        return this.request("DescribeDiagnoseReport", req, cb);
    }
    /**
     * DDoS统计数据查询
     */
    async DescribeDDoSData(req, cb) {
        return this.request("DescribeDDoSData", req, cb);
    }
    /**
     * ### <font color=red>**该接口已废弃** </font><br>
DisableCaches 用于禁用 CDN 上指定 URL 的访问，禁用完成后，中国境内访问会直接返回 403。
     */
    async DisableCaches(req, cb) {
        return this.request("DisableCaches", req, cb);
    }
    /**
     * ### <font color=red>**该接口已废弃** </font><br>
ListDiagnoseReport 用于获取用户诊断URL访问后各个子任务的简要详情。
     */
    async ListDiagnoseReport(req, cb) {
        return this.request("ListDiagnoseReport", req, cb);
    }
    /**
     * 获取CC攻击Top数据
     */
    async ListTopCcData(req, cb) {
        return this.request("ListTopCcData", req, cb);
    }
    /**
     * 查询在SCDN IP安全策略
     */
    async DescribeScdnIpStrategy(req, cb) {
        return this.request("DescribeScdnIpStrategy", req, cb);
    }
    /**
     * DescribePurgeQuota 用于查询账户刷新配额和每日可用量。
     */
    async DescribePurgeQuota(req, cb) {
        return this.request("DescribePurgeQuota", req, cb);
    }
    /**
     * UpdateScdnDomain 用于修改 SCDN 加速域名安全相关配置
     */
    async UpdateScdnDomain(req, cb) {
        return this.request("UpdateScdnDomain", req, cb);
    }
    /**
     * ListScdnLogTasks 用于查询SCDN日志下载任务列表,以及展示下载任务基本信息
     */
    async ListScdnLogTasks(req, cb) {
        return this.request("ListScdnLogTasks", req, cb);
    }
    /**
     * 获取Bot攻击的Top信息
     */
    async ListTopBotData(req, cb) {
        return this.request("ListTopBotData", req, cb);
    }
    /**
     * CreateScdnLogTask 用于创建事件日志任务
     */
    async CreateScdnLogTask(req, cb) {
        return this.request("CreateScdnLogTask", req, cb);
    }
    /**
     * DescribeImageConfig 用于获取域名图片优化的当前配置，支持Webp、TPG、 Guetzli 和 Avif。
     */
    async DescribeImageConfig(req, cb) {
        return this.request("DescribeImageConfig", req, cb);
    }
    /**
     * 获取SCDN的Top数据
     */
    async DescribeScdnTopData(req, cb) {
        return this.request("DescribeScdnTopData", req, cb);
    }
    /**
     * SearchClsLog 用于 CLS 日志检索。支持检索今天，24小时（可选近7中的某一天），近7天的日志数据。
     */
    async SearchClsLog(req, cb) {
        return this.request("SearchClsLog", req, cb);
    }
    /**
     * StopCdnDomain 用于停止域名的加速服务。
注意：停止加速服务后，访问至加速节点的请求将会直接返回 404。为避免对您的业务造成影响，请在停止加速服务前将解析切走。
     */
    async StopCdnDomain(req, cb) {
        return this.request("StopCdnDomain", req, cb);
    }
    /**
     * ListTopData 通过入参 Metric 和 Filter 组合不同，可以查询以下排序数据：

+ 依据总流量、总请求数对访问 URL 排序，从大至小返回 TOP 1000 URL
+ 依据总流量、总请求数对客户端省份排序，从大至小返回省份列表
+ 依据总流量、总请求数对客户端运营商排序，从大至小返回运营商列表
+ 依据总流量、峰值带宽、总请求数、平均命中率、2XX/3XX/4XX/5XX 状态码对域名排序，从大至小返回域名列表
+ 依据总回源流量、回源峰值带宽、总回源请求数、平均回源失败率、2XX/3XX/4XX/5XX 回源状态码对域名排序，从大至小返回域名列表

注意：仅支持 90 天内数据查询
     */
    async ListTopData(req, cb) {
        return this.request("ListTopData", req, cb);
    }
    /**
     * DescribeOriginData 用于查询 CDN 实时回源监控数据，支持以下指标查询：

+ 回源流量（单位为 byte）
+ 回源带宽（单位为 bps）
+ 回源请求数（单位为 次）
+ 回源失败请求数（单位为 次）
+ 回源失败率（单位为 %，小数点后保留两位）
+ 回源状态码 2xx 汇总及各 2 开头回源状态码明细（单位为 个）
+ 回源状态码 3xx 汇总及各 3 开头回源状态码明细（单位为 个）
+ 回源状态码 4xx 汇总及各 4 开头回源状态码明细（单位为 个）
+ 回源状态码 5xx 汇总及各 5 开头回源状态码明细（单位为 个）
     */
    async DescribeOriginData(req, cb) {
        return this.request("DescribeOriginData", req, cb);
    }
    /**
     * DescribeCdnIp 用于查询 CDN IP 归属。
（注意：此接口请求频率限制以 CDN 侧限制为准：200次/10分钟）
     */
    async DescribeCdnIp(req, cb) {
        return this.request("DescribeCdnIp", req, cb);
    }
    /**
     * StartScdnDomain 用于开启域名的安全防护配置
     */
    async StartScdnDomain(req, cb) {
        return this.request("StartScdnDomain", req, cb);
    }
    /**
     * PurgePathCache 用于批量提交目录刷新，根据域名的加速区域进行对应区域的刷新。
默认情况下境内、境外加速区域每日目录刷新额度为各 100 条，每次最多可提交 500 条。
     */
    async PurgePathCache(req, cb) {
        return this.request("PurgePathCache", req, cb);
    }
    /**
     * DescribePurgeTasks 用于查询提交的 URL 刷新、目录刷新记录及执行进度，通过 PurgePathCache 与 PurgeUrlsCache 接口提交的任务均可通过此接口进行查询。
     */
    async DescribePurgeTasks(req, cb) {
        return this.request("DescribePurgeTasks", req, cb);
    }
    /**
     * 通过CLS日志计算Top信息。支持近7天的日志数据。
     */
    async ListTopClsLogData(req, cb) {
        return this.request("ListTopClsLogData", req, cb);
    }
    /**
     * DescribeUrlViolations 用于查询被 CDN 系统扫描到的域名违规 URL 列表及当前状态。
对应内容分发网络控制台【图片鉴黄】页面。
     */
    async DescribeUrlViolations(req, cb) {
        return this.request("DescribeUrlViolations", req, cb);
    }
    /**
     * Waf统计数据查询
     */
    async DescribeWafData(req, cb) {
        return this.request("DescribeWafData", req, cb);
    }
    /**
     * 获取DDoS攻击Top数据
     */
    async ListTopDDoSData(req, cb) {
        return this.request("ListTopDDoSData", req, cb);
    }
    /**
     * DescribeDomains 用于查询内容分发网络加速域名（含境内、境外）基本配置信息，包括项目ID、服务状态，业务类型、创建时间、更新时间等信息。
     */
    async DescribeDomains(req, cb) {
        return this.request("DescribeDomains", req, cb);
    }
    /**
     * PurgeUrlsCache 用于批量提交 URL 进行刷新，根据 URL 中域名的当前加速区域进行对应区域的刷新。
默认情况下境内、境外加速区域每日 URL 刷新额度各为 10000 条，每次最多可提交 1000 条。
     */
    async PurgeUrlsCache(req, cb) {
        return this.request("PurgeUrlsCache", req, cb);
    }
    /**
     * DescribeTrafficPackages 用于查询 CDN 流量包详情。
     */
    async DescribeTrafficPackages(req, cb) {
        return this.request("DescribeTrafficPackages", req, cb);
    }
    /**
     * UpdateDomainConfig 用于修改内容分发网络加速域名配置信息。
注意：如果需要更新复杂类型的配置项，必须传递整个对象的所有属性，未传递的属性将使用默认值，建议通过查询接口获取配置属性后，直接修改后传递给本接口。
操作审计相关：接口的入参可能包含密钥等敏感信息，所以此接口的入参不会上报到操作审计。
     */
    async UpdateDomainConfig(req, cb) {
        return this.request("UpdateDomainConfig", req, cb);
    }
    /**
     * DescribeCdnDomainLogs 用于查询访问日志下载地址，仅支持 30 天以内的境内、境外访问日志下载链接查询。
     */
    async DescribeCdnDomainLogs(req, cb) {
        return this.request("DescribeCdnDomainLogs", req, cb);
    }
    /**
     * DescribePushTasks  用于查询预热任务提交历史记录及执行进度。
     */
    async DescribePushTasks(req, cb) {
        return this.request("DescribePushTasks", req, cb);
    }
    /**
     * DescribeCertDomains 用于校验SSL证书并提取证书中包含的域名。
     */
    async DescribeCertDomains(req, cb) {
        return this.request("DescribeCertDomains", req, cb);
    }
    /**
     * DescribeEventLogData 用于查询事件日志统计曲线
     */
    async DescribeEventLogData(req, cb) {
        return this.request("DescribeEventLogData", req, cb);
    }
    /**
     * CreateClsLogTopic 用于创建日志主题。注意：一个日志集下至多可创建10个日志主题。
     */
    async CreateClsLogTopic(req, cb) {
        return this.request("CreateClsLogTopic", req, cb);
    }
    /**
     * PushUrlsCache 用于将指定 URL 资源列表加载至 CDN 节点，支持指定加速区域预热。
默认情况下境内、境外每日预热 URL 限额为各 1000 条，每次最多可提交 500 条 URL，每次提交的数量会消耗配额总数。如：1次提交500条URL全球预热，此时境内、境外预热 URL 各剩余 500条。注意：中国境外区域预热，资源默认加载至中国境外边缘节点。
     */
    async PushUrlsCache(req, cb) {
        return this.request("PushUrlsCache", req, cb);
    }
    /**
     * CreateScdnDomain 用于创建 SCDN 加速域名
     */
    async CreateScdnDomain(req, cb) {
        return this.request("CreateScdnDomain", req, cb);
    }
    /**
     * UpdateImageConfig 用于更新控制台图片优化的相关配置，支持Webp、TPG、 Guetzli 和 Avif。
     */
    async UpdateImageConfig(req, cb) {
        return this.request("UpdateImageConfig", req, cb);
    }
    /**
     * ModifyPurgeFetchTaskStatus 用于上报定时刷新预热任务执行状态
     */
    async ModifyPurgeFetchTaskStatus(req, cb) {
        return this.request("ModifyPurgeFetchTaskStatus", req, cb);
    }
    /**
     * CreateScdnFailedLogTask 用于重试创建失败的事件日志任务
     */
    async CreateScdnFailedLogTask(req, cb) {
        return this.request("CreateScdnFailedLogTask", req, cb);
    }
    /**
     * DisableClsLogTopic 用于停止日志主题投递。注意：停止后，所有绑定该日志主题域名的日志将不再继续投递至该主题，已经投递的日志将会继续保留。生效时间约为 5~15 分钟。

     */
    async DisableClsLogTopic(req, cb) {
        return this.request("DisableClsLogTopic", req, cb);
    }
    /**
     * ListClsTopicDomains 用于获取某日志主题下绑定的域名列表。
     */
    async ListClsTopicDomains(req, cb) {
        return this.request("ListClsTopicDomains", req, cb);
    }
    /**
     * ListClsLogTopics 用于显示日志主题列表。注意：一个日志集下至多含10个日志主题。
     */
    async ListClsLogTopics(req, cb) {
        return this.request("ListClsLogTopics", req, cb);
    }
    /**
     * 查询BOT会话记录列表
     */
    async DescribeScdnBotRecords(req, cb) {
        return this.request("DescribeScdnBotRecords", req, cb);
    }
    /**
     * DescribeScdnConfig 用于查询指定 SCDN 加速域名的安全相关配置
     */
    async DescribeScdnConfig(req, cb) {
        return this.request("DescribeScdnConfig", req, cb);
    }
    /**
     * DeleteClsLogTopic 用于删除日志主题。注意：删除后，所有该日志主题下绑定域名的日志将不再继续投递至该主题，已经投递的日志将会被全部清空。生效时间约为 5~15 分钟。
     */
    async DeleteClsLogTopic(req, cb) {
        return this.request("DeleteClsLogTopic", req, cb);
    }
    /**
     * ### <font color=red>**该接口已废弃** </font><br>
本接口（DescribeCdnOriginIp）用于查询 CDN 回源节点的IP信息。（注：替换接口为DescribeIpStatus）
     */
    async DescribeCdnOriginIp(req, cb) {
        return this.request("DescribeCdnOriginIp", req, cb);
    }
    /**
     * DescribeBillingData 用于查询实际计费数据明细。
     */
    async DescribeBillingData(req, cb) {
        return this.request("DescribeBillingData", req, cb);
    }
    /**
     * DescribePushQuota  用于查询预热配额和每日可用量。
     */
    async DescribePushQuota(req, cb) {
        return this.request("DescribePushQuota", req, cb);
    }
    /**
     * EnableClsLogTopic 用于启动日志主题投递。注意：启动后，所有绑定该日志主题域名的日志将继续投递至该主题。生效时间约为 5~15 分钟。
     */
    async EnableClsLogTopic(req, cb) {
        return this.request("EnableClsLogTopic", req, cb);
    }
    /**
     * ListScdnDomains 用于查询 SCDN 安全加速域名列表，及域名基本配置信息
     */
    async ListScdnDomains(req, cb) {
        return this.request("ListScdnDomains", req, cb);
    }
    /**
     * DescribeReportData 用于查询域名/项目维度的日/周/月报表数据。
     */
    async DescribeReportData(req, cb) {
        return this.request("DescribeReportData", req, cb);
    }
    /**
     * 查询指定域名的区域、运营商明细数据
注意事项：接口尚未全面开放，未在内测名单中的账号不支持调用
     */
    async DescribeDistrictIspData(req, cb) {
        return this.request("DescribeDistrictIspData", req, cb);
    }
    /**
     * 获取BOT统计数据列表
     */
    async DescribeScdnBotData(req, cb) {
        return this.request("DescribeScdnBotData", req, cb);
    }
    /**
     * 本接口(UpdatePayType)用于修改账号计费类型，暂不支持月结用户或子账号修改。
     */
    async UpdatePayType(req, cb) {
        return this.request("UpdatePayType", req, cb);
    }
    /**
     * DescribeTopData 通过入参 Metric 和 Filter 组合不同，可以查询以下排序数据：

+ 依据总流量、总请求数对访问 IP 排序，从大至小返回 TOP 100 IP
+ 依据总流量、总请求数对访问 Refer 排序，从大至小返回 TOP 100 Refer
+ 依据总流量、总请求数对访问 设备 排序，从大至小返回 设备类型
+ 依据总流量、总请求数对访问 操作系统 排序，从大至小返回 操作系统
+ 依据总流量、总请求数对访问 浏览器 排序，从大至小返回 浏览器

注意：
+ 仅支持 90 天内数据查询，且从2021年09月20日开始有数据
     */
    async DescribeTopData(req, cb) {
        return this.request("DescribeTopData", req, cb);
    }
    /**
     * ### <font color=red>**该接口已废弃** </font><br>
EnableCaches 用于解禁手工封禁的 URL，解禁成功后，全网生效时间约 5~10 分钟。
     */
    async EnableCaches(req, cb) {
        return this.request("EnableCaches", req, cb);
    }
    /**
     * 获取Bot攻击的Top数据列表
     */
    async ListScdnTopBotData(req, cb) {
        return this.request("ListScdnTopBotData", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248758, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cds = void 0;
const v20180420_1 = require("./v20180420");
exports.cds = {
    v20180420: v20180420_1.v20180420,
};

}, function(modId) { var map = {"./v20180420":1738984248759}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248759, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180420 = void 0;
const Models = require("./cds_models");
const cds_client_1 = require("./cds_client");
exports.v20180420 = {
    Client: cds_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cds_models":1738984248760,"./cds_client":1738984248761}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248760, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248761, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cds client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cds.tencentcloudapi.com", "2018-04-20", clientConfig);
    }
    /**
     * 本接口 (DescribeDbauditInstanceType) 用于查询可售卖的产品规格列表。
     */
    async DescribeDbauditInstanceType(req, cb) {
        return this.request("DescribeDbauditInstanceType", req, cb);
    }
    /**
     * 本接口 (ModifyDbauditInstancesRenewFlag) 用于修改数据安全审计产品实例续费标识
     */
    async ModifyDbauditInstancesRenewFlag(req, cb) {
        return this.request("ModifyDbauditInstancesRenewFlag", req, cb);
    }
    /**
     * 本接口 (DescribeDbauditInstances) 用于查询数据安全审计实例列表
     */
    async DescribeDbauditInstances(req, cb) {
        return this.request("DescribeDbauditInstances", req, cb);
    }
    /**
     * 用于查询数据安全审计产品实例价格
     */
    async InquiryPriceDbauditInstance(req, cb) {
        return this.request("InquiryPriceDbauditInstance", req, cb);
    }
    /**
     * 本接口 (DescribeDbauditUsedRegions) 用于查询可售卖地域列表。
     */
    async DescribeDbauditUsedRegions(req, cb) {
        return this.request("DescribeDbauditUsedRegions", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248762, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cdwch = void 0;
const v20200915_1 = require("./v20200915");
exports.cdwch = {
    v20200915: v20200915_1.v20200915,
};

}, function(modId) { var map = {"./v20200915":1738984248763}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248763, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200915 = void 0;
const Models = require("./cdwch_models");
const cdwch_client_1 = require("./cdwch_client");
exports.v20200915 = {
    Client: cdwch_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cdwch_models":1738984248764,"./cdwch_client":1738984248765}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248764, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248765, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cdwch client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cdwch.tencentcloudapi.com", "2020-09-15", clientConfig);
    }
    /**
     * 创建或者修改备份策略
     */
    async CreateBackUpSchedule(req, cb) {
        return this.request("CreateBackUpSchedule", req, cb);
    }
    /**
     * 查询备份任务列表
     */
    async DescribeBackUpJob(req, cb) {
        return this.request("DescribeBackUpJob", req, cb);
    }
    /**
     * 销毁集群 open api
     */
    async DestroyInstance(req, cb) {
        return this.request("DestroyInstance", req, cb);
    }
    /**
     * 在集群详情页面获取所有参数列表
     */
    async DescribeInstanceKeyValConfigs(req, cb) {
        return this.request("DescribeInstanceKeyValConfigs", req, cb);
    }
    /**
     * 开启或者关闭策略
     */
    async OpenBackUp(req, cb) {
        return this.request("OpenBackUp", req, cb);
    }
    /**
     * KV模式修改配置接口
     */
    async ModifyInstanceKeyValConfigs(req, cb) {
        return this.request("ModifyInstanceKeyValConfigs", req, cb);
    }
    /**
     * 垂直扩缩容节点规格，修改节点cvm的规格cpu，内存。 规格变化阶段，服务不可用。
     */
    async ScaleUpInstance(req, cb) {
        return this.request("ScaleUpInstance", req, cb);
    }
    /**
     * 获取可备份表信息
     */
    async DescribeBackUpTables(req, cb) {
        return this.request("DescribeBackUpTables", req, cb);
    }
    /**
     * 调整clickhouse节点数量
     */
    async ScaleOutInstance(req, cb) {
        return this.request("ScaleOutInstance", req, cb);
    }
    /**
     * 获取实例shard信息列表
     */
    async DescribeInstanceShards(req, cb) {
        return this.request("DescribeInstanceShards", req, cb);
    }
    /**
     * 获取实例列表，供外部sdk使用
     */
    async DescribeInstancesNew(req, cb) {
        return this.request("DescribeInstancesNew", req, cb);
    }
    /**
     * 删除备份数据
     */
    async DeleteBackUpData(req, cb) {
        return this.request("DeleteBackUpData", req, cb);
    }
    /**
     * 新增和修改用户接口
     */
    async ActionAlterCkUser(req, cb) {
        return this.request("ActionAlterCkUser", req, cb);
    }
    /**
     * 集群详情页中显示集群状态、流程进度等
     */
    async DescribeInstanceState(req, cb) {
        return this.request("DescribeInstanceState", req, cb);
    }
    /**
     * 获取集群的最新的几个配置文件（config.xml、metrika.xml、user.xml）的内容，显示给用户
     */
    async DescribeClusterConfigs(req, cb) {
        return this.request("DescribeClusterConfigs", req, cb);
    }
    /**
     * 在集群配置页面修改集群配置文件接口，xml模式
     */
    async ModifyClusterConfigs(req, cb) {
        return this.request("ModifyClusterConfigs", req, cb);
    }
    /**
     * open-api接口提供弹性伸缩云原生集群能力
     */
    async ScaleCNOutUpInstance(req, cb) {
        return this.request("ScaleCNOutUpInstance", req, cb);
    }
    /**
     * 备份恢复
     */
    async RecoverBackUpJob(req, cb) {
        return this.request("RecoverBackUpJob", req, cb);
    }
    /**
     * 查询集群用户、集群表，数据库等相关信息
     */
    async DescribeCkSqlApis(req, cb) {
        return this.request("DescribeCkSqlApis", req, cb);
    }
    /**
     * 购买页拉取集群的数据节点和zookeeper节点的规格列表
     */
    async DescribeSpec(req, cb) {
        return this.request("DescribeSpec", req, cb);
    }
    /**
     * 创建集群
     */
    async CreateInstanceNew(req, cb) {
        return this.request("CreateInstanceNew", req, cb);
    }
    /**
     * 查询备份策略信息
     */
    async DescribeBackUpSchedule(req, cb) {
        return this.request("DescribeBackUpSchedule", req, cb);
    }
    /**
     * 查询备份任务详情
     */
    async DescribeBackUpJobDetail(req, cb) {
        return this.request("DescribeBackUpJobDetail", req, cb);
    }
    /**
     * 集群vcluster列表
     */
    async DescribeInstanceClusters(req, cb) {
        return this.request("DescribeInstanceClusters", req, cb);
    }
    /**
     * 根据实例ID查询某个实例的具体信息
     */
    async DescribeInstance(req, cb) {
        return this.request("DescribeInstance", req, cb);
    }
    /**
     * 获取实例节点信息列表
     */
    async DescribeInstanceNodes(req, cb) {
        return this.request("DescribeInstanceNodes", req, cb);
    }
    /**
     * 针对集群账号的权限做管控（新版）
     */
    async ModifyUserNewPrivilege(req, cb) {
        return this.request("ModifyUserNewPrivilege", req, cb);
    }
    /**
     * 扩容磁盘，包含扩容数据节点，zk节点
     */
    async ResizeDisk(req, cb) {
        return this.request("ResizeDisk", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248766, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cdwdoris = void 0;
const v20211228_1 = require("./v20211228");
exports.cdwdoris = {
    v20211228: v20211228_1.v20211228,
};

}, function(modId) { var map = {"./v20211228":1738984248767}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248767, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20211228 = void 0;
const Models = require("./cdwdoris_models");
const cdwdoris_client_1 = require("./cdwdoris_client");
exports.v20211228 = {
    Client: cdwdoris_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cdwdoris_models":1738984248768,"./cdwdoris_client":1738984248769}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248768, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248769, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cdwdoris client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cdwdoris.tencentcloudapi.com", "2021-12-28", clientConfig);
    }
    /**
     * 创建或者修改备份策略
     */
    async CreateBackUpSchedule(req, cb) {
        return this.request("CreateBackUpSchedule", req, cb);
    }
    /**
     * 开通、描述降冷策略接口
     */
    async OpenCoolDownPolicy(req, cb) {
        return this.request("OpenCoolDownPolicy", req, cb);
    }
    /**
     * 获取备份、迁移的调度任务信息
     */
    async DescribeBackUpSchedules(req, cb) {
        return this.request("DescribeBackUpSchedules", req, cb);
    }
    /**
     * 查询备份实例列表
     */
    async DescribeBackUpJob(req, cb) {
        return this.request("DescribeBackUpJob", req, cb);
    }
    /**
     * 销毁集群
     */
    async DestroyInstance(req, cb) {
        return this.request("DestroyInstance", req, cb);
    }
    /**
     * 查询冷热分层Table数据
     */
    async DescribeCoolDownTableData(req, cb) {
        return this.request("DescribeCoolDownTableData", req, cb);
    }
    /**
     * 获取数据库审计记录
     */
    async DescribeDatabaseAuditRecords(req, cb) {
        return this.request("DescribeDatabaseAuditRecords", req, cb);
    }
    /**
     * 查询恢复任务进度详情
     */
    async DescribeRestoreTaskDetail(req, cb) {
        return this.request("DescribeRestoreTaskDetail", req, cb);
    }
    /**
     * 创建资源组
     */
    async CreateWorkloadGroup(req, cb) {
        return this.request("CreateWorkloadGroup", req, cb);
    }
    /**
     * 下载数据库审计日志
     */
    async DescribeDatabaseAuditDownload(req, cb) {
        return this.request("DescribeDatabaseAuditDownload", req, cb);
    }
    /**
     * 获取当前集群各用户绑定的资源信息
     */
    async DescribeUserBindWorkloadGroup(req, cb) {
        return this.request("DescribeUserBindWorkloadGroup", req, cb);
    }
    /**
     * 获取BE/FE节点角色
     */
    async DescribeInstanceNodesInfo(req, cb) {
        return this.request("DescribeInstanceNodesInfo", req, cb);
    }
    /**
     * 获取集群已使用子网信息
     */
    async DescribeInstanceUsedSubnets(req, cb) {
        return this.request("DescribeInstanceUsedSubnets", req, cb);
    }
    /**
     * 获取指定数据源和库下的表列表
     */
    async DescribeTableList(req, cb) {
        return this.request("DescribeTableList", req, cb);
    }
    /**
     * 获取可备份表信息
     */
    async DescribeBackUpTables(req, cb) {
        return this.request("DescribeBackUpTables", req, cb);
    }
    /**
     * 水平扩容节点
     */
    async ScaleOutInstance(req, cb) {
        return this.request("ScaleOutInstance", req, cb);
    }
    /**
     * 修改节点状态
     */
    async ModifyNodeStatus(req, cb) {
        return this.request("ModifyNodeStatus", req, cb);
    }
    /**
     * 获取集群配置文件修改历史
     */
    async DescribeClusterConfigsHistory(req, cb) {
        return this.request("DescribeClusterConfigsHistory", req, cb);
    }
    /**
     * 获取慢查询列表
     */
    async DescribeSlowQueryRecords(req, cb) {
        return this.request("DescribeSlowQueryRecords", req, cb);
    }
    /**
     * 备份恢复
     */
    async RecoverBackUpJob(req, cb) {
        return this.request("RecoverBackUpJob", req, cb);
    }
    /**
     * 修改用户绑定的资源组
     */
    async ModifyUserBindWorkloadGroup(req, cb) {
        return this.request("ModifyUserBindWorkloadGroup", req, cb);
    }
    /**
     * 删除备份数据
     */
    async DeleteBackUpData(req, cb) {
        return this.request("DeleteBackUpData", req, cb);
    }
    /**
     * 获取集群列表
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 扩容云盘
     */
    async ResizeDisk(req, cb) {
        return this.request("ResizeDisk", req, cb);
    }
    /**
     * 创建冷热分层策略
     */
    async CreateCoolDownPolicy(req, cb) {
        return this.request("CreateCoolDownPolicy", req, cb);
    }
    /**
     * 更新集群冷热分层信息
     */
    async UpdateCoolDown(req, cb) {
        return this.request("UpdateCoolDown", req, cb);
    }
    /**
     * 集群详情页中显示集群状态、流程进度等
     */
    async DescribeInstanceState(req, cb) {
        return this.request("DescribeInstanceState", req, cb);
    }
    /**
     * 获取集群的最新的几个配置文件（config.xml、metrika.xml、user.xml）的内容，显示给用户
     */
    async DescribeClusterConfigs(req, cb) {
        return this.request("DescribeClusterConfigs", req, cb);
    }
    /**
     * 删除资源组
     */
    async DeleteWorkloadGroup(req, cb) {
        return this.request("DeleteWorkloadGroup", req, cb);
    }
    /**
     * 在集群配置页面修改集群配置文件接口，xml模式
     */
    async ModifyClusterConfigs(req, cb) {
        return this.request("ModifyClusterConfigs", req, cb);
    }
    /**
     * 更改安全组
     */
    async ModifySecurityGroups(req, cb) {
        return this.request("ModifySecurityGroups", req, cb);
    }
    /**
     * 查询冷热分层backend节点信息列表
     */
    async DescribeCoolDownBackends(req, cb) {
        return this.request("DescribeCoolDownBackends", req, cb);
    }
    /**
     * 计算资源垂直变配
     */
    async ScaleUpInstance(req, cb) {
        return this.request("ScaleUpInstance", req, cb);
    }
    /**
     * 集群缩容
     */
    async ReduceInstance(req, cb) {
        return this.request("ReduceInstance", req, cb);
    }
    /**
     * 修改用户权限,支持catalog，全部db，部分db表三种权限设置类别
     */
    async ModifyUserPrivilegesV3(req, cb) {
        return this.request("ModifyUserPrivilegesV3", req, cb);
    }
    /**
     * 在集群详情页面，拉取该集群的操作
     */
    async DescribeInstanceOperations(req, cb) {
        return this.request("DescribeInstanceOperations", req, cb);
    }
    /**
     * 开启或关闭资源组
     */
    async ModifyWorkloadGroupStatus(req, cb) {
        return this.request("ModifyWorkloadGroupStatus", req, cb);
    }
    /**
     * 修改冷热分层策略
     */
    async ModifyCoolDownPolicy(req, cb) {
        return this.request("ModifyCoolDownPolicy", req, cb);
    }
    /**
     * 新增和修改用户接口
     */
    async ActionAlterUser(req, cb) {
        return this.request("ActionAlterUser", req, cb);
    }
    /**
     * 针对驱动sql命令查询集群接口
     */
    async DescribeSqlApis(req, cb) {
        return this.request("DescribeSqlApis", req, cb);
    }
    /**
     * 查询备份任务进度详情
     */
    async DescribeBackUpTaskDetail(req, cb) {
        return this.request("DescribeBackUpTaskDetail", req, cb);
    }
    /**
     * 根据集群ID查询某个集群的具体信息
     */
    async DescribeInstance(req, cb) {
        return this.request("DescribeInstance", req, cb);
    }
    /**
     * 通过API创建集群
     */
    async CreateInstanceNew(req, cb) {
        return this.request("CreateInstanceNew", req, cb);
    }
    /**
     * 修改资源组信息
     */
    async ModifyWorkloadGroup(req, cb) {
        return this.request("ModifyWorkloadGroup", req, cb);
    }
    /**
     * 取消对应的备份实例任务
     */
    async CancelBackupJob(req, cb) {
        return this.request("CancelBackupJob", req, cb);
    }
    /**
     * 查询备份任务详情
     */
    async DescribeBackUpJobDetail(req, cb) {
        return this.request("DescribeBackUpJobDetail", req, cb);
    }
    /**
     * 查询冷热分层生效变量和配置是否正确
     */
    async CheckCoolDownWorkingVariableConfigCorrect(req, cb) {
        return this.request("CheckCoolDownWorkingVariableConfigCorrect", req, cb);
    }
    /**
     * 获取集群节点角色
     */
    async DescribeInstanceNodesRole(req, cb) {
        return this.request("DescribeInstanceNodesRole", req, cb);
    }
    /**
     * 重启集群让配置文件生效
     */
    async RestartClusterForConfigs(req, cb) {
        return this.request("RestartClusterForConfigs", req, cb);
    }
    /**
     * 拉取集群节点规格列表
     */
    async DescribeSpec(req, cb) {
        return this.request("DescribeSpec", req, cb);
    }
    /**
     * 集群列表页上显示地域信息及各个地域的集群总数
     */
    async DescribeAreaRegion(req, cb) {
        return this.request("DescribeAreaRegion", req, cb);
    }
    /**
     * 开始启用冷热分层
     */
    async OpenCoolDown(req, cb) {
        return this.request("OpenCoolDown", req, cb);
    }
    /**
     * 集群健康检查
     */
    async DescribeInstancesHealthState(req, cb) {
        return this.request("DescribeInstancesHealthState", req, cb);
    }
    /**
     * 集群滚动重启
     */
    async RestartClusterForNode(req, cb) {
        return this.request("RestartClusterForNode", req, cb);
    }
    /**
     * 下载慢查询文件
     */
    async DescribeSlowQueryRecordsDownload(req, cb) {
        return this.request("DescribeSlowQueryRecordsDownload", req, cb);
    }
    /**
     * 获取集群节点信息列表
     */
    async DescribeInstanceNodes(req, cb) {
        return this.request("DescribeInstanceNodes", req, cb);
    }
    /**
     * 查询冷热分层策略列表
     */
    async DescribeCoolDownPolicies(req, cb) {
        return this.request("DescribeCoolDownPolicies", req, cb);
    }
    /**
     * 获取资源组信息
     */
    async DescribeWorkloadGroup(req, cb) {
        return this.request("DescribeWorkloadGroup", req, cb);
    }
    /**
     * 修改集群名称
     */
    async ModifyInstance(req, cb) {
        return this.request("ModifyInstance", req, cb);
    }
    /**
     * KV模式修改配置接口
     */
    async ModifyInstanceKeyValConfigs(req, cb) {
        return this.request("ModifyInstanceKeyValConfigs", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248770, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cdwpg = void 0;
const v20201230_1 = require("./v20201230");
exports.cdwpg = {
    v20201230: v20201230_1.v20201230,
};

}, function(modId) { var map = {"./v20201230":1738984248771}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248771, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201230 = void 0;
const Models = require("./cdwpg_models");
const cdwpg_client_1 = require("./cdwpg_client");
exports.v20201230 = {
    Client: cdwpg_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cdwpg_models":1738984248772,"./cdwpg_client":1738984248773}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248772, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248773, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cdwpg client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cdwpg.tencentcloudapi.com", "2020-12-30", clientConfig);
    }
    /**
     * 获取云原生实例列表
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 集群详情页中显示集群状态、流程进度等
     */
    async DescribeInstanceState(req, cb) {
        return this.request("DescribeInstanceState", req, cb);
    }
    /**
     * 销毁集群
     */
    async DestroyInstanceByApi(req, cb) {
        return this.request("DestroyInstanceByApi", req, cb);
    }
    /**
     * 根据实例ID查询某个实例的具体信息
     */
    async DescribeInstance(req, cb) {
        return this.request("DescribeInstance", req, cb);
    }
    /**
     * 获取集群信息
     */
    async DescribeInstanceInfo(req, cb) {
        return this.request("DescribeInstanceInfo", req, cb);
    }
    /**
     * 创建集群
     */
    async CreateInstanceByApi(req, cb) {
        return this.request("CreateInstanceByApi", req, cb);
    }
    /**
     * 获取集群实例列表
     */
    async DescribeSimpleInstances(req, cb) {
        return this.request("DescribeSimpleInstances", req, cb);
    }
    /**
     * 修改实例信息，目前为实例名称
     */
    async ModifyInstance(req, cb) {
        return this.request("ModifyInstance", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248774, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cdz = void 0;
const v20221123_1 = require("./v20221123");
exports.cdz = {
    v20221123: v20221123_1.v20221123,
};

}, function(modId) { var map = {"./v20221123":1738984248775}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248775, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20221123 = void 0;
const Models = require("./cdz_models");
const cdz_client_1 = require("./cdz_client");
exports.v20221123 = {
    Client: cdz_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cdz_models":1738984248776,"./cdz_client":1738984248777}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248776, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248777, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cdz client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cdz.tencentcloudapi.com", "2022-11-23", clientConfig);
    }
    /**
     * 查询专属可用区各个垂直产品的资源使用情况
     */
    async DescribeCloudDedicatedZoneResourceSummary(req, cb) {
        return this.request("DescribeCloudDedicatedZoneResourceSummary", req, cb);
    }
    /**
     * 查询可用区的Host和Host上部署的实例
     */
    async DescribeCloudDedicatedZoneHosts(req, cb) {
        return this.request("DescribeCloudDedicatedZoneHosts", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248778, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cfg = void 0;
const v20210820_1 = require("./v20210820");
exports.cfg = {
    v20210820: v20210820_1.v20210820,
};

}, function(modId) { var map = {"./v20210820":1738984248779}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248779, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210820 = void 0;
const Models = require("./cfg_models");
const cfg_client_1 = require("./cfg_client");
exports.v20210820 = {
    Client: cfg_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cfg_models":1738984248780,"./cfg_client":1738984248781}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248780, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248781, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cfg client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cfg.tencentcloudapi.com", "2021-08-20", clientConfig);
    }
    /**
     * 查询对象类型列表
     */
    async DescribeObjectTypeList(req, cb) {
        return this.request("DescribeObjectTypeList", req, cb);
    }
    /**
     * 从经验库创建演练
     */
    async CreateTaskFromTemplate(req, cb) {
        return this.request("CreateTaskFromTemplate", req, cb);
    }
    /**
     * 以多个动作创建演练
     */
    async CreateTaskFromMultiAction(req, cb) {
        return this.request("CreateTaskFromMultiAction", req, cb);
    }
    /**
     * 触发混沌演练任务的动作，对于实例进行演练操作
     */
    async ExecuteTaskInstance(req, cb) {
        return this.request("ExecuteTaskInstance", req, cb);
    }
    /**
     * 查询经验库列表
     */
    async DescribeTemplateList(req, cb) {
        return this.request("DescribeTemplateList", req, cb);
    }
    /**
     * 修改任务运行状态
     */
    async ModifyTaskRunStatus(req, cb) {
        return this.request("ModifyTaskRunStatus", req, cb);
    }
    /**
     * 执行任务
     */
    async ExecuteTask(req, cb) {
        return this.request("ExecuteTask", req, cb);
    }
    /**
     * 从动作创建演练
     */
    async CreateTaskFromAction(req, cb) {
        return this.request("CreateTaskFromAction", req, cb);
    }
    /**
     * 用于触发混沌演练护栏（类型为触发和恢复2种）
     */
    async TriggerPolicy(req, cb) {
        return this.request("TriggerPolicy", req, cb);
    }
    /**
     * 查询任务列表
     */
    async DescribeTaskList(req, cb) {
        return this.request("DescribeTaskList", req, cb);
    }
    /**
     * 获取护栏触发日志
     */
    async DescribeTaskPolicyTriggerLog(req, cb) {
        return this.request("DescribeTaskPolicyTriggerLog", req, cb);
    }
    /**
     * 获取演练过程中的所有日志
     */
    async DescribeTaskExecuteLogs(req, cb) {
        return this.request("DescribeTaskExecuteLogs", req, cb);
    }
    /**
     * 删除任务
     */
    async DeleteTask(req, cb) {
        return this.request("DeleteTask", req, cb);
    }
    /**
     * 获取混沌演练平台的动作库列表
     */
    async DescribeActionLibraryList(req, cb) {
        return this.request("DescribeActionLibraryList", req, cb);
    }
    /**
     * 根据动作ID获取动作栏位动态配置参数信息，里面包含动作自有和通用两部分参数。
     */
    async DescribeActionFieldConfigList(req, cb) {
        return this.request("DescribeActionFieldConfigList", req, cb);
    }
    /**
     * 查询任务
     */
    async DescribeTask(req, cb) {
        return this.request("DescribeTask", req, cb);
    }
    /**
     * 查询经验库
     */
    async DescribeTemplate(req, cb) {
        return this.request("DescribeTemplate", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248782, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cfs = void 0;
const v20190719_1 = require("./v20190719");
exports.cfs = {
    v20190719: v20190719_1.v20190719,
};

}, function(modId) { var map = {"./v20190719":1738984248783}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248783, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190719 = void 0;
const Models = require("./cfs_models");
const cfs_client_1 = require("./cfs_client");
exports.v20190719 = {
    Client: cfs_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cfs_models":1738984248784,"./cfs_client":1738984248785}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248784, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248785, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cfs client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cfs.tencentcloudapi.com", "2019-07-19", clientConfig);
    }
    /**
     * 本接口（DescribeCfsRules）用于查询权限组规则列表。
     */
    async DescribeCfsRules(req, cb) {
        return this.request("DescribeCfsRules", req, cb);
    }
    /**
     * 本接口（UpdateCfsFileSystemPGroup）用于更新文件系统所使用的权限组
     */
    async UpdateCfsFileSystemPGroup(req, cb) {
        return this.request("UpdateCfsFileSystemPGroup", req, cb);
    }
    /**
     * 本接口（SignUpCfsService）用于开通CFS服务。
     */
    async SignUpCfsService(req, cb) {
        return this.request("SignUpCfsService", req, cb);
    }
    /**
     * 删除文件系统快照
     */
    async DeleteCfsSnapshot(req, cb) {
        return this.request("DeleteCfsSnapshot", req, cb);
    }
    /**
     * 本接口（DescribeCfsPGroups）用于查询权限组列表。
     */
    async DescribeCfsPGroups(req, cb) {
        return this.request("DescribeCfsPGroups", req, cb);
    }
    /**
     * 更新文件系统吞吐
仅吞吐型支持此接口
     */
    async UpdateFileSystemBandwidthLimit(req, cb) {
        return this.request("UpdateFileSystemBandwidthLimit", req, cb);
    }
    /**
     * 设置文件系统配额，提供UID/GID的配额设置的接口（仅部分Turbo实例能使用，若需要调用请提交工单与我们联系）
     */
    async SetUserQuota(req, cb) {
        return this.request("SetUserQuota", req, cb);
    }
    /**
     * 查询文件系统快照定期策略列表信息
     */
    async DescribeAutoSnapshotPolicies(req, cb) {
        return this.request("DescribeAutoSnapshotPolicies", req, cb);
    }
    /**
     * 本接口（DescribeMountTargets）用于查询文件系统挂载点信息
     */
    async DescribeMountTargets(req, cb) {
        return this.request("DescribeMountTargets", req, cb);
    }
    /**
     * 本接口（DeleteCfsPGroup）用于删除权限组。
     */
    async DeleteCfsPGroup(req, cb) {
        return this.request("DeleteCfsPGroup", req, cb);
    }
    /**
     * 查询挂载该文件系统的客户端。此功能需要客户端安装CFS监控插件。
     */
    async DescribeCfsFileSystemClients(req, cb) {
        return this.request("DescribeCfsFileSystemClients", req, cb);
    }
    /**
     * 本接口（DescribeCfsServiceStatus）用于查询用户使用CFS的服务状态。
     */
    async DescribeCfsServiceStatus(req, cb) {
        return this.request("DescribeCfsServiceStatus", req, cb);
    }
    /**
     * 用于终止迁移任务。
此接口需提交工单，开启白名单之后才能使用。
     */
    async StopMigrationTask(req, cb) {
        return this.request("StopMigrationTask", req, cb);
    }
    /**
     * 用于获取迁移任务列表。
此接口需提交工单，开启白名单之后才能使用。
     */
    async DescribeMigrationTasks(req, cb) {
        return this.request("DescribeMigrationTasks", req, cb);
    }
    /**
     * 本接口（DescribeAvailableZoneInfo）用于查询区域的可用情况。
     */
    async DescribeAvailableZoneInfo(req, cb) {
        return this.request("DescribeAvailableZoneInfo", req, cb);
    }
    /**
     * 本接口（UpdateCfsFileSystemName）用于更新文件系统名
     */
    async UpdateCfsFileSystemName(req, cb) {
        return this.request("UpdateCfsFileSystemName", req, cb);
    }
    /**
     * 用于删除迁移任务。
此接口需提交工单，开启白名单之后才能使用。
     */
    async DeleteMigrationTask(req, cb) {
        return this.request("DeleteMigrationTask", req, cb);
    }
    /**
     * 该接口用于对turbo 文件系统扩容使用
     */
    async ScaleUpFileSystem(req, cb) {
        return this.request("ScaleUpFileSystem", req, cb);
    }
    /**
     * 本接口（UpdateCfsFileSystemSizeLimit）用于更新文件系统存储容量限制。
     */
    async UpdateCfsFileSystemSizeLimit(req, cb) {
        return this.request("UpdateCfsFileSystemSizeLimit", req, cb);
    }
    /**
     * 创建定期快照策略
     */
    async CreateAutoSnapshotPolicy(req, cb) {
        return this.request("CreateAutoSnapshotPolicy", req, cb);
    }
    /**
     * 用于删除文件系统
     */
    async DeleteCfsFileSystem(req, cb) {
        return this.request("DeleteCfsFileSystem", req, cb);
    }
    /**
     * 用于添加新文件系统
     */
    async CreateCfsFileSystem(req, cb) {
        return this.request("CreateCfsFileSystem", req, cb);
    }
    /**
     * 更新文件系统快照名称及保留时长
     */
    async UpdateCfsSnapshotAttribute(req, cb) {
        return this.request("UpdateCfsSnapshotAttribute", req, cb);
    }
    /**
     * 文件系统快照概览
     */
    async DescribeCfsSnapshotOverview(req, cb) {
        return this.request("DescribeCfsSnapshotOverview", req, cb);
    }
    /**
     * 查询文件系统配额（仅部分Turbo实例能使用，若需要调用请提交工单与我们联系）
     */
    async DescribeUserQuota(req, cb) {
        return this.request("DescribeUserQuota", req, cb);
    }
    /**
     * 用来设置文件系统扩容策略
     */
    async ModifyFileSystemAutoScaleUpRule(req, cb) {
        return this.request("ModifyFileSystemAutoScaleUpRule", req, cb);
    }
    /**
     * 更新定期自动快照策略
     */
    async UpdateAutoSnapshotPolicy(req, cb) {
        return this.request("UpdateAutoSnapshotPolicy", req, cb);
    }
    /**
     * 本接口（UpdateCfsRule）用于更新权限规则。
     */
    async UpdateCfsRule(req, cb) {
        return this.request("UpdateCfsRule", req, cb);
    }
    /**
     * 本接口（DescribeCfsFileSystems）用于查询文件系统
     */
    async DescribeCfsFileSystems(req, cb) {
        return this.request("DescribeCfsFileSystems", req, cb);
    }
    /**
     * 查询文件系统快照列表
     */
    async DescribeCfsSnapshots(req, cb) {
        return this.request("DescribeCfsSnapshots", req, cb);
    }
    /**
     * 文件系统绑定快照策略，可以同时绑定多个fs，一个fs 只能跟一个策略绑定
     */
    async BindAutoSnapshotPolicy(req, cb) {
        return this.request("BindAutoSnapshotPolicy", req, cb);
    }
    /**
     * 本接口（DeleteCfsRule）用于删除权限组规则。
     */
    async DeleteCfsRule(req, cb) {
        return this.request("DeleteCfsRule", req, cb);
    }
    /**
     * 用于获取数据源桶列表。
此接口需提交工单，开启白名单之后才能使用。
     */
    async DescribeBucketList(req, cb) {
        return this.request("DescribeBucketList", req, cb);
    }
    /**
     * 用于创建迁移任务。
此接口需提交工单，开启白名单之后才能使用。
     */
    async CreateMigrationTask(req, cb) {
        return this.request("CreateMigrationTask", req, cb);
    }
    /**
     * 本接口（DeleteMountTarget）用于删除挂载点
说明：2022年6月1日之后创建的CFS文件系统删除时无需单独调用删除挂载点操作，此API仅适用老版本的CFS实例。
     */
    async DeleteMountTarget(req, cb) {
        return this.request("DeleteMountTarget", req, cb);
    }
    /**
     * 指定条件删除文件系统配额（仅部分Turbo实例能使用，若需要调用请提交工单与我们联系）
     */
    async DeleteUserQuota(req, cb) {
        return this.request("DeleteUserQuota", req, cb);
    }
    /**
     * 本接口（CreateCfsPGroup）用于创建权限组
     */
    async CreateCfsPGroup(req, cb) {
        return this.request("CreateCfsPGroup", req, cb);
    }
    /**
     * 删除快照定期策略
     */
    async DeleteAutoSnapshotPolicy(req, cb) {
        return this.request("DeleteAutoSnapshotPolicy", req, cb);
    }
    /**
     * 创建文件系统快照
     */
    async CreateCfsSnapshot(req, cb) {
        return this.request("CreateCfsSnapshot", req, cb);
    }
    /**
     * 解除文件系统绑定的快照策略
     */
    async UnbindAutoSnapshotPolicy(req, cb) {
        return this.request("UnbindAutoSnapshotPolicy", req, cb);
    }
    /**
     * 查询快照操作日志
     */
    async DescribeSnapshotOperationLogs(req, cb) {
        return this.request("DescribeSnapshotOperationLogs", req, cb);
    }
    /**
     * 本接口（CreateCfsRule）用于创建权限组规则。
     */
    async CreateCfsRule(req, cb) {
        return this.request("CreateCfsRule", req, cb);
    }
    /**
     * 创建用于访问文件系统的凭证
     */
    async CreateAccessCert(req, cb) {
        return this.request("CreateAccessCert", req, cb);
    }
    /**
     * 本接口（UpdateCfsPGroup）更新权限组信息。
     */
    async UpdateCfsPGroup(req, cb) {
        return this.request("UpdateCfsPGroup", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248786, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cfw = void 0;
const v20190904_1 = require("./v20190904");
exports.cfw = {
    v20190904: v20190904_1.v20190904,
};

}, function(modId) { var map = {"./v20190904":1738984248787}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248787, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190904 = void 0;
const Models = require("./cfw_models");
const cfw_client_1 = require("./cfw_client");
exports.v20190904 = {
    Client: cfw_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cfw_models":1738984248788,"./cfw_client":1738984248789}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248788, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248789, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cfw client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cfw.tencentcloudapi.com", "2019-09-04", clientConfig);
    }
    /**
     * 删除VPC间规则
     */
    async RemoveVpcAcRule(req, cb) {
        return this.request("RemoveVpcAcRule", req, cb);
    }
    /**
     * 批量删除入侵防御封禁列表、放通列表规则（新）
     */
    async DeleteBlockIgnoreRuleNew(req, cb) {
        return this.request("DeleteBlockIgnoreRuleNew", req, cb);
    }
    /**
     * VPC防火墙(组)开关列表
     */
    async DescribeVpcFwGroupSwitch(req, cb) {
        return this.request("DescribeVpcFwGroupSwitch", req, cb);
    }
    /**
     * 启用停用VPC间规则或Nat边界规则
VPC间规则需指定EdgeId。Nat边界规则需指定地域Region与Direction。
     */
    async ModifyEWRuleStatus(req, cb) {
        return this.request("ModifyEWRuleStatus", req, cb);
    }
    /**
     * 中止安全组规则下发
     */
    async StopSecurityGroupRuleDispatch(req, cb) {
        return this.request("StopSecurityGroupRuleDispatch", req, cb);
    }
    /**
     * ModifyResourceGroup-资产中心资产组信息修改
     */
    async ModifyResourceGroup(req, cb) {
        return this.request("ModifyResourceGroup", req, cb);
    }
    /**
     * 资产中心资产组数数据信息查询
     */
    async DescribeResourceGroupNew(req, cb) {
        return this.request("DescribeResourceGroupNew", req, cb);
    }
    /**
     * 编辑VPC间防火墙(防火墙组)
     */
    async ModifyVpcFwGroup(req, cb) {
        return this.request("ModifyVpcFwGroup", req, cb);
    }
    /**
     * 资产同步
     */
    async ModifyAssetSync(req, cb) {
        return this.request("ModifyAssetSync", req, cb);
    }
    /**
     * 删除防火墙(组)，或者删除其中实例
     */
    async DeleteVpcFwGroup(req, cb) {
        return this.request("DeleteVpcFwGroup", req, cb);
    }
    /**
     * 添加VPC内网间规则
     */
    async AddVpcAcRule(req, cb) {
        return this.request("AddVpcAcRule", req, cb);
    }
    /**
     * 创建新企业安全组规则
     */
    async AddEnterpriseSecurityGroupRules(req, cb) {
        return this.request("AddEnterpriseSecurityGroupRules", req, cb);
    }
    /**
     * 查询规则表状态
     */
    async DescribeTableStatus(req, cb) {
        return this.request("DescribeTableStatus", req, cb);
    }
    /**
     * 企业安全组规则快速排序
     */
    async ModifySecurityGroupSequenceRules(req, cb) {
        return this.request("ModifySecurityGroupSequenceRules", req, cb);
    }
    /**
     * 删除新企业安全组规则
     */
    async RemoveEnterpriseSecurityGroupRule(req, cb) {
        return this.request("RemoveEnterpriseSecurityGroupRule", req, cb);
    }
    /**
     * NAT防火墙规则快速排序
     */
    async ModifyNatSequenceRules(req, cb) {
        return this.request("ModifyNatSequenceRules", req, cb);
    }
    /**
     * DescribeUnHandleEventTabList 告警中心伪攻击链事件未处置接口
     */
    async DescribeUnHandleEventTabList(req, cb) {
        return this.request("DescribeUnHandleEventTabList", req, cb);
    }
    /**
     * 创建NAT防火墙实例（Region参数必填）
     */
    async CreateNatFwInstance(req, cb) {
        return this.request("CreateNatFwInstance", req, cb);
    }
    /**
     * ModifyBlockTop取消置顶接口
     */
    async ModifyBlockTop(req, cb) {
        return this.request("ModifyBlockTop", req, cb);
    }
    /**
     * 删除远程运维域名
     */
    async DeleteRemoteAccessDomain(req, cb) {
        return this.request("DeleteRemoteAccessDomain", req, cb);
    }
    /**
     * 删除互联网边界访问控制规则
     */
    async RemoveAclRule(req, cb) {
        return this.request("RemoveAclRule", req, cb);
    }
    /**
     * 销毁防火墙实例
     */
    async DeleteNatFwInstance(req, cb) {
        return this.request("DeleteNatFwInstance", req, cb);
    }
    /**
     * 批量添加入侵防御封禁列表、放通列表规则
     */
    async CreateBlockIgnoreRuleList(req, cb) {
        return this.request("CreateBlockIgnoreRuleList", req, cb);
    }
    /**
     * 编辑单条入侵防御封禁列表、放通列表规则（新）
     */
    async ModifyBlockIgnoreRuleNew(req, cb) {
        return this.request("ModifyBlockIgnoreRuleNew", req, cb);
    }
    /**
     * 修改边界防火墙开关(旁路、串行)
     */
    async ModifyEdgeIpSwitch(req, cb) {
        return this.request("ModifyEdgeIpSwitch", req, cb);
    }
    /**
     * DescribeBlockByIpTimesList 告警中心阻断IP折线图
     */
    async DescribeBlockByIpTimesList(req, cb) {
        return this.request("DescribeBlockByIpTimesList", req, cb);
    }
    /**
     * 查询Nat防火墙Dnat规则
     */
    async DescribeNatFwDnatRule(req, cb) {
        return this.request("DescribeNatFwDnatRule", req, cb);
    }
    /**
     * 查询新版安全组下发进度
     */
    async DescribeEnterpriseSGRuleProgress(req, cb) {
        return this.request("DescribeEnterpriseSGRuleProgress", req, cb);
    }
    /**
     * 获取当前用户接入nat防火墙的所有子网数及natfw实例个数
     */
    async DescribeNatFwInfoCount(req, cb) {
        return this.request("DescribeNatFwInfoCount", req, cb);
    }
    /**
     * 展示当前natfw 实例对应的vpc dns开关
     */
    async DescribeNatFwVpcDnsLst(req, cb) {
        return this.request("DescribeNatFwVpcDnsLst", req, cb);
    }
    /**
     * 编辑单条入侵防御封禁列表、放通列表规则
     */
    async ModifyBlockIgnoreRule(req, cb) {
        return this.request("ModifyBlockIgnoreRule", req, cb);
    }
    /**
     * 查询互联网边界访问控制列表
     */
    async DescribeAclRule(req, cb) {
        return this.request("DescribeAclRule", req, cb);
    }
    /**
     * 编辑单条安全组规则
     */
    async ModifySecurityGroupRule(req, cb) {
        return this.request("ModifySecurityGroupRule", req, cb);
    }
    /**
     * 全部删除规则
     */
    async DeleteAllAccessControlRule(req, cb) {
        return this.request("DeleteAllAccessControlRule", req, cb);
    }
    /**
     * 查询安全组规则列表
     */
    async DescribeSecurityGroupList(req, cb) {
        return this.request("DescribeSecurityGroupList", req, cb);
    }
    /**
     * 修改内网间访问控制规则
     */
    async ModifyVpcAcRule(req, cb) {
        return this.request("ModifyVpcAcRule", req, cb);
    }
    /**
     * 资产同步状态查询
     */
    async DescribeAssetSync(req, cb) {
        return this.request("DescribeAssetSync", req, cb);
    }
    /**
     * 创建企业安全组规则
     */
    async CreateSecurityGroupRules(req, cb) {
        return this.request("CreateSecurityGroupRules", req, cb);
    }
    /**
     * 获取入侵防御按钮列表
     */
    async DescribeDefenseSwitch(req, cb) {
        return this.request("DescribeDefenseSwitch", req, cb);
    }
    /**
     * 获取租户所有VPC防火墙(组)及VPC防火墙实例卡片信息
     */
    async DescribeFwGroupInstanceInfo(req, cb) {
        return this.request("DescribeFwGroupInstanceInfo", req, cb);
    }
    /**
     * nat 防火墙VPC DNS 开关切换
     */
    async ModifyNatFwVpcDnsSwitch(req, cb) {
        return this.request("ModifyNatFwVpcDnsSwitch", req, cb);
    }
    /**
     * 启用停用单条企业安全组规则
     */
    async ModifySecurityGroupItemRuleStatus(req, cb) {
        return this.request("ModifySecurityGroupItemRuleStatus", req, cb);
    }
    /**
     * GetNatFwInstanceWithRegion 获取租户新增运维的NAT实例，带上地域
     */
    async DescribeNatFwInstanceWithRegion(req, cb) {
        return this.request("DescribeNatFwInstanceWithRegion", req, cb);
    }
    /**
     * 删除入侵防御规则白名单接口
     */
    async DeleteIdsWhiteRule(req, cb) {
        return this.request("DeleteIdsWhiteRule", req, cb);
    }
    /**
     * 批量添加入侵防御封禁列表、放通列表规则
     */
    async CreateBlockIgnoreRuleNew(req, cb) {
        return this.request("CreateBlockIgnoreRuleNew", req, cb);
    }
    /**
     * DescribeSourceAsset-查询全部资产信息
     */
    async DescribeSourceAsset(req, cb) {
        return this.request("DescribeSourceAsset", req, cb);
    }
    /**
     * DeleteResourceGroup-资产中心资产组删除
     */
    async DeleteResourceGroup(req, cb) {
        return this.request("DeleteResourceGroup", req, cb);
    }
    /**
     * 删除互联网边界规则
     */
    async RemoveAcRule(req, cb) {
        return this.request("RemoveAcRule", req, cb);
    }
    /**
     * vpc间规则快速排序
     */
    async ModifyVpcFwSequenceRules(req, cb) {
        return this.request("ModifyVpcFwSequenceRules", req, cb);
    }
    /**
     * 用户告警中心-忽略处置按钮
     */
    async CreateAlertCenterOmit(req, cb) {
        return this.request("CreateAlertCenterOmit", req, cb);
    }
    /**
     * 创建入侵防御规则白名单接口
     */
    async CreateIdsWhiteRule(req, cb) {
        return this.request("CreateIdsWhiteRule", req, cb);
    }
    /**
     * 查询内网间访问控制列表
     */
    async DescribeVpcAcRule(req, cb) {
        return this.request("DescribeVpcAcRule", req, cb);
    }
    /**
     * 编辑新企业安全组规则
     */
    async ModifyEnterpriseSecurityGroupRule(req, cb) {
        return this.request("ModifyEnterpriseSecurityGroupRule", req, cb);
    }
    /**
     * 添加互联网边界访问控制规则
     */
    async AddAclRule(req, cb) {
        return this.request("AddAclRule", req, cb);
    }
    /**
     * 修改NAT访问控制规则
     */
    async ModifyNatAcRule(req, cb) {
        return this.request("ModifyNatAcRule", req, cb);
    }
    /**
     * 删除规则
     */
    async DeleteSecurityGroupRule(req, cb) {
        return this.request("DeleteSecurityGroupRule", req, cb);
    }
    /**
     * 修改地址模板
     */
    async ModifyAddressTemplate(req, cb) {
        return this.request("ModifyAddressTemplate", req, cb);
    }
    /**
     * 防火墙开关列表，已废弃，请使用DescribeFwEdgeIps
     */
    async DescribeSwitchLists(req, cb) {
        return this.request("DescribeSwitchLists", req, cb);
    }
    /**
     * 修改规则表状态
     */
    async ModifyTableStatus(req, cb) {
        return this.request("ModifyTableStatus", req, cb);
    }
    /**
     * 用户告警中心-封隔离处置按钮
     */
    async CreateAlertCenterIsolate(req, cb) {
        return this.request("CreateAlertCenterIsolate", req, cb);
    }
    /**
     * 支持对封禁列表、放通列表如下操作：
批量增加封禁IP、放通IP/域名
批量删除封禁IP、放通IP/域名
批量修改封禁IP、放通IP/域名生效事件
     */
    async ModifyBlockIgnoreList(req, cb) {
        return this.request("ModifyBlockIgnoreList", req, cb);
    }
    /**
     * 创建、选择vpc
     */
    async CreateChooseVpcs(req, cb) {
        return this.request("CreateChooseVpcs", req, cb);
    }
    /**
     * 资产扫描
     */
    async ModifyAssetScan(req, cb) {
        return this.request("ModifyAssetScan", req, cb);
    }
    /**
     * 删除地址模板规则
     */
    async DeleteAddressTemplate(req, cb) {
        return this.request("DeleteAddressTemplate", req, cb);
    }
    /**
     * 修改规则执行顺序
     */
    async ModifySequenceRules(req, cb) {
        return this.request("ModifySequenceRules", req, cb);
    }
    /**
     * 接口不再使用，已有新接口AddAclRule

添加互联网边界规则
     */
    async AddAcRule(req, cb) {
        return this.request("AddAcRule", req, cb);
    }
    /**
     * 互联网边界规则快速排序
     */
    async ModifySequenceAclRules(req, cb) {
        return this.request("ModifySequenceAclRules", req, cb);
    }
    /**
     * 查询规则列表概况
     */
    async DescribeRuleOverview(req, cb) {
        return this.request("DescribeRuleOverview", req, cb);
    }
    /**
     * IP防护状态查询
     */
    async DescribeIPStatusList(req, cb) {
        return this.request("DescribeIPStatusList", req, cb);
    }
    /**
     * 查询新企业安全组规则
     */
    async DescribeEnterpriseSecurityGroupRule(req, cb) {
        return this.request("DescribeEnterpriseSecurityGroupRule", req, cb);
    }
    /**
     * 修改防火墙(组)开关(支持单点模式、多点模式、全互通模式)
     */
    async ModifyFwGroupSwitch(req, cb) {
        return this.request("ModifyFwGroupSwitch", req, cb);
    }
    /**
     * 日志审计日志查询
     */
    async DescribeLogs(req, cb) {
        return this.request("DescribeLogs", req, cb);
    }
    /**
     * 配置防火墙Dnat规则
     */
    async SetNatFwDnatRule(req, cb) {
        return this.request("SetNatFwDnatRule", req, cb);
    }
    /**
     * 启用停用全部规则
     */
    async ModifyAllRuleStatus(req, cb) {
        return this.request("ModifyAllRuleStatus", req, cb);
    }
    /**
     * 批量删除入侵防御封禁列表、放通列表规则
     */
    async DeleteBlockIgnoreRuleList(req, cb) {
        return this.request("DeleteBlockIgnoreRuleList", req, cb);
    }
    /**
     * 设置防火墙实例弹性公网ip，目前仅支持新增模式的防火墙实例
     */
    async SetNatFwEip(req, cb) {
        return this.request("SetNatFwEip", req, cb);
    }
    /**
     * 用户告警中心-封禁、放通处置按钮
     */
    async CreateAlertCenterRule(req, cb) {
        return this.request("CreateAlertCenterRule", req, cb);
    }
    /**
     * 修改互联网边界访问控制规则
     */
    async ModifyAclRule(req, cb) {
        return this.request("ModifyAclRule", req, cb);
    }
    /**
     * 查询新企业安全组规则  从node接口迁移   原接口DescribeSecurityGroupNewList
     */
    async DescribeEnterpriseSecurityGroupRuleList(req, cb) {
        return this.request("DescribeEnterpriseSecurityGroupRuleList", req, cb);
    }
    /**
     * 查询防火墙弹性公网IP
     */
    async DescribeCfwEips(req, cb) {
        return this.request("DescribeCfwEips", req, cb);
    }
    /**
     * 查询入侵防御放通封禁列表
     */
    async DescribeBlockIgnoreList(req, cb) {
        return this.request("DescribeBlockIgnoreList", req, cb);
    }
    /**
     * 删除NAT访问控制规则
     */
    async RemoveNatAcRule(req, cb) {
        return this.request("RemoveNatAcRule", req, cb);
    }
    /**
     * 访问控制列表
     */
    async DescribeAcLists(req, cb) {
        return this.request("DescribeAcLists", req, cb);
    }
    /**
     * 防火墙垂直扩容
     */
    async ExpandCfwVertical(req, cb) {
        return this.request("ExpandCfwVertical", req, cb);
    }
    /**
     * 创建VPC间防火墙(防火墙组)
     */
    async CreateVpcFwGroup(req, cb) {
        return this.request("CreateVpcFwGroup", req, cb);
    }
    /**
     * 互联网边界防火墙一键开关
     */
    async ModifyAllPublicIPSwitchStatus(req, cb) {
        return this.request("ModifyAllPublicIPSwitchStatus", req, cb);
    }
    /**
     * 获取安全组关联实例列表
     */
    async DescribeAssociatedInstanceList(req, cb) {
        return this.request("DescribeAssociatedInstanceList", req, cb);
    }
    /**
     * 编辑NAT防火墙
     */
    async ModifyNatInstance(req, cb) {
        return this.request("ModifyNatInstance", req, cb);
    }
    /**
     * 删除规则
     */
    async DeleteAcRule(req, cb) {
        return this.request("DeleteAcRule", req, cb);
    }
    /**
     * 查询NAT访问控制列表
     */
    async DescribeNatAcRule(req, cb) {
        return this.request("DescribeNatAcRule", req, cb);
    }
    /**
     * 获取防火墙同步状态，一般在执行同步操作后查询
     */
    async DescribeFwSyncStatus(req, cb) {
        return this.request("DescribeFwSyncStatus", req, cb);
    }
    /**
     * DescribeNatFwInstance 获取租户所有NAT实例
     */
    async DescribeNatFwInstance(req, cb) {
        return this.request("DescribeNatFwInstance", req, cb);
    }
    /**
     * 创建暴露数据库白名单规则
     */
    async CreateDatabaseWhiteListRules(req, cb) {
        return this.request("CreateDatabaseWhiteListRules", req, cb);
    }
    /**
     * 创建防火墙实例和接入域名（Region参数必填）
     */
    async CreateNatFwInstanceWithDomain(req, cb) {
        return this.request("CreateNatFwInstanceWithDomain", req, cb);
    }
    /**
     * 创建访问控制规则
     */
    async CreateAcRules(req, cb) {
        return this.request("CreateAcRules", req, cb);
    }
    /**
     * 修改企业安全组下发状态
     */
    async ModifyEnterpriseSecurityDispatchStatus(req, cb) {
        return this.request("ModifyEnterpriseSecurityDispatchStatus", req, cb);
    }
    /**
     * DescribeTLogInfo告警中心概况查询
     */
    async DescribeTLogInfo(req, cb) {
        return this.request("DescribeTLogInfo", req, cb);
    }
    /**
     * 同步资产-互联网&VPC（新）
     */
    async ModifyRunSyncAsset(req, cb) {
        return this.request("ModifyRunSyncAsset", req, cb);
    }
    /**
     * DescribeGuideScanInfo新手引导扫描接口信息
     */
    async DescribeGuideScanInfo(req, cb) {
        return this.request("DescribeGuideScanInfo", req, cb);
    }
    /**
     * 查询地址模板列表
     */
    async DescribeAddressTemplateList(req, cb) {
        return this.request("DescribeAddressTemplateList", req, cb);
    }
    /**
     * GetNatInstance 获取租户所有NAT实例及实例卡片信息
     */
    async DescribeNatFwInstancesInfo(req, cb) {
        return this.request("DescribeNatFwInstancesInfo", req, cb);
    }
    /**
     * 防火墙实例重新选择vpc或nat
     */
    async ModifyNatFwReSelect(req, cb) {
        return this.request("ModifyNatFwReSelect", req, cb);
    }
    /**
     * 日志存储设置，可以修改存储时间和清空日志
     */
    async ModifyStorageSetting(req, cb) {
        return this.request("ModifyStorageSetting", req, cb);
    }
    /**
     * DescribeResourceGroup资产中心资产树信息
     */
    async DescribeResourceGroup(req, cb) {
        return this.request("DescribeResourceGroup", req, cb);
    }
    /**
     * 同步防火墙操作，包括同步防火墙路由（若vpc，专线网关等增加了Cidr，需要手动同步一下路由使之在防火墙上生效）等。
     */
    async SyncFwOperate(req, cb) {
        return this.request("SyncFwOperate", req, cb);
    }
    /**
     * 修改规则
     */
    async ModifyAcRule(req, cb) {
        return this.request("ModifyAcRule", req, cb);
    }
    /**
     * 串行防火墙IP开关列表
     */
    async DescribeFwEdgeIps(req, cb) {
        return this.request("DescribeFwEdgeIps", req, cb);
    }
    /**
     * 修改NAT防火墙开关
     */
    async ModifyNatFwSwitch(req, cb) {
        return this.request("ModifyNatFwSwitch", req, cb);
    }
    /**
     * DescribeTLogIpList告警中心IP柱形图
     */
    async DescribeTLogIpList(req, cb) {
        return this.request("DescribeTLogIpList", req, cb);
    }
    /**
     * 创建地址模板规则
     */
    async CreateAddressTemplate(req, cb) {
        return this.request("CreateAddressTemplate", req, cb);
    }
    /**
     * 添加nat访问控制规则
     */
    async AddNatAcRule(req, cb) {
        return this.request("AddNatAcRule", req, cb);
    }
    /**
     * DescribeBlockStaticList 告警中心柱形图
     */
    async DescribeBlockStaticList(req, cb) {
        return this.request("DescribeBlockStaticList", req, cb);
    }
    /**
     * 查询入侵防御规则白名单接口
     */
    async DescribeIdsWhiteRule(req, cb) {
        return this.request("DescribeIdsWhiteRule", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248790, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.chdfs = void 0;
const v20190718_1 = require("./v20190718");
const v20201112_1 = require("./v20201112");
exports.chdfs = {
    v20190718: v20190718_1.v20190718,
    v20201112: v20201112_1.v20201112,
};

}, function(modId) { var map = {"./v20190718":1738984248791,"./v20201112":1738984248794}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248791, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190718 = void 0;
const Models = require("./chdfs_models");
const chdfs_client_1 = require("./chdfs_client");
exports.v20190718 = {
    Client: chdfs_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./chdfs_models":1738984248792,"./chdfs_client":1738984248793}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248792, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248793, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * chdfs client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("chdfs.tencentcloudapi.com", "2019-07-18", clientConfig);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

批量创建回热任务，回热任务ID、状态和创建时间无需填写。
     */
    async CreateRestoreTasks(req, cb) {
        return this.request("CreateRestoreTasks", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

批量创建生命周期规则，生命周期规则ID和创建时间无需填写。
     */
    async CreateLifeCycleRules(req, cb) {
        return this.request("CreateLifeCycleRules", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

修改挂载点属性。
     */
    async ModifyMountPoint(req, cb) {
        return this.request("ModifyMountPoint", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

批量修改权限规则属性，需要指定权限规则ID，支持修改权限规则地址、访问模式和优先级。
     */
    async ModifyAccessRules(req, cb) {
        return this.request("ModifyAccessRules", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

删除挂载点。
     */
    async DeleteMountPoint(req, cb) {
        return this.request("DeleteMountPoint", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

查看挂载点详细信息。
     */
    async DescribeMountPoint(req, cb) {
        return this.request("DescribeMountPoint", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

批量删除权限规则。
     */
    async DeleteAccessRules(req, cb) {
        return this.request("DeleteAccessRules", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

修改权限组属性。
     */
    async ModifyAccessGroup(req, cb) {
        return this.request("ModifyAccessGroup", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

创建文件系统挂载点，仅限于创建成功的文件系统。
     */
    async CreateMountPoint(req, cb) {
        return this.request("CreateMountPoint", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

批量修改生命周期规则属性，需要指定生命周期规则ID，支持修改生命周期规则名称、路径、转换列表和状态。
     */
    async ModifyLifeCycleRules(req, cb) {
        return this.request("ModifyLifeCycleRules", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

查看权限组列表。
     */
    async DescribeAccessGroups(req, cb) {
        return this.request("DescribeAccessGroups", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

删除文件系统，不允许删除非空文件系统。
     */
    async DeleteFileSystem(req, cb) {
        return this.request("DeleteFileSystem", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

查看文件系统详细信息。
     */
    async DescribeFileSystem(req, cb) {
        return this.request("DescribeFileSystem", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

创建文件系统（异步）。
     */
    async CreateFileSystem(req, cb) {
        return this.request("CreateFileSystem", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

通过权限组ID查看权限规则列表。
     */
    async DescribeAccessRules(req, cb) {
        return this.request("DescribeAccessRules", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

批量删除生命周期规则。
     */
    async DeleteLifeCycleRules(req, cb) {
        return this.request("DeleteLifeCycleRules", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

批量创建权限规则，权限规则ID和创建时间无需填写。
     */
    async CreateAccessRules(req, cb) {
        return this.request("CreateAccessRules", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

修改文件系统属性，仅限于创建成功的文件系统。
     */
    async ModifyFileSystem(req, cb) {
        return this.request("ModifyFileSystem", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

查看文件系统列表。
     */
    async DescribeFileSystems(req, cb) {
        return this.request("DescribeFileSystems", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

通过文件系统ID或者权限组ID查看挂载点列表。
     */
    async DescribeMountPoints(req, cb) {
        return this.request("DescribeMountPoints", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

通过文件系统ID查看资源标签列表。
     */
    async DescribeResourceTags(req, cb) {
        return this.request("DescribeResourceTags", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

通过文件系统ID查看回热任务列表。
     */
    async DescribeRestoreTasks(req, cb) {
        return this.request("DescribeRestoreTasks", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

修改资源标签列表，全量覆盖。
     */
    async ModifyResourceTags(req, cb) {
        return this.request("ModifyResourceTags", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

通过文件系统ID查看生命周期规则列表。
     */
    async DescribeLifeCycleRules(req, cb) {
        return this.request("DescribeLifeCycleRules", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

删除权限组。
     */
    async DeleteAccessGroup(req, cb) {
        return this.request("DeleteAccessGroup", req, cb);
    }
    /**
     * 云API旧版本2019-07-18预下线，所有功能由新版本2020-11-12替代，目前云API主要用作控制台使用。

创建权限组。
     */
    async CreateAccessGroup(req, cb) {
        return this.request("CreateAccessGroup", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248794, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201112 = void 0;
const Models = require("./chdfs_models");
const chdfs_client_1 = require("./chdfs_client");
exports.v20201112 = {
    Client: chdfs_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./chdfs_models":1738984248795,"./chdfs_client":1738984248796}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248795, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248796, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * chdfs client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("chdfs.tencentcloudapi.com", "2020-11-12", clientConfig);
    }
    /**
     * 批量创建回热任务，回热任务ID、状态和创建时间无需填写。
     */
    async CreateRestoreTasks(req, cb) {
        return this.request("CreateRestoreTasks", req, cb);
    }
    /**
     * 批量创建生命周期规则，生命周期规则ID和创建时间无需填写。
     */
    async CreateLifeCycleRules(req, cb) {
        return this.request("CreateLifeCycleRules", req, cb);
    }
    /**
     * 修改挂载点属性。
     */
    async ModifyMountPoint(req, cb) {
        return this.request("ModifyMountPoint", req, cb);
    }
    /**
     * 批量修改权限规则属性，需要指定权限规则ID，支持修改权限规则地址、访问模式和优先级。
     */
    async ModifyAccessRules(req, cb) {
        return this.request("ModifyAccessRules", req, cb);
    }
    /**
     * 通过权限组ID查看权限规则列表。
     */
    async DescribeAccessRules(req, cb) {
        return this.request("DescribeAccessRules", req, cb);
    }
    /**
     * 删除挂载点。
     */
    async DeleteMountPoint(req, cb) {
        return this.request("DeleteMountPoint", req, cb);
    }
    /**
     * 查看挂载点详细信息。
     */
    async DescribeMountPoint(req, cb) {
        return this.request("DescribeMountPoint", req, cb);
    }
    /**
     * 批量删除权限规则。
     */
    async DeleteAccessRules(req, cb) {
        return this.request("DeleteAccessRules", req, cb);
    }
    /**
     * 通过文件系统ID查看资源标签列表。
     */
    async DescribeResourceTags(req, cb) {
        return this.request("DescribeResourceTags", req, cb);
    }
    /**
     * 创建文件系统挂载点，仅限于创建成功的文件系统。
     */
    async CreateMountPoint(req, cb) {
        return this.request("CreateMountPoint", req, cb);
    }
    /**
     * 批量修改生命周期规则属性，需要指定生命周期规则ID，支持修改生命周期规则名称、路径、转换列表和状态。
     */
    async ModifyLifeCycleRules(req, cb) {
        return this.request("ModifyLifeCycleRules", req, cb);
    }
    /**
     * 查看权限组列表。
     */
    async DescribeAccessGroups(req, cb) {
        return this.request("DescribeAccessGroups", req, cb);
    }
    /**
     * 给挂载点解绑多个权限组。
     */
    async DisassociateAccessGroups(req, cb) {
        return this.request("DisassociateAccessGroups", req, cb);
    }
    /**
     * 删除文件系统，不允许删除非空文件系统。
     */
    async DeleteFileSystem(req, cb) {
        return this.request("DeleteFileSystem", req, cb);
    }
    /**
     * 查看文件系统详细信息。
     */
    async DescribeFileSystem(req, cb) {
        return this.request("DescribeFileSystem", req, cb);
    }
    /**
     * 创建文件系统（异步）。
     */
    async CreateFileSystem(req, cb) {
        return this.request("CreateFileSystem", req, cb);
    }
    /**
     * 查看权限组详细信息。
     */
    async DescribeAccessGroup(req, cb) {
        return this.request("DescribeAccessGroup", req, cb);
    }
    /**
     * 批量删除生命周期规则。
     */
    async DeleteLifeCycleRules(req, cb) {
        return this.request("DeleteLifeCycleRules", req, cb);
    }
    /**
     * 批量创建权限规则，权限规则ID和创建时间无需填写。
     */
    async CreateAccessRules(req, cb) {
        return this.request("CreateAccessRules", req, cb);
    }
    /**
     * 修改文件系统属性，仅限于创建成功的文件系统。
     */
    async ModifyFileSystem(req, cb) {
        return this.request("ModifyFileSystem", req, cb);
    }
    /**
     * 给挂载点绑定多个权限组。
     */
    async AssociateAccessGroups(req, cb) {
        return this.request("AssociateAccessGroups", req, cb);
    }
    /**
     * 查看文件系统列表。
     */
    async DescribeFileSystems(req, cb) {
        return this.request("DescribeFileSystems", req, cb);
    }
    /**
     * 查看挂载点列表。
     */
    async DescribeMountPoints(req, cb) {
        return this.request("DescribeMountPoints", req, cb);
    }
    /**
     * 修改权限组属性。
     */
    async ModifyAccessGroup(req, cb) {
        return this.request("ModifyAccessGroup", req, cb);
    }
    /**
     * 通过文件系统ID查看回热任务列表。
     */
    async DescribeRestoreTasks(req, cb) {
        return this.request("DescribeRestoreTasks", req, cb);
    }
    /**
     * 修改资源标签列表，全量覆盖。
     */
    async ModifyResourceTags(req, cb) {
        return this.request("ModifyResourceTags", req, cb);
    }
    /**
     * 通过文件系统ID查看生命周期规则列表。
     */
    async DescribeLifeCycleRules(req, cb) {
        return this.request("DescribeLifeCycleRules", req, cb);
    }
    /**
     * 删除权限组。
     */
    async DeleteAccessGroup(req, cb) {
        return this.request("DeleteAccessGroup", req, cb);
    }
    /**
     * 创建权限组。
     */
    async CreateAccessGroup(req, cb) {
        return this.request("CreateAccessGroup", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248797, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ciam = void 0;
const v20220331_1 = require("./v20220331");
exports.ciam = {
    v20220331: v20220331_1.v20220331,
};

}, function(modId) { var map = {"./v20220331":1738984248798}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248798, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220331 = void 0;
const Models = require("./ciam_models");
const ciam_client_1 = require("./ciam_client");
exports.v20220331 = {
    Client: ciam_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ciam_models":1738984248799,"./ciam_client":1738984248800}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248799, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248800, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ciam client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ciam.tencentcloudapi.com", "2022-03-31", clientConfig);
    }
    /**
     * 更新用户状态
     */
    async UpdateUserStatus(req, cb) {
        return this.request("UpdateUserStatus", req, cb);
    }
    /**
     * 查询任务详情
     */
    async ListJobs(req, cb) {
        return this.request("ListJobs", req, cb);
    }
    /**
     * 删除用户目录
     */
    async DeleteUserStore(req, cb) {
        return this.request("DeleteUserStore", req, cb);
    }
    /**
     * 批量删除用户组
     */
    async DeleteUserGroups(req, cb) {
        return this.request("DeleteUserGroups", req, cb);
    }
    /**
     * 更新用户目录
     */
    async UpdateUserStore(req, cb) {
        return this.request("UpdateUserStore", req, cb);
    }
    /**
     * 新建接口导入用户任务
     */
    async CreateApiImportUserJob(req, cb) {
        return this.request("CreateApiImportUserJob", req, cb);
    }
    /**
     * 账号融合
     */
    async LinkAccount(req, cb) {
        return this.request("LinkAccount", req, cb);
    }
    /**
     * 重置用户密码
     */
    async ResetPassword(req, cb) {
        return this.request("ResetPassword", req, cb);
    }
    /**
     * 更新用户
     */
    async UpdateUser(req, cb) {
        return this.request("UpdateUser", req, cb);
    }
    /**
     * 多条件查询用户信息
     */
    async DescribeUser(req, cb) {
        return this.request("DescribeUser", req, cb);
    }
    /**
     * 查询用户组列表
     */
    async ListUserGroups(req, cb) {
        return this.request("ListUserGroups", req, cb);
    }
    /**
     * 查询用户列表
     */
    async ListUser(req, cb) {
        return this.request("ListUser", req, cb);
    }
    /**
     * 更新用户组
     */
    async UpdateUserGroup(req, cb) {
        return this.request("UpdateUserGroup", req, cb);
    }
    /**
     * 创建用户目录
     */
    async CreateUserStore(req, cb) {
        return this.request("CreateUserStore", req, cb);
    }
    /**
     * 批量删除用户
     */
    async DeleteUsers(req, cb) {
        return this.request("DeleteUsers", req, cb);
    }
    /**
     * 根据属性查询用户列表
     */
    async ListUserByProperty(req, cb) {
        return this.request("ListUserByProperty", req, cb);
    }
    /**
     * 根据ID查询用户信息
     */
    async DescribeUserById(req, cb) {
        return this.request("DescribeUserById", req, cb);
    }
    /**
     * 设置用户密码
     */
    async SetPassword(req, cb) {
        return this.request("SetPassword", req, cb);
    }
    /**
     * 新建文件导出用户任务
     */
    async CreateFileExportUserJob(req, cb) {
        return this.request("CreateFileExportUserJob", req, cb);
    }
    /**
     * 查询用户目录列表
     */
    async ListUserStore(req, cb) {
        return this.request("ListUserStore", req, cb);
    }
    /**
     * 创建用户组
     */
    async CreateUserGroup(req, cb) {
        return this.request("CreateUserGroup", req, cb);
    }
    /**
     * 创建用户
     */
    async CreateUser(req, cb) {
        return this.request("CreateUser", req, cb);
    }
    /**
     * 查询日志信息
     */
    async ListLogMessageByCondition(req, cb) {
        return this.request("ListLogMessageByCondition", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248801, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cii = void 0;
const v20210408_1 = require("./v20210408");
const v20201210_1 = require("./v20201210");
exports.cii = {
    v20210408: v20210408_1.v20210408,
    v20201210: v20201210_1.v20201210,
};

}, function(modId) { var map = {"./v20210408":1738984248802,"./v20201210":1738984248805}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248802, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210408 = void 0;
const Models = require("./cii_models");
const cii_client_1 = require("./cii_client");
exports.v20210408 = {
    Client: cii_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cii_models":1738984248803,"./cii_client":1738984248804}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248803, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248804, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cii client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cii.tencentcloudapi.com", "2021-04-08", clientConfig);
    }
    /**
     * 结构化复核差异查询接口，对比结构化复核前后数据差异，返回差异的部分。
     */
    async DescribeStructureDifference(req, cb) {
        return this.request("DescribeStructureDifference", req, cb);
    }
    /**
     * 依据任务ID获取结构化结果接口。
     */
    async DescribeStructureTaskResult(req, cb) {
        return this.request("DescribeStructureTaskResult", req, cb);
    }
    /**
     * 上传医疗影像文件，可以用来做结构化。
     */
    async UploadMedicalFile(req, cb) {
        let options = {
            multipart: true
        };
        return this.request("UploadMedicalFile", req, cb);
    }
    /**
     * 本接口(CreateUnderwriteTaskById)用于根据结构化任务ID创建核保任务
     */
    async CreateUnderwriteTaskById(req, cb) {
        return this.request("CreateUnderwriteTaskById", req, cb);
    }
    /**
     * 本接口(DescribeUnderwriteTask)用于查询核保任务结果
     */
    async DescribeUnderwriteTask(req, cb) {
        return this.request("DescribeUnderwriteTask", req, cb);
    }
    /**
     * 本接口(DescribeMachineUnderwrite)用于查询机器核保任务数据
     */
    async DescribeMachineUnderwrite(req, cb) {
        return this.request("DescribeMachineUnderwrite", req, cb);
    }
    /**
     * 本接口(CreateStructureTask)基于提供的客户及保单信息，创建并启动结构化识别任务。
     */
    async CreateStructureTask(req, cb) {
        return this.request("CreateStructureTask", req, cb);
    }
    /**
     * 本接口(CreateAutoClassifyStructureTask)基于提供的客户及保单信息，创建并启动结构化识别任务。
     */
    async CreateAutoClassifyStructureTask(req, cb) {
        return this.request("CreateAutoClassifyStructureTask", req, cb);
    }
    /**
     * 结构化对比查询接口，对比结构化复核前后数据差异，查询识别正确率，召回率。
     */
    async DescribeStructCompareData(req, cb) {
        return this.request("DescribeStructCompareData", req, cb);
    }
    /**
     * 获取图片质量分
     */
    async DescribeQualityScore(req, cb) {
        let options = {
            multipart: true
        };
        return this.request("DescribeQualityScore", req, cb);
    }
    /**
     * 本接口(DescribeStructureResult)用于查询结构化结果接口
     */
    async DescribeStructureResult(req, cb) {
        return this.request("DescribeStructureResult", req, cb);
    }
    /**
     * 辅助用户对批量报告自动分类
     */
    async DescribeReportClassify(req, cb) {
        return this.request("DescribeReportClassify", req, cb);
    }
    /**
     * 如果主任务下的报告不满足需求，可以基于主任务批量添加子任务
     */
    async AddSubStructureTasks(req, cb) {
        return this.request("AddSubStructureTasks", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248805, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201210 = void 0;
const Models = require("./cii_models");
const cii_client_1 = require("./cii_client");
exports.v20201210 = {
    Client: cii_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cii_models":1738984248806,"./cii_client":1738984248807}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248806, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248807, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cii client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cii.tencentcloudapi.com", "2020-12-10", clientConfig);
    }
    /**
     * 结构化对比查询接口，对比结构化复核前后数据差异，查询识别正确率，召回率。
     */
    async DescribeStructCompareData(req, cb) {
        return this.request("DescribeStructCompareData", req, cb);
    }
    /**
     * 依据任务ID获取结构化结果接口。
     */
    async DescribeStructureTaskResult(req, cb) {
        return this.request("DescribeStructureTaskResult", req, cb);
    }
    /**
     * 基于提供的客户及保单信息，启动结构化识别任务。
     */
    async CreateStructureTask(req, cb) {
        return this.request("CreateStructureTask", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248808, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cim = void 0;
const v20190318_1 = require("./v20190318");
exports.cim = {
    v20190318: v20190318_1.v20190318,
};

}, function(modId) { var map = {"./v20190318":1738984248809}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248809, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190318 = void 0;
const Models = require("./cim_models");
const cim_client_1 = require("./cim_client");
exports.v20190318 = {
    Client: cim_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cim_models":1738984248810,"./cim_client":1738984248811}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248810, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248811, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cim client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cim.tencentcloudapi.com", "2019-03-18", clientConfig);
    }
    /**
     * 获取云通信IM中腾讯云账号对应的SDKAppID
     */
    async DescribeSdkAppid(req, cb) {
        return this.request("DescribeSdkAppid", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248812, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cis = void 0;
const v20180408_1 = require("./v20180408");
exports.cis = {
    v20180408: v20180408_1.v20180408,
};

}, function(modId) { var map = {"./v20180408":1738984248813}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248813, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180408 = void 0;
const Models = require("./cis_models");
const cis_client_1 = require("./cis_client");
exports.v20180408 = {
    Client: cis_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cis_models":1738984248814,"./cis_client":1738984248815}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248814, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248815, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cis client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cis.tencentcloudapi.com", "2018-04-08", clientConfig);
    }
    /**
     * 此接口（DescribeContainerInstances）查询容器实例列表
     */
    async DescribeContainerInstances(req, cb) {
        return this.request("DescribeContainerInstances", req, cb);
    }
    /**
     * 此接口（CreateContainerInstance）用于创建容器实例
     */
    async CreateContainerInstance(req, cb) {
        return this.request("CreateContainerInstance", req, cb);
    }
    /**
     * 此接口（InquiryPriceCreateCis）用于查询容器实例价格
     */
    async InquiryPriceCreateCis(req, cb) {
        return this.request("InquiryPriceCreateCis", req, cb);
    }
    /**
     * 此接口（DescribeContainerInstance）用于获取容器实例详情
     */
    async DescribeContainerInstance(req, cb) {
        return this.request("DescribeContainerInstance", req, cb);
    }
    /**
     * 此接口（DescribeContainerInstanceEvents）用于查询容器实例事件列表
     */
    async DescribeContainerInstanceEvents(req, cb) {
        return this.request("DescribeContainerInstanceEvents", req, cb);
    }
    /**
     * 此接口（DeleteContainerInstance）用于删除容器实例
     */
    async DeleteContainerInstance(req, cb) {
        return this.request("DeleteContainerInstance", req, cb);
    }
    /**
     * 此接口（DescribeContainerLog）用于获取容器日志信息
     */
    async DescribeContainerLog(req, cb) {
        return this.request("DescribeContainerLog", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248816, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ckafka = void 0;
const v20190819_1 = require("./v20190819");
exports.ckafka = {
    v20190819: v20190819_1.v20190819,
};

}, function(modId) { var map = {"./v20190819":1738984248817}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248817, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190819 = void 0;
const Models = require("./ckafka_models");
const ckafka_client_1 = require("./ckafka_client");
exports.v20190819 = {
    Client: ckafka_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ckafka_models":1738984248818,"./ckafka_client":1738984248819}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248818, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248819, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ckafka client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ckafka.tencentcloudapi.com", "2019-08-19", clientConfig);
    }
    /**
     * 续费Ckafka实例, 目前只支持国内站包年包月实例续费
     */
    async RenewCkafkaInstance(req, cb) {
        return this.request("RenewCkafkaInstance", req, cb);
    }
    /**
     * 查看路由信息
     */
    async DescribeRoute(req, cb) {
        return this.request("DescribeRoute", req, cb);
    }
    /**
     * 获取消费分组信息
     */
    async DescribeGroupInfo(req, cb) {
        return this.request("DescribeGroupInfo", req, cb);
    }
    /**
     * 创建消费者组
     */
    async CreateConsumer(req, cb) {
        return this.request("CreateConsumer", req, cb);
    }
    /**
     * 查询消费分组信息
     */
    async DescribeConsumerGroup(req, cb) {
        return this.request("DescribeConsumerGroup", req, cb);
    }
    /**
     * 查询Datahub连接源
     */
    async DescribeConnectResource(req, cb) {
        return this.request("DescribeConnectResource", req, cb);
    }
    /**
     * 由于出参需要更新，当前接口将会在未来版本中废弃，建议用户迁移使用 CreatePostPaidInstance 接口。创建按量计费实例。通常用于 SDK 或云 API 控制台调用接口，创建后付费 CKafka 实例。调用接口与在 CKafka 控制台购买按量付费实例效果相同。
     */
    async CreateInstancePost(req, cb) {
        return this.request("CreateInstancePost", req, cb);
    }
    /**
     * 查询ACL规则列表
     */
    async DescribeAclRule(req, cb) {
        return this.request("DescribeAclRule", req, cb);
    }
    /**
     * 查询订阅某主题消息分组信息
     */
    async DescribeTopicSubscribeGroup(req, cb) {
        return this.request("DescribeTopicSubscribeGroup", req, cb);
    }
    /**
     * 预付费实例变配接口，调整磁盘，带宽
     */
    async ModifyInstancePre(req, cb) {
        return this.request("ModifyInstancePre", req, cb);
    }
    /**
     * 获取主题列表详情（仅控制台调用）
     */
    async DescribeTopicDetail(req, cb) {
        return this.request("DescribeTopicDetail", req, cb);
    }
    /**
     * 批量设置主题属性
     */
    async BatchModifyTopicAttributes(req, cb) {
        return this.request("BatchModifyTopicAttributes", req, cb);
    }
    /**
     * 删除路由
     */
    async DeleteRoute(req, cb) {
        return this.request("DeleteRoute", req, cb);
    }
    /**
     * 通过HTTP接入层发送消息
     */
    async SendMessage(req, cb) {
        return this.request("SendMessage", req, cb);
    }
    /**
     * 修改DIP主题属性
     */
    async ModifyDatahubTopic(req, cb) {
        return this.request("ModifyDatahubTopic", req, cb);
    }
    /**
     * 设置自动化运维属性
     */
    async ModifyRoutineMaintenanceTask(req, cb) {
        return this.request("ModifyRoutineMaintenanceTask", req, cb);
    }
    /**
     * 创建主题ip白名单
     */
    async CreateTopicIpWhiteList(req, cb) {
        return this.request("CreateTopicIpWhiteList", req, cb);
    }
    /**
     * 删除Datahub连接源
     */
    async DeleteConnectResource(req, cb) {
        return this.request("DeleteConnectResource", req, cb);
    }
    /**
     * 枚举消费分组(精简版)
     */
    async DescribeGroup(req, cb) {
        return this.request("DescribeGroup", req, cb);
    }
    /**
     * 根据位点查询消息列表
     */
    async FetchMessageListByOffset(req, cb) {
        return this.request("FetchMessageListByOffset", req, cb);
    }
    /**
     * 修改Datahub任务
     */
    async ModifyDatahubTask(req, cb) {
        return this.request("ModifyDatahubTask", req, cb);
    }
    /**
     * 查询Datahub任务列表
     */
    async DescribeDatahubTasks(req, cb) {
        return this.request("DescribeDatahubTasks", req, cb);
    }
    /**
     * 本接口（DescribeInstance）用于在用户账户下获取消息队列 CKafka 实例列表
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 获取Topic 副本详情信息
     */
    async DescribeTopicSyncReplica(req, cb) {
        return this.request("DescribeTopicSyncReplica", req, cb);
    }
    /**
     * 添加实例路由
     */
    async CreateRoute(req, cb) {
        return this.request("CreateRoute", req, cb);
    }
    /**
     * 删除Dip任务
     */
    async DeleteDatahubTask(req, cb) {
        return this.request("DeleteDatahubTask", req, cb);
    }
    /**
     * 删除消费组
     */
    async DeleteGroup(req, cb) {
        return this.request("DeleteGroup", req, cb);
    }
    /**
     * 查询用户信息
     */
    async DescribeUser(req, cb) {
        return this.request("DescribeUser", req, cb);
    }
    /**
     * 获取实例Prometheus信息
     */
    async DescribePrometheus(req, cb) {
        return this.request("DescribePrometheus", req, cb);
    }
    /**
     * 创建DIP主题
     */
    async CreateDatahubTopic(req, cb) {
        return this.request("CreateDatahubTopic", req, cb);
    }
    /**
     * 删除后付费实例
     */
    async DeleteInstancePost(req, cb) {
        return this.request("DeleteInstancePost", req, cb);
    }
    /**
     * 枚举ACL
     */
    async DescribeACL(req, cb) {
        return this.request("DescribeACL", req, cb);
    }
    /**
     * 查询DIP主题列表
     */
    async DescribeDatahubTopics(req, cb) {
        return this.request("DescribeDatahubTopics", req, cb);
    }
    /**
     * 取消授权token
     */
    async CancelAuthorizationToken(req, cb) {
        return this.request("CancelAuthorizationToken", req, cb);
    }
    /**
     * 创建实例(预付费包年包月),  仅支持创建专业版实例
     */
    async CreateInstancePre(req, cb) {
        return this.request("CreateInstancePre", req, cb);
    }
    /**
     * 根据指定offset位置的消息
     */
    async FetchMessageByOffset(req, cb) {
        return this.request("FetchMessageByOffset", req, cb);
    }
    /**
     * 删除DIP主题
     */
    async DeleteDatahubTopic(req, cb) {
        return this.request("DeleteDatahubTopic", req, cb);
    }
    /**
     * 删除主题IP白名单
     */
    async DeleteTopicIpWhiteList(req, cb) {
        return this.request("DeleteTopicIpWhiteList", req, cb);
    }
    /**
     * 枚举地域,只支持广州地域
     */
    async DescribeRegion(req, cb) {
        return this.request("DescribeRegion", req, cb);
    }
    /**
     * 设置Groups 消费分组offset
     */
    async ModifyGroupOffsets(req, cb) {
        return this.request("ModifyGroupOffsets", req, cb);
    }
    /**
     * 添加 ACL 策略
     */
    async CreateAcl(req, cb) {
        return this.request("CreateAcl", req, cb);
    }
    /**
     * 创建ckafka主题
     */
    async CreateTopic(req, cb) {
        return this.request("CreateTopic", req, cb);
    }
    /**
     * 创建Datahub连接源
     */
    async CreateConnectResource(req, cb) {
        return this.request("CreateConnectResource", req, cb);
    }
    /**
     * 查询Datahub任务信息
     */
    async DescribeDatahubTask(req, cb) {
        return this.request("DescribeDatahubTask", req, cb);
    }
    /**
     * 用于查询cdc-ckafka任务状态
     */
    async CheckCdcCluster(req, cb) {
        return this.request("CheckCdcCluster", req, cb);
    }
    /**
     * 获取Topic流量排行，消费者流量排行
     */
    async DescribeTopicFlowRanking(req, cb) {
        return this.request("DescribeTopicFlowRanking", req, cb);
    }
    /**
     * 修改ACL策略，目前只支持预设规则的是否应用到新增topic这一项的修改
     */
    async ModifyAclRule(req, cb) {
        return this.request("ModifyAclRule", req, cb);
    }
    /**
     * 本接口用于增加主题中的分区
     */
    async CreatePartition(req, cb) {
        return this.request("CreatePartition", req, cb);
    }
    /**
     * 查询最新消息列表
     */
    async FetchLatestDatahubMessageList(req, cb) {
        return this.request("FetchLatestDatahubMessageList", req, cb);
    }
    /**
     * 查询任务状态
     */
    async DescribeTaskStatus(req, cb) {
        return this.request("DescribeTaskStatus", req, cb);
    }
    /**
     * 删除用户
     */
    async DeleteUser(req, cb) {
        return this.request("DeleteUser", req, cb);
    }
    /**
     * 编辑Datahub连接源
     */
    async ModifyConnectResource(req, cb) {
        return this.request("ModifyConnectResource", req, cb);
    }
    /**
     * 根据指定offset位置的消息
     */
    async FetchDatahubMessageByOffset(req, cb) {
        return this.request("FetchDatahubMessageByOffset", req, cb);
    }
    /**
     * 创建最高权限的token
     */
    async CreateToken(req, cb) {
        return this.request("CreateToken", req, cb);
    }
    /**
     * 获取Datahub消费分组offset
     */
    async DescribeDatahubGroupOffsets(req, cb) {
        return this.request("DescribeDatahubGroupOffsets", req, cb);
    }
    /**
     * 删除ACL
     */
    async DeleteAcl(req, cb) {
        return this.request("DeleteAcl", req, cb);
    }
    /**
     * 查询用户列表
     */
    async DescribeAppInfo(req, cb) {
        return this.request("DescribeAppInfo", req, cb);
    }
    /**
     * 添加普罗米修斯监控1
     */
    async CreatePrometheus(req, cb) {
        return this.request("CreatePrometheus", req, cb);
    }
    /**
     * 按量实例缩容
     */
    async InstanceScalingDown(req, cb) {
        return this.request("InstanceScalingDown", req, cb);
    }
    /**
     * 获取主题属性
     */
    async DescribeTopicAttributes(req, cb) {
        return this.request("DescribeTopicAttributes", req, cb);
    }
    /**
     * 删除预付费实例，该接口会对实例执行隔离并删除的动作，执行成功后实例会被直接删除销毁
     */
    async DeleteInstancePre(req, cb) {
        return this.request("DeleteInstancePre", req, cb);
    }
    /**
     * 获取实例属性
     */
    async DescribeInstanceAttributes(req, cb) {
        return this.request("DescribeInstanceAttributes", req, cb);
    }
    /**
     * 用户账户下获取实例列表详情
     */
    async DescribeInstancesDetail(req, cb) {
        return this.request("DescribeInstancesDetail", req, cb);
    }
    /**
     * 批量添加ACL策略
     */
    async BatchCreateAcl(req, cb) {
        return this.request("BatchCreateAcl", req, cb);
    }
    /**
     * 创建DIP转储任务
     */
    async CreateDatahubTask(req, cb) {
        return this.request("CreateDatahubTask", req, cb);
    }
    /**
     * 删除ACL规则
     */
    async DeleteAclRule(req, cb) {
        return this.request("DeleteAclRule", req, cb);
    }
    /**
     * 修改删除路由延迟触发时间
     */
    async DeleteRouteTriggerTime(req, cb) {
        return this.request("DeleteRouteTriggerTime", req, cb);
    }
    /**
     * 批量修改消费组offset
     */
    async BatchModifyGroupOffsets(req, cb) {
        return this.request("BatchModifyGroupOffsets", req, cb);
    }
    /**
     * 当前接口用来替代 CreateInstancePost 接口。创建按量计费实例。通常用于 SDK 或云 API 控制台调用接口，创建后付费 CKafka 实例。调用接口与在 CKafka 控制台购买按量付费实例效果相同。
     */
    async CreatePostPaidInstance(req, cb) {
        return this.request("CreatePostPaidInstance", req, cb);
    }
    /**
     * 获取消费分组offset
     */
    async DescribeGroupOffsets(req, cb) {
        return this.request("DescribeGroupOffsets", req, cb);
    }
    /**
     * 根据时间戳查询消息列表
     */
    async FetchMessageListByTimestamp(req, cb) {
        return this.request("FetchMessageListByTimestamp", req, cb);
    }
    /**
     * 给实例授权token
     */
    async AuthorizeToken(req, cb) {
        return this.request("AuthorizeToken", req, cb);
    }
    /**
     * 设置实例属性
     */
    async ModifyInstanceAttributes(req, cb) {
        return this.request("ModifyInstanceAttributes", req, cb);
    }
    /**
     * 查询topic 生产端连接信息
     */
    async DescribeTopicProduceConnection(req, cb) {
        return this.request("DescribeTopicProduceConnection", req, cb);
    }
    /**
     * 接口请求域名：https://ckafka.tencentcloudapi.com
本接口（DescribeTopic）用于在用户获取消息队列 CKafka 实例的主题列表
     */
    async DescribeTopic(req, cb) {
        return this.request("DescribeTopic", req, cb);
    }
    /**
     * 添加 ACL 规则
     */
    async CreateAclRule(req, cb) {
        return this.request("CreateAclRule", req, cb);
    }
    /**
     * 获取DIP主题属性
     */
    async DescribeDatahubTopic(req, cb) {
        return this.request("DescribeDatahubTopic", req, cb);
    }
    /**
     * 用于查看ckafka的可用区列表
     */
    async DescribeCkafkaZone(req, cb) {
        return this.request("DescribeCkafkaZone", req, cb);
    }
    /**
     * 查询Datahub连接源列表
     */
    async DescribeConnectResources(req, cb) {
        return this.request("DescribeConnectResources", req, cb);
    }
    /**
     * 用于cdc的专用ckafka集群
     */
    async CreateCdcCluster(req, cb) {
        return this.request("CreateCdcCluster", req, cb);
    }
    /**
     * 添加用户
     */
    async CreateUser(req, cb) {
        return this.request("CreateUser", req, cb);
    }
    /**
     * 删除ckafka主题
     */
    async DeleteTopic(req, cb) {
        return this.request("DeleteTopic", req, cb);
    }
    /**
     * 修改密码
     */
    async ModifyPassword(req, cb) {
        return this.request("ModifyPassword", req, cb);
    }
    /**
     * Ckafka实例购买/续费询价
     */
    async InquireCkafkaPrice(req, cb) {
        return this.request("InquireCkafkaPrice", req, cb);
    }
    /**
     * 本接口用于修改主题属性。
     */
    async ModifyTopicAttributes(req, cb) {
        return this.request("ModifyTopicAttributes", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248820, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.clb = void 0;
const v20180317_1 = require("./v20180317");
exports.clb = {
    v20180317: v20180317_1.v20180317,
};

}, function(modId) { var map = {"./v20180317":1738984248821}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248821, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180317 = void 0;
const Models = require("./clb_models");
const clb_client_1 = require("./clb_client");
exports.v20180317 = {
    Client: clb_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./clb_models":1738984248822,"./clb_client":1738984248823}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248822, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248823, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * clb client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("clb.tencentcloudapi.com", "2018-03-17", clientConfig);
    }
    /**
     * 拉取配置绑定的 server 或 location，如果 domain 存在，结果将根据 domain 过滤。或拉取配置绑定的 loadbalancer。
     */
    async DescribeCustomizedConfigAssociateList(req, cb) {
        return this.request("DescribeCustomizedConfigAssociateList", req, cb);
    }
    /**
     * InquiryPriceModifyLoadBalancer接口修改负载均衡配置询价。
     */
    async InquiryPriceModifyLoadBalancer(req, cb) {
        return this.request("InquiryPriceModifyLoadBalancer", req, cb);
    }
    /**
     * 批量解绑四七层后端服务。批量解绑的资源数量上限为500。只支持VPC网络负载均衡。
     */
    async BatchDeregisterTargets(req, cb) {
        return this.request("BatchDeregisterTargets", req, cb);
    }
    /**
     * 查询集群信息列表，支持以集群类型、集群唯一ID、集群名字、集群标签、集群内vip、集群内负载均衡唯一id、集群网络类型、可用区等条件进行检索
     */
    async DescribeExclusiveClusters(req, cb) {
        return this.request("DescribeExclusiveClusters", req, cb);
    }
    /**
     * 用户需要先创建出一个HTTPS:443监听器，并在其下创建转发规则。通过调用本接口，系统会自动创建出一个HTTP:80监听器（如果之前不存在），并在其下创建转发规则，与HTTPS:443监听器下的Domains（在入参中指定）对应。创建成功后可以通过HTTP:80地址自动跳转为HTTPS:443地址进行访问。
本接口为异步接口，本接口返回成功后需以返回的RequestID为入参，调用DescribeTaskStatus接口查询本次任务是否成功。
     */
    async AutoRewrite(req, cb) {
        return this.request("AutoRewrite", req, cb);
    }
    /**
     * 批量修改目标组的服务器权重。
本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async ModifyTargetGroupInstancesWeight(req, cb) {
        return this.request("ModifyTargetGroupInstancesWeight", req, cb);
    }
    /**
     * DeregisterTargetsFromClassicalLB 接口用于解绑负载均衡后端服务。本接口为异步接口，接口返回成功后，需以返回的 RequestId 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async DeregisterTargetsFromClassicalLB(req, cb) {
        return this.request("DeregisterTargetsFromClassicalLB", req, cb);
    }
    /**
     * 查询负载均衡的详细信息，包括监听器，规则及后端目标。
     */
    async DescribeLoadBalancersDetail(req, cb) {
        return this.request("DescribeLoadBalancersDetail", req, cb);
    }
    /**
     * 本接口(AssociateTargetGroups)用来将目标组绑定到负载均衡的监听器（四层协议）或转发规则（七层协议）上。
本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async AssociateTargetGroups(req, cb) {
        return this.request("AssociateTargetGroups", req, cb);
    }
    /**
     * 从目标组中解绑服务器。
本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async DeregisterTargetGroupInstances(req, cb) {
        return this.request("DeregisterTargetGroupInstances", req, cb);
    }
    /**
     * DescribeListeners 接口可根据负载均衡器 ID、监听器的协议或端口作为过滤条件获取监听器列表。如果不指定任何过滤条件，则返回该负载均衡实例下的所有监听器。
     */
    async DescribeListeners(req, cb) {
        return this.request("DescribeListeners", req, cb);
    }
    /**
     * 创建主题，默认开启全文索引和键值索引。如果不存在CLB专有日志集，则创建失败。
     */
    async CreateTopic(req, cb) {
        return this.request("CreateTopic", req, cb);
    }
    /**
     * 修改一个或多个负载均衡实例所属项目。
     */
    async ModifyLoadBalancersProject(req, cb) {
        return this.request("ModifyLoadBalancersProject", req, cb);
    }
    /**
     * 负载均衡维度的个性化配置相关操作：创建、删除、修改、绑定、解绑
     */
    async SetCustomizedConfigForLoadBalancer(req, cb) {
        return this.request("SetCustomizedConfigForLoadBalancer", req, cb);
    }
    /**
     * RegisterTargetsWithClassicalLB 接口用于绑定后端服务到传统型负载均衡。本接口为异步接口，接口返回成功后，需以返回的 RequestId 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async RegisterTargetsWithClassicalLB(req, cb) {
        return this.request("RegisterTargetsWithClassicalLB", req, cb);
    }
    /**
     * DeregisterTargets 接口用来将一台或多台后端服务从负载均衡的监听器或转发规则上解绑，对于四层监听器，只需指定监听器ID即可，对于七层监听器，还需通过LocationId或Domain+Url指定转发规则。
本接口为异步接口，本接口返回成功后需以返回的RequestID为入参，调用DescribeTaskStatus接口查询本次任务是否成功。
     */
    async DeregisterTargets(req, cb) {
        return this.request("DeregisterTargets", req, cb);
    }
    /**
     * 修改负载均衡实例的属性。支持修改负载均衡实例的名称、设置负载均衡的跨域属性。
注意：非带宽上移用户的 CLB 实例必须加入带宽包才可以设置跨域属性。
本接口为异步接口，接口返回成功后，需以得到的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async ModifyLoadBalancerAttributes(req, cb) {
        return this.request("ModifyLoadBalancerAttributes", req, cb);
    }
    /**
     * 批量修改目标组服务器端口。
本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async ModifyTargetGroupInstancesPort(req, cb) {
        return this.request("ModifyTargetGroupInstancesPort", req, cb);
    }
    /**
     * BatchModifyTargetWeight 接口用于批量修改负载均衡监听器绑定的后端机器的转发权重。批量修改的资源数量上限为500。本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。<br/>负载均衡的4层和7层监听器支持此接口，传统型负载均衡不支持。
     */
    async BatchModifyTargetWeight(req, cb) {
        return this.request("BatchModifyTargetWeight", req, cb);
    }
    /**
     * DeleteRewrite 接口支持删除指定转发规则之间的重定向关系。
本接口为异步接口，本接口返回成功后需以返回的RequestID为入参，调用DescribeTaskStatus接口查询本次任务是否成功。
     */
    async DeleteRewrite(req, cb) {
        return this.request("DeleteRewrite", req, cb);
    }
    /**
     * SetLoadBalancerSecurityGroups 接口支持对一个公网负载均衡实例执行设置（绑定、解绑）安全组操作。查询一个负载均衡实例目前已绑定的安全组，可使用 DescribeLoadBalancers 接口。本接口是set语义，
绑定操作时，入参需要传入负载均衡实例要绑定的所有安全组（已绑定的+新增绑定的）。
解绑操作时，入参需要传入负载均衡实例执行解绑后所绑定的所有安全组；如果要解绑所有安全组，可不传此参数，或传入空数组。注意：内网 CLB 绑定 EIP 后，CLB 上的安全组对来自 EIP 的流量不生效，对来自内网 CLB 的流量生效。
     */
    async SetLoadBalancerSecurityGroups(req, cb) {
        return this.request("SetLoadBalancerSecurityGroups", req, cb);
    }
    /**
     * InquiryPriceRefundLoadBalancer接口查询负载均衡退费价格。
     */
    async InquiryPriceRefundLoadBalancer(req, cb) {
        return this.request("InquiryPriceRefundLoadBalancer", req, cb);
    }
    /**
     * 本接口用来删除负载均衡实例下的监听器（四层和七层）。
本接口为异步接口，接口返回成功后，需以得到的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async DeleteListener(req, cb) {
        return this.request("DeleteListener", req, cb);
    }
    /**
     * 绑定或解绑一个安全组到多个公网负载均衡实例。注意：内网负载均衡不支持绑定安全组。
     */
    async SetSecurityGroupForLoadbalancers(req, cb) {
        return this.request("SetSecurityGroupForLoadbalancers", req, cb);
    }
    /**
     * 注册服务器到目标组。
本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async RegisterTargetGroupInstances(req, cb) {
        return this.request("RegisterTargetGroupInstances", req, cb);
    }
    /**
     * 启停负载均衡实例或者监听器。
本接口为异步接口，接口返回成功后，需以得到的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
该功能正在内测中，如需使用，请通过[工单申请](https://console.cloud.tencent.com/workorder/category?level1_id=6&level2_id=163&source=0&data_title=%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%20LB&step=1)。
     */
    async SetLoadBalancerStartStatus(req, cb) {
        return this.request("SetLoadBalancerStartStatus", req, cb);
    }
    /**
     * ModifyListener接口用来修改负载均衡监听器的属性，包括监听器名称、健康检查参数、证书信息、转发策略等。本接口不支持传统型负载均衡。
本接口为异步接口，本接口返回成功后需以返回的RequestID为入参，调用DescribeTaskStatus接口查询本次任务是否成功。
     */
    async ModifyListener(req, cb) {
        return this.request("ModifyListener", req, cb);
    }
    /**
     * 查询用户在当前地域支持可用区列表和资源列表。
     */
    async DescribeResources(req, cb) {
        return this.request("DescribeResources", req, cb);
    }
    /**
     * 查询后端云主机或弹性网卡绑定的负载均衡，支持弹性网卡和cvm查询。
     */
    async DescribeLBListeners(req, cb) {
        return this.request("DescribeLBListeners", req, cb);
    }
    /**
     * 批量绑定虚拟主机或弹性网卡，支持跨域绑定，支持四层、七层（TCP、UDP、HTTP、HTTPS）协议绑定。批量绑定的资源数量上限为500。只支持VPC网络负载均衡。
     */
    async BatchRegisterTargets(req, cb) {
        return this.request("BatchRegisterTargets", req, cb);
    }
    /**
     * RegisterFunctionTargets 接口用来将一个云函数绑定到负载均衡的7层转发规则，在此之前您需要先行创建相关的7层监听器（HTTP、HTTPS）和转发规则。
本接口为异步接口，本接口返回成功后需以返回的RequestID为入参，调用DescribeTaskStatus接口查询本次任务是否成功。<br/>
限制说明：
- 仅广州、深圳金融、上海、上海金融、北京、成都、中国香港、新加坡、孟买、东京、硅谷地域支持绑定 SCF。
- 仅标准账户类型支持绑定 SCF，传统账户类型不支持。建议升级为标准账户类型，详情可参见 [账户类型升级说明](https://cloud.tencent.com/document/product/1199/49090)。
- 传统型负载均衡不支持绑定 SCF。
- 基础网络类型不支持绑定 SCF。
- CLB 默认支持绑定同地域下的所有 SCF，可支持跨 VPC 绑定 SCF，不支持跨地域绑定。
- 目前仅 IPv4、IPv6 NAT64 版本的负载均衡支持绑定 SCF，IPv6 版本的暂不支持。
- 仅七层（HTTP、HTTPS）监听器支持绑定 SCF，四层（TCP、UDP、TCP SSL）监听器和七层 QUIC 监听器不支持。
- CLB 绑定 SCF 仅支持绑定“Event 函数”类型的云函数。
     */
    async RegisterFunctionTargets(req, cb) {
        return this.request("RegisterFunctionTargets", req, cb);
    }
    /**
     * 拉取个性化配置列表，返回用户 AppId 下指定类型的配置。
     */
    async DescribeCustomizedConfigList(req, cb) {
        return this.request("DescribeCustomizedConfigList", req, cb);
    }
    /**
     * ModifyRule 接口用来修改负载均衡七层监听器下的转发规则的各项属性，包括转发路径、健康检查属性、转发策略等。
本接口为异步接口，本接口返回成功后需以返回的RequestID为入参，调用DescribeTaskStatus接口查询本次任务是否成功。
     */
    async ModifyRule(req, cb) {
        return this.request("ModifyRule", req, cb);
    }
    /**
     * 增加、删除、更新负载均衡的日志服务(CLS)主题。
     */
    async SetLoadBalancerClsLog(req, cb) {
        return this.request("SetLoadBalancerClsLog", req, cb);
    }
    /**
     * 修改负载均衡的IP（client IP）封禁黑名单列表，一个转发规则最多支持封禁 2000000 个IP，及黑名单容量为 2000000。
（接口灰度中，如需使用请提工单）
     */
    async ModifyBlockIPList(req, cb) {
        return this.request("ModifyBlockIPList", req, cb);
    }
    /**
     * DescribeRewrite 接口可根据负载均衡实例ID，查询一个负载均衡实例下转发规则的重定向关系。如果不指定监听器ID或转发规则ID，则返回该负载均衡实例下的所有重定向关系。
     */
    async DescribeRewrite(req, cb) {
        return this.request("DescribeRewrite", req, cb);
    }
    /**
     * ModifyTargetPort接口用于修改监听器绑定的后端服务的端口。
本接口为异步接口，本接口返回成功后需以返回的RequestID为入参，调用DescribeTaskStatus接口查询本次任务是否成功。
     */
    async ModifyTargetPort(req, cb) {
        return this.request("ModifyTargetPort", req, cb);
    }
    /**
     * DeregisterFunctionTargets 接口用来将一个云函数从负载均衡的转发规则上解绑，对于七层监听器，还需通过 LocationId 或 Domain+Url 指定转发规则。
本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 [DescribeTaskStatus](https://cloud.tencent.com/document/product/214/30683) 接口查询本次任务是否成功。
<br/>限制说明：

- 仅广州、深圳金融、上海、上海金融、北京、成都、中国香港、新加坡、孟买、东京、硅谷地域支持绑定 SCF。
- 仅标准账户类型支持绑定 SCF，传统账户类型不支持。建议升级为标准账户类型，详情可参见 [账户类型升级说明](https://cloud.tencent.com/document/product/1199/49090)。
- 传统型负载均衡不支持绑定 SCF。
- 基础网络类型不支持绑定 SCF。
- CLB 默认支持绑定同地域下的所有 SCF，可支持跨 VPC 绑定 SCF，不支持跨地域绑定。
- 目前仅 IPv4、IPv6 NAT64 版本的负载均衡支持绑定 SCF，IPv6 版本的暂不支持。
- 仅七层（HTTP、HTTPS）监听器支持绑定 SCF，四层（TCP、UDP、TCP SSL）监听器和七层 QUIC 监听器不支持。
- CLB 绑定 SCF 仅支持绑定“Event 函数”类型的云函数。
     */
    async DeregisterFunctionTargets(req, cb) {
        return this.request("DeregisterFunctionTargets", req, cb);
    }
    /**
     * 本接口（ModifyLoadBalancerSla）用于将按量计费模式的共享型实例升级为性能容量型实例。<br/>
限制条件：
- 本接口只支持升级按量计费的CLB实例，包年包月的CLB实例升级请通过控制台进行升级。
- 升级为性能容量型实例后，不支持再回退到共享型实例。
- 传统型负载均衡实例不支持升级为性能容量型实例。
     */
    async ModifyLoadBalancerSla(req, cb) {
        return this.request("ModifyLoadBalancerSla", req, cb);
    }
    /**
     * 查询独占集群中的资源列表，支持按集群ID、VIP、负载均衡ID、是否闲置为过滤条件检索。
     */
    async DescribeClusterResources(req, cb) {
        return this.request("DescribeClusterResources", req, cb);
    }
    /**
     * 根据 ModifyBlockIPList 接口返回的异步任务的ID，查询封禁IP（黑名单）异步任务的执行状态。（接口灰度中，如需使用请提工单）
     */
    async DescribeBlockIPTask(req, cb) {
        return this.request("DescribeBlockIPTask", req, cb);
    }
    /**
     * DescribeClassicalLBByInstanceId用于通过后端实例ID获取传统型负载均衡ID列表。
     */
    async DescribeClassicalLBByInstanceId(req, cb) {
        return this.request("DescribeClassicalLBByInstanceId", req, cb);
    }
    /**
     * 查询账号下的高流量负载均衡，返回前10个负载均衡。如果是子账号登录，只返回子账号有权限的负载均衡。
     */
    async DescribeLoadBalancerTraffic(req, cb) {
        return this.request("DescribeLoadBalancerTraffic", req, cb);
    }
    /**
     * 查询跨域2.0版本云联网后端子机和网卡信息。
     */
    async DescribeCrossTargets(req, cb) {
        return this.request("DescribeCrossTargets", req, cb);
    }
    /**
     * DescribeTargetHealth 接口用来获取负载均衡后端服务的健康检查结果，不支持传统型负载均衡。
     */
    async DescribeTargetHealth(req, cb) {
        return this.request("DescribeTargetHealth", req, cb);
    }
    /**
     * 用户手动配置原访问地址和重定向地址，系统自动将原访问地址的请求重定向至对应路径的目的地址。同一域名下可以配置多条路径作为重定向策略，实现http/https之间请求的自动跳转。设置重定向时，需满足如下约束条件：若A已经重定向至B，则A不能再重定向至C（除非先删除老的重定向关系，再建立新的重定向关系），B不能重定向至任何其它地址。
本接口为异步接口，本接口返回成功后需以返回的RequestID为入参，调用DescribeTaskStatus接口查询本次任务是否成功。
     */
    async ManualRewrite(req, cb) {
        return this.request("ManualRewrite", req, cb);
    }
    /**
     * 修改负载均衡转发规则上所绑定的云函数。
     */
    async ModifyFunctionTargets(req, cb) {
        return this.request("ModifyFunctionTargets", req, cb);
    }
    /**
     * 这个接口用于删除SnatPro的负载均衡的SnatIp。
本接口为异步接口，接口返回成功后，需以得到的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async DeleteLoadBalancerSnatIps(req, cb) {
        return this.request("DeleteLoadBalancerSnatIps", req, cb);
    }
    /**
     * 修改IPv6FullChain负载均衡7层监听器支持混绑IPv4/IPv6目标特性。
     */
    async ModifyLoadBalancerMixIpTarget(req, cb) {
        return this.request("ModifyLoadBalancerMixIpTarget", req, cb);
    }
    /**
     * CreateRule 接口用于在一个已存在的负载均衡七层监听器下创建转发规则，七层监听器中，后端服务必须绑定到规则上而非监听器上。
本接口为异步接口，本接口返回成功后需以返回的RequestID为入参，调用DescribeTaskStatus接口查询本次任务是否成功。
     */
    async CreateRule(req, cb) {
        return this.request("CreateRule", req, cb);
    }
    /**
     * ModifyDomain接口用来修改负载均衡七层监听器下的域名。
本接口为异步接口，本接口返回成功后需以返回的RequestID为入参，调用DescribeTaskStatus接口查询本次任务是否成功。
     */
    async ModifyDomain(req, cb) {
        return this.request("ModifyDomain", req, cb);
    }
    /**
     * InquiryPriceRenewLoadBalancer接口查询对负载均衡续费的价格，只支持预付费负载均衡续费。
     */
    async InquiryPriceRenewLoadBalancer(req, cb) {
        return this.request("InquiryPriceRenewLoadBalancer", req, cb);
    }
    /**
     * 查询运行中、隔离中、即将到期和负载均衡总数。
     */
    async DescribeLoadBalancerOverview(req, cb) {
        return this.request("DescribeLoadBalancerOverview", req, cb);
    }
    /**
     * DeleteLoadBalancer 接口用以删除指定的一个或多个负载均衡实例。成功删除后，会把负载均衡实例下的监听器、转发规则一起删除，并把后端服务解绑。
本接口为异步接口，接口返回成功后，需以返回的 RequestId 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async DeleteLoadBalancer(req, cb) {
        return this.request("DeleteLoadBalancer", req, cb);
    }
    /**
     * InquiryPriceCreateLoadBalancer接口查询创建负载均衡的价格。
     */
    async InquiryPriceCreateLoadBalancer(req, cb) {
        return this.request("InquiryPriceCreateLoadBalancer", req, cb);
    }
    /**
     * DeleteRule 接口用来删除负载均衡实例七层监听器下的转发规则。
本接口为异步接口，本接口返回成功后需以返回的RequestID为入参，调用DescribeTaskStatus接口查询本次任务是否成功。
     */
    async DeleteRule(req, cb) {
        return this.request("DeleteRule", req, cb);
    }
    /**
     * 本接口用于查询异步任务的执行状态，对于非查询类的接口（创建/删除负载均衡实例、监听器、规则以及绑定或解绑后端服务等），在接口调用成功后，都需要使用本接口查询任务最终是否执行成功。
     */
    async DescribeTaskStatus(req, cb) {
        return this.request("DescribeTaskStatus", req, cb);
    }
    /**
     * 获取目标组列表
     */
    async DescribeTargetGroupList(req, cb) {
        return this.request("DescribeTargetGroupList", req, cb);
    }
    /**
     * 查询目标组信息
     */
    async DescribeTargetGroups(req, cb) {
        return this.request("DescribeTargetGroups", req, cb);
    }
    /**
     * 修改目标组的名称或者默认端口属性
     */
    async ModifyTargetGroupAttribute(req, cb) {
        return this.request("ModifyTargetGroupAttribute", req, cb);
    }
    /**
     * 创建CLB专有日志集，此日志集用于存储CLB的日志。
     */
    async CreateClsLogSet(req, cb) {
        return this.request("CreateClsLogSet", req, cb);
    }
    /**
     * 查询用户当前地域下的各项配额
     */
    async DescribeQuota(req, cb) {
        return this.request("DescribeQuota", req, cb);
    }
    /**
     * 本接口(CreateLoadBalancer)用来创建负载均衡实例（本接口只支持购买按量计费的负载均衡，包年包月的负载均衡请通过控制台购买）。为了使用负载均衡服务，您必须购买一个或多个负载均衡实例。成功调用该接口后，会返回负载均衡实例的唯一 ID。负载均衡实例的类型分为：公网、内网。详情可参考产品说明中的产品类型。
注意：(1)可通过 [DescribeResources](https://cloud.tencent.com/document/api/214/70213) 接口查询一个地域是否支持创建IPv6实例；(2)一个账号在每个地域的默认购买配额为：公网100个，内网100个。
本接口为异步接口，接口成功返回后，可使用 DescribeLoadBalancers 接口查询负载均衡实例的状态（如创建中、正常），以确定是否创建成功。
     */
    async CreateLoadBalancer(req, cb) {
        return this.request("CreateLoadBalancer", req, cb);
    }
    /**
     * 闲置实例是指创建超过7天后付费实例，且没有创建规则或创建规则没有绑定子机的负载均衡实例。
     */
    async DescribeIdleLoadBalancers(req, cb) {
        return this.request("DescribeIdleLoadBalancers", req, cb);
    }
    /**
     * RegisterTargets 接口用来将一台或多台后端服务绑定到负载均衡的监听器（或7层转发规则），在此之前您需要先行创建相关的4层监听器或7层转发规则。对于四层监听器（TCP、UDP），只需指定监听器ID即可，对于七层监听器（HTTP、HTTPS），还需通过LocationId或者Domain+Url指定转发规则。
本接口为异步接口，本接口返回成功后需以返回的RequestID为入参，调用DescribeTaskStatus接口查询本次任务是否成功。
     */
    async RegisterTargets(req, cb) {
        return this.request("RegisterTargets", req, cb);
    }
    /**
     * DescribeClassicalLBListeners 接口用于获取传统型负载均衡的监听器信息。
     */
    async DescribeClassicalLBListeners(req, cb) {
        return this.request("DescribeClassicalLBListeners", req, cb);
    }
    /**
     * ReplaceCertForLoadBalancers 接口用以替换负载均衡实例所关联的证书，对于各个地域的负载均衡，如果指定的老的证书ID与其有关联关系，则会先解除关联，再建立新证书与该负载均衡的关联关系。
此接口支持替换服务端证书或客户端证书。
需要使用的新证书，可以通过传入证书ID来指定，如果不指定证书ID，则必须传入证书内容等相关信息，用以新建证书并绑定至负载均衡。
注：本接口仅可从广州地域调用。
     */
    async ReplaceCertForLoadBalancers(req, cb) {
        return this.request("ReplaceCertForLoadBalancers", req, cb);
    }
    /**
     * 该接口支持删除负载均衡的多个监听器。
本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async DeleteLoadBalancerListeners(req, cb) {
        return this.request("DeleteLoadBalancerListeners", req, cb);
    }
    /**
     * 删除目标组
     */
    async DeleteTargetGroups(req, cb) {
        return this.request("DeleteTargetGroups", req, cb);
    }
    /**
     * 根据证书ID查询其在一个地域中所关联到负载均衡实例列表
     */
    async DescribeLoadBalancerListByCertId(req, cb) {
        return this.request("DescribeLoadBalancerListByCertId", req, cb);
    }
    /**
     * ModifyDomainAttributes接口用于修改负载均衡7层监听器转发规则的域名级别属性，如修改域名、修改DefaultServer、开启/关闭Http2、修改证书。
本接口为异步接口，本接口返回成功后，需以返回的RequestId为入参，调用DescribeTaskStatus接口查询本次任务是否成功。
     */
    async ModifyDomainAttributes(req, cb) {
        return this.request("ModifyDomainAttributes", req, cb);
    }
    /**
     * 解除规则的目标组关联关系。
本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async DisassociateTargetGroups(req, cb) {
        return this.request("DisassociateTargetGroups", req, cb);
    }
    /**
     * 查询一个地域的负载均衡实例列表。
     */
    async DescribeLoadBalancers(req, cb) {
        return this.request("DescribeLoadBalancers", req, cb);
    }
    /**
     * 查询一个负载均衡所封禁的IP列表（黑名单）。（接口灰度中，如需使用请提工单）
     */
    async DescribeBlockIPList(req, cb) {
        return this.request("DescribeBlockIPList", req, cb);
    }
    /**
     * DescribeClassicalLBTargets用于获取传统型负载均衡绑定的后端服务。
     */
    async DescribeClassicalLBTargets(req, cb) {
        return this.request("DescribeClassicalLBTargets", req, cb);
    }
    /**
     * 在一个负载均衡实例下创建监听器。
本接口为异步接口，接口返回成功后，需以返回的 RequestId 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async CreateListener(req, cb) {
        return this.request("CreateListener", req, cb);
    }
    /**
     * 获取用户的CLB专有日志集。
     */
    async DescribeClsLogSet(req, cb) {
        return this.request("DescribeClsLogSet", req, cb);
    }
    /**
     * ModifyTargetWeight 接口用于修改负载均衡绑定的后端服务的转发权重。
本接口为异步接口，本接口返回成功后需以返回的RequestID为入参，调用DescribeTaskStatus接口查询本次任务是否成功。
     */
    async ModifyTargetWeight(req, cb) {
        return this.request("ModifyTargetWeight", req, cb);
    }
    /**
     * 创建目标组。该功能正在内测中，如需使用，请通过[工单申请](https://console.cloud.tencent.com/workorder/category?level1_id=6&level2_id=163&source=0&data_title=%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%20LB&step=1)。
     */
    async CreateTargetGroup(req, cb) {
        return this.request("CreateTargetGroup", req, cb);
    }
    /**
     * DescribeTargets 接口用来查询负载均衡实例的某些监听器绑定的后端服务列表。
     */
    async DescribeTargets(req, cb) {
        return this.request("DescribeTargets", req, cb);
    }
    /**
     * 本接口将传统型负载均衡迁移成(原应用型)负载均衡
本接口为异步接口，接口成功返回后，可使用 DescribeLoadBalancers 接口查询负载均衡实例的状态（如创建中、正常），以确定是否创建成功。
     */
    async MigrateClassicalLoadBalancers(req, cb) {
        return this.request("MigrateClassicalLoadBalancers", req, cb);
    }
    /**
     * DescribeClassicalLBHealthStatus用于获取传统型负载均衡后端的健康状态
     */
    async DescribeClassicalLBHealthStatus(req, cb) {
        return this.request("DescribeClassicalLBHealthStatus", req, cb);
    }
    /**
     * 针对SnatPro负载均衡，这个接口用于添加SnatIp，如果负载均衡没有开启SnatPro，添加SnatIp后会自动开启。
本接口为异步接口，接口返回成功后，需以得到的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async CreateLoadBalancerSnatIps(req, cb) {
        return this.request("CreateLoadBalancerSnatIps", req, cb);
    }
    /**
     * 获取目标组绑定的服务器信息
     */
    async DescribeTargetGroupInstances(req, cb) {
        return this.request("DescribeTargetGroupInstances", req, cb);
    }
    /**
     * 克隆负载均衡实例，根据指定的负载均衡实例，复制出相同规则和绑定关系的负载均衡实例。克隆接口为异步操作，克隆的数据以调用CloneLoadBalancer时为准，如果调用CloneLoadBalancer后克隆CLB发生变化，变化规则不会克隆。

注：查询实例创建状态可以根据返回值中的requestId访问[DescribeTaskStatus](https://cloud.tencent.com/document/product/214/30683)接口

限制说明
实例属性维度限制：
- 支持克隆网络计费模式为按量计费与包年包月的实例，包年包月实例克隆后的新实例网络计费模式会转换为按小时带宽计费，其带宽、规格与原实例设置保持一致。
- 不支持克隆未关联实例计费项的 CLB。
- 不支持克隆传统型负载均衡实例和高防 CLB。
- 不支持克隆基础网络类型的实例。
- 不支持克隆 Anycast 类型的实例。
- 不支持克隆 IPv6 NAT64 版本的实例。
- 不支持克隆被封禁或冻结的实例。
- 执行克隆操作前，请确保实例上没有使用已过期证书，否则会导致克隆失败。
配额维度限制：
- 当实例的监听器个数超过 50 个时，不支持克隆。
- 当共享型实例的公网带宽上限超过 2G 时，不支持克隆。

通过接口调用：
BGP带宽包必须传带宽包id
独占集群克隆必须传对应的参数，否则按共享型创建
     */
    async CloneLoadBalancer(req, cb) {
        return this.request("CloneLoadBalancer", req, cb);
    }
    /**
     * BatchModifyTargetTag 接口用于批量修改负载均衡监听器绑定的后端机器的标签。批量修改的资源数量上限为500。本接口为同步接口。<br/>负载均衡的4层和7层监听器支持此接口，传统型负载均衡不支持。
     */
    async BatchModifyTargetTag(req, cb) {
        return this.request("BatchModifyTargetTag", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248824, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cloudapp = void 0;
const v20220530_1 = require("./v20220530");
exports.cloudapp = {
    v20220530: v20220530_1.v20220530,
};

}, function(modId) { var map = {"./v20220530":1738984248825}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248825, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220530 = void 0;
const Models = require("./cloudapp_models");
const cloudapp_client_1 = require("./cloudapp_client");
exports.v20220530 = {
    Client: cloudapp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cloudapp_models":1738984248826,"./cloudapp_client":1738984248827}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248826, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248827, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cloudapp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cloudapp.tencentcloudapi.com", "2022-05-30", clientConfig);
    }
    /**
     * 从软件进程读取 LICENSE。
     */
    async VerifyLicense(req, cb) {
        return this.request("VerifyLicense", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248828, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cloudaudit = void 0;
const v20190319_1 = require("./v20190319");
exports.cloudaudit = {
    v20190319: v20190319_1.v20190319,
};

}, function(modId) { var map = {"./v20190319":1738984248829}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248829, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190319 = void 0;
const Models = require("./cloudaudit_models");
const cloudaudit_client_1 = require("./cloudaudit_client");
exports.v20190319 = {
    Client: cloudaudit_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cloudaudit_models":1738984248830,"./cloudaudit_client":1738984248831}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248830, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248831, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cloudaudit client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cloudaudit.tencentcloudapi.com", "2019-03-19", clientConfig);
    }
    /**
     * 修改操作审计跟踪集
     */
    async ModifyAuditTrack(req, cb) {
        return this.request("ModifyAuditTrack", req, cb);
    }
    /**
     * 开启跟踪集
     */
    async StartLogging(req, cb) {
        return this.request("StartLogging", req, cb);
    }
    /**
     * 查询操作审计跟踪集详情
     */
    async DescribeAuditTrack(req, cb) {
        return this.request("DescribeAuditTrack", req, cb);
    }
    /**
     * 查询AttributeKey的有效取值范围
     */
    async GetAttributeKey(req, cb) {
        return this.request("GetAttributeKey", req, cb);
    }
    /**
     * 创建操作审计跟踪集
     */
    async CreateAuditTrack(req, cb) {
        return this.request("CreateAuditTrack", req, cb);
    }
    /**
     * 查询操作审计支持的cmq的可用区
     */
    async ListCmqEnableRegion(req, cb) {
        return this.request("ListCmqEnableRegion", req, cb);
    }
    /**
     * 创建操作审计跟踪集
     */
    async CreateEventsAuditTrack(req, cb) {
        return this.request("CreateEventsAuditTrack", req, cb);
    }
    /**
     * 查询操作审计日志
     */
    async DescribeEvents(req, cb) {
        return this.request("DescribeEvents", req, cb);
    }
    /**
     * 修改操作审计跟踪集
     */
    async ModifyEventsAuditTrack(req, cb) {
        return this.request("ModifyEventsAuditTrack", req, cb);
    }
    /**
     * 关闭跟踪集
     */
    async StopLogging(req, cb) {
        return this.request("StopLogging", req, cb);
    }
    /**
     * 查询操作审计支持的cos可用区
     */
    async ListCosEnableRegion(req, cb) {
        return this.request("ListCosEnableRegion", req, cb);
    }
    /**
     * 查询操作审计跟踪集列表
     */
    async DescribeAuditTracks(req, cb) {
        return this.request("DescribeAuditTracks", req, cb);
    }
    /**
     * 查询用户可创建跟踪集的数量
     */
    async InquireAuditCredit(req, cb) {
        return this.request("InquireAuditCredit", req, cb);
    }
    /**
     * 参数要求：
1、如果IsCreateNewBucket的值存在的话，cosRegion和cosBucketName都是必填参数。
2、如果IsEnableCmqNotify的值是1的话，IsCreateNewQueue、CmqRegion和CmqQueueName都是必填参数。
3、如果IsEnableCmqNotify的值是0的话，IsCreateNewQueue、CmqRegion和CmqQueueName都不能传。
4、如果IsEnableKmsEncry的值是1的话，KmsRegion和KeyId属于必填项
     */
    async UpdateAudit(req, cb) {
        return this.request("UpdateAudit", req, cb);
    }
    /**
     * 根据地域获取KMS密钥别名
     */
    async ListKeyAliasByRegion(req, cb) {
        return this.request("ListKeyAliasByRegion", req, cb);
    }
    /**
     * 查询跟踪集详情
     */
    async DescribeAudit(req, cb) {
        return this.request("DescribeAudit", req, cb);
    }
    /**
     * 删除操作审计跟踪集
     */
    async DeleteAuditTrack(req, cb) {
        return this.request("DeleteAuditTrack", req, cb);
    }
    /**
     * 用于对操作日志进行检索，便于用户进行查询相关的操作信息。
     */
    async LookUpEvents(req, cb) {
        return this.request("LookUpEvents", req, cb);
    }
    /**
     * 查询跟踪集概要
     */
    async ListAudits(req, cb) {
        return this.request("ListAudits", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248832, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cloudhsm = void 0;
const v20191112_1 = require("./v20191112");
exports.cloudhsm = {
    v20191112: v20191112_1.v20191112,
};

}, function(modId) { var map = {"./v20191112":1738984248833}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248833, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20191112 = void 0;
const Models = require("./cloudhsm_models");
const cloudhsm_client_1 = require("./cloudhsm_client");
exports.v20191112 = {
    Client: cloudhsm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cloudhsm_models":1738984248834,"./cloudhsm_client":1738984248835}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248834, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248835, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cloudhsm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cloudhsm.tencentcloudapi.com", "2019-11-12", clientConfig);
    }
    /**
     * 获取告警事件
     */
    async GetAlarmEvent(req, cb) {
        return this.request("GetAlarmEvent", req, cb);
    }
    /**
     * 修改VSM属性
     */
    async ModifyVsmAttributes(req, cb) {
        return this.request("ModifyVsmAttributes", req, cb);
    }
    /**
     * 获取VSM属性
     */
    async DescribeVsmAttributes(req, cb) {
        return this.request("DescribeVsmAttributes", req, cb);
    }
    /**
     * 获取用户VSM列表
     */
    async DescribeVsms(req, cb) {
        return this.request("DescribeVsms", req, cb);
    }
    /**
     * 查询用户的私有网络列表
     */
    async DescribeVpc(req, cb) {
        return this.request("DescribeVpc", req, cb);
    }
    /**
     * 通过VpcId获取Hsm资源数
     */
    async DescribeHSMByVpcId(req, cb) {
        return this.request("DescribeHSMByVpcId", req, cb);
    }
    /**
     * 获取VSM监控信息
     */
    async GetVsmMonitorInfo(req, cb) {
        return this.request("GetVsmMonitorInfo", req, cb);
    }
    /**
     * 通过SubnetId获取Hsm资源数
     */
    async DescribeHSMBySubnetId(req, cb) {
        return this.request("DescribeHSMBySubnetId", req, cb);
    }
    /**
     * 根据用户的AppId获取用户安全组列表
     */
    async DescribeUsg(req, cb) {
        return this.request("DescribeUsg", req, cb);
    }
    /**
     * 查询子网列表
     */
    async DescribeSubnet(req, cb) {
        return this.request("DescribeSubnet", req, cb);
    }
    /**
     * 修改告警事件
     */
    async ModifyAlarmEvent(req, cb) {
        return this.request("ModifyAlarmEvent", req, cb);
    }
    /**
     * 获取当前地域所支持的设备列表
     */
    async DescribeSupportedHsm(req, cb) {
        return this.request("DescribeSupportedHsm", req, cb);
    }
    /**
     * 购买询价接口
     */
    async InquiryPriceBuyVsm(req, cb) {
        return this.request("InquiryPriceBuyVsm", req, cb);
    }
    /**
     * 获取安全组详情
     */
    async DescribeUsgRule(req, cb) {
        return this.request("DescribeUsgRule", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248836, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cloudstudio = void 0;
const v20230508_1 = require("./v20230508");
exports.cloudstudio = {
    v20230508: v20230508_1.v20230508,
};

}, function(modId) { var map = {"./v20230508":1738984248837}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248837, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20230508 = void 0;
const Models = require("./cloudstudio_models");
const cloudstudio_client_1 = require("./cloudstudio_client");
exports.v20230508 = {
    Client: cloudstudio_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cloudstudio_models":1738984248838,"./cloudstudio_client":1738984248839}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248838, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248839, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cloudstudio client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cloudstudio.tencentcloudapi.com", "2023-05-08", clientConfig);
    }
    /**
     * 获取用户配置
     */
    async DescribeConfig(req, cb) {
        return this.request("DescribeConfig", req, cb);
    }
    /**
     * 修改工作空间
     */
    async ModifyWorkspace(req, cb) {
        return this.request("ModifyWorkspace", req, cb);
    }
    /**
     * 获取用户工作空间列表
     */
    async DescribeWorkspaces(req, cb) {
        return this.request("DescribeWorkspaces", req, cb);
    }
    /**
     * 获取基础镜像列表
     */
    async DescribeImages(req, cb) {
        return this.request("DescribeImages", req, cb);
    }
    /**
     * 创建工作空间
     */
    async CreateWorkspace(req, cb) {
        return this.request("CreateWorkspace", req, cb);
    }
    /**
     * 创建工作空间临时访问凭证，重复调用会创建新的 Token，旧的 Token 将会自动失效
     */
    async CreateWorkspaceToken(req, cb) {
        return this.request("CreateWorkspaceToken", req, cb);
    }
    /**
     * 删除工作空间
     */
    async RemoveWorkspace(req, cb) {
        return this.request("RemoveWorkspace", req, cb);
    }
    /**
     * 停止运行空间
     */
    async StopWorkspace(req, cb) {
        return this.request("StopWorkspace", req, cb);
    }
    /**
     * 运行空间
     */
    async RunWorkspace(req, cb) {
        return this.request("RunWorkspace", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248840, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cls = void 0;
const v20201016_1 = require("./v20201016");
exports.cls = {
    v20201016: v20201016_1.v20201016,
};

}, function(modId) { var map = {"./v20201016":1738984248841}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248841, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201016 = void 0;
const Models = require("./cls_models");
const cls_client_1 = require("./cls_client");
exports.v20201016 = {
    Client: cls_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cls_models":1738984248842,"./cls_client":1738984248843}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248842, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248843, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cls client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cls.tencentcloudapi.com", "2020-10-16", clientConfig);
    }
    /**
     * 修改Kafka协议消费信息
     */
    async ModifyKafkaConsumer(req, cb) {
        return this.request("ModifyKafkaConsumer", req, cb);
    }
    /**
     * 本接口用于创建Kafka数据订阅任务
     */
    async CreateKafkaRecharge(req, cb) {
        return this.request("CreateKafkaRecharge", req, cb);
    }
    /**
     * 本接口用于获取日志下载任务列表
     */
    async DescribeExports(req, cb) {
        return this.request("DescribeExports", req, cb);
    }
    /**
     * 本接口用于获取告警策略执行详情
     */
    async GetAlarmLog(req, cb) {
        return this.request("GetAlarmLog", req, cb);
    }
    /**
     * 本接口用于创建索引
     */
    async CreateIndex(req, cb) {
        return this.request("CreateIndex", req, cb);
    }
    /**
     * 查询指定时刻指标的最新值。
如果该时刻向前推5分钟内均无指标数据，则无相应的查询结果。
     */
    async QueryMetric(req, cb) {
        return this.request("QueryMetric", req, cb);
    }
    /**
     * 修改现有的投递规则，客户如果使用此接口，需要自行处理CLS对指定bucket的写权限。
     */
    async ModifyShipper(req, cb) {
        return this.request("ModifyShipper", req, cb);
    }
    /**
     * 该接口用于创建告警渠道回调配置。
     */
    async CreateWebCallback(req, cb) {
        return this.request("CreateWebCallback", req, cb);
    }
    /**
     * 获取采集规则配置
     */
    async DescribeConfigs(req, cb) {
        return this.request("DescribeConfigs", req, cb);
    }
    /**
     * 本接口用于创建投递SCF任务
     */
    async CreateDeliverCloudFunction(req, cb) {
        return this.request("CreateDeliverCloudFunction", req, cb);
    }
    /**
     * 本接口用于删除日志集。
     */
    async DeleteLogset(req, cb) {
        return this.request("DeleteLogset", req, cb);
    }
    /**
     * 删除应用到机器组的采集配置
     */
    async DeleteConfigFromMachineGroup(req, cb) {
        return this.request("DeleteConfigFromMachineGroup", req, cb);
    }
    /**
     * 本接口用于删除数据加工任务
     */
    async DeleteDataTransform(req, cb) {
        return this.request("DeleteDataTransform", req, cb);
    }
    /**
     * 本接口用于创建日志集，返回新创建的日志集的 ID。
     */
    async CreateLogset(req, cb) {
        return this.request("CreateLogset", req, cb);
    }
    /**
     * 本接口用于创建日志主题。
     */
    async CreateTopic(req, cb) {
        return this.request("CreateTopic", req, cb);
    }
    /**
     * 云产品接入使用相关接口
     */
    async DescribeCloudProductLogTasks(req, cb) {
        return this.request("DescribeCloudProductLogTasks", req, cb);
    }
    /**
     * 内部云产品接入使用相关接口
     */
    async DeleteCloudProductLogTask(req, cb) {
        return this.request("DeleteCloudProductLogTask", req, cb);
    }
    /**
     * 该接口用于删除通知渠道组
     */
    async DeleteAlarmNotice(req, cb) {
        return this.request("DeleteAlarmNotice", req, cb);
    }
    /**
     * 获取告警历史，例如今天未恢复的告警
     */
    async DescribeAlertRecordHistory(req, cb) {
        return this.request("DescribeAlertRecordHistory", req, cb);
    }
    /**
     * 本接口用于删除Kafka数据订阅任务
     */
    async DeleteKafkaRecharge(req, cb) {
        return this.request("DeleteKafkaRecharge", req, cb);
    }
    /**
     * 创建采集规则配置
     */
    async CreateConfig(req, cb) {
        return this.request("CreateConfig", req, cb);
    }
    /**
     * 获取机器组绑定的采集规则配置
     */
    async DescribeMachineGroupConfigs(req, cb) {
        return this.request("DescribeMachineGroupConfigs", req, cb);
    }
    /**
     * 本接口用于获取日志主题列表，支持分页
     */
    async DescribeTopics(req, cb) {
        return this.request("DescribeTopics", req, cb);
    }
    /**
     * 本接口用于创建cos导入任务
     */
    async CreateCosRecharge(req, cb) {
        return this.request("CreateCosRecharge", req, cb);
    }
    /**
     * 该接口已废弃，如需修改分区数量，请使用ModifyTopic接口。
     */
    async MergePartition(req, cb) {
        return this.request("MergePartition", req, cb);
    }
    /**
     * 本接口用于删除定时SQL分析任务
     */
    async DeleteScheduledSql(req, cb) {
        return this.request("DeleteScheduledSql", req, cb);
    }
    /**
     * 本接口仅创建下载任务，任务返回的下载地址，请用户调用DescribeExports查看任务列表。其中有下载地址CosPath参数。参考文档https://cloud.tencent.com/document/product/614/56449
     */
    async CreateExport(req, cb) {
        return this.request("CreateExport", req, cb);
    }
    /**
     * 关闭Kafka协议消费
     */
    async CloseKafkaConsumer(req, cb) {
        return this.request("CloseKafkaConsumer", req, cb);
    }
    /**
     * 本接口用于修改索引配置，该接口除受默认接口请求频率限制外，针对单个日志主题，并发数不能超过1，即同一时间同一个日志主题只能有一个正在执行的索引配置修改操作。
     */
    async ModifyIndex(req, cb) {
        return this.request("ModifyIndex", req, cb);
    }
    /**
     * 本接口用于修改Kafka数据订阅任务
     */
    async ModifyKafkaRecharge(req, cb) {
        return this.request("ModifyKafkaRecharge", req, cb);
    }
    /**
     * 该接口用于创建告警屏蔽规则。
     */
    async CreateAlarmShield(req, cb) {
        return this.request("CreateAlarmShield", req, cb);
    }
    /**
     * 新建投递到COS的任务，【！！！注意】使用此接口，需要检查是否配置了投递COS的角色和权限。如果没有配置，请参考文档投递权限查看和配置https://cloud.tencent.com/document/product/614/71623。
     */
    async CreateShipper(req, cb) {
        return this.request("CreateShipper", req, cb);
    }
    /**
     * 该接口用于创建通知内容。
     */
    async CreateNoticeContent(req, cb) {
        return this.request("CreateNoticeContent", req, cb);
    }
    /**
     * 内部云产品接入使用相关接口
     */
    async ModifyCloudProductLogTask(req, cb) {
        return this.request("ModifyCloudProductLogTask", req, cb);
    }
    /**
     * 本接口用于删除投递配置
     */
    async DeleteConsumer(req, cb) {
        return this.request("DeleteConsumer", req, cb);
    }
    /**
     * 删除机器组
     */
    async DeleteMachineGroup(req, cb) {
        return this.request("DeleteMachineGroup", req, cb);
    }
    /**
     * 本接口用于获取Kafka数据订阅任务
     */
    async DescribeKafkaRecharges(req, cb) {
        return this.request("DescribeKafkaRecharges", req, cb);
    }
    /**
     * 本接口用于获取告警策略列表。
     */
    async DescribeAlarms(req, cb) {
        return this.request("DescribeAlarms", req, cb);
    }
    /**
     * 本接口用于获取cos导入配置
     */
    async DescribeCosRecharges(req, cb) {
        return this.request("DescribeCosRecharges", req, cb);
    }
    /**
     * 应用采集配置到指定机器组
     */
    async ApplyConfigToMachineGroup(req, cb) {
        return this.request("ApplyConfigToMachineGroup", req, cb);
    }
    /**
     * 该接口用于删除告警屏蔽规则。
     */
    async DeleteAlarmShield(req, cb) {
        return this.request("DeleteAlarmShield", req, cb);
    }
    /**
     * 本接口用于构建日志数量直方图
     */
    async DescribeLogHistogram(req, cb) {
        return this.request("DescribeLogHistogram", req, cb);
    }
    /**
     * 该接口用于修改通知渠道组
     */
    async ModifyAlarmNotice(req, cb) {
        return this.request("ModifyAlarmNotice", req, cb);
    }
    /**
     * 打开Kafka协议消费功能
     */
    async OpenKafkaConsumer(req, cb) {
        return this.request("OpenKafkaConsumer", req, cb);
    }
    /**
     * 获取投递任务列表
     */
    async DescribeShipperTasks(req, cb) {
        return this.request("DescribeShipperTasks", req, cb);
    }
    /**
     * 此接口用于修改仪表盘订阅
     */
    async ModifyDashboardSubscribe(req, cb) {
        return this.request("ModifyDashboardSubscribe", req, cb);
    }
    /**
     * 本接口用于删除日志主题的索引配置，删除索引配置后将无法检索和查询采集到的日志。
     */
    async DeleteIndex(req, cb) {
        return this.request("DeleteIndex", req, cb);
    }
    /**
     * 获取Kafka协议消费信息
     */
    async DescribeKafkaConsumer(req, cb) {
        return this.request("DescribeKafkaConsumer", req, cb);
    }
    /**
     * 本接口用于预览Kafka数据订阅任务客户日志信息
     */
    async PreviewKafkaRecharge(req, cb) {
        return this.request("PreviewKafkaRecharge", req, cb);
    }
    /**
     * 本接口用于修改特殊采集配置任务，特殊采集配置应用于自建K8S环境的采集Agent
     */
    async ModifyConfigExtra(req, cb) {
        return this.request("ModifyConfigExtra", req, cb);
    }
    /**
     * 该接口用于修改告警屏蔽规则。
     */
    async ModifyAlarmShield(req, cb) {
        return this.request("ModifyAlarmShield", req, cb);
    }
    /**
     * 内部云产品接入使用相关接口
     */
    async CreateCloudProductLogTask(req, cb) {
        return this.request("CreateCloudProductLogTask", req, cb);
    }
    /**
     * 本接口用于创建特殊采集配置任务，特殊采集配置应用于自建K8S环境的采集Agent
     */
    async CreateConfigExtra(req, cb) {
        return this.request("CreateConfigExtra", req, cb);
    }
    /**
     * 获取告警屏蔽配置规则
     */
    async DescribeAlarmShields(req, cb) {
        return this.request("DescribeAlarmShields", req, cb);
    }
    /**
     * 本接口用于修改定时SQL分析任务
     */
    async ModifyScheduledSql(req, cb) {
        return this.request("ModifyScheduledSql", req, cb);
    }
    /**
     * 创建机器组
     */
    async CreateMachineGroup(req, cb) {
        return this.request("CreateMachineGroup", req, cb);
    }
    /**
     * 用于删除机器组信息
     */
    async DeleteMachineGroupInfo(req, cb) {
        return this.request("DeleteMachineGroupInfo", req, cb);
    }
    /**
     * 批量查询控制台分享列表
     */
    async DescribeConsoleSharingList(req, cb) {
        return this.request("DescribeConsoleSharingList", req, cb);
    }
    /**
     * 创建控制台分享
     */
    async CreateConsoleSharing(req, cb) {
        return this.request("CreateConsoleSharing", req, cb);
    }
    /**
     * 本接口用于创建定时SQL分析任务
     */
    async CreateScheduledSql(req, cb) {
        return this.request("CreateScheduledSql", req, cb);
    }
    /**
     * 本接口用于获取日志集信息列表。
     */
    async DescribeLogsets(req, cb) {
        return this.request("DescribeLogsets", req, cb);
    }
    /**
     * 此接口用于创建仪表盘订阅
     */
    async CreateDashboardSubscribe(req, cb) {
        return this.request("CreateDashboardSubscribe", req, cb);
    }
    /**
     * 该接口用于修改通知内容配置
     */
    async ModifyNoticeContent(req, cb) {
        return this.request("ModifyNoticeContent", req, cb);
    }
    /**
     * 本接口用于预览cos导入信息
     */
    async SearchCosRechargeInfo(req, cb) {
        return this.request("SearchCosRechargeInfo", req, cb);
    }
    /**
     * 本接口用于获取索引配置信息
     */
    async DescribeIndex(req, cb) {
        return this.request("DescribeIndex", req, cb);
    }
    /**
     * 该接口用于创建通知渠道组，提供两种配置模式，二选一：
1，简易模式，提供最基本的通知渠道功能。需填写如下参数：
- Type
- NoticeReceivers
- WebCallbacks

2，高级模式，在简易模式基础上，支持设定规则，为不同类型的告警分别设定通知渠道，并支持告警升级功能。需填写如下参数：
- NoticeRules
     */
    async CreateAlarmNotice(req, cb) {
        return this.request("CreateAlarmNotice", req, cb);
    }
    /**
     * 此接口用于删除仪表盘订阅
     */
    async DeleteDashboardSubscribe(req, cb) {
        return this.request("DeleteDashboardSubscribe", req, cb);
    }
    /**
     * 本接口用于创建数据加工任务。
     */
    async CreateDataTransform(req, cb) {
        return this.request("CreateDataTransform", req, cb);
    }
    /**
     * 用于添加机器组信息
     */
    async AddMachineGroupInfo(req, cb) {
        return this.request("AddMachineGroupInfo", req, cb);
    }
    /**
     * 该接口用于删除通知内容配置
     */
    async DeleteNoticeContent(req, cb) {
        return this.request("DeleteNoticeContent", req, cb);
    }
    /**
     * 本接口用于获取数据加工任务列表基本信息
     */
    async DescribeDataTransformInfo(req, cb) {
        return this.request("DescribeDataTransformInfo", req, cb);
    }
    /**
     * 该接口用于获取通知渠道组列表
     */
    async DescribeAlarmNotices(req, cb) {
        return this.request("DescribeAlarmNotices", req, cb);
    }
    /**
     * 该接口已废弃，如需获取分区数量，请使用DescribeTopics接口。
     */
    async DescribePartitions(req, cb) {
        return this.request("DescribePartitions", req, cb);
    }
    /**
     * 本接口用于删除特殊采集规则配置，特殊采集配置应用于自建K8S环境的采集Agent
     */
    async DeleteConfigExtra(req, cb) {
        return this.request("DeleteConfigExtra", req, cb);
    }
    /**
     * 本接口用于数据加工DSL函数的语法校验。
     */
    async CheckFunction(req, cb) {
        return this.request("CheckFunction", req, cb);
    }
    /**
     * 本接口用于检索分析日志，使用该接口时请注意如下事项：
1. 该接口除受默认接口请求频率限制外，针对单个日志主题，查询并发数不能超过15。
2. 检索语法建议使用日志服务专用检索语法CQL，请使用SyntaxRule参数，将值设置为1，控制台默认也使用该语法规则。
3. API返回数据包最大49MB，建议启用 gzip 压缩（HTTP Request Header Accept-Encoding:gzip）。
     */
    async SearchLog(req, cb) {
        return this.request("SearchLog", req, cb);
    }
    /**
     * 删除投递COS任务
     */
    async DeleteShipper(req, cb) {
        return this.request("DeleteShipper", req, cb);
    }
    /**
     * 该接口用于删除告警渠道回调配置。
     */
    async DeleteWebCallback(req, cb) {
        return this.request("DeleteWebCallback", req, cb);
    }
    /**
     * 查询指定时间范围内指标的变化趋势
     */
    async QueryRangeMetric(req, cb) {
        return this.request("QueryRangeMetric", req, cb);
    }
    /**
     * 获取采集规则配置所绑定的机器组
     */
    async DescribeConfigMachineGroups(req, cb) {
        return this.request("DescribeConfigMachineGroups", req, cb);
    }
    /**
     * 本接口用于删除日志下载任务
     */
    async DeleteExport(req, cb) {
        return this.request("DeleteExport", req, cb);
    }
    /**
     * 该接口已废弃，如需修改分区数量，请使用ModifyTopic接口。
     */
    async SplitPartition(req, cb) {
        return this.request("SplitPartition", req, cb);
    }
    /**
     * 删除控制台分享
     */
    async DeleteConsoleSharing(req, cb) {
        return this.request("DeleteConsoleSharing", req, cb);
    }
    /**
     * 获取机器组信息列表
     */
    async DescribeMachineGroups(req, cb) {
        return this.request("DescribeMachineGroups", req, cb);
    }
    /**
     * 本接口用于创建投递CKafka任务
     */
    async CreateConsumer(req, cb) {
        return this.request("CreateConsumer", req, cb);
    }
    /**
     * 本接口用于修改日志主题。
     */
    async ModifyTopic(req, cb) {
        return this.request("ModifyTopic", req, cb);
    }
    /**
     * 本接口用于获取仪表盘订阅列表，支持分页
     */
    async DescribeDashboardSubscribes(req, cb) {
        return this.request("DescribeDashboardSubscribes", req, cb);
    }
    /**
     * 该接口用于修改告警渠道回调配置。
     */
    async ModifyWebCallback(req, cb) {
        return this.request("ModifyWebCallback", req, cb);
    }
    /**
     * 修改机器组
     */
    async ModifyMachineGroup(req, cb) {
        return this.request("ModifyMachineGroup", req, cb);
    }
    /**
     * 本接口用于获取定时SQL分析任务列表
     */
    async DescribeScheduledSqlInfo(req, cb) {
        return this.request("DescribeScheduledSqlInfo", req, cb);
    }
    /**
     * 删除采集规则配置
     */
    async DeleteConfig(req, cb) {
        return this.request("DeleteConfig", req, cb);
    }
    /**
     * 本接口用于获取特殊采集配置，特殊采集配置应用于自建K8S环境的采集Agent
     */
    async DescribeConfigExtras(req, cb) {
        return this.request("DescribeConfigExtras", req, cb);
    }
    /**
     * 此接口用于预览仪表盘订阅
     */
    async SearchDashboardSubscribe(req, cb) {
        return this.request("SearchDashboardSubscribe", req, cb);
    }
    /**
     * 本接口用于校验Kafka服务集群是否可以正常访问
     */
    async CheckRechargeKafkaServer(req, cb) {
        return this.request("CheckRechargeKafkaServer", req, cb);
    }
    /**
     * 本接口用于修改告警策略。需要至少修改一项有效内容。
     */
    async ModifyAlarm(req, cb) {
        return this.request("ModifyAlarm", req, cb);
    }
    /**
     * 获取投递到COS的任务配置信息
     */
    async DescribeShippers(req, cb) {
        return this.request("DescribeShippers", req, cb);
    }
    /**
     * 修改控制台分享，目前仅允许修改有效期
     */
    async ModifyConsoleSharing(req, cb) {
        return this.request("ModifyConsoleSharing", req, cb);
    }
    /**
     * 本接口用于获取仪表盘
     */
    async DescribeDashboards(req, cb) {
        return this.request("DescribeDashboards", req, cb);
    }
    /**
     * 本接口用于修改cos导入任务
     */
    async ModifyCosRecharge(req, cb) {
        return this.request("ModifyCosRecharge", req, cb);
    }
    /**
     * 修改采集规则配置
     */
    async ModifyConfig(req, cb) {
        return this.request("ModifyConfig", req, cb);
    }
    /**
     * ## 提示
为了保障您日志数据的可靠性以及更高效地使用日志服务，建议您使用CLS优化后的接口[上传结构化日志](https://cloud.tencent.com/document/product/614/16873)。

同时我们给此接口专门优化定制了多个语言版本的SDK供您选择，SDK提供统一的异步发送、资源控制、自动重试、优雅关闭、感知上报等功能，使上报日志功能更完善，详情请参考[SDK采集](https://cloud.tencent.com/document/product/614/67157)。

同时云API上传日志接口也支持同步上传日志数据，如果您选择继续使用此接口请参考下文。

## 功能描述

本接口用于将日志写入到指定的日志主题。

#### 输入参数(pb二进制流，位于body中)

| 字段名       | 类型    | 位置 | 必须 | 含义                                                         |
| ------------ | ------- | ---- | ---- | ------------------------------------------------------------ |
| logGroupList | message | pb   | 是   | logGroup 列表，封装好的日志组列表内容，建议 logGroup 数量不要超过5个 |

LogGroup 说明：

| 字段名      | 是否必选 | 含义                                                         |
| ----------- | -------- | ------------------------------------------------------------ |
| logs        | 是       | 日志数组，表示有多个 Log 组成的集合，一个 Log 表示一条日志，一个 LogGroup 中 Log 个数不能超过10000 |
| contextFlow | 否       | LogGroup 的唯一ID，需要使用上下文功能时传入。格式："{上下文ID}-{LogGroupID}"。<br>上下文ID：唯一标识一个上下文（连续滚动的一系列日志文件，或者是需要保序的一系列日志），16进制64位整型字符串。<br>LogGroupID：连续递增的一串整型，16进制64位整型字符串。样例："102700A66102516A-59F59"。                        |
| filename    | 否       | 日志文件名                                                   |
| source      | 否       | 日志来源，一般使用机器 IP 作为标识                           |
| logTags     | 否       | 日志的标签列表                                               |

Log 说明：

| 字段名   | 是否必选 | 含义                                                         |
| -------- | -------- | ------------------------------------------------------------ |
| time     | 是       | 日志时间（Unix 格式时间戳），支持秒、毫秒，建议采用毫秒      |
| contents | 否       | key-value 格式的日志内容，表示一条日志里的多个 key-value 组合 |

Content 说明：

| 字段名 | 是否必选 | 含义                                                         |
| ------ | -------- | ------------------------------------------------------------ |
| key    | 是       | 单条日志里某个字段组的 key 值，不能以`_`开头                 |
| value  | 是       | 单条日志某个字段组的 value 值，单条日志 value 不能超过1MB，LogGroup 中所有 value 总和不能超过5MB |

LogTag 说明：

| 字段名 | 是否必选 | 含义                             |
| ------ | -------- | -------------------------------- |
| key    | 是       | 自定义的标签 key                 |
| value  | 是       | 自定义的标签 key 对应的 value 值 |

## PB 编译示例

本示例将说明如何使用官方 protoc 编译工具将 PB 描述文件 编译生成为 C++ 语言可调用的上传日志接口。

> ?目前 protoc 官方支持 Java、C++、Python 等语言的编译，详情请参见 [protoc](https://github.com/protocolbuffers/protobuf)。

#### 1. 安装 Protocol Buffer

下载 [Protocol Buffer](https://main.qcloudimg.com/raw/d7810aaf8b3073fbbc9d4049c21532aa/protobuf-2.6.1.tar.gz) ，解压并安装。示例版本为 protobuf 2.6.1，环境为 Centos 7.3 系统。 解压`protobuf-2.6.1.tar.gz`压缩包至`/usr/local`目录并进入该目录，执行命令如下：

```
tar -zxvf protobuf-2.6.1.tar.gz -C /usr/local/ && cd /usr/local/protobuf-2.6.1
```

开始编译和安装，配置环境变量，执行命令如下：

```
[root@VM_0_8_centos protobuf-2.6.1]# ./configure
[root@VM_0_8_centos protobuf-2.6.1]# make && make install
[root@VM_0_8_centos protobuf-2.6.1]# export PATH=$PATH:/usr/local/protobuf-2.6.1/bin
```

编译成功后，您可以使用以下命令查看版本：

```
[root@VM_0_8_centos protobuf-2.6.1]# protoc --version
liprotoc 2.6.1
```

#### 2. 创建 PB 描述文件

PB 描述文件是通信双方约定的数据交换格式，上传日志时须将规定的协议格式编译成对应语言版本的调用接口，然后添加到工程代码里，详情请参见 [protoc](https://github.com/protocolbuffers/protobuf) 。

以日志服务所规定的 PB 数据格式内容为准， 在本地创建 PB 消息描述文件 cls.proto。

> !PB 描述文件内容不可更改，且文件名须以`.proto`结尾。

cls.proto 内容（PB 描述文件）如下：

```
package cls;

message Log
{
    message Content
    {
        required string key   = 1; // 每组字段的 key
        required string value = 2; // 每组字段的 value
    }
    required int64   time     = 1; // 时间戳，UNIX时间格式
    repeated Content contents = 2; // 一条日志里的多个kv组合
}

message LogTag
{
    required string key       = 1;
    required string value     = 2;
}

message LogGroup
{
    repeated Log    logs        = 1; // 多条日志合成的日志数组
    optional string contextFlow = 2; // 目前暂无效用
    optional string filename    = 3; // 日志文件名
    optional string source      = 4; // 日志来源，一般使用机器IP
    repeated LogTag logTags     = 5;
}

message LogGroupList
{
    repeated LogGroup logGroupList = 1; // 日志组列表
}
```

#### 3. 编译生成

此例中，使用 proto 编译器生成 C++ 语言的文件，在 cls.proto 文件的同一目录下，执行如下编译命令：

```
protoc --cpp_out=./ ./cls.proto
```

> ?`--cpp_out=./`表示编译成 cpp 格式并输出当前目录下，`./cls.proto`表示位于当前目录下的 cls.proto 描述文件。

编译成功后，会输出对应语言的代码文件。此例会生成 cls.pb.h 头文件和 [cls.pb.cc](http://cls.pb.cc) 代码实现文件，如下所示：

```
[root@VM_0_8_centos protobuf-2.6.1]# protoc --cpp_out=./ ./cls.proto
[root@VM_0_8_centos protobuf-2.6.1]# ls
cls.pb.cc cls.pb.h cls.proto
```

#### 4. 调用

将生成的 cls.pb.h 头文件引入代码中，调用接口进行数据格式封装。
     */
    async UploadLog(req, cb) {
        return this.request("UploadLog", req, cb);
    }
    /**
     * 本接口用于删除日志主题。
     */
    async DeleteTopic(req, cb) {
        return this.request("DeleteTopic", req, cb);
    }
    /**
     * 本接口用于修改日志集信息
     */
    async ModifyLogset(req, cb) {
        return this.request("ModifyLogset", req, cb);
    }
    /**
     * 本接口用于修改投递Ckafka任务
     */
    async ModifyConsumer(req, cb) {
        return this.request("ModifyConsumer", req, cb);
    }
    /**
     * 本接口用于修改数据加工任务
     */
    async ModifyDataTransform(req, cb) {
        return this.request("ModifyDataTransform", req, cb);
    }
    /**
     * 本接口用于删除告警策略。
     */
    async DeleteAlarm(req, cb) {
        return this.request("DeleteAlarm", req, cb);
    }
    /**
     * 本接口用于搜索日志上下文附近的内容，详情参考[上下文检索](https://cloud.tencent.com/document/product/614/53248)。
API返回数据包最大49MB，建议启用 gzip 压缩（HTTP Request Header Accept-Encoding:gzip）。
     */
    async DescribeLogContext(req, cb) {
        return this.request("DescribeLogContext", req, cb);
    }
    /**
     * 本接口用于获取投递配置
     */
    async DescribeConsumer(req, cb) {
        return this.request("DescribeConsumer", req, cb);
    }
    /**
     * 获取通知内容列表
     */
    async DescribeNoticeContents(req, cb) {
        return this.request("DescribeNoticeContents", req, cb);
    }
    /**
     * 获取指定机器组下的机器状态
     */
    async DescribeMachines(req, cb) {
        return this.request("DescribeMachines", req, cb);
    }
    /**
     * 重试失败的投递任务
     */
    async RetryShipperTask(req, cb) {
        return this.request("RetryShipperTask", req, cb);
    }
    /**
     * 本接口用于创建告警策略。
     */
    async CreateAlarm(req, cb) {
        return this.request("CreateAlarm", req, cb);
    }
    /**
     * 获取告警渠道回调配置列表。
     */
    async DescribeWebCallbacks(req, cb) {
        return this.request("DescribeWebCallbacks", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248844, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cme = void 0;
const v20191029_1 = require("./v20191029");
exports.cme = {
    v20191029: v20191029_1.v20191029,
};

}, function(modId) { var map = {"./v20191029":1738984248845}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248845, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20191029 = void 0;
const Models = require("./cme_models");
const cme_client_1 = require("./cme_client");
exports.v20191029 = {
    Client: cme_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cme_models":1738984248846,"./cme_client":1738984248847}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248846, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248847, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cme client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cme.tencentcloudapi.com", "2019-10-29", clientConfig);
    }
    /**
     * 获取任务列表，支持条件筛选，返回对应的任务基础信息列表。
     */
    async DescribeTasks(req, cb) {
        return this.request("DescribeTasks", req, cb);
    }
    /**
     * 获取指定团队的信息，拉取团队信息列表。
     */
    async DescribeTeams(req, cb) {
        return this.request("DescribeTeams", req, cb);
    }
    /**
     * 查询视频编码配置信息。
     */
    async DescribeVideoEncodingPresets(req, cb) {
        return this.request("DescribeVideoEncodingPresets", req, cb);
    }
    /**
     * 导出视频编辑项目，支持指定输出的模板。
     */
    async ExportVideoEditProject(req, cb) {
        return this.request("ExportVideoEditProject", req, cb);
    }
    /**
     * 获取共享空间。当个人或团队A对个人或团队B授权某资源以后，个人或团队B的共享空间就会增加个人或团队A。
     */
    async DescribeSharedSpace(req, cb) {
        return this.request("DescribeSharedSpace", req, cb);
    }
    /**
     * <li>发起视频智能拆条任务，支持智能生成和平精英集锦、王者荣耀集锦、足球集锦、篮球集锦 、人物集锦、新闻拆条等任务。</li>
<li>和平精英集锦和王者荣耀集锦根据击杀场景进行拆条，足球集锦和篮球集锦根据进球场景进行拆条，人物集锦根据人物人脸特征进行拆条，新闻拆条根据导播进行拆条。</li>
<li>【本接口内测中，暂不建议使用】</li>
     */
    async GenerateVideoSegmentationSchemeByAi(req, cb) {
        return this.request("GenerateVideoSegmentationSchemeByAi", req, cb);
    }
    /**
     * 使用视频智能拆条数据导出视频，将指定的视频拆条片段导出为一个视频(内测中，请勿使用)。
     */
    async ExportVideoByVideoSegmentationData(req, cb) {
        return this.request("ExportVideoByVideoSegmentationData", req, cb);
    }
    /**
     * 资源归属者对个人或团队授予目标资源的相应权限。
     */
    async GrantResourceAuthorization(req, cb) {
        return this.request("GrantResourceAuthorization", req, cb);
    }
    /**
     * 根据检索条件搜索媒体，返回媒体的基本信息。
     */
    async SearchMaterial(req, cb) {
        return this.request("SearchMaterial", req, cb);
    }
    /**
     * 该接口接受多媒体创作引擎回调给业务的事件内容，将其转化为对应的 EventContent 结构。请不要实际调用该接口，只需要将接收到的事件内容直接使用 JSON 解析到 EventContent  结构即可使用。
     */
    async ParseEvent(req, cb) {
        return this.request("ParseEvent", req, cb);
    }
    /**
     * 获取用户所加入的团队列表
     */
    async DescribeJoinTeams(req, cb) {
        return this.request("DescribeJoinTeams", req, cb);
    }
    /**
     * 查询资源被授权的情况。
     */
    async DescribeResourceAuthorization(req, cb) {
        return this.request("DescribeResourceAuthorization", req, cb);
    }
    /**
     * 将云点播媒资文件导入到多媒体创作引擎媒体资源库。支持导入媒体归属团队或者个人。
     */
    async ImportMaterial(req, cb) {
        return this.request("ImportMaterial", req, cb);
    }
    /**
     * 使用 [视频合成协议](https://cloud.tencent.com/document/product/1156/51225) 合成视频，支持导出视频到 CME 云媒资或者云点播媒资。
     */
    async ExportVideoByEditorTrackData(req, cb) {
        return this.request("ExportVideoByEditorTrackData", req, cb);
    }
    /**
     * 获取指定归属者下所有的分类信息。
     */
    async DescribeClass(req, cb) {
        return this.request("DescribeClass", req, cb);
    }
    /**
     * 获取任务详情信息，包含下面几个部分：
<li>任务基础信息：包括任务状态、错误信息、创建时间等；</li>
<li>导出项目输出信息：包括输出的素材 Id 等。</li>
     */
    async DescribeTaskDetail(req, cb) {
        return this.request("DescribeTaskDetail", req, cb);
    }
    /**
     * 指定导出的参数，创建一个视频编码配置
     */
    async CreateVideoEncodingPreset(req, cb) {
        return this.request("CreateVideoEncodingPreset", req, cb);
    }
    /**
     * 修改团队信息，目前支持修改的操作有：
<li>修改团队名称。</li>
     */
    async ModifyTeam(req, cb) {
        return this.request("ModifyTeam", req, cb);
    }
    /**
     * 根据媒体 Id 删除媒体。
     */
    async DeleteMaterial(req, cb) {
        return this.request("DeleteMaterial", req, cb);
    }
    /**
     * 修改媒体信息，支持修改媒体名称、分类路径、标签等信息。
     */
    async ModifyMaterial(req, cb) {
        return this.request("ModifyMaterial", req, cb);
    }
    /**
     * 删除一个团队。要删除团队，必须满足以下条件：
<li>要删除的团队必须没有归属的素材；</li>
<li>要删除的团队必须没有归属的分类。</li>
     */
    async DeleteTeam(req, cb) {
        return this.request("DeleteTeam", req, cb);
    }
    /**
     * 向一个团队中添加团队成员，并且指定成员的角色。
     */
    async AddTeamMember(req, cb) {
        return this.request("AddTeamMember", req, cb);
    }
    /**
     * 移动某一个分类到另外一个分类下，也可用于分类重命名。
如果 SourceClassPath = /素材/视频/NBA，DestinationClassPath = /素材/视频/篮球
<li>当 DestinationClassPath 不存在时候，操作结果为重命名 ClassPath；</li>
<li>当 DestinationClassPath 存在时候，操作结果为产生新目录 /素材/视频/篮球/NBA</li>
     */
    async MoveClass(req, cb) {
        return this.request("MoveClass", req, cb);
    }
    /**
     * 创建媒体链接或分类路径链接，将资源信息链接到目标。
     */
    async CreateLink(req, cb) {
        return this.request("CreateLink", req, cb);
    }
    /**
     * 修改团队成员信息，包括成员备注、角色等。
     */
    async ModifyTeamMember(req, cb) {
        return this.request("ModifyTeamMember", req, cb);
    }
    /**
     * 修改视频编码配置信息。
     */
    async ModifyVideoEncodingPreset(req, cb) {
        return this.request("ModifyVideoEncodingPreset", req, cb);
    }
    /**
     * 删除指定 ID 的视频编码配置
     */
    async DeleteVideoEncodingPreset(req, cb) {
        return this.request("DeleteVideoEncodingPreset", req, cb);
    }
    /**
     * 将团队成员从团队中删除。
     */
    async DeleteTeamMembers(req, cb) {
        return this.request("DeleteTeamMembers", req, cb);
    }
    /**
     * 删除用户登录态，使用户登出多媒体创作引擎平台。
     */
    async DeleteLoginStatus(req, cb) {
        return this.request("DeleteLoginStatus", req, cb);
    }
    /**
     * 支持根据多种条件过滤出项目列表。
     */
    async DescribeProjects(req, cb) {
        return this.request("DescribeProjects", req, cb);
    }
    /**
     * 查询指定用户的登录态。
     */
    async DescribeLoginStatus(req, cb) {
        return this.request("DescribeLoginStatus", req, cb);
    }
    /**
     * 对媒体转推项目进行操作。
### 操作类型<a id="Operation"></a>
- `AddSource`（添加输入源），项目状态为 Idle、Working 时均可以操作。参见 [示例](#.E7.A4.BA.E4.BE.8B9-.E6.B7.BB.E5.8A.A0.E8.BE.93.E5.85.A5.E6.BA.90)；
- `DeleteSource`（删除输入源），项目状态为 Idle、Working 时均可以操作。参见 [示例](#.E7.A4.BA.E4.BE.8B6-.E5.88.A0.E9.99.A4.E8.BE.93.E5.85.A5.E6.BA.90)；
- `SwitchSource`（切换当前播放的输入源），项目状态为 Working 时可以操作。参见 [示例](#.E7.A4.BA.E4.BE.8B5-.E5.88.87.E6.8D.A2.E5.BD.93.E5.89.8D.E6.92.AD.E6.94.BE.E7.9A.84.E8.BE.93.E5.85.A5.E6.BA.90)
- `AddDestination`（ 添加输出源），项目状态为 Idle、Working 时均可以操作。参见 [示例](#.E7.A4.BA.E4.BE.8B8-.E5.90.AF.E5.8A.A8.E8.BE.93.E5.87.BA.E6.BA.90)；
- `DeleteDestination`（删除输出源），项目状态为 Idle、Working 时均可以操作。参见 [示例](#.E7.A4.BA.E4.BE.8B7-.E5.88.A0.E9.99.A4.E8.BE.93.E5.87.BA.E6.BA.90)；
- `EnableDestination`（启动输出源），项目状态为 Working 时可以操作。参见 [示例](#.E7.A4.BA.E4.BE.8B8-.E5.90.AF.E5.8A.A8.E8.BE.93.E5.87.BA.E6.BA.90)；
- `DisableDestination`（停止输出源），项目状态为 Working 时可以操作。参见 [示例](#.E7.A4.BA.E4.BE.8B4-.E5.81.9C.E6.AD.A2.E8.BE.93.E5.87.BA.E6.BA.90)；
- `ModifyDestination`（修改输出源），项目状态为 Idle、Working 时均可以操作。参见 [示例](#.E7.A4.BA.E4.BE.8B2-.E4.BF.AE.E6.94.B9.E8.BE.93.E5.87.BA.E6.BA.90)；
- `Start`（启动媒体转推），项目状态为 Idle 时可以操作。参见 [示例](#.E7.A4.BA.E4.BE.8B12-.E5.90.AF.E5.8A.A8.E5.AA.92.E4.BD.93.E8.BD.AC.E6.8E.A8)。发起 Start 请求成功后，媒体转推项目开始启动，30秒内还需要再进行一次 Confirm操作进行确认；
- `Confirm`（确认媒体转推项目启动），项目状态为 Working 时可以操作。参见 [示例](#.E7.A4.BA.E4.BE.8B14-.E7.A1.AE.E8.AE.A4.E5.AA.92.E4.BD.93.E8.BD.AC.E6.8E.A8.E9.A1.B9.E7.9B.AE.E5.90.AF.E5.8A.A8)；
- `Stop`（停止媒体转推），项目状态为 Working 时可以操作。参见 [示例](#.E7.A4.BA.E4.BE.8B11-.E5.81.9C.E6.AD.A2.E5.AA.92.E4.BD.93.E8.BD.AC.E6.8E.A8)；
- `ModifyOutputMediaSetting`（修改媒体输出配置），项目状态为 Idle 时可以操作。参见 [示例](#.E7.A4.BA.E4.BE.8B3-.E4.BF.AE.E6.94.B9.E8.BE.93.E5.87.BA.E7.9A.84.E5.AA.92.E4.BD.93.E9.85.8D.E7.BD.AE)；
- `ModifyPlaySetting`（修改播放结束时间），项目状态为 Idle、Working 时均可以操作。参见 [示例](#.E7.A4.BA.E4.BE.8B1-.E4.BF.AE.E6.94.B9.E7.BB.93.E6.9D.9F.E6.97.B6.E9.97.B4);
- `DescribePlayInfo`（查询播放信息），项目状态为 Idle、Working 时均可以操作。参见 [示例](#.E7.A4.BA.E4.BE.8B13-.E6.9F.A5.E8.AF.A2.E5.AA.92.E4.BD.93.E8.BD.AC.E6.8E.A8.E9.A1.B9.E7.9B.AE.E7.9A.84.E6.92.AD.E6.94.BE.E4.BF.A1.E6.81.AF)。
     */
    async HandleMediaCastProject(req, cb) {
        return this.request("HandleMediaCastProject", req, cb);
    }
    /**
     * 根据媒体 Id 批量获取媒体详情。
     */
    async DescribeMaterials(req, cb) {
        return this.request("DescribeMaterials", req, cb);
    }
    /**
     * <font color=red>本接口废弃，可创建媒体转推项目替代，操作媒体转推项目可使用 <b>[HandleMediaCastProject 接口](/document/product/1156/87841) </b>实现。</font>

### 操作类型<a id="Operation"></a>
- `AddInput`（添加输入源），包括：
    - 添加直播拉流输入源，参见 [示例1](#.E7.A4.BA.E4.BE.8B1-.E6.B7.BB.E5.8A.A0.E7.9B.B4.E6.92.AD.E6.8B.89.E6.B5.81.E8.BE.93.E5.85.A5.E6.BA.90)；
    - 添加直播推流输入源，参见 [示例2](#.E7.A4.BA.E4.BE.8B2-.E6.B7.BB.E5.8A.A0.E7.9B.B4.E6.92.AD.E6.8E.A8.E6.B5.81.E8.BE.93.E5.85.A5.E6.BA.90)；
    - 添加点播拉流输入源，参见 [示例3](#.E7.A4.BA.E4.BE.8B3-.E6.B7.BB.E5.8A.A0.E7.82.B9.E6.92.AD.E6.8B.89.E6.B5.81.E8.BE.93.E5.85.A5.E6.BA.90.E4.B8.94.E5.BE.AA.E7.8E.AF.E6.92.AD.E6.94.BE)、[示例4](#.E7.A4.BA.E4.BE.8B4-.E6.B7.BB.E5.8A.A0.E7.82.B9.E6.92.AD.E6.8B.89.E6.B5.81.E8.BE.93.E5.85.A5.E6.BA.90.E4.B8.94.E5.8D.95.E6.AC.A1.E6.92.AD.E6.94.BE)；
- `DeleteInput`（删除输入源），参见 [示例5](#.E7.A4.BA.E4.BE.8B5-.E5.88.A0.E9.99.A4.E8.BE.93.E5.85.A5.E6.BA.90)；
- `ModifyInput`（修改输入源），参见 [示例6](#.E7.A4.BA.E4.BE.8B6-.E4.BF.AE.E6.94.B9.E8.BE.93.E5.85.A5.E6.BA.90)；
- `AddOutput`（ 添加输出源），参见 [示例7](#.E7.A4.BA.E4.BE.8B7-.E6.B7.BB.E5.8A.A0.E8.BE.93.E5.87.BA.E6.BA.90)；
- `DeleteOutput`（删除输出源），参见 [示例8](#.E7.A4.BA.E4.BE.8B8-.E5.88.A0.E9.99.A4.E8.BE.93.E5.87.BA.E6.BA.90)；
- `ModifyOutput`（修改输出源），参见 [示例9](#.E7.A4.BA.E4.BE.8B9-.E4.BF.AE.E6.94.B9.E8.BE.93.E5.87.BA.E6.BA.90)；
- `Start`（开启转推），参见 [示例10](#.E7.A4.BA.E4.BE.8B10-.E5.BC.80.E5.90.AF.E4.BA.91.E8.BD.AC.E6.8E.A8)；
- `Stop`（停止转推），参见 [示例11](#.E7.A4.BA.E4.BE.8B11-.E5.81.9C.E6.AD.A2.E4.BA.91.E8.BD.AC.E6.8E.A8)；
- `SwitchInput`（切换输入源），参见 [示例12](#.E7.A4.BA.E4.BE.8B12-.E5.88.87.E6.8D.A2.E8.BE.93.E5.85.A5.E6.BA.90)；
- `ModifyCurrentStopTime`（修改当前计划结束时间），参见 [示例13](#.E7.A4.BA.E4.BE.8B13-.E4.BF.AE.E6.94.B9.E8.BD.AC.E6.8E.A8.E7.BB.93.E6.9D.9F.E6.97.B6.E9.97.B4);
- `DescribeInputPlayInfo`（查询播放进度），参见 [示例14](#.E7.A4.BA.E4.BE.8B14-.E6.9F.A5.E8.AF.A2.E7.82.B9.E6.92.AD.E8.BE.93.E5.85.A5.E6.BA.90.E6.92.AD.E6.94.BE.E8.BF.9B.E5.BA.A6)。
     */
    async HandleStreamConnectProject(req, cb) {
        return this.request("HandleStreamConnectProject", req, cb);
    }
    /**
     * 获取平台中所有的已注册账号。
     */
    async DescribeAccounts(req, cb) {
        return this.request("DescribeAccounts", req, cb);
    }
    /**
     * <li>支持获取所创建的所有平台列表信息；</li>
<li>支持获取指定的平台列表信息。</li>

关于平台概念，请参见文档 [平台](https://cloud.tencent.com/document/product/1156/43767)。


     */
    async DescribePlatforms(req, cb) {
        return this.request("DescribePlatforms", req, cb);
    }
    /**
     * 创建一个团队。
     */
    async CreateTeam(req, cb) {
        return this.request("CreateTeam", req, cb);
    }
    /**
     * 修改项目信息。
     */
    async ModifyProject(req, cb) {
        return this.request("ModifyProject", req, cb);
    }
    /**
     * 新增分类，用于管理素材。分类层数不能超过20。
     */
    async CreateClass(req, cb) {
        return this.request("CreateClass", req, cb);
    }
    /**
     *  资源所属实体对目标实体撤销目标资源的相应权限，若原本没有相应权限则不产生变更。
     */
    async RevokeResourceAuthorization(req, cb) {
        return this.request("RevokeResourceAuthorization", req, cb);
    }
    /**
     * 将云点播中的媒资或者用户自有媒资文件添加到项目中与项目关联，供后续视频编辑使用。目前仅视频编辑项目和智能视频拆条项目有效。
     */
    async ImportMediaToProject(req, cb) {
        return this.request("ImportMediaToProject", req, cb);
    }
    /**
     * 浏览当前分类路径下的资源，包括媒体文件和子分类，返回媒资基础信息和分类信息。
     */
    async ListMedia(req, cb) {
        return this.request("ListMedia", req, cb);
    }
    /**
     * 创建多媒体创作引擎项目，目前支持的项目类型有：
<li>视频剪辑项目：用于普通视频剪辑；</li>
<li>直播剪辑项目：用于直播流剪辑；</li>
<li>导播台项目：用于云导播台；</li>
<li>视频拆条：用于视频拆条；</li>
<li>录制回放项目：用于直播录制回放；</li>
<li>云转推项目：用于直播云转推<font color=red>（废弃，可使用媒体转推项目替代）</font>；</li>
<li>媒体转推项目：用于媒体文件转直播输出。</li>
     */
    async CreateProject(req, cb) {
        return this.request("CreateProject", req, cb);
    }
    /**
     * 使用视频剪辑模板直接导出视频。
     */
    async ExportVideoByTemplate(req, cb) {
        return this.request("ExportVideoByTemplate", req, cb);
    }
    /**
     * 移动资源，支持跨个人或团队移动媒体以及分类。如果填写了Operator，则需要校验用户对媒体和分类资源的访问以及写权限。
<li>当原始资源为媒体时，该接口效果为将该媒体移动到目标分类下面；</li>
<li>当原始资源为分类时，该接口效果为将原始分类移动到目标分类或者是重命名。</li>
 如果 SourceResource.Resource.Id = /素材/视频/NBA，DestinationResource.Resource.Id= /素材/视频/篮球
<li>当 DestinationResource.Resource.Id 不存在时候且原始资源与目标资源归属相同，操作结果为重命名原始分类；</li>
<li>当 DestinationResource.Resource.Id 存在时候，操作结果为产生新目录 /素材/视频/篮球/NBA</li>
     */
    async MoveResource(req, cb) {
        return this.request("MoveResource", req, cb);
    }
    /**
     * 删除分类信息，删除时检验下述限制：
<li>分类路径必须存在；</li>
<li>分类下没有绑定素材。</li>
     */
    async DeleteClass(req, cb) {
        return this.request("DeleteClass", req, cb);
    }
    /**
     * 删除项目。处于推流状态的云转推和点播转直播项目不允许删除，若强行调用删除项目接口会返回失败。
     */
    async DeleteProject(req, cb) {
        return this.request("DeleteProject", req, cb);
    }
    /**
     * 平铺分类路径下及其子分类下的所有媒体基础信息，返回当前分类及子分类中的所有媒体的基础信息。
     */
    async FlattenListMedia(req, cb) {
        return this.request("FlattenListMedia", req, cb);
    }
    /**
     * 复制一个项目，包括项目素材及轨道数据。目前仅普通剪辑及模板制作项目可复制，其它类型的项目不支持复制。
     */
    async CopyProject(req, cb) {
        return this.request("CopyProject", req, cb);
    }
    /**
     * 获取指定团队的成员信息。支持获取指定成员的信息，同时也支持分页拉取指定团队的所有成员信息。
     */
    async DescribeTeamMembers(req, cb) {
        return this.request("DescribeTeamMembers", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248848, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cmq = void 0;
const v20190304_1 = require("./v20190304");
exports.cmq = {
    v20190304: v20190304_1.v20190304,
};

}, function(modId) { var map = {"./v20190304":1738984248849}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248849, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190304 = void 0;
const Models = require("./cmq_models");
const cmq_client_1 = require("./cmq_client");
exports.v20190304 = {
    Client: cmq_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cmq_models":1738984248850,"./cmq_client":1738984248851}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248850, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248851, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cmq client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cmq.tencentcloudapi.com", "2019-03-04", clientConfig);
    }
    /**
     * 查询主题详情
     */
    async DescribeTopicDetail(req, cb) {
        return this.request("DescribeTopicDetail", req, cb);
    }
    /**
     * 枚举队列列表
     */
    async DescribeQueueDetail(req, cb) {
        return this.request("DescribeQueueDetail", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248852, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cms = void 0;
const v20190321_1 = require("./v20190321");
exports.cms = {
    v20190321: v20190321_1.v20190321,
};

}, function(modId) { var map = {"./v20190321":1738984248853}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248853, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190321 = void 0;
const Models = require("./cms_models");
const cms_client_1 = require("./cms_client");
exports.v20190321 = {
    Client: cms_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cms_models":1738984248854,"./cms_client":1738984248855}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248854, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248855, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cms client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cms.tencentcloudapi.com", "2019-03-21", clientConfig);
    }
    /**
     * 文本内容检测（Text Moderation）服务使用了深度学习技术，识别涉黄、涉政、涉恐等有害内容，同时支持用户配置词库，打击自定义的违规文本。
     */
    async TextModeration(req, cb) {
        return this.request("TextModeration", req, cb);
    }
    /**
     * 图片内容检测服务（Image Moderation, IM）能自动扫描图片，识别涉黄、涉恐、涉政、涉毒等有害内容，同时支持用户配置图片黑名单，打击自定义的违规图片。
     */
    async ImageModeration(req, cb) {
        return this.request("ImageModeration", req, cb);
    }
    /**
     * 获取关键词接口
     */
    async DescribeLibSamples(req, cb) {
        return this.request("DescribeLibSamples", req, cb);
    }
    /**
     * 获取用户词库列表
     */
    async DescribeKeywordsLibs(req, cb) {
        return this.request("DescribeKeywordsLibs", req, cb);
    }
    /**
     * 创建关键词接口
     */
    async CreateKeywordsSamples(req, cb) {
        return this.request("CreateKeywordsSamples", req, cb);
    }
    /**
     * 删除关键词接口
     */
    async DeleteLibSamples(req, cb) {
        return this.request("DeleteLibSamples", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248856, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.config = void 0;
const v20220802_1 = require("./v20220802");
exports.config = {
    v20220802: v20220802_1.v20220802,
};

}, function(modId) { var map = {"./v20220802":1738984248857}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248857, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220802 = void 0;
const Models = require("./config_models");
const config_client_1 = require("./config_client");
exports.v20220802 = {
    Client: config_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./config_models":1738984248858,"./config_client":1738984248859}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248858, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248859, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * config client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("config.tencentcloudapi.com", "2022-08-02", clientConfig);
    }
    /**
     * 账号组获取规则列表
     */
    async ListAggregateConfigRules(req, cb) {
        return this.request("ListAggregateConfigRules", req, cb);
    }
    /**
     * 获取资源列表
     */
    async ListDiscoveredResources(req, cb) {
        return this.request("ListDiscoveredResources", req, cb);
    }
    /**
     * 获取规则列表
     */
    async ListConfigRules(req, cb) {
        return this.request("ListConfigRules", req, cb);
    }
    /**
     * 账号组资源详情
     */
    async DescribeAggregateDiscoveredResource(req, cb) {
        return this.request("DescribeAggregateDiscoveredResource", req, cb);
    }
    /**
     * 资源详情
     */
    async DescribeDiscoveredResource(req, cb) {
        return this.request("DescribeDiscoveredResource", req, cb);
    }
    /**
     * 账号组获取资源列表
     */
    async ListAggregateDiscoveredResources(req, cb) {
        return this.request("ListAggregateDiscoveredResources", req, cb);
    }
    /**
     * 上报自定义规则评估结果
     */
    async PutEvaluations(req, cb) {
        return this.request("PutEvaluations", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248860, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.controlcenter = void 0;
const v20230110_1 = require("./v20230110");
exports.controlcenter = {
    v20230110: v20230110_1.v20230110,
};

}, function(modId) { var map = {"./v20230110":1738984248861}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248861, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20230110 = void 0;
const Models = require("./controlcenter_models");
const controlcenter_client_1 = require("./controlcenter_client");
exports.v20230110 = {
    Client: controlcenter_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./controlcenter_models":1738984248862,"./controlcenter_client":1738984248863}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248862, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248863, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * controlcenter client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("controlcenter.tencentcloudapi.com", "2023-01-10", clientConfig);
    }
    /**
     * 批量对存量账号应用基线
     */
    async BatchApplyAccountBaselines(req, cb) {
        return this.request("BatchApplyAccountBaselines", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248864, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cpdp = void 0;
const v20190820_1 = require("./v20190820");
exports.cpdp = {
    v20190820: v20190820_1.v20190820,
};

}, function(modId) { var map = {"./v20190820":1738984248865}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248865, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190820 = void 0;
const Models = require("./cpdp_models");
const cpdp_client_1 = require("./cpdp_client");
exports.v20190820 = {
    Client: cpdp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cpdp_models":1738984248866,"./cpdp_client":1738984248867}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248866, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248867, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cpdp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cpdp.tencentcloudapi.com", "2019-08-20", clientConfig);
    }
    /**
     * 直播平台-查询分配关系
     */
    async QueryAssignment(req, cb) {
        return this.request("QueryAssignment", req, cb);
    }
    /**
     * 云支付-分账授权申请查询接口
     */
    async DistributeAccreditQuery(req, cb) {
        return this.request("DistributeAccreditQuery", req, cb);
    }
    /**
     * 灵云V2-补充手机号信息
     */
    async AddFlexPhoneNo(req, cb) {
        return this.request("AddFlexPhoneNo", req, cb);
    }
    /**
     * 灵云V2-查询冻结订单列表
     */
    async QueryFlexFreezeOrderList(req, cb) {
        return this.request("QueryFlexFreezeOrderList", req, cb);
    }
    /**
     * 聚鑫-查询会员间交易信息列表
     */
    async QueryMemberTransactionDetails(req, cb) {
        return this.request("QueryMemberTransactionDetails", req, cb);
    }
    /**
     * 直播平台-修改代理商完税信息
     */
    async ModifyAgentTaxPaymentInfo(req, cb) {
        return this.request("ModifyAgentTaxPaymentInfo", req, cb);
    }
    /**
     * 维护会员绑定提现账户联行号。此接口可以支持市场修改会员的提现账户的开户行信息，具体包括开户行行名、开户行的银行联行号（大小额联行号）和超级网银行号。
     */
    async ModifyMntMbrBindRelateAcctBankCode(req, cb) {
        return this.request("ModifyMntMbrBindRelateAcctBankCode", req, cb);
    }
    /**
     * 灵云-批量主播转账接口
     */
    async CreateBatchPayment(req, cb) {
        return this.request("CreateBatchPayment", req, cb);
    }
    /**
     * 直播平台-扣减额度
     */
    async DeduceQuota(req, cb) {
        return this.request("DeduceQuota", req, cb);
    }
    /**
     * 灵云-主播入驻
     */
    async CreateExternalAnchor(req, cb) {
        return this.request("CreateExternalAnchor", req, cb);
    }
    /**
     * 根据订单号，或者用户Id，查询支付订单状态
     */
    async QueryOrder(req, cb) {
        return this.request("QueryOrder", req, cb);
    }
    /**
     * 云企付-退款结果查询
     */
    async QueryOpenBankRefundOrder(req, cb) {
        return this.request("QueryOpenBankRefundOrder", req, cb);
    }
    /**
     * 云企付-查询核销订单状态，客户可以使用该接口来查询核销申请的订单状态。目前仅支持TENPAY渠道EBANK_PAYMENT付款方式的担保支付订单查询。
     */
    async QueryOpenBankVerificationOrder(req, cb) {
        return this.request("QueryOpenBankVerificationOrder", req, cb);
    }
    /**
     * 根据订单号或用户ID，查询支付订单状态。
     */
    async QueryCloudOrder(req, cb) {
        return this.request("QueryCloudOrder", req, cb);
    }
    /**
     * 会员提现-不验证。此接口受理会员发起的提现申请。会员子账户的可提现余额、可用余额会减少，市场的资金汇总账户(监管账户)会减少相应的发生金额，提现到会员申请的收款账户。
     */
    async WithdrawCashMembership(req, cb) {
        return this.request("WithdrawCashMembership", req, cb);
    }
    /**
     * 务工卡-获取核身结果
     */
    async GetPayRollAuthResult(req, cb) {
        return this.request("GetPayRollAuthResult", req, cb);
    }
    /**
     * 查询银行时间段内交易明细。查询时间段的会员成功交易。
     */
    async QueryBankTransactionDetails(req, cb) {
        return this.request("QueryBankTransactionDetails", req, cb);
    }
    /**
     * 灵云V2-查询服务商账户余额
     */
    async QueryFlexServiceProviderAccountBalance(req, cb) {
        return this.request("QueryFlexServiceProviderAccountBalance", req, cb);
    }
    /**
     * 云企付-子商户进件
     */
    async CreateOpenBankExternalSubMerchantRegistration(req, cb) {
        return this.request("CreateOpenBankExternalSubMerchantRegistration", req, cb);
    }
    /**
     * 查询普通转账充值明细。接口用于查询会员主动转账进资金汇总账户的明细情况。若会员使用绑定账号转入，则直接入账到会员子账户。若未使用绑定账号转入，则系统无法自动清分到对应子账户，则转入挂账子账户由平台自行清分。若是 “见证+收单充值”T0充值记录时备注Note为“见证+收单充值,订单号” 此接口可以查到T0到账的“见证+收单充值”充值记录。
     */
    async QueryCommonTransferRecharge(req, cb) {
        return this.request("QueryCommonTransferRecharge", req, cb);
    }
    /**
     * 账单下载接口，根据本接口返回的URL地址，在D+1日下载对账单。注意，本接口返回的URL地址有时效，请尽快下载。URL超时时效后，请重新调用本接口再次获取。
     */
    async DownloadBill(req, cb) {
        return this.request("DownloadBill", req, cb);
    }
    /**
     * 灵云V2-付款
     */
    async ApplyFlexPayment(req, cb) {
        return this.request("ApplyFlexPayment", req, cb);
    }
    /**
     * 云支付-查询合同明细接口
     */
    async ViewContract(req, cb) {
        return this.request("ViewContract", req, cb);
    }
    /**
     * 云企付-聚合下单
     */
    async CreateOpenBankUnifiedOrder(req, cb) {
        return this.request("CreateOpenBankUnifiedOrder", req, cb);
    }
    /**
     * 查询银行子账户余额。查询会员子账户以及平台的功能子账户的余额。
     */
    async QueryCustAcctIdBalance(req, cb) {
        return this.request("QueryCustAcctIdBalance", req, cb);
    }
    /**
     * 直播平台-查询主播签约信息
     */
    async QueryAnchorContractInfo(req, cb) {
        return this.request("QueryAnchorContractInfo", req, cb);
    }
    /**
     * 智能代发-单笔代发转账接口
     */
    async TransferSinglePay(req, cb) {
        return this.request("TransferSinglePay", req, cb);
    }
    /**
     * 商户查询已开通的支付方式列表
     */
    async QueryMerchantPayWayList(req, cb) {
        return this.request("QueryMerchantPayWayList", req, cb);
    }
    /**
     * 云鉴-商户信息修改的接口
     */
    async ModifyMerchant(req, cb) {
        return this.request("ModifyMerchant", req, cb);
    }
    /**
     * 云企付-子商户费率配置结果查询
     */
    async QueryOpenBankSubMerchantRateConfigure(req, cb) {
        return this.request("QueryOpenBankSubMerchantRateConfigure", req, cb);
    }
    /**
     * 登记挂账(支持撤销)。此接口可实现把不明来账或自有资金等已登记在挂账子账户下的资金调整到普通会员子账户。即通过申请调用此接口，将会减少挂账子账户的资金，调增指定的普通会员子账户的可提现余额及可用余额。此接口不支持把挂账子账户资金清分到功能子账户。
     */
    async RegisterBillSupportWithdraw(req, cb) {
        return this.request("RegisterBillSupportWithdraw", req, cb);
    }
    /**
     * 灵云V2-补充证件信息
     */
    async AddFlexIdInfo(req, cb) {
        return this.request("AddFlexIdInfo", req, cb);
    }
    /**
     * 云企付-创建充值订单
     */
    async CreateOpenBankRechargeOrder(req, cb) {
        return this.request("CreateOpenBankRechargeOrder", req, cb);
    }
    /**
     * 跨境-贸易材料明细查询。
     */
    async QueryTrade(req, cb) {
        return this.request("QueryTrade", req, cb);
    }
    /**
     * 灵云V2-收款用户账户列表查询
     */
    async QueryFlexPayeeAccountList(req, cb) {
        return this.request("QueryFlexPayeeAccountList", req, cb);
    }
    /**
     * 灵云V2-冻结余额
     */
    async FreezeFlexBalance(req, cb) {
        return this.request("FreezeFlexBalance", req, cb);
    }
    /**
     * 云支付-添加门店接口
     */
    async AddShop(req, cb) {
        return this.request("AddShop", req, cb);
    }
    /**
     * 第三方子商户电子记账本余额查询接口
     */
    async QueryOpenBankExternalSubAccountBookBalance(req, cb) {
        return this.request("QueryOpenBankExternalSubAccountBookBalance", req, cb);
    }
    /**
     * 云支付-查询商户分类接口
     */
    async QueryMerchantClassification(req, cb) {
        return this.request("QueryMerchantClassification", req, cb);
    }
    /**
     * 灵云V2-查询结算订单列表
     */
    async QueryFlexSettlementOrderList(req, cb) {
        return this.request("QueryFlexSettlementOrderList", req, cb);
    }
    /**
     * 跨境-提交申报材料。申报材料的主体是付款人，需要提前调用【跨境-付款人申请】接口提交付款人信息且审核通过后调用。
     */
    async ApplyApplicationMaterial(req, cb) {
        return this.request("ApplyApplicationMaterial", req, cb);
    }
    /**
     * 微信商户发起批量转账
     */
    async CreateTransferBatch(req, cb) {
        return this.request("CreateTransferBatch", req, cb);
    }
    /**
     * 智慧零售-发票开具V2
     */
    async CreateInvoiceV2(req, cb) {
        return this.request("CreateInvoiceV2", req, cb);
    }
    /**
     * 智慧零售-发票查询
     */
    async QueryInvoice(req, cb) {
        return this.request("QueryInvoice", req, cb);
    }
    /**
     * 云企付-绑定分账收款方
     */
    async BindOpenBankProfitSharePayee(req, cb) {
        return this.request("BindOpenBankProfitSharePayee", req, cb);
    }
    /**
     * 灵云V2-收款用户信息查询
     */
    async QueryFlexPayeeInfo(req, cb) {
        return this.request("QueryFlexPayeeInfo", req, cb);
    }
    /**
     * 通过商家或者微信批次明细单号查询明细单
     */
    async QueryTransferDetail(req, cb) {
        return this.request("QueryTransferDetail", req, cb);
    }
    /**
     * 云企付-查询联行号
     */
    async QueryOpenBankBankBranchList(req, cb) {
        return this.request("QueryOpenBankBankBranchList", req, cb);
    }
    /**
     * 跨境-查询汇率
     */
    async QueryExchangeRate(req, cb) {
        return this.request("QueryExchangeRate", req, cb);
    }
    /**
     * 会员解绑提现账户。此接口可以支持会员解除名下的绑定账户关系。
     */
    async UnbindRelateAcct(req, cb) {
        return this.request("UnbindRelateAcct", req, cb);
    }
    /**
     * 应用需要先带上签约信息调用本接口生成支付订单号，并将应答的PayInfo透传给聚鑫SDK，拉起客户端（包括微信公众号/微信小程序/客户端App）支付。
     */
    async ContractOrder(req, cb) {
        return this.request("ContractOrder", req, cb);
    }
    /**
     * 灵云-单笔转账结果查询
     */
    async QuerySinglePaymentResult(req, cb) {
        return this.request("QuerySinglePaymentResult", req, cb);
    }
    /**
     * 云企付-申请单笔交易回单
     */
    async ApplyOpenBankOrderDetailReceipt(req, cb) {
        return this.request("ApplyOpenBankOrderDetailReceipt", req, cb);
    }
    /**
     * 灵云V2-查询付款订单列表
     */
    async QueryFlexPaymentOrderList(req, cb) {
        return this.request("QueryFlexPaymentOrderList", req, cb);
    }
    /**
     * 商户查询是否签约和签约行为上报
     */
    async RegisterBehavior(req, cb) {
        return this.request("RegisterBehavior", req, cb);
    }
    /**
     * 云企付-查询支持银行列表
     */
    async QueryOpenBankSupportBankList(req, cb) {
        return this.request("QueryOpenBankSupportBankList", req, cb);
    }
    /**
     * 云支付-查询商户明细接口
     */
    async ViewMerchant(req, cb) {
        return this.request("ViewMerchant", req, cb);
    }
    /**
     * 直播平台-上传代理商完税证明
     */
    async UploadTaxPayment(req, cb) {
        return this.request("UploadTaxPayment", req, cb);
    }
    /**
     * 务工卡-核身预下单带授权
     */
    async CreatePayRollPreOrderWithAuth(req, cb) {
        return this.request("CreatePayRollPreOrderWithAuth", req, cb);
    }
    /**
     * 灵云V2-订单汇总列表查询
     */
    async QueryFlexOrderSummaryList(req, cb) {
        return this.request("QueryFlexOrderSummaryList", req, cb);
    }
    /**
     * 云企付-创建支付订单。支持B2B网关支付，B2C转账下单。
     */
    async CreateOpenBankPaymentOrder(req, cb) {
        return this.request("CreateOpenBankPaymentOrder", req, cb);
    }
    /**
     * 云支付订单退款接口
     */
    async RefundTlinxOrder(req, cb) {
        return this.request("RefundTlinxOrder", req, cb);
    }
    /**
     * 商户解除绑定的提现银行卡
     */
    async UnBindAcct(req, cb) {
        return this.request("UnBindAcct", req, cb);
    }
    /**
     * 云支付-分账请求接口
     */
    async DistributeApply(req, cb) {
        return this.request("DistributeApply", req, cb);
    }
    /**
     * 跨境-对接方账户余额查询
     */
    async QueryMerchantBalance(req, cb) {
        return this.request("QueryMerchantBalance", req, cb);
    }
    /**
     * 云支付-查询合同支付方式列表接口
     */
    async QueryContractPayWayList(req, cb) {
        return this.request("QueryContractPayWayList", req, cb);
    }
    /**
     * 务工卡-核身预下单
     */
    async CreatePayRollPreOrder(req, cb) {
        return this.request("CreatePayRollPreOrder", req, cb);
    }
    /**
     * 云企付-跨境支付下单
     */
    async CreateOpenBankGlobalPaymentOrder(req, cb) {
        return this.request("CreateOpenBankGlobalPaymentOrder", req, cb);
    }
    /**
     * 云支付-添加合同接口
     */
    async AddContract(req, cb) {
        return this.request("AddContract", req, cb);
    }
    /**
     * 创建子商户
     */
    async CreateCloudSubMerchant(req, cb) {
        return this.request("CreateCloudSubMerchant", req, cb);
    }
    /**
     * 直播平台-删除代理商完税信息
     */
    async DeleteAgentTaxPaymentInfo(req, cb) {
        return this.request("DeleteAgentTaxPaymentInfo", req, cb);
    }
    /**
     * 直播平台-代理商完税信息录入
     */
    async CreateAgentTaxPaymentInfos(req, cb) {
        return this.request("CreateAgentTaxPaymentInfos", req, cb);
    }
    /**
     * 直播平台-删除代理商完税信息
     */
    async DeleteAgentTaxPaymentInfos(req, cb) {
        return this.request("DeleteAgentTaxPaymentInfos", req, cb);
    }
    /**
     * 商户新增的接口
     */
    async CreatePayMerchant(req, cb) {
        return this.request("CreatePayMerchant", req, cb);
    }
    /**
     * 云企付-结算单查询结果
     */
    async QueryOpenBankSettleOrder(req, cb) {
        return this.request("QueryOpenBankSettleOrder", req, cb);
    }
    /**
     * 灵云-批量转账结果查询
     */
    async QueryBatchPaymentResult(req, cb) {
        return this.request("QueryBatchPaymentResult", req, cb);
    }
    /**
     * 务工卡-查询核身记录
     */
    async GetPayRollAuthList(req, cb) {
        return this.request("GetPayRollAuthList", req, cb);
    }
    /**
     * 灵云V2-收款用户账户信息查询
     */
    async QueryFlexPayeeAccountInfo(req, cb) {
        return this.request("QueryFlexPayeeAccountInfo", req, cb);
    }
    /**
     * 云企付-退款申请
     */
    async RefundOpenBankOrder(req, cb) {
        return this.request("RefundOpenBankOrder", req, cb);
    }
    /**
     * 务工卡-生成授权令牌
     */
    async CreatePayRollToken(req, cb) {
        return this.request("CreatePayRollToken", req, cb);
    }
    /**
     * 灵云-上传主播信息
     */
    async UploadExternalAnchorInfo(req, cb) {
        return this.request("UploadExternalAnchorInfo", req, cb);
    }
    /**
     * 会员绑定信息查询。查询标志为“单个会员”的情况下，返回该会员的有效的绑定账户信息。
查询标志为“全部会员”的情况下，返回市场下的全部的有效的绑定账户信息。查询标志为“单个会员的证件信息”的情况下，返回市场下的指定的会员的留存在电商见证宝系统的证件信息。
     */
    async QueryMemberBind(req, cb) {
        return this.request("QueryMemberBind", req, cb);
    }
    /**
     * 子商户在线签约
     */
    async ApplyOpenBankSubMerchantSignOnline(req, cb) {
        return this.request("ApplyOpenBankSubMerchantSignOnline", req, cb);
    }
    /**
     * 应用需要先调用本接口生成支付订单号，并将应答的PayInfo透传给聚鑫SDK，拉起客户端（包括微信公众号/微信小程序/客户端App）支付。
     */
    async UnifiedOrder(req, cb) {
        return this.request("UnifiedOrder", req, cb);
    }
    /**
     * 云企付-子商户银行卡解绑结果查询
     */
    async QueryOpenBankUnbindExternalSubMerchantBankAccount(req, cb) {
        return this.request("QueryOpenBankUnbindExternalSubMerchantBankAccount", req, cb);
    }
    /**
     * 云鉴-消费订单确认接口
     */
    async ConfirmOrder(req, cb) {
        return this.request("ConfirmOrder", req, cb);
    }
    /**
     * 云支付-查询合同可关联门店接口
     */
    async QueryContractRelateShop(req, cb) {
        return this.request("QueryContractRelateShop", req, cb);
    }
    /**
     * 云支付-查询门店明细接口
     */
    async ViewShop(req, cb) {
        return this.request("ViewShop", req, cb);
    }
    /**
     * 验证鉴权金额。此接口可受理BindRelateAcctSmallAmount接口发起的转账金额（往账鉴权方式）的验证处理。若所回填的验证金额验证通过，则会绑定原申请中的银行账户作为提现账户。通过此接口也可以查得BindRelateAcctSmallAmount接口发起的来账鉴权方式的申请的当前状态。
     */
    async CheckAmount(req, cb) {
        return this.request("CheckAmount", req, cb);
    }
    /**
     * 智能代发-单笔代发转账查询接口
     */
    async QueryTransferResult(req, cb) {
        return this.request("QueryTransferResult", req, cb);
    }
    /**
     * 直播平台-主播入驻
     */
    async CreateAnchor(req, cb) {
        return this.request("CreateAnchor", req, cb);
    }
    /**
     * 跨境-查询汇出结果
     */
    async QueryOutwardOrder(req, cb) {
        return this.request("QueryOutwardOrder", req, cb);
    }
    /**
     * 云支付-获取门店OpenId接口
     */
    async QueryShopOpenId(req, cb) {
        return this.request("QueryShopOpenId", req, cb);
    }
    /**
     * 财税-查询金融数据文件下载链接
     */
    async QueryFinancialDataUrl(req, cb) {
        return this.request("QueryFinancialDataUrl", req, cb);
    }
    /**
     * 商户恶意注册接口
     */
    async QueryMaliciousRegistration(req, cb) {
        return this.request("QueryMaliciousRegistration", req, cb);
    }
    /**
     * 山姆聚合支付项目-存量订单退款接口。可以通过本接口将支付款全部或部分退还给付款方，在收到用户退款请求并且验证成功之后，按照退款规则将支付款按原路退回到支付账号。
     */
    async MigrateOrderRefund(req, cb) {
        return this.request("MigrateOrderRefund", req, cb);
    }
    /**
     * 云企付-子商户资质文件查询
     */
    async QueryOpenBankSubMerchantCredential(req, cb) {
        return this.request("QueryOpenBankSubMerchantCredential", req, cb);
    }
    /**
     * 灵云V2-查询付款订单状态
     */
    async QueryFlexPaymentOrderStatus(req, cb) {
        return this.request("QueryFlexPaymentOrderStatus", req, cb);
    }
    /**
     * 灵云V2-平台账户余额查询
     */
    async QueryFlexPlatformAccountBalance(req, cb) {
        return this.request("QueryFlexPlatformAccountBalance", req, cb);
    }
    /**
     * 灵云V2-查询税前金额
     */
    async QueryFlexAmountBeforeTax(req, cb) {
        return this.request("QueryFlexAmountBeforeTax", req, cb);
    }
    /**
     * 聚鑫-开户信息查询
     */
    async QueryAcctInfo(req, cb) {
        return this.request("QueryAcctInfo", req, cb);
    }
    /**
     * 聚鑫-申请对账文件
     */
    async ApplyReconciliationFile(req, cb) {
        return this.request("ApplyReconciliationFile", req, cb);
    }
    /**
     * 聚鑫-查询对账文件申请结果
     */
    async QueryReconciliationFileApplyInfo(req, cb) {
        return this.request("QueryReconciliationFileApplyInfo", req, cb);
    }
    /**
     * 查询银行时间段内清分提现明细。查询银行时间段内清分提现明细接口：若为“见证+收单退款”“见证+收单充值”记录时备注Note为“见证+收单充值,订单号”“见证+收单退款,订单号”，此接口可以查到T0/T1的充值明细和退款记录。查询标志：充值记录仍用3清分选项查询，退款记录同提现用2选项查询。
     */
    async QueryBankWithdrawCashDetails(req, cb) {
        return this.request("QueryBankWithdrawCashDetails", req, cb);
    }
    /**
     * 云企付-分页查询对账单数据
     */
    async QueryOpenBankBillDataPage(req, cb) {
        return this.request("QueryOpenBankBillDataPage", req, cb);
    }
    /**
     * 云鉴-查询对账单下载地址的接口
     */
    async QueryDownloadBillURL(req, cb) {
        return this.request("QueryDownloadBillURL", req, cb);
    }
    /**
     * 商户绑定提现银行卡的验证接口
     */
    async CheckAcct(req, cb) {
        return this.request("CheckAcct", req, cb);
    }
    /**
     * 灵云-绑定账号
     */
    async BindAccount(req, cb) {
        return this.request("BindAccount", req, cb);
    }
    /**
     * 云鉴-消费订单查询接口
     */
    async QueryMerchantOrder(req, cb) {
        return this.request("QueryMerchantOrder", req, cb);
    }
    /**
     * 云企付-子商户银行卡打款验证，在接入TENPAY渠道EBANK_PAYMENT付款时，若客户期望接入担保支付，需在接入前先完成，收款商户绑定的银行卡进行打款验证。验证成功后，才可以调用CreateOpenBankPaymentOrder接口进行担保支付下单。
     */
    async VerifyOpenBankAccount(req, cb) {
        return this.request("VerifyOpenBankAccount", req, cb);
    }
    /**
     * 灵云V2-收款用户开立
     */
    async CreateFlexPayee(req, cb) {
        return this.request("CreateFlexPayee", req, cb);
    }
    /**
     * 查询微工卡核身结果
     */
    async QueryFlexWechatAuthResult(req, cb) {
        return this.request("QueryFlexWechatAuthResult", req, cb);
    }
    /**
     * 智慧零售-发票红冲V2
     */
    async CreateRedInvoiceV2(req, cb) {
        return this.request("CreateRedInvoiceV2", req, cb);
    }
    /**
     * 对于存量的签约关系导入或者部分场景下米大师无法收到签约通知的场景，需要由调用方主动将签约状态同步至米大师
     */
    async SyncContractData(req, cb) {
        return this.request("SyncContractData", req, cb);
    }
    /**
     * 直播平台-上传代理商完税列表
     */
    async UploadTaxList(req, cb) {
        return this.request("UploadTaxList", req, cb);
    }
    /**
     * 灵云-重新绑定账号
     */
    async ModifyBindedAccount(req, cb) {
        return this.request("ModifyBindedAccount", req, cb);
    }
    /**
     * 智慧零售-发票查询V2
     */
    async QueryInvoiceV2(req, cb) {
        return this.request("QueryInvoiceV2", req, cb);
    }
    /**
     * 商户绑定提现银行卡，每个商户只能绑定一张提现银行卡
     */
    async BindAcct(req, cb) {
        return this.request("BindAcct", req, cb);
    }
    /**
     * 会员绑定提现账户-小额鉴权。会员申请绑定提现账户，绑定后从会员子账户中提现到绑定账户。
转账鉴权有两种形式：往账鉴权和来账鉴权。
往账鉴权：该接口发起成功后，银行会向提现账户转入小于等于0.5元的随机金额，并短信通知客户查看，客户查看后，需将收到的金额大小，在电商平台页面上回填，并通知银行。银行验证通过后，完成提现账户绑定。
来账鉴权：该接口发起成功后，银行以短信通知客户查看，客户查看后，需通过待绑定的账户往市场的监管账户转入短信上指定的金额。银行检索到该笔指定金额的来账是源自待绑定账户，则绑定成功。平安银行的账户，即BankType送1时，大小额行号和超级网银号都不用送。
     */
    async BindRelateAcctSmallAmount(req, cb) {
        return this.request("BindRelateAcctSmallAmount", req, cb);
    }
    /**
     * 云鉴-消费订单发起的接口
     */
    async CreateOrder(req, cb) {
        return this.request("CreateOrder", req, cb);
    }
    /**
     * 云支付-统一下单接口
     */
    async UnifiedTlinxOrder(req, cb) {
        return this.request("UnifiedTlinxOrder", req, cb);
    }
    /**
     * 云支付-上传机构文件接口
     */
    async UploadOrgFile(req, cb) {
        return this.request("UploadOrgFile", req, cb);
    }
    /**
     * 会员绑定提现账户-回填银联鉴权短信码。用于会员填写动态验证码后，发往银行进行验证，验证成功则完成绑定。
     */
    async BindRelateAccReUnionPay(req, cb) {
        return this.request("BindRelateAccReUnionPay", req, cb);
    }
    /**
     * 云鉴-商户信息查询接口
     */
    async QueryMerchant(req, cb) {
        return this.request("QueryMerchant", req, cb);
    }
    /**
     * 微工卡开通预核身接口
     */
    async ApplyFlexWechatPreAuth(req, cb) {
        return this.request("ApplyFlexWechatPreAuth", req, cb);
    }
    /**
     * 修改会员属性-普通商户子账户。修改会员的会员属性。
     */
    async ReviseMbrProperty(req, cb) {
        return this.request("ReviseMbrProperty", req, cb);
    }
    /**
     * 云企付-子商户银行卡绑定
     */
    async BindOpenBankExternalSubMerchantBankAccount(req, cb) {
        return this.request("BindOpenBankExternalSubMerchantBankAccount", req, cb);
    }
    /**
     * 子商户余额查询
     */
    async QueryBalance(req, cb) {
        return this.request("QueryBalance", req, cb);
    }
    /**
     * 撤销会员在途充值(经第三方支付渠道)接口
     */
    async RevokeRechargeByThirdPay(req, cb) {
        return this.request("RevokeRechargeByThirdPay", req, cb);
    }
    /**
     * 提交退款申请后，通过调用该接口查询退款状态。退款可能有一定延时，用微信零钱支付的退款约20分钟内到账，银行卡支付的退款约3个工作日后到账。
     */
    async QueryCloudRefundOrder(req, cb) {
        return this.request("QueryCloudRefundOrder", req, cb);
    }
    /**
     * 云支付-下载机构文件接口
     */
    async DownloadOrgFile(req, cb) {
        return this.request("DownloadOrgFile", req, cb);
    }
    /**
     * 调用该接口返回对账单下载地址，对账单下载URL通过GET方式访问，返回zip包，解压后为csv格式文件。文件首行如下：
订单号,订单归属日期,机构编号,订单描述,交易类型,订单状态,支付场景,原始金额,折扣金额,实际交易金额,支付渠道优惠金额,抹零金额,币种,下单时间,付款成功时间,商户编号,门店编号,付款方式编号,付款方式名称,商户手续费T1,商户扣率,是否信用卡交易,原始订单号,用户账号,外部订单号,订单备注
     */
    async GetBillDownloadUrl(req, cb) {
        return this.request("GetBillDownloadUrl", req, cb);
    }
    /**
     * 直播平台-查询批次信息
     */
    async QueryAgentTaxPaymentBatch(req, cb) {
        return this.request("QueryAgentTaxPaymentBatch", req, cb);
    }
    /**
     * 查询单笔订单交易状态
     */
    async DescribeOrderStatus(req, cb) {
        return this.request("DescribeOrderStatus", req, cb);
    }
    /**
     * 聚鑫-查询子账户绑定银行卡
     */
    async QueryAcctBinding(req, cb) {
        return this.request("QueryAcctBinding", req, cb);
    }
    /**
     * 聚鑫-查询会员资金交易信息列表
     */
    async QueryFundsTransactionDetails(req, cb) {
        return this.request("QueryFundsTransactionDetails", req, cb);
    }
    /**
     * 云企付-创建核销申请，适用于针对支付订单维度的确认收货，解冻等业务场景。目前支持的渠道有TENPAY下的EBANK_PAYMENT付款方式创建支付订单时，选择担保支付下单的订单进行解冻。
     */
    async CreateOpenBankVerificationOrder(req, cb) {
        return this.request("CreateOpenBankVerificationOrder", req, cb);
    }
    /**
     * 正常结算提现失败情况下，发起重新提现的请求接口
     */
    async ApplyReWithdrawal(req, cb) {
        return this.request("ApplyReWithdrawal", req, cb);
    }
    /**
     * 云支付-分账解除分账接收方接口
     */
    async DistributeRemoveReceiver(req, cb) {
        return this.request("DistributeRemoveReceiver", req, cb);
    }
    /**
     * 跨境-付款人申请。通过该接口提交付款人信息并进行 kyc 审核。
     */
    async ApplyPayerInfo(req, cb) {
        return this.request("ApplyPayerInfo", req, cb);
    }
    /**
     * 云企付-查询订单支付结果
     */
    async QueryOpenBankPaymentOrder(req, cb) {
        return this.request("QueryOpenBankPaymentOrder", req, cb);
    }
    /**
     * 跨境-提交贸易材料。通过提交贸易材料接口可为对接方累计贸易额度，在额度范围内可发起汇兑汇出交易。
     */
    async ApplyTrade(req, cb) {
        return this.request("ApplyTrade", req, cb);
    }
    /**
     * 云企付-子商户银行卡解绑
     */
    async UnbindOpenBankExternalSubMerchantBankAccount(req, cb) {
        return this.request("UnbindOpenBankExternalSubMerchantBankAccount", req, cb);
    }
    /**
     * 查询银行在途清算结果。查询时间段内交易网的在途清算结果。
     */
    async QueryBankClear(req, cb) {
        return this.request("QueryBankClear", req, cb);
    }
    /**
     * 云企付-创建商户
     */
    async CreateOpenBankMerchant(req, cb) {
        return this.request("CreateOpenBankMerchant", req, cb);
    }
    /**
     * 智慧零售-发票红冲
     */
    async CreateRedInvoice(req, cb) {
        return this.request("CreateRedInvoice", req, cb);
    }
    /**
     * 发起支付等渠道操作后，可以调用该接口查询渠道的数据。
     */
    async QueryCloudChannelData(req, cb) {
        return this.request("QueryCloudChannelData", req, cb);
    }
    /**
     * 云支付-查询城市编码接口
     */
    async QueryCityCode(req, cb) {
        return this.request("QueryCityCode", req, cb);
    }
    /**
     * 跨境-成功申报材料查询。查询成功入库的申报材料。
     */
    async QueryApplicationMaterial(req, cb) {
        return this.request("QueryApplicationMaterial", req, cb);
    }
    /**
     * 灵云V2-收款用户账户权益状态修改
     */
    async ModifyFlexPayeeAccountRightStatus(req, cb) {
        return this.request("ModifyFlexPayeeAccountRightStatus", req, cb);
    }
    /**
     * 如交易订单需退款，可以通过本接口将支付款全部或部分退还给付款方，聚鑫将在收到退款请求并且验证成功之后，按照退款规则将支付款按原路退回到支付帐号。最长支持1年的订单退款。在订单包含多个子订单的情况下，如果使用本接口传入OutTradeNo或TransactionId退款，则只支持全单退款；如果需要部分退款，请通过传入子订单的方式来指定部分金额退款。
     */
    async Refund(req, cb) {
        return this.request("Refund", req, cb);
    }
    /**
     * 云企付-关闭订单
     */
    async CloseOpenBankPaymentOrder(req, cb) {
        return this.request("CloseOpenBankPaymentOrder", req, cb);
    }
    /**
     * 如交易订单需退款，可以通过本接口将支付款全部或部分退还给付款方，聚鑫将在收到退款请求并且验证成功之后，按照退款规则将支付款按原路退回到支付帐号。最长支持1年的订单退款。在订单包含多个子订单的情况下，如果使用本接口传入OutTradeNo或TransactionId退款，则只支持全单退款；如果需要部分退款，请通过传入子订单的方式来指定部分金额退款。
     */
    async RefundCloudOrder(req, cb) {
        return this.request("RefundCloudOrder", req, cb);
    }
    /**
     * 灵云V2-收款用户账户余额查询
     */
    async QueryFlexPayeeAccountBalance(req, cb) {
        return this.request("QueryFlexPayeeAccountBalance", req, cb);
    }
    /**
     * 云支付-分账授权申请接口
     */
    async DistributeAccreditTlinx(req, cb) {
        return this.request("DistributeAccreditTlinx", req, cb);
    }
    /**
     * 会员在途充值(经第三方支付渠道)接口
     */
    async RechargeByThirdPay(req, cb) {
        return this.request("RechargeByThirdPay", req, cb);
    }
    /**
     * 见证宝-会员在途充值(经第三方支付渠道)
     */
    async RechargeMemberThirdPay(req, cb) {
        return this.request("RechargeMemberThirdPay", req, cb);
    }
    /**
     * 智慧零售-商户注册
     */
    async CreateMerchant(req, cb) {
        return this.request("CreateMerchant", req, cb);
    }
    /**
     * 子商户入驻聚鑫平台
     */
    async CreateAcct(req, cb) {
        return this.request("CreateAcct", req, cb);
    }
    /**
     * 会员间交易接口
     */
    async ExecuteMemberTransaction(req, cb) {
        return this.request("ExecuteMemberTransaction", req, cb);
    }
    /**
     * 云支付-分账结果查询接口
     */
    async DistributeQuery(req, cb) {
        return this.request("DistributeQuery", req, cb);
    }
    /**
     * 云企付-子商户费率配置
     */
    async CreateOpenBankSubMerchantRateConfigure(req, cb) {
        return this.request("CreateOpenBankSubMerchantRateConfigure", req, cb);
    }
    /**
     * 灵云-单笔主播转账接口
     */
    async CreateSinglePayment(req, cb) {
        return this.request("CreateSinglePayment", req, cb);
    }
    /**
     * 登记挂账(支持撤销)
     */
    async RegisterBill(req, cb) {
        return this.request("RegisterBill", req, cb);
    }
    /**
     * 灵云V2-查询对账单文件下载链接
     */
    async QueryFlexBillDownloadUrl(req, cb) {
        return this.request("QueryFlexBillDownloadUrl", req, cb);
    }
    /**
     * 云企付-查询对账单下载地址
     */
    async QueryOpenBankDownLoadUrl(req, cb) {
        return this.request("QueryOpenBankDownLoadUrl", req, cb);
    }
    /**
     * 云支付-查询订单付款状态
     */
    async QueryOrderStatus(req, cb) {
        return this.request("QueryOrderStatus", req, cb);
    }
    /**
     * 跨境-付款人查询
     */
    async QueryPayerInfo(req, cb) {
        return this.request("QueryPayerInfo", req, cb);
    }
    /**
     * 智慧零售-查询公司抬头
     */
    async QueryCompanyTitle(req, cb) {
        return this.request("QueryCompanyTitle", req, cb);
    }
    /**
     * 商户提现
     */
    async ApplyWithdrawal(req, cb) {
        return this.request("ApplyWithdrawal", req, cb);
    }
    /**
     * 查询充值明细接口
     */
    async DescribeChargeDetail(req, cb) {
        return this.request("DescribeChargeDetail", req, cb);
    }
    /**
     * 务工卡-查询授权关系
     */
    async GetPayRollAuth(req, cb) {
        return this.request("GetPayRollAuth", req, cb);
    }
    /**
     * 调用该接口返回对账单下载地址，对账单下载URL通过GET方式访问，返回zip包，解压后为csv格式文件。文件首行如下：
商户号,订单号,支付订单号,分账订单总金额,分账详情（通过|分割每笔明细：商户号1#分账金额1|商户号2#分账金额2）,交易手续费承担方商户号,交易手续费,发起时间,分账状态,结算日期,非交易主体分账金额,商户退款订单号,商户分账单号
     */
    async GetDistributeBillDownloadUrl(req, cb) {
        return this.request("GetDistributeBillDownloadUrl", req, cb);
    }
    /**
     * 会员子账户开立。会员在银行注册，并开立会员子账户，交易网会员代码即会员在平台端系统的会员编号。
平台需保存银行返回的子账户账号，后续交易接口都会用到。会员属性字段为预留扩展字段，当前必须送默认值。
     */
    async CreateCustAcctId(req, cb) {
        return this.request("CreateCustAcctId", req, cb);
    }
    /**
     * 直播平台-文件上传
     */
    async UploadFile(req, cb) {
        return this.request("UploadFile", req, cb);
    }
    /**
     * 通过此接口关闭此前已创建的订单，关闭后，用户将无法继续付款。仅能关闭创建后未支付的订单
     */
    async CloseOrder(req, cb) {
        return this.request("CloseOrder", req, cb);
    }
    /**
     * 智慧零售-查询管理端商户
     */
    async QueryMerchantInfoForManagement(req, cb) {
        return this.request("QueryMerchantInfoForManagement", req, cb);
    }
    /**
     * 灵云V2-修改收款用户资金账号信息
     */
    async ModifyFlexFundingAccount(req, cb) {
        return this.request("ModifyFlexFundingAccount", req, cb);
    }
    /**
     * 撤销会员在途充值(经第三方支付渠道)
     */
    async RevokeMemberRechargeThirdPay(req, cb) {
        return this.request("RevokeMemberRechargeThirdPay", req, cb);
    }
    /**
     * 云企付-按日期批量查询回单下载地址
     */
    async QueryOpenBankDailyReceiptDownloadUrl(req, cb) {
        return this.request("QueryOpenBankDailyReceiptDownloadUrl", req, cb);
    }
    /**
     * 云支付-分账撤销接口
     */
    async DistributeCancel(req, cb) {
        return this.request("DistributeCancel", req, cb);
    }
    /**
     * 获取对账中心账单下载地址的接口
     */
    async DownloadReconciliationUrl(req, cb) {
        return this.request("DownloadReconciliationUrl", req, cb);
    }
    /**
     * 会员绑定提现账户-银联鉴权。用于会员申请绑定提现账户，申请后银行前往银联验证卡信息：姓名、证件、卡号、银行预留手机是否相符，相符则发送给会员手机动态验证码并返回成功，不相符则返回失败。
平台接收到银行返回成功后，进入输入动态验证码的页面，有效期120秒，若120秒未输入，客户可点击重新发送动态验证码，这个步骤重新调用该接口即可。
平安银行的账户，大小额行号和超级网银号都不用送。
超级网银号：单笔转账金额不超过5万，不限制笔数，只用选XX银行，不用具体到支行，可实时知道对方是否收款成功。
大小额联行号：单笔转账可超过5万，需具体到支行，不能实时知道对方是否收款成功。金额超过5万的，在工作日的8点30-17点间才会成功。
     */
    async BindRelateAcctUnionPay(req, cb) {
        return this.request("BindRelateAcctUnionPay", req, cb);
    }
    /**
     * 会员间交易-不验证。此接口可以实现会员间的余额的交易，实现资金在会员之间流动。
     */
    async QueryMemberTransaction(req, cb) {
        return this.request("QueryMemberTransaction", req, cb);
    }
    /**
     * 云企付-子商户资质文件上传
     */
    async UploadOpenBankSubMerchantCredential(req, cb) {
        return this.request("UploadOpenBankSubMerchantCredential", req, cb);
    }
    /**
     * 云企付-绑定分账收款方查询
     */
    async QueryOpenBankProfitSharePayee(req, cb) {
        return this.request("QueryOpenBankProfitSharePayee", req, cb);
    }
    /**
     * 云支付-查询已添加分账接收方接口
     */
    async DistributeQueryReceiver(req, cb) {
        return this.request("DistributeQueryReceiver", req, cb);
    }
    /**
     * 云企付-结算申请接口
     */
    async ApplyOpenBankSettleOrder(req, cb) {
        return this.request("ApplyOpenBankSettleOrder", req, cb);
    }
    /**
     * 获取单笔代发转账对账单下载URL
     */
    async QueryBillDownloadURL(req, cb) {
        return this.request("QueryBillDownloadURL", req, cb);
    }
    /**
     * 智慧零售-发票开具
     */
    async CreateInvoice(req, cb) {
        return this.request("CreateInvoice", req, cb);
    }
    /**
     * 云企付-单笔交易回单申请结果查询
     */
    async QueryOpenBankOrderDetailReceiptInfo(req, cb) {
        return this.request("QueryOpenBankOrderDetailReceiptInfo", req, cb);
    }
    /**
     * 提交退款申请后，通过调用该接口查询退款状态。退款可能有一定延时，用微信零钱支付的退款约20分钟内到账，银行卡支付的退款约3个工作日后到账。
     */
    async QueryRefund(req, cb) {
        return this.request("QueryRefund", req, cb);
    }
    /**
     * 云支付-分账添加分账接收方接口
     */
    async DistributeAddReceiver(req, cb) {
        return this.request("DistributeAddReceiver", req, cb);
    }
    /**
     * 子商户在线签约查询
     */
    async QueryOpenBankSubMerchantSignOnline(req, cb) {
        return this.request("QueryOpenBankSubMerchantSignOnline", req, cb);
    }
    /**
     * 会员间交易退款
     */
    async RefundMemberTransaction(req, cb) {
        return this.request("RefundMemberTransaction", req, cb);
    }
    /**
     * 云支付-添加商户接口
     */
    async AddMerchant(req, cb) {
        return this.request("AddMerchant", req, cb);
    }
    /**
     * 云企付-子商户银行卡列表查询
     */
    async QueryOpenBankExternalSubMerchantBankAccount(req, cb) {
        return this.request("QueryOpenBankExternalSubMerchantBankAccount", req, cb);
    }
    /**
     * 提交退款申请后，通过调用该接口查询退款状态。退款可能有一定延时。
     */
    async MigrateOrderRefundQuery(req, cb) {
        return this.request("MigrateOrderRefundQuery", req, cb);
    }
    /**
     * 直播平台-查询代理商结算单链接
     */
    async QueryAgentStatements(req, cb) {
        return this.request("QueryAgentStatements", req, cb);
    }
    /**
     * 通过此接口查询签约数据
     */
    async QueryContract(req, cb) {
        return this.request("QueryContract", req, cb);
    }
    /**
     * 跨境-汇出指令申请。通过该接口可将对接方账户中的人民币余额汇兑成外币，再汇出至指定银行账户。
     */
    async ApplyOutwardOrder(req, cb) {
        return this.request("ApplyOutwardOrder", req, cb);
    }
    /**
     * 云企付-子商户进件结果查询
     */
    async QueryOpenBankExternalSubMerchantRegistration(req, cb) {
        return this.request("QueryOpenBankExternalSubMerchantRegistration", req, cb);
    }
    /**
     * 灵云V2-绑定收款用户资金账号信息
     */
    async AddFlexFundingAccount(req, cb) {
        return this.request("AddFlexFundingAccount", req, cb);
    }
    /**
     * 应用需要先调用本接口生成支付订单号，并将应答的PayInfo透传给聚鑫SDK，拉起客户端（包括微信公众号/微信小程序/客户端App）支付。
     */
    async UnifiedCloudOrder(req, cb) {
        return this.request("UnifiedCloudOrder", req, cb);
    }
    /**
     * 云支付-查询支付方式费率及自定义表单项接口
     */
    async QueryContractPayFee(req, cb) {
        return this.request("QueryContractPayFee", req, cb);
    }
    /**
     * 查询小额鉴权转账结果。查询小额往账鉴权的转账状态。
     */
    async QuerySmallAmountTransfer(req, cb) {
        return this.request("QuerySmallAmountTransfer", req, cb);
    }
    /**
     * 云企付-子商户银行卡绑定结果查询
     */
    async QueryOpenBankBindExternalSubMerchantBankAccount(req, cb) {
        return this.request("QueryOpenBankBindExternalSubMerchantBankAccount", req, cb);
    }
    /**
     * 第三方子商户电子记账本创建接口
     */
    async CreateOpenBankExternalSubMerchantAccountBook(req, cb) {
        return this.request("CreateOpenBankExternalSubMerchantAccountBook", req, cb);
    }
    /**
     * 查询银行单笔交易状态。查询单笔交易的状态。
     */
    async QuerySingleTransactionStatus(req, cb) {
        return this.request("QuerySingleTransactionStatus", req, cb);
    }
    /**
     * 通过商家批次单号或者微信批次号查询批次单
     */
    async QueryTransferBatch(req, cb) {
        return this.request("QueryTransferBatch", req, cb);
    }
    /**
     * 通过此接口进行解约
     */
    async TerminateContract(req, cb) {
        return this.request("TerminateContract", req, cb);
    }
    /**
     * 灵云V2-结算
     */
    async ApplyFlexSettlement(req, cb) {
        return this.request("ApplyFlexSettlement", req, cb);
    }
    /**
     * 云企付-子商户银行卡余额查询
     */
    async QueryOpenBankBankAccountBalance(req, cb) {
        return this.request("QueryOpenBankBankAccountBalance", req, cb);
    }
    /**
     * 聚鑫-开户信息列表查询, 查询某一段时间的开户信息
     */
    async QueryAcctInfoList(req, cb) {
        return this.request("QueryAcctInfoList", req, cb);
    }
    /**
     * 云企付-子商户进件V2
     */
    async CreateOpenBankAggregatedSubMerchantRegistration(req, cb) {
        return this.request("CreateOpenBankAggregatedSubMerchantRegistration", req, cb);
    }
    /**
     * 查询对账文件信息。平台调用该接口获取需下载对账文件的文件名称以及密钥。 平台获取到信息后， 可以再调用OPENAPI的文件下载功能。
     */
    async QueryReconciliationDocument(req, cb) {
        return this.request("QueryReconciliationDocument", req, cb);
    }
    /**
     * 通过此接口关闭此前已创建的订单。关闭后，用户将无法继续付款，仅能关闭创建后未支付的订单。
     */
    async CloseCloudOrder(req, cb) {
        return this.request("CloseCloudOrder", req, cb);
    }
    /**
     * 灵云-查询超额信息
     */
    async QueryExceedingInfo(req, cb) {
        return this.request("QueryExceedingInfo", req, cb);
    }
    /**
     * 云鉴-消费订单退款的接口
     */
    async RefundOrder(req, cb) {
        return this.request("RefundOrder", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248868, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.csip = void 0;
const v20221121_1 = require("./v20221121");
exports.csip = {
    v20221121: v20221121_1.v20221121,
};

}, function(modId) { var map = {"./v20221121":1738984248869}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248869, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20221121 = void 0;
const Models = require("./csip_models");
const csip_client_1 = require("./csip_client");
exports.v20221121 = {
    Client: csip_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./csip_models":1738984248870,"./csip_client":1738984248871}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248870, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248871, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * csip client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("csip.tencentcloudapi.com", "2022-11-21", clientConfig);
    }
    /**
     * 查询用户行为分析策略列表
     */
    async DescribeUebaRule(req, cb) {
        return this.request("DescribeUebaRule", req, cb);
    }
    /**
     * 获取任务扫描报告列表
     */
    async DescribeTaskLogList(req, cb) {
        return this.request("DescribeTaskLogList", req, cb);
    }
    /**
     * 删除域名和ip请求
     */
    async DeleteDomainAndIp(req, cb) {
        return this.request("DeleteDomainAndIp", req, cb);
    }
    /**
     * db资产详情
     */
    async DescribeDbAssetInfo(req, cb) {
        return this.request("DescribeDbAssetInfo", req, cb);
    }
    /**
     * 获取网卡列表
     */
    async DescribeNICAssets(req, cb) {
        return this.request("DescribeNICAssets", req, cb);
    }
    /**
     * 获取漏洞视角的漏洞风险列表
     */
    async DescribeRiskCenterVULViewVULRiskList(req, cb) {
        return this.request("DescribeRiskCenterVULViewVULRiskList", req, cb);
    }
    /**
     * 域名列表
     */
    async DescribeDomainAssets(req, cb) {
        return this.request("DescribeDomainAssets", req, cb);
    }
    /**
     * ip公网列表
     */
    async DescribePublicIpAssets(req, cb) {
        return this.request("DescribePublicIpAssets", req, cb);
    }
    /**
     * csip角色授权绑定接口
     */
    async AddNewBindRoleUser(req, cb) {
        return this.request("AddNewBindRoleUser", req, cb);
    }
    /**
     * 查询clb监听器列表
     */
    async DescribeListenerList(req, cb) {
        return this.request("DescribeListenerList", req, cb);
    }
    /**
     * 停止扫风险中心扫描任务
     */
    async StopRiskCenterTask(req, cb) {
        return this.request("StopRiskCenterTask", req, cb);
    }
    /**
     * 删除风险中心扫描任务
     */
    async DeleteRiskScanTask(req, cb) {
        return this.request("DeleteRiskScanTask", req, cb);
    }
    /**
     * 获取资产视角的弱口令风险列表
     */
    async DescribeRiskCenterAssetViewWeakPasswordRiskList(req, cb) {
        return this.request("DescribeRiskCenterAssetViewWeakPasswordRiskList", req, cb);
    }
    /**
     * 获取资产视角的漏洞风险列表
     */
    async DescribeRiskCenterAssetViewVULRiskList(req, cb) {
        return this.request("DescribeRiskCenterAssetViewVULRiskList", req, cb);
    }
    /**
     * 集群pod列表
     */
    async DescribeClusterPodAssets(req, cb) {
        return this.request("DescribeClusterPodAssets", req, cb);
    }
    /**
     * 获取资产视角的配置风险列表
     */
    async DescribeRiskCenterAssetViewCFGRiskList(req, cb) {
        return this.request("DescribeRiskCenterAssetViewCFGRiskList", req, cb);
    }
    /**
     * 获取vpc列表
     */
    async DescribeVpcAssets(req, cb) {
        return this.request("DescribeVpcAssets", req, cb);
    }
    /**
     * 获取风险服务列表
     */
    async DescribeRiskCenterServerRiskList(req, cb) {
        return this.request("DescribeRiskCenterServerRiskList", req, cb);
    }
    /**
     * 获取cvm列表
     */
    async DescribeCVMAssets(req, cb) {
        return this.request("DescribeCVMAssets", req, cb);
    }
    /**
     * 修改风险中心扫描任务
     */
    async ModifyRiskCenterScanTask(req, cb) {
        return this.request("ModifyRiskCenterScanTask", req, cb);
    }
    /**
     * 云防资产中心统计数据
     */
    async DescribeCFWAssetStatistics(req, cb) {
        return this.request("DescribeCFWAssetStatistics", req, cb);
    }
    /**
     * 获取资产视角的漏洞风险列表
     */
    async DescribeAssetViewVulRiskList(req, cb) {
        return this.request("DescribeAssetViewVulRiskList", req, cb);
    }
    /**
     * 获取漏洞展开详情
     */
    async DescribeVULRiskDetail(req, cb) {
        return this.request("DescribeVULRiskDetail", req, cb);
    }
    /**
     * 获取内容风险列表
     */
    async DescribeRiskCenterWebsiteRiskList(req, cb) {
        return this.request("DescribeRiskCenterWebsiteRiskList", req, cb);
    }
    /**
     * 查询集团账号详情
     */
    async DescribeOrganizationInfo(req, cb) {
        return this.request("DescribeOrganizationInfo", req, cb);
    }
    /**
     * 获取报告下载的临时链接
     */
    async DescribeTaskLogURL(req, cb) {
        return this.request("DescribeTaskLogURL", req, cb);
    }
    /**
     * 更新自定义策略的开关
     */
    async ModifyUebaRuleSwitch(req, cb) {
        return this.request("ModifyUebaRuleSwitch", req, cb);
    }
    /**
     * 创建风险中心扫描任务
     */
    async CreateRiskCenterScanTask(req, cb) {
        return this.request("CreateRiskCenterScanTask", req, cb);
    }
    /**
     * 获取网关列表
     */
    async DescribeGatewayAssets(req, cb) {
        return this.request("DescribeGatewayAssets", req, cb);
    }
    /**
     * 查询TOP攻击信息
     */
    async DescribeTopAttackInfo(req, cb) {
        return this.request("DescribeTopAttackInfo", req, cb);
    }
    /**
     * 立体防护中心查询漏洞信息
     */
    async DescribeSearchBugInfo(req, cb) {
        return this.request("DescribeSearchBugInfo", req, cb);
    }
    /**
     * 查询集团的子账号列表
     */
    async DescribeSubUserInfo(req, cb) {
        return this.request("DescribeSubUserInfo", req, cb);
    }
    /**
     * 获取漏洞视角的漏洞风险列表
     */
    async DescribeVulViewVulRiskList(req, cb) {
        return this.request("DescribeVulViewVulRiskList", req, cb);
    }
    /**
     * 获取扫描报告列表
     */
    async DescribeScanReportList(req, cb) {
        return this.request("DescribeScanReportList", req, cb);
    }
    /**
     * 创建域名、ip相关信息
     */
    async CreateDomainAndIp(req, cb) {
        return this.request("CreateDomainAndIp", req, cb);
    }
    /**
     * 告警中心全量告警列表接口
     */
    async DescribeAlertList(req, cb) {
        return this.request("DescribeAlertList", req, cb);
    }
    /**
     * 批量告警状态处理接口
     */
    async UpdateAlertStatusList(req, cb) {
        return this.request("UpdateAlertStatusList", req, cb);
    }
    /**
     * 获取扫描任务列表
     */
    async DescribeScanTaskList(req, cb) {
        return this.request("DescribeScanTaskList", req, cb);
    }
    /**
     * 数据库资产列表
     */
    async DescribeDbAssets(req, cb) {
        return this.request("DescribeDbAssets", req, cb);
    }
    /**
     * 获取端口视角的端口风险列表
     */
    async DescribeRiskCenterPortViewPortRiskList(req, cb) {
        return this.request("DescribeRiskCenterPortViewPortRiskList", req, cb);
    }
    /**
     * 获取资产视角的端口风险列表
     */
    async DescribeRiskCenterAssetViewPortRiskList(req, cb) {
        return this.request("DescribeRiskCenterAssetViewPortRiskList", req, cb);
    }
    /**
     * 查询漏洞风险高级配置
     */
    async DescribeVULRiskAdvanceCFGList(req, cb) {
        return this.request("DescribeVULRiskAdvanceCFGList", req, cb);
    }
    /**
     * 修改风险中心风险状态
     */
    async ModifyRiskCenterRiskStatus(req, cb) {
        return this.request("ModifyRiskCenterRiskStatus", req, cb);
    }
    /**
     * 修改集团账号状态
     */
    async ModifyOrganizationAccountStatus(req, cb) {
        return this.request("ModifyOrganizationAccountStatus", req, cb);
    }
    /**
     * 查询集团账号用户列表
     */
    async DescribeOrganizationUserInfo(req, cb) {
        return this.request("DescribeOrganizationUserInfo", req, cb);
    }
    /**
     * 集群列表
     */
    async DescribeClusterAssets(req, cb) {
        return this.request("DescribeClusterAssets", req, cb);
    }
    /**
     * 获取子网列表
     */
    async DescribeSubnetAssets(req, cb) {
        return this.request("DescribeSubnetAssets", req, cb);
    }
    /**
     * cvm详情
     */
    async DescribeCVMAssetInfo(req, cb) {
        return this.request("DescribeCVMAssetInfo", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248872, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.csxg = void 0;
const v20230303_1 = require("./v20230303");
exports.csxg = {
    v20230303: v20230303_1.v20230303,
};

}, function(modId) { var map = {"./v20230303":1738984248873}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248873, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20230303 = void 0;
const Models = require("./csxg_models");
const csxg_client_1 = require("./csxg_client");
exports.v20230303 = {
    Client: csxg_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./csxg_models":1738984248874,"./csxg_client":1738984248875}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248874, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248875, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * csxg client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("csxg.tencentcloudapi.com", "2023-03-03", clientConfig);
    }
    /**
     * 修改5G入云服务
     */
    async Modify5GInstanceAttribute(req, cb) {
        return this.request("Modify5GInstanceAttribute", req, cb);
    }
    /**
     * 删除5G入云服务
     */
    async Delete5GInstance(req, cb) {
        return this.request("Delete5GInstance", req, cb);
    }
    /**
     * 创建5G入云服务接口
     */
    async Create5GInstance(req, cb) {
        return this.request("Create5GInstance", req, cb);
    }
    /**
     * 查询5G入云服务
     */
    async Describe5GInstances(req, cb) {
        return this.request("Describe5GInstances", req, cb);
    }
    /**
     * 查询APN信息
     */
    async Describe5GAPNs(req, cb) {
        return this.request("Describe5GAPNs", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248876, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cvm = void 0;
const v20170312_1 = require("./v20170312");
exports.cvm = {
    v20170312: v20170312_1.v20170312,
};

}, function(modId) { var map = {"./v20170312":1738984248877}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248877, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20170312 = void 0;
const Models = require("./cvm_models");
const cvm_client_1 = require("./cvm_client");
exports.v20170312 = {
    Client: cvm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cvm_models":1738984248878,"./cvm_client":1738984248879}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248878, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248879, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cvm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cvm.tencentcloudapi.com", "2017-03-12", clientConfig);
    }
    /**
     * 本接口(InquiryPriceRunInstances)用于创建实例询价。本接口仅允许针对购买限制范围内的实例配置进行询价, 详见：[创建实例](https://cloud.tencent.com/document/api/213/15730)。
     */
    async InquiryPriceRunInstances(req, cb) {
        return this.request("InquiryPriceRunInstances", req, cb);
    }
    /**
     * 本接口 (ModifyInstancesAttribute) 用于修改实例的属性（目前只支持修改实例的名称和关联的安全组）。

* 每次请求必须指定实例的一种属性用于修改。
* “实例名称”仅为方便用户自己管理之用，腾讯云并不以此名称作为在线支持或是进行实例管理操作的依据。
* 支持批量操作。每次请求批量实例的上限为100。
* 修改关联安全组时，子机原来关联的安全组会被解绑。
* 实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表操作成功。
* 修改主机名后实例会立即重启，重启后新的主机名生效。
     */
    async ModifyInstancesAttribute(req, cb) {
        return this.request("ModifyInstancesAttribute", req, cb);
    }
    /**
     * 本接口 (InquiryPriceResetInstancesInternetMaxBandwidth) 用于调整实例公网带宽上限询价。

* 不同机型带宽上限范围不一致，具体限制详见[公网带宽上限](https://cloud.tencent.com/document/product/213/12523)。
* 对于`BANDWIDTH_PREPAID`计费方式的带宽，目前不支持调小带宽，且需要输入参数`StartTime`和`EndTime`，指定调整后的带宽的生效时间段。在这种场景下会涉及扣费，请确保账户余额充足。可通过 [DescribeAccountBalance](https://cloud.tencent.com/document/product/555/20253) 接口查询账户余额。
* 对于 `TRAFFIC_POSTPAID_BY_HOUR`、 `BANDWIDTH_POSTPAID_BY_HOUR` 和 `BANDWIDTH_PACKAGE` 计费方式的带宽，使用该接口调整带宽上限是实时生效的，可以在带宽允许的范围内调大或者调小带宽，不支持输入参数 `StartTime` 和 `EndTime` 。
* 接口不支持调整`BANDWIDTH_POSTPAID_BY_MONTH`计费方式的带宽。
* 接口不支持批量调整 `BANDWIDTH_PREPAID` 和 `BANDWIDTH_POSTPAID_BY_HOUR` 计费方式的带宽。
* 接口不支持批量调整混合计费方式的带宽。例如不支持同时调整`TRAFFIC_POSTPAID_BY_HOUR`和`BANDWIDTH_PACKAGE`计费方式的带宽。
     */
    async InquiryPriceResetInstancesInternetMaxBandwidth(req, cb) {
        return this.request("InquiryPriceResetInstancesInternetMaxBandwidth", req, cb);
    }
    /**
     * 本接口 (DeleteKeyPairs) 用于删除已在腾讯云托管的密钥对。

* 可以同时删除多个密钥对。
* 不能删除已被实例或镜像引用的密钥对，所以需要独立判断是否所有密钥对都被成功删除。
     */
    async DeleteKeyPairs(req, cb) {
        return this.request("DeleteKeyPairs", req, cb);
    }
    /**
     * 本接口 (ImportKeyPair) 用于导入密钥对。

* 本接口的功能是将密钥对导入到用户账户，并不会自动绑定到实例。如需绑定可以使用[AssociasteInstancesKeyPair](https://cloud.tencent.com/document/api/213/9404)接口。
* 需指定密钥对名称以及该密钥对的公钥文本。
* 如果用户只有私钥，可以通过 `SSL` 工具将私钥转换成公钥后再导入。
     */
    async ImportKeyPair(req, cb) {
        return this.request("ImportKeyPair", req, cb);
    }
    /**
     * 本接口 (RunInstances) 用于创建一个或多个指定配置的实例。
 
* 实例创建成功后将自动开机启动，[实例状态](https://cloud.tencent.com/document/product/213/15753#InstanceStatus)变为“运行中”。
* 预付费实例的购买会预先扣除本次实例购买所需金额，按小时后付费实例购买会预先冻结本次实例购买一小时内所需金额，在调用本接口前请确保账户余额充足。
* 调用本接口创建实例，支持代金券自动抵扣（注意，代金券不可用于抵扣后付费冻结金额），详情请参考[代金券选用规则](https://cloud.tencent.com/document/product/555/7428)。
* 本接口允许购买的实例数量遵循[CVM实例购买限制](https://cloud.tencent.com/document/product/213/2664)，所创建的实例和官网入口创建的实例共用配额。
* 本接口为异步接口，当创建实例请求下发成功后会返回一个实例`ID`列表和一个`RequestId`，此时创建实例操作并未立即完成。在此期间实例的状态将会处于“PENDING”，实例创建结果可以通过调用 [DescribeInstancesStatus](https://cloud.tencent.com/document/product/213/15738)  接口查询，如果实例状态(InstanceState)由“PENDING(创建中)”变为“RUNNING(运行中)”，则代表实例创建成功，“LAUNCH_FAILED”代表实例创建失败。
     */
    async RunInstances(req, cb) {
        return this.request("RunInstances", req, cb);
    }
    /**
     * 本接口（ModifyLaunchTemplateDefaultVersion）用于修改实例启动模板默认版本。
     */
    async ModifyLaunchTemplateDefaultVersion(req, cb) {
        return this.request("ModifyLaunchTemplateDefaultVersion", req, cb);
    }
    /**
     * 本接口(ModifyInstancesVpcAttribute)用于修改实例vpc属性，如私有网络IP。
* 此操作默认会关闭实例，完成后再启动。
* 当指定私有网络ID和子网ID（子网必须在实例所在的可用区）与指定实例所在私有网络不一致时，会将实例迁移至指定的私有网络的子网下。执行此操作前请确保指定的实例上没有绑定[弹性网卡](https://cloud.tencent.com/document/product/576)和[负载均衡](https://cloud.tencent.com/document/product/214)。
* 实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表操作成功。
     */
    async ModifyInstancesVpcAttribute(req, cb) {
        return this.request("ModifyInstancesVpcAttribute", req, cb);
    }
    /**
     * 本接口 (DescribeDisasterRecoverGroupQuota)用于查询[分散置放群组](https://cloud.tencent.com/document/product/213/15486)配额。
     */
    async DescribeDisasterRecoverGroupQuota(req, cb) {
        return this.request("DescribeDisasterRecoverGroupQuota", req, cb);
    }
    /**
     * 本接口 (DescribeTaskInfo) 用于查询云服务器维修任务列表及详细信息。

- 可以根据实例ID、实例名称或任务状态等信息来查询维修任务列表。过滤信息详情可参考入参说明。
- 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的维修任务列表。
     */
    async DescribeTaskInfo(req, cb) {
        return this.request("DescribeTaskInfo", req, cb);
    }
    /**
     * 本接口(CreateImage)用于将实例的系统盘制作为新镜像，创建后的镜像可以用于创建实例。
     */
    async CreateImage(req, cb) {
        return this.request("CreateImage", req, cb);
    }
    /**
     * 配置CHC物理服务器的带外和部署网络。传入带外网络和部署网络信息
     */
    async ConfigureChcAssistVpc(req, cb) {
        return this.request("ConfigureChcAssistVpc", req, cb);
    }
    /**
     * 本接口 (ResetInstancesType) 用于调整实例的机型。

* 目前只支持[系统盘类型](/document/api/213/9452#block_device)是CLOUD_BASIC、CLOUD_PREMIUM、CLOUD_SSD、CLOUD_BSSD类型的实例使用该接口进行机型调整。
* 目前不支持[CDH](https://cloud.tencent.com/document/product/416)实例使用该接口调整机型。对于包年包月实例，使用该接口会涉及扣费，请确保账户余额充足。可通过[DescribeAccountBalance](https://cloud.tencent.com/document/product/555/20253)接口查询账户余额。
* 本接口为异步接口，调整实例配置请求发送成功后会返回一个RequestId，此时操作并未立即完成。实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表调整实例配置操作成功。
     */
    async ResetInstancesType(req, cb) {
        return this.request("ResetInstancesType", req, cb);
    }
    /**
     * 本接口（DescribeInstanceFamilyConfigs）查询当前用户和地域所支持的机型族列表信息。
     */
    async DescribeInstanceFamilyConfigs(req, cb) {
        return this.request("DescribeInstanceFamilyConfigs", req, cb);
    }
    /**
     * 本接口（SyncImages）用于将自定义镜像同步到其它地区。

* 该接口每次调用只支持同步一个镜像。
* 该接口支持多个同步地域。
* 单个账号在每个地域最多支持存在500个自定义镜像。
     */
    async SyncImages(req, cb) {
        return this.request("SyncImages", req, cb);
    }
    /**
     * 本接口(ImportImage)用于导入镜像，导入后的镜像可用于创建实例。目前支持RAW、VHD、QCOW2、VMDK镜像格式。
     */
    async ImportImage(req, cb) {
        return this.request("ImportImage", req, cb);
    }
    /**
     * 本接口(DescribeZoneInstanceConfigInfos) 获取可用区的机型信息。
     */
    async DescribeZoneInstanceConfigInfos(req, cb) {
        return this.request("DescribeZoneInstanceConfigInfos", req, cb);
    }
    /**
     * 本接口 (AllocateHosts) 用于创建一个或多个指定配置的CDH实例。
* 当HostChargeType为PREPAID时，必须指定HostChargePrepaid参数。
     */
    async AllocateHosts(req, cb) {
        return this.request("AllocateHosts", req, cb);
    }
    /**
     * 修改CHC物理服务器的属性
     */
    async ModifyChcAttribute(req, cb) {
        return this.request("ModifyChcAttribute", req, cb);
    }
    /**
     * 创建高性能计算集群
     */
    async CreateHpcCluster(req, cb) {
        return this.request("CreateHpcCluster", req, cb);
    }
    /**
     * 本接口 (DisassociateSecurityGroups) 用于解绑实例的指定安全组。
* 实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表操作成功。
     */
    async DisassociateSecurityGroups(req, cb) {
        return this.request("DisassociateSecurityGroups", req, cb);
    }
    /**
     * 清理CHC物理服务器的部署网络
     */
    async RemoveChcDeployVpc(req, cb) {
        return this.request("RemoveChcDeployVpc", req, cb);
    }
    /**
     * 本接口（DescribeImageSharePermission）用于查询镜像分享信息。
     */
    async DescribeImageSharePermission(req, cb) {
        return this.request("DescribeImageSharePermission", req, cb);
    }
    /**
     * 本接口 (DescribeInstancesModification) 用于查询指定实例支持调整的机型配置。
     */
    async DescribeInstancesModification(req, cb) {
        return this.request("DescribeInstancesModification", req, cb);
    }
    /**
     * 退出救援模式
     */
    async ExitRescueMode(req, cb) {
        return this.request("ExitRescueMode", req, cb);
    }
    /**
     * 本接口 (AssociateInstancesKeyPairs) 用于将密钥绑定到实例上。

* 将密钥的公钥写入到实例的`SSH`配置当中，用户就可以通过该密钥的私钥来登录实例。
* 如果实例原来绑定过密钥，那么原来的密钥将失效。
* 如果实例原来是通过密码登录，绑定密钥后无法使用密码登录。
* 支持批量操作。每次请求批量实例的上限为100。如果批量实例存在不允许操作的实例，操作会以特定错误码返回。
     */
    async AssociateInstancesKeyPairs(req, cb) {
        return this.request("AssociateInstancesKeyPairs", req, cb);
    }
    /**
     * 本接口 (DisassociateInstancesKeyPairs) 用于解除实例的密钥绑定关系。

* 只支持[`STOPPED`](https://cloud.tencent.com/document/product/213/15753#InstanceStatus)状态的`Linux`操作系统的实例。
* 解绑密钥后，实例可以通过原来设置的密码登录。
* 如果原来没有设置密码，解绑后将无法使用 `SSH` 登录。可以调用 [ResetInstancesPassword](https://cloud.tencent.com/document/api/213/15736) 接口来设置登录密码。
* 支持批量操作。每次请求批量实例的上限为100。如果批量实例存在不允许操作的实例，操作会以特定错误码返回。
     */
    async DisassociateInstancesKeyPairs(req, cb) {
        return this.request("DisassociateInstancesKeyPairs", req, cb);
    }
    /**
     * 本接口 (DeleteInstancesActionTimer) 用于删除定时任务。
     */
    async DeleteInstancesActionTimer(req, cb) {
        return this.request("DeleteInstancesActionTimer", req, cb);
    }
    /**
     * 本接口（CreateLaunchTemplate）用于创建实例启动模板。

实例启动模板是一种配置数据并可用于创建实例，其内容包含创建实例所需的配置，比如实例类型，数据盘和系统盘的类型和大小，以及安全组等信息。

初次创建实例模板后，其模板版本为默认版本1，新版本的创建可使用 [CreateLaunchTemplateVersion](https://cloud.tencent.com/document/product/213/66326) 创建，版本号递增。默认情况下，在[RunInstances](https://cloud.tencent.com/document/product/213/15730) 中指定实例启动模板，若不指定模板版本号，则使用默认版本。
     */
    async CreateLaunchTemplate(req, cb) {
        return this.request("CreateLaunchTemplate", req, cb);
    }
    /**
     * 本接口 (ModifyDisasterRecoverGroupAttribute)用于修改[分散置放群组](https://cloud.tencent.com/document/product/213/15486)属性。
     */
    async ModifyDisasterRecoverGroupAttribute(req, cb) {
        return this.request("ModifyDisasterRecoverGroupAttribute", req, cb);
    }
    /**
     * 查询高性能集群信息
     */
    async DescribeHpcClusters(req, cb) {
        return this.request("DescribeHpcClusters", req, cb);
    }
    /**
     * 本接口（DescribeInstancesOperationLimit）用于查询实例操作限制。

* 目前支持调整配置操作限制次数查询。
     */
    async DescribeInstancesOperationLimit(req, cb) {
        return this.request("DescribeInstancesOperationLimit", req, cb);
    }
    /**
     * 本接口（ModifyHostsAttribute）用于修改CDH实例的属性，如实例名称和续费标记等。参数HostName和RenewFlag必须设置其中一个，但不能同时设置。
     */
    async ModifyHostsAttribute(req, cb) {
        return this.request("ModifyHostsAttribute", req, cb);
    }
    /**
     * 本接口(DescribeRegions)用于查询地域信息。因平台策略原因，该接口暂时停止更新，为确保您正常调用，可切换至新链接：https://cloud.tencent.com/document/product/1596/77930。
     */
    async DescribeRegions(req, cb) {
        return this.request("DescribeRegions", req, cb);
    }
    /**
     * 查看可以导入的镜像操作系统信息。
     */
    async DescribeImportImageOs(req, cb) {
        return this.request("DescribeImportImageOs", req, cb);
    }
    /**
     * 当高性能计算集群为空, 即集群内没有任何设备时候, 可以删除该集群。
     */
    async DeleteHpcClusters(req, cb) {
        return this.request("DeleteHpcClusters", req, cb);
    }
    /**
     * 本接口 (InquiryPriceRenewInstances) 用于续费包年包月实例询价。

* 只支持查询包年包月实例的续费价格。
     */
    async InquiryPriceRenewInstances(req, cb) {
        return this.request("InquiryPriceRenewInstances", req, cb);
    }
    /**
     * 本接口 (ModifyInstancesChargeType) 用于切换实例的计费模式。

* 关机不收费的实例、`批量计算型BC1`和`批量计算型BS1`机型族的实例、设置定时销毁的实例不支持该操作。
* 实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表操作成功。
     */
    async ModifyInstancesChargeType(req, cb) {
        return this.request("ModifyInstancesChargeType", req, cb);
    }
    /**
     * 本接口 (RenewHosts) 用于续费包年包月CDH实例。

* 只支持操作包年包月实例，否则操作会以特定[错误码](#6.-.E9.94.99.E8.AF.AF.E7.A0.81)返回。
* 续费时请确保账户余额充足。可通过[`DescribeAccountBalance`](https://cloud.tencent.com/document/product/555/20253)接口查询账户余额。
     */
    async RenewHosts(req, cb) {
        return this.request("RenewHosts", req, cb);
    }
    /**
     * 本接口（RepairTaskControl）用于对待授权状态的维修任务进行授权操作。

- 仅当任务状态处于`待授权`状态时，可通过此接口对待授权的维修任务进行授权。
- 调用时需指定产品类型、实例ID、维修任务ID、操作类型。
- 可授权立即处理，或提前预约计划维护时间之前的指定时间进行处理（预约时间需晚于当前时间至少5分钟，且在48小时之内）。
- 针对不同类型的维修任务，提供的可选授权处理策略可参见 [维修任务类型与处理策略](https://cloud.tencent.com/document/product/213/67789)。
     */
    async RepairTaskControl(req, cb) {
        return this.request("RepairTaskControl", req, cb);
    }
    /**
     * 本接口 (DescribeHosts) 用于获取一个或多个CDH实例的详细信息。
     */
    async DescribeHosts(req, cb) {
        return this.request("DescribeHosts", req, cb);
    }
    /**
     * 进入救援模式
     */
    async EnterRescueMode(req, cb) {
        return this.request("EnterRescueMode", req, cb);
    }
    /**
     * 本接口 (DescribeInstancesStatus) 用于查询一个或多个实例的状态。

* 可以根据实例`ID`来查询实例的状态。
* 如果参数为空，返回当前用户一定数量（Limit所指定的数量，默认为20）的实例状态。
     */
    async DescribeInstancesStatus(req, cb) {
        return this.request("DescribeInstancesStatus", req, cb);
    }
    /**
     * 本接口（ModifyImageSharePermission）用于修改镜像共享信息。

* 共享镜像后，被共享账户可以通过该镜像创建实例。
* 每个自定义镜像最多可共享给500个账户。
* 共享镜像无法更改名称，描述，仅可用于创建实例。
* 只支持共享到对方账户相同地域。
     */
    async ModifyImageSharePermission(req, cb) {
        return this.request("ModifyImageSharePermission", req, cb);
    }
    /**
     * 导入定时任务
     */
    async ImportInstancesActionTimer(req, cb) {
        return this.request("ImportInstancesActionTimer", req, cb);
    }
    /**
     * 本接口（DeleteLaunchTemplate）用于删除一个实例启动模板。
     */
    async DeleteLaunchTemplate(req, cb) {
        return this.request("DeleteLaunchTemplate", req, cb);
    }
    /**
     * 本接口 (ModifyInstancesDisasterRecoverGroup) 用于调整实例所在置放群组。
* 目前只支持基础网络或私有网络实例。
     */
    async ModifyInstancesDisasterRecoverGroup(req, cb) {
        return this.request("ModifyInstancesDisasterRecoverGroup", req, cb);
    }
    /**
     * 本接口 (CreateKeyPair) 用于创建一个 `OpenSSH RSA` 密钥对，可以用于登录 `Linux` 实例。

* 开发者只需指定密钥对名称，即可由系统自动创建密钥对，并返回所生成的密钥对的 `ID` 及其公钥、私钥的内容。
* 密钥对名称不能和已经存在的密钥对的名称重复。
* 私钥的内容可以保存到文件中作为 `SSH` 的一种认证方式。
* 腾讯云不会保存用户的私钥，请妥善保管。
     */
    async CreateKeyPair(req, cb) {
        return this.request("CreateKeyPair", req, cb);
    }
    /**
     * 本接口 (DescribeInstancesActionTimer) 用于查询定时任务信息。
     */
    async DescribeInstancesActionTimer(req, cb) {
        return this.request("DescribeInstancesActionTimer", req, cb);
    }
    /**
     * 本接口 (InquiryPriceResizeInstanceDisks) 用于扩容实例的数据盘询价。

* 目前只支持扩容非弹性数据盘（[`DescribeDisks`](https://cloud.tencent.com/document/api/362/16315)接口返回值中的`Portable`为`false`表示非弹性）询价。
* 目前不支持[CDH](https://cloud.tencent.com/document/product/416)实例使用该接口扩容数据盘询价。* 仅支持包年包月实例随机器购买的数据盘。* 目前只支持扩容一块数据盘询价。
     */
    async InquiryPriceResizeInstanceDisks(req, cb) {
        return this.request("InquiryPriceResizeInstanceDisks", req, cb);
    }
    /**
     * 本接口 (InquiryPriceResetInstance) 用于重装实例询价。

* 如果指定了`ImageId`参数，则使用指定的镜像进行重装询价；否则按照当前实例使用的镜像进行重装询价。
* 目前只支持[系统盘类型](https://cloud.tencent.com/document/api/213/15753#SystemDisk)是`CLOUD_BSSD `、`CLOUD_PREMIUM`、`CLOUD_SSD`类型的实例使用该接口实现`Linux`和`Windows`操作系统切换的重装询价。
* 目前不支持境外地域的实例使用该接口实现`Linux`和`Windows`操作系统切换的重装询价。
     */
    async InquiryPriceResetInstance(req, cb) {
        return this.request("InquiryPriceResetInstance", req, cb);
    }
    /**
     * 本接口 (ModifyInstancesRenewFlag) 用于修改包年包月实例续费标识。

* 实例被标识为自动续费后，每次在实例到期时，会自动续费一个月。
* 支持批量操作。每次请求批量实例的上限为100。
* 实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表操作成功。
     */
    async ModifyInstancesRenewFlag(req, cb) {
        return this.request("ModifyInstancesRenewFlag", req, cb);
    }
    /**
     * 本接口 (ResetInstance) 用于重装指定实例上的操作系统。

* 如果指定了`ImageId`参数，则使用指定的镜像重装；否则按照当前实例使用的镜像进行重装。
* 系统盘将会被格式化，并重置；请确保系统盘中无重要文件。
* 密码不指定将会通过站内信下发随机密码。
* 目前只支持[系统盘类型](https://cloud.tencent.com/document/api/213/9452#SystemDisk)是`CLOUD_BASIC`、`CLOUD_PREMIUM`、`CLOUD_SSD`、`CLOUD_BSSD`类型的实例使用该接口实现操作系统切换。
* 实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表操作成功。
     */
    async ResetInstance(req, cb) {
        return this.request("ResetInstance", req, cb);
    }
    /**
     * 本接口 (StartInstances) 用于启动一个或多个实例。

* 只有状态为`STOPPED`的实例才可以进行此操作。
* 接口调用成功时，实例会进入`STARTING`状态；启动实例成功时，实例会进入`RUNNING`状态。
* 支持批量操作。每次请求批量实例的上限为100。
* 本接口为异步接口，启动实例请求发送成功后会返回一个RequestId，此时操作并未立即完成。实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表启动实例操作成功。
     */
    async StartInstances(req, cb) {
        return this.request("StartInstances", req, cb);
    }
    /**
     * 本接口（DescribeLaunchTemplates）用于查询一个或者多个实例启动模板。
     */
    async DescribeLaunchTemplates(req, cb) {
        return this.request("DescribeLaunchTemplates", req, cb);
    }
    /**
     * 本接口 (AssociateSecurityGroups) 用于绑定安全组到指定实例。
* 实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表操作成功。
<dx-alert infotype="explain" title="">
多个安全组绑定至实例后，将以绑定顺序作为优先级顺序依次匹配执行。如需调整安全组优先级，请参见 [调整安全组优先级](https://cloud.tencent.com/document/product/213/42842)。
</dx-alert>
     */
    async AssociateSecurityGroups(req, cb) {
        return this.request("AssociateSecurityGroups", req, cb);
    }
    /**
     * 本接口（ModifyImageAttribute）用于修改镜像属性。

* 已分享的镜像无法修改属性。
     */
    async ModifyImageAttribute(req, cb) {
        return this.request("ModifyImageAttribute", req, cb);
    }
    /**
     * 本接口(ConvertOperatingSystem)用于转换实例的操作系统，仅支持源操作系统为 CentOS 7、CentOS 8 的实例。
     */
    async ConvertOperatingSystems(req, cb) {
        return this.request("ConvertOperatingSystems", req, cb);
    }
    /**
     * 本接口 (DeleteDisasterRecoverGroups)用于删除[分散置放群组](https://cloud.tencent.com/document/product/213/15486)。只有空的置放群组才能被删除，非空的群组需要先销毁组内所有云服务器，才能执行删除操作，不然会产生删除置放群组失败的错误。
     */
    async DeleteDisasterRecoverGroups(req, cb) {
        return this.request("DeleteDisasterRecoverGroups", req, cb);
    }
    /**
     * 本接口 (TerminateInstances) 用于主动退还实例。

* 不再使用的实例，可通过本接口主动退还。
* 按量计费的实例通过本接口可直接退还；包年包月实例如符合[退还规则](https://cloud.tencent.com/document/product/213/9711)，也可通过本接口主动退还。
* 包年包月实例首次调用本接口，实例将被移至回收站，再次调用本接口，实例将被销毁，且不可恢复。按量计费实例调用本接口将被直接销毁。
* 包年包月实例首次调用本接口，入参中包含ReleasePrepaidDataDisks时，包年包月数据盘同时也会被移至回收站。
* 支持批量操作，每次请求批量实例的上限为100。
* 批量操作时，所有实例的付费类型必须一致。
     */
    async TerminateInstances(req, cb) {
        return this.request("TerminateInstances", req, cb);
    }
    /**
     * 清理CHC物理服务器的带外网络和部署网络
     */
    async RemoveChcAssistVpc(req, cb) {
        return this.request("RemoveChcAssistVpc", req, cb);
    }
    /**
     * 本接口 ( DescribeInstanceVncUrl ) 用于查询实例管理终端地址，获取的地址可用于实例的 VNC 登录。

* 处于 `STOPPED` 状态的机器无法使用此功能。
* 管理终端地址的有效期为 15 秒，调用接口成功后如果 15 秒内不使用该链接进行访问，管理终端地址自动失效，您需要重新查询。
* 管理终端地址一旦被访问，将自动失效，您需要重新查询。
* 如果连接断开，每分钟内重新连接的次数不能超过 30 次。
获取到 `InstanceVncUrl` 后，您需要在链接 `https://img.qcloud.com/qcloud/app/active_vnc/index.html?` 末尾加上参数 `InstanceVncUrl=xxxx`。

  - 参数 `InstanceVncUrl` ：调用接口成功后会返回的 `InstanceVncUrl` 的值。

    最后组成的 URL 格式如下：

```
https://img.qcloud.com/qcloud/app/active_vnc/index.html?InstanceVncUrl=wss%3A%2F%2Fbjvnc.qcloud.com%3A26789%2Fvnc%3Fs%3DaHpjWnRVMFNhYmxKdDM5MjRHNlVTSVQwajNUSW0wb2tBbmFtREFCTmFrcy8vUUNPMG0wSHZNOUUxRm5PMmUzWmFDcWlOdDJIbUJxSTZDL0RXcHZxYnZZMmRkWWZWcEZia2lyb09XMzdKNmM9
```

     */
    async DescribeInstanceVncUrl(req, cb) {
        return this.request("DescribeInstanceVncUrl", req, cb);
    }
    /**
     * 本接口 (ModifyInstancesProject) 用于修改实例所属项目。

* 项目为一个虚拟概念，用户可以在一个账户下面建立多个项目，每个项目中管理不同的资源；将多个不同实例分属到不同项目中，后续使用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728)接口查询实例，项目ID可用于过滤结果。
* 绑定负载均衡的实例不支持修改实例所属项目，请先使用[DeregisterInstancesFromLoadBalancer](https://cloud.tencent.com/document/api/214/1258)接口解绑负载均衡。
* 支持批量操作。每次请求批量实例的上限为100。
* 实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表操作成功。
     */
    async ModifyInstancesProject(req, cb) {
        return this.request("ModifyInstancesProject", req, cb);
    }
    /**
     * 本接口 (DescribeKeyPairs) 用于查询密钥对信息。

* 密钥对是通过一种算法生成的一对密钥，在生成的密钥对中，一个向外界公开，称为公钥；另一个用户自己保留，称为私钥。密钥对的公钥内容可以通过这个接口查询，但私钥内容系统不保留。
     */
    async DescribeKeyPairs(req, cb) {
        return this.request("DescribeKeyPairs", req, cb);
    }
    /**
     * 本接口 (InquiryPriceModifyInstancesChargeType) 用于切换实例的计费模式询价。


* 关机不收费的实例、`批量计算型BC1`和`批量计算型BS1`机型族的实例、设置定时销毁的实例、竞价实例不支持该操作。
     */
    async InquiryPriceModifyInstancesChargeType(req, cb) {
        return this.request("InquiryPriceModifyInstancesChargeType", req, cb);
    }
    /**
     * 本接口（DescribeInternetChargeTypeConfigs）用于查询网络的计费类型。
     */
    async DescribeInternetChargeTypeConfigs(req, cb) {
        return this.request("DescribeInternetChargeTypeConfigs", req, cb);
    }
    /**
     * 本接口 (RebootInstances) 用于重启实例。

* 只有状态为`RUNNING`的实例才可以进行此操作。
* 接口调用成功时，实例会进入`REBOOTING`状态；重启实例成功时，实例会进入`RUNNING`状态。
* 支持强制重启。强制重启的效果等同于关闭物理计算机的电源开关再重新启动。强制重启可能会导致数据丢失或文件系统损坏，请仅在服务器不能正常重启时使用。
* 支持批量操作，每次请求批量实例的上限为100。
* 实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表操作成功。
     */
    async RebootInstances(req, cb) {
        return this.request("RebootInstances", req, cb);
    }
    /**
     * 本接口 (InquiryPriceRenewHosts) 用于续费包年包月`CDH`实例询价。
* 只支持查询包年包月`CDH`实例的续费价格。
     */
    async InquiryPriceRenewHosts(req, cb) {
        return this.request("InquiryPriceRenewHosts", req, cb);
    }
    /**
     * 本接口(DescribeImageFromFamily) 用于查看镜像族内可用镜像信息。
     */
    async DescribeImageFromFamily(req, cb) {
        return this.request("DescribeImageFromFamily", req, cb);
    }
    /**
     * 本接口 (StopInstances) 用于关闭一个或多个实例。

* 只有状态为`RUNNING`的实例才可以进行此操作。
* 接口调用成功时，实例会进入`STOPPING`状态；关闭实例成功时，实例会进入`STOPPED`状态。
* 支持强制关闭。强制关机的效果等同于关闭物理计算机的电源开关。强制关机可能会导致数据丢失或文件系统损坏，请仅在服务器不能正常关机时使用。
* 支持批量操作。每次请求批量实例的上限为100。
* 本接口为异步接口，关闭实例请求发送成功后会返回一个RequestId，此时操作并未立即完成。实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表关闭实例操作成功。
     */
    async StopInstances(req, cb) {
        return this.request("StopInstances", req, cb);
    }
    /**
     * 修改高性能计算集群属性。
     */
    async ModifyHpcClusterAttribute(req, cb) {
        return this.request("ModifyHpcClusterAttribute", req, cb);
    }
    /**
     * 本接口 (ModifyKeyPairAttribute) 用于修改密钥对属性。

* 修改密钥对ID所指定的密钥对的名称和描述信息。
* 密钥对名称不能和已经存在的密钥对的名称重复。
* 密钥对ID是密钥对的唯一标识，不可修改。
* 密钥对名称和描述信息必须指定其中之一，也支持同时指定。
     */
    async ModifyKeyPairAttribute(req, cb) {
        return this.request("ModifyKeyPairAttribute", req, cb);
    }
    /**
     * 本接口(DescribeImages) 用于查看镜像列表。

* 可以通过指定镜像ID来查询指定镜像的详细信息，或通过设定过滤器来查询满足过滤条件的镜像的详细信息。
* 指定偏移(Offset)和限制(Limit)来选择结果中的一部分，默认返回满足条件的前20个镜像信息。
     */
    async DescribeImages(req, cb) {
        return this.request("DescribeImages", req, cb);
    }
    /**
     * 本接口 (CreateDisasterRecoverGroup)用于创建[分散置放群组](https://cloud.tencent.com/document/product/213/15486)。创建好的置放群组，可在[创建实例](https://cloud.tencent.com/document/api/213/15730)时指定。
     */
    async CreateDisasterRecoverGroup(req, cb) {
        return this.request("CreateDisasterRecoverGroup", req, cb);
    }
    /**
     * 本接口 (DescribeInstances) 用于查询一个或多个实例的详细信息。

* 可以根据实例`ID`、实例名称或者实例计费模式等信息来查询实例的详细信息。过滤信息详细请见过滤器`Filter`。
* 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的实例。
* 支持查询实例的最新操作（LatestOperation）以及最新操作状态(LatestOperationState)。
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 本接口（DescribeLaunchTemplateVersions）用于查询实例模板版本信息。
     */
    async DescribeLaunchTemplateVersions(req, cb) {
        return this.request("DescribeLaunchTemplateVersions", req, cb);
    }
    /**
     * 本接口 (DescribeInstanceInternetBandwidthConfigs) 用于查询实例带宽配置。

* 只支持查询`BANDWIDTH_PREPAID`（ 预付费按带宽结算 ）计费模式的带宽配置。
* 接口返回实例的所有带宽配置信息（包含历史的带宽配置信息）。
     */
    async DescribeInstanceInternetBandwidthConfigs(req, cb) {
        return this.request("DescribeInstanceInternetBandwidthConfigs", req, cb);
    }
    /**
     * 本接口 (InquiryPriceTerminateInstances) 用于退还实例询价。

* 查询退还实例可以返还的费用。
* 在退还包年包月实例时，使用ReleasePrepaidDataDisks参数，会在返回值中包含退还挂载的包年包月数据盘返还的费用。
* 支持批量操作，每次请求批量实例的上限为100。如果批量实例存在不允许操作的实例，操作会以特定错误码返回。
     */
    async InquiryPriceTerminateInstances(req, cb) {
        return this.request("InquiryPriceTerminateInstances", req, cb);
    }
    /**
     * 本接口（DeleteImages）用于删除一个或多个镜像。

* 当[镜像状态](https://cloud.tencent.com/document/product/213/15753#Image)为`创建中`和`使用中`时, 不允许删除。镜像状态可以通过[DescribeImages](https://cloud.tencent.com/document/api/213/9418)获取。
* 每个地域最多只支持创建500个自定义镜像，删除镜像可以释放账户的配额。
* 当镜像正在被其它账户分享时，不允许删除。
     */
    async DeleteImages(req, cb) {
        return this.request("DeleteImages", req, cb);
    }
    /**
     * 本接口（DeleteLaunchTemplateVersions）用于删除一个或者多个实例启动模板版本。
     */
    async DeleteLaunchTemplateVersions(req, cb) {
        return this.request("DeleteLaunchTemplateVersions", req, cb);
    }
    /**
     * 本接口 (ResetInstancesPassword) 用于将实例操作系统的密码重置为用户指定的密码。

*如果是修改系统管理员密码：实例的操作系统不同，管理员账号也会不一样(`Windows`为`Administrator`，`Ubuntu`为`ubuntu`，其它系统为`root`)。
* 重置处于运行中状态的实例密码，需要设置关机参数`ForceStop`为`TRUE`。如果没有显式指定强制关机参数，则只有处于关机状态的实例才允许执行重置密码操作。
* 支持批量操作。将多个实例操作系统的密码重置为相同的密码。每次请求批量实例的上限为100。
* 实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表操作成功。
     */
    async ResetInstancesPassword(req, cb) {
        return this.request("ResetInstancesPassword", req, cb);
    }
    /**
     * 本接口 (ResizeInstanceDisks) 用于扩容实例的磁盘。

* 目前只支持扩容非弹性盘（[ DescribeDisks ](https://cloud.tencent.com/document/api/362/16315)接口返回值中的`Portable`为`false`表示非弹性）。
* 对于包年包月实例，使用该接口会涉及扣费，请确保账户余额充足。可通过[ DescribeAccountBalance ](https://cloud.tencent.com/document/product/555/20253)接口查询账户余额。
* 目前只支持扩容一块数据盘。
* 默认扩容方式为关机后扩容。
* 实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表操作成功。
* 如果是系统盘，目前只支持扩容，不支持缩容。
     */
    async ResizeInstanceDisks(req, cb) {
        return this.request("ResizeInstanceDisks", req, cb);
    }
    /**
     * 本接口(DescribeZones)用于查询可用区信息。
     */
    async DescribeZones(req, cb) {
        return this.request("DescribeZones", req, cb);
    }
    /**
     * 本接口(DescribeImageQuota)用于查询用户账号的镜像配额。
     */
    async DescribeImageQuota(req, cb) {
        return this.request("DescribeImageQuota", req, cb);
    }
    /**
     * 查询CHC物理服务器禁止做的操作，返回给用户
     */
    async DescribeChcDeniedActions(req, cb) {
        return this.request("DescribeChcDeniedActions", req, cb);
    }
    /**
     * 本接口(DescribeAccountQuota)用于查询用户配额详情。
     */
    async DescribeAccountQuota(req, cb) {
        return this.request("DescribeAccountQuota", req, cb);
    }
    /**
     * 配置CHC物理服务器部署网络
     */
    async ConfigureChcDeployVpc(req, cb) {
        return this.request("ConfigureChcDeployVpc", req, cb);
    }
    /**
     * 本接口 (InquiryPriceResetInstancesType) 用于调整实例的机型询价。

* 目前只支持[系统盘类型](https://cloud.tencent.com/document/product/213/15753#SystemDisk)是`CLOUD_BSSD`、`CLOUD_PREMIUM`、`CLOUD_SSD`类型的实例使用该接口进行调整机型询价。
* 目前不支持[CDH](https://cloud.tencent.com/document/product/416)实例使用该接口调整机型询价。
     */
    async InquiryPriceResetInstancesType(req, cb) {
        return this.request("InquiryPriceResetInstancesType", req, cb);
    }
    /**
     * 本接口(ProgramFpgaImage)用于在线烧录由客户提供的FPGA镜像文件到指定实例的指定FPGA卡上。
* 只支持对单个实例发起在线烧录FPGA镜像的操作。
* 支持对单个实例的多块FPGA卡同时烧录FPGA镜像，DBDFs参数为空时，默认对指定实例的所有FPGA卡进行烧录。
     */
    async ProgramFpgaImage(req, cb) {
        return this.request("ProgramFpgaImage", req, cb);
    }
    /**
     * 本接口（CreateLaunchTemplateVersion）根据指定的实例模板ID以及对应的模板版本号创建新的实例启动模板，若未指定模板版本号则使用默认版本号。每个实例启动模板最多创建30个版本。
     */
    async CreateLaunchTemplateVersion(req, cb) {
        return this.request("CreateLaunchTemplateVersion", req, cb);
    }
    /**
     * 提供导出自定义镜像到指定COS存储桶的能力
     */
    async ExportImages(req, cb) {
        return this.request("ExportImages", req, cb);
    }
    /**
     * 本接口 (RenewInstances) 用于续费包年包月实例。

* 只支持操作包年包月实例。
* 续费时请确保账户余额充足。可通过[DescribeAccountBalance](https://cloud.tencent.com/document/product/555/20253)接口查询账户余额。
* 实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表操作成功。
     */
    async RenewInstances(req, cb) {
        return this.request("RenewInstances", req, cb);
    }
    /**
     * 本接口 (ResetInstancesInternetMaxBandwidth) 用于调整实例公网带宽上限。

* 不同机型带宽上限范围不一致，具体限制详见[公网带宽上限](https://cloud.tencent.com/document/product/213/12523)。
* 对于 `BANDWIDTH_PREPAID` 计费方式的带宽，需要输入参数 `StartTime` 和 `EndTime` ，指定调整后的带宽的生效时间段。在这种场景下目前不支持调小带宽，会涉及扣费，请确保账户余额充足。可通过 [DescribeAccountBalance](https://cloud.tencent.com/document/product/555/20253)接口查询账户余额。
* 对于 `TRAFFIC_POSTPAID_BY_HOUR` 、 `BANDWIDTH_POSTPAID_BY_HOUR` 和 `BANDWIDTH_PACKAGE` 计费方式的带宽，使用该接口调整带宽上限是实时生效的，可以在带宽允许的范围内调大或者调小带宽，不支持输入参数 `StartTime` 和 `EndTime` 。
* 接口不支持调整 `BANDWIDTH_POSTPAID_BY_MONTH` 计费方式的带宽。
* 接口不支持批量调整 `BANDWIDTH_PREPAID` 和 `BANDWIDTH_POSTPAID_BY_HOUR` 计费方式的带宽。
* 接口不支持批量调整混合计费方式的带宽。例如不支持同时调整 `TRAFFIC_POSTPAID_BY_HOUR` 和 `BANDWIDTH_PACKAGE` 计费方式的带宽。
* 实例操作结果可以通过调用 [DescribeInstances](https://cloud.tencent.com/document/api/213/15728#.E7.A4.BA.E4.BE.8B3-.E6.9F.A5.E8.AF.A2.E5.AE.9E.E4.BE.8B.E7.9A.84.E6.9C.80.E6.96.B0.E6.93.8D.E4.BD.9C.E6.83.85.E5.86.B5) 接口查询，如果实例的最新操作状态(LatestOperationState)为“SUCCESS”，则代表操作成功。
     */
    async ResetInstancesInternetMaxBandwidth(req, cb) {
        return this.request("ResetInstancesInternetMaxBandwidth", req, cb);
    }
    /**
     * 本接口 (DescribeDisasterRecoverGroups)用于查询[分散置放群组](https://cloud.tencent.com/document/product/213/15486)信息。
     */
    async DescribeDisasterRecoverGroups(req, cb) {
        return this.request("DescribeDisasterRecoverGroups", req, cb);
    }
    /**
     * 本接口 (DescribeChcHosts) 用于查询一个或多个CHC物理服务器详细信息。

* 可以根据实例`ID`、实例名称或者设备类型等信息来查询实例的详细信息。过滤信息详细请见过滤器`Filter`。
* 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的实例。
     */
    async DescribeChcHosts(req, cb) {
        return this.request("DescribeChcHosts", req, cb);
    }
    /**
     * 本接口 (DescribeInstanceTypeConfigs) 用于查询实例机型配置。

* 可以根据`zone`、`instance-family`、`instance-type`来查询实例机型配置。过滤条件详见过滤器[`Filter`](https://cloud.tencent.com/document/api/213/15753#Filter)。
* 如果参数为空，返回指定地域的所有实例机型配置。
     */
    async DescribeInstanceTypeConfigs(req, cb) {
        return this.request("DescribeInstanceTypeConfigs", req, cb);
    }
    /**
     * 本接口 (ModifyInstanceDiskType) 用于修改实例硬盘介质类型。

* 只支持实例的本地系统盘、本地数据盘转化成指定云硬盘介质。
* 只支持实例在关机状态下转换成指定云硬盘介质。
* 不支持竞价实例类型。
* 若实例同时存在本地系统盘和本地数据盘，需同时调整系统盘和数据盘的介质类型，不支持单独针对本地系统盘或本地数据盘修改介质类型。
* 修改前请确保账户余额充足。可通过[DescribeAccountBalance](https://cloud.tencent.com/document/product/378/4397)接口查询账户余额。
     */
    async ModifyInstanceDiskType(req, cb) {
        return this.request("ModifyInstanceDiskType", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248880, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cwp = void 0;
const v20180228_1 = require("./v20180228");
exports.cwp = {
    v20180228: v20180228_1.v20180228,
};

}, function(modId) { var map = {"./v20180228":1738984248881}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248881, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180228 = void 0;
const Models = require("./cwp_models");
const cwp_client_1 = require("./cwp_client");
exports.v20180228 = {
    Client: cwp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cwp_models":1738984248882,"./cwp_client":1738984248883}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248882, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248883, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cwp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cwp.tencentcloudapi.com", "2018-02-28", clientConfig);
    }
    /**
     * 获取资产管理端口列表
     */
    async DescribeAssetPortInfoList(req, cb) {
        return this.request("DescribeAssetPortInfoList", req, cb);
    }
    /**
     * 接口已无效

本接口 (DescribeComponentStatistics) 用于获取组件统计列表数据。
     */
    async DescribeComponentStatistics(req, cb) {
        return this.request("DescribeComponentStatistics", req, cb);
    }
    /**
     * 获取配置的aeskey和aesiv
     */
    async DescribeAESKey(req, cb) {
        return this.request("DescribeAESKey", req, cb);
    }
    /**
     * 批量修改防勒索策略状态
     */
    async ModifyRansomDefenseStrategyStatus(req, cb) {
        return this.request("ModifyRansomDefenseStrategyStatus", req, cb);
    }
    /**
     * 查询防勒索策略列表
     */
    async DescribeRansomDefenseStrategyList(req, cb) {
        return this.request("DescribeRansomDefenseStrategyList", req, cb);
    }
    /**
     * 导出Jar包列表
     */
    async ExportAssetJarList(req, cb) {
        return this.request("ExportAssetJarList", req, cb);
    }
    /**
     * 获取爆破阻断模式
     */
    async DescribeBanMode(req, cb) {
        return this.request("DescribeBanMode", req, cb);
    }
    /**
     * 停止资产扫描任务
     */
    async StopAssetScan(req, cb) {
        return this.request("StopAssetScan", req, cb);
    }
    /**
     * 获取本地存储键值列表
     */
    async KeysLocalStorage(req, cb) {
        return this.request("KeysLocalStorage", req, cb);
    }
    /**
     * 导出java内存马插件信息
     */
    async ExportJavaMemShellPlugins(req, cb) {
        return this.request("ExportJavaMemShellPlugins", req, cb);
    }
    /**
     * 删除检索模板
     */
    async DeleteSearchTemplate(req, cb) {
        return this.request("DeleteSearchTemplate", req, cb);
    }
    /**
     * 校验高危命令用户规则新增和编辑时的参数。
     */
    async CheckBashRuleParams(req, cb) {
        return this.request("CheckBashRuleParams", req, cb);
    }
    /**
     * DescribeScanTaskDetails 查询扫描任务详情 , 可以查询扫描进度信息/异常;
     */
    async DescribeScanTaskDetails(req, cb) {
        return this.request("DescribeScanTaskDetails", req, cb);
    }
    /**
     * 查询服务区关联目录详情
     */
    async DescribeServerRelatedDirInfo(req, cb) {
        return this.request("DescribeServerRelatedDirInfo", req, cb);
    }
    /**
     * 导出漏洞防御列表
     */
    async ExportVulDefenceList(req, cb) {
        return this.request("ExportVulDefenceList", req, cb);
    }
    /**
     * 根据taskid查询检测进度
     */
    async DescribeScanSchedule(req, cb) {
        return this.request("DescribeScanSchedule", req, cb);
    }
    /**
     * 根据策略信息创建基线策略
     */
    async CreateBaselineStrategy(req, cb) {
        return this.request("CreateBaselineStrategy", req, cb);
    }
    /**
     * 主机信息与标签信息查询
     */
    async DescribeHostInfo(req, cb) {
        return this.request("DescribeHostInfo", req, cb);
    }
    /**
     * 查询批量导入机器信息
     */
    async DescribeImportMachineInfo(req, cb) {
        return this.request("DescribeImportMachineInfo", req, cb);
    }
    /**
     * 获取基线规则列表
     */
    async DescribeBaselineRuleList(req, cb) {
        return this.request("DescribeBaselineRuleList", req, cb);
    }
    /**
     * 大屏可视化风险资产top5（今日），统计今日风险资产
     */
    async DescribeScreenRiskAssetsTop(req, cb) {
        return this.request("DescribeScreenRiskAssetsTop", req, cb);
    }
    /**
     * 获取所有软件应用数量
     */
    async DescribeAssetAppCount(req, cb) {
        return this.request("DescribeAssetAppCount", req, cb);
    }
    /**
     * 接口返回TopN的风险服务器
     */
    async DescribeBaselineHostTop(req, cb) {
        return this.request("DescribeBaselineHostTop", req, cb);
    }
    /**
     * 查询java内存马事件列表
     */
    async DescribeJavaMemShellList(req, cb) {
        return this.request("DescribeJavaMemShellList", req, cb);
    }
    /**
     * 获取基线检测详情记录
     */
    async DescribeBaselineDetectList(req, cb) {
        return this.request("DescribeBaselineDetectList", req, cb);
    }
    /**
     * 专家服务-旗舰重保列表
     */
    async DescribeProtectNetList(req, cb) {
        return this.request("DescribeProtectNetList", req, cb);
    }
    /**
     * 获取反弹Shell规则列表
     */
    async DescribeReverseShellRules(req, cb) {
        return this.request("DescribeReverseShellRules", req, cb);
    }
    /**
     * 删除高危命令策略
     */
    async DeleteBashPolicies(req, cb) {
        return this.request("DeleteBashPolicies", req, cb);
    }
    /**
     * 获取漏洞防御概览信息，包括事件趋势及插件开启情况
     */
    async DescribeVulDefenceOverview(req, cb) {
        return this.request("DescribeVulDefenceOverview", req, cb);
    }
    /**
     * 获取所有账号数量
     */
    async DescribeAssetUserCount(req, cb) {
        return this.request("DescribeAssetUserCount", req, cb);
    }
    /**
     * 导出资产管理主机资源详细信息
     */
    async ExportAssetMachineDetail(req, cb) {
        return this.request("ExportAssetMachineDetail", req, cb);
    }
    /**
     * 获取所有Web站点数量
     */
    async DescribeAssetWebLocationCount(req, cb) {
        return this.request("DescribeAssetWebLocationCount", req, cb);
    }
    /**
     * 获取Web站点虚拟目录列表
     */
    async DescribeAssetWebLocationPathList(req, cb) {
        return this.request("DescribeAssetWebLocationPathList", req, cb);
    }
    /**
     * 大屏可视化主机入侵详情
     */
    async DescribeScreenHostInvasion(req, cb) {
        return this.request("DescribeScreenHostInvasion", req, cb);
    }
    /**
     * 查看产生事件时规则详情接口
     */
    async DescribeFileTamperEventRuleInfo(req, cb) {
        return this.request("DescribeFileTamperEventRuleInfo", req, cb);
    }
    /**
     * 查询索引
     */
    async DescribeLogIndex(req, cb) {
        return this.request("DescribeLogIndex", req, cb);
    }
    /**
     * DestroyOrder  该接口可以对资源销毁.
     */
    async DestroyOrder(req, cb) {
        return this.request("DestroyOrder", req, cb);
    }
    /**
     * 新增或更新告警接收人
     */
    async ModifyWebHookReceiver(req, cb) {
        return this.request("ModifyWebHookReceiver", req, cb);
    }
    /**
     * 大屏可视化获取主机相关统计
     */
    async DescribeScreenGeneralStat(req, cb) {
        return this.request("DescribeScreenGeneralStat", req, cb);
    }
    /**
     * 查询高危命令事件详情(新)
     */
    async DescribeBashEventsInfoNew(req, cb) {
        return this.request("DescribeBashEventsInfoNew", req, cb);
    }
    /**
     * 更改基线忽略规则
     */
    async ModifyBaselineRuleIgnore(req, cb) {
        return this.request("ModifyBaselineRuleIgnore", req, cb);
    }
    /**
     * 获取Web服务关联进程列表
     */
    async DescribeAssetWebServiceProcessList(req, cb) {
        return this.request("DescribeAssetWebServiceProcessList", req, cb);
    }
    /**
     * 本接口 (ExportMaliciousRequests) 用于导出下载恶意请求文件。
     */
    async ExportMaliciousRequests(req, cb) {
        return this.request("ExportMaliciousRequests", req, cb);
    }
    /**
     * 获取系统负载、内存使用率、硬盘使用率情况
     */
    async DescribeAssetLoadInfo(req, cb) {
        return this.request("DescribeAssetLoadInfo", req, cb);
    }
    /**
     * 修复基线检测
     */
    async FixBaselineDetect(req, cb) {
        return this.request("FixBaselineDetect", req, cb);
    }
    /**
     * 获取基线规则检测列表
     */
    async DescribeBaselineRuleDetectList(req, cb) {
        return this.request("DescribeBaselineRuleDetectList", req, cb);
    }
    /**
     * 编辑漏洞防御最大cpu配置
     */
    async ModifyRaspMaxCpu(req, cb) {
        return this.request("ModifyRaspMaxCpu", req, cb);
    }
    /**
     * 删除授权全部记录
     */
    async DeleteLicenseRecordAll(req, cb) {
        return this.request("DeleteLicenseRecordAll", req, cb);
    }
    /**
     * 获取概览统计数据。
     */
    async DescribeOverviewStatistics(req, cb) {
        return this.request("DescribeOverviewStatistics", req, cb);
    }
    /**
     * 导出基线检测项
     */
    async ExportBaselineItemDetectList(req, cb) {
        return this.request("ExportBaselineItemDetectList", req, cb);
    }
    /**
     * 更新合并后登录审计白名单信息（服务器列表数目应小于1000）
     */
    async ModifyLoginWhiteRecord(req, cb) {
        return this.request("ModifyLoginWhiteRecord", req, cb);
    }
    /**
     * 根据任务id查询基线检测进度
     */
    async DescribeBaselineScanSchedule(req, cb) {
        return this.request("DescribeBaselineScanSchedule", req, cb);
    }
    /**
     * 查询网络攻击设置
     */
    async DescribeNetAttackSetting(req, cb) {
        return this.request("DescribeNetAttackSetting", req, cb);
    }
    /**
     * 导出资产管理Web框架列表
     */
    async ExportAssetWebFrameList(req, cb) {
        return this.request("ExportAssetWebFrameList", req, cb);
    }
    /**
     * 检验核心文件监控前端新增和编辑时的规则参数。
     */
    async CheckFileTamperRule(req, cb) {
        return this.request("CheckFileTamperRule", req, cb);
    }
    /**
     * 获取网络攻击白名单列表
     */
    async DescribeNetAttackWhiteList(req, cb) {
        return this.request("DescribeNetAttackWhiteList", req, cb);
    }
    /**
     * 删除本地提权规则
     */
    async DeletePrivilegeRules(req, cb) {
        return this.request("DeletePrivilegeRules", req, cb);
    }
    /**
     * 切换高危命令策略状态
     */
    async ModifyBashPolicyStatus(req, cb) {
        return this.request("ModifyBashPolicyStatus", req, cb);
    }
    /**
     * 删除恶意请求事件
     */
    async DeleteRiskDnsEvent(req, cb) {
        return this.request("DeleteRiskDnsEvent", req, cb);
    }
    /**
     * 设置本地存储数据
     */
    async SetLocalStorageItem(req, cb) {
        return this.request("SetLocalStorageItem", req, cb);
    }
    /**
     * 本接口用于删除异地登录白名单规则。
     */
    async DeleteLoginWhiteList(req, cb) {
        return this.request("DeleteLoginWhiteList", req, cb);
    }
    /**
     * 删除日志下载任务
     */
    async DeleteLogExport(req, cb) {
        return this.request("DeleteLogExport", req, cb);
    }
    /**
     * 本接口 (DescribeExportMachines) 用于导出区域主机列表。
     */
    async DescribeExportMachines(req, cb) {
        return this.request("DescribeExportMachines", req, cb);
    }
    /**
     * 清理本地存储数据
     */
    async ClearLocalStorage(req, cb) {
        return this.request("ClearLocalStorage", req, cb);
    }
    /**
     * 获取所有Web框架数量
     */
    async DescribeAssetWebFrameCount(req, cb) {
        return this.request("DescribeAssetWebFrameCount", req, cb);
    }
    /**
     * 根据基线策略id删除策略
     */
    async DeleteBaselineStrategy(req, cb) {
        return this.request("DeleteBaselineStrategy", req, cb);
    }
    /**
     * 查询授权信息
     */
    async DescribeLicense(req, cb) {
        return this.request("DescribeLicense", req, cb);
    }
    /**
     * 导出高危命令策略
     */
    async ExportBashPolicies(req, cb) {
        return this.request("ExportBashPolicies", req, cb);
    }
    /**
     * 本接口 (DescribeMachineLicenseDetail)查询机器授权信息
     */
    async DescribeMachineLicenseDetail(req, cb) {
        return this.request("DescribeMachineLicenseDetail", req, cb);
    }
    /**
     * 编辑反弹Shell规则（支持多服务器选择）
     */
    async ModifyReverseShellRulesAggregation(req, cb) {
        return this.request("ModifyReverseShellRulesAggregation", req, cb);
    }
    /**
     * 切换高危命令规则状态
     */
    async SwitchBashRules(req, cb) {
        return this.request("SwitchBashRules", req, cb);
    }
    /**
     * 获取账号列表
     */
    async DescribeAssetUserList(req, cb) {
        return this.request("DescribeAssetUserList", req, cb);
    }
    /**
     * 获取Web站点详情
     */
    async DescribeAssetWebLocationInfo(req, cb) {
        return this.request("DescribeAssetWebLocationInfo", req, cb);
    }
    /**
     * 查询给定主机java内存马插件信息
     */
    async DescribeJavaMemShellPluginInfo(req, cb) {
        return this.request("DescribeJavaMemShellPluginInfo", req, cb);
    }
    /**
     * 获取密码破解列表
     */
    async DescribeBruteAttackList(req, cb) {
        return this.request("DescribeBruteAttackList", req, cb);
    }
    /**
     * 查询资产管理数据库列表
     */
    async DescribeAssetDatabaseList(req, cb) {
        return this.request("DescribeAssetDatabaseList", req, cb);
    }
    /**
     * 漏洞影响主机列表
     */
    async DescribeVulEffectHostList(req, cb) {
        return this.request("DescribeVulEffectHostList", req, cb);
    }
    /**
     * 查询基线是否第一次检测
     */
    async CheckFirstScanBaseline(req, cb) {
        return this.request("CheckFirstScanBaseline", req, cb);
    }
    /**
     * 获取快速检索列表
     */
    async DescribeSearchTemplates(req, cb) {
        return this.request("DescribeSearchTemplates", req, cb);
    }
    /**
     * 导出资产管理Web服务列表
     */
    async ExportAssetWebServiceInfoList(req, cb) {
        return this.request("ExportAssetWebServiceInfoList", req, cb);
    }
    /**
     * 本接口（SeparateMalwares）用于隔离木马。
     */
    async SeparateMalwares(req, cb) {
        return this.request("SeparateMalwares", req, cb);
    }
    /**
     * 删除网络攻击白名单
     */
    async DeleteNetAttackWhiteList(req, cb) {
        return this.request("DeleteNetAttackWhiteList", req, cb);
    }
    /**
     * 获取日志下载任务列表
     */
    async DescribeLogExports(req, cb) {
        return this.request("DescribeLogExports", req, cb);
    }
    /**
     * 大屏可视化主机区域列表
     */
    async DescribeScreenMachines(req, cb) {
        return this.request("DescribeScreenMachines", req, cb);
    }
    /**
     * 大屏获取安全防护状态
     */
    async DescribeScreenProtectionStat(req, cb) {
        return this.request("DescribeScreenProtectionStat", req, cb);
    }
    /**
     * 获取高危命令列表(新)
     */
    async DescribeBashEventsNew(req, cb) {
        return this.request("DescribeBashEventsNew", req, cb);
    }
    /**
     * 获取资产指纹页面的资源监控列表
     */
    async DescribeAssetMachineList(req, cb) {
        return this.request("DescribeAssetMachineList", req, cb);
    }
    /**
     * 删除主机所有记录，目前只支持非腾讯云主机，且需要主机在离线状态
     */
    async RemoveMachine(req, cb) {
        return this.request("RemoveMachine", req, cb);
    }
    /**
     * 获取主机所有资源数量
     */
    async DescribeAssetHostTotalCount(req, cb) {
        return this.request("DescribeAssetHostTotalCount", req, cb);
    }
    /**
     * 获取Web站点列表
     */
    async DescribeAssetWebLocationList(req, cb) {
        return this.request("DescribeAssetWebLocationList", req, cb);
    }
    /**
     * 查询恶意请求事件详情
     */
    async DescribeRiskDnsEventInfo(req, cb) {
        return this.request("DescribeRiskDnsEventInfo", req, cb);
    }
    /**
     * 导出高危命令事件(新)
     */
    async ExportBashEventsNew(req, cb) {
        return this.request("ExportBashEventsNew", req, cb);
    }
    /**
     * 查询入侵检测事件更新状态任务是否完成
     */
    async DescribeRiskBatchStatus(req, cb) {
        return this.request("DescribeRiskBatchStatus", req, cb);
    }
    /**
     * 获取资产管理进程列表
     */
    async DescribeAssetProcessInfoList(req, cb) {
        return this.request("DescribeAssetProcessInfoList", req, cb);
    }
    /**
     * 查询告警接收人列表
     */
    async DescribeWebHookReceiver(req, cb) {
        return this.request("DescribeWebHookReceiver", req, cb);
    }
    /**
     * 用于设置新增主机自动开通专业防护配置。
     */
    async ModifyAutoOpenProVersionConfig(req, cb) {
        return this.request("ModifyAutoOpenProVersionConfig", req, cb);
    }
    /**
     * 设置本地存储过期时间
     */
    async SetLocalStorageExpire(req, cb) {
        return this.request("SetLocalStorageExpire", req, cb);
    }
    /**
     * 漏洞修护-查询可修护主机信息
     */
    async DescribeCanFixVulMachine(req, cb) {
        return this.request("DescribeCanFixVulMachine", req, cb);
    }
    /**
     * 更改基线策略状态
     */
    async ModifyBaselinePolicyState(req, cb) {
        return this.request("ModifyBaselinePolicyState", req, cb);
    }
    /**
     * 测试企微机器人规则
     */
    async TestWebHookRule(req, cb) {
        return this.request("TestWebHookRule", req, cb);
    }
    /**
     * 入侵管理-终止扫描任务
     */
    async DeleteMalwareScanTask(req, cb) {
        return this.request("DeleteMalwareScanTask", req, cb);
    }
    /**
     * 核心文件监控规则列表
     */
    async DescribeFileTamperRules(req, cb) {
        return this.request("DescribeFileTamperRules", req, cb);
    }
    /**
     * 查询主机高级防御事件数统计
     */
    async DescribeMachineDefenseCnt(req, cb) {
        return this.request("DescribeMachineDefenseCnt", req, cb);
    }
    /**
     * 用于获取专业版概览信息。
     */
    async DescribeProVersionInfo(req, cb) {
        return this.request("DescribeProVersionInfo", req, cb);
    }
    /**
     * 修改网络攻击设置
     */
    async ModifyNetAttackSetting(req, cb) {
        return this.request("ModifyNetAttackSetting", req, cb);
    }
    /**
     * 删除阻断白名单列表
     */
    async DeleteBanWhiteList(req, cb) {
        return this.request("DeleteBanWhiteList", req, cb);
    }
    /**
     * 查询网站防篡改概览信息
     */
    async DescribeWebPageGeneralize(req, cb) {
        return this.request("DescribeWebPageGeneralize", req, cb);
    }
    /**
     * 获取本地提权事件列表
     */
    async DescribePrivilegeEvents(req, cb) {
        return this.request("DescribePrivilegeEvents", req, cb);
    }
    /**
     * 本接口（DescribeMachineInfo）用于获取机器详细信息。
     */
    async DescribeMachineInfo(req, cb) {
        return this.request("DescribeMachineInfo", req, cb);
    }
    /**
     * 获取各种类型资源Top5
     */
    async DescribeAssetTypeTop(req, cb) {
        return this.request("DescribeAssetTypeTop", req, cb);
    }
    /**
     * 获取漏洞防御白名单漏洞列表
     */
    async DescribeRaspRuleVuls(req, cb) {
        return this.request("DescribeRaspRuleVuls", req, cb);
    }
    /**
     * 导出勒索防御策略绑定机器列表
     */
    async ExportRansomDefenseStrategyMachines(req, cb) {
        return this.request("ExportRansomDefenseStrategyMachines", req, cb);
    }
    /**
     * 获取日志检索容量使用统计
     */
    async DescribeLogStorageStatistic(req, cb) {
        return this.request("DescribeLogStorageStatistic", req, cb);
    }
    /**
     * 获取一键忽略受影响的检测项和主机信息
     */
    async DescribeIgnoreHostAndItemConfig(req, cb) {
        return this.request("DescribeIgnoreHostAndItemConfig", req, cb);
    }
    /**
     * 查询已经忽略的检测项信息
     */
    async DescribeIgnoreBaselineRule(req, cb) {
        return this.request("DescribeIgnoreBaselineRule", req, cb);
    }
    /**
     * 查询日志投递kafka可选项列表
     */
    async DescribeLogDeliveryKafkaOptions(req, cb) {
        return this.request("DescribeLogDeliveryKafkaOptions", req, cb);
    }
    /**
     * 查询主机入侵检测事件统计
     */
    async DescribeMachineRiskCnt(req, cb) {
        return this.request("DescribeMachineRiskCnt", req, cb);
    }
    /**
     * 大屏可视化安全播报
     */
    async DescribeScreenBroadcasts(req, cb) {
        return this.request("DescribeScreenBroadcasts", req, cb);
    }
    /**
     * 该接口可以创建白名单订单
     */
    async CreateWhiteListOrder(req, cb) {
        return this.request("CreateWhiteListOrder", req, cb);
    }
    /**
     * 设置中心-授权管理 对某个授权批量解绑机器
     */
    async ModifyLicenseUnBinds(req, cb) {
        return this.request("ModifyLicenseUnBinds", req, cb);
    }
    /**
     * 获取版本对比信息
     */
    async DescribeVersionCompareChart(req, cb) {
        return this.request("DescribeVersionCompareChart", req, cb);
    }
    /**
     * 该接口可以对入侵检测-文件查杀扫描检测
     */
    async CreateScanMalwareSetting(req, cb) {
        return this.request("CreateScanMalwareSetting", req, cb);
    }
    /**
     * 获取全网勒索态势
     */
    async DescribeRansomDefenseTrend(req, cb) {
        return this.request("DescribeRansomDefenseTrend", req, cb);
    }
    /**
     * 导出资产管理Web应用列表
     */
    async ExportAssetWebAppList(req, cb) {
        return this.request("ExportAssetWebAppList", req, cb);
    }
    /**
     * 该接口可以获取设置中心-授权管理,某个授权下已绑定的授权机器列表
     */
    async DescribeLicenseBindList(req, cb) {
        return this.request("DescribeLicenseBindList", req, cb);
    }
    /**
     * 获取内核模块详情
     */
    async DescribeAssetCoreModuleInfo(req, cb) {
        return this.request("DescribeAssetCoreModuleInfo", req, cb);
    }
    /**
     * 获取主机相关统计
     */
    async DescribeGeneralStat(req, cb) {
        return this.request("DescribeGeneralStat", req, cb);
    }
    /**
     * 开关java内存马插件
     */
    async ModifyJavaMemShellPluginSwitch(req, cb) {
        return this.request("ModifyJavaMemShellPluginSwitch", req, cb);
    }
    /**
     * 获取资产管理数据库详情
     */
    async DescribeAssetDatabaseInfo(req, cb) {
        return this.request("DescribeAssetDatabaseInfo", req, cb);
    }
    /**
     * 获取木马白名单列表
     */
    async DescribeMalwareWhiteList(req, cb) {
        return this.request("DescribeMalwareWhiteList", req, cb);
    }
    /**
     * 查询定期检测的配置
     */
    async DescribeScanVulSetting(req, cb) {
        return this.request("DescribeScanVulSetting", req, cb);
    }
    /**
     * 创建木马白名单
     */
    async CreateMalwareWhiteList(req, cb) {
        return this.request("CreateMalwareWhiteList", req, cb);
    }
    /**
     * 本接口（DeleteMachine）用于卸载主机安全客户端。
     */
    async DeleteMachine(req, cb) {
        return this.request("DeleteMachine", req, cb);
    }
    /**
     * 核心文件事件更新
     */
    async ModifyFileTamperEvents(req, cb) {
        return this.request("ModifyFileTamperEvents", req, cb);
    }
    /**
     * 查询安全播报文章信息
     */
    async DescribeSecurityBroadcastInfo(req, cb) {
        return this.request("DescribeSecurityBroadcastInfo", req, cb);
    }
    /**
     * ScanTaskAgain  重新开始扫描任务，可以指定机器
     */
    async ScanTaskAgain(req, cb) {
        return this.request("ScanTaskAgain", req, cb);
    }
    /**
     * 获取漏洞概览数据
     */
    async DescribeVulOverview(req, cb) {
        return this.request("DescribeVulOverview", req, cb);
    }
    /**
     * 日志分析功能-获取日志类型，使用该接口返回的结果暂时可过滤的日志类型
     */
    async DescribeLogType(req, cb) {
        return this.request("DescribeLogType", req, cb);
    }
    /**
     * 网络攻击事件详情
     */
    async DescribeAttackEventInfo(req, cb) {
        return this.request("DescribeAttackEventInfo", req, cb);
    }
    /**
     * 大屏可视化获取全网攻击热点
     */
    async DescribeScreenAttackHotspot(req, cb) {
        return this.request("DescribeScreenAttackHotspot", req, cb);
    }
    /**
     * 网站防篡改-删除事件记录
     */
    async DeleteWebPageEventLog(req, cb) {
        return this.request("DeleteWebPageEventLog", req, cb);
    }
    /**
     * 导出修复列表
     */
    async ExportBaselineFixList(req, cb) {
        return this.request("ExportBaselineFixList", req, cb);
    }
    /**
     * 用于获取单台主机或所有主机是否开通专业版状态。
     */
    async DescribeProVersionStatus(req, cb) {
        return this.request("DescribeProVersionStatus", req, cb);
    }
    /**
     * 本接口 (DescribeMachines) 用于获取区域主机列表。
     */
    async DescribeMachines(req, cb) {
        return this.request("DescribeMachines", req, cb);
    }
    /**
     * 获取基线检测主机列表
     */
    async DescribeBaselineHostDetectList(req, cb) {
        return this.request("DescribeBaselineHostDetectList", req, cb);
    }
    /**
     * 查询资产管理Web服务列表
     */
    async DescribeAssetWebServiceInfoList(req, cb) {
        return this.request("DescribeAssetWebServiceInfoList", req, cb);
    }
    /**
     * 获取所有进程数量
     */
    async DescribeAssetProcessCount(req, cb) {
        return this.request("DescribeAssetProcessCount", req, cb);
    }
    /**
     * 删除服务器关联的标签
     */
    async DeleteMachineTag(req, cb) {
        return this.request("DeleteMachineTag", req, cb);
    }
    /**
     * 获取漏洞态势信息
     */
    async DescribeVulTrend(req, cb) {
        return this.request("DescribeVulTrend", req, cb);
    }
    /**
     * 获取指定点属性信息
     */
    async DescribeVertexDetail(req, cb) {
        return this.request("DescribeVertexDetail", req, cb);
    }
    /**
     * DescribeAttackEvents 代替

按分页形式展示网络攻击日志列表
     */
    async DescribeAttackLogs(req, cb) {
        return this.request("DescribeAttackLogs", req, cb);
    }
    /**
     * 修改告警策略开关
     */
    async ModifyWebHookPolicyStatus(req, cb) {
        return this.request("ModifyWebHookPolicyStatus", req, cb);
    }
    /**
     * 导出检测项结果列表
     */
    async ExportBaselineItemList(req, cb) {
        return this.request("ExportBaselineItemList", req, cb);
    }
    /**
     * 获取基线检测项TOP5
     */
    async DescribeBaselineItemRiskTop(req, cb) {
        return this.request("DescribeBaselineItemRiskTop", req, cb);
    }
    /**
     * 导出资产管理应用列表
     */
    async ExportAssetAppList(req, cb) {
        return this.request("ExportAssetAppList", req, cb);
    }
    /**
     * 导出弱口令配置列表
     */
    async ExportBaselineWeakPasswordList(req, cb) {
        return this.request("ExportBaselineWeakPasswordList", req, cb);
    }
    /**
     * 查询一个用户下的基线策略信息
     */
    async DescribeBaselineStrategyList(req, cb) {
        return this.request("DescribeBaselineStrategyList", req, cb);
    }
    /**
     * 删除本地存储数据
     */
    async RemoveLocalStorageItem(req, cb) {
        return this.request("RemoveLocalStorageItem", req, cb);
    }
    /**
     * 导出资产管理端口列表
     */
    async ExportAssetPortInfoList(req, cb) {
        return this.request("ExportAssetPortInfoList", req, cb);
    }
    /**
     * 导出资源监控列表
     */
    async ExportAssetMachineList(req, cb) {
        return this.request("ExportAssetMachineList", req, cb);
    }
    /**
     * 获取日志存储量记录
     */
    async DescribeLogStorageRecord(req, cb) {
        return this.request("DescribeLogStorageRecord", req, cb);
    }
    /**
     * 校验高危命令用户规则新增和编辑时的参数。
     */
    async CheckBashPolicyParams(req, cb) {
        return this.request("CheckBashPolicyParams", req, cb);
    }
    /**
     * 修改网络攻击事件状态
     */
    async ModifyEventAttackStatus(req, cb) {
        return this.request("ModifyEventAttackStatus", req, cb);
    }
    /**
     * 对旗舰版机器单次触发事件调查及告警回溯
     */
    async CreateIncidentBacktracking(req, cb) {
        return this.request("CreateIncidentBacktracking", req, cb);
    }
    /**
     * 根据Ids删除高危命令事件
     */
    async DeleteBashEvents(req, cb) {
        return this.request("DeleteBashEvents", req, cb);
    }
    /**
     * 根据基线id查询基线影响主机列表
     */
    async DescribeBaselineEffectHostList(req, cb) {
        return this.request("DescribeBaselineEffectHostList", req, cb);
    }
    /**
     * 本接口 (DeleteMaliciousRequests) 用于删除恶意请求记录。
     */
    async DeleteMaliciousRequests(req, cb) {
        return this.request("DeleteMaliciousRequests", req, cb);
    }
    /**
     * 用于统计专业版和基础版机器数。
     */
    async DescribeVersionStatistics(req, cb) {
        return this.request("DescribeVersionStatistics", req, cb);
    }
    /**
     * 本接口（RecoverMalwares）用于批量恢复已经被隔离的木马文件。
     */
    async RecoverMalwares(req, cb) {
        return this.request("RecoverMalwares", req, cb);
    }
    /**
     * 删除反弹Shell规则
     */
    async DeleteReverseShellRules(req, cb) {
        return this.request("DeleteReverseShellRules", req, cb);
    }
    /**
     * 获取资产管理Web应用列表
     */
    async DescribeAssetWebAppList(req, cb) {
        return this.request("DescribeAssetWebAppList", req, cb);
    }
    /**
     * 查询防护目录关联服务器列表信息
     */
    async DescribeProtectDirRelatedServer(req, cb) {
        return this.request("DescribeProtectDirRelatedServer", req, cb);
    }
    /**
     * 导出基线主机检测
     */
    async ExportBaselineHostDetectList(req, cb) {
        return this.request("ExportBaselineHostDetectList", req, cb);
    }
    /**
     * 删除防护网站
     */
    async DeleteProtectDir(req, cb) {
        return this.request("DeleteProtectDir", req, cb);
    }
    /**
     * 本接口 (DeleteBruteAttacks) 用于删除暴力破解记录。
     */
    async DeleteBruteAttacks(req, cb) {
        return this.request("DeleteBruteAttacks", req, cb);
    }
    /**
     * 删除告警接收人
     */
    async DeleteWebHookReceiver(req, cb) {
        return this.request("DeleteWebHookReceiver", req, cb);
    }
    /**
     * 导出高危命令事件
     */
    async ExportBashEvents(req, cb) {
        return this.request("ExportBashEvents", req, cb);
    }
    /**
     * 查询主机概览信息
     */
    async DescribeMachineGeneral(req, cb) {
        return this.request("DescribeMachineGeneral", req, cb);
    }
    /**
     * 获取恶意请求策略列表
     */
    async DescribeRiskDnsPolicyList(req, cb) {
        return this.request("DescribeRiskDnsPolicyList", req, cb);
    }
    /**
     * 获取应急漏洞列表
     */
    async DescribeEmergencyVulList(req, cb) {
        return this.request("DescribeEmergencyVulList", req, cb);
    }
    /**
     * 查询java内存马事件详细信息
     */
    async DescribeJavaMemShellInfo(req, cb) {
        return this.request("DescribeJavaMemShellInfo", req, cb);
    }
    /**
     * 获取基线下载列表
     */
    async DescribeBaselineDownloadList(req, cb) {
        return this.request("DescribeBaselineDownloadList", req, cb);
    }
    /**
     * 本接口（UntrustMalwares）用于取消信任木马文件。
     */
    async UntrustMalwares(req, cb) {
        return this.request("UntrustMalwares", req, cb);
    }
    /**
     * 新增或修改日志投递kafka接入配置
     */
    async ModifyLogKafkaAccess(req, cb) {
        return this.request("ModifyLogKafkaAccess", req, cb);
    }
    /**
     * 获取本地提权规则列表
     */
    async DescribePrivilegeRules(req, cb) {
        return this.request("DescribePrivilegeRules", req, cb);
    }
    /**
     * 查询Jar包列表
     */
    async DescribeAssetJarList(req, cb) {
        return this.request("DescribeAssetJarList", req, cb);
    }
    /**
     * 获取漏洞防御事件详情
     */
    async DescribeDefenceEventDetail(req, cb) {
        return this.request("DescribeDefenceEventDetail", req, cb);
    }
    /**
     * 获取文件查杀概览信息
     */
    async DescribeMalwareRiskOverview(req, cb) {
        return this.request("DescribeMalwareRiskOverview", req, cb);
    }
    /**
     * 设置阻断开关状态
     */
    async ModifyBanStatus(req, cb) {
        return this.request("ModifyBanStatus", req, cb);
    }
    /**
     * 查询机器清理历史记录
     */
    async DescribeMachineClearHistory(req, cb) {
        return this.request("DescribeMachineClearHistory", req, cb);
    }
    /**
     * 关联机器标签列表
     */
    async UpdateMachineTags(req, cb) {
        return this.request("UpdateMachineTags", req, cb);
    }
    /**
     * 获取agent安装命令
     */
    async DescribeAgentInstallCommand(req, cb) {
        return this.request("DescribeAgentInstallCommand", req, cb);
    }
    /**
     * 资产指纹启动扫描
     */
    async ScanAsset(req, cb) {
        return this.request("ScanAsset", req, cb);
    }
    /**
     * 根据Ids删除反弹Shell事件
     */
    async DeleteReverseShellEvents(req, cb) {
        return this.request("DeleteReverseShellEvents", req, cb);
    }
    /**
     * 根据任务id导出指定扫描任务详情
     */
    async ExportScanTaskDetails(req, cb) {
        return this.request("ExportScanTaskDetails", req, cb);
    }
    /**
     * 查询主机地域列表
     */
    async DescribeMachineRegionList(req, cb) {
        return this.request("DescribeMachineRegionList", req, cb);
    }
    /**
     * 修改网站防护设置
     */
    async ModifyWebPageProtectSetting(req, cb) {
        return this.request("ModifyWebPageProtectSetting", req, cb);
    }
    /**
     * 导出资产管理启动服务列表
     */
    async ExportAssetInitServiceList(req, cb) {
        return this.request("ExportAssetInitServiceList", req, cb);
    }
    /**
     * 更新登录审计白名单信息
     */
    async ModifyLoginWhiteInfo(req, cb) {
        return this.request("ModifyLoginWhiteInfo", req, cb);
    }
    /**
     * 导出资产管理内核模块列表
     */
    async ExportAssetCoreModuleList(req, cb) {
        return this.request("ExportAssetCoreModuleList", req, cb);
    }
    /**
     * 获取当前用户告警列表
     */
    async DescribeWarningList(req, cb) {
        return this.request("DescribeWarningList", req, cb);
    }
    /**
     * 获取基线忽略规则列表
     */
    async DescribeBaselineRuleIgnoreList(req, cb) {
        return this.request("DescribeBaselineRuleIgnoreList", req, cb);
    }
    /**
     * 修改主机备注信息
     */
    async ModifyMachineRemark(req, cb) {
        return this.request("ModifyMachineRemark", req, cb);
    }
    /**
     * 查询基线基础信息列表
     */
    async DescribeBaselineBasicInfo(req, cb) {
        return this.request("DescribeBaselineBasicInfo", req, cb);
    }
    /**
     * 获取机器地域列表
     */
    async DescribeMachineRegions(req, cb) {
        return this.request("DescribeMachineRegions", req, cb);
    }
    /**
     * 获取当前漏洞防御插件设置
     */
    async DescribeVulDefenceSetting(req, cb) {
        return this.request("DescribeVulDefenceSetting", req, cb);
    }
    /**
     * 获取待处理漏洞数+影响主机数
     */
    async DescribeVulHostCountScanTime(req, cb) {
        return this.request("DescribeVulHostCountScanTime", req, cb);
    }
    /**
     * 导出基线检测规则
     */
    async ExportBaselineRuleDetectList(req, cb) {
        return this.request("ExportBaselineRuleDetectList", req, cb);
    }
    /**
     * 获取日志存储配置
     */
    async DescribeLogStorageConfig(req, cb) {
        return this.request("DescribeLogStorageConfig", req, cb);
    }
    /**
     * 删除机器清理记录
     */
    async DeleteMachineClearHistory(req, cb) {
        return this.request("DeleteMachineClearHistory", req, cb);
    }
    /**
     * 漏洞修护-查询主机创建的快照
     */
    async DescribeMachineSnapshot(req, cb) {
        return this.request("DescribeMachineSnapshot", req, cb);
    }
    /**
     * 查询授权白名单的可用配置
     */
    async DescribeLicenseWhiteConfig(req, cb) {
        return this.request("DescribeLicenseWhiteConfig", req, cb);
    }
    /**
     * 查询恶意请求白名单列表
     */
    async DescribeMaliciousRequestWhiteList(req, cb) {
        return this.request("DescribeMaliciousRequestWhiteList", req, cb);
    }
    /**
     * 网络攻击top5数据列表
     */
    async DescribeAttackTop(req, cb) {
        return this.request("DescribeAttackTop", req, cb);
    }
    /**
     * 根据基线策略id查询策略详情
     */
    async DescribeBaselineStrategyDetail(req, cb) {
        return this.request("DescribeBaselineStrategyDetail", req, cb);
    }
    /**
     * 更改基线策略设置
     */
    async ModifyBaselinePolicy(req, cb) {
        return this.request("ModifyBaselinePolicy", req, cb);
    }
    /**
     * 获取Jar包详情
     */
    async DescribeAssetJarInfo(req, cb) {
        return this.request("DescribeAssetJarInfo", req, cb);
    }
    /**
     * 删除基线策略配置
     */
    async DeleteBaselinePolicy(req, cb) {
        return this.request("DeleteBaselinePolicy", req, cb);
    }
    /**
     * DescribeScanTaskStatus 查询机器扫描状态列表用于过滤筛选
     */
    async DescribeScanTaskStatus(req, cb) {
        return this.request("DescribeScanTaskStatus", req, cb);
    }
    /**
     * CreateLicenseOrder 该接口可以创建专业版/旗舰版订单
支持预付费后付费创建
后付费订单直接创建成功
预付费订单仅下单不支付,需要调用计费支付接口进行支付
     */
    async CreateLicenseOrder(req, cb) {
        return this.request("CreateLicenseOrder", req, cb);
    }
    /**
     * 大屏可视化主机区域选项列表
     */
    async DescribeScreenMachineRegions(req, cb) {
        return this.request("DescribeScreenMachineRegions", req, cb);
    }
    /**
     * 获取忽略规则主机列表
     */
    async DescribeBaselineHostIgnoreList(req, cb) {
        return this.request("DescribeBaselineHostIgnoreList", req, cb);
    }
    /**
     * 新增或编辑标签
     */
    async EditTags(req, cb) {
        return this.request("EditTags", req, cb);
    }
    /**
     * 查询漏洞防御白名单
     */
    async DescribeRaspRules(req, cb) {
        return this.request("DescribeRaspRules", req, cb);
    }
    /**
     * 创建日志下载任务
     */
    async CreateLogExport(req, cb) {
        return this.request("CreateLogExport", req, cb);
    }
    /**
     * 获取异地登录白名单合并后列表
     */
    async DescribeLoginWhiteCombinedList(req, cb) {
        return this.request("DescribeLoginWhiteCombinedList", req, cb);
    }
    /**
     * 本接口 (ExportNonlocalLoginPlaces) 用于导出异地登录事件记录CSV文件。
     */
    async ExportNonlocalLoginPlaces(req, cb) {
        return this.request("ExportNonlocalLoginPlaces", req, cb);
    }
    /**
     * 获取待处理风险文件数+影响服务器数+是否试用检测+最近检测时间
     */
    async DescribeServersAndRiskAndFirstInfo(req, cb) {
        return this.request("DescribeServersAndRiskAndFirstInfo", req, cb);
    }
    /**
     * 获取软件关联进程列表
     */
    async DescribeAssetAppProcessList(req, cb) {
        return this.request("DescribeAssetAppProcessList", req, cb);
    }
    /**
     * 同步机器信息
     */
    async SyncMachines(req, cb) {
        return this.request("SyncMachines", req, cb);
    }
    /**
     * 获取反弹Shell列表
     */
    async DescribeReverseShellEvents(req, cb) {
        return this.request("DescribeReverseShellEvents", req, cb);
    }
    /**
     * 查询定时扫描配置
     */
    async DescribeMalwareTimingScanSetting(req, cb) {
        return this.request("DescribeMalwareTimingScanSetting", req, cb);
    }
    /**
     * 删除恶意请求策略
     */
    async DeleteRiskDnsPolicy(req, cb) {
        return this.request("DeleteRiskDnsPolicy", req, cb);
    }
    /**
     * 导出漏洞信息，包括影响主机列表，组件信息
     */
    async ExportVulInfo(req, cb) {
        return this.request("ExportVulInfo", req, cb);
    }
    /**
     * 导出资产管理数据库列表
     */
    async ExportAssetDatabaseList(req, cb) {
        return this.request("ExportAssetDatabaseList", req, cb);
    }
    /**
     * 导出核心文件监控规则
     */
    async ExportFileTamperRules(req, cb) {
        return this.request("ExportFileTamperRules", req, cb);
    }
    /**
     * 修改告警设置
     */
    async ModifyWarningSetting(req, cb) {
        return this.request("ModifyWarningSetting", req, cb);
    }
    /**
     * 大屏可视化主机安全防护引擎介绍
     */
    async DescribeScreenProtectionCnt(req, cb) {
        return this.request("DescribeScreenProtectionCnt", req, cb);
    }
    /**
     * 新增或修改高危命令策略
     */
    async ModifyBashPolicy(req, cb) {
        return this.request("ModifyBashPolicy", req, cb);
    }
    /**
     * 查询安全通知信息
     */
    async DescribeSafeInfo(req, cb) {
        return this.request("DescribeSafeInfo", req, cb);
    }
    /**
     * 导出Web站点列表
     */
    async ExportAssetWebLocationList(req, cb) {
        return this.request("ExportAssetWebLocationList", req, cb);
    }
    /**
     * 查询主机快照备份列表
     */
    async DescribeRansomDefenseBackupList(req, cb) {
        return this.request("DescribeRansomDefenseBackupList", req, cb);
    }
    /**
     * 获取基线检测概览
     */
    async DescribeBaselineDetectOverview(req, cb) {
        return this.request("DescribeBaselineDetectOverview", req, cb);
    }
    /**
     * 获取基线检测项的列表
     */
    async DescribeBaselineItemDetectList(req, cb) {
        return this.request("DescribeBaselineItemDetectList", req, cb);
    }
    /**
     * 本接口 (DescribeMachinesSimple) 用于获取主机列表。
     */
    async DescribeMachinesSimple(req, cb) {
        return this.request("DescribeMachinesSimple", req, cb);
    }
    /**
     * 获取策略详情
     */
    async DescribeRansomDefenseStrategyDetail(req, cb) {
        return this.request("DescribeRansomDefenseStrategyDetail", req, cb);
    }
    /**
     * 导出本次漏洞检测Excel
     */
    async ExportVulDetectionExcel(req, cb) {
        return this.request("ExportVulDetectionExcel", req, cb);
    }
    /**
     * 获取阻断地域
     */
    async DescribeBanRegions(req, cb) {
        return this.request("DescribeBanRegions", req, cb);
    }
    /**
     * 删除恶意请求白名单
     */
    async DeleteMaliciousRequestWhiteList(req, cb) {
        return this.request("DeleteMaliciousRequestWhiteList", req, cb);
    }
    /**
     * 添加阻断白名单列表
     */
    async CreateBanWhiteList(req, cb) {
        return this.request("CreateBanWhiteList", req, cb);
    }
    /**
     * 漏洞详情，带CVSS版本
     */
    async DescribeVulInfoCvss(req, cb) {
        return this.request("DescribeVulInfoCvss", req, cb);
    }
    /**
     * 用于查询用户自定义配置
     */
    async DescribeUsersConfig(req, cb) {
        return this.request("DescribeUsersConfig", req, cb);
    }
    /**
     * 修改日志投递状态信息
     */
    async ModifyLogKafkaState(req, cb) {
        return this.request("ModifyLogKafkaState", req, cb);
    }
    /**
     * 导出java内存马事件列表
     */
    async ExportJavaMemShells(req, cb) {
        return this.request("ExportJavaMemShells", req, cb);
    }
    /**
     * 获取基线弱口令列表
     */
    async DescribeBaselineWeakPasswordList(req, cb) {
        return this.request("DescribeBaselineWeakPasswordList", req, cb);
    }
    /**
     * 查询推荐购买防护核数
     */
    async DescribeRecommendedProtectCpu(req, cb) {
        return this.request("DescribeRecommendedProtectCpu", req, cb);
    }
    /**
     * 获取基线检测项信息
     */
    async DescribeBaselineItemInfo(req, cb) {
        return this.request("DescribeBaselineItemInfo", req, cb);
    }
    /**
     * 查询资产管理启动服务列表
     */
    async DescribeAssetInitServiceList(req, cb) {
        return this.request("DescribeAssetInitServiceList", req, cb);
    }
    /**
     * 导出网络攻击事件
     */
    async ExportAttackEvents(req, cb) {
        return this.request("ExportAttackEvents", req, cb);
    }
    /**
     * 获取基线修复列表
     */
    async DescribeBaselineFixList(req, cb) {
        return this.request("DescribeBaselineFixList", req, cb);
    }
    /**
     * 查询告警机器范围配置
     */
    async DescribeWarningHostConfig(req, cb) {
        return this.request("DescribeWarningHostConfig", req, cb);
    }
    /**
     * 修改机器清理配置
     */
    async ModifyMachineAutoClearConfig(req, cb) {
        return this.request("ModifyMachineAutoClearConfig", req, cb);
    }
    /**
     * 漏洞管理-重新检测接口
     */
    async ScanVulAgain(req, cb) {
        return this.request("ScanVulAgain", req, cb);
    }
    /**
     * 网站防篡改-查询网页防篡改服务器购买信息及服务器信息
     */
    async DescribeWebPageServiceInfo(req, cb) {
        return this.request("DescribeWebPageServiceInfo", req, cb);
    }
    /**
     * 获取漏洞防御事件列表
     */
    async DescribeVulDefenceEvent(req, cb) {
        return this.request("DescribeVulDefenceEvent", req, cb);
    }
    /**
     * 更改恶意请求策略状态
     */
    async ModifyRiskDnsPolicyStatus(req, cb) {
        return this.request("ModifyRiskDnsPolicyStatus", req, cb);
    }
    /**
     * 获取漏洞列表数据
     */
    async DescribeVulList(req, cb) {
        return this.request("DescribeVulList", req, cb);
    }
    /**
     * 修改企微机器人规则状态
     */
    async ModifyWebHookRuleStatus(req, cb) {
        return this.request("ModifyWebHookRuleStatus", req, cb);
    }
    /**
     * 导出基线列表
     */
    async ExportBaselineList(req, cb) {
        return this.request("ExportBaselineList", req, cb);
    }
    /**
     * 查询某个监控规则的详情
     */
    async DescribeFileTamperRuleInfo(req, cb) {
        return this.request("DescribeFileTamperRuleInfo", req, cb);
    }
    /**
     * 基线检测与基线重新检测接口
     */
    async ScanBaseline(req, cb) {
        return this.request("ScanBaseline", req, cb);
    }
    /**
     * 修改日志存储配置
     */
    async ModifyLogStorageConfig(req, cb) {
        return this.request("ModifyLogStorageConfig", req, cb);
    }
    /**
     * 编辑、新增核心文件监控规则
     */
    async ModifyFileTamperRule(req, cb) {
        return this.request("ModifyFileTamperRule", req, cb);
    }
    /**
     * 获取木马文件下载地址
     */
    async DescribeMalwareFile(req, cb) {
        return this.request("DescribeMalwareFile", req, cb);
    }
    /**
     * 获取恶意请求事件列表
     */
    async DescribeRiskDnsEventList(req, cb) {
        return this.request("DescribeRiskDnsEventList", req, cb);
    }
    /**
     * 根据Ids删除本地提权
     */
    async DeletePrivilegeEvents(req, cb) {
        return this.request("DeletePrivilegeEvents", req, cb);
    }
    /**
     * 查询告警策略
     */
    async DescribeWebHookPolicy(req, cb) {
        return this.request("DescribeWebHookPolicy", req, cb);
    }
    /**
     * 修改防勒索事件状态
     */
    async ModifyRansomDefenseEventsStatus(req, cb) {
        return this.request("ModifyRansomDefenseEventsStatus", req, cb);
    }
    /**
     * 查询资产管理计划任务列表
     */
    async DescribeAssetPlanTaskList(req, cb) {
        return this.request("DescribeAssetPlanTaskList", req, cb);
    }
    /**
     * 按分页形式展示网络攻击检测事件列表
     */
    async DescribeAttackEvents(req, cb) {
        return this.request("DescribeAttackEvents", req, cb);
    }
    /**
     * 获取资产管理Web应用插件列表
     */
    async DescribeAssetWebAppPluginList(req, cb) {
        return this.request("DescribeAssetWebAppPluginList", req, cb);
    }
    /**
     * 查询合并后白名单机器列表
     */
    async DescribeLoginWhiteHostList(req, cb) {
        return this.request("DescribeLoginWhiteHostList", req, cb);
    }
    /**
     * 获取历史搜索记录
     */
    async DescribeSearchLogs(req, cb) {
        return this.request("DescribeSearchLogs", req, cb);
    }
    /**
     * 根据策略id查询基线检测项TOP
     */
    async DescribeBaselineTop(req, cb) {
        return this.request("DescribeBaselineTop", req, cb);
    }
    /**
     * 日志快速分析统计
     */
    async DescribeFastAnalysis(req, cb) {
        return this.request("DescribeFastAnalysis", req, cb);
    }
    /**
     * 查询主机安全授权试用报告(仅限控制台申领的)
     */
    async DescribeTrialReport(req, cb) {
        return this.request("DescribeTrialReport", req, cb);
    }
    /**
     * 此接口（DescribeUsualLoginPlaces）用于查询常用登录地。
     */
    async DescribeUsualLoginPlaces(req, cb) {
        return this.request("DescribeUsualLoginPlaces", req, cb);
    }
    /**
     * 导出核心文件事件
     */
    async ExportFileTamperEvents(req, cb) {
        return this.request("ExportFileTamperEvents", req, cb);
    }
    /**
     * 批量添加异地登录白名单
     */
    async AddLoginWhiteLists(req, cb) {
        return this.request("AddLoginWhiteLists", req, cb);
    }
    /**
     * 导出网页防篡改防护目录列表
     */
    async ExportProtectDirList(req, cb) {
        return this.request("ExportProtectDirList", req, cb);
    }
    /**
     * 用于异步导出数据量大的日志文件
     */
    async ExportTasks(req, cb) {
        return this.request("ExportTasks", req, cb);
    }
    /**
     * 根据检测项id导出忽略检测项影响主机列表
     */
    async ExportIgnoreRuleEffectHostList(req, cb) {
        return this.request("ExportIgnoreRuleEffectHostList", req, cb);
    }
    /**
     * 查询恶意请求详情
     */
    async DescribeRiskDnsInfo(req, cb) {
        return this.request("DescribeRiskDnsInfo", req, cb);
    }
    /**
     * 导出防勒索事件列表
     */
    async ExportRansomDefenseEventsList(req, cb) {
        return this.request("ExportRansomDefenseEventsList", req, cb);
    }
    /**
     * 新增或修改企微机器人规则
     */
    async ModifyWebHookRule(req, cb) {
        return this.request("ModifyWebHookRule", req, cb);
    }
    /**
     * 获取当前异常插件数
     */
    async DescribeVulDefencePluginExceptionCount(req, cb) {
        return this.request("DescribeVulDefencePluginExceptionCount", req, cb);
    }
    /**
     * 根据检测项id与筛选条件查询忽略检测项影响主机列表信息
     */
    async DescribeIgnoreRuleEffectHostList(req, cb) {
        return this.request("DescribeIgnoreRuleEffectHostList", req, cb);
    }
    /**
     * 查询应用列表
     */
    async DescribeAssetAppList(req, cb) {
        return this.request("DescribeAssetAppList", req, cb);
    }
    /**
     * 获取kafka投递信息
     */
    async DescribeLogKafkaDeliverInfo(req, cb) {
        return this.request("DescribeLogKafkaDeliverInfo", req, cb);
    }
    /**
     * 获取ES字段聚合结果
     */
    async DescribeESAggregations(req, cb) {
        return this.request("DescribeESAggregations", req, cb);
    }
    /**
     * 添加历史搜索记录
     */
    async CreateSearchLog(req, cb) {
        return this.request("CreateSearchLog", req, cb);
    }
    /**
     * 删除企微机器人规则
     */
    async DeleteWebHookRule(req, cb) {
        return this.request("DeleteWebHookRule", req, cb);
    }
    /**
     * 添加检索模板
     */
    async CreateSearchTemplate(req, cb) {
        return this.request("CreateSearchTemplate", req, cb);
    }
    /**
     * 导出已忽略基线检测项信息
     */
    async ExportIgnoreBaselineRule(req, cb) {
        return this.request("ExportIgnoreBaselineRule", req, cb);
    }
    /**
     * 本地提权信息详情
     */
    async DescribePrivilegeEventInfo(req, cb) {
        return this.request("DescribePrivilegeEventInfo", req, cb);
    }
    /**
     * 打开入侵检测-恶意文件检测,弹出风险预警内容
     */
    async DescribeMalwareRiskWarning(req, cb) {
        return this.request("DescribeMalwareRiskWarning", req, cb);
    }
    /**
     * 查询基线默认策略列表信息
     */
    async DescribeBaselineDefaultStrategyList(req, cb) {
        return this.request("DescribeBaselineDefaultStrategyList", req, cb);
    }
    /**
     * 提交漏洞修护
     */
    async CreateVulFix(req, cb) {
        return this.request("CreateVulFix", req, cb);
    }
    /**
     * 获取指定标签关联的服务器信息
     */
    async DescribeTagMachines(req, cb) {
        return this.request("DescribeTagMachines", req, cb);
    }
    /**
     * 新增或修改本地提权规则（支持多服务器选择）
     */
    async EditPrivilegeRules(req, cb) {
        return this.request("EditPrivilegeRules", req, cb);
    }
    /**
     * 获取异常进程列表
     */
    async DescribeRiskProcessEvents(req, cb) {
        return this.request("DescribeRiskProcessEvents", req, cb);
    }
    /**
     * 专家服务-可用订单详情
     */
    async DescribeAvailableExpertServiceDetail(req, cb) {
        return this.request("DescribeAvailableExpertServiceDetail", req, cb);
    }
    /**
     * 根据事件表名和id查询告警事件详情
     */
    async DescribeEventByTable(req, cb) {
        return this.request("DescribeEventByTable", req, cb);
    }
    /**
     * 对授权管理-订单列表内已过期的订单进行删除.(删除后的订单不在统计范畴内)
     */
    async DeleteLicenseRecord(req, cb) {
        return this.request("DeleteLicenseRecord", req, cb);
    }
    /**
     * 本接口 (DescribeSecurityDynamics) 用于获取安全事件动态消息数据。
     */
    async DescribeSecurityDynamics(req, cb) {
        return this.request("DescribeSecurityDynamics", req, cb);
    }
    /**
     * 获取安全事件统计
     */
    async DescribeSecurityEventStat(req, cb) {
        return this.request("DescribeSecurityEventStat", req, cb);
    }
    /**
     * 获取所有数据库数量
     */
    async DescribeAssetDatabaseCount(req, cb) {
        return this.request("DescribeAssetDatabaseCount", req, cb);
    }
    /**
     * 获取异地登录白名单列表
     */
    async DescribeLoginWhiteList(req, cb) {
        return this.request("DescribeLoginWhiteList", req, cb);
    }
    /**
     * 获取日志直方图信息
     */
    async DescribeLogHistogram(req, cb) {
        return this.request("DescribeLogHistogram", req, cb);
    }
    /**
     * 查询主机相关核心文件监控规则列表
     */
    async DescribeMachineFileTamperRules(req, cb) {
        return this.request("DescribeMachineFileTamperRules", req, cb);
    }
    /**
     * 编辑《主机安全-按量计费》授权订单
     */
    async ModifyLicenseOrder(req, cb) {
        return this.request("ModifyLicenseOrder", req, cb);
    }
    /**
     * 获取公网接入代理安装命令
     */
    async DescribePublicProxyInstallCommand(req, cb) {
        return this.request("DescribePublicProxyInstallCommand", req, cb);
    }
    /**
     * 漏洞数量等级分布统计
     */
    async DescribeVulLevelCount(req, cb) {
        return this.request("DescribeVulLevelCount", req, cb);
    }
    /**
     * 导出账号列表
     */
    async ExportAssetUserList(req, cb) {
        return this.request("ExportAssetUserList", req, cb);
    }
    /**
     * 用于网页防篡改获取区域主机列表。
     */
    async DescribeMachineList(req, cb) {
        return this.request("DescribeMachineList", req, cb);
    }
    /**
     * 获取登录审计列表
     */
    async DescribeHostLoginList(req, cb) {
        return this.request("DescribeHostLoginList", req, cb);
    }
    /**
     * 根据基线策略id更新策略信息
     */
    async UpdateBaselineStrategy(req, cb) {
        return this.request("UpdateBaselineStrategy", req, cb);
    }
    /**
     * 取消漏洞忽略
     */
    async CancelIgnoreVul(req, cb) {
        return this.request("CancelIgnoreVul", req, cb);
    }
    /**
     * 入侵检测获取木马列表
     */
    async DescribeMalWareList(req, cb) {
        return this.request("DescribeMalWareList", req, cb);
    }
    /**
     * 本接口 (DescribeOpenPortStatistics) 用于获取端口统计列表。
     */
    async DescribeOpenPortStatistics(req, cb) {
        return this.request("DescribeOpenPortStatistics", req, cb);
    }
    /**
     * 接口已无效

获取安全防护状态汇总
     */
    async DescribeSecurityProtectionStat(req, cb) {
        return this.request("DescribeSecurityProtectionStat", req, cb);
    }
    /**
     * 修改爆破阻断模式
     */
    async ModifyBanMode(req, cb) {
        return this.request("ModifyBanMode", req, cb);
    }
    /**
     * 获取专线agent安装命令，包含token
     */
    async DescribeDirectConnectInstallCommand(req, cb) {
        return this.request("DescribeDirectConnectInstallCommand", req, cb);
    }
    /**
     * 获取企微机器人规则列表
     */
    async DescribeWebHookRules(req, cb) {
        return this.request("DescribeWebHookRules", req, cb);
    }
    /**
     * 获取基线策略列表
     */
    async DescribeBaselinePolicyList(req, cb) {
        return this.request("DescribeBaselinePolicyList", req, cb);
    }
    /**
     * 获取所有Web应用数量
     */
    async DescribeAssetWebAppCount(req, cb) {
        return this.request("DescribeAssetWebAppCount", req, cb);
    }
    /**
     * 修改指定日志类别投递配置、开关
     */
    async ModifyLogKafkaDeliverType(req, cb) {
        return this.request("ModifyLogKafkaDeliverType", req, cb);
    }
    /**
     * 查询高危命令事件详情
     */
    async DescribeBashEventsInfo(req, cb) {
        return this.request("DescribeBashEventsInfo", req, cb);
    }
    /**
     * 查询告警点id列表
     */
    async DescribeAlarmVertexId(req, cb) {
        return this.request("DescribeAlarmVertexId", req, cb);
    }
    /**
     * CveId查询漏洞详情
     */
    async DescribeVulCveIdInfo(req, cb) {
        return this.request("DescribeVulCveIdInfo", req, cb);
    }
    /**
     * 导出主机快照备份列表
     */
    async ExportRansomDefenseBackupList(req, cb) {
        return this.request("ExportRansomDefenseBackupList", req, cb);
    }
    /**
     * 网络攻击数据统计
     */
    async DescribeAttackStatistics(req, cb) {
        return this.request("DescribeAttackStatistics", req, cb);
    }
    /**
     * 获取主机账号Key列表
     */
    async DescribeAssetUserKeyList(req, cb) {
        return this.request("DescribeAssetUserKeyList", req, cb);
    }
    /**
     * 查询木马扫描进度
     */
    async DescribeScanMalwareSchedule(req, cb) {
        return this.request("DescribeScanMalwareSchedule", req, cb);
    }
    /**
     * 编辑木马白名单
     */
    async ModifyMalwareWhiteList(req, cb) {
        return this.request("ModifyMalwareWhiteList", req, cb);
    }
    /**
     * 获取企微机器人规则详情
     */
    async DescribeWebHookRule(req, cb) {
        return this.request("DescribeWebHookRule", req, cb);
    }
    /**
     * 修复失败时单独对某一个主机修复漏洞
     */
    async RetryVulFix(req, cb) {
        return this.request("RetryVulFix", req, cb);
    }
    /**
     * 删除高危命令规则
     */
    async DeleteBashRules(req, cb) {
        return this.request("DeleteBashRules", req, cb);
    }
    /**
     * 添加漏洞防御白名单
     */
    async ModifyRaspRules(req, cb) {
        return this.request("ModifyRaspRules", req, cb);
    }
    /**
     * 快照创建失败时可以重试创建快照并且自动进行漏洞修复
     */
    async RetryCreateSnapshot(req, cb) {
        return this.request("RetryCreateSnapshot", req, cb);
    }
    /**
     * 获取主机最近趋势情况
     */
    async DescribeAssetRecentMachineInfo(req, cb) {
        return this.request("DescribeAssetRecentMachineInfo", req, cb);
    }
    /**
     * 漏洞影响组件列表
     */
    async DescribeVulEffectModules(req, cb) {
        return this.request("DescribeVulEffectModules", req, cb);
    }
    /**
     * 漏洞top统计
     */
    async DescribeVulTop(req, cb) {
        return this.request("DescribeVulTop", req, cb);
    }
    /**
     * 获取爆破破解规则
     */
    async DescribeBruteAttackRules(req, cb) {
        return this.request("DescribeBruteAttackRules", req, cb);
    }
    /**
     * 查询资产管理环境变量列表
     */
    async DescribeAssetEnvList(req, cb) {
        return this.request("DescribeAssetEnvList", req, cb);
    }
    /**
     * 获取安全概览相关事件统计数据接口
     */
    async DescribeSecurityEventsCnt(req, cb) {
        return this.request("DescribeSecurityEventsCnt", req, cb);
    }
    /**
     * 删除木马白名单
     */
    async DeleteMalwareWhiteList(req, cb) {
        return this.request("DeleteMalwareWhiteList", req, cb);
    }
    /**
     * 同步基线检测进度概要
     */
    async SyncBaselineDetectSummary(req, cb) {
        return this.request("SyncBaselineDetectSummary", req, cb);
    }
    /**
     * 查询授权绑定任务的进度
     */
    async DescribeLicenseBindSchedule(req, cb) {
        return this.request("DescribeLicenseBindSchedule", req, cb);
    }
    /**
     * 编辑网络攻击白名单
     */
    async ModifyNetAttackWhiteList(req, cb) {
        return this.request("ModifyNetAttackWhiteList", req, cb);
    }
    /**
     * 网站防篡改-查询动态防护信息
     */
    async DescribeWebPageProtectStat(req, cb) {
        return this.request("DescribeWebPageProtectStat", req, cb);
    }
    /**
     * 本接口 (DescribeHistoryAccounts) 用于获取帐号变更历史列表数据。
     */
    async DescribeHistoryAccounts(req, cb) {
        return this.request("DescribeHistoryAccounts", req, cb);
    }
    /**
     * 添加网站防护服务器
     */
    async CreateProtectServer(req, cb) {
        return this.request("CreateProtectServer", req, cb);
    }
    /**
     * 查询基线列表信息
     */
    async DescribeBaselineList(req, cb) {
        return this.request("DescribeBaselineList", req, cb);
    }
    /**
     * 获取资产管理主机资源详细信息
     */
    async DescribeAssetMachineDetail(req, cb) {
        return this.request("DescribeAssetMachineDetail", req, cb);
    }
    /**
     * 获取服务器风险top列表
     */
    async DescribeVulHostTop(req, cb) {
        return this.request("DescribeVulHostTop", req, cb);
    }
    /**
     * 对订单属性编辑
     */
    async ModifyOrderAttribute(req, cb) {
        return this.request("ModifyOrderAttribute", req, cb);
    }
    /**
     * 获取用户当前灰度配置
     */
    async DescribeABTestConfig(req, cb) {
        return this.request("DescribeABTestConfig", req, cb);
    }
    /**
     * 获取资产管理Web框架列表
     */
    async DescribeAssetWebFrameList(req, cb) {
        return this.request("DescribeAssetWebFrameList", req, cb);
    }
    /**
     * 查询资产管理内核模块列表
     */
    async DescribeAssetCoreModuleList(req, cb) {
        return this.request("DescribeAssetCoreModuleList", req, cb);
    }
    /**
     * 定时扫描设置
     */
    async ModifyMalwareTimingScanSettings(req, cb) {
        return this.request("ModifyMalwareTimingScanSettings", req, cb);
    }
    /**
     * 添加恶意请求白名单
     */
    async CreateMaliciousRequestWhiteList(req, cb) {
        return this.request("CreateMaliciousRequestWhiteList", req, cb);
    }
    /**
     * 获取所有Web服务数量
     */
    async DescribeAssetWebServiceCount(req, cb) {
        return this.request("DescribeAssetWebServiceCount", req, cb);
    }
    /**
     * 更改或新增弱口令
     */
    async ModifyBaselineWeakPassword(req, cb) {
        return this.request("ModifyBaselineWeakPassword", req, cb);
    }
    /**
     * 大屏可视化防趋势接口
     */
    async DescribeScreenDefenseTrends(req, cb) {
        return this.request("DescribeScreenDefenseTrends", req, cb);
    }
    /**
     * 设置高危命令事件状态
     */
    async SetBashEventsStatus(req, cb) {
        return this.request("SetBashEventsStatus", req, cb);
    }
    /**
     * 根据策略id修改策略可用状态
     */
    async ChangeStrategyEnableStatus(req, cb) {
        return this.request("ChangeStrategyEnableStatus", req, cb);
    }
    /**
     * 网页防篡改防护目录列表
     */
    async DescribeProtectDirList(req, cb) {
        return this.request("DescribeProtectDirList", req, cb);
    }
    /**
     * 专家服务-专家服务订单列表
     */
    async DescribeExpertServiceOrderList(req, cb) {
        return this.request("DescribeExpertServiceOrderList", req, cb);
    }
    /**
     * 检查日志投递kafka连通性
     */
    async CheckLogKafkaConnectionState(req, cb) {
        return this.request("CheckLogKafkaConnectionState", req, cb);
    }
    /**
     * 获取各主机漏洞防御插件状态
     */
    async DescribeVulDefencePluginStatus(req, cb) {
        return this.request("DescribeVulDefencePluginStatus", req, cb);
    }
    /**
     * 获取所有主机标签
     */
    async DescribeTags(req, cb) {
        return this.request("DescribeTags", req, cb);
    }
    /**
     * 获取单台主机漏洞防御插件信息
     */
    async DescribeVulDefencePluginDetail(req, cb) {
        return this.request("DescribeVulDefencePluginDetail", req, cb);
    }
    /**
     * 更改基线检测规则
     */
    async ModifyBaselineRule(req, cb) {
        return this.request("ModifyBaselineRule", req, cb);
    }
    /**
     * 网站防篡改防护设置开关
     */
    async ModifyWebPageProtectSwitch(req, cb) {
        return this.request("ModifyWebPageProtectSwitch", req, cb);
    }
    /**
     * 修改漏洞防御事件状态（修复漏洞通过其他接口实现）
     */
    async ModifyVulDefenceEventStatus(req, cb) {
        return this.request("ModifyVulDefenceEventStatus", req, cb);
    }
    /**
     * 获取本地存储数据
     */
    async GetLocalStorageItem(req, cb) {
        return this.request("GetLocalStorageItem", req, cb);
    }
    /**
     * 导出备份详情列表
     */
    async ExportRansomDefenseMachineList(req, cb) {
        return this.request("ExportRansomDefenseMachineList", req, cb);
    }
    /**
     * 查询防勒索事件列表
     */
    async DescribeRansomDefenseEventsList(req, cb) {
        return this.request("DescribeRansomDefenseEventsList", req, cb);
    }
    /**
     * 导出资产管理进程列表
     */
    async ExportAssetProcessInfoList(req, cb) {
        return this.request("ExportAssetProcessInfoList", req, cb);
    }
    /**
     * 获取主机绑定策略列表
     */
    async DescribeRansomDefenseMachineStrategyInfo(req, cb) {
        return this.request("DescribeRansomDefenseMachineStrategyInfo", req, cb);
    }
    /**
     * 获取高危命令列表
     */
    async DescribeBashEvents(req, cb) {
        return this.request("DescribeBashEvents", req, cb);
    }
    /**
     * 导出漏洞检测报告。
     */
    async ExportVulDetectionReport(req, cb) {
        return this.request("ExportVulDetectionReport", req, cb);
    }
    /**
     * 修改告警机器范围配置
     */
    async ModifyWarningHostConfig(req, cb) {
        return this.request("ModifyWarningHostConfig", req, cb);
    }
    /**
     * 获取用户所有授权订单信息
     */
    async DescribeLicenseList(req, cb) {
        return this.request("DescribeLicenseList", req, cb);
    }
    /**
     * 检测基线
     */
    async StartBaselineDetect(req, cb) {
        return this.request("StartBaselineDetect", req, cb);
    }
    /**
     * 删除标签
     */
    async DeleteTags(req, cb) {
        return this.request("DeleteTags", req, cb);
    }
    /**
     * 本接口(TrustMalwares)将被识别木马文件设为信任。
     */
    async TrustMalwares(req, cb) {
        return this.request("TrustMalwares", req, cb);
    }
    /**
     * 删除基线规则
     */
    async DeleteBaselineRule(req, cb) {
        return this.request("DeleteBaselineRule", req, cb);
    }
    /**
     * 查询指定告警接收人的关联策略使用信息
     */
    async DescribeWebHookReceiverUsage(req, cb) {
        return this.request("DescribeWebHookReceiverUsage", req, cb);
    }
    /**
     * 更新恶意请求白名单
     */
    async ModifyMaliciousRequestWhiteList(req, cb) {
        return this.request("ModifyMaliciousRequestWhiteList", req, cb);
    }
    /**
     * 删除基线忽略规则
     */
    async DeleteBaselineRuleIgnore(req, cb) {
        return this.request("DeleteBaselineRuleIgnore", req, cb);
    }
    /**
     * 根据检测项id或事件id批量忽略事件或取消忽略
     */
    async ChangeRuleEventsIgnoreStatus(req, cb) {
        return this.request("ChangeRuleEventsIgnoreStatus", req, cb);
    }
    /**
     * 防勒索快照回滚
     */
    async RansomDefenseRollback(req, cb) {
        return this.request("RansomDefenseRollback", req, cb);
    }
    /**
     * 获取资产管理系统安装包列表
     */
    async DescribeAssetSystemPackageList(req, cb) {
        return this.request("DescribeAssetSystemPackageList", req, cb);
    }
    /**
     * 安全播报列表页
     */
    async DescribeSecurityBroadcasts(req, cb) {
        return this.request("DescribeSecurityBroadcasts", req, cb);
    }
    /**
     * 获取资产指纹类型列表
     */
    async DescribeAssetTypes(req, cb) {
        return this.request("DescribeAssetTypes", req, cb);
    }
    /**
     * 获取用户漏洞所有标签列表
     */
    async DescribeVulLabels(req, cb) {
        return this.request("DescribeVulLabels", req, cb);
    }
    /**
     * 停止基线检测
     */
    async StopBaselineDetect(req, cb) {
        return this.request("StopBaselineDetect", req, cb);
    }
    /**
     * 获取高危命令规则列表
     */
    async DescribeBashRules(req, cb) {
        return this.request("DescribeBashRules", req, cb);
    }
    /**
     * 获取主机磁盘分区列表
     */
    async DescribeAssetDiskList(req, cb) {
        return this.request("DescribeAssetDiskList", req, cb);
    }
    /**
     * 修改漏洞防御插件设置
1）新增主机自动加入，scope为1，quuids为空
2）全量旗舰版不自动加入，scope为0，quuids为当前quuid列表，
3）给定quuid列表，scope为0，quuids为用户选择quuid
     */
    async ModifyVulDefenceSetting(req, cb) {
        return this.request("ModifyVulDefenceSetting", req, cb);
    }
    /**
     * 导出漏洞防御事件
     */
    async ExportVulDefenceEvent(req, cb) {
        return this.request("ExportVulDefenceEvent", req, cb);
    }
    /**
     * 同步资产扫描信息
     */
    async SyncAssetScan(req, cb) {
        return this.request("SyncAssetScan", req, cb);
    }
    /**
     * DescribeScanState 该接口能查询对应模块正在进行的扫描任务状态
     */
    async DescribeScanState(req, cb) {
        return this.request("DescribeScanState", req, cb);
    }
    /**
     * DeleteScanTask 该接口可以对指定类型的扫描任务进行停止扫描;
     */
    async DeleteScanTask(req, cb) {
        return this.request("DeleteScanTask", req, cb);
    }
    /**
     * 用于创建/修改用户自定义配置
     */
    async ModifyUsersConfig(req, cb) {
        return this.request("ModifyUsersConfig", req, cb);
    }
    /**
     * 新增或修改告警策略
     */
    async ModifyWebHookPolicy(req, cb) {
        return this.request("ModifyWebHookPolicy", req, cb);
    }
    /**
     * 删除全部java内存马事件
     */
    async DeleteAllJavaMemShells(req, cb) {
        return this.request("DeleteAllJavaMemShells", req, cb);
    }
    /**
     * 获取基线项检测结果列表
     */
    async DescribeBaselineItemList(req, cb) {
        return this.request("DescribeBaselineItemList", req, cb);
    }
    /**
     * 获取高危命令策略列表
     */
    async DescribeBashPolicies(req, cb) {
        return this.request("DescribeBashPolicies", req, cb);
    }
    /**
     * 查询防勒索策略绑定机器列表
     */
    async DescribeRansomDefenseStrategyMachines(req, cb) {
        return this.request("DescribeRansomDefenseStrategyMachines", req, cb);
    }
    /**
     * 查询日志检索服务信息
     */
    async DescribeHistoryService(req, cb) {
        return this.request("DescribeHistoryService", req, cb);
    }
    /**
     * 漏洞管理模块，获取近日指定类型的漏洞数量和主机数量
     */
    async DescribeVulCountByDates(req, cb) {
        return this.request("DescribeVulCountByDates", req, cb);
    }
    /**
     * 导出漏洞影响主机列表
     */
    async ExportVulEffectHostList(req, cb) {
        return this.request("ExportVulEffectHostList", req, cb);
    }
    /**
     * 获取漏洞库列表
     */
    async DescribeVulStoreList(req, cb) {
        return this.request("DescribeVulStoreList", req, cb);
    }
    /**
     * 获取告警点所在事件的所有节点信息
     */
    async DescribeAlarmIncidentNodes(req, cb) {
        return this.request("DescribeAlarmIncidentNodes", req, cb);
    }
    /**
     * 大屏可视化获取安全概览相关事件统计数据接口
     */
    async DescribeScreenEventsCnt(req, cb) {
        return this.request("DescribeScreenEventsCnt", req, cb);
    }
    /**
     * 获取所有资源数量：主机、账号、端口、进程、软件、数据库、Web应用、Web框架、Web服务、Web站点
     */
    async DescribeAssetTotalCount(req, cb) {
        return this.request("DescribeAssetTotalCount", req, cb);
    }
    /**
     * 获取全网热点漏洞
     */
    async DescribeHotVulTop(req, cb) {
        return this.request("DescribeHotVulTop", req, cb);
    }
    /**
     * 删除基线弱口令
     */
    async DeleteBaselineWeakPassword(req, cb) {
        return this.request("DeleteBaselineWeakPassword", req, cb);
    }
    /**
     * 本接口 (DeleteNonlocalLoginPlaces) 用于删除异地登录记录。
     */
    async DeleteNonlocalLoginPlaces(req, cb) {
        return this.request("DeleteNonlocalLoginPlaces", req, cb);
    }
    /**
     * 导出资产管理系统安装包列表
     */
    async ExportAssetSystemPackageList(req, cb) {
        return this.request("ExportAssetSystemPackageList", req, cb);
    }
    /**
     * 编辑反弹Shell规则（支持多服务器选择）
     */
    async EditReverseShellRules(req, cb) {
        return this.request("EditReverseShellRules", req, cb);
    }
    /**
     * 删除告警策略
     */
    async DeleteWebHookPolicy(req, cb) {
        return this.request("DeleteWebHookPolicy", req, cb);
    }
    /**
     * 导出本地提权事件
     */
    async ExportPrivilegeEvents(req, cb) {
        return this.request("ExportPrivilegeEvents", req, cb);
    }
    /**
     * 入侵检测所有事件的状态，包括：文件查杀，异常登录，密码破解，高危命令，反弹shell，本地提取
     */
    async ModifyRiskEventsStatus(req, cb) {
        return this.request("ModifyRiskEventsStatus", req, cb);
    }
    /**
     * 获取主机账号详情
     */
    async DescribeAssetUserInfo(req, cb) {
        return this.request("DescribeAssetUserInfo", req, cb);
    }
    /**
     * 删除漏洞防御白名单
     */
    async DeleteRaspRules(req, cb) {
        return this.request("DeleteRaspRules", req, cb);
    }
    /**
     * 本接口 (DeleteMalwares) 用于删除木马记录。
     */
    async DeleteMalwares(req, cb) {
        return this.request("DeleteMalwares", req, cb);
    }
    /**
     * 导出漏洞防御插件事件
     */
    async ExportVulDefencePluginEvent(req, cb) {
        return this.request("ExportVulDefencePluginEvent", req, cb);
    }
    /**
     * 定期扫描漏洞设置
     */
    async ScanVulSetting(req, cb) {
        return this.request("ScanVulSetting", req, cb);
    }
    /**
     * 本接口 (DescribeAccountStatistics) 用于获取帐号统计列表数据。
     */
    async DescribeAccountStatistics(req, cb) {
        return this.request("DescribeAccountStatistics", req, cb);
    }
    /**
     * 导出异常进程事件
     */
    async ExportRiskProcessEvents(req, cb) {
        return this.request("ExportRiskProcessEvents", req, cb);
    }
    /**
     * 获取漏洞管理模块指定类型的待处理漏洞数、主机数和非专业版主机数量
     */
    async DescribeUndoVulCounts(req, cb) {
        return this.request("DescribeUndoVulCounts", req, cb);
    }
    /**
     * 获取木马不可隔离的主机
     */
    async DescribeCanNotSeparateMachine(req, cb) {
        return this.request("DescribeCanNotSeparateMachine", req, cb);
    }
    /**
     * 本接口 (ExportBruteAttacks) 用于导出密码破解记录成CSV文件。
     */
    async ExportBruteAttacks(req, cb) {
        return this.request("ExportBruteAttacks", req, cb);
    }
    /**
     * 导出资产管理环境变量列表
     */
    async ExportAssetEnvList(req, cb) {
        return this.request("ExportAssetEnvList", req, cb);
    }
    /**
     * 创建/修改网站防护目录
     */
    async ModifyWebPageProtectDir(req, cb) {
        return this.request("ModifyWebPageProtectDir", req, cb);
    }
    /**
     * 导出风险趋势
     */
    async ExportSecurityTrends(req, cb) {
        return this.request("ExportSecurityTrends", req, cb);
    }
    /**
     * 本接口 (ExportMalwares) 用于导出木马记录CSV文件。
     */
    async ExportMalwares(req, cb) {
        return this.request("ExportMalwares", req, cb);
    }
    /**
     * 核心文件规则状态更新，支持批量删除 关闭
     */
    async ModifyFileTamperRuleStatus(req, cb) {
        return this.request("ModifyFileTamperRuleStatus", req, cb);
    }
    /**
     * 修改阻断白名单列表
     */
    async ModifyBanWhiteList(req, cb) {
        return this.request("ModifyBanWhiteList", req, cb);
    }
    /**
     * 导出篡改事件列表
     */
    async ExportWebPageEventList(req, cb) {
        return this.request("ExportWebPageEventList", req, cb);
    }
    /**
     * 获取基线服务器风险TOP5
     */
    async DescribeBaselineHostRiskTop(req, cb) {
        return this.request("DescribeBaselineHostRiskTop", req, cb);
    }
    /**
     * 导出恶意请求事件列表
     */
    async ExportRiskDnsEventList(req, cb) {
        return this.request("ExportRiskDnsEventList", req, cb);
    }
    /**
     * 导出授权列表对应的绑定信息
     */
    async ExportLicenseDetail(req, cb) {
        return this.request("ExportLicenseDetail", req, cb);
    }
    /**
     * 专家服务-应急响应列表
     */
    async DescribeEmergencyResponseList(req, cb) {
        return this.request("DescribeEmergencyResponseList", req, cb);
    }
    /**
     * 网络攻击趋势数据
     */
    async DescribeAttackTrends(req, cb) {
        return this.request("DescribeAttackTrends", req, cb);
    }
    /**
     * 创建或修改防勒索策略
     */
    async CreateRansomDefenseStrategy(req, cb) {
        return this.request("CreateRansomDefenseStrategy", req, cb);
    }
    /**
     * 大屏可视化紧急通知
     */
    async DescribeScreenEmergentMsg(req, cb) {
        return this.request("DescribeScreenEmergentMsg", req, cb);
    }
    /**
     * 不再提醒爆破阻断提示弹窗
     */
    async StopNoticeBanTips(req, cb) {
        return this.request("StopNoticeBanTips", req, cb);
    }
    /**
     * 根据基线id查询下属检测项信息
     */
    async DescribeBaselineRule(req, cb) {
        return this.request("DescribeBaselineRule", req, cb);
    }
    /**
     * 导出基线影响主机列表
     */
    async ExportBaselineEffectHostList(req, cb) {
        return this.request("ExportBaselineEffectHostList", req, cb);
    }
    /**
     * 核心文件监控事件列表
     */
    async DescribeFileTamperEvents(req, cb) {
        return this.request("DescribeFileTamperEvents", req, cb);
    }
    /**
     * 设置中心-授权管理 对某个授权批量绑定机器
     */
    async ModifyLicenseBinds(req, cb) {
        return this.request("ModifyLicenseBinds", req, cb);
    }
    /**
     * 获取阻断按钮状态
     */
    async DescribeBanStatus(req, cb) {
        return this.request("DescribeBanStatus", req, cb);
    }
    /**
     * 查询漏洞防御列表
     */
    async DescribeVulDefenceList(req, cb) {
        return this.request("DescribeVulDefenceList", req, cb);
    }
    /**
     * 本接口 (DescribeProcessStatistics) 用于获取进程统计列表数据。
     */
    async DescribeProcessStatistics(req, cb) {
        return this.request("DescribeProcessStatistics", req, cb);
    }
    /**
     * 查看恶意文件详情
     */
    async DescribeMalwareInfo(req, cb) {
        return this.request("DescribeMalwareInfo", req, cb);
    }
    /**
     * 获取用户防勒索趋势
     */
    async DescribeRansomDefenseState(req, cb) {
        return this.request("DescribeRansomDefenseState", req, cb);
    }
    /**
     * 导出恶意请求策略列表
     */
    async ExportRiskDnsPolicyList(req, cb) {
        return this.request("ExportRiskDnsPolicyList", req, cb);
    }
    /**
     * 根据策略名查询策略是否存在
     */
    async DescribeStrategyExist(req, cb) {
        return this.request("DescribeStrategyExist", req, cb);
    }
    /**
     * 新购授权自动绑定任务
     */
    async CreateBuyBindTask(req, cb) {
        return this.request("CreateBuyBindTask", req, cb);
    }
    /**
     * 查询日志
     */
    async SearchLog(req, cb) {
        return this.request("SearchLog", req, cb);
    }
    /**
     * 查询主机关联文件监控规则数量
     */
    async DescribeFileTamperRuleCount(req, cb) {
        return this.request("DescribeFileTamperRuleCount", req, cb);
    }
    /**
     * 查询java内存马插件列表
     */
    async DescribeJavaMemShellPluginList(req, cb) {
        return this.request("DescribeJavaMemShellPluginList", req, cb);
    }
    /**
     * 创建应急漏洞扫描任务
     */
    async CreateEmergencyVulScan(req, cb) {
        return this.request("CreateEmergencyVulScan", req, cb);
    }
    /**
     * 产品试用状态查询接口
     */
    async DescribeProductStatus(req, cb) {
        return this.request("DescribeProductStatus", req, cb);
    }
    /**
     * 反弹shell信息详情
     */
    async DescribeReverseShellEventInfo(req, cb) {
        return this.request("DescribeReverseShellEventInfo", req, cb);
    }
    /**
     * 获取阻断白名单列表
     */
    async DescribeBanWhiteList(req, cb) {
        return this.request("DescribeBanWhiteList", req, cb);
    }
    /**
     * 漏洞一键检测
     */
    async ScanVul(req, cb) {
        return this.request("ScanVul", req, cb);
    }
    /**
     * 获取网络攻击威胁类型列表
     */
    async DescribeAttackVulTypeList(req, cb) {
        return this.request("DescribeAttackVulTypeList", req, cb);
    }
    /**
     * 查看漏洞防御最大cpu限制
     */
    async DescribeRaspMaxCpu(req, cb) {
        return this.request("DescribeRaspMaxCpu", req, cb);
    }
    /**
     * 根据基线id查询基线详情接口
     */
    async DescribeBaselineDetail(req, cb) {
        return this.request("DescribeBaselineDetail", req, cb);
    }
    /**
     * 获取所有端口数量
     */
    async DescribeAssetPortCount(req, cb) {
        return this.request("DescribeAssetPortCount", req, cb);
    }
    /**
     * 入侵检测，获取恶意请求列表
     */
    async DescribeRiskDnsList(req, cb) {
        return this.request("DescribeRiskDnsList", req, cb);
    }
    /**
     * 获取病毒库及POC的更新信息
     */
    async DescribeVdbAndPocInfo(req, cb) {
        return this.request("DescribeVdbAndPocInfo", req, cb);
    }
    /**
     * 修改暴力破解规则
     */
    async ModifyBruteAttackRules(req, cb) {
        return this.request("ModifyBruteAttackRules", req, cb);
    }
    /**
     * 查询可筛选操作系统列表.
     */
    async DescribeMachineOsList(req, cb) {
        return this.request("DescribeMachineOsList", req, cb);
    }
    /**
     * 获取漏洞紧急通知
     */
    async DescribeVulEmergentMsg(req, cb) {
        return this.request("DescribeVulEmergentMsg", req, cb);
    }
    /**
     * 授权管理-授权概览信息
     */
    async DescribeLicenseGeneral(req, cb) {
        return this.request("DescribeLicenseGeneral", req, cb);
    }
    /**
     * 查询回滚任务列表
     */
    async DescribeRansomDefenseRollBackTaskList(req, cb) {
        return this.request("DescribeRansomDefenseRollBackTaskList", req, cb);
    }
    /**
     * 导出主机最近趋势情况（最长最近90天）
     */
    async ExportAssetRecentMachineInfo(req, cb) {
        return this.request("ExportAssetRecentMachineInfo", req, cb);
    }
    /**
     * 导出反弹Shell事件
     */
    async ExportReverseShellEvents(req, cb) {
        return this.request("ExportReverseShellEvents", req, cb);
    }
    /**
     * 创建网络攻击白名单
     */
    async CreateNetAttackWhiteList(req, cb) {
        return this.request("CreateNetAttackWhiteList", req, cb);
    }
    /**
     * 更改恶意请求策略
     */
    async ModifyRiskDnsPolicy(req, cb) {
        return this.request("ModifyRiskDnsPolicy", req, cb);
    }
    /**
     * 专家服务-安全管家列表
     */
    async DescribeExpertServiceList(req, cb) {
        return this.request("DescribeExpertServiceList", req, cb);
    }
    /**
     * 获取忽略规则项列表
     */
    async DescribeBaselineItemIgnoreList(req, cb) {
        return this.request("DescribeBaselineItemIgnoreList", req, cb);
    }
    /**
     * 导出防勒索策略列表
     */
    async ExportRansomDefenseStrategyList(req, cb) {
        return this.request("ExportRansomDefenseStrategyList", req, cb);
    }
    /**
     * 漏洞修护-查找主机漏洞修护进度
     */
    async DescribeVulFixStatus(req, cb) {
        return this.request("DescribeVulFixStatus", req, cb);
    }
    /**
     * 获取客户端异常事件
     */
    async DescribeClientException(req, cb) {
        return this.request("DescribeClientException", req, cb);
    }
    /**
     * 获取基线分类列表
     */
    async DescribeBaselineRuleCategoryList(req, cb) {
        return this.request("DescribeBaselineRuleCategoryList", req, cb);
    }
    /**
     * 本接口 (DescribeSecurityTrends) 用于获取安全事件统计数据。
     */
    async DescribeSecurityTrends(req, cb) {
        return this.request("DescribeSecurityTrends", req, cb);
    }
    /**
     * 根据基线策略id查询基线策略数据概览统计
     */
    async DescribeBaselineAnalysisData(req, cb) {
        return this.request("DescribeBaselineAnalysisData", req, cb);
    }
    /**
     * 查询备份详情列表
     */
    async DescribeRansomDefenseMachineList(req, cb) {
        return this.request("DescribeRansomDefenseMachineList", req, cb);
    }
    /**
     * 新增或修改高危命令规则
     */
    async EditBashRules(req, cb) {
        return this.request("EditBashRules", req, cb);
    }
    /**
     * 专家服务-安全管家月巡检报告下载
     */
    async DescribeMonthInspectionReport(req, cb) {
        return this.request("DescribeMonthInspectionReport", req, cb);
    }
    /**
     * 获取资产数量： 主机数、账号数、端口数、进程数、软件数、数据库数、Web应用数、Web框架数、Web服务数、Web站点数
     */
    async DescribeAssetInfo(req, cb) {
        return this.request("DescribeAssetInfo", req, cb);
    }
    /**
     * 获取木马白名单受影响列表
     */
    async DescribeMalwareWhiteListAffectList(req, cb) {
        return this.request("DescribeMalwareWhiteListAffectList", req, cb);
    }
    /**
     * 本接口 (IgnoreImpactedHosts) 用于忽略漏洞。
     */
    async IgnoreImpactedHosts(req, cb) {
        return this.request("IgnoreImpactedHosts", req, cb);
    }
    /**
     * 漏洞管理-导出漏洞列表
     */
    async ExportVulList(req, cb) {
        return this.request("ExportVulList", req, cb);
    }
    /**
     * 修改java内存马事件状态
     */
    async ModifyJavaMemShellsStatus(req, cb) {
        return this.request("ModifyJavaMemShellsStatus", req, cb);
    }
    /**
     * 导出资产管理计划任务列表
     */
    async ExportAssetPlanTaskList(req, cb) {
        return this.request("ExportAssetPlanTaskList", req, cb);
    }
    /**
     * 查询篡改事件列表
     */
    async DescribeWebPageEventList(req, cb) {
        return this.request("DescribeWebPageEventList", req, cb);
    }
    /**
     * 混合云安装agent token获取
     */
    async DescribeAgentInstallationToken(req, cb) {
        return this.request("DescribeAgentInstallationToken", req, cb);
    }
    /**
     * 获取主机标签Top5
     */
    async DescribeAssetMachineTagTop(req, cb) {
        return this.request("DescribeAssetMachineTagTop", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248884, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cws = void 0;
const v20180312_1 = require("./v20180312");
exports.cws = {
    v20180312: v20180312_1.v20180312,
};

}, function(modId) { var map = {"./v20180312":1738984248885}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248885, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180312 = void 0;
const Models = require("./cws_models");
const cws_client_1 = require("./cws_client");
exports.v20180312 = {
    Client: cws_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cws_models":1738984248886,"./cws_client":1738984248887}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248886, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248887, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cws client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cws.tencentcloudapi.com", "2018-03-12", clientConfig);
    }
    /**
     * 本接口 (CreateVulsReport) 用于生成漏洞报告并返回下载链接。
     */
    async CreateVulsReport(req, cb) {
        return this.request("CreateVulsReport", req, cb);
    }
    /**
     * 本接口 (DescribeVuls) 用于查询一个或多个漏洞的详细信息。
     */
    async DescribeVuls(req, cb) {
        return this.request("DescribeVuls", req, cb);
    }
    /**
     * 本接口 (ModifyMonitorAttribute) 用于修改监测任务的属性。
     */
    async ModifyMonitorAttribute(req, cb) {
        return this.request("ModifyMonitorAttribute", req, cb);
    }
    /**
     * 本接口（CreateSitesScans）用于新增一个或多个站点的单次扫描任务。
     */
    async CreateSitesScans(req, cb) {
        return this.request("CreateSitesScans", req, cb);
    }
    /**
     * 本接口（CreateSites）用于新增一个或多个站点。
     */
    async CreateSites(req, cb) {
        return this.request("CreateSites", req, cb);
    }
    /**
     * 本接口（CreateVulsMisinformation）可以用于新增一个或多个漏洞误报信息。
     */
    async CreateVulsMisinformation(req, cb) {
        return this.request("CreateVulsMisinformation", req, cb);
    }
    /**
     * 本接口 (DescribeConfig) 用于查询用户配置的详细信息。
     */
    async DescribeConfig(req, cb) {
        return this.request("DescribeConfig", req, cb);
    }
    /**
     * 本接口 (DescribeSites) 用于查询一个或多个站点的详细信息。
     */
    async DescribeSites(req, cb) {
        return this.request("DescribeSites", req, cb);
    }
    /**
     * 本接口 (DescribeSitesVerification) 用于查询一个或多个待验证站点的验证信息。
     */
    async DescribeSitesVerification(req, cb) {
        return this.request("DescribeSitesVerification", req, cb);
    }
    /**
     * 本接口 (ModifySiteAttribute) 用于修改站点的属性。
     */
    async ModifySiteAttribute(req, cb) {
        return this.request("ModifySiteAttribute", req, cb);
    }
    /**
     * 本接口 (ModifyConfigAttribute) 用于修改用户配置的属性。
     */
    async ModifyConfigAttribute(req, cb) {
        return this.request("ModifyConfigAttribute", req, cb);
    }
    /**
     * 本接口 (DescribeVulsNumberTimeline) 用于查询漏洞数随时间变化统计信息。
     */
    async DescribeVulsNumberTimeline(req, cb) {
        return this.request("DescribeVulsNumberTimeline", req, cb);
    }
    /**
     * 本接口 (VerifySites) 用于验证一个或多个待验证站点。
     */
    async VerifySites(req, cb) {
        return this.request("VerifySites", req, cb);
    }
    /**
     * 本接口 (DeleteMonitors) 用于删除用户监控任务。
     */
    async DeleteMonitors(req, cb) {
        return this.request("DeleteMonitors", req, cb);
    }
    /**
     * 本接口（CreateMonitors）用于新增一个或多个站点的监测任务。
     */
    async CreateMonitors(req, cb) {
        return this.request("CreateMonitors", req, cb);
    }
    /**
     * 本接口 (DeleteSites) 用于删除站点。
     */
    async DeleteSites(req, cb) {
        return this.request("DeleteSites", req, cb);
    }
    /**
     * 本接口 (DescribeVulsNumber) 用于查询用户网站的漏洞总计数量。
     */
    async DescribeVulsNumber(req, cb) {
        return this.request("DescribeVulsNumber", req, cb);
    }
    /**
     * 本接口 (DescribeMonitors) 用于查询一个或多个监控任务的详细信息。
     */
    async DescribeMonitors(req, cb) {
        return this.request("DescribeMonitors", req, cb);
    }
    /**
     * 本接口 (DescribeSiteQuota) 用于查询用户购买的扫描次数总数和已使用数。
     */
    async DescribeSiteQuota(req, cb) {
        return this.request("DescribeSiteQuota", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248888, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.cynosdb = void 0;
const v20190107_1 = require("./v20190107");
exports.cynosdb = {
    v20190107: v20190107_1.v20190107,
};

}, function(modId) { var map = {"./v20190107":1738984248889}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248889, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190107 = void 0;
const Models = require("./cynosdb_models");
const cynosdb_client_1 = require("./cynosdb_client");
exports.v20190107 = {
    Client: cynosdb_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./cynosdb_models":1738984248890,"./cynosdb_client":1738984248891}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248890, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248891, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * cynosdb client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("cynosdb.tencentcloudapi.com", "2019-01-07", clientConfig);
    }
    /**
     * 本接口（ResumeServerless）用于恢复 serverless 集群（启动暂停的集群）。
     */
    async ResumeServerless(req, cb) {
        return this.request("ResumeServerless", req, cb);
    }
    /**
     * 本接口（UpgradeProxyVersion）用于升级数据库代理版本。
     */
    async UpgradeProxyVersion(req, cb) {
        return this.request("UpgradeProxyVersion", req, cb);
    }
    /**
     * 本接口（DescribeBackupConfig）用于获取指定集群的备份配置信息，包括全量备份时间段、备份文件保留时间。
     */
    async DescribeBackupConfig(req, cb) {
        return this.request("DescribeBackupConfig", req, cb);
    }
    /**
     * 该接口（ModifyBinlogConfig）用于修改Binlog配置
     */
    async ModifyBinlogConfig(req, cb) {
        return this.request("ModifyBinlogConfig", req, cb);
    }
    /**
     * 本接口（CreateProxyEndPoint）用于创建数据库代理连接点。
     */
    async CreateProxyEndPoint(req, cb) {
        return this.request("CreateProxyEndPoint", req, cb);
    }
    /**
     * 本接口（ModifyResourcePackageClusters）用于修改资源包与集群之间的绑定关系。
     */
    async ModifyResourcePackageClusters(req, cb) {
        return this.request("ModifyResourcePackageClusters", req, cb);
    }
    /**
     * 本接口（CreateAuditRuleTemplate）用于创建审计规则模板。
     */
    async CreateAuditRuleTemplate(req, cb) {
        return this.request("CreateAuditRuleTemplate", req, cb);
    }
    /**
     * 本接口（GrantAccountPrivileges）用于批量授权账号权限。
     */
    async GrantAccountPrivileges(req, cb) {
        return this.request("GrantAccountPrivileges", req, cb);
    }
    /**
     * 本接口（DescribeClusterParamLogs）用于查询参数修改记录。
     */
    async DescribeClusterParamLogs(req, cb) {
        return this.request("DescribeClusterParamLogs", req, cb);
    }
    /**
     * 本接口（ModifyMaintainPeriodConfig）用于修改维护时间配置。
     */
    async ModifyMaintainPeriodConfig(req, cb) {
        return this.request("ModifyMaintainPeriodConfig", req, cb);
    }
    /**
     * 本接口（CopyClusterPasswordComplexity）用于复制集群密码复杂度。
     */
    async CopyClusterPasswordComplexity(req, cb) {
        return this.request("CopyClusterPasswordComplexity", req, cb);
    }
    /**
     * 本接口（CloseAuditService）用于关闭 TDSQL-C MySQL 实例的数据库审计服务。
     */
    async CloseAuditService(req, cb) {
        return this.request("CloseAuditService", req, cb);
    }
    /**
     * 本接口（DescribeSupportProxyVersion）用于查询支持的数据库代理版本。
     */
    async DescribeSupportProxyVersion(req, cb) {
        return this.request("DescribeSupportProxyVersion", req, cb);
    }
    /**
     * 本接口(CreateAuditLogFile)用于创建云数据库实例的审计日志文件。
     */
    async CreateAuditLogFile(req, cb) {
        return this.request("CreateAuditLogFile", req, cb);
    }
    /**
     * 续费集群
     */
    async RenewClusters(req, cb) {
        return this.request("RenewClusters", req, cb);
    }
    /**
     * 本接口（CloseProxyEndPoint）用于关闭数据库代理连接地址。
     */
    async CloseProxyEndPoint(req, cb) {
        return this.request("CloseProxyEndPoint", req, cb);
    }
    /**
     * 本接口（CloseProxy）用于关闭集群的数据库代理服务。
     */
    async CloseProxy(req, cb) {
        return this.request("CloseProxy", req, cb);
    }
    /**
     * 本接口（DescribeProxySpecs）用于查询数据库代理规格。
     */
    async DescribeProxySpecs(req, cb) {
        return this.request("DescribeProxySpecs", req, cb);
    }
    /**
     * 变配预付费集群询价
     */
    async InquirePriceModify(req, cb) {
        return this.request("InquirePriceModify", req, cb);
    }
    /**
     * 本接口（SwitchProxyVpc）用于更换数据库代理vpc。
     */
    async SwitchProxyVpc(req, cb) {
        return this.request("SwitchProxyVpc", req, cb);
    }
    /**
     * 该接口（DescribeClusterDetail）用于显示集群详情。
     */
    async DescribeClusterDetail(req, cb) {
        return this.request("DescribeClusterDetail", req, cb);
    }
    /**
     * 本接口（DescribeTasks）用于查询任务列表。
     */
    async DescribeTasks(req, cb) {
        return this.request("DescribeTasks", req, cb);
    }
    /**
     * 本接口（DescribeInstanceSpecs）用于查询购买页可购买的实例规格。
     */
    async DescribeInstanceSpecs(req, cb) {
        return this.request("DescribeInstanceSpecs", req, cb);
    }
    /**
     * 本接口（DescribeBinlogDownloadUrl）用于查询 Binlog 的下载地址。
     */
    async DescribeBinlogDownloadUrl(req, cb) {
        return this.request("DescribeBinlogDownloadUrl", req, cb);
    }
    /**
     * 本接口（DescribeResourcesByDealName）用于查询订单关联实例。
     */
    async DescribeResourcesByDealName(req, cb) {
        return this.request("DescribeResourcesByDealName", req, cb);
    }
    /**
     * 本接口（ModifyClusterStorage）用于调整包年包月存储容量。
     */
    async ModifyClusterStorage(req, cb) {
        return this.request("ModifyClusterStorage", req, cb);
    }
    /**
     * 本接口（ActivateInstance）用于恢复已隔离的实例访问。
     */
    async ActivateInstance(req, cb) {
        return this.request("ActivateInstance", req, cb);
    }
    /**
     * 本接口（DescribeProxyNodes）用于查询代理节点列表。
     */
    async DescribeProxyNodes(req, cb) {
        return this.request("DescribeProxyNodes", req, cb);
    }
    /**
     * 本接口（DisassociateSecurityGroups）用于安全组批量解绑云资源。
     */
    async DisassociateSecurityGroups(req, cb) {
        return this.request("DisassociateSecurityGroups", req, cb);
    }
    /**
     * 查询集群透明加密信息
     */
    async DescribeClusterTransparentEncryptInfo(req, cb) {
        return this.request("DescribeClusterTransparentEncryptInfo", req, cb);
    }
    /**
     * 本接口（ExportInstanceSlowQueries）用于导出实例慢日志。
     */
    async ExportInstanceSlowQueries(req, cb) {
        return this.request("ExportInstanceSlowQueries", req, cb);
    }
    /**
     * 本接口（DeleteCLSDelivery）用于删除日志投递。
     */
    async DeleteCLSDelivery(req, cb) {
        return this.request("DeleteCLSDelivery", req, cb);
    }
    /**
     * 本接口（DescribeChangedParamsAfterUpgrade）用于查询升降配运行参数对比。
     */
    async DescribeChangedParamsAfterUpgrade(req, cb) {
        return this.request("DescribeChangedParamsAfterUpgrade", req, cb);
    }
    /**
     * 本接口（DescribeAccountPrivileges）用于查询账号已有权限。
     */
    async DescribeAccountPrivileges(req, cb) {
        return this.request("DescribeAccountPrivileges", req, cb);
    }
    /**
     * 本接口（CloseClusterPasswordComplexity）用于关闭集群密码复杂度。
     */
    async CloseClusterPasswordComplexity(req, cb) {
        return this.request("CloseClusterPasswordComplexity", req, cb);
    }
    /**
     * 本接口（RollBackCluster）用于集群回档。
     */
    async RollBackCluster(req, cb) {
        return this.request("RollBackCluster", req, cb);
    }
    /**
     * 此接口（DescribeBinlogSaveDays）用于查询集群的Binlog保留天数。
     */
    async DescribeBinlogSaveDays(req, cb) {
        return this.request("DescribeBinlogSaveDays", req, cb);
    }
    /**
     * 本接口（SearchClusterTables）用于搜索集群数据表列表。
     */
    async SearchClusterTables(req, cb) {
        return this.request("SearchClusterTables", req, cb);
    }
    /**
     * 本接口（DescribeClusterInstanceGrps）用于查询实例组信息。 该接口已废弃，推荐使用DescribeClusterInstanceGroups
     */
    async DescribeClusterInstanceGrps(req, cb) {
        return this.request("DescribeClusterInstanceGrps", req, cb);
    }
    /**
     * 本接口（DescribeIsolatedInstances）用于查询回收站实例列表。
     */
    async DescribeIsolatedInstances(req, cb) {
        return this.request("DescribeIsolatedInstances", req, cb);
    }
    /**
     * 本接口（DescribeInstanceErrorLogs）用于查询实例错误日志列表。
     */
    async DescribeInstanceErrorLogs(req, cb) {
        return this.request("DescribeInstanceErrorLogs", req, cb);
    }
    /**
     * 本接口（ModifyClusterName）用于修改集群名称。
     */
    async ModifyClusterName(req, cb) {
        return this.request("ModifyClusterName", req, cb);
    }
    /**
     * 本接口（ModifyProxyRwSplit）用于配置数据库代理读写分离。
     */
    async ModifyProxyRwSplit(req, cb) {
        return this.request("ModifyProxyRwSplit", req, cb);
    }
    /**
     * 本接口（ModifyVipVport）用于修改实例组ip，端口。
     */
    async ModifyVipVport(req, cb) {
        return this.request("ModifyVipVport", req, cb);
    }
    /**
     * 本接口（DeleteAuditRuleTemplates）用于删除审计规则模板。
     */
    async DeleteAuditRuleTemplates(req, cb) {
        return this.request("DeleteAuditRuleTemplates", req, cb);
    }
    /**
     * 本接口（ModifyProxyDesc）用于修改数据库代理描述。
     */
    async ModifyProxyDesc(req, cb) {
        return this.request("ModifyProxyDesc", req, cb);
    }
    /**
     * 本接口（CreateParamTemplate）用于创建参数模板。
     */
    async CreateParamTemplate(req, cb) {
        return this.request("CreateParamTemplate", req, cb);
    }
    /**
     * 本接口（ModifyClusterSlaveZone）用于变更集群的备可用区。
     */
    async ModifyClusterSlaveZone(req, cb) {
        return this.request("ModifyClusterSlaveZone", req, cb);
    }
    /**
     * 本接口（ModifyAccountParams）用于修改账号配置。
     */
    async ModifyAccountParams(req, cb) {
        return this.request("ModifyAccountParams", req, cb);
    }
    /**
     * 本接口（ModifyClusterPasswordComplexity）用于修改/开启集群密码复杂度。
     */
    async ModifyClusterPasswordComplexity(req, cb) {
        return this.request("ModifyClusterPasswordComplexity", req, cb);
    }
    /**
     * 本接口（CreateBackup）用于为集群创建手动备份。
     */
    async CreateBackup(req, cb) {
        return this.request("CreateBackup", req, cb);
    }
    /**
     * 本接口（OfflineInstance）用于销毁实例。
     */
    async OfflineInstance(req, cb) {
        return this.request("OfflineInstance", req, cb);
    }
    /**
     * 本接口（IsolateCluster）用于隔离集群。
     */
    async IsolateCluster(req, cb) {
        return this.request("IsolateCluster", req, cb);
    }
    /**
     * 本接口（DescribeInstancesWithinSameCluster）用于查询同一集群下实例列表
     */
    async DescribeInstancesWithinSameCluster(req, cb) {
        return this.request("DescribeInstancesWithinSameCluster", req, cb);
    }
    /**
     * 本接口（RestartInstance）用于重启实例。
     */
    async RestartInstance(req, cb) {
        return this.request("RestartInstance", req, cb);
    }
    /**
     * 本接口（UpgradeProxy）用于升级数据库代理配置。
     */
    async UpgradeProxy(req, cb) {
        return this.request("UpgradeProxy", req, cb);
    }
    /**
     * 本接口（DescribeClusters）用于查询集群列表。
     */
    async DescribeClusters(req, cb) {
        return this.request("DescribeClusters", req, cb);
    }
    /**
     * 本接口（CloseWan）用于关闭外网。
     */
    async CloseWan(req, cb) {
        return this.request("CloseWan", req, cb);
    }
    /**
     * 本接口（DescribeProjectSecurityGroups）用于查询项目安全组信息。
     */
    async DescribeProjectSecurityGroups(req, cb) {
        return this.request("DescribeProjectSecurityGroups", req, cb);
    }
    /**
     * 本接口（ModifyClusterDatabase）用于修改数据库的账号授权。
     */
    async ModifyClusterDatabase(req, cb) {
        return this.request("ModifyClusterDatabase", req, cb);
    }
    /**
     * 本接口（ModifyAuditRuleTemplates）用于修改审计规则模板。
     */
    async ModifyAuditRuleTemplates(req, cb) {
        return this.request("ModifyAuditRuleTemplates", req, cb);
    }
    /**
     * 本接口（ModifyParamTemplate）用于修改用户参数模板。
     */
    async ModifyParamTemplate(req, cb) {
        return this.request("ModifyParamTemplate", req, cb);
    }
    /**
     * 修改已绑定资源包抵扣优先级
     */
    async ModifyResourcePackagesDeductionPriority(req, cb) {
        return this.request("ModifyResourcePackagesDeductionPriority", req, cb);
    }
    /**
     * 本接口（DescribeInstanceParams）用于查询实例参数列表。
     */
    async DescribeInstanceParams(req, cb) {
        return this.request("DescribeInstanceParams", req, cb);
    }
    /**
     * 此接口（DescribeInstanceSlowQueries）用于查询实例慢日志详情。
     */
    async DescribeInstanceSlowQueries(req, cb) {
        return this.request("DescribeInstanceSlowQueries", req, cb);
    }
    /**
     * 本接口（DescribeClusterDatabases）用于获取集群数据库列表。
     */
    async DescribeClusterDatabases(req, cb) {
        return this.request("DescribeClusterDatabases", req, cb);
    }
    /**
     * 本接口（ModifyClusterParam）用于修改集群参数。
     */
    async ModifyClusterParam(req, cb) {
        return this.request("ModifyClusterParam", req, cb);
    }
    /**
     * 本接口（CreateClusters）用于新购集群。
     */
    async CreateClusters(req, cb) {
        return this.request("CreateClusters", req, cb);
    }
    /**
     * 本接口（CreateAccounts）用于创建用户账号。
     */
    async CreateAccounts(req, cb) {
        return this.request("CreateAccounts", req, cb);
    }
    /**
     * 本接口（RollbackToNewCluster）用于回档到新集群。
     */
    async RollbackToNewCluster(req, cb) {
        return this.request("RollbackToNewCluster", req, cb);
    }
    /**
     * 本接口（CreateResourcePackage）用于新购资源包。
     */
    async CreateResourcePackage(req, cb) {
        return this.request("CreateResourcePackage", req, cb);
    }
    /**
     * 本接口(DescribeAuditLogFiles)用于查询云数据库实例的审计日志文件。
     */
    async DescribeAuditLogFiles(req, cb) {
        return this.request("DescribeAuditLogFiles", req, cb);
    }
    /**
     * 本接口（DeleteClusterDatabase）用于删除数据库。
     */
    async DeleteClusterDatabase(req, cb) {
        return this.request("DeleteClusterDatabase", req, cb);
    }
    /**
     * 本接口（SwitchClusterZone）用于切换集群的主备可用区。
     */
    async SwitchClusterZone(req, cb) {
        return this.request("SwitchClusterZone", req, cb);
    }
    /**
     * 本接口（SearchClusterDatabases）用于搜索集群数据库列表。
     */
    async SearchClusterDatabases(req, cb) {
        return this.request("SearchClusterDatabases", req, cb);
    }
    /**
     * 本接口（AddInstances）用于集群添加实例。
     */
    async AddInstances(req, cb) {
        return this.request("AddInstances", req, cb);
    }
    /**
     * 本接口（ModifyInstanceUpgradeLimitDays）用于修改实例内核小版本的升级限制时间。
     */
    async ModifyInstanceUpgradeLimitDays(req, cb) {
        return this.request("ModifyInstanceUpgradeLimitDays", req, cb);
    }
    /**
     * 本接口（DeleteAccounts）用于删除用户账号。
     */
    async DeleteAccounts(req, cb) {
        return this.request("DeleteAccounts", req, cb);
    }
    /**
     * 本接口（RevokeAccountPrivileges）用于批量回收账号权限。
     */
    async RevokeAccountPrivileges(req, cb) {
        return this.request("RevokeAccountPrivileges", req, cb);
    }
    /**
     * 本接口（OpenClusterReadOnlyInstanceGroupAccess）用于开启只读实例组接入。
     */
    async OpenClusterReadOnlyInstanceGroupAccess(req, cb) {
        return this.request("OpenClusterReadOnlyInstanceGroupAccess", req, cb);
    }
    /**
     * 开通集群透明加密
     */
    async OpenClusterTransparentEncrypt(req, cb) {
        return this.request("OpenClusterTransparentEncrypt", req, cb);
    }
    /**
     * 本接口（DescribeParamTemplates）用于查询用户指定产品下的所有参数模板信息。
     */
    async DescribeParamTemplates(req, cb) {
        return this.request("DescribeParamTemplates", req, cb);
    }
    /**
     * 本接口（DeleteBackup）用于为集群删除手动备份，无法删除自动备份。
     */
    async DeleteBackup(req, cb) {
        return this.request("DeleteBackup", req, cb);
    }
    /**
     * 查询serverless策略
     */
    async DescribeServerlessStrategy(req, cb) {
        return this.request("DescribeServerlessStrategy", req, cb);
    }
    /**
     * 本接口（PauseServerless）用于暂停 serverless 集群。
     */
    async PauseServerless(req, cb) {
        return this.request("PauseServerless", req, cb);
    }
    /**
     * 本接口（ModifyAccountHost）用于修改账号主机。
     */
    async ModifyAccountHost(req, cb) {
        return this.request("ModifyAccountHost", req, cb);
    }
    /**
     * 本接口（ResetAccountPassword）用于修改数据库账号密码。
     */
    async ResetAccountPassword(req, cb) {
        return this.request("ResetAccountPassword", req, cb);
    }
    /**
     * 本接口(DescribeInstanceDetail)用于查询实例详情。
     */
    async DescribeInstanceDetail(req, cb) {
        return this.request("DescribeInstanceDetail", req, cb);
    }
    /**
     * 本接口（DescribeAuditInstanceList）用于获取数据库审计的实例列表。
     */
    async DescribeAuditInstanceList(req, cb) {
        return this.request("DescribeAuditInstanceList", req, cb);
    }
    /**
     * 本接口（DescribeRollbackTimeRange）用于查询回档时间范围。
     */
    async DescribeRollbackTimeRange(req, cb) {
        return this.request("DescribeRollbackTimeRange", req, cb);
    }
    /**
     * 本接口（DescribeFlow）用于查询任务流信息。
     */
    async DescribeFlow(req, cb) {
        return this.request("DescribeFlow", req, cb);
    }
    /**
     * 本接口（ModifyInstanceParam）用于修改实例参数。
     */
    async ModifyInstanceParam(req, cb) {
        return this.request("ModifyInstanceParam", req, cb);
    }
    /**
     * 本接口（DescribeInstanceCLSLogDelivery）用于查询实例日志投递信息。
     */
    async DescribeInstanceCLSLogDelivery(req, cb) {
        return this.request("DescribeInstanceCLSLogDelivery", req, cb);
    }
    /**
     * 本接口（BindClusterResourcePackages）用于为集群绑定资源包。
     */
    async BindClusterResourcePackages(req, cb) {
        return this.request("BindClusterResourcePackages", req, cb);
    }
    /**
     * 查询Serverless实例可选规格
     */
    async DescribeServerlessInstanceSpecs(req, cb) {
        return this.request("DescribeServerlessInstanceSpecs", req, cb);
    }
    /**
     * 本接口（DescribeAuditLogs）用于查询数据库审计日志。
     */
    async DescribeAuditLogs(req, cb) {
        return this.request("DescribeAuditLogs", req, cb);
    }
    /**
     * 本接口（UnbindClusterResourcePackages）用于解除资源包与集群之间的绑定关系。
     */
    async UnbindClusterResourcePackages(req, cb) {
        return this.request("UnbindClusterResourcePackages", req, cb);
    }
    /**
     * 本接口（DescribeProxies）用于查询数据库代理列表。
     */
    async DescribeProxies(req, cb) {
        return this.request("DescribeProxies", req, cb);
    }
    /**
     * 本接口（OpenWan）用于开通外网。
     */
    async OpenWan(req, cb) {
        return this.request("OpenWan", req, cb);
    }
    /**
     * 本接口（InquirePriceCreate）用于新购集群的价格查询。
     */
    async InquirePriceCreate(req, cb) {
        return this.request("InquirePriceCreate", req, cb);
    }
    /**
     * 本接口（AssociateSecurityGroups）用于安全组批量绑定云资源。
     */
    async AssociateSecurityGroups(req, cb) {
        return this.request("AssociateSecurityGroups", req, cb);
    }
    /**
     * 该接口（DescribeBinlogConfig）用于查询binlog配置
     */
    async DescribeBinlogConfig(req, cb) {
        return this.request("DescribeBinlogConfig", req, cb);
    }
    /**
     * 本接口（DescribeResourcePackageSaleSpec）用于查询资源包规格。
     */
    async DescribeResourcePackageSaleSpec(req, cb) {
        return this.request("DescribeResourcePackageSaleSpec", req, cb);
    }
    /**
     * 本接口（ModifyAccountPrivileges）用于修改账号库表权限。
     */
    async ModifyAccountPrivileges(req, cb) {
        return this.request("ModifyAccountPrivileges", req, cb);
    }
    /**
     * 本接口（DescribeAuditRuleWithInstanceIds）用于获取实例的审计规则。
     */
    async DescribeAuditRuleWithInstanceIds(req, cb) {
        return this.request("DescribeAuditRuleWithInstanceIds", req, cb);
    }
    /**
     * 此接口（ExportInstanceErrorLogs）用于导出实例错误日志。
     */
    async ExportInstanceErrorLogs(req, cb) {
        return this.request("ExportInstanceErrorLogs", req, cb);
    }
    /**
     * 本接口（AddClusterSlaveZone）用于对集群开启多可用区部署。
     */
    async AddClusterSlaveZone(req, cb) {
        return this.request("AddClusterSlaveZone", req, cb);
    }
    /**
     * 此接口（ModifyBackupName）用于修改备份文件备注名。
     */
    async ModifyBackupName(req, cb) {
        return this.request("ModifyBackupName", req, cb);
    }
    /**
     * 本接口（DescribeAccounts）用于查询数据库账号列表。
     */
    async DescribeAccounts(req, cb) {
        return this.request("DescribeAccounts", req, cb);
    }
    /**
     * 本接口（SetRenewFlag）用于设置实例的自动续费功能。
     */
    async SetRenewFlag(req, cb) {
        return this.request("SetRenewFlag", req, cb);
    }
    /**
     * 本接口（InquirePriceRenew）用于查询续费集群价格。
     */
    async InquirePriceRenew(req, cb) {
        return this.request("InquirePriceRenew", req, cb);
    }
    /**
     * 本接口（StartCLSDelivery）用于开启日志投递功能。
     */
    async StartCLSDelivery(req, cb) {
        return this.request("StartCLSDelivery", req, cb);
    }
    /**
     * 本接口（ReloadBalanceProxyNode）用于负载均衡数据库代理。
     */
    async ReloadBalanceProxyNode(req, cb) {
        return this.request("ReloadBalanceProxyNode", req, cb);
    }
    /**
     * 本接口（OfflineCluster）用于销毁集群。
     */
    async OfflineCluster(req, cb) {
        return this.request("OfflineCluster", req, cb);
    }
    /**
     * 获取table列表
     */
    async DescribeClusterDatabaseTables(req, cb) {
        return this.request("DescribeClusterDatabaseTables", req, cb);
    }
    /**
     * 本接口（StopCLSDelivery）用于停止日志投递功能。
     */
    async StopCLSDelivery(req, cb) {
        return this.request("StopCLSDelivery", req, cb);
    }
    /**
     * 本接口（DescribeBackupList）用于查询集群的备份文件列表。
     */
    async DescribeBackupList(req, cb) {
        return this.request("DescribeBackupList", req, cb);
    }
    /**
     * 本接口(ModifyAccountDescription)用于修改数据库账号描述信息。
     */
    async ModifyAccountDescription(req, cb) {
        return this.request("ModifyAccountDescription", req, cb);
    }
    /**
     * 修改serverless策略
     */
    async ModifyServerlessStrategy(req, cb) {
        return this.request("ModifyServerlessStrategy", req, cb);
    }
    /**
     * 本接口（CreateClusterDatabase）用于创建数据库。
     */
    async CreateClusterDatabase(req, cb) {
        return this.request("CreateClusterDatabase", req, cb);
    }
    /**
     * 本接口（OpenAuditService）用于为实例开通数据库审计服务。
     */
    async OpenAuditService(req, cb) {
        return this.request("OpenAuditService", req, cb);
    }
    /**
     * 本接口（DeleteAuditLogFile）用于删除云数据库实例的审计日志文件。
     */
    async DeleteAuditLogFile(req, cb) {
        return this.request("DeleteAuditLogFile", req, cb);
    }
    /**
     * 本接口（DescribeAuditRuleTemplates）用于查询审计规则模板信息。
     */
    async DescribeAuditRuleTemplates(req, cb) {
        return this.request("DescribeAuditRuleTemplates", req, cb);
    }
    /**
     * 本接口（DescribeResourcePackageDetail）用于查询资源包使用详情。
     */
    async DescribeResourcePackageDetail(req, cb) {
        return this.request("DescribeResourcePackageDetail", req, cb);
    }
    /**
     * 本接口（ModifyBackupConfig）用于修改指定集群的备份配置。
     */
    async ModifyBackupConfig(req, cb) {
        return this.request("ModifyBackupConfig", req, cb);
    }
    /**
     * 本接口(DescribeInstances)用于查询实例列表。
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 本接口（UpgradeClusterVersion）用于更新内核小版本。
     */
    async UpgradeClusterVersion(req, cb) {
        return this.request("UpgradeClusterVersion", req, cb);
    }
    /**
     * 本接口（DescribeResourcePackageList）用于查询资源包列表。
     */
    async DescribeResourcePackageList(req, cb) {
        return this.request("DescribeResourcePackageList", req, cb);
    }
    /**
     * 本接口（DescribeClusterParams）用于查询集群参数。
     */
    async DescribeClusterParams(req, cb) {
        return this.request("DescribeClusterParams", req, cb);
    }
    /**
     * 本接口（RefundResourcePackage）用于资源包退款。
     */
    async RefundResourcePackage(req, cb) {
        return this.request("RefundResourcePackage", req, cb);
    }
    /**
     * 本接口(ModifyInstanceName)用于修改实例名称。
     */
    async ModifyInstanceName(req, cb) {
        return this.request("ModifyInstanceName", req, cb);
    }
    /**
     * 本接口（DescribeMaintainPeriod）用于查询实例维护时间窗。
     */
    async DescribeMaintainPeriod(req, cb) {
        return this.request("DescribeMaintainPeriod", req, cb);
    }
    /**
     * 资源包使用明细导出
     */
    async ExportResourcePackageDeductDetails(req, cb) {
        return this.request("ExportResourcePackageDeductDetails", req, cb);
    }
    /**
     * 本接口（DescribeClusterDetailDatabases）用于查询数据库列表。
     */
    async DescribeClusterDetailDatabases(req, cb) {
        return this.request("DescribeClusterDetailDatabases", req, cb);
    }
    /**
     * 本接口(ModifyAuditService)用于修改云数据库审计日志保存时长、审计规则等服务配置。
     */
    async ModifyAuditService(req, cb) {
        return this.request("ModifyAuditService", req, cb);
    }
    /**
     * 本接口（DescribeZones）用于查询可售卖地域可用区信息。
     */
    async DescribeZones(req, cb) {
        return this.request("DescribeZones", req, cb);
    }
    /**
     * 本接口（DescribeBackupDownloadUrl）用于查询集群备份文件下载地址。
     */
    async DescribeBackupDownloadUrl(req, cb) {
        return this.request("DescribeBackupDownloadUrl", req, cb);
    }
    /**
     * 本接口（SwitchClusterVpc）用于更换集群vpc。
     */
    async SwitchClusterVpc(req, cb) {
        return this.request("SwitchClusterVpc", req, cb);
    }
    /**
     * 本接口（CreateProxy）用于开启集群的数据库代理。
     */
    async CreateProxy(req, cb) {
        return this.request("CreateProxy", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceSecurityGroups）用于修改实例绑定的安全组。
     */
    async ModifyDBInstanceSecurityGroups(req, cb) {
        return this.request("ModifyDBInstanceSecurityGroups", req, cb);
    }
    /**
     * 本接口（CreateCLSDelivery）用于创建日志投递。
     */
    async CreateCLSDelivery(req, cb) {
        return this.request("CreateCLSDelivery", req, cb);
    }
    /**
     * 此接口（ModifyBinlogSaveDays）用于修改集群Binlog保留天数。
     */
    async ModifyBinlogSaveDays(req, cb) {
        return this.request("ModifyBinlogSaveDays", req, cb);
    }
    /**
     * 本接口（DescribeAccountAllGrantPrivileges）用于查询账号所有可授予的权限。
     */
    async DescribeAccountAllGrantPrivileges(req, cb) {
        return this.request("DescribeAccountAllGrantPrivileges", req, cb);
    }
    /**
     * 本接口（OpenReadOnlyInstanceExclusiveAccess）用于开通只读实例独有访问接入组。
     */
    async OpenReadOnlyInstanceExclusiveAccess(req, cb) {
        return this.request("OpenReadOnlyInstanceExclusiveAccess", req, cb);
    }
    /**
     * 本接口（DescribeClusterPasswordComplexity）用于查看集群密码复杂度详情。
     */
    async DescribeClusterPasswordComplexity(req, cb) {
        return this.request("DescribeClusterPasswordComplexity", req, cb);
    }
    /**
     * 本接口（DeleteParamTemplate）用于删除用户创建的参数模板。
     */
    async DeleteParamTemplate(req, cb) {
        return this.request("DeleteParamTemplate", req, cb);
    }
    /**
     * 本接口（UpgradeInstance）用于实例变配。
     */
    async UpgradeInstance(req, cb) {
        return this.request("UpgradeInstance", req, cb);
    }
    /**
     * 本接口（DescribeBinlogs）用来查询集群 Binlog 日志列表。
     */
    async DescribeBinlogs(req, cb) {
        return this.request("DescribeBinlogs", req, cb);
    }
    /**
     * 本接口（DescribeClusterInstanceGrps）用于查询实例组信息。
     */
    async DescribeClusterInstanceGroups(req, cb) {
        return this.request("DescribeClusterInstanceGroups", req, cb);
    }
    /**
     * 本接口（DescribeDBSecurityGroups）用于查询实例安全组信息。
     */
    async DescribeDBSecurityGroups(req, cb) {
        return this.request("DescribeDBSecurityGroups", req, cb);
    }
    /**
     * 本接口（OpenClusterPasswordComplexity）用于开启自定义密码复杂度功能。
     */
    async OpenClusterPasswordComplexity(req, cb) {
        return this.request("OpenClusterPasswordComplexity", req, cb);
    }
    /**
     * 本接口（ModifyResourcePackageName）用于修改资源包名称。
     */
    async ModifyResourcePackageName(req, cb) {
        return this.request("ModifyResourcePackageName", req, cb);
    }
    /**
     * 本接口（RemoveClusterSlaveZone）用于关闭集群多可用区部署。
     */
    async RemoveClusterSlaveZone(req, cb) {
        return this.request("RemoveClusterSlaveZone", req, cb);
    }
    /**
     * 本接口（DescribeParamTemplateDetail）用于查询用户参数模板详情。
     */
    async DescribeParamTemplateDetail(req, cb) {
        return this.request("DescribeParamTemplateDetail", req, cb);
    }
    /**
     * 本接口(IsolateInstance)用于隔离实例。
     */
    async IsolateInstance(req, cb) {
        return this.request("IsolateInstance", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248892, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.dasb = void 0;
const v20191018_1 = require("./v20191018");
exports.dasb = {
    v20191018: v20191018_1.v20191018,
};

}, function(modId) { var map = {"./v20191018":1738984248893}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248893, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20191018 = void 0;
const Models = require("./dasb_models");
const dasb_client_1 = require("./dasb_client");
exports.v20191018 = {
    Client: dasb_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./dasb_models":1738984248894,"./dasb_client":1738984248895}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248894, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248895, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * dasb client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("dasb.tencentcloudapi.com", "2019-10-18", clientConfig);
    }
    /**
     * 修改资产组
     */
    async ModifyDeviceGroup(req, cb) {
        return this.request("ModifyDeviceGroup", req, cb);
    }
    /**
     * 查询资产组成员列表
     */
    async DescribeDeviceGroupMembers(req, cb) {
        return this.request("DescribeDeviceGroupMembers", req, cb);
    }
    /**
     * 设置OAuth认证参数
     */
    async ModifyOAuthSetting(req, cb) {
        return this.request("ModifyOAuthSetting", req, cb);
    }
    /**
     * 修改高危命令模板
     */
    async ModifyCmdTemplate(req, cb) {
        return this.request("ModifyCmdTemplate", req, cb);
    }
    /**
     * 查询登录日志
     */
    async DescribeLoginEvent(req, cb) {
        return this.request("DescribeLoginEvent", req, cb);
    }
    /**
     * 新建资产组
     */
    async CreateDeviceGroup(req, cb) {
        return this.request("CreateDeviceGroup", req, cb);
    }
    /**
     * 查询主机账号列表
     */
    async DescribeDeviceAccounts(req, cb) {
        return this.request("DescribeDeviceAccounts", req, cb);
    }
    /**
     * 重置用户
     */
    async ResetUser(req, cb) {
        return this.request("ResetUser", req, cb);
    }
    /**
     * 删除主机
     */
    async DeleteDevices(req, cb) {
        return this.request("DeleteDevices", req, cb);
    }
    /**
     * 创建修改密码任务
     */
    async CreateChangePwdTask(req, cb) {
        return this.request("CreateChangePwdTask", req, cb);
    }
    /**
     * 查询用户组列表
     */
    async DescribeUserGroups(req, cb) {
        return this.request("DescribeUserGroups", req, cb);
    }
    /**
     * 查询网络域
     */
    async DescribeDomains(req, cb) {
        return this.request("DescribeDomains", req, cb);
    }
    /**
     * 开通服务，初始化资源，只针对新购资源
     */
    async DeployResource(req, cb) {
        return this.request("DeployResource", req, cb);
    }
    /**
     * 修改资产信息
     */
    async ModifyDevice(req, cb) {
        return this.request("ModifyDevice", req, cb);
    }
    /**
     * 修改资产绑定的堡垒机服务
     */
    async BindDeviceResource(req, cb) {
        return this.request("BindDeviceResource", req, cb);
    }
    /**
     * 绑定主机账号密码
     */
    async BindDeviceAccountPassword(req, cb) {
        return this.request("BindDeviceAccountPassword", req, cb);
    }
    /**
     * 文件传输检索
     */
    async SearchFile(req, cb) {
        return this.request("SearchFile", req, cb);
    }
    /**
     * 搜索会话
     */
    async SearchSession(req, cb) {
        return this.request("SearchSession", req, cb);
    }
    /**
     * 删除访问权限
     */
    async DeleteAcls(req, cb) {
        return this.request("DeleteAcls", req, cb);
    }
    /**
     * 查询用户购买的堡垒机服务信息，包括资源ID、授权点数、VPC、过期时间等。
     */
    async DescribeResources(req, cb) {
        return this.request("DescribeResources", req, cb);
    }
    /**
     * 删除用户组成员
     */
    async DeleteUserGroupMembers(req, cb) {
        return this.request("DeleteUserGroupMembers", req, cb);
    }
    /**
     * 更新修改密码任务
     */
    async ModifyChangePwdTask(req, cb) {
        return this.request("ModifyChangePwdTask", req, cb);
    }
    /**
     * 创建手工资产同步任务
     */
    async CreateAssetSyncJob(req, cb) {
        return this.request("CreateAssetSyncJob", req, cb);
    }
    /**
     * 查询访问权限列表
     */
    async DescribeAcls(req, cb) {
        return this.request("DescribeAcls", req, cb);
    }
    /**
     * 执行改密任务
     */
    async RunChangePwdTask(req, cb) {
        return this.request("RunChangePwdTask", req, cb);
    }
    /**
     * 清除设备账号绑定密码
     */
    async ResetDeviceAccountPassword(req, cb) {
        return this.request("ResetDeviceAccountPassword", req, cb);
    }
    /**
     * 修改用户组
     */
    async ModifyUserGroup(req, cb) {
        return this.request("ModifyUserGroup", req, cb);
    }
    /**
     * 根据会话Id搜索Command
     */
    async SearchCommandBySid(req, cb) {
        return this.request("SearchCommandBySid", req, cb);
    }
    /**
     * 删除资产组
     */
    async DeleteDeviceGroups(req, cb) {
        return this.request("DeleteDeviceGroups", req, cb);
    }
    /**
     * 修改访问权限
     */
    async ModifyAcl(req, cb) {
        return this.request("ModifyAcl", req, cb);
    }
    /**
     * 删除用户
     */
    async DeleteUsers(req, cb) {
        return this.request("DeleteUsers", req, cb);
    }
    /**
     * 新建访问权限
     */
    async CreateAcl(req, cb) {
        return this.request("CreateAcl", req, cb);
    }
    /**
     * 获取镜像列表
     */
    async DescribeDasbImageIds(req, cb) {
        return this.request("DescribeDasbImageIds", req, cb);
    }
    /**
     * 清除设备账号绑定的密钥
     */
    async ResetDeviceAccountPrivateKey(req, cb) {
        return this.request("ResetDeviceAccountPrivateKey", req, cb);
    }
    /**
     * 查询资产同步状态
     */
    async DescribeAssetSyncStatus(req, cb) {
        return this.request("DescribeAssetSyncStatus", req, cb);
    }
    /**
     * 新建主机账号
     */
    async CreateDeviceAccount(req, cb) {
        return this.request("CreateDeviceAccount", req, cb);
    }
    /**
     * 查询改密任务详情
     */
    async DescribeChangePwdTaskDetail(req, cb) {
        return this.request("DescribeChangePwdTaskDetail", req, cb);
    }
    /**
     * 删除资产组成员
     */
    async DeleteDeviceGroupMembers(req, cb) {
        return this.request("DeleteDeviceGroupMembers", req, cb);
    }
    /**
     * 删除改密任务
     */
    async DeleteChangePwdTask(req, cb) {
        return this.request("DeleteChangePwdTask", req, cb);
    }
    /**
     * 查询操作日志
     */
    async DescribeOperationEvent(req, cb) {
        return this.request("DescribeOperationEvent", req, cb);
    }
    /**
     * 删除主机账号
     */
    async DeleteDeviceAccounts(req, cb) {
        return this.request("DeleteDeviceAccounts", req, cb);
    }
    /**
     * 删除用户组
     */
    async DeleteUserGroups(req, cb) {
        return this.request("DeleteUserGroups", req, cb);
    }
    /**
     * 新建高危命令模板
     */
    async CreateCmdTemplate(req, cb) {
        return this.request("CreateCmdTemplate", req, cb);
    }
    /**
     * 资源变配
     */
    async ModifyResource(req, cb) {
        return this.request("ModifyResource", req, cb);
    }
    /**
     * 搜索审计日志
     */
    async SearchAuditLog(req, cb) {
        return this.request("SearchAuditLog", req, cb);
    }
    /**
     * 修改用户信息
     */
    async ModifyUser(req, cb) {
        return this.request("ModifyUser", req, cb);
    }
    /**
     * 查询命令模板列表
     */
    async DescribeCmdTemplates(req, cb) {
        return this.request("DescribeCmdTemplates", req, cb);
    }
    /**
     * 删除高危命令模板
     */
    async DeleteCmdTemplates(req, cb) {
        return this.request("DeleteCmdTemplates", req, cb);
    }
    /**
     * 添加用户组成员
     */
    async AddUserGroupMembers(req, cb) {
        return this.request("AddUserGroupMembers", req, cb);
    }
    /**
     * 查询资产组列表
     */
    async DescribeDeviceGroups(req, cb) {
        return this.request("DescribeDeviceGroups", req, cb);
    }
    /**
     * 查询用户列表
     */
    async DescribeUsers(req, cb) {
        return this.request("DescribeUsers", req, cb);
    }
    /**
     * 查询资产列表
     */
    async DescribeDevices(req, cb) {
        return this.request("DescribeDevices", req, cb);
    }
    /**
     * 查询用户组成员列表
     */
    async DescribeUserGroupMembers(req, cb) {
        return this.request("DescribeUserGroupMembers", req, cb);
    }
    /**
     * 搜索文件传输会话下文件操作列表
     */
    async SearchFileBySid(req, cb) {
        return this.request("SearchFileBySid", req, cb);
    }
    /**
     * 导入外部资产信息
     */
    async ImportExternalDevice(req, cb) {
        return this.request("ImportExternalDevice", req, cb);
    }
    /**
     * 查询改密任务列表
     */
    async DescribeChangePwdTask(req, cb) {
        return this.request("DescribeChangePwdTask", req, cb);
    }
    /**
     * 添加资产组成员
     */
    async AddDeviceGroupMembers(req, cb) {
        return this.request("AddDeviceGroupMembers", req, cb);
    }
    /**
     * 新建用户组
     */
    async CreateUserGroup(req, cb) {
        return this.request("CreateUserGroup", req, cb);
    }
    /**
     * 创建堡垒机实例
     */
    async CreateResource(req, cb) {
        return this.request("CreateResource", req, cb);
    }
    /**
     * 新建用户
     */
    async CreateUser(req, cb) {
        return this.request("CreateUser", req, cb);
    }
    /**
     * 绑定主机账号私钥
     */
    async BindDeviceAccountPrivateKey(req, cb) {
        return this.request("BindDeviceAccountPrivateKey", req, cb);
    }
    /**
     * 命令执行检索
     */
    async SearchCommand(req, cb) {
        return this.request("SearchCommand", req, cb);
    }
    /**
     * 命令检索
     */
    async SearchSessionCommand(req, cb) {
        return this.request("SearchSessionCommand", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248896, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.dataintegration = void 0;
const v20220613_1 = require("./v20220613");
exports.dataintegration = {
    v20220613: v20220613_1.v20220613,
};

}, function(modId) { var map = {"./v20220613":1738984248897}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248897, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220613 = void 0;
const Models = require("./dataintegration_models");
const dataintegration_client_1 = require("./dataintegration_client");
exports.v20220613 = {
    Client: dataintegration_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./dataintegration_models":1738984248898,"./dataintegration_client":1738984248899}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248898, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248899, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * dataintegration client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("dataintegration.tencentcloudapi.com", "2022-06-13", clientConfig);
    }
    /**
     * 使用SDK将数据上报到DIP
     */
    async SendMessage(req, cb) {
        return this.request("SendMessage", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248900, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.dayu = void 0;
const v20180709_1 = require("./v20180709");
exports.dayu = {
    v20180709: v20180709_1.v20180709,
};

}, function(modId) { var map = {"./v20180709":1738984248901}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248901, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180709 = void 0;
const Models = require("./dayu_models");
const dayu_client_1 = require("./dayu_client");
exports.v20180709 = {
    Client: dayu_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./dayu_models":1738984248902,"./dayu_client":1738984248903}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248902, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248903, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * dayu client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("dayu.tencentcloudapi.com", "2018-07-09", clientConfig);
    }
    /**
     * 添加或删除CC的IP黑白名单
     */
    async ModifyCCIpAllowDeny(req, cb) {
        return this.request("ModifyCCIpAllowDeny", req, cb);
    }
    /**
     * 获取DDoS攻击占比分析
     */
    async DescribeDDoSCount(req, cb) {
        return this.request("DescribeDDoSCount", req, cb);
    }
    /**
     * 删除L4转发规则
     */
    async DeleteNewL4Rules(req, cb) {
        return this.request("DeleteNewL4Rules", req, cb);
    }
    /**
     * 获取资源的规则数
     */
    async DescribeRuleSets(req, cb) {
        return this.request("DescribeRuleSets", req, cb);
    }
    /**
     * 批量上传7层转发规则
     */
    async CreateNewL7RulesUpload(req, cb) {
        return this.request("CreateNewL7RulesUpload", req, cb);
    }
    /**
     * 此接口是7层CC的访问频控自定义规则（IP+Host维度，不支持具体的URI），此接口已弃用，请调用新接口CreateCCFrequencyRules，新接口同时支持IP+Host维度以及具体的URI；
     */
    async CreateL7CCRule(req, cb) {
        return this.request("CreateL7CCRule", req, cb);
    }
    /**
     * 创建CC自定义策略
     */
    async CreateCCSelfDefinePolicy(req, cb) {
        return this.request("CreateCCSelfDefinePolicy", req, cb);
    }
    /**
     * 添加7层转发规则
     */
    async CreateNewL7Rules(req, cb) {
        return this.request("CreateNewL7Rules", req, cb);
    }
    /**
     * 修改CC自定义策略开关
     */
    async ModifyCCPolicySwitch(req, cb) {
        return this.request("ModifyCCPolicySwitch", req, cb);
    }
    /**
     * 获取L7转发规则健康检查异常结果
     */
    async DescribeNewL7RulesErrHealth(req, cb) {
        return this.request("DescribeNewL7RulesErrHealth", req, cb);
    }
    /**
     * 添加策略场景
     */
    async CreateDDoSPolicyCase(req, cb) {
        return this.request("CreateDDoSPolicyCase", req, cb);
    }
    /**
     * 获取高防IP专业版资源的DDoS攻击指标数据
     */
    async DescribeDDoSNetTrend(req, cb) {
        return this.request("DescribeDDoSNetTrend", req, cb);
    }
    /**
     * 修改DDoS高级策略名称
     */
    async ModifyDDoSPolicyName(req, cb) {
        return this.request("ModifyDDoSPolicyName", req, cb);
    }
    /**
     * 修改L4转发规则健康检查参数，支持的子产品：高防IP、高防IP专业版
     */
    async ModifyL4Health(req, cb) {
        return this.request("ModifyL4Health", req, cb);
    }
    /**
     * 统计用户的高防资源的使用天数和DDoS攻击防护次数
     */
    async DescribeDDoSUsedStatis(req, cb) {
        return this.request("DescribeDDoSUsedStatis", req, cb);
    }
    /**
     * 获取DDoS防护状态（临时关闭状态），支持产品：基础防护，独享包，共享包，高防IP，高防IP专业版；调用此接口是获取当前是否有设置临时关闭DDoS防护状态，如果有设置会返回临时关闭的时长等参数。
     */
    async DescribeDDoSDefendStatus(req, cb) {
        return this.request("DescribeDDoSDefendStatus", req, cb);
    }
    /**
     * 获取高防包、高防IP、高防IP专业版、棋牌盾产品设置CC攻击的告警通知阈值
     */
    async DescribeCCAlarmThreshold(req, cb) {
        return this.request("DescribeCCAlarmThreshold", req, cb);
    }
    /**
     * 下载攻击事件的pcap包
     */
    async DescribePcap(req, cb) {
        return this.request("DescribePcap", req, cb);
    }
    /**
     * 获取L4转发规则
     */
    async DescribeNewL4Rules(req, cb) {
        return this.request("DescribeNewL4Rules", req, cb);
    }
    /**
     * 修改弹性防护阈值
     */
    async ModifyElasticLimit(req, cb) {
        return this.request("ModifyElasticLimit", req, cb);
    }
    /**
     * 获取高防IP专业版资源的DDoSIP攻击日志
     */
    async DescribeDDoSNetIpLog(req, cb) {
        return this.request("DescribeDDoSNetIpLog", req, cb);
    }
    /**
     * 为高防包、高防IP、高防IP专业版、棋牌盾产品设置CC攻击的告警通知阈值
     */
    async ModifyCCAlarmThreshold(req, cb) {
        return this.request("ModifyCCAlarmThreshold", req, cb);
    }
    /**
     * 获取DDoS攻击事件列表
     */
    async DescribeDDoSEvList(req, cb) {
        return this.request("DescribeDDoSEvList", req, cb);
    }
    /**
     * 获取IP封堵列表
     */
    async DescribeIpBlockList(req, cb) {
        return this.request("DescribeIpBlockList", req, cb);
    }
    /**
     * 导出四层健康检查配置
     */
    async DescribeL4HealthConfig(req, cb) {
        return this.request("DescribeL4HealthConfig", req, cb);
    }
    /**
     * 获取本月安全统计
     */
    async DescribeSecIndex(req, cb) {
        return this.request("DescribeSecIndex", req, cb);
    }
    /**
     * 获取调度域名列表
     */
    async DescribeSchedulingDomainList(req, cb) {
        return this.request("DescribeSchedulingDomainList", req, cb);
    }
    /**
     * 获取CC防护的访问频率控制规则
     */
    async DescribeCCFrequencyRules(req, cb) {
        return this.request("DescribeCCFrequencyRules", req, cb);
    }
    /**
     * 删除策略场景
     */
    async DeleteDDoSPolicyCase(req, cb) {
        return this.request("DeleteDDoSPolicyCase", req, cb);
    }
    /**
     * 删除七层转发规则
     */
    async DeleteL7Rules(req, cb) {
        return this.request("DeleteL7Rules", req, cb);
    }
    /**
     * 添加L4转发规则
     */
    async CreateNewL4Rules(req, cb) {
        return this.request("CreateNewL4Rules", req, cb);
    }
    /**
     * 添加L4转发规则
     */
    async CreateL4Rules(req, cb) {
        return this.request("CreateL4Rules", req, cb);
    }
    /**
     * 为大禹子产品提供业务转发指标数据的接口
     */
    async DescribeBaradData(req, cb) {
        return this.request("DescribeBaradData", req, cb);
    }
    /**
     * 修改CC防护的访问频率控制规则
     */
    async ModifyCCFrequencyRules(req, cb) {
        return this.request("ModifyCCFrequencyRules", req, cb);
    }
    /**
     * 获取七层转发规则
     */
    async DescribleL7Rules(req, cb) {
        return this.request("DescribleL7Rules", req, cb);
    }
    /**
     * 添加DDoS高级策略
     */
    async CreateDDoSPolicy(req, cb) {
        return this.request("CreateDDoSPolicy", req, cb);
    }
    /**
     * 资源实例绑定DDoS高级策略
     */
    async ModifyResBindDDoSPolicy(req, cb) {
        return this.request("ModifyResBindDDoSPolicy", req, cb);
    }
    /**
     * 在客户收攻击或者被封堵时，切回到源站，并设置回切的时长
     */
    async ModifyNetReturnSwitch(req, cb) {
        return this.request("ModifyNetReturnSwitch", req, cb);
    }
    /**
     * 获取L4转发规则健康检查异常结果
     */
    async DescribeNewL4RulesErrHealth(req, cb) {
        return this.request("DescribeNewL4RulesErrHealth", req, cb);
    }
    /**
     * 获取回源IP段，支持的产品：高防IP，高防IP专业版；
     */
    async DescribeSourceIpSegment(req, cb) {
        return this.request("DescribeSourceIpSegment", req, cb);
    }
    /**
     * 添加或删除CC的URL白名单
     */
    async ModifyCCUrlAllow(req, cb) {
        return this.request("ModifyCCUrlAllow", req, cb);
    }
    /**
     * 获取基础防护黑洞阈值
     */
    async DescribeBasicDeviceThreshold(req, cb) {
        return this.request("DescribeBasicDeviceThreshold", req, cb);
    }
    /**
     * IP解封操作
     */
    async CreateUnblockIp(req, cb) {
        return this.request("CreateUnblockIp", req, cb);
    }
    /**
     * 删除DDoS高级策略
     */
    async DeleteDDoSPolicy(req, cb) {
        return this.request("DeleteDDoSPolicy", req, cb);
    }
    /**
     * 修改4层转发规则
     */
    async ModifyNewL4Rule(req, cb) {
        return this.request("ModifyNewL4Rule", req, cb);
    }
    /**
     * 获取资源列表
     */
    async DescribeResourceList(req, cb) {
        return this.request("DescribeResourceList", req, cb);
    }
    /**
     * 获取业务流量状态码统计
     */
    async DescribeBizHttpStatus(req, cb) {
        return this.request("DescribeBizHttpStatus", req, cb);
    }
    /**
     * 删除CC自定义策略
     */
    async DeleteCCSelfDefinePolicy(req, cb) {
        return this.request("DeleteCCSelfDefinePolicy", req, cb);
    }
    /**
     * 获取策略场景
     */
    async DescribePolicyCase(req, cb) {
        return this.request("DescribePolicyCase", req, cb);
    }
    /**
     * 获取操作日志
     */
    async DescribeActionLog(req, cb) {
        return this.request("DescribeActionLog", req, cb);
    }
    /**
     * 修改L4转发规则
     */
    async ModifyL4Rules(req, cb) {
        return this.request("ModifyL4Rules", req, cb);
    }
    /**
     * 获取DDoSIP攻击日志
     */
    async DescribeDDoSIpLog(req, cb) {
        return this.request("DescribeDDoSIpLog", req, cb);
    }
    /**
     * 获取高防包、高防IP、高防IP专业版、棋牌盾产品设置DDoS攻击的告警通知阈值
     */
    async DescribeDDoSAlarmThreshold(req, cb) {
        return this.request("DescribeDDoSAlarmThreshold", req, cb);
    }
    /**
     * 获取产品总览统计，支持高防包、高防IP、高防IP专业版；
     */
    async DescribePackIndex(req, cb) {
        return this.request("DescribePackIndex", req, cb);
    }
    /**
     * 获取7层规则
     */
    async DescribleNewL7Rules(req, cb) {
        return this.request("DescribleNewL7Rules", req, cb);
    }
    /**
     * 设置基础防护的DDoS告警阈值，只支持基础防护产品
     */
    async CreateBasicDDoSAlarmThreshold(req, cb) {
        return this.request("CreateBasicDDoSAlarmThreshold", req, cb);
    }
    /**
     * 修改DDoS清洗阈值
     */
    async ModifyDDoSThreshold(req, cb) {
        return this.request("ModifyDDoSThreshold", req, cb);
    }
    /**
     * 配置7层转发规则的证书
     */
    async CreateL7RuleCert(req, cb) {
        return this.request("CreateL7RuleCert", req, cb);
    }
    /**
     * 读取或修改DDoS的AI防护状态
     */
    async ModifyDDoSAIStatus(req, cb) {
        return this.request("ModifyDDoSAIStatus", req, cb);
    }
    /**
     * 获取CC的IP黑白名单
     */
    async DescribeCCIpAllowDeny(req, cb) {
        return this.request("DescribeCCIpAllowDeny", req, cb);
    }
    /**
     * 上传四层健康检查配置
     */
    async CreateL4HealthConfig(req, cb) {
        return this.request("CreateL4HealthConfig", req, cb);
    }
    /**
     * 获取高防IP专业版资源的DDoS攻击占比分析
     */
    async DescribeDDoSNetCount(req, cb) {
        return this.request("DescribeDDoSNetCount", req, cb);
    }
    /**
     * 绑定IP到高防包实例，支持独享包、共享包；需要注意的是此接口绑定或解绑IP是异步接口，当处于绑定或解绑中时，则不允许再进行绑定或解绑，需要等待当前绑定或解绑完成。
     */
    async CreateBoundIP(req, cb) {
        return this.request("CreateBoundIP", req, cb);
    }
    /**
     * 修改DDoS高级策略
     */
    async ModifyDDoSPolicy(req, cb) {
        return this.request("ModifyDDoSPolicy", req, cb);
    }
    /**
     * 修改策略场景
     */
    async ModifyDDoSPolicyCase(req, cb) {
        return this.request("ModifyDDoSPolicyCase", req, cb);
    }
    /**
     * 为高防包、高防IP、高防IP专业版、棋牌盾等产品设置DDoS攻击的告警通知阈值
     */
    async ModifyDDoSAlarmThreshold(req, cb) {
        return this.request("ModifyDDoSAlarmThreshold", req, cb);
    }
    /**
     * 获取高防IP专业版资源的DDoS攻击事件详情
     */
    async DescribeDDoSNetEvInfo(req, cb) {
        return this.request("DescribeDDoSNetEvInfo", req, cb);
    }
    /**
     * 删除CC防护的访问频率控制规则
     */
    async DeleteCCFrequencyRules(req, cb) {
        return this.request("DeleteCCFrequencyRules", req, cb);
    }
    /**
     * 修改L4转发规则的会话保持，支持的子产品：高防IP、高防IP专业版
     */
    async ModifyL4KeepTime(req, cb) {
        return this.request("ModifyL4KeepTime", req, cb);
    }
    /**
     * 获取L4转发规则健康检查异常结果
     */
    async DescribeL4RulesErrHealth(req, cb) {
        return this.request("DescribeL4RulesErrHealth", req, cb);
    }
    /**
     * 批量上传7层转发规则
     */
    async CreateL7RulesUpload(req, cb) {
        return this.request("CreateL7RulesUpload", req, cb);
    }
    /**
     * 获取DDoS高级策略
     */
    async DescribeDDoSPolicy(req, cb) {
        return this.request("DescribeDDoSPolicy", req, cb);
    }
    /**
     * 获取业务转发统计数据，支持转发流量和转发包速率
     */
    async DescribeTransmitStatis(req, cb) {
        return this.request("DescribeTransmitStatis", req, cb);
    }
    /**
     * 修改CC防护等级
     */
    async ModifyCCLevel(req, cb) {
        return this.request("ModifyCCLevel", req, cb);
    }
    /**
     * 开启或关闭DDoS防护状态，调用此接口允许临时关闭DDoS防护一段时间，等时间到了会自动开启DDoS防护；
     */
    async ModifyDDoSDefendStatus(req, cb) {
        return this.request("ModifyDDoSDefendStatus", req, cb);
    }
    /**
     * 获取黑洞解封次数
     */
    async DescribeUnBlockStatis(req, cb) {
        return this.request("DescribeUnBlockStatis", req, cb);
    }
    /**
     * 获取DDoS攻击流量带宽和攻击包速率数据
     */
    async DescribeDDoSTrend(req, cb) {
        return this.request("DescribeDDoSTrend", req, cb);
    }
    /**
     * 高防IP专业版一键切回源站
     */
    async CreateNetReturn(req, cb) {
        return this.request("CreateNetReturn", req, cb);
    }
    /**
     * 开启或关闭DDoS防护，只支持基础防护产品；
     */
    async ModifyDDoSSwitch(req, cb) {
        return this.request("ModifyDDoSSwitch", req, cb);
    }
    /**
     * 读取或修改DDoS的防护等级
     */
    async ModifyDDoSLevel(req, cb) {
        return this.request("ModifyDDoSLevel", req, cb);
    }
    /**
     * 获取DDoS攻击源列表
     */
    async DescribeDDoSAttackSource(req, cb) {
        return this.request("DescribeDDoSAttackSource", req, cb);
    }
    /**
     * 删除L7转发规则
     */
    async DeleteNewL7Rules(req, cb) {
        return this.request("DeleteNewL7Rules", req, cb);
    }
    /**
     * 获取CC攻击事件列表
     */
    async DescribeCCEvList(req, cb) {
        return this.request("DescribeCCEvList", req, cb);
    }
    /**
     * 支持水印密钥的添加，删除，开启，关闭
     */
    async ModifyDDoSWaterKey(req, cb) {
        return this.request("ModifyDDoSWaterKey", req, cb);
    }
    /**
     * 获取保险包套餐列表
     */
    async DescribeInsurePacks(req, cb) {
        return this.request("DescribeInsurePacks", req, cb);
    }
    /**
     * 删除四层转发规则
     */
    async DeleteL4Rules(req, cb) {
        return this.request("DeleteL4Rules", req, cb);
    }
    /**
     * 获取高防IP专业版资源的DDoS攻击事件列表
     */
    async DescribeDDoSNetEvList(req, cb) {
        return this.request("DescribeDDoSNetEvList", req, cb);
    }
    /**
     * 开启或关闭CC域名防护
     */
    async ModifyCCHostProtection(req, cb) {
        return this.request("ModifyCCHostProtection", req, cb);
    }
    /**
     * 获取业务流量曲线
     */
    async DescribeBizTrend(req, cb) {
        return this.request("DescribeBizTrend", req, cb);
    }
    /**
     * 获取地域的资源实例数
     */
    async DescribleRegionCount(req, cb) {
        return this.request("DescribleRegionCount", req, cb);
    }
    /**
     * 添加7层(网站)转发规则
     */
    async CreateL7Rules(req, cb) {
        return this.request("CreateL7Rules", req, cb);
    }
    /**
     * 获取IP解封记录
     */
    async DescribeIpUnBlockList(req, cb) {
        return this.request("DescribeIpUnBlockList", req, cb);
    }
    /**
     * 获取独享包或共享包IP对应的云资产信息，只支持独享包和共享包的IP
     */
    async DescribeIPProductInfo(req, cb) {
        return this.request("DescribeIPProductInfo", req, cb);
    }
    /**
     * 获取CC自定义策略
     */
    async DescribeCCSelfDefinePolicy(req, cb) {
        return this.request("DescribeCCSelfDefinePolicy", req, cb);
    }
    /**
     * 开启或关闭CC防护的访问频率控制规则
     */
    async ModifyCCFrequencyRulesStatus(req, cb) {
        return this.request("ModifyCCFrequencyRulesStatus", req, cb);
    }
    /**
     * 修改CC的防护阈值
     */
    async ModifyCCThreshold(req, cb) {
        return this.request("ModifyCCThreshold", req, cb);
    }
    /**
     * 获取四层转发规则
     */
    async DescribleL4Rules(req, cb) {
        return this.request("DescribleL4Rules", req, cb);
    }
    /**
     * 修改7层转发规则
     */
    async ModifyNewDomainRules(req, cb) {
        return this.request("ModifyNewDomainRules", req, cb);
    }
    /**
     * 获取CC的Url白名单
     */
    async DescribeCCUrlAllow(req, cb) {
        return this.request("DescribeCCUrlAllow", req, cb);
    }
    /**
     * 导出七层健康检查配置
     */
    async DescribeL7HealthConfig(req, cb) {
        return this.request("DescribeL7HealthConfig", req, cb);
    }
    /**
     * 获取CC攻击指标数据，包括总请求峰值(QPS)和攻击请求(QPS)
     */
    async DescribeCCTrend(req, cb) {
        return this.request("DescribeCCTrend", req, cb);
    }
    /**
     * 添加CC防护的访问频率控制规则
     */
    async CreateCCFrequencyRules(req, cb) {
        return this.request("CreateCCFrequencyRules", req, cb);
    }
    /**
     * 修改L7转发规则
     */
    async ModifyL7Rules(req, cb) {
        return this.request("ModifyL7Rules", req, cb);
    }
    /**
     * 获取基础防护CC防护阈值
     */
    async DescribeBasicCCThreshold(req, cb) {
        return this.request("DescribeBasicCCThreshold", req, cb);
    }
    /**
     * 上传七层健康检查配置
     */
    async CreateL7HealthConfig(req, cb) {
        return this.request("CreateL7HealthConfig", req, cb);
    }
    /**
     * 获取资源的IP列表
     */
    async DescribeResIpList(req, cb) {
        return this.request("DescribeResIpList", req, cb);
    }
    /**
     * 资源实例重命名，支持独享包、共享包、高防IP、高防IP专业版；
     */
    async CreateInstanceName(req, cb) {
        return this.request("CreateInstanceName", req, cb);
    }
    /**
     * 获取高防IP可添加的最多7层规则数量

     */
    async DescribeBGPIPL7RuleMaxCnt(req, cb) {
        return this.request("DescribeBGPIPL7RuleMaxCnt", req, cb);
    }
    /**
     * 修改资源自动续费标记
     */
    async ModifyResourceRenewFlag(req, cb) {
        return this.request("ModifyResourceRenewFlag", req, cb);
    }
    /**
     * 修改CC自定义策略
     */
    async ModifyCCSelfDefinePolicy(req, cb) {
        return this.request("ModifyCCSelfDefinePolicy", req, cb);
    }
    /**
     * 获取DDoS攻击事件详情
     */
    async DescribeDDoSEvInfo(req, cb) {
        return this.request("DescribeDDoSEvInfo", req, cb);
    }
    /**
     * 获取DDoS攻击源IP地域分布图，支持全球攻击分布和国内省份攻击分布；
     */
    async DescribeDDoSAttackIPRegionMap(req, cb) {
        return this.request("DescribeDDoSAttackIPRegionMap", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248904, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.dbbrain = void 0;
const v20210527_1 = require("./v20210527");
const v20191016_1 = require("./v20191016");
exports.dbbrain = {
    v20210527: v20210527_1.v20210527,
    v20191016: v20191016_1.v20191016,
};

}, function(modId) { var map = {"./v20210527":1738984248905,"./v20191016":1738984248908}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248905, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210527 = void 0;
const Models = require("./dbbrain_models");
const dbbrain_client_1 = require("./dbbrain_client");
exports.v20210527 = {
    Client: dbbrain_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./dbbrain_models":1738984248906,"./dbbrain_client":1738984248907}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248906, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248907, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * dbbrain client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("dbbrain.tencentcloudapi.com", "2021-05-27", clientConfig);
    }
    /**
     * 获取实例占用空间最大的前几张表在指定时间段内的每日由DBbrain定时采集的空间数据，默认返回按大小排序。
     */
    async DescribeTopSpaceTableTimeSeries(req, cb) {
        return this.request("DescribeTopSpaceTableTimeSeries", req, cb);
    }
    /**
     * 查询安全审计日志导出文件下载链接。目前日志文件下载仅提供腾讯云内网地址，请通过广州地域的腾讯云服务器进行下载。
     */
    async DescribeSecurityAuditLogDownloadUrls(req, cb) {
        return this.request("DescribeSecurityAuditLogDownloadUrls", req, cb);
    }
    /**
     * 根据任务id删除健康报告生成任务
     */
    async DeleteDBDiagReportTasks(req, cb) {
        return this.request("DeleteDBDiagReportTasks", req, cb);
    }
    /**
     * 获取发送邮件的配置， 包括数据库巡检的邮件配置以及定期生成健康报告的邮件发送配置。
     */
    async DescribeMailProfile(req, cb) {
        return this.request("DescribeMailProfile", req, cb);
    }
    /**
     * 该接口用于创建定期生成健康报告并邮件发送的配置，将健康报告的定期生成时间作为参数传入（周一至周日），用于设置健康报告的定期生成时间，同时保存相应的定期邮件发送的配置。
     */
    async CreateSchedulerMailProfile(req, cb) {
        return this.request("CreateSchedulerMailProfile", req, cb);
    }
    /**
     * 查询SQL模板。
     */
    async DescribeSqlTemplate(req, cb) {
        return this.request("DescribeSqlTemplate", req, cb);
    }
    /**
     * 获取实例Top库的实时空间统计信息，默认返回按大小排序。
     */
    async DescribeTopSpaceSchemas(req, cb) {
        return this.request("DescribeTopSpaceSchemas", req, cb);
    }
    /**
     * 查询关系型数据库的实时线程列表。
     */
    async DescribeMySqlProcessList(req, cb) {
        return this.request("DescribeMySqlProcessList", req, cb);
    }
    /**
     * 创建邮件配置。其中入参ProfileType表示所创建配置的类型，ProfileType 取值包括：dbScan_mail_configuration（数据库巡检邮件配置）、scheduler_mail_configuration（定期生成健康报告的邮件发送配置）。Region统一选择广州，和实例所属地域无关。
     */
    async CreateMailProfile(req, cb) {
        return this.request("CreateMailProfile", req, cb);
    }
    /**
     * 查询健康报告生成任务列表。
     */
    async DescribeDBDiagReportTasks(req, cb) {
        return this.request("DescribeDBDiagReportTasks", req, cb);
    }
    /**
     * 热Key分析
     */
    async DescribeRedisTopHotKeys(req, cb) {
        return this.request("DescribeRedisTopHotKeys", req, cb);
    }
    /**
     * 更新Agent实例状态（停止或重连实例）
     */
    async UpdateMonitorSwitch(req, cb) {
        return this.request("UpdateMonitorSwitch", req, cb);
    }
    /**
     * 修改实例的配置信息。
     */
    async ModifyDiagDBInstanceConf(req, cb) {
        return this.request("ModifyDiagDBInstanceConf", req, cb);
    }
    /**
     * 即时创建redis实例大key分析任务，限制正在运行的即时分析任务数量默认为5。
     */
    async CreateRedisBigKeyAnalysisTask(req, cb) {
        return this.request("CreateRedisBigKeyAnalysisTask", req, cb);
    }
    /**
     * 用于删除云数据库实例的审计日志文件。
     */
    async DeleteAuditLogFile(req, cb) {
        return this.request("DeleteAuditLogFile", req, cb);
    }
    /**
     * 获取邮件发送联系组的相关信息。
     */
    async DescribeAllUserGroup(req, cb) {
        return this.request("DescribeAllUserGroup", req, cb);
    }
    /**
     * 获取指定时间段内的诊断事件列表，支持依据风险等级、实例ID等条件过滤。
     */
    async DescribeDBDiagEvents(req, cb) {
        return this.request("DescribeDBDiagEvents", req, cb);
    }
    /**
     * 查询实例列表
     */
    async DescribeAuditInstanceList(req, cb) {
        return this.request("DescribeAuditInstanceList", req, cb);
    }
    /**
     * 删除Redis实例的大key分析任务。
     */
    async DeleteRedisBigKeyAnalysisTasks(req, cb) {
        return this.request("DeleteRedisBigKeyAnalysisTasks", req, cb);
    }
    /**
     * 获取实例占用空间最大的前几个库在指定时间段内的每日由DBbrain定时采集的空间数据，默认返回按大小排序。
     */
    async DescribeTopSpaceSchemaTimeSeries(req, cb) {
        return this.request("DescribeTopSpaceSchemaTimeSeries", req, cb);
    }
    /**
     * 获取慢日志统计柱状图。
     */
    async DescribeSlowLogTimeSeriesStats(req, cb) {
        return this.request("DescribeSlowLogTimeSeriesStats", req, cb);
    }
    /**
     * 获取 Redis 实例所有 proxy 节点的实时会话详情列表。
     */
    async DescribeRedisProcessList(req, cb) {
        return this.request("DescribeRedisProcessList", req, cb);
    }
    /**
     * 获取慢日志来源地址统计分布图。
     */
    async DescribeSlowLogUserHostStats(req, cb) {
        return this.request("DescribeSlowLogUserHostStats", req, cb);
    }
    /**
     * 按照Sql模板+schema的聚合方式，统计排序指定时间段内的top慢sql。
     */
    async DescribeSlowLogTopSqls(req, cb) {
        return this.request("DescribeSlowLogTopSqls", req, cb);
    }
    /**
     * 创建实例SQL限流任务。
     */
    async CreateSqlFilter(req, cb) {
        return this.request("CreateSqlFilter", req, cb);
    }
    /**
     * 获取指定时间段内的实例空间使用概览，包括磁盘增长量(MB)、磁盘剩余(MB)、磁盘总量(MB)及预计可用天数。
     */
    async DescribeDBSpaceStatus(req, cb) {
        return this.request("DescribeDBSpaceStatus", req, cb);
    }
    /**
     * 创建中止所有代理节点连接会话的异步任务。当前仅支持 Redis。得到的返回值为异步任务 id，可以作为参数传入接口 DescribeProxySessionKillTasks 查询kill会话任务执行状态。
     */
    async CreateProxySessionKillTask(req, cb) {
        return this.request("CreateProxySessionKillTask", req, cb);
    }
    /**
     * 根据实例ID获取指定时间段（30分钟）的健康得分，以及异常扣分项。
     */
    async DescribeHealthScore(req, cb) {
        return this.request("DescribeHealthScore", req, cb);
    }
    /**
     * 终止中断会话任务。
     */
    async CancelKillTask(req, cb) {
        return this.request("CancelKillTask", req, cb);
    }
    /**
     * 创建安全审计日志导出任务。
     */
    async CreateSecurityAuditLogExportTask(req, cb) {
        return this.request("CreateSecurityAuditLogExportTask", req, cb);
    }
    /**
     * 不用审计日志时，关闭数据库审计
     */
    async CloseAuditService(req, cb) {
        return this.request("CloseAuditService", req, cb);
    }
    /**
     * 获取SQL优化建议。【产品用户回馈，此接口限免开放，后续将并入dbbrain专业版】
     */
    async DescribeUserSqlAdvice(req, cb) {
        return this.request("DescribeUserSqlAdvice", req, cb);
    }
    /**
     * 删除安全审计日志导出任务。
     */
    async DeleteSecurityAuditLogExportTasks(req, cb) {
        return this.request("DeleteSecurityAuditLogExportTasks", req, cb);
    }
    /**
     * 更改实例限流任务状态，目前仅用于终止限流。
     */
    async ModifySqlFilters(req, cb) {
        return this.request("ModifySqlFilters", req, cb);
    }
    /**
     * 查询redis大key分析任务列表。
     */
    async DescribeRedisBigKeyAnalysisTasks(req, cb) {
        return this.request("DescribeRedisBigKeyAnalysisTasks", req, cb);
    }
    /**
     * 用于创建云数据库实例的审计日志文件，最多下载600w审计日志。
     */
    async CreateAuditLogFile(req, cb) {
        return this.request("CreateAuditLogFile", req, cb);
    }
    /**
     * 查询redis实例大key列表。
     */
    async DescribeRedisTopBigKeys(req, cb) {
        return this.request("DescribeRedisTopBigKeys", req, cb);
    }
    /**
     * 查询安全审计日志导出任务列表。
     */
    async DescribeSecurityAuditLogExportTasks(req, cb) {
        return this.request("DescribeSecurityAuditLogExportTasks", req, cb);
    }
    /**
     * 获取邮件发送中联系人的相关信息。
     */
    async DescribeAllUserContact(req, cb) {
        return this.request("DescribeAllUserContact", req, cb);
    }
    /**
     * 查询redis实例top key前缀列表。
     */
    async DescribeRedisTopKeyPrefixList(req, cb) {
        return this.request("DescribeRedisTopKeyPrefixList", req, cb);
    }
    /**
     * 获取指定时间内某个sql模板的慢日志明细
     */
    async DescribeSlowLogs(req, cb) {
        return this.request("DescribeSlowLogs", req, cb);
    }
    /**
     * 获取实例异常诊断事件的详情信息。
     */
    async DescribeDBDiagEvent(req, cb) {
        return this.request("DescribeDBDiagEvent", req, cb);
    }
    /**
     * 获取实例诊断事件的列表。
     */
    async DescribeDBDiagHistory(req, cb) {
        return this.request("DescribeDBDiagHistory", req, cb);
    }
    /**
     * 获取当前实例下的单个proxy的会话统计详情信息， 返回数据为单个 proxy 的会话统计信息。【注意】该接口仅限部分环境调用。
     */
    async DescribeProxyProcessStatistics(req, cb) {
        return this.request("DescribeProxyProcessStatistics", req, cb);
    }
    /**
     * 创建健康报告，并可以选择是否发送邮件。
     */
    async CreateDBDiagReportTask(req, cb) {
        return this.request("CreateDBDiagReportTask", req, cb);
    }
    /**
     * 获取实例信息列表。Region统一选择广州。
     */
    async DescribeDiagDBInstances(req, cb) {
        return this.request("DescribeDiagDBInstances", req, cb);
    }
    /**
     * 删除实例SQL限流任务。
     */
    async DeleteSqlFilters(req, cb) {
        return this.request("DeleteSqlFilters", req, cb);
    }
    /**
     * 修改告警策略
     */
    async ModifyAlarmPolicy(req, cb) {
        return this.request("ModifyAlarmPolicy", req, cb);
    }
    /**
     * 开启数据库审计服务
     */
    async OpenAuditService(req, cb) {
        return this.request("OpenAuditService", req, cb);
    }
    /**
     * 添加邮件接收联系人的姓名， 邮件地址，返回值为添加成功的联系人id。
     */
    async AddUserContact(req, cb) {
        return this.request("AddUserContact", req, cb);
    }
    /**
     * 查询实例的索引推荐信息，包括索引统计相关信息，推荐索引列表，无效索引列表等。
     */
    async DescribeIndexRecommendInfo(req, cb) {
        return this.request("DescribeIndexRecommendInfo", req, cb);
    }
    /**
     * 修改审计配置相关信息，如高频存储时长等
     */
    async ModifyAuditService(req, cb) {
        return this.request("ModifyAuditService", req, cb);
    }
    /**
     * 查询某张表的慢查模板概览
     */
    async DescribeIndexRecommendAggregationSlowLogs(req, cb) {
        return this.request("DescribeIndexRecommendAggregationSlowLogs", req, cb);
    }
    /**
     * 创建中断会话的任务。
     */
    async CreateKillTask(req, cb) {
        return this.request("CreateKillTask", req, cb);
    }
    /**
     * 更新agent状态（停止或重连Agent）
     */
    async UpdateAgentSwitch(req, cb) {
        return this.request("UpdateAgentSwitch", req, cb);
    }
    /**
     * 查询实例无主键表。
     */
    async DescribeNoPrimaryKeyTables(req, cb) {
        return this.request("DescribeNoPrimaryKeyTables", req, cb);
    }
    /**
     * 获取实例Top表的实时空间统计信息，默认返回按大小排序。
     */
    async DescribeTopSpaceTables(req, cb) {
        return this.request("DescribeTopSpaceTables", req, cb);
    }
    /**
     * 查询实例SQL限流任务列表。
     */
    async DescribeSqlFilters(req, cb) {
        return this.request("DescribeSqlFilters", req, cb);
    }
    /**
     * 通知模板查询
     */
    async DescribeAlarmTemplate(req, cb) {
        return this.request("DescribeAlarmTemplate", req, cb);
    }
    /**
     * 用于创建云数据库实例的审计日志文件
     */
    async DescribeAuditLogFiles(req, cb) {
        return this.request("DescribeAuditLogFiles", req, cb);
    }
    /**
     * 根据会话ID中断当前会话，该接口分为两次提交：第一次为预提交阶段，Stage为"Prepare"，得到的返回值包含SqlExecId；第二次为确认提交， Stage为"Commit"， 将SqlExecId的值作为参数传入，最终终止会话进程。
     */
    async KillMySqlThreads(req, cb) {
        return this.request("KillMySqlThreads", req, cb);
    }
    /**
     * 创建健康报告的浏览地址。
     */
    async CreateDBDiagReportUrl(req, cb) {
        return this.request("CreateDBDiagReportUrl", req, cb);
    }
    /**
     * 验证用户数据库账号权限，获取会话token。
     */
    async VerifyUserAccount(req, cb) {
        return this.request("VerifyUserAccount", req, cb);
    }
    /**
     * 用于查询 redis 执行 kill 会话任务后代理节点的执行结果，入参异步任务 ID 从接口 CreateProxySessionKillTask 调用成功后取得。当前 product 只支持：redis。
     */
    async DescribeProxySessionKillTasks(req, cb) {
        return this.request("DescribeProxySessionKillTasks", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248908, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20191016 = void 0;
const Models = require("./dbbrain_models");
const dbbrain_client_1 = require("./dbbrain_client");
exports.v20191016 = {
    Client: dbbrain_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./dbbrain_models":1738984248909,"./dbbrain_client":1738984248910}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248909, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248910, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * dbbrain client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("dbbrain.tencentcloudapi.com", "2019-10-16", clientConfig);
    }
    /**
     * 查询安全审计日志导出文件下载链接。目前日志文件下载仅提供腾讯云内网地址，请通过广州地域的腾讯云服务器进行下载。
     */
    async DescribeSecurityAuditLogDownloadUrls(req, cb) {
        return this.request("DescribeSecurityAuditLogDownloadUrls", req, cb);
    }
    /**
     * 获取发送邮件的配置， 包括数据库巡检的邮件配置以及定期生成健康报告的邮件发送配置。Region统一选择广州。
     */
    async DescribeMailProfile(req, cb) {
        return this.request("DescribeMailProfile", req, cb);
    }
    /**
     * 该接口用于创建定期生成健康报告并邮件发送的配置，将健康报告的定期生成时间作为参数传入（周一至周日），用于设置健康报告的定期生成时间，同时保存相应的定期邮件发送的配置。
     */
    async CreateSchedulerMailProfile(req, cb) {
        return this.request("CreateSchedulerMailProfile", req, cb);
    }
    /**
     * 获取实例Top库的实时空间统计信息，默认返回按大小排序。
     */
    async DescribeTopSpaceSchemas(req, cb) {
        return this.request("DescribeTopSpaceSchemas", req, cb);
    }
    /**
     * 查询健康报告生成任务列表。
     */
    async DescribeDBDiagReportTasks(req, cb) {
        return this.request("DescribeDBDiagReportTasks", req, cb);
    }
    /**
     * 获取邮件发送联系组的相关信息。
     */
    async DescribeAllUserGroup(req, cb) {
        return this.request("DescribeAllUserGroup", req, cb);
    }
    /**
     * 获取慢日志统计柱状图。
     */
    async DescribeSlowLogTimeSeriesStats(req, cb) {
        return this.request("DescribeSlowLogTimeSeriesStats", req, cb);
    }
    /**
     * 获取慢日志来源地址统计分布图。
     */
    async DescribeSlowLogUserHostStats(req, cb) {
        return this.request("DescribeSlowLogUserHostStats", req, cb);
    }
    /**
     * 获取实例Top表的实时空间统计信息，默认返回按大小排序。
     */
    async DescribeTopSpaceTables(req, cb) {
        return this.request("DescribeTopSpaceTables", req, cb);
    }
    /**
     * 获取指定时间段内的实例空间使用概览，包括磁盘增长量(MB)、磁盘剩余(MB)、磁盘总量(MB)及预计可用天数。
     */
    async DescribeDBSpaceStatus(req, cb) {
        return this.request("DescribeDBSpaceStatus", req, cb);
    }
    /**
     * 创建邮件配置。其中入参ProfileType表示所创建配置的类型，ProfileType 取值包括：dbScan_mail_configuration（数据库巡检邮件配置）、scheduler_mail_configuration（定期生成健康报告的邮件发送配置）。Region统一选择广州，和实例所属地域无关。
     */
    async CreateMailProfile(req, cb) {
        return this.request("CreateMailProfile", req, cb);
    }
    /**
     * 根据实例ID获取指定时间段（30分钟）的健康得分，以及异常扣分项。
     */
    async DescribeHealthScore(req, cb) {
        return this.request("DescribeHealthScore", req, cb);
    }
    /**
     * 创建安全审计日志导出任务。
     */
    async CreateSecurityAuditLogExportTask(req, cb) {
        return this.request("CreateSecurityAuditLogExportTask", req, cb);
    }
    /**
     * 删除安全审计日志导出任务。
     */
    async DeleteSecurityAuditLogExportTasks(req, cb) {
        return this.request("DeleteSecurityAuditLogExportTasks", req, cb);
    }
    /**
     * 按照Sql模板+schema的聚合方式，统计排序指定时间段内的top慢sql。
     */
    async DescribeSlowLogTopSqls(req, cb) {
        return this.request("DescribeSlowLogTopSqls", req, cb);
    }
    /**
     * 查询安全审计日志导出任务列表。
     */
    async DescribeSecurityAuditLogExportTasks(req, cb) {
        return this.request("DescribeSecurityAuditLogExportTasks", req, cb);
    }
    /**
     * 获取邮件发送中联系人的相关信息。
     */
    async DescribeAllUserContact(req, cb) {
        return this.request("DescribeAllUserContact", req, cb);
    }
    /**
     * 获取实例异常诊断事件的详情信息。
     */
    async DescribeDBDiagEvent(req, cb) {
        return this.request("DescribeDBDiagEvent", req, cb);
    }
    /**
     * 获取实例诊断事件的列表。
     */
    async DescribeDBDiagHistory(req, cb) {
        return this.request("DescribeDBDiagHistory", req, cb);
    }
    /**
     * 创建健康报告，并可以选择是否发送邮件。
     */
    async CreateDBDiagReportTask(req, cb) {
        return this.request("CreateDBDiagReportTask", req, cb);
    }
    /**
     * 获取实例信息列表。Region统一选择广州。
     */
    async DescribeDiagDBInstances(req, cb) {
        return this.request("DescribeDiagDBInstances", req, cb);
    }
    /**
     * 添加邮件接收联系人的姓名， 邮件地址，返回值为添加成功的联系人id。Region统一选择广州。
     */
    async AddUserContact(req, cb) {
        return this.request("AddUserContact", req, cb);
    }
    /**
     * 获取实例占用空间最大的前几个库在指定时间段内的每日由DBbrain定时采集的空间数据，默认返回按大小排序。
     */
    async DescribeTopSpaceSchemaTimeSeries(req, cb) {
        return this.request("DescribeTopSpaceSchemaTimeSeries", req, cb);
    }
    /**
     * 获取SQL优化建议。
     */
    async DescribeUserSqlAdvice(req, cb) {
        return this.request("DescribeUserSqlAdvice", req, cb);
    }
    /**
     * 获取实例占用空间最大的前几张表在指定时间段内的每日由DBbrain定时采集的空间数据，默认返回按大小排序。
     */
    async DescribeTopSpaceTableTimeSeries(req, cb) {
        return this.request("DescribeTopSpaceTableTimeSeries", req, cb);
    }
    /**
     * 修改实例巡检开关。
     */
    async ModifyDiagDBInstanceConf(req, cb) {
        return this.request("ModifyDiagDBInstanceConf", req, cb);
    }
    /**
     * 创建健康报告的浏览地址。
     */
    async CreateDBDiagReportUrl(req, cb) {
        return this.request("CreateDBDiagReportUrl", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248911, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.dbdc = void 0;
const v20201029_1 = require("./v20201029");
exports.dbdc = {
    v20201029: v20201029_1.v20201029,
};

}, function(modId) { var map = {"./v20201029":1738984248912}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248912, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201029 = void 0;
const Models = require("./dbdc_models");
const dbdc_client_1 = require("./dbdc_client");
exports.v20201029 = {
    Client: dbdc_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./dbdc_models":1738984248913,"./dbdc_client":1738984248914}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248913, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248914, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * dbdc client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("dbdc.tencentcloudapi.com", "2020-10-29", clientConfig);
    }
    /**
     * 本接口用于查询独享集群实例列表
     */
    async DescribeInstanceList(req, cb) {
        return this.request("DescribeInstanceList", req, cb);
    }
    /**
     * 根据不同地域不同用户，获取集群列表信息
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 本接口用于查询主机列表
     */
    async DescribeHostList(req, cb) {
        return this.request("DescribeHostList", req, cb);
    }
    /**
     * 本接口用于修改集群名称
     */
    async ModifyInstanceName(req, cb) {
        return this.request("ModifyInstanceName", req, cb);
    }
    /**
     * 本接口用于查询独享集群详情
     */
    async DescribeInstanceDetail(req, cb) {
        return this.request("DescribeInstanceDetail", req, cb);
    }
    /**
     * 本接口用于查询独享集群内的DB实例列表
     */
    async DescribeDBInstances(req, cb) {
        return this.request("DescribeDBInstances", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248915, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.dc = void 0;
const v20180410_1 = require("./v20180410");
exports.dc = {
    v20180410: v20180410_1.v20180410,
};

}, function(modId) { var map = {"./v20180410":1738984248916}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248916, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180410 = void 0;
const Models = require("./dc_models");
const dc_client_1 = require("./dc_client");
exports.v20180410 = {
    Client: dc_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./dc_models":1738984248917,"./dc_client":1738984248918}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248917, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248918, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * dc client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("dc.tencentcloudapi.com", "2018-04-10", clientConfig);
    }
    /**
     * 修改专用通道扩展信息。
     */
    async ModifyDirectConnectTunnelExtra(req, cb) {
        return this.request("ModifyDirectConnectTunnelExtra", req, cb);
    }
    /**
     * 获取用户互联网公网地址分配统计信息
     */
    async DescribeInternetAddressStatistics(req, cb) {
        return this.request("DescribeInternetAddressStatistics", req, cb);
    }
    /**
     * 删除物理专线。只能删除处于已连接状态的物理专线。
     */
    async DeleteDirectConnect(req, cb) {
        return this.request("DeleteDirectConnect", req, cb);
    }
    /**
     * 删除专用通道。
     */
    async DeleteDirectConnectTunnel(req, cb) {
        return this.request("DeleteDirectConnectTunnel", req, cb);
    }
    /**
     * 申请物理专线接入。
调用该接口时，请注意：
账号要进行实名认证，否则不允许申请物理专线；
若账户下存在欠费状态的物理专线，则不能申请更多的物理专线。
     */
    async CreateDirectConnect(req, cb) {
        return this.request("CreateDirectConnect", req, cb);
    }
    /**
     * 查询物理专线列表。
     */
    async DescribeDirectConnects(req, cb) {
        return this.request("DescribeDirectConnects", req, cb);
    }
    /**
     * 启用已停用的互联网公网地址
     */
    async EnableInternetAddress(req, cb) {
        return this.request("EnableInternetAddress", req, cb);
    }
    /**
     * 修改物理专线的属性。
     */
    async ModifyDirectConnectAttribute(req, cb) {
        return this.request("ModifyDirectConnectAttribute", req, cb);
    }
    /**
     * 查询专用通道扩展信息。
     */
    async DescribeDirectConnectTunnelExtra(req, cb) {
        return this.request("DescribeDirectConnectTunnelExtra", req, cb);
    }
    /**
     * 停用用户申请的公网互联网地址
     */
    async DisableInternetAddress(req, cb) {
        return this.request("DisableInternetAddress", req, cb);
    }
    /**
     * 查询互联网通道路由列表。
     */
    async DescribePublicDirectConnectTunnelRoutes(req, cb) {
        return this.request("DescribePublicDirectConnectTunnelRoutes", req, cb);
    }
    /**
     * 创建专用通道。
     */
    async CreateDirectConnectTunnel(req, cb) {
        return this.request("CreateDirectConnectTunnel", req, cb);
    }
    /**
     * 拒绝专用通道申请。
     */
    async RejectDirectConnectTunnel(req, cb) {
        return this.request("RejectDirectConnectTunnel", req, cb);
    }
    /**
     * 申请互联网CIDR地址
     */
    async ApplyInternetAddress(req, cb) {
        return this.request("ApplyInternetAddress", req, cb);
    }
    /**
     * 获取用户互联网公网地址配额
     */
    async DescribeInternetAddressQuota(req, cb) {
        return this.request("DescribeInternetAddressQuota", req, cb);
    }
    /**
     * 查询专用通道列表。
     */
    async DescribeDirectConnectTunnels(req, cb) {
        return this.request("DescribeDirectConnectTunnels", req, cb);
    }
    /**
     * 查询物理专线接入点。
     */
    async DescribeAccessPoints(req, cb) {
        return this.request("DescribeAccessPoints", req, cb);
    }
    /**
     * 创建敏捷上云服务
     */
    async CreateCloudAttachService(req, cb) {
        return this.request("CreateCloudAttachService", req, cb);
    }
    /**
     * 修改专用通道属性。
     */
    async ModifyDirectConnectTunnelAttribute(req, cb) {
        return this.request("ModifyDirectConnectTunnelAttribute", req, cb);
    }
    /**
     * 接受专用通道申请。
     */
    async AcceptDirectConnectTunnel(req, cb) {
        return this.request("AcceptDirectConnectTunnel", req, cb);
    }
    /**
     * 获取用户互联网公网地址信息
     */
    async DescribeInternetAddress(req, cb) {
        return this.request("DescribeInternetAddress", req, cb);
    }
    /**
     * 释放已申请的互联网地址
     */
    async ReleaseInternetAddress(req, cb) {
        return this.request("ReleaseInternetAddress", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248919, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.dcdb = void 0;
const v20180411_1 = require("./v20180411");
exports.dcdb = {
    v20180411: v20180411_1.v20180411,
};

}, function(modId) { var map = {"./v20180411":1738984248920}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248920, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180411 = void 0;
const Models = require("./dcdb_models");
const dcdb_client_1 = require("./dcdb_client");
exports.v20180411 = {
    Client: dcdb_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./dcdb_models":1738984248921,"./dcdb_client":1738984248922}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248921, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248922, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * dcdb client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("dcdb.tencentcloudapi.com", "2018-04-11", clientConfig);
    }
    /**
     * 本接口（DescribeAccountPrivileges）用于查询云数据库账号权限。
注意：注意：相同用户名，不同Host是不同的账号。
     */
    async DescribeAccountPrivileges(req, cb) {
        return this.request("DescribeAccountPrivileges", req, cb);
    }
    /**
     * 修改账号的一些配置，比如 max_user_connections
     */
    async ModifyAccountConfig(req, cb) {
        return this.request("ModifyAccountConfig", req, cb);
    }
    /**
     * 本接口（UpgradeDedicatedDCDBInstance）用于升级TDSQL独享集群实例
     */
    async UpgradeDedicatedDCDBInstance(req, cb) {
        return this.request("UpgradeDedicatedDCDBInstance", req, cb);
    }
    /**
     * 解隔离TDSQL按量计费实例
     */
    async ActiveHourDCDBInstance(req, cb) {
        return this.request("ActiveHourDCDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeDatabaseObjects）用于查询云数据库实例的数据库中的对象列表，包含表、存储过程、视图和函数。
     */
    async DescribeDatabaseObjects(req, cb) {
        return this.request("DescribeDatabaseObjects", req, cb);
    }
    /**
     * 本接口（DescribeDatabaseTable）用于查询云数据库实例的表信息。
     */
    async DescribeDatabaseTable(req, cb) {
        return this.request("DescribeDatabaseTable", req, cb);
    }
    /**
     * 查询可创建的分布式数据库可售卖的分片规格配置。
     */
    async DescribeShardSpec(req, cb) {
        return this.request("DescribeShardSpec", req, cb);
    }
    /**
     * 本接口（ResetAccountPassword）用于重置云数据库账号的密码。
注意：相同用户名，不同Host是不同的账号。
     */
    async ResetAccountPassword(req, cb) {
        return this.request("ResetAccountPassword", req, cb);
    }
    /**
     * 本接口（UpgradeDCDBInstance）用于升级分布式数据库实例。本接口完成下单和支付两个动作，如果发生支付失败的错误，调用用户账户相关接口中的支付订单接口（PayDeals）重新支付即可。
     */
    async UpgradeDCDBInstance(req, cb) {
        return this.request("UpgradeDCDBInstance", req, cb);
    }
    /**
     * 查询云数据库实例列表，支持通过项目ID、实例ID、内网地址、实例名称等来筛选实例。
如果不指定任何筛选条件，则默认返回10条实例记录，单次请求最多支持返回100条实例记录。
     */
    async DescribeDCDBInstances(req, cb) {
        return this.request("DescribeDCDBInstances", req, cb);
    }
    /**
     * 本接口(ModifyRealServerAccessStrategy)用于修改云数据库的VPCGW到RS的访问策略。

**注意**
- 修改策略后只对新建立的连接生效，老连接不受影响
- 就近访问只针对实例是跨可用区部署有用，单可用区部署实例就近与否并无作用
- DB每个Node对应一个proxy，如果开启就近访问，将会把连接集中到对应可用区的proxy上，可能造成热点问题，这种情况下如果是线上业务，请务必根据自己的业务请求量测试符合预期后再进行就近策略变更
     */
    async ModifyRealServerAccessStrategy(req, cb) {
        return this.request("ModifyRealServerAccessStrategy", req, cb);
    }
    /**
     * 本接口(DescribeFileDownloadUrl)用于获取数据库指定备份或日志文件的下载连接。
     */
    async DescribeFileDownloadUrl(req, cb) {
        return this.request("DescribeFileDownloadUrl", req, cb);
    }
    /**
     * 本接口（ModifyAccountDescription）用于修改云数据库账号备注。
注意：相同用户名，不同Host是不同的账号。
     */
    async ModifyAccountDescription(req, cb) {
        return this.request("ModifyAccountDescription", req, cb);
    }
    /**
     * 本接口（DescribeOrders）用于查询分布式数据库订单信息。传入订单ID来查询订单关联的分布式数据库实例，和对应的任务流程ID。
     */
    async DescribeOrders(req, cb) {
        return this.request("DescribeOrders", req, cb);
    }
    /**
     * 本接口（DescribeUserTasks）用于拉取用户任务列表
     */
    async DescribeUserTasks(req, cb) {
        return this.request("DescribeUserTasks", req, cb);
    }
    /**
     * 本接口（DescribeDCDBPrice）用于在购买实例前，查询实例的价格。
     */
    async DescribeDCDBPrice(req, cb) {
        return this.request("DescribeDCDBPrice", req, cb);
    }
    /**
     * 本接口(ModifyDBParameters)用于修改数据库参数。
     */
    async ModifyDBParameters(req, cb) {
        return this.request("ModifyDBParameters", req, cb);
    }
    /**
     * 本接口(DescribeDCDBSaleInfo)用于查询分布式数据库可售卖的地域和可用区信息。
     */
    async DescribeDCDBSaleInfo(req, cb) {
        return this.request("DescribeDCDBSaleInfo", req, cb);
    }
    /**
     * 本接口(DescribeDBSlowLogs)用于查询慢查询日志列表。
     */
    async DescribeDBSlowLogs(req, cb) {
        return this.request("DescribeDBSlowLogs", req, cb);
    }
    /**
     * 本接口（DescribeFlow）用于查询流程状态
     */
    async DescribeFlow(req, cb) {
        return this.request("DescribeFlow", req, cb);
    }
    /**
     * 本接口(SwitchDBInstanceHA)用于实例主备切换。
     */
    async SwitchDBInstanceHA(req, cb) {
        return this.request("SwitchDBInstanceHA", req, cb);
    }
    /**
     * 本接口(InitDCDBInstances)用于初始化云数据库实例，包括设置默认字符集、表名大小写敏感等。
     */
    async InitDCDBInstances(req, cb) {
        return this.request("InitDCDBInstances", req, cb);
    }
    /**
     * 本接口（DescribeDCDBInstanceDetail）用于获取TDSQL实例详情
     */
    async DescribeDCDBInstanceDetail(req, cb) {
        return this.request("DescribeDCDBInstanceDetail", req, cb);
    }
    /**
     * 创建TDSQL独享集群实例
     */
    async CreateDedicatedClusterDCDBInstance(req, cb) {
        return this.request("CreateDedicatedClusterDCDBInstance", req, cb);
    }
    /**
     * 本接口（RenewDCDBInstance）用于续费分布式数据库实例。
     */
    async RenewDCDBInstance(req, cb) {
        return this.request("RenewDCDBInstance", req, cb);
    }
    /**
     * 本接口（DeleteAccount）用于删除云数据库账号。用户名+host唯一确定一个账号。
     */
    async DeleteAccount(req, cb) {
        return this.request("DeleteAccount", req, cb);
    }
    /**
     * 本接口(DescribeDBParameters)用于获取数据库的当前参数设置。
     */
    async DescribeDBParameters(req, cb) {
        return this.request("DescribeDBParameters", req, cb);
    }
    /**
     * 本接口（ModifyDBInstancesProject）用于修改云数据库实例所属项目。
     */
    async ModifyDBInstancesProject(req, cb) {
        return this.request("ModifyDBInstancesProject", req, cb);
    }
    /**
     * 回档TDSQL实例
     */
    async CreateTmpDCDBInstance(req, cb) {
        return this.request("CreateTmpDCDBInstance", req, cb);
    }
    /**
     * 本接口（KillSession）用于杀死指定会话。
     */
    async KillSession(req, cb) {
        return this.request("KillSession", req, cb);
    }
    /**
     * 本接口(DescribeDBLogFiles)用于获取数据库的各种日志列表，包括冷备、binlog、errlog和slowlog。
     */
    async DescribeDBLogFiles(req, cb) {
        return this.request("DescribeDBLogFiles", req, cb);
    }
    /**
     * 隔离TDSQL按量计费实例
     */
    async IsolateHourDCDBInstance(req, cb) {
        return this.request("IsolateHourDCDBInstance", req, cb);
    }
    /**
     * 本接口（UpgradeHourDCDBInstance）用于升级分布式数据库TDSQL按量计费实例。
     */
    async UpgradeHourDCDBInstance(req, cb) {
        return this.request("UpgradeHourDCDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeDBSyncMode）用于查询云数据库实例的同步模式。
     */
    async DescribeDBSyncMode(req, cb) {
        return this.request("DescribeDBSyncMode", req, cb);
    }
    /**
     * 获取实例回档时可选的时间范围
     */
    async DescribeDCDBBinlogTime(req, cb) {
        return this.request("DescribeDCDBBinlogTime", req, cb);
    }
    /**
     * 本接口（DescribeProjectSecurityGroups）用于查询项目安全组信息
     */
    async DescribeProjectSecurityGroups(req, cb) {
        return this.request("DescribeProjectSecurityGroups", req, cb);
    }
    /**
     * 本接口 (AssociateSecurityGroups) 用于安全组批量绑定云资源。
     */
    async AssociateSecurityGroups(req, cb) {
        return this.request("AssociateSecurityGroups", req, cb);
    }
    /**
     * 本接口（CreateAccount）用于创建云数据库账号。一个实例可以创建多个不同的账号，相同的用户名+不同的host是不同的账号。
     */
    async CreateAccount(req, cb) {
        return this.request("CreateAccount", req, cb);
    }
    /**
     * 本接口（ModifyInstanceNetwork）用于修改实例所属网络。
     */
    async ModifyInstanceNetwork(req, cb) {
        return this.request("ModifyInstanceNetwork", req, cb);
    }
    /**
     * 本接口（OpenDBExtranetAccess）用于开通云数据库实例的外网访问。开通外网访问后，您可通过外网域名和端口访问实例，可使用查询实例列表接口获取外网域名和端口信息。
     */
    async OpenDBExtranetAccess(req, cb) {
        return this.request("OpenDBExtranetAccess", req, cb);
    }
    /**
     * 本接口(ModifyAccountPrivileges)用于修改云数据库的账户的权限信息。

**注意**
- 系统保留库："mysql"，只开放["SELECT"]权限
- 只读账号授予读写权限会报错
- 不传权限参数表示保留现有权限，如需清除，请在复杂类型Privileges字段传空数组
     */
    async ModifyAccountPrivileges(req, cb) {
        return this.request("ModifyAccountPrivileges", req, cb);
    }
    /**
     * 本接口(DestroyDCDBInstance)用于销毁已隔离的TDSQL包年包月实例。
     */
    async DestroyDCDBInstance(req, cb) {
        return this.request("DestroyDCDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeDCDBInstanceNodeInfo）用于获取实例节点信息
     */
    async DescribeDCDBInstanceNodeInfo(req, cb) {
        return this.request("DescribeDCDBInstanceNodeInfo", req, cb);
    }
    /**
     * 本接口（ModifyDBSyncMode）用于修改云数据库实例的同步模式。
     */
    async ModifyDBSyncMode(req, cb) {
        return this.request("ModifyDBSyncMode", req, cb);
    }
    /**
     * 本接口(DescribeLogFileRetentionPeriod)用于查看数据库备份日志的备份天数的设置情况。
     */
    async DescribeLogFileRetentionPeriod(req, cb) {
        return this.request("DescribeLogFileRetentionPeriod", req, cb);
    }
    /**
     * 本接口(CloseDBExtranetAccess)用于关闭云数据库实例的外网访问。关闭外网访问后，外网地址将不可访问，查询实例列表接口将不返回对应实例的外网域名和端口信息。
     */
    async CloseDBExtranetAccess(req, cb) {
        return this.request("CloseDBExtranetAccess", req, cb);
    }
    /**
     * 本接口(DescribeBackupFiles)用于查看备份文件列表。
     */
    async DescribeBackupFiles(req, cb) {
        return this.request("DescribeBackupFiles", req, cb);
    }
    /**
     * 本接口(ModifyDBEncryptAttributes)用于修改实例数据加密。
     */
    async ModifyDBEncryptAttributes(req, cb) {
        return this.request("ModifyDBEncryptAttributes", req, cb);
    }
    /**
     * 本接口（DestroyHourDCDBInstance）用于TDSQL销毁按量计费实例。
     */
    async DestroyHourDCDBInstance(req, cb) {
        return this.request("DestroyHourDCDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeAccounts）用于查询指定云数据库实例的账号列表。
     */
    async DescribeAccounts(req, cb) {
        return this.request("DescribeAccounts", req, cb);
    }
    /**
     * 获取实例灾备详情
     */
    async DescribeDcnDetail(req, cb) {
        return this.request("DescribeDcnDetail", req, cb);
    }
    /**
     * 相当于在所有分片的mysqld中执行flush logs，完成切分的binlog将展示在各个分片控制台binlog列表里。
     */
    async FlushBinlog(req, cb) {
        return this.request("FlushBinlog", req, cb);
    }
    /**
     * 本接口（GrantAccountPrivileges）用于给云数据库账号赋权。
注意：相同用户名，不同Host是不同的账号。
     */
    async GrantAccountPrivileges(req, cb) {
        return this.request("GrantAccountPrivileges", req, cb);
    }
    /**
     * 本接口（IsolateDedicatedDBInstance）用于隔离独享云数据库实例。
     */
    async IsolateDedicatedDBInstance(req, cb) {
        return this.request("IsolateDedicatedDBInstance", req, cb);
    }
    /**
     * 本接口（CopyAccountPrivileges）用于复制云数据库账号的权限。
注意：相同用户名，不同Host是不同的账号，Readonly属性相同的账号之间才能复制权限。
     */
    async CopyAccountPrivileges(req, cb) {
        return this.request("CopyAccountPrivileges", req, cb);
    }
    /**
     * 本接口（DescribeDBTmpInstances）用于获取实例回档生成的临时实例
     */
    async DescribeDBTmpInstances(req, cb) {
        return this.request("DescribeDBTmpInstances", req, cb);
    }
    /**
     * 本接口（DescribeDCDBShards）用于查询云数据库实例的分片信息。
     */
    async DescribeDCDBShards(req, cb) {
        return this.request("DescribeDCDBShards", req, cb);
    }
    /**
     * 本接口（DescribeDatabases）用于查询云数据库实例的数据库列表。
     */
    async DescribeDatabases(req, cb) {
        return this.request("DescribeDatabases", req, cb);
    }
    /**
     * 本接口（CreateDCDBInstance）用于创建包年包月的TDSQL实例，可通过传入实例规格、数据库版本号、购买时长等信息创建云数据库实例。
     */
    async CreateDCDBInstance(req, cb) {
        return this.request("CreateDCDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeProjects）用于查询项目列表
     */
    async DescribeProjects(req, cb) {
        return this.request("DescribeProjects", req, cb);
    }
    /**
     * 本接口(IsolateDCDBInstance)用于隔离分布式数据库TDSQL实例（包年包月），隔离后不能通过IP和端口访问数据库。隔离的实例可在回收站中进行开机。若为欠费隔离，请尽快进行充值。
     */
    async IsolateDCDBInstance(req, cb) {
        return this.request("IsolateDCDBInstance", req, cb);
    }
    /**
     * 本接口（ModifyInstanceVport）用于修改实例VPORT
     */
    async ModifyInstanceVport(req, cb) {
        return this.request("ModifyInstanceVport", req, cb);
    }
    /**
     * 本接口（TerminateDedicatedDBInstance）用于销毁已隔离的独享分布式数据库实例。
     */
    async TerminateDedicatedDBInstance(req, cb) {
        return this.request("TerminateDedicatedDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeDBSecurityGroups）用于查询实例安全组信息
     */
    async DescribeDBSecurityGroups(req, cb) {
        return this.request("DescribeDBSecurityGroups", req, cb);
    }
    /**
     * 本接口（ModifyInstanceVip）用于修改实例Vip
     */
    async ModifyInstanceVip(req, cb) {
        return this.request("ModifyInstanceVip", req, cb);
    }
    /**
     * 本接口（DescribeDCDBUpgradePrice）用于查询变配分布式数据库实例价格。
     */
    async DescribeDCDBUpgradePrice(req, cb) {
        return this.request("DescribeDCDBUpgradePrice", req, cb);
    }
    /**
     * 本接口（CancelDcnJob）用于取消DCN同步
     */
    async CancelDcnJob(req, cb) {
        return this.request("CancelDcnJob", req, cb);
    }
    /**
     * 本接口(DescribeBackupConfigs)用于查询数据库备份配置信息。
     */
    async DescribeBackupConfigs(req, cb) {
        return this.request("DescribeBackupConfigs", req, cb);
    }
    /**
     * 本接口（CloneAccount）用于克隆实例账户。
     */
    async CloneAccount(req, cb) {
        return this.request("CloneAccount", req, cb);
    }
    /**
     * 创建在线DDL任务
     */
    async CreateOnlineDDLJob(req, cb) {
        return this.request("CreateOnlineDDLJob", req, cb);
    }
    /**
     * 本接口(ModifyBackupConfigs)用于修改数据库备份配置信息。

1. 修改数据库超期备份配置，目前按年、按月、按日只支持一种，存在互斥关系，如当前策略按年备份，如果传入按月备份策略将会覆盖当前的按年备份策略，务必注意。
     */
    async ModifyBackupConfigs(req, cb) {
        return this.request("ModifyBackupConfigs", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceName）用于修改实例名字
     */
    async ModifyDBInstanceName(req, cb) {
        return this.request("ModifyDBInstanceName", req, cb);
    }
    /**
     * 创建TDSQL按量计费实例
     */
    async CreateHourDCDBInstance(req, cb) {
        return this.request("CreateHourDCDBInstance", req, cb);
    }
    /**
     * 本接口(DisassociateSecurityGroups)用于安全组批量解绑实例。
     */
    async DisassociateSecurityGroups(req, cb) {
        return this.request("DisassociateSecurityGroups", req, cb);
    }
    /**
     * 本接口(DescribeDBEncryptAttributes)用于查询实例数据加密状态。
     */
    async DescribeDBEncryptAttributes(req, cb) {
        return this.request("DescribeDBEncryptAttributes", req, cb);
    }
    /**
     * 本接口（DescribeDCDBRenewalPrice）用于在续费分布式数据库实例时，查询续费的价格。
     */
    async DescribeDCDBRenewalPrice(req, cb) {
        return this.request("DescribeDCDBRenewalPrice", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceSecurityGroups）用于修改云数据库安全组
     */
    async ModifyDBInstanceSecurityGroups(req, cb) {
        return this.request("ModifyDBInstanceSecurityGroups", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248923, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.dlc = void 0;
const v20210125_1 = require("./v20210125");
exports.dlc = {
    v20210125: v20210125_1.v20210125,
};

}, function(modId) { var map = {"./v20210125":1738984248924}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248924, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210125 = void 0;
const Models = require("./dlc_models");
const dlc_client_1 = require("./dlc_client");
exports.v20210125 = {
    Client: dlc_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./dlc_models":1738984248925,"./dlc_client":1738984248926}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248925, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248926, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * dlc client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("dlc.tencentcloudapi.com", "2021-01-25", clientConfig);
    }
    /**
     * 本接口（CreateTask）用于创建并执行SQL任务。（推荐使用CreateTasks接口）
     */
    async CreateTask(req, cb) {
        return this.request("CreateTask", req, cb);
    }
    /**
     * 添加用户到工作组
     */
    async AddUsersToWorkGroup(req, cb) {
        return this.request("AddUsersToWorkGroup", req, cb);
    }
    /**
     * DMS元数据更新表
     */
    async AlterDMSTable(req, cb) {
        return this.request("AlterDMSTable", req, cb);
    }
    /**
     * 本接口（DescribeForbiddenTablePro）用于查询被禁用的表属性列表（新）
     */
    async DescribeForbiddenTablePro(req, cb) {
        return this.request("DescribeForbiddenTablePro", req, cb);
    }
    /**
     * 列举用户角色信息
     */
    async DescribeUserRoles(req, cb) {
        return this.request("DescribeUserRoles", req, cb);
    }
    /**
     * 修改用户类型。只有管理员用户能够调用该接口进行操作
     */
    async ModifyUserType(req, cb) {
        return this.request("ModifyUserType", req, cb);
    }
    /**
     * 获取工作组详细信息
     */
    async DescribeWorkGroupInfo(req, cb) {
        return this.request("DescribeWorkGroupInfo", req, cb);
    }
    /**
     * 本接口（ListTaskJobLogName）用于获取spark-jar日志名称列表
     */
    async ListTaskJobLogName(req, cb) {
        return this.request("ListTaskJobLogName", req, cb);
    }
    /**
     * 本接口（DescribeNotebookSession）用于查询交互式 session详情信息
     */
    async DescribeNotebookSession(req, cb) {
        return this.request("DescribeNotebookSession", req, cb);
    }
    /**
     * 本接口（CreateNotebookSession）用于创建交互式session（notebook）
     */
    async CreateNotebookSession(req, cb) {
        return this.request("CreateNotebookSession", req, cb);
    }
    /**
     * 删除工作组
     */
    async DeleteWorkGroup(req, cb) {
        return this.request("DeleteWorkGroup", req, cb);
    }
    /**
     * 元数据解锁
     */
    async UnlockMetaData(req, cb) {
        return this.request("UnlockMetaData", req, cb);
    }
    /**
     * 本接口根据名称用于获取数据引擎详细信息
     */
    async DescribeDataEngine(req, cb) {
        return this.request("DescribeDataEngine", req, cb);
    }
    /**
     * 该接口（CreateStoreLocation）新增或覆盖计算结果存储位置。
     */
    async CreateStoreLocation(req, cb) {
        return this.request("CreateStoreLocation", req, cb);
    }
    /**
     * 本接口（CreateNotebookSessionStatementSupportBatchSQL）用于创建交互式session并执行SQL任务
     */
    async CreateNotebookSessionStatementSupportBatchSQL(req, cb) {
        return this.request("CreateNotebookSessionStatementSupportBatchSQL", req, cb);
    }
    /**
     * 切换主备集群
     */
    async SwitchDataEngine(req, cb) {
        return this.request("SwitchDataEngine", req, cb);
    }
    /**
     * 本接口（DescribeDataEngines）用于查询DataEngines信息列表.
     */
    async DescribeDataEngines(req, cb) {
        return this.request("DescribeDataEngines", req, cb);
    }
    /**
     * DMS元数据获取分区
     */
    async DescribeDMSPartitions(req, cb) {
        return this.request("DescribeDMSPartitions", req, cb);
    }
    /**
     * 本接口（CancelTask），用于取消任务
     */
    async CancelTask(req, cb) {
        return this.request("CancelTask", req, cb);
    }
    /**
     * 查询DLC Catalog授权列表
     */
    async DescribeDLCCatalogAccess(req, cb) {
        return this.request("DescribeDLCCatalogAccess", req, cb);
    }
    /**
     * DMS元数据获取表列表
     */
    async DescribeDMSTables(req, cb) {
        return this.request("DescribeDMSTables", req, cb);
    }
    /**
     * 获取用户类型
     */
    async DescribeUserType(req, cb) {
        return this.request("DescribeUserType", req, cb);
    }
    /**
     * 该接口（DescribleTasks）用于查询任务列表
     */
    async DescribeTasks(req, cb) {
        return this.request("DescribeTasks", req, cb);
    }
    /**
     * 该接口（DeleteScript）用于删除sql脚本。
     */
    async DeleteScript(req, cb) {
        return this.request("DeleteScript", req, cb);
    }
    /**
     * 切换引擎镜像版本
     */
    async SwitchDataEngineImage(req, cb) {
        return this.request("SwitchDataEngineImage", req, cb);
    }
    /**
     * 启动Spark作业
     */
    async CreateSparkAppTask(req, cb) {
        return this.request("CreateSparkAppTask", req, cb);
    }
    /**
     * 此接口（DescribeOtherCHDFSBindingList）用于查询其他产品元数据加速桶绑定列表
     */
    async DescribeOtherCHDFSBindingList(req, cb) {
        return this.request("DescribeOtherCHDFSBindingList", req, cb);
    }
    /**
     * 查询托管存储指定目录的Summary
     */
    async DescribeLakeFsDirSummary(req, cb) {
        return this.request("DescribeLakeFsDirSummary", req, cb);
    }
    /**
     * 本接口（DescribeDatabases）用于查询数据库列表。
     */
    async DescribeDatabases(req, cb) {
        return this.request("DescribeDatabases", req, cb);
    }
    /**
     * 本接口（DescribeNotebookSessions）用于查询交互式 session列表
     */
    async DescribeNotebookSessions(req, cb) {
        return this.request("DescribeNotebookSessions", req, cb);
    }
    /**
     * 本接口（RegisterThirdPartyAccessUser）查询开通第三方平台访问的用户信息
     */
    async DescribeThirdPartyAccessUser(req, cb) {
        return this.request("DescribeThirdPartyAccessUser", req, cb);
    }
    /**
     * 撤销DLC Catalog访问权限
     */
    async RevokeDLCCatalogAccess(req, cb) {
        return this.request("RevokeDLCCatalogAccess", req, cb);
    }
    /**
     * 创建用户
     */
    async CreateUser(req, cb) {
        return this.request("CreateUser", req, cb);
    }
    /**
     * 本接口（DescribeTables）用于查询数据表列表。
     */
    async DescribeTables(req, cb) {
        return this.request("DescribeTables", req, cb);
    }
    /**
     * 本接口（ModifySparkAppBatch）用于批量修改Spark作业参数配置
     */
    async ModifySparkAppBatch(req, cb) {
        return this.request("ModifySparkAppBatch", req, cb);
    }
    /**
     * DMS元数据更新分区
     */
    async AlterDMSPartition(req, cb) {
        return this.request("AlterDMSPartition", req, cb);
    }
    /**
     * 获取LakeFs上task执行结果访问信息
     */
    async DescribeLakeFsTaskResult(req, cb) {
        return this.request("DescribeLakeFsTaskResult", req, cb);
    }
    /**
     * 添加数据优化资源
     */
    async AddOptimizerEngines(req, cb) {
        return this.request("AddOptimizerEngines", req, cb);
    }
    /**
     * 此接口用于更新行过滤规则。注意只能更新过滤规则，不能更新规格对象catalog，database和table。
     */
    async UpdateRowFilter(req, cb) {
        return this.request("UpdateRowFilter", req, cb);
    }
    /**
     * 查询sql查询界面高级设置
     */
    async DescribeAdvancedStoreLocation(req, cb) {
        return this.request("DescribeAdvancedStoreLocation", req, cb);
    }
    /**
     * 元数据锁
     */
    async LockMetaData(req, cb) {
        return this.request("LockMetaData", req, cb);
    }
    /**
     * 查询spark作业列表
     */
    async DescribeSparkAppJobs(req, cb) {
        return this.request("DescribeSparkAppJobs", req, cb);
    }
    /**
     * 获取用户列表信息
     */
    async DescribeUsers(req, cb) {
        return this.request("DescribeUsers", req, cb);
    }
    /**
     * 本接口（CreateTasks），用于批量创建并执行SQL任务
     */
    async CreateTasks(req, cb) {
        return this.request("CreateTasks", req, cb);
    }
    /**
     * 该接口（DescribeScripts）用于查询SQL脚本列表
     */
    async DescribeScripts(req, cb) {
        return this.request("DescribeScripts", req, cb);
    }
    /**
     * 修改工作组信息
     */
    async ModifyWorkGroup(req, cb) {
        return this.request("ModifyWorkGroup", req, cb);
    }
    /**
     * 本接口（DescribeTables）用于查询数据表名称列表
     */
    async DescribeTablesName(req, cb) {
        return this.request("DescribeTablesName", req, cb);
    }
    /**
     * 此接口（DeleteCHDFSBindingProduct）用于删除元数据加速桶和产品绑定关系
     */
    async DeleteCHDFSBindingProduct(req, cb) {
        return this.request("DeleteCHDFSBindingProduct", req, cb);
    }
    /**
     * 上报元数据心跳
     */
    async ReportHeartbeatMetaData(req, cb) {
        return this.request("ReportHeartbeatMetaData", req, cb);
    }
    /**
     * 分配原生表表属性
     */
    async AssignMangedTableProperties(req, cb) {
        return this.request("AssignMangedTableProperties", req, cb);
    }
    /**
     * 查询可更新配置的引擎列表
     */
    async DescribeUpdatableDataEngines(req, cb) {
        return this.request("DescribeUpdatableDataEngines", req, cb);
    }
    /**
     * 创建托管存储内表（该接口已废弃）
     */
    async CreateInternalTable(req, cb) {
        return this.request("CreateInternalTable", req, cb);
    }
    /**
     * 生成创建托管表语句
     */
    async GenerateCreateMangedTableSql(req, cb) {
        return this.request("GenerateCreateMangedTableSql", req, cb);
    }
    /**
     * 绑定鉴权策略到工作组
     */
    async AttachWorkGroupPolicy(req, cb) {
        return this.request("AttachWorkGroupPolicy", req, cb);
    }
    /**
     * 查询引擎规格详情
     */
    async DescribeDataEnginesScaleDetail(req, cb) {
        return this.request("DescribeDataEnginesScaleDetail", req, cb);
    }
    /**
     * 创建spark作业
     */
    async CreateSparkApp(req, cb) {
        return this.request("CreateSparkApp", req, cb);
    }
    /**
     * 本接口（CreateDatabase）用于生成建库SQL语句。
     */
    async CreateDatabase(req, cb) {
        return this.request("CreateDatabase", req, cb);
    }
    /**
     * 回滚引擎镜像版本
     */
    async RollbackDataEngineImage(req, cb) {
        return this.request("RollbackDataEngineImage", req, cb);
    }
    /**
     * 本接口（DescribeSubUserAccessPolicy）用于开通了第三方平台访问的用户，查询其子用户的访问策略
     */
    async DescribeSubUserAccessPolicy(req, cb) {
        return this.request("DescribeSubUserAccessPolicy", req, cb);
    }
    /**
     * 本接口（CreateSparkSessionBatchSQL）用于向Spark作业引擎提交Spark SQL批任务。
     */
    async CreateSparkSessionBatchSQL(req, cb) {
        return this.request("CreateSparkSessionBatchSQL", req, cb);
    }
    /**
     * 本接口（DescribeNotebookSessionStatements）用于查询Session中执行的任务列表
     */
    async DescribeNotebookSessionStatements(req, cb) {
        return this.request("DescribeNotebookSessionStatements", req, cb);
    }
    /**
     * 授权访问DLC Catalog
     */
    async GrantDLCCatalogAccess(req, cb) {
        return this.request("GrantDLCCatalogAccess", req, cb);
    }
    /**
     * 本接口用于控制挂起或启动数据引擎
     */
    async SuspendResumeDataEngine(req, cb) {
        return this.request("SuspendResumeDataEngine", req, cb);
    }
    /**
     * DMS元数据创建库
     */
    async CreateDMSDatabase(req, cb) {
        return this.request("CreateDMSDatabase", req, cb);
    }
    /**
     * 绑定鉴权策略到用户
     */
    async AttachUserPolicy(req, cb) {
        return this.request("AttachUserPolicy", req, cb);
    }
    /**
     * 修改数据治理事件阈值
     */
    async ModifyGovernEventRule(req, cb) {
        return this.request("ModifyGovernEventRule", req, cb);
    }
    /**
     * 创建查询结果下载任务
     */
    async CreateResultDownload(req, cb) {
        return this.request("CreateResultDownload", req, cb);
    }
    /**
     * 修改sql查询界面高级设置。
     */
    async ModifyAdvancedStoreLocation(req, cb) {
        return this.request("ModifyAdvancedStoreLocation", req, cb);
    }
    /**
     * 本接口（DescribeNotebookSessionStatementSqlResult）用于获取statement运行结果。
     */
    async DescribeNotebookSessionStatementSqlResult(req, cb) {
        return this.request("DescribeNotebookSessionStatementSqlResult", req, cb);
    }
    /**
     * 本接口（CreateNotebookSessionStatement）用于在session中执行代码片段
     */
    async CreateNotebookSessionStatement(req, cb) {
        return this.request("CreateNotebookSessionStatement", req, cb);
    }
    /**
     * DMS元数据更新库
     */
    async AlterDMSDatabase(req, cb) {
        return this.request("AlterDMSDatabase", req, cb);
    }
    /**
     * 本接口（DescribeSparkSessionBatchSQL）用于查询Spark SQL批任务运行状态
     */
    async DescribeSparkSessionBatchSQL(req, cb) {
        return this.request("DescribeSparkSessionBatchSQL", req, cb);
    }
    /**
     * DMS元数据删除库
     */
    async DropDMSDatabase(req, cb) {
        return this.request("DropDMSDatabase", req, cb);
    }
    /**
     * DMS元数据新增分区
     */
    async AddDMSPartitions(req, cb) {
        return this.request("AddDMSPartitions", req, cb);
    }
    /**
     * 修改用户引擎自定义配置
     */
    async UpdateUserDataEngineConfig(req, cb) {
        return this.request("UpdateUserDataEngineConfig", req, cb);
    }
    /**
     * 本接口（CancelNotebookSessionStatementBatch）用于批量取消Session 中执行的任务
     */
    async CancelNotebookSessionStatementBatch(req, cb) {
        return this.request("CancelNotebookSessionStatementBatch", req, cb);
    }
    /**
     * 本接口（CheckDataEngineImageCanBeUpgrade）用于查看集群镜像是否能够升级。
     */
    async CheckDataEngineImageCanBeUpgrade(req, cb) {
        return this.request("CheckDataEngineImageCanBeUpgrade", req, cb);
    }
    /**
     * 删除spark作业
     */
    async DeleteSparkApp(req, cb) {
        return this.request("DeleteSparkApp", req, cb);
    }
    /**
     * 本接口（DescribeNotebookSessionLog）用于查询交互式 session日志
     */
    async DescribeNotebookSessionLog(req, cb) {
        return this.request("DescribeNotebookSessionLog", req, cb);
    }
    /**
     * 该接口（DescribeTasksCostInfo）用于查询任务消耗
     */
    async DescribeTasksCostInfo(req, cb) {
        return this.request("DescribeTasksCostInfo", req, cb);
    }
    /**
     * 查询结果下载任务
     */
    async DescribeResultDownload(req, cb) {
        return this.request("DescribeResultDownload", req, cb);
    }
    /**
     * DMS元数据获取表
     */
    async DescribeDMSTable(req, cb) {
        return this.request("DescribeDMSTable", req, cb);
    }
    /**
     * 该接口（QueryTaskCostDetail）用于查询任务消耗明细
     */
    async QueryTaskCostDetail(req, cb) {
        return this.request("QueryTaskCostDetail", req, cb);
    }
    /**
     * DMS元数据删除分区
     */
    async DropDMSPartitions(req, cb) {
        return this.request("DropDMSPartitions", req, cb);
    }
    /**
     * 创建工作组
     */
    async CreateWorkGroup(req, cb) {
        return this.request("CreateWorkGroup", req, cb);
    }
    /**
     * 此接口（CreateCHDFSBindingProduct）用于创建元数据加速桶和产品绑定关系
     */
    async CreateCHDFSBindingProduct(req, cb) {
        return this.request("CreateCHDFSBindingProduct", req, cb);
    }
    /**
     * 本接口（QueryInternalTableWarehouse）用于获取原生表warehouse路径
     */
    async QueryInternalTableWarehouse(req, cb) {
        return this.request("QueryInternalTableWarehouse", req, cb);
    }
    /**
     * 本接口（DescribeDatasourceConnection）用于查询数据源信息
     */
    async DescribeDatasourceConnection(req, cb) {
        return this.request("DescribeDatasourceConnection", req, cb);
    }
    /**
     * 本接口（CheckDataEngineImageCanBeRollback）用于查看集群是否能回滚。
     */
    async CheckDataEngineImageCanBeRollback(req, cb) {
        return this.request("CheckDataEngineImageCanBeRollback", req, cb);
    }
    /**
     * 本接口（CancelSparkSessionBatchSQL）用于取消Spark SQL批任务。
     */
    async CancelSparkSessionBatchSQL(req, cb) {
        return this.request("CancelSparkSessionBatchSQL", req, cb);
    }
    /**
     * 修改用户信息
     */
    async ModifyUser(req, cb) {
        return this.request("ModifyUser", req, cb);
    }
    /**
     * 本接口（DescribeSparkSessionBatchSqlLog）用于查询Spark SQL批任务日志
     */
    async DescribeSparkSessionBatchSqlLog(req, cb) {
        return this.request("DescribeSparkSessionBatchSqlLog", req, cb);
    }
    /**
     * 本接口（DescribeTable），用于查询单个表的详细信息。
     */
    async DescribeTable(req, cb) {
        return this.request("DescribeTable", req, cb);
    }
    /**
     * GetOptimizerPolicy
     */
    async GetOptimizerPolicy(req, cb) {
        return this.request("GetOptimizerPolicy", req, cb);
    }
    /**
     * 获取用户详细信息
     */
    async DescribeUserInfo(req, cb) {
        return this.request("DescribeUserInfo", req, cb);
    }
    /**
     * 本接口用于更新数据引擎配置
     */
    async UpdateDataEngine(req, cb) {
        return this.request("UpdateDataEngine", req, cb);
    }
    /**
     * 本接口（CheckDataEngineConfigPairsValidity）用于检查引擎用户自定义参数的有效性
     */
    async CheckDataEngineConfigPairsValidity(req, cb) {
        return this.request("CheckDataEngineConfigPairsValidity", req, cb);
    }
    /**
     * 删除数据引擎
     */
    async DeleteDataEngine(req, cb) {
        return this.request("DeleteDataEngine", req, cb);
    }
    /**
     * 删除用户
     */
    async DeleteUser(req, cb) {
        return this.request("DeleteUser", req, cb);
    }
    /**
     * 删除表
     */
    async DeleteTable(req, cb) {
        return this.request("DeleteTable", req, cb);
    }
    /**
     * 本接口根据引擎ID查询数据引擎资源使用情况
     */
    async DescribeEngineUsageInfo(req, cb) {
        return this.request("DescribeEngineUsageInfo", req, cb);
    }
    /**
     * 查看任务概览页
     */
    async DescribeTasksOverview(req, cb) {
        return this.request("DescribeTasksOverview", req, cb);
    }
    /**
     * 用户某种操作，触发引擎配置修改
     */
    async UpdateDataEngineConfig(req, cb) {
        return this.request("UpdateDataEngineConfig", req, cb);
    }
    /**
     * 按顺序创建任务（已经废弃，后期不再维护，请使用接口CreateTasks）
     */
    async CreateTasksInOrder(req, cb) {
        return this.request("CreateTasksInOrder", req, cb);
    }
    /**
     * 本接口（DescribeDataEngineImageVersions）用于获取独享集群大版本镜像列表。
     */
    async DescribeDataEngineImageVersions(req, cb) {
        return this.request("DescribeDataEngineImageVersions", req, cb);
    }
    /**
     * DMS元数据创建表
     */
    async CreateDMSTable(req, cb) {
        return this.request("CreateDMSTable", req, cb);
    }
    /**
     * 本接口（DescribeSparkSessionBatchSQLCost）用于查询Spark SQL批任务消耗
     */
    async DescribeSparkSessionBatchSQLCost(req, cb) {
        return this.request("DescribeSparkSessionBatchSQLCost", req, cb);
    }
    /**
     * 升级引擎镜像
     */
    async UpgradeDataEngineImage(req, cb) {
        return this.request("UpgradeDataEngineImage", req, cb);
    }
    /**
     * 解绑用户鉴权策略
     */
    async DetachUserPolicy(req, cb) {
        return this.request("DetachUserPolicy", req, cb);
    }
    /**
     * 查询数据引擎事件
     */
    async DescribeDataEngineEvents(req, cb) {
        return this.request("DescribeDataEngineEvents", req, cb);
    }
    /**
     * 解绑工作组鉴权策略
     */
    async DetachWorkGroupPolicy(req, cb) {
        return this.request("DetachWorkGroupPolicy", req, cb);
    }
    /**
     * DMS元数据删除表
     */
    async DropDMSTable(req, cb) {
        return this.request("DropDMSTable", req, cb);
    }
    /**
     * 获取任务结果查询
     */
    async QueryResult(req, cb) {
        return this.request("QueryResult", req, cb);
    }
    /**
     * 元数据锁检查
     */
    async CheckLockMetaData(req, cb) {
        return this.request("CheckLockMetaData", req, cb);
    }
    /**
     * 该接口（CreateImportTask）用于创建导入任务
     */
    async CreateImportTask(req, cb) {
        return this.request("CreateImportTask", req, cb);
    }
    /**
     * 本接口（CreateTable）用于生成建表SQL。
     */
    async CreateTable(req, cb) {
        return this.request("CreateTable", req, cb);
    }
    /**
     * 查询任务结果，仅支持30天以内的任务查询结果，且返回数据大小超过近50M会进行截断。
     */
    async DescribeTaskResult(req, cb) {
        return this.request("DescribeTaskResult", req, cb);
    }
    /**
     * 该接口（CreateExportTask）用于创建导出任务
     */
    async CreateExportTask(req, cb) {
        return this.request("CreateExportTask", req, cb);
    }
    /**
     * 本接口（RegisterThirdPartyAccessUser）用于开通第三方平台访问
     */
    async RegisterThirdPartyAccessUser(req, cb) {
        return this.request("RegisterThirdPartyAccessUser", req, cb);
    }
    /**
     * 该接口用于洞察分析列表
     */
    async DescribeTasksAnalysis(req, cb) {
        return this.request("DescribeTasksAnalysis", req, cb);
    }
    /**
     * 从工作组中删除用户
     */
    async DeleteUsersFromWorkGroup(req, cb) {
        return this.request("DeleteUsersFromWorkGroup", req, cb);
    }
    /**
     * 为用户创建数据引擎
     */
    async CreateDataEngine(req, cb) {
        return this.request("CreateDataEngine", req, cb);
    }
    /**
     * 解绑用户上的用户组
     */
    async UnbindWorkGroupsFromUser(req, cb) {
        return this.request("UnbindWorkGroupsFromUser", req, cb);
    }
    /**
     * 获取工作组列表
     */
    async DescribeWorkGroups(req, cb) {
        return this.request("DescribeWorkGroups", req, cb);
    }
    /**
     * 该接口（CreateScript）用于创建sql脚本。
     */
    async CreateScript(req, cb) {
        return this.request("CreateScript", req, cb);
    }
    /**
     * 重启引擎
     */
    async RestartDataEngine(req, cb) {
        return this.request("RestartDataEngine", req, cb);
    }
    /**
     * 本接口（DescribeNotebookSessionStatement）用于查询session 中执行任务的详情
     */
    async DescribeNotebookSessionStatement(req, cb) {
        return this.request("DescribeNotebookSessionStatement", req, cb);
    }
    /**
     * 续费数据引擎
     */
    async RenewDataEngine(req, cb) {
        return this.request("RenewDataEngine", req, cb);
    }
    /**
     * 更新spark作业
     */
    async ModifySparkApp(req, cb) {
        return this.request("ModifySparkApp", req, cb);
    }
    /**
     * 本接口（DescribeViews）用于查询数据视图列表。
     */
    async DescribeViews(req, cb) {
        return this.request("DescribeViews", req, cb);
    }
    /**
     * 本接口（RegisterThirdPartyAccessUser）用于移除第三方平台访问
     */
    async DeleteThirdPartyAccessUser(req, cb) {
        return this.request("DeleteThirdPartyAccessUser", req, cb);
    }
    /**
     * DMS元数据获取库
     */
    async DescribeDMSDatabase(req, cb) {
        return this.request("DescribeDMSDatabase", req, cb);
    }
    /**
     * 绑定工作组到用户
     */
    async BindWorkGroupsToUser(req, cb) {
        return this.request("BindWorkGroupsToUser", req, cb);
    }
    /**
     * 查询用户自定义引擎参数
     */
    async DescribeUserDataEngineConfig(req, cb) {
        return this.request("DescribeUserDataEngineConfig", req, cb);
    }
    /**
     * 本接口（DescribeTaskLog）用于获取spark 作业任务日志详情
     */
    async DescribeTaskLog(req, cb) {
        return this.request("DescribeTaskLog", req, cb);
    }
    /**
     * 修改引擎描述信息
     */
    async ModifyDataEngineDescription(req, cb) {
        return this.request("ModifyDataEngineDescription", req, cb);
    }
    /**
     * 本接口（DeleteNotebookSession）用于删除交互式session（notebook）
     */
    async DeleteNotebookSession(req, cb) {
        return this.request("DeleteNotebookSession", req, cb);
    }
    /**
     * 本接口（CancelNotebookSessionStatement）用于取消session中执行的任务
     */
    async CancelNotebookSessionStatement(req, cb) {
        return this.request("CancelNotebookSessionStatement", req, cb);
    }
    /**
     * 查询计算结果存储位置。
     */
    async DescribeStoreLocation(req, cb) {
        return this.request("DescribeStoreLocation", req, cb);
    }
    /**
     * 查询spark作业信息
     */
    async DescribeSparkAppJob(req, cb) {
        return this.request("DescribeSparkAppJob", req, cb);
    }
    /**
     * 查询Spark作业的运行任务列表
     */
    async DescribeSparkAppTasks(req, cb) {
        return this.request("DescribeSparkAppTasks", req, cb);
    }
    /**
     * 本接口（DescribeDataEnginePythonSparkImages）用于获取PYSPARK镜像列表
     */
    async DescribeDataEnginePythonSparkImages(req, cb) {
        return this.request("DescribeDataEnginePythonSparkImages", req, cb);
    }
    /**
     * 本接口（ListTaskJobLogDetail）用于获取spark 作业任务日志详情
     */
    async ListTaskJobLogDetail(req, cb) {
        return this.request("ListTaskJobLogDetail", req, cb);
    }
    /**
     * 查询用户的托管存储信息
     */
    async DescribeLakeFsInfo(req, cb) {
        return this.request("DescribeLakeFsInfo", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248927, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.dnspod = void 0;
const v20210323_1 = require("./v20210323");
exports.dnspod = {
    v20210323: v20210323_1.v20210323,
};

}, function(modId) { var map = {"./v20210323":1738984248928}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248928, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210323 = void 0;
const Models = require("./dnspod_models");
const dnspod_client_1 = require("./dnspod_client");
exports.v20210323 = {
    Client: dnspod_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./dnspod_models":1738984248929,"./dnspod_client":1738984248930}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248929, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248930, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * dnspod client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("dnspod.tencentcloudapi.com", "2021-03-23", clientConfig);
    }
    /**
     * 创建添加子域名 Zone 域解析时所需要的 TXT 记录值
     */
    async CreateSubdomainValidateTXTValue(req, cb) {
        return this.request("CreateSubdomainValidateTXTValue", req, cb);
    }
    /**
     * 获取某个域名下的解析记录列表
备注：
1. 新添加的解析记录存在短暂的索引延迟，如果查询不到新增记录，请在 30 秒后重试
2.  API获取的记录总条数会比控制台多2条，原因是： 为了防止用户误操作导致解析服务不可用，对2021-10-29 14:24:26之后添加的域名，在控制台都不显示这2条NS记录。
     */
    async DescribeRecordList(req, cb) {
        return this.request("DescribeRecordList", req, cb);
    }
    /**
     * 获取域名共享信息
     */
    async DescribeDomainShareInfo(req, cb) {
        return this.request("DescribeDomainShareInfo", req, cb);
    }
    /**
     * 查询最近一次回滚
     */
    async DescribeSnapshotRollbackTask(req, cb) {
        return this.request("DescribeSnapshotRollbackTask", req, cb);
    }
    /**
     * 增值服务自动续费设置
     */
    async ModifyVasAutoRenewStatus(req, cb) {
        return this.request("ModifyVasAutoRenewStatus", req, cb);
    }
    /**
     * 创建域名的线路分组
     */
    async CreateLineGroup(req, cb) {
        return this.request("CreateLineGroup", req, cb);
    }
    /**
     * 获取域名权限
     */
    async DescribeDomainPurview(req, cb) {
        return this.request("DescribeDomainPurview", req, cb);
    }
    /**
     * 获取域名的线路分组列表
     */
    async DescribeLineGroupList(req, cb) {
        return this.request("DescribeLineGroupList", req, cb);
    }
    /**
     * 删除域名的自定义线路
     */
    async DeleteDomainCustomLine(req, cb) {
        return this.request("DeleteDomainCustomLine", req, cb);
    }
    /**
     * 获取等级允许的记录类型
     */
    async DescribeRecordType(req, cb) {
        return this.request("DescribeRecordType", req, cb);
    }
    /**
     * 删除记录分组
     */
    async DeleteRecordGroup(req, cb) {
        return this.request("DeleteRecordGroup", req, cb);
    }
    /**
     * 重新回滚指定解析记录快照
     */
    async RollbackRecordSnapshot(req, cb) {
        return this.request("RollbackRecordSnapshot", req, cb);
    }
    /**
     * 修改域名状态
     */
    async ModifyDomainStatus(req, cb) {
        return this.request("ModifyDomainStatus", req, cb);
    }
    /**
     * 获取域名别名列表
     */
    async DescribeDomainAliasList(req, cb) {
        return this.request("DescribeDomainAliasList", req, cb);
    }
    /**
     * 查询快照列表
     */
    async DescribeSnapshotList(req, cb) {
        return this.request("DescribeSnapshotList", req, cb);
    }
    /**
     * 添加TXT记录
备注：新添加的解析记录存在短暂的索引延迟，如果查询不到新增记录，请在 30 秒后重试
     */
    async CreateTXTRecord(req, cb) {
        return this.request("CreateTXTRecord", req, cb);
    }
    /**
     * 批量删除域名
     */
    async DeleteDomainBatch(req, cb) {
        return this.request("DeleteDomainBatch", req, cb);
    }
    /**
     * 下载快照
     */
    async DownloadSnapshot(req, cb) {
        return this.request("DownloadSnapshot", req, cb);
    }
    /**
     * 快照回滚前检查
     */
    async CheckSnapshotRollback(req, cb) {
        return this.request("CheckSnapshotRollback", req, cb);
    }
    /**
     * 修改记录
     */
    async ModifyRecord(req, cb) {
        return this.request("ModifyRecord", req, cb);
    }
    /**
     * 获取域名Whois信息
     */
    async DescribeDomainWhois(req, cb) {
        return this.request("DescribeDomainWhois", req, cb);
    }
    /**
     * 查询解析记录分组列表
     */
    async DescribeRecordGroupList(req, cb) {
        return this.request("DescribeRecordGroupList", req, cb);
    }
    /**
     * 查询快照回滚结果
     */
    async DescribeSnapshotRollbackResult(req, cb) {
        return this.request("DescribeSnapshotRollbackResult", req, cb);
    }
    /**
     * 删除快照
     */
    async DeleteSnapshot(req, cb) {
        return this.request("DeleteSnapshot", req, cb);
    }
    /**
     * 域名锁定解锁
     */
    async ModifyDomainUnlock(req, cb) {
        return this.request("ModifyDomainUnlock", req, cb);
    }
    /**
     * 批量添加域名
     */
    async CreateDomainBatch(req, cb) {
        return this.request("CreateDomainBatch", req, cb);
    }
    /**
     * 获取域名分组列表
     */
    async DescribeDomainGroupList(req, cb) {
        return this.request("DescribeDomainGroupList", req, cb);
    }
    /**
     * DNSPod商品下单
     */
    async CreateDeal(req, cb) {
        return this.request("CreateDeal", req, cb);
    }
    /**
     * 获取某个域名下的解析记录列表
备注：
1. 新添加的解析记录存在短暂的索引延迟，如果查询不到新增记录，请在 30 秒后重试
2.  API获取的记录总条数会比控制台多2条，原因是： 为了防止用户误操作导致解析服务不可用，对2021-10-29 14:24:26之后添加的域名，在控制台都不显示这2条NS记录。
     */
    async DescribeRecordFilterList(req, cb) {
        return this.request("DescribeRecordFilterList", req, cb);
    }
    /**
     * 查询解析快照配置
     */
    async DescribeSnapshotConfig(req, cb) {
        return this.request("DescribeSnapshotConfig", req, cb);
    }
    /**
     * 锁定域名
     */
    async ModifyDomainLock(req, cb) {
        return this.request("ModifyDomainLock", req, cb);
    }
    /**
     * 按账号删除域名共享
     */
    async DeleteShareDomain(req, cb) {
        return this.request("DeleteShareDomain", req, cb);
    }
    /**
     * 设置域名备注
     */
    async ModifyDomainRemark(req, cb) {
        return this.request("ModifyDomainRemark", req, cb);
    }
    /**
     * 获取域名信息
     */
    async DescribeDomain(req, cb) {
        return this.request("DescribeDomain", req, cb);
    }
    /**
     * 修改域名的线路分组
     */
    async ModifyLineGroup(req, cb) {
        return this.request("ModifyLineGroup", req, cb);
    }
    /**
     * 删除域名的线路分组
     */
    async DeleteLineGroup(req, cb) {
        return this.request("DeleteLineGroup", req, cb);
    }
    /**
     * 修改解析记录的状态
     */
    async ModifyRecordStatus(req, cb) {
        return this.request("ModifyRecordStatus", req, cb);
    }
    /**
     * 添加记录分组
     */
    async CreateRecordGroup(req, cb) {
        return this.request("CreateRecordGroup", req, cb);
    }
    /**
     * 更新动态 DNS 记录
     */
    async ModifyDynamicDNS(req, cb) {
        return this.request("ModifyDynamicDNS", req, cb);
    }
    /**
     * 批量添加记录
     */
    async CreateRecordBatch(req, cb) {
        return this.request("CreateRecordBatch", req, cb);
    }
    /**
     * 创建域名的自定义线路
     */
    async CreateDomainCustomLine(req, cb) {
        return this.request("CreateDomainCustomLine", req, cb);
    }
    /**
     * 获取任务详情
     */
    async DescribeBatchTask(req, cb) {
        return this.request("DescribeBatchTask", req, cb);
    }
    /**
     * 回滚快照
     */
    async RollbackSnapshot(req, cb) {
        return this.request("RollbackSnapshot", req, cb);
    }
    /**
     * 查看添加子域名 Zone 域解析 TXT 记录值验证状态
     */
    async DescribeSubdomainValidateStatus(req, cb) {
        return this.request("DescribeSubdomainValidateStatus", req, cb);
    }
    /**
     * 删除记录
     */
    async DeleteRecord(req, cb) {
        return this.request("DeleteRecord", req, cb);
    }
    /**
     * 暂停子域名的解析记录
     */
    async ModifySubdomainStatus(req, cb) {
        return this.request("ModifySubdomainStatus", req, cb);
    }
    /**
     * 修改记录可选字段
     */
    async ModifyRecordFields(req, cb) {
        return this.request("ModifyRecordFields", req, cb);
    }
    /**
     * 修改记录分组
     */
    async ModifyRecordGroup(req, cb) {
        return this.request("ModifyRecordGroup", req, cb);
    }
    /**
     * 获取记录信息
     */
    async DescribeRecord(req, cb) {
        return this.request("DescribeRecord", req, cb);
    }
    /**
     * 获取各套餐配置详情
     */
    async DescribePackageDetail(req, cb) {
        return this.request("DescribePackageDetail", req, cb);
    }
    /**
     * 获取等级允许的线路
     */
    async DescribeRecordLineList(req, cb) {
        return this.request("DescribeRecordLineList", req, cb);
    }
    /**
     * 获取域名增值服务用量
     */
    async DescribeVASStatistic(req, cb) {
        return this.request("DescribeVASStatistic", req, cb);
    }
    /**
     * 统计各个域名的解析量，帮助您了解流量情况、时间段分布。支持查看近 3 个月内的统计情况
     */
    async DescribeDomainAnalytics(req, cb) {
        return this.request("DescribeDomainAnalytics", req, cb);
    }
    /**
     * DNS 解析套餐自动续费设置
     */
    async ModifyPackageAutoRenew(req, cb) {
        return this.request("ModifyPackageAutoRenew", req, cb);
    }
    /**
     * 批量删除解析记录
备注：因存储限制， 建议一次批量删除最多2000条
     */
    async DeleteRecordBatch(req, cb) {
        return this.request("DeleteRecordBatch", req, cb);
    }
    /**
     * 创建域名别名
     */
    async CreateDomainAlias(req, cb) {
        return this.request("CreateDomainAlias", req, cb);
    }
    /**
     * 添加记录
备注：新添加的解析记录存在短暂的索引延迟，如果查询不到新增记录，请在 30 秒后重试
     */
    async CreateRecord(req, cb) {
        return this.request("CreateRecord", req, cb);
    }
    /**
     * 获取指定域名的已共享列表
     */
    async DescribeDomainShareUserList(req, cb) {
        return this.request("DescribeDomainShareUserList", req, cb);
    }
    /**
     * 按分类返回线路列表
     */
    async DescribeRecordLineCategoryList(req, cb) {
        return this.request("DescribeRecordLineCategoryList", req, cb);
    }
    /**
     * 判断是否有除系统默认的@-NS记录之外的记录存在
     */
    async DescribeRecordExistExceptDefaultNS(req, cb) {
        return this.request("DescribeRecordExistExceptDefaultNS", req, cb);
    }
    /**
     * 域名过户
     */
    async ModifyDomainOwner(req, cb) {
        return this.request("ModifyDomainOwner", req, cb);
    }
    /**
     * 创建域名分组
     */
    async CreateDomainGroup(req, cb) {
        return this.request("CreateDomainGroup", req, cb);
    }
    /**
     * 修改快照配置
     */
    async ModifySnapshotConfig(req, cb) {
        return this.request("ModifySnapshotConfig", req, cb);
    }
    /**
     * 删除域名别名
     */
    async DeleteDomainAlias(req, cb) {
        return this.request("DeleteDomainAlias", req, cb);
    }
    /**
     * 复制域名的线路分组
     */
    async CreateLineGroupCopy(req, cb) {
        return this.request("CreateLineGroupCopy", req, cb);
    }
    /**
     * 回滚前检查单条记录
     */
    async CheckRecordSnapshotRollback(req, cb) {
        return this.request("CheckRecordSnapshotRollback", req, cb);
    }
    /**
     * 获取域名的自定义线路列表
     */
    async DescribeDomainCustomLineList(req, cb) {
        return this.request("DescribeDomainCustomLineList", req, cb);
    }
    /**
     * 添加域名

备注：该接口不支持添加子域名。
     */
    async CreateDomain(req, cb) {
        return this.request("CreateDomain", req, cb);
    }
    /**
     * 设置记录备注
     */
    async ModifyRecordRemark(req, cb) {
        return this.request("ModifyRecordRemark", req, cb);
    }
    /**
     * 修改域名的自定义线路
     */
    async ModifyDomainCustomLine(req, cb) {
        return this.request("ModifyDomainCustomLine", req, cb);
    }
    /**
     * 获取域名筛选列表
备注：新添加的解析记录存在短暂的索引延迟，如果查询不到新增记录，请在 30 秒后重试
     */
    async DescribeDomainFilterList(req, cb) {
        return this.request("DescribeDomainFilterList", req, cb);
    }
    /**
     * DNSPod商品余额支付
     */
    async PayOrderWithBalance(req, cb) {
        return this.request("PayOrderWithBalance", req, cb);
    }
    /**
     * 将记录添加到分组
     */
    async ModifyRecordToGroup(req, cb) {
        return this.request("ModifyRecordToGroup", req, cb);
    }
    /**
     * 获取域名概览信息
     */
    async DescribeDomainPreview(req, cb) {
        return this.request("DescribeDomainPreview", req, cb);
    }
    /**
     * 修改TXT记录
     */
    async ModifyTXTRecord(req, cb) {
        return this.request("ModifyTXTRecord", req, cb);
    }
    /**
     * 统计子域名的解析量，帮助您了解流量情况、时间段分布。支持查看近 3 个月内的统计情况。仅付费套餐域名可用。
     */
    async DescribeSubdomainAnalytics(req, cb) {
        return this.request("DescribeSubdomainAnalytics", req, cb);
    }
    /**
     * 修改域名所属分组
     */
    async ModifyDomainToGroup(req, cb) {
        return this.request("ModifyDomainToGroup", req, cb);
    }
    /**
     * 批量修改记录
     */
    async ModifyRecordBatch(req, cb) {
        return this.request("ModifyRecordBatch", req, cb);
    }
    /**
     * 获取域名列表
     */
    async DescribeDomainList(req, cb) {
        return this.request("DescribeDomainList", req, cb);
    }
    /**
     * 删除域名
     */
    async DeleteDomain(req, cb) {
        return this.request("DeleteDomain", req, cb);
    }
    /**
     * 获取域名日志
     */
    async DescribeDomainLogList(req, cb) {
        return this.request("DescribeDomainLogList", req, cb);
    }
    /**
     * 获取账户信息
     */
    async DescribeUserDetail(req, cb) {
        return this.request("DescribeUserDetail", req, cb);
    }
    /**
     * 创建快照
     */
    async CreateSnapshot(req, cb) {
        return this.request("CreateSnapshot", req, cb);
    }
    /**
     * 查询解析记录重新回滚的结果
     */
    async DescribeRecordSnapshotRollbackResult(req, cb) {
        return this.request("DescribeRecordSnapshotRollbackResult", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248931, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.domain = void 0;
const v20180808_1 = require("./v20180808");
exports.domain = {
    v20180808: v20180808_1.v20180808,
};

}, function(modId) { var map = {"./v20180808":1738984248932}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248932, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180808 = void 0;
const Models = require("./domain_models");
const domain_client_1 = require("./domain_client");
exports.v20180808 = {
    Client: domain_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./domain_models":1738984248933,"./domain_client":1738984248934}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248933, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248934, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * domain client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("domain.tencentcloudapi.com", "2018-08-08", clientConfig);
    }
    /**
     * 本接口 ( TransferProhibitionBatch ) 用于批量禁止域名转移 。
     */
    async TransferProhibitionBatch(req, cb) {
        return this.request("TransferProhibitionBatch", req, cb);
    }
    /**
     * 我预定的域名。
     */
    async DescribeBiddingAppointList(req, cb) {
        return this.request("DescribeBiddingAppointList", req, cb);
    }
    /**
     * 用于出价界面出价请求
     */
    async BiddingPreRelease(req, cb) {
        return this.request("BiddingPreRelease", req, cb);
    }
    /**
     * 本接口 ( SetDomainAutoRenew ) 用于设置域名自动续费。
     */
    async SetDomainAutoRenew(req, cb) {
        return this.request("SetDomainAutoRenew", req, cb);
    }
    /**
     * 接口用于获取合作商竞价过程中竞价详情数据
     */
    async DescribeReservedBidInfo(req, cb) {
        return this.request("DescribeReservedBidInfo", req, cb);
    }
    /**
     * 修改自定义DNS Host
     */
    async ModifyCustomDnsHost(req, cb) {
        return this.request("ModifyCustomDnsHost", req, cb);
    }
    /**
     * 本接口 ( CheckBatchStatus ) 用于查询批量操作日志状态 。
     */
    async CheckBatchStatus(req, cb) {
        return this.request("CheckBatchStatus", req, cb);
    }
    /**
     * 本接口 ( UploadImage ) 用于证件图片上传 。
     */
    async UploadImage(req, cb) {
        return this.request("UploadImage", req, cb);
    }
    /**
     * 此接口用于删除已验证的手机邮箱
     */
    async DeletePhoneEmail(req, cb) {
        return this.request("DeletePhoneEmail", req, cb);
    }
    /**
     * 用户服务商提前获取预释放域名数据，查询数据根据结束时间进行倒序。
     */
    async DescribePreDomainList(req, cb) {
        return this.request("DescribePreDomainList", req, cb);
    }
    /**
     * 用户合作商预释放出价
     */
    async BidPreDomains(req, cb) {
        return this.request("BidPreDomains", req, cb);
    }
    /**
     * 查询自定义DNS Host
     */
    async DescribeCustomDnsHostSet(req, cb) {
        return this.request("DescribeCustomDnsHostSet", req, cb);
    }
    /**
     * 本接口 (  DescribeDomainNameList ) 我的域名列表。
     */
    async DescribeDomainNameList(req, cb) {
        return this.request("DescribeDomainNameList", req, cb);
    }
    /**
     * 国际站-修改DNS Host
     */
    async ModifyIntlCustomDnsHost(req, cb) {
        return this.request("ModifyIntlCustomDnsHost", req, cb);
    }
    /**
     * 获取域名实名信息详情
     */
    async DescribeDomainSimpleInfo(req, cb) {
        return this.request("DescribeDomainSimpleInfo", req, cb);
    }
    /**
     * 本接口 ( CreateDomainBatch ) 用于批量域名注册 。
     */
    async CreateDomainBatch(req, cb) {
        return this.request("CreateDomainBatch", req, cb);
    }
    /**
     * 本接口 (  DescribeDomainBaseInfo) 获取域名基本信息。
     */
    async DescribeDomainBaseInfo(req, cb) {
        return this.request("DescribeDomainBaseInfo", req, cb);
    }
    /**
     * 本接口 ( DescribeBatchOperationLogDetails ) 用于获取批量操作日志详情。
     */
    async DescribeBatchOperationLogDetails(req, cb) {
        return this.request("DescribeBatchOperationLogDetails", req, cb);
    }
    /**
     * 本接口 ( DeleteTemplate ) 用于删除信息模板。
     */
    async DeleteTemplate(req, cb) {
        return this.request("DeleteTemplate", req, cb);
    }
    /**
     * 用于获取域名注册当前支持注册的后缀
     */
    async DescribeTldList(req, cb) {
        return this.request("DescribeTldList", req, cb);
    }
    /**
     * 我得标的域名。
     */
    async DescribeBiddingSuccessfulList(req, cb) {
        return this.request("DescribeBiddingSuccessfulList", req, cb);
    }
    /**
     * 检查域名是否可以注册。
     */
    async CheckDomain(req, cb) {
        return this.request("CheckDomain", req, cb);
    }
    /**
     * 用于合作商对预释放域名进行预留。
     */
    async ReservedPreDomains(req, cb) {
        return this.request("ReservedPreDomains", req, cb);
    }
    /**
     * 同步自定义DNS Host
     */
    async SyncCustomDnsHost(req, cb) {
        return this.request("SyncCustomDnsHost", req, cb);
    }
    /**
     * 用于预释放竞价列表数据查询
     */
    async DescribePreAuctionList(req, cb) {
        return this.request("DescribePreAuctionList", req, cb);
    }
    /**
     * 本接口 ( ModifyDomainDNSBatch) 用于批量域名 DNS 修改 。
     */
    async ModifyDomainDNSBatch(req, cb) {
        return this.request("ModifyDomainDNSBatch", req, cb);
    }
    /**
     * 创建自定义DNS Host
     */
    async CreateCustomDnsHost(req, cb) {
        return this.request("CreateCustomDnsHost", req, cb);
    }
    /**
     * 本接口 (DescribeTemplate) 用于获取模板信息。
     */
    async DescribeTemplate(req, cb) {
        return this.request("DescribeTemplate", req, cb);
    }
    /**
     * 此接口用于创建有效的手机、邮箱
     */
    async CreatePhoneEmail(req, cb) {
        return this.request("CreatePhoneEmail", req, cb);
    }
    /**
     * 创建赎回订单。
     */
    async CreateDomainRedemption(req, cb) {
        return this.request("CreateDomainRedemption", req, cb);
    }
    /**
     * 接口用于预释放页面查询
     */
    async DescribePreReleaseList(req, cb) {
        return this.request("DescribePreReleaseList", req, cb);
    }
    /**
     * 用户控制台获取竞价列表
     */
    async DescribeAuctionList(req, cb) {
        return this.request("DescribeAuctionList", req, cb);
    }
    /**
     * 本接口 (DescribeTemplateList) 用于获取信息模板列表。
     */
    async DescribeTemplateList(req, cb) {
        return this.request("DescribeTemplateList", req, cb);
    }
    /**
     * 用于清除多余的预定域名信息
     */
    async DeleteReservedPreDomainInfo(req, cb) {
        return this.request("DeleteReservedPreDomainInfo", req, cb);
    }
    /**
     * 删除记录。
     */
    async DeleteBidding(req, cb) {
        return this.request("DeleteBidding", req, cb);
    }
    /**
     * 修改模板信息
     */
    async ModifyTemplate(req, cb) {
        return this.request("ModifyTemplate", req, cb);
    }
    /**
     * 该接口用于用户详情页出价请求
     */
    async BidDetailPage(req, cb) {
        return this.request("BidDetailPage", req, cb);
    }
    /**
     * 查询预释放未预约域名详情接口
     */
    async DescribeUnPreDomainDetail(req, cb) {
        return this.request("DescribeUnPreDomainDetail", req, cb);
    }
    /**
     * 本接口 ( TransferInDomainBatch ) 用于批量转入域名 。
     */
    async TransferInDomainBatch(req, cb) {
        return this.request("TransferInDomainBatch", req, cb);
    }
    /**
     * 本接口 ( UpdateProhibitionBatch ) 用于批量禁止更新锁。
     */
    async UpdateProhibitionBatch(req, cb) {
        return this.request("UpdateProhibitionBatch", req, cb);
    }
    /**
     * 等待支付详情接口
     */
    async DescribePayWaitDetail(req, cb) {
        return this.request("DescribePayWaitDetail", req, cb);
    }
    /**
     * 我竞价的域名。
     */
    async DescribeBiddingList(req, cb) {
        return this.request("DescribeBiddingList", req, cb);
    }
    /**
     * 本接口 ( CreateTemplate ) 用于添加域名信息模板 。
     */
    async CreateTemplate(req, cb) {
        return this.request("CreateTemplate", req, cb);
    }
    /**
     * 我竞价的域名-竞价详情。
     */
    async DescribeBiddingDetail(req, cb) {
        return this.request("DescribeBiddingDetail", req, cb);
    }
    /**
     * 合作商用于查询预约预释放状态信息内容
     */
    async DescribeReservedPreDomainInfo(req, cb) {
        return this.request("DescribeReservedPreDomainInfo", req, cb);
    }
    /**
     * 我预约的域名-预约详情。
     */
    async DescribeBiddingAppointDetail(req, cb) {
        return this.request("DescribeBiddingAppointDetail", req, cb);
    }
    /**
     * 本接口用于获取已验证的手机邮箱列表
     */
    async DescribePhoneEmailList(req, cb) {
        return this.request("DescribePhoneEmailList", req, cb);
    }
    /**
     * 此接口用于发送手机邮箱验证码。
     */
    async SendPhoneEmailCode(req, cb) {
        return this.request("SendPhoneEmailCode", req, cb);
    }
    /**
     * 本接口 ( ModifyDomainOwnerBatch) 用于域名批量账号间转移 。
     */
    async ModifyDomainOwnerBatch(req, cb) {
        return this.request("ModifyDomainOwnerBatch", req, cb);
    }
    /**
     * 本接口 ( RenewDomainBatch ) 用于批量续费域名 。
     */
    async RenewDomainBatch(req, cb) {
        return this.request("RenewDomainBatch", req, cb);
    }
    /**
     * 删除自定义DNS Host
     */
    async DeleteCustomDnsHost(req, cb) {
        return this.request("DeleteCustomDnsHost", req, cb);
    }
    /**
     * 本接口 ( BatchModifyDomainInfo ) 用于批量域名信息修改 。
     */
    async BatchModifyDomainInfo(req, cb) {
        return this.request("BatchModifyDomainInfo", req, cb);
    }
    /**
     * 按照域名后缀获取对应的价格列表
     */
    async DescribeDomainPriceList(req, cb) {
        return this.request("DescribeDomainPriceList", req, cb);
    }
    /**
     * 本接口 ( DescribeBatchOperationLogs ) 用于获取批量操作日志 。
     */
    async DescribeBatchOperationLogs(req, cb) {
        return this.request("DescribeBatchOperationLogs", req, cb);
    }
    /**
     * 我得标的域名-得标详情。
     */
    async DescribeBiddingSuccessfulDetail(req, cb) {
        return this.request("DescribeBiddingSuccessfulDetail", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248935, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.drm = void 0;
const v20181115_1 = require("./v20181115");
exports.drm = {
    v20181115: v20181115_1.v20181115,
};

}, function(modId) { var map = {"./v20181115":1738984248936}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248936, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20181115 = void 0;
const Models = require("./drm_models");
const drm_client_1 = require("./drm_client");
exports.v20181115 = {
    Client: drm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./drm_models":1738984248937,"./drm_client":1738984248938}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248937, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248938, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * drm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("drm.tencentcloudapi.com", "2018-11-15", clientConfig);
    }
    /**
     * 开发者调用该接口，启动一次内容文件的DRM加密工作流。
注意：该接口已下线。
     */
    async StartEncryption(req, cb) {
        return this.request("StartEncryption", req, cb);
    }
    /**
     * 本接口用来设置fairplay方案所需的私钥、私钥密钥、ask等信息。
如需使用fairplay方案，请务必先设置私钥。
     */
    async AddFairPlayPem(req, cb) {
        return this.request("AddFairPlayPem", req, cb);
    }
    /**
     * 该接口用来设置加密的密钥。注意，同一个content id，只能设置一次！
     */
    async CreateEncryptKeys(req, cb) {
        return this.request("CreateEncryptKeys", req, cb);
    }
    /**
     * 本接口用来生成DRM方案对应的播放许可证，开发者需提供DRM方案类型、内容类型参数，后台将生成许可证后返回许可证数据
开发者需要转发终端设备发出的许可证请求信息。
     */
    async CreateLicense(req, cb) {
        return this.request("CreateLicense", req, cb);
    }
    /**
     * 本接口用来设置fairplay方案所需的私钥、私钥密钥、ask等信息。
如需使用fairplay方案，请务必先设置私钥。
     */
    async ModifyFairPlayPem(req, cb) {
        return this.request("ModifyFairPlayPem", req, cb);
    }
    /**
     * 开发者需要指定使用的DRM类型、和需要加密的Track类型，后台返回加密使用的密钥
如果加密使用的ContentID没有关联的密钥信息，后台会自动生成新的密钥返回

     */
    async DescribeKeys(req, cb) {
        return this.request("DescribeKeys", req, cb);
    }
    /**
     * 开发者需要指定使用的DRM类型取值 NORMALAES、和需要加密的Track类型取值 SD,ContentType取值 LiveVideo

     */
    async DescribeDRMLicense(req, cb) {
        return this.request("DescribeDRMLicense", req, cb);
    }
    /**
     * 本接口用来查询指定DRM类型、ContentType的所有加密密钥

     */
    async DescribeAllKeys(req, cb) {
        return this.request("DescribeAllKeys", req, cb);
    }
    /**
     * 本接口用来删除fairplay方案的私钥、ask等信息
注：高风险操作，删除后，您将无法使用腾讯云DRM提供的fairplay服务。
由于缓存，删除操作需要约半小时生效
     */
    async DeleteFairPlayPem(req, cb) {
        return this.request("DeleteFairPlayPem", req, cb);
    }
    /**
     * 该接口用来查询设置的FairPlay私钥校验信息。可用该接口校验设置的私钥与本身的私钥是否一致。
     */
    async DescribeFairPlayPem(req, cb) {
        return this.request("DescribeFairPlayPem", req, cb);
    }
    /**
     * 开发者需要指定使用的DRM类型取值 NORMALAES、和需要加密的Track类型取值 SD,ContentType取值 LiveVideo
     */
    async GenerateTDRMKey(req, cb) {
        return this.request("GenerateTDRMKey", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248939, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ds = void 0;
const v20180523_1 = require("./v20180523");
exports.ds = {
    v20180523: v20180523_1.v20180523,
};

}, function(modId) { var map = {"./v20180523":1738984248940}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248940, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180523 = void 0;
const Models = require("./ds_models");
const ds_client_1 = require("./ds_client");
exports.v20180523 = {
    Client: ds_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ds_models":1738984248941,"./ds_client":1738984248942}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248941, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248942, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ds client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ds.tencentcloudapi.com", "2018-05-23", clientConfig);
    }
    /**
     * 此接口适用于：客户平台通过上传PDF文件作为合同，以备未来进行签署。接口返回任务号，可调用DescribeTaskStatus接口查看任务执行结果。
     */
    async CreateContractByUpload(req, cb) {
        return this.request("CreateContractByUpload", req, cb);
    }
    /**
     * 此接口用于客户电子合同平台增加某用户的印章图片。客户平台可以调用此接口增加某用户的印章图片。
     */
    async CreateSeal(req, cb) {
        return this.request("CreateSeal", req, cb);
    }
    /**
     * 下载合同接口。调用该接口可以下载签署中和签署完成的合同。接口返回任务号，可调用DescribeTaskStatus接口查看任务执行结果。
     */
    async DownloadContract(req, cb) {
        return this.request("DownloadContract", req, cb);
    }
    /**
     * 删除企业电子合同平台的最终用户。调用该接口后，腾讯云将删除该用户账号。删除账号后，已经签名的合同不受影响。
     */
    async DeleteAccount(req, cb) {
        return this.request("DeleteAccount", req, cb);
    }
    /**
     * 接口使用于：客户平台可使用该接口查询任务执行状态或者执行结果
     */
    async DescribeTaskStatus(req, cb) {
        return this.request("DescribeTaskStatus", req, cb);
    }
    /**
     * 为企业电子合同平台的最终个人用户进行开户。在企业电子合同平台进行操作的个人用户，企业电子合同平台向腾讯云发送个人用户的信息，提交开户命令。腾讯云接到请求后，自动为企业电子合同平台的个人用户生成一张数字证书。
     */
    async CreatePersonalAccount(req, cb) {
        return this.request("CreatePersonalAccount", req, cb);
    }
    /**
     * 此接口适用于：客户平台在创建好合同后，由合同签署方对创建的合同内容进行确认，无误后再进行签署。客户平台使用该接口对PDF合同文档按照关键字和坐标进行签署。
     */
    async SignContractByKeyword(req, cb) {
        return this.request("SignContractByKeyword", req, cb);
    }
    /**
     * 删除印章接口，删除指定账号的某个印章
     */
    async DeleteSeal(req, cb) {
        return this.request("DeleteSeal", req, cb);
    }
    /**
     * 为企业电子合同平台的最终企业用户进行开户。在企业电子合同平台进行操作的企业用户，企业电子合同平台向腾讯云发送企业用户的信息，提交开户命令。腾讯云接到请求后，自动为企业电子合同平台的企业用户生成一张数字证书。
     */
    async CreateEnterpriseAccount(req, cb) {
        return this.request("CreateEnterpriseAccount", req, cb);
    }
    /**
     * 发送验证码接口。此接口用于：企业电子合同平台需要腾讯云发送验证码对其用户进行验证时调用，腾讯云将向其用户联系手机(企业电子合同平台为用户开户时通过接口传入)发送验证码，以验证码授权方式签署合同。用户验证工作由企业电子合同平台自身完成。
     */
    async SendVcode(req, cb) {
        return this.request("SendVcode", req, cb);
    }
    /**
     * 检测验证码接口。此接口用于企业电子合同平台通过给用户发送短信验证码，以短信授权方式签署合同。此接口配合发送验证码接口使用。

用户在企业电子合同平台输入收到的验证码后，由企业电子合同平台调用该接口向腾讯云提交确认受托签署合同验证码命令。验证码验证正确时，本次合同签署的授权成功。
     */
    async CheckVcode(req, cb) {
        return this.request("CheckVcode", req, cb);
    }
    /**
     * 此接口适用于：客户平台在创建好合同后，由合同签署方对创建的合同内容进行确认，无误后再进行签署。客户平台使用该接口提供详细的PDF文档签名坐标进行签署。
     */
    async SignContractByCoordinate(req, cb) {
        return this.request("SignContractByCoordinate", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248943, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.dsgc = void 0;
const v20190723_1 = require("./v20190723");
exports.dsgc = {
    v20190723: v20190723_1.v20190723,
};

}, function(modId) { var map = {"./v20190723":1738984248944}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248944, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190723 = void 0;
const Models = require("./dsgc_models");
const dsgc_client_1 = require("./dsgc_client");
exports.v20190723 = {
    Client: dsgc_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./dsgc_models":1738984248945,"./dsgc_client":1738984248946}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248945, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248946, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * dsgc client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("dsgc.tencentcloudapi.com", "2019-07-23", clientConfig);
    }
    /**
     * 新增分级，单个Casb实例最多允许创建100个数据分级
     */
    async CreateDSPALevelGroup(req, cb) {
        return this.request("CreateDSPALevelGroup", req, cb);
    }
    /**
     * 遗留待处理&昨日完成风险处置概览统计
     */
    async DescribeDSPAAssessmentRiskDealedOverview(req, cb) {
        return this.request("DescribeDSPAAssessmentRiskDealedOverview", req, cb);
    }
    /**
     * 复制合规组模板
     */
    async CopyDSPATemplate(req, cb) {
        return this.request("CopyDSPATemplate", req, cb);
    }
    /**
     * 风险项页面----查询风险等级的详情数据
     */
    async DescribeDSPAAssessmentRiskLevelDetail(req, cb) {
        return this.request("DescribeDSPAAssessmentRiskLevelDetail", req, cb);
    }
    /**
     * 风险项页面--查看评估模板详情
     */
    async DescribeDSPAAssessmentRiskTemplateDetail(req, cb) {
        return this.request("DescribeDSPAAssessmentRiskTemplateDetail", req, cb);
    }
    /**
     * 修改DSPA评估风险项，支持修改Status
     */
    async ModifyDSPAAssessmentRisk(req, cb) {
        return this.request("ModifyDSPAAssessmentRisk", req, cb);
    }
    /**
     * 修改分类分级关系
     */
    async ModifyDSPACategoryRelation(req, cb) {
        return this.request("ModifyDSPACategoryRelation", req, cb);
    }
    /**
     * 取消用户云资源授权
     */
    async DisableDSPAMetaResourceAuth(req, cb) {
        return this.request("DisableDSPAMetaResourceAuth", req, cb);
    }
    /**
     * 立即启动分类分级任务，该接口只有在任务状态为以下状态时才支持正确执行立即扫描：
0 待扫描，
2 扫描终止，
3 扫描成功，
4 扫描失败
     */
    async StartDSPADiscoveryTask(req, cb) {
        return this.request("StartDSPADiscoveryTask", req, cb);
    }
    /**
     * 查询最新的风险详情列表数据
     */
    async DescribeDSPAAssessmentLatestRiskList(req, cb) {
        return this.request("DescribeDSPAAssessmentLatestRiskList", req, cb);
    }
    /**
     * 获取分类分级规则列表
     */
    async DescribeDSPADiscoveryRules(req, cb) {
        return this.request("DescribeDSPADiscoveryRules", req, cb);
    }
    /**
     * 创建合规组分类规则关联关系
     */
    async CreateDSPAComplianceRules(req, cb) {
        return this.request("CreateDSPAComplianceRules", req, cb);
    }
    /**
     * 创建资产梳理报表导出重试任务
     */
    async CreateAssetSortingReportRetryTask(req, cb) {
        return this.request("CreateAssetSortingReportRetryTask", req, cb);
    }
    /**
     * 获取COS单个模板下的敏感数据资产
     */
    async DescribeDSPACOSDataAssetByComplianceId(req, cb) {
        return this.request("DescribeDSPACOSDataAssetByComplianceId", req, cb);
    }
    /**
     * 风险项页面----查询风险等级的列表
     */
    async DescribeDSPAAssessmentRiskLevelList(req, cb) {
        return this.request("DescribeDSPAAssessmentRiskLevelList", req, cb);
    }
    /**
     * 编辑识别规则
     */
    async ModifyClassificationRule(req, cb) {
        return this.request("ModifyClassificationRule", req, cb);
    }
    /**
     * 获取分类规则统计信息
     */
    async DescribeDSPACategoryRuleStatistic(req, cb) {
        return this.request("DescribeDSPACategoryRuleStatistic", req, cb);
    }
    /**
     * 查询分类规则详情

     */
    async DescribeRuleDetail(req, cb) {
        return this.request("DescribeRuleDetail", req, cb);
    }
    /**
     * 删除COS分类分级任务结果
     */
    async DeleteDSPACOSDiscoveryTaskResult(req, cb) {
        return this.request("DeleteDSPACOSDiscoveryTaskResult", req, cb);
    }
    /**
     * 获取COS分类分级数据资产详情
     */
    async DescribeDSPACOSDataAssetDetail(req, cb) {
        return this.request("DescribeDSPACOSDataAssetDetail", req, cb);
    }
    /**
     * 数据资产报告-查询rbd 的敏感资产报告，包含（数据库资产，设敏级别数据库top10，资产详情）
     */
    async DescribeRDBAssetSensitiveDistribution(req, cb) {
        return this.request("DescribeRDBAssetSensitiveDistribution", req, cb);
    }
    /**
     * 修改COS分类分级任务，该接口只有在任务状态为以下状态时才支持正确修改：
0 待扫描，
2 扫描终止，
3 扫描成功，
4 扫描失败
     */
    async ModifyDSPACOSDiscoveryTask(req, cb) {
        return this.request("ModifyDSPACOSDiscoveryTask", req, cb);
    }
    /**
     * 删除用户云资源
     */
    async DeleteDSPAMetaResource(req, cb) {
        return this.request("DeleteDSPAMetaResource", req, cb);
    }
    /**
     * 本接口（DeleteCOSMetaData）用于删除COS元数据信息。
     */
    async DeleteCosMetaResource(req, cb) {
        return this.request("DeleteCosMetaResource", req, cb);
    }
    /**
     * 修改分级分类模板信息
     */
    async ModifyStandardInfo(req, cb) {
        return this.request("ModifyStandardInfo", req, cb);
    }
    /**
     * 获取报表下载链接
     */
    async DescribeReportTaskDownloadUrl(req, cb) {
        return this.request("DescribeReportTaskDownloadUrl", req, cb);
    }
    /**
     * 获取COS分类分级任务结果，该接口只有在任务状态为以下状态时才支持结果正常查询：
3 扫描成功，
4 扫描失败
     */
    async DescribeDSPACOSDiscoveryTaskResult(req, cb) {
        return this.request("DescribeDSPACOSDiscoveryTaskResult", req, cb);
    }
    /**
     * 绑定或解绑COS桶
     */
    async BindDSPAResourceCosBuckets(req, cb) {
        return this.request("BindDSPAResourceCosBuckets", req, cb);
    }
    /**
     * 修改分类分级模板，内置模板不支持修改。
     */
    async ModifyDSPAComplianceGroup(req, cb) {
        return this.request("ModifyDSPAComplianceGroup", req, cb);
    }
    /**
     * 查询敏感数据导出结果URL
     */
    async DescribeAssetDetailDataExportResult(req, cb) {
        return this.request("DescribeAssetDetailDataExportResult", req, cb);
    }
    /**
     * 风险评估概览页，查询风险面的分布
     */
    async DescribeDSPAAssessmentRiskSideDistributed(req, cb) {
        return this.request("DescribeDSPAAssessmentRiskSideDistributed", req, cb);
    }
    /**
     * 获取分类分级任务结果详情，该接口只有在任务状态为时才支持结果正确查询：
3 扫描成功
     */
    async DescribeDSPADiscoveryTaskResultDetail(req, cb) {
        return this.request("DescribeDSPADiscoveryTaskResultDetail", req, cb);
    }
    /**
     * 风险级别趋势统计
     */
    async DescribeDSPAAssessmentRiskLevelTrend(req, cb) {
        return this.request("DescribeDSPAAssessmentRiskLevelTrend", req, cb);
    }
    /**
     * 获取DSPA评估风险项列表
     */
    async DescribeDSPAAssessmentRisks(req, cb) {
        return this.request("DescribeDSPAAssessmentRisks", req, cb);
    }
    /**
     * 获取模板详情信息
     */
    async DescribeDSPAComplianceGroupDetail(req, cb) {
        return this.request("DescribeDSPAComplianceGroupDetail", req, cb);
    }
    /**
     * 风险项页面---创建风险等级
     */
    async CreateDSPAAssessmentRiskLevel(req, cb) {
        return this.request("CreateDSPAAssessmentRiskLevel", req, cb);
    }
    /**
     * 获取COS分类分级任务结果详情，该接口只有在任务状态为时才支持结果正确查询：
3 扫描成功
     */
    async DescribeDSPACOSTaskResultDetail(req, cb) {
        return this.request("DescribeDSPACOSTaskResultDetail", req, cb);
    }
    /**
     * 获取单个合规组下的RDB关系数据库分类分级数据资产
     */
    async DescribeDSPARDBDataAssetByComplianceId(req, cb) {
        return this.request("DescribeDSPARDBDataAssetByComplianceId", req, cb);
    }
    /**
     * 查询DB绑定的列表
     */
    async DescribeBindDBList(req, cb) {
        return this.request("DescribeBindDBList", req, cb);
    }
    /**
     * 获取导出任务结果
     */
    async DescribeExportTaskResult(req, cb) {
        return this.request("DescribeExportTaskResult", req, cb);
    }
    /**
     * 本接口用于获取COS元数据信息，返回COS元数据信息列表。
     */
    async ListDSPACosMetaResources(req, cb) {
        return this.request("ListDSPACosMetaResources", req, cb);
    }
    /**
     * 拉取用户云资源
     */
    async ListDSPAMetaResources(req, cb) {
        return this.request("ListDSPAMetaResources", req, cb);
    }
    /**
     * 获取敏感数据分类列表
     */
    async DescribeDSPACategories(req, cb) {
        return this.request("DescribeDSPACategories", req, cb);
    }
    /**
     * 创建新分类
     */
    async CreateNewClassification(req, cb) {
        return this.request("CreateNewClassification", req, cb);
    }
    /**
     * 风险模板---修改风险模板
     */
    async ModifyDSPAAssessmentRiskTemplate(req, cb) {
        return this.request("ModifyDSPAAssessmentRiskTemplate", req, cb);
    }
    /**
     * 获取分类分级任务详情
     */
    async DescribeDSPADiscoveryTaskDetail(req, cb) {
        return this.request("DescribeDSPADiscoveryTaskDetail", req, cb);
    }
    /**
     * 修改分类分级任务，该接口只有在任务状态为以下状态时才支持正确修改：
0 待扫描，
2 扫描终止，
3 扫描成功，
4 扫描失败
     */
    async ModifyDSPADiscoveryTask(req, cb) {
        return this.request("ModifyDSPADiscoveryTask", req, cb);
    }
    /**
     * 风险概览页风险数量和受影响资产数概览统计
     */
    async DescribeDSPAAssessmentRiskAmountOverview(req, cb) {
        return this.request("DescribeDSPAAssessmentRiskAmountOverview", req, cb);
    }
    /**
     * 创建识别规则
     */
    async CreateClassificationRule(req, cb) {
        return this.request("CreateClassificationRule", req, cb);
    }
    /**
     * 根据合规组id，去查询ES的概览页统计数据
     */
    async DescribeDSPAESDataAssetByComplianceId(req, cb) {
        return this.request("DescribeDSPAESDataAssetByComplianceId", req, cb);
    }
    /**
     * 获取分类分级模板列表
     */
    async DescribeDSPAComplianceGroups(req, cb) {
        return this.request("DescribeDSPAComplianceGroups", req, cb);
    }
    /**
     * 修改级别名称
     */
    async ModifyLevelName(req, cb) {
        return this.request("ModifyLevelName", req, cb);
    }
    /**
     * 获取COS分类分级任务详情
     */
    async DescribeDSPACOSDiscoveryTaskDetail(req, cb) {
        return this.request("DescribeDSPACOSDiscoveryTaskDetail", req, cb);
    }
    /**
     * 获取扫描结果数据样本
     */
    async DescribeDSPATaskResultDataSample(req, cb) {
        return this.request("DescribeDSPATaskResultDataSample", req, cb);
    }
    /**
     * 删除COS分类分级任务，该接口只有在任务状态为以下几个状态值时才支持正确删除：
0 待扫描，
2 扫描终止，
3 扫描成功，
4 扫描失败
     */
    async DeleteDSPACOSDiscoveryTask(req, cb) {
        return this.request("DeleteDSPACOSDiscoveryTask", req, cb);
    }
    /**
     * 数据资产报告-查询mongo 的敏感资产报告，包含（数据库资产，设敏级别数据库top10，资产详情）
     */
    async DescribeMongoAssetSensitiveDistribution(req, cb) {
        return this.request("DescribeMongoAssetSensitiveDistribution", req, cb);
    }
    /**
     * 修改敏感级别信息
     */
    async ModifyLevelInfo(req, cb) {
        return this.request("ModifyLevelInfo", req, cb);
    }
    /**
     * 创建分类关联关系
     */
    async CreateDSPACategoryRelation(req, cb) {
        return this.request("CreateDSPACategoryRelation", req, cb);
    }
    /**
     * 数据资产报告-查询cos的敏感数据分布（分级分布 分类分布 敏感规则分布详情列表）
     */
    async DescribeSensitiveCOSDataDistribution(req, cb) {
        return this.request("DescribeSensitiveCOSDataDistribution", req, cb);
    }
    /**
     * 受影响资产TOP5统计
     */
    async DescribeDSPAAssessmentRiskDatasourceTop5(req, cb) {
        return this.request("DescribeDSPAAssessmentRiskDatasourceTop5", req, cb);
    }
    /**
     * 获取资产报表任务列表
     */
    async DescribeReportTasks(req, cb) {
        return this.request("DescribeReportTasks", req, cb);
    }
    /**
     * 获取COS分类分级任务结果详情文件列表
     */
    async DescribeDSPACOSDiscoveryTaskFiles(req, cb) {
        return this.request("DescribeDSPACOSDiscoveryTaskFiles", req, cb);
    }
    /**
     * 获取DSPA评估模板列表
     */
    async DescribeDSPAAssessmentTemplates(req, cb) {
        return this.request("DescribeDSPAAssessmentTemplates", req, cb);
    }
    /**
     * 修改最新评估风险项状态
     */
    async ModifyDSPAAssessmentRiskLatest(req, cb) {
        return this.request("ModifyDSPAAssessmentRiskLatest", req, cb);
    }
    /**
     * 打开或者关闭分类分级规则
注：此API同时对该规则下的RDB跟COS规则操作。
     */
    async EnableDSPADiscoveryRule(req, cb) {
        return this.request("EnableDSPADiscoveryRule", req, cb);
    }
    /**
     * 创建规则别名
     */
    async CreateIdentifyRuleAnotherName(req, cb) {
        return this.request("CreateIdentifyRuleAnotherName", req, cb);
    }
    /**
     * 风险等级的定义页面-创建风险等级的时候生成的一个默认的矩阵
     */
    async DecribeSuggestRiskLevelMatrix(req, cb) {
        return this.request("DecribeSuggestRiskLevelMatrix", req, cb);
    }
    /**
     * 风险概览-查询待处理风险统计数
     */
    async DescribeDSPAAssessmentPendingRiskOverview(req, cb) {
        return this.request("DescribeDSPAAssessmentPendingRiskOverview", req, cb);
    }
    /**
     * 调整ES任务扫描结果
     */
    async ModifyDSPAESTaskResult(req, cb) {
        return this.request("ModifyDSPAESTaskResult", req, cb);
    }
    /**
     * 获取RDB关系数据库分类分级资产详情
     */
    async DescribeDSPARDBDataAssetDetail(req, cb) {
        return this.request("DescribeDSPARDBDataAssetDetail", req, cb);
    }
    /**
     * 查询分类信息

     */
    async DescribeClassificationInfo(req, cb) {
        return this.request("DescribeClassificationInfo", req, cb);
    }
    /**
     * 风险分类TOP5统计
     */
    async DescribeDSPAAssessmentRiskItemTop5(req, cb) {
        return this.request("DescribeDSPAAssessmentRiskItemTop5", req, cb);
    }
    /**
     * 获取资源绑定DB状态
     */
    async QueryResourceDbBindStatus(req, cb) {
        return this.request("QueryResourceDbBindStatus", req, cb);
    }
    /**
     * 用于查询该用户是否已开通分类分级服务
     */
    async DescribeDSPADiscoveryServiceStatus(req, cb) {
        return this.request("DescribeDSPADiscoveryServiceStatus", req, cb);
    }
    /**
     * 启用版本体验
     */
    async EnableTrialVersion(req, cb) {
        return this.request("EnableTrialVersion", req, cb);
    }
    /**
     * 调整任务扫描结果
     */
    async ModifyDSPATaskResult(req, cb) {
        return this.request("ModifyDSPATaskResult", req, cb);
    }
    /**
     * 新增分类，单个用户最多允许创建100个数据分类。
     */
    async CreateDSPACategory(req, cb) {
        return this.request("CreateDSPACategory", req, cb);
    }
    /**
     * 新增COS分类分级扫描任务，单个用户最多允许创建100个任务。
     */
    async CreateDSPACOSDiscoveryTask(req, cb) {
        return this.request("CreateDSPACOSDiscoveryTask", req, cb);
    }
    /**
     * 获取合规组分类规则信息
     */
    async DescribeDSPACategoryRules(req, cb) {
        return this.request("DescribeDSPACategoryRules", req, cb);
    }
    /**
     * 风险模板页面--查询风险模板中的脆弱项配置
     */
    async DescribeDSPAAssessmentRiskTemplateVulnerableList(req, cb) {
        return this.request("DescribeDSPAAssessmentRiskTemplateVulnerableList", req, cb);
    }
    /**
     * 一个分类合并到另一个分类中（分类拖拽功能）
     */
    async ModifyMergeClassification(req, cb) {
        return this.request("ModifyMergeClassification", req, cb);
    }
    /**
     * 删除DSPA风险评估任务
     */
    async DeleteDSPAAssessmentTask(req, cb) {
        return this.request("DeleteDSPAAssessmentTask", req, cb);
    }
    /**
     * 验证分类分级规则
     */
    async VerifyDSPADiscoveryRule(req, cb) {
        return this.request("VerifyDSPADiscoveryRule", req, cb);
    }
    /**
     * 获取COS分类分级任务列表
     */
    async DescribeDSPACOSDiscoveryTasks(req, cb) {
        return this.request("DescribeDSPACOSDiscoveryTasks", req, cb);
    }
    /**
     * 获取分级详情
     */
    async DescribeDSPALevelDetail(req, cb) {
        return this.request("DescribeDSPALevelDetail", req, cb);
    }
    /**
     * 创建或复制分级分类模板
     */
    async CreateOrCopyStandard(req, cb) {
        return this.request("CreateOrCopyStandard", req, cb);
    }
    /**
     * 数据资产报告页面-查询数据资产概览接口（包括数据库资产详情和存储资产详情）
     */
    async DescribeAssetOverview(req, cb) {
        return this.request("DescribeAssetOverview", req, cb);
    }
    /**
     * 新建DSPA风险评估任务
     */
    async CreateDSPAAssessmentTask(req, cb) {
        return this.request("CreateDSPAAssessmentTask", req, cb);
    }
    /**
     * 验证COS分类分级规则
     */
    async VerifyDSPACOSRule(req, cb) {
        return this.request("VerifyDSPACOSRule", req, cb);
    }
    /**
     * 风险评估模板---创建风险评估模板
     */
    async CreateDSPAAssessmentRiskTemplate(req, cb) {
        return this.request("CreateDSPAAssessmentRiskTemplate", req, cb);
    }
    /**
     * 风险数量概览统计
     */
    async DescribeDSPAAssessmentRiskOverview(req, cb) {
        return this.request("DescribeDSPAAssessmentRiskOverview", req, cb);
    }
    /**
     * 根据合规组id，去查询ES的概览页下的统计列表数据
     */
    async DescribeDSPAESDataAssetDetail(req, cb) {
        return this.request("DescribeDSPAESDataAssetDetail", req, cb);
    }
    /**
     * 新增分类分级模板，单个用户最多允许创建100个合规组。
     */
    async CreateDSPAComplianceGroup(req, cb) {
        return this.request("CreateDSPAComplianceGroup", req, cb);
    }
    /**
     * 获取数据源的数据库信息
     */
    async DescribeDSPADataSourceDbInfo(req, cb) {
        return this.request("DescribeDSPADataSourceDbInfo", req, cb);
    }
    /**
     * 添加用户云上资源列表
     */
    async CreateDSPAMetaResources(req, cb) {
        return this.request("CreateDSPAMetaResources", req, cb);
    }
    /**
     * 修改识别规则状态
     */
    async ModifyClassificationRuleState(req, cb) {
        return this.request("ModifyClassificationRuleState", req, cb);
    }
    /**
     * 修改DSPA集群信息
     */
    async ModifyDSPAClusterInfo(req, cb) {
        return this.request("ModifyDSPAClusterInfo", req, cb);
    }
    /**
     * 查询高风险资产的top10
     */
    async DescribeDSPAAssessmentHighRiskTop10Overview(req, cb) {
        return this.request("DescribeDSPAAssessmentHighRiskTop10Overview", req, cb);
    }
    /**
     * 查询最新风险项详情数据
     */
    async DescribeDSPAAssessmentLatestRiskDetailInfo(req, cb) {
        return this.request("DescribeDSPAAssessmentLatestRiskDetailInfo", req, cb);
    }
    /**
     * 查询分类下规则列表

     */
    async DescribeRuleList(req, cb) {
        return this.request("DescribeRuleList", req, cb);
    }
    /**
     * 获取DSPA评估任务列表
     */
    async DescribeDSPAAssessmentTasks(req, cb) {
        return this.request("DescribeDSPAAssessmentTasks", req, cb);
    }
    /**
     * 获取分级分级扫描的表集合
     */
    async DescribeDSPADiscoveryTaskTables(req, cb) {
        return this.request("DescribeDSPADiscoveryTaskTables", req, cb);
    }
    /**
     * 获取用户购买配额信息
     */
    async GetUserQuotaInfo(req, cb) {
        return this.request("GetUserQuotaInfo", req, cb);
    }
    /**
     * 获取模板更新提示信息
     */
    async DescribeDSPAComplianceUpdateNotification(req, cb) {
        return this.request("DescribeDSPAComplianceUpdateNotification", req, cb);
    }
    /**
     * 添加用户云上数据库类型资源
     */
    async CreateDSPADbMetaResources(req, cb) {
        return this.request("CreateDSPADbMetaResources", req, cb);
    }
    /**
     * 调整COS任务扫描结果
     */
    async ModifyDSPACOSTaskResult(req, cb) {
        return this.request("ModifyDSPACOSTaskResult", req, cb);
    }
    /**
     * 绑定或解绑数据库实例DB
     */
    async BindDSPAResourceDatabases(req, cb) {
        return this.request("BindDSPAResourceDatabases", req, cb);
    }
    /**
     * 数据资产报告-查询es的敏感资产报告，包含（数据库资产，设敏级别数据库top10，资产详情）
     */
    async DescribeESAssetSensitiveDistribution(req, cb) {
        return this.request("DescribeESAssetSensitiveDistribution", req, cb);
    }
    /**
     * 授权用户云资源
     */
    async AuthorizeDSPAMetaResources(req, cb) {
        return this.request("AuthorizeDSPAMetaResources", req, cb);
    }
    /**
     * 拉取DSPA支持的Meta元数据类型，返回包括：元数据类型，支持的元数据地域信息
     */
    async DescribeDSPASupportedMetas(req, cb) {
        return this.request("DescribeDSPASupportedMetas", req, cb);
    }
    /**
     * 风险项处理趋势统计
     */
    async DescribeDSPAAssessmentRiskDealedTrend(req, cb) {
        return this.request("DescribeDSPAAssessmentRiskDealedTrend", req, cb);
    }
    /**
     * 数据资产报告-查询rdb的敏感数据分布-敏感规则字段分布-敏感分布详情
     */
    async DescribeSensitiveRDBDataDistribution(req, cb) {
        return this.request("DescribeSensitiveRDBDataDistribution", req, cb);
    }
    /**
     * 重新启动DSPA风险评估任务
     */
    async RestartDSPAAssessmentTask(req, cb) {
        return this.request("RestartDSPAAssessmentTask", req, cb);
    }
    /**
     * 获取ES的分类分级任务结果详情，该接口只有在任务状态为时才支持结果正确查询：
3 扫描成功
     */
    async DescribeDSPAESDiscoveryTaskResultDetail(req, cb) {
        return this.request("DescribeDSPAESDiscoveryTaskResultDetail", req, cb);
    }
    /**
     * 删除分类分级识别任务，该接口只有在任务状态为以下几个状态值时才支持正确删除：
0 待扫描，
2 扫描终止，
3 扫描成功，
4 扫描失败
     */
    async DeleteDSPADiscoveryTask(req, cb) {
        return this.request("DeleteDSPADiscoveryTask", req, cb);
    }
    /**
     * 更新自建资源基础信息，包括：端口、账户名、密码。
请注意：
如果资源自身的VPC、VIP信息发生变化，后台会自动更新。
如果监听的端口发生变化，请显式输入端口。
如果账户名密码任意一个发生变化，请务必同时显式输入账户名密码。
     */
    async UpdateDSPASelfBuildResource(req, cb) {
        return this.request("UpdateDSPASelfBuildResource", req, cb);
    }
    /**
     * 获取分类分级任务结果，该接口只有在任务状态为以下状态时才支持结果正常查询：
3 扫描成功，
4 扫描失败
     */
    async DescribeDSPADiscoveryTaskResult(req, cb) {
        return this.request("DescribeDSPADiscoveryTaskResult", req, cb);
    }
    /**
     * 风险项页面----修改风险等级的详情数据
     */
    async ModifyDSPAAssessmentRiskLevel(req, cb) {
        return this.request("ModifyDSPAAssessmentRiskLevel", req, cb);
    }
    /**
     * 新增分类分级规则，单个用户最多允许创建200个规则。
     */
    async CreateDSPADiscoveryRule(req, cb) {
        return this.request("CreateDSPADiscoveryRule", req, cb);
    }
    /**
     * 修改分类信息
     */
    async ModifyNewClassification(req, cb) {
        return this.request("ModifyNewClassification", req, cb);
    }
    /**
     * 数据资产报告-查询cos的资产分布详情接口
     */
    async DescribeCOSAssetSensitiveDistribution(req, cb) {
        return this.request("DescribeCOSAssetSensitiveDistribution", req, cb);
    }
    /**
     * 查询标准下所有叶子节点分类
     */
    async DescribeLeafClassification(req, cb) {
        return this.request("DescribeLeafClassification", req, cb);
    }
    /**
     * 新增分类分级任务，单个用户最多允许创建100个任务。
     */
    async CreateDSPADiscoveryTask(req, cb) {
        return this.request("CreateDSPADiscoveryTask", req, cb);
    }
    /**
     * 风险概览-查询新发现风险统计数
     */
    async DescribeDSPAAssessmentNewDiscoveredRiskOverview(req, cb) {
        return this.request("DescribeDSPAAssessmentNewDiscoveredRiskOverview", req, cb);
    }
    /**
     * 查询风险的处理历史
     */
    async DescribeDSPAAssessmentRiskProcessHistory(req, cb) {
        return this.request("DescribeDSPAAssessmentRiskProcessHistory", req, cb);
    }
    /**
     * 查询DSPA实例的db列表
     */
    async QueryDSPAMetaResourceDbList(req, cb) {
        return this.request("QueryDSPAMetaResourceDbList", req, cb);
    }
    /**
     * 获取体验版本信息
     */
    async GetTrialVersion(req, cb) {
        return this.request("GetTrialVersion", req, cb);
    }
    /**
     * 查询风险分布数据，包含风险类型分布，风险详情分布，风险资产的分布
     */
    async DescribeDSPAAssessmentRiskDistributionOverview(req, cb) {
        return this.request("DescribeDSPAAssessmentRiskDistributionOverview", req, cb);
    }
    /**
     * 查询标准下所有分类的识别规则数量(不算子分类下的识别规则)
     */
    async DescribeClassificationRuleCount(req, cb) {
        return this.request("DescribeClassificationRuleCount", req, cb);
    }
    /**
     * 获取分类规则树信息
     */
    async DescribeDSPACategoryTreeWithRules(req, cb) {
        return this.request("DescribeDSPACategoryTreeWithRules", req, cb);
    }
    /**
     * 获取授权资源的连接状态
     */
    async GetResourceConnectionStatus(req, cb) {
        return this.request("GetResourceConnectionStatus", req, cb);
    }
    /**
     * 获取ES扫描结果数据样本
     */
    async DescribeDSPAESDataSample(req, cb) {
        return this.request("DescribeDSPAESDataSample", req, cb);
    }
    /**
     * 获取DSPA评估模版关联的评估控制项列表
     */
    async DescribeDSPAAssessmentTemplateControlItems(req, cb) {
        return this.request("DescribeDSPAAssessmentTemplateControlItems", req, cb);
    }
    /**
     * 开启级别或关闭级别
     */
    async ModifyLevelState(req, cb) {
        return this.request("ModifyLevelState", req, cb);
    }
    /**
     * 获取分级列表，限制100个 不分页返回
     */
    async DescribeDSPALevelGroups(req, cb) {
        return this.request("DescribeDSPALevelGroups", req, cb);
    }
    /**
     * 拉取DSPA集群列表
     */
    async ListDSPAClusters(req, cb) {
        return this.request("ListDSPAClusters", req, cb);
    }
    /**
     * 创建敏感数据导出任务
     */
    async ExportAssetDetailData(req, cb) {
        return this.request("ExportAssetDetailData", req, cb);
    }
    /**
     * 获取分类树信息
     */
    async DescribeDSPACategoryTree(req, cb) {
        return this.request("DescribeDSPACategoryTree", req, cb);
    }
    /**
     * 新建用户自建云资源
     */
    async CreateDSPASelfBuildMetaResource(req, cb) {
        return this.request("CreateDSPASelfBuildMetaResource", req, cb);
    }
    /**
     * 停止分类分级任务，该接口只有在任务状态为以下状态时才支持正确执行停止扫描：
1 扫描中
     */
    async StopDSPADiscoveryTask(req, cb) {
        return this.request("StopDSPADiscoveryTask", req, cb);
    }
    /**
     * 添加COS元数据
     */
    async CreateDSPACosMetaResources(req, cb) {
        return this.request("CreateDSPACosMetaResources", req, cb);
    }
    /**
     * 修改分类，内置分类不支持修改。
     */
    async ModifyDSPACategory(req, cb) {
        return this.request("ModifyDSPACategory", req, cb);
    }
    /**
     * 修改分类分级规则，单个用户最多允许创建200个规则。
注：此API同时适用RDB跟COS类型数据。
     */
    async ModifyDSPADiscoveryRule(req, cb) {
        return this.request("ModifyDSPADiscoveryRule", req, cb);
    }
    /**
     * 删除分类分级识别任务结果
     */
    async DeleteDSPADiscoveryTaskResult(req, cb) {
        return this.request("DeleteDSPADiscoveryTaskResult", req, cb);
    }
    /**
     * 风险评估概览页，查询风险面的分布
     */
    async DescribeDSPAAssessmentRiskSideList(req, cb) {
        return this.request("DescribeDSPAAssessmentRiskSideList", req, cb);
    }
    /**
     * 获取COS敏感数据资产桶列表
     */
    async DescribeDSPACOSDataAssetBuckets(req, cb) {
        return this.request("DescribeDSPACOSDataAssetBuckets", req, cb);
    }
    /**
     * 风险概览-查询处理中风险统计数
     */
    async DescribeDSPAAssessmentProcessingRiskOverview(req, cb) {
        return this.request("DescribeDSPAAssessmentProcessingRiskOverview", req, cb);
    }
    /**
     * 创建资产梳理报告任务
     */
    async CreateAssetSortingReportTask(req, cb) {
        return this.request("CreateAssetSortingReportTask", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248947, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.dtf = void 0;
const v20200506_1 = require("./v20200506");
exports.dtf = {
    v20200506: v20200506_1.v20200506,
};

}, function(modId) { var map = {"./v20200506":1738984248948}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248948, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200506 = void 0;
const Models = require("./dtf_models");
const dtf_client_1 = require("./dtf_client");
exports.v20200506 = {
    Client: dtf_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./dtf_models":1738984248949,"./dtf_client":1738984248950}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248949, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248950, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * dtf client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("dtf.tencentcloudapi.com", "2020-05-06", clientConfig);
    }
    /**
     * 查询主事务列表
     */
    async DescribeTransactions(req, cb) {
        return this.request("DescribeTransactions", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248951, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.dts = void 0;
const v20180330_1 = require("./v20180330");
const v20211206_1 = require("./v20211206");
exports.dts = {
    v20180330: v20180330_1.v20180330,
    v20211206: v20211206_1.v20211206,
};

}, function(modId) { var map = {"./v20180330":1738984248952,"./v20211206":1738984248955}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248952, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180330 = void 0;
const Models = require("./dts_models");
const dts_client_1 = require("./dts_client");
exports.v20180330 = {
    Client: dts_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./dts_models":1738984248953,"./dts_client":1738984248954}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248953, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248954, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * dts client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("dts.tencentcloudapi.com", "2018-03-30", clientConfig);
    }
    /**
     * 本接口用于配置数据订阅，只有在未配置状态的订阅实例才能调用此接口。
     */
    async ActivateSubscribe(req, cb) {
        return this.request("ActivateSubscribe", req, cb);
    }
    /**
     * 本接口(ModifySubscribeObjects)用于修改数据订阅通道的订阅规则
     */
    async ModifySubscribeObjects(req, cb) {
        return this.request("ModifySubscribeObjects", req, cb);
    }
    /**
     * 本接口用于创建校验后,获取校验的结果. 能查询到当前校验的状态和进度.
若通过校验, 则可调用'StartMigrateJob' 开始迁移.
若未通过校验, 则能查询到校验失败的原因. 请按照报错, 通过'ModifyMigrateJob'修改迁移配置或是调整源/目标实例的相关参数.
     */
    async DescribeMigrateCheckJob(req, cb) {
        return this.request("DescribeMigrateCheckJob", req, cb);
    }
    /**
     * 本接口（DescribeAsyncRequestInfo）用于查询任务执行结果
     */
    async DescribeAsyncRequestInfo(req, cb) {
        return this.request("DescribeAsyncRequestInfo", req, cb);
    }
    /**
     * 修改订阅实例自动续费标识
     */
    async ModifySubscribeAutoRenewFlag(req, cb) {
        return this.request("ModifySubscribeAutoRenewFlag", req, cb);
    }
    /**
     * 本接口（StopMigrateJob）用于撤销数据迁移任务。
在迁移过程中允许调用该接口撤销迁移, 撤销迁移的任务会失败。通过DescribeMigrateJobs接口查询到任务状态为运行中（status=7）或准备完成（status=8）时，才能撤销数据迁移任务。
     */
    async StopMigrateJob(req, cb) {
        return this.request("StopMigrateJob", req, cb);
    }
    /**
     * 查询数据迁移任务.
如果是金融区链路, 请使用域名: https://dts.ap-shenzhen-fsi.tencentcloudapi.com
     */
    async DescribeMigrateJobs(req, cb) {
        return this.request("DescribeMigrateJobs", req, cb);
    }
    /**
     * 本接口(DescribeSubscribes)获取数据订阅实例信息列表，默认分页，每次返回20条
     */
    async DescribeSubscribes(req, cb) {
        return this.request("DescribeSubscribes", req, cb);
    }
    /**
     * 本接口（CreateMigrateJob）用于创建数据迁移任务。

如果是金融区链路, 请使用域名: dts.ap-shenzhen-fsi.tencentcloudapi.com
     */
    async CreateMigrateJob(req, cb) {
        return this.request("CreateMigrateJob", req, cb);
    }
    /**
     * 本接口(ModifySubscribeVipVport)用于修改数据订阅实例的IP和端口号
     */
    async ModifySubscribeVipVport(req, cb) {
        return this.request("ModifySubscribeVipVport", req, cb);
    }
    /**
     * 创建校验迁移任务
在开始迁移前, 必须调用本接口创建校验, 且校验成功后才能开始迁移. 校验的结果可以通过DescribeMigrateCheckJob查看.
校验成功后,迁移任务若有修改, 则必须重新创建校验并通过后, 才能开始迁移.

如果是金融区链路, 请使用域名: https://dts.ap-shenzhen-fsi.tencentcloudapi.com
     */
    async CreateMigrateCheckJob(req, cb) {
        return this.request("CreateMigrateCheckJob", req, cb);
    }
    /**
     * 本接口(ModifySubscribeConsumeTime)用于修改数据订阅通道的消费时间点
     */
    async ModifySubscribeConsumeTime(req, cb) {
        return this.request("ModifySubscribeConsumeTime", req, cb);
    }
    /**
     * 本接口(ModifySubscribeName)用于修改数据订阅实例的名称
     */
    async ModifySubscribeName(req, cb) {
        return this.request("ModifySubscribeName", req, cb);
    }
    /**
     * 本接口(CreateSubscribe)用于创建一个数据订阅实例。
     */
    async CreateSubscribe(req, cb) {
        return this.request("CreateSubscribe", req, cb);
    }
    /**
     * 本接口(ResetSubscribe)用于重置数据订阅实例，已经激活的数据订阅实例，重置后可以使用ActivateSubscribe接口绑定其他的数据库实例
     */
    async ResetSubscribe(req, cb) {
        return this.request("ResetSubscribe", req, cb);
    }
    /**
     * 本接口（StartMigrationJob）用于启动迁移任务。非定时迁移任务会在调用后立即开始迁移，定时任务则会开始倒计时。
调用此接口前，请务必先使用CreateMigrateCheckJob校验数据迁移任务，并通过DescribeMigrateJobs接口查询到任务状态为校验通过（status=4）时，才能启动数据迁移任务。
     */
    async StartMigrateJob(req, cb) {
        return this.request("StartMigrateJob", req, cb);
    }
    /**
     * 本接口（ModifyMigrateJob）用于修改数据迁移任务。
当迁移任务处于下述状态时，允许调用本接口修改迁移任务：迁移创建中（status=1）、 校验成功(status=4)、校验失败(status=5)、迁移失败(status=10)。但源实例、目标实例类型和目标实例地域不允许修改。

如果是金融区链路, 请使用域名: dts.ap-shenzhen-fsi.tencentcloudapi.com
     */
    async ModifyMigrateJob(req, cb) {
        return this.request("ModifyMigrateJob", req, cb);
    }
    /**
     * 本接口（OfflineIsolatedSubscribe）用于下线已隔离的数据订阅实例
     */
    async OfflineIsolatedSubscribe(req, cb) {
        return this.request("OfflineIsolatedSubscribe", req, cb);
    }
    /**
     * 本接口（IsolateSubscribe）用于隔离小时计费的订阅实例。调用后，订阅实例将不能使用，同时停止计费。
     */
    async IsolateSubscribe(req, cb) {
        return this.request("IsolateSubscribe", req, cb);
    }
    /**
     * 本接口（DescribeSubscribeConf）用于查询订阅实例配置
     */
    async DescribeSubscribeConf(req, cb) {
        return this.request("DescribeSubscribeConf", req, cb);
    }
    /**
     * 本接口（DeleteMigrationJob）用于删除数据迁移任务。当通过DescribeMigrateJobs接口查询到任务的状态为：检验中（status=3）、运行中（status=7）、准备完成（status=8）、撤销中（status=11）或者完成中（status=12）时，不允许删除任务。
     */
    async DeleteMigrateJob(req, cb) {
        return this.request("DeleteMigrateJob", req, cb);
    }
    /**
     * 本接口（CompleteMigrateJob）用于完成数据迁移任务。
选择采用增量迁移方式的任务, 需要在迁移进度进入准备完成阶段后, 调用本接口, 停止迁移增量数据。
通过DescribeMigrateJobs接口查询到任务的状态为准备完成（status=8）时，此时可以调用本接口完成迁移任务。

     */
    async CompleteMigrateJob(req, cb) {
        return this.request("CompleteMigrateJob", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248955, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20211206 = void 0;
const Models = require("./dts_models");
const dts_client_1 = require("./dts_client");
exports.v20211206 = {
    Client: dts_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./dts_models":1738984248956,"./dts_client":1738984248957}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248956, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248957, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * dts client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("dts.tencentcloudapi.com", "2021-12-06", clientConfig);
    }
    /**
     * 本接口(ResumeSubscribe) 用于恢复报错的订阅任务。当订阅任务的状态为error时，可通过本接口尝试对任务进行恢复。
     */
    async ResumeSubscribe(req, cb) {
        return this.request("ResumeSubscribe", req, cb);
    }
    /**
     * 本接口用于校验检查项不通过后，可进行跳过此校验项操作，后端将不再校验该项。任何校验步骤都是不应该跳过的，通过校验是能正确执行的前置条件。支持跳过的产品及链路的校验项可 [参考文档](https://cloud.tencent.com/document/product/571/61639)。
     */
    async SkipSyncCheckItem(req, cb) {
        return this.request("SkipSyncCheckItem", req, cb);
    }
    /**
     * 本接口（DestroyIsolatedSubscribe）用于下线已隔离的数据订阅实例
     */
    async DestroyIsolatedSubscribe(req, cb) {
        return this.request("DestroyIsolatedSubscribe", req, cb);
    }
    /**
     * 在修改同步任务的配置后、通过该接口校验当前任务是否支持修改对象操作
     */
    async CreateModifyCheckSyncJob(req, cb) {
        return this.request("CreateModifyCheckSyncJob", req, cb);
    }
    /**
     * 配置迁移服务，配置成功后可通过`CreateMigrationCheckJob` 创建迁移校验任务接口发起校验任务，只有校验通过才能启动迁移任务。
     */
    async ModifyMigrationJob(req, cb) {
        return this.request("ModifyMigrationJob", req, cb);
    }
    /**
     * 查询同步任务信息
     */
    async DescribeSyncJobs(req, cb) {
        return this.request("DescribeSyncJobs", req, cb);
    }
    /**
     * 修改任务运行时属性，此接口不同于配置类接口，不会进行状态机判断。
     */
    async ModifyMigrateRuntimeAttribute(req, cb) {
        return this.request("ModifyMigrateRuntimeAttribute", req, cb);
    }
    /**
     * 购买迁移任务。购买成功后会返回随机生成的迁移任务id列表，也可以通过查询迁移任务任务列表接口`DescribeMigrationJobs`看到购买成功的实例Id。注意，一旦购买成功后源及目标数据库类型，源及目标实例地域不可修改。
     */
    async CreateMigrationService(req, cb) {
        return this.request("CreateMigrationService", req, cb);
    }
    /**
     * 本接口(DescribeSubscribes)获取数据订阅实例信息列表，默认分页，每次返回20条
     */
    async DescribeSubscribeJobs(req, cb) {
        return this.request("DescribeSubscribeJobs", req, cb);
    }
    /**
     * 用户在发现迁移任务对用户的数据库的负载影响较大时、可通过该接口限制任务的传输速率
     */
    async ModifyMigrateRateLimit(req, cb) {
        return this.request("ModifyMigrateRateLimit", req, cb);
    }
    /**
     * 本接口(DescribeSubscribeReturnable)用于查询订阅任务是否可以销毁和退货。
     */
    async DescribeSubscribeReturnable(req, cb) {
        return this.request("DescribeSubscribeReturnable", req, cb);
    }
    /**
     * 隔离同步任务，隔离后可通过查询同步任务信息接口DescribeSyncJobs获取隔离后状态。在任务隔离后可进行解除隔离(RecoverSyncJob)操作或直接进行下线操作。对于不计费任务，调用此接口后会直接删除任务，无法进行恢复操作。
     */
    async IsolateSyncJob(req, cb) {
        return this.request("IsolateSyncJob", req, cb);
    }
    /**
     * 终止一致性校验任务
     */
    async StopCompare(req, cb) {
        return this.request("StopCompare", req, cb);
    }
    /**
     * 创建一个同步任务
     */
    async CreateSyncJob(req, cb) {
        return this.request("CreateSyncJob", req, cb);
    }
    /**
     * 本接口(ConfigureSubscribeJob)用于配置数据订阅实例。
     */
    async ConfigureSubscribeJob(req, cb) {
        return this.request("ConfigureSubscribeJob", req, cb);
    }
    /**
     * 本接口(DescribeConsumerGroups)用于获取订阅实例配置的消费者组详情。
     */
    async DescribeConsumerGroups(req, cb) {
        return this.request("DescribeConsumerGroups", req, cb);
    }
    /**
     * 为订阅实例创建消费者组
     */
    async CreateConsumerGroup(req, cb) {
        return this.request("CreateConsumerGroup", req, cb);
    }
    /**
     * 本接口(ResetConsumerGroupOffset)用于重置订阅消费组的offset。调用DescribeConsumerGroups接口查询消费组状态，只有消费组状态为 Dead 或 Empty 才可以执行重置该操作。否则重置不会生效，接口也不会报错。
     */
    async ResetConsumerGroupOffset(req, cb) {
        return this.request("ResetConsumerGroupOffset", req, cb);
    }
    /**
     * 删除一致性校验任务。当一致性校验任务状态为success、failed、canceled 时可以执行此操作。
     */
    async DeleteCompareTask(req, cb) {
        return this.request("DeleteCompareTask", req, cb);
    }
    /**
     * 本接口(StartSubscribe)用于启动一个kafka版本的数据订阅实例。只有当订阅任务的状态为checkPass时，才能调用本接口。
     */
    async StartSubscribe(req, cb) {
        return this.request("StartSubscribe", req, cb);
    }
    /**
     * 启动同步任务
     */
    async StartSyncJob(req, cb) {
        return this.request("StartSyncJob", req, cb);
    }
    /**
     * 结束同步任务，操作后可通过查询同步任务信息接口DescribeSyncJobs，获取操作后的状态。
     */
    async StopSyncJob(req, cb) {
        return this.request("StopSyncJob", req, cb);
    }
    /**
     * 校验同步任务，检查必要参数和周边配置。
     */
    async CreateCheckSyncJob(req, cb) {
        return this.request("CreateCheckSyncJob", req, cb);
    }
    /**
     * 查询一致性校验任务详情
     */
    async DescribeCompareReport(req, cb) {
        return this.request("DescribeCompareReport", req, cb);
    }
    /**
     * 恢复一个暂停中的迁移任务。
     */
    async ContinueMigrateJob(req, cb) {
        return this.request("ContinueMigrateJob", req, cb);
    }
    /**
     * 暂停一个迁移任务。
     */
    async PauseMigrateJob(req, cb) {
        return this.request("PauseMigrateJob", req, cb);
    }
    /**
     * 本接口(ModifySubscribeObjects)用于修改数据订阅对象和kafka分区规则，如果是mongo订阅，还可以修改输出聚合规则。
     */
    async ModifySubscribeObjects(req, cb) {
        return this.request("ModifySubscribeObjects", req, cb);
    }
    /**
     * 配置一个同步任务
     */
    async ConfigureSyncJob(req, cb) {
        return this.request("ConfigureSyncJob", req, cb);
    }
    /**
     * 本接口（IsolateSubscribe）用于隔离订阅任务。调用后，订阅任务将不能使用。按量计费的任务会停止计费，包年包月的任务会自动退费
     */
    async IsolateSubscribe(req, cb) {
        return this.request("IsolateSubscribe", req, cb);
    }
    /**
     * 在查询修改对象的校验任务的结果中的status为success后、通过该接口开始修改配置流程
     */
    async StartModifySyncJob(req, cb) {
        return this.request("StartModifySyncJob", req, cb);
    }
    /**
     * 调整同步任务规格，此接口只支持按量计费任务的调整，调用此接口后不会立即生效，后台调整时间大概为3~5分钟。调用此接口后可通过查询同步任务信息接口DescribeSyncJobs，获取变配后的状态。
     */
    async ResizeSyncJob(req, cb) {
        return this.request("ResizeSyncJob", req, cb);
    }
    /**
     * 修改订阅实例自动续费标识。只有包年包月的任务修改才有意义，按量计费任务修改后无影响。
     */
    async ModifySubscribeAutoRenewFlag(req, cb) {
        return this.request("ModifySubscribeAutoRenewFlag", req, cb);
    }
    /**
     * 该接口支持在同步任务启动后修改任务的配置
修改同步配置的完整流程：修改同步任务配置->创建修改同步任务配置的校验任务->查询修改配置的校验任务的结果->启动修改配置任务
     */
    async ModifySyncJobConfig(req, cb) {
        return this.request("ModifySyncJobConfig", req, cb);
    }
    /**
     * 重试数据迁移任务，针对异常情况可进行重试，对于redis在失败时也可重试。注意：此操作跳过校验阶段，直接重新发起任务，相当于从StartMigrationJob开始执行。调用此接口后可通过查询迁移服务列表接口`DescribeMigrationJobs`来查询当前任务状态。
     */
    async ResumeMigrateJob(req, cb) {
        return this.request("ResumeMigrateJob", req, cb);
    }
    /**
     * 本接口（StopMigrateJob）用于终止数据迁移任务。
调用此接口后可通过查询迁移服务列表接口`DescribeMigrationJobs`来查询当前任务状态。
     */
    async StopMigrateJob(req, cb) {
        return this.request("StopMigrateJob", req, cb);
    }
    /**
     * 暂停处于同步中的数据同步任务。
     */
    async PauseSyncJob(req, cb) {
        return this.request("PauseSyncJob", req, cb);
    }
    /**
     * 用户在发现同步任务对用户的数据库的负载影响较大时、可通过该接口限制任务的传输速率
     */
    async ModifySyncRateLimit(req, cb) {
        return this.request("ModifySyncRateLimit", req, cb);
    }
    /**
     * 启动一致性校验任务，启动之前需要先通过接口`CreateCompareTask` 创建一致性校验任务，启动后可通过接口`DescribeCompareTasks` 查询一致性校验任务列表来获得启动后的状态
     */
    async StartCompare(req, cb) {
        return this.request("StartCompare", req, cb);
    }
    /**
     * 本接口(DescribeSubscribeCheckJob)用于查询订阅校验任务结果。
     */
    async DescribeSubscribeCheckJob(req, cb) {
        return this.request("DescribeSubscribeCheckJob", req, cb);
    }
    /**
     * 恢复处于已暂停状态的数据同步任务。
     */
    async ContinueSyncJob(req, cb) {
        return this.request("ContinueSyncJob", req, cb);
    }
    /**
     *  隔离退还数据迁移服务。调用此接口后可通过查询迁移服务列表接口`DescribeMigrationJobs`来查询当前任务状态。对于计费任务，在任务隔离后可进行解除隔离(RecoverMigrationJob)操作或直接进行下线销毁(DestroyMigrateJob)操作。对于不计费任务，调用此接口会直接销毁任务，无法进行恢复操作。
     */
    async IsolateMigrateJob(req, cb) {
        return this.request("IsolateMigrateJob", req, cb);
    }
    /**
     * 本接口(ModifyConsumerGroupDescription)用于修改指定订阅消费组备注。
     */
    async ModifyConsumerGroupDescription(req, cb) {
        return this.request("ModifyConsumerGroupDescription", req, cb);
    }
    /**
     * 本接口用于查询支持迁移的云数据库实例
     */
    async DescribeMigrateDBInstances(req, cb) {
        return this.request("DescribeMigrateDBInstances", req, cb);
    }
    /**
     * 本接口用于校验检查项不通过后，可进行跳过此校验项操作，后端将不再校验该项。任何校验步骤都是不应该跳过的，通过校验是能正确执行的前置条件。支持跳过的产品及链路的校验项可 [参考文档](https://cloud.tencent.com/document/product/571/61639)。
     */
    async SkipCheckItem(req, cb) {
        return this.request("SkipCheckItem", req, cb);
    }
    /**
     * 本接口(ModifyConsumerGroupPassword)用于修改指定订阅消费组密码。
     */
    async ModifyConsumerGroupPassword(req, cb) {
        return this.request("ModifyConsumerGroupPassword", req, cb);
    }
    /**
     * 本接口(CreateSubscribeCheckJob)用于创建一个订阅校验任务。任务必须已经成功调用ConfigureSubscribeJob接口配置了所有的必要信息才能启动校验。
     */
    async CreateSubscribeCheckJob(req, cb) {
        return this.request("CreateSubscribeCheckJob", req, cb);
    }
    /**
     * 校验迁移任务，
在开始迁移前, 必须调用本接口创建校验迁移任务, 且校验成功后才能开始迁移. 校验的结果可以通过DescribeMigrationCheckJob查看，
校验成功后,迁移任务若有修改, 则必须重新校验并通过后, 才能开始迁移

     */
    async CreateMigrateCheckJob(req, cb) {
        return this.request("CreateMigrateCheckJob", req, cb);
    }
    /**
     * 查询同步校验任务结果，检查必要参数和周边配置
     */
    async DescribeCheckSyncJobResult(req, cb) {
        return this.request("DescribeCheckSyncJobResult", req, cb);
    }
    /**
     * 查询一致性校验任务列表，调用该接口后可通过接口`DescribeCompareTasks` 查询一致性校验任务列表来获得启动后的状态。
     */
    async DescribeCompareTasks(req, cb) {
        return this.request("DescribeCompareTasks", req, cb);
    }
    /**
     * 修改一致性校验任务，在任务创建后启动之前，可修改一致性校验参数
     */
    async ModifyCompareTask(req, cb) {
        return this.request("ModifyCompareTask", req, cb);
    }
    /**
     * 本接口(DescribeSubscribeDetail)获取数据订阅实例的配置信息。
     */
    async DescribeSubscribeDetail(req, cb) {
        return this.request("DescribeSubscribeDetail", req, cb);
    }
    /**
     * 本接口(DeleteConsumerGroup)用于删除一个订阅任务的消费组。
     */
    async DeleteConsumerGroup(req, cb) {
        return this.request("DeleteConsumerGroup", req, cb);
    }
    /**
     * 查询数据迁移任务列表
     */
    async DescribeMigrationJobs(req, cb) {
        return this.request("DescribeMigrationJobs", req, cb);
    }
    /**
     * 解除隔离数据迁移任务，用户手动发起隔离后的手动解隔离，只有任务状态为已隔离(手动操作)状态下才能触发此操作。调用此接口后可通过查询迁移服务列表接口`DescribeMigrationJobs`来查询当前任务状态。
     */
    async RecoverMigrateJob(req, cb) {
        return this.request("RecoverMigrateJob", req, cb);
    }
    /**
     * 本接口(CreateSubscribe)用于创建一个数据订阅任务。
     */
    async CreateSubscribe(req, cb) {
        return this.request("CreateSubscribe", req, cb);
    }
    /**
     * 解除隔离同步任务，任务在已隔离状态下可调用该接口解除隔离状态任务，同时可通过查询同步任务信息接口DescribeSyncJobs，获取操作后状态。
     */
    async RecoverSyncJob(req, cb) {
        return this.request("RecoverSyncJob", req, cb);
    }
    /**
     * 本接口(ResetSubscribe)用于重置订阅实例，重置后，可以重新配置订阅任务。
可以调用 DescribeSubscribeDetail 查询订阅信息判断是否置成功。当SubsStatus变为notStarted时，表示重置成功。
     */
    async ResetSubscribe(req, cb) {
        return this.request("ResetSubscribe", req, cb);
    }
    /**
     * 本接口用于创建数据对比任务，创建成功后会返回数据对比任务 ID，形如：dts-8yv4w2i1-cmp-37skmii9，创建成功后可通过StartCompare启动一致性校验任务
     */
    async CreateCompareTask(req, cb) {
        return this.request("CreateCompareTask", req, cb);
    }
    /**
     * 在创建修改对象的校验任务后、通过该接口查看校验任务的结果
     */
    async DescribeModifyCheckSyncJobResult(req, cb) {
        return this.request("DescribeModifyCheckSyncJobResult", req, cb);
    }
    /**
     * 本接口(ModifySubscribeName)用于修改数据订阅实例的名称
     */
    async ModifySubscribeName(req, cb) {
        return this.request("ModifySubscribeName", req, cb);
    }
    /**
     * 下线数据迁移任务。计费任务必须先调用隔离(IsolateMigrateJob)接口，且只有是**已隔离**状态下，才能调用此接口销毁任务。对于不计费任务，调用隔离(IsolateMigrateJob)接口删除任务操作。
     */
    async DestroyMigrateJob(req, cb) {
        return this.request("DestroyMigrateJob", req, cb);
    }
    /**
     * 查询某个迁移任务详情
     */
    async DescribeMigrationDetail(req, cb) {
        return this.request("DescribeMigrationDetail", req, cb);
    }
    /**
     * 本接口(DescribeOffsetByTime)查询KafkaTopic中指定时间前最近的offset。
接口输出的offset是离这个时间最近的offset。
如果输入时间比当前时间晚的多，相当于输出的就是最新的offset；
如果输入时间比当前时间早的多，相当于输出的就是最老的offset；
如果输入空，默认0时间，也就是查询最老的offset。
     */
    async DescribeOffsetByTime(req, cb) {
        return this.request("DescribeOffsetByTime", req, cb);
    }
    /**
     * 重试同步任务，部分可恢复报错情况下，可通过该接口重试同步任务，可通过查询同步任务信息接口DescribeSyncJobs，获取操作后状态。
     */
    async ResumeSyncJob(req, cb) {
        return this.request("ResumeSyncJob", req, cb);
    }
    /**
     * 本接口用于创建校验后,获取校验的结果. 能查询到当前校验的状态和进度.
若通过校验, 则可调用'StartMigrateJob' 开始迁移.
若未通过校验, 则能查询到校验失败的原因. 请按照报错, 通过'ModifyMigrationJob'修改迁移配置或是调整源/目标实例的相关参数.
     */
    async DescribeMigrationCheckJob(req, cb) {
        return this.request("DescribeMigrationCheckJob", req, cb);
    }
    /**
     * 本接口（StartMigrationJob）用于启动迁移任务。调用此接口后可通过查询迁移服务列表接口`DescribeMigrationJobs`来查询当前任务状态。
     */
    async StartMigrateJob(req, cb) {
        return this.request("StartMigrateJob", req, cb);
    }
    /**
     * 调整实例规格，此接口只支持按量计费任务的调整。调用此接口后可通过查询迁移服务列表接口`DescribeMigrationJobs`来查询当前任务状态。
     */
    async ModifyMigrateJobSpec(req, cb) {
        return this.request("ModifyMigrateJobSpec", req, cb);
    }
    /**
     * 下线同步任务，任务在已隔离状态下可以通过此操作进行任务下线，即彻底删除任务。下线操作后可通过查询同步任务信息接口DescribeSyncJobs获取任务列表查看状态，此操作成功后无法看到此任务表示下线成功。
     */
    async DestroySyncJob(req, cb) {
        return this.request("DestroySyncJob", req, cb);
    }
    /**
     * 修改一致性校验任务名称
     */
    async ModifyCompareTaskName(req, cb) {
        return this.request("ModifyCompareTaskName", req, cb);
    }
    /**
     * 修改迁移任务名
     */
    async ModifyMigrateName(req, cb) {
        return this.request("ModifyMigrateName", req, cb);
    }
    /**
     * 本接口（CompleteMigrateJob）用于完成数据迁移任务。
选择采用增量迁移方式的任务, 需要在迁移进度进入准备完成阶段后, 调用本接口, 停止迁移增量数据。
通过DescribeMigrationJobs接口查询到任务的状态为准备完成（Status="readyComplete"）时，此时可以调用本接口完成迁移任务。

     */
    async CompleteMigrateJob(req, cb) {
        return this.request("CompleteMigrateJob", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248958, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.eb = void 0;
const v20210416_1 = require("./v20210416");
exports.eb = {
    v20210416: v20210416_1.v20210416,
};

}, function(modId) { var map = {"./v20210416":1738984248959}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248959, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210416 = void 0;
const Models = require("./eb_models");
const eb_client_1 = require("./eb_client");
exports.v20210416 = {
    Client: eb_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./eb_models":1738984248960,"./eb_client":1738984248961}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248960, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248961, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * eb client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("eb.tencentcloudapi.com", "2021-04-16", clientConfig);
    }
    /**
     * 删除事件集
     */
    async DeleteEventBus(req, cb) {
        return this.request("DeleteEventBus", req, cb);
    }
    /**
     * 获取平台产品事件模板
     */
    async GetPlatformEventTemplate(req, cb) {
        return this.request("GetPlatformEventTemplate", req, cb);
    }
    /**
     * 用于创建转换器
     */
    async CreateTransformation(req, cb) {
        return this.request("CreateTransformation", req, cb);
    }
    /**
     * 用于创建事件集
     */
    async CreateEventBus(req, cb) {
        return this.request("CreateEventBus", req, cb);
    }
    /**
     * 创建事件规则
     */
    async CreateRule(req, cb) {
        return this.request("CreateRule", req, cb);
    }
    /**
     * 删除事件目标
     */
    async DeleteTarget(req, cb) {
        return this.request("DeleteTarget", req, cb);
    }
    /**
     * 获取平台产品事件匹配规则
     */
    async ListPlatformEventPatterns(req, cb) {
        return this.request("ListPlatformEventPatterns", req, cb);
    }
    /**
     * 获取事件目标列表
     */
    async ListTargets(req, cb) {
        return this.request("ListTargets", req, cb);
    }
    /**
     * 检验规则
     */
    async CheckRule(req, cb) {
        return this.request("CheckRule", req, cb);
    }
    /**
     * 获取平台产品列表
     */
    async ListPlatformProducts(req, cb) {
        return this.request("ListPlatformProducts", req, cb);
    }
    /**
     * （已废弃）用于Event事件投递
     */
    async PublishEvent(req, cb) {
        return this.request("PublishEvent", req, cb);
    }
    /**
     * 用于Event事件投递
     */
    async PutEvents(req, cb) {
        return this.request("PutEvents", req, cb);
    }
    /**
     * 更新事件目标
     */
    async UpdateTarget(req, cb) {
        return this.request("UpdateTarget", req, cb);
    }
    /**
     * 用于获取转换器详情
     */
    async GetTransformation(req, cb) {
        return this.request("GetTransformation", req, cb);
    }
    /**
     * 获取事件规则列表
     */
    async ListRules(req, cb) {
        return this.request("ListRules", req, cb);
    }
    /**
     * 删除事件规则
     */
    async DeleteRule(req, cb) {
        return this.request("DeleteRule", req, cb);
    }
    /**
     * 获取平台产品事件名称
     */
    async ListPlatformEventNames(req, cb) {
        return this.request("ListPlatformEventNames", req, cb);
    }
    /**
     * 更新事件集
     */
    async UpdateEventBus(req, cb) {
        return this.request("UpdateEventBus", req, cb);
    }
    /**
     * 创建事件目标
     */
    async CreateTarget(req, cb) {
        return this.request("CreateTarget", req, cb);
    }
    /**
     * 更新事件规则
     */
    async UpdateRule(req, cb) {
        return this.request("UpdateRule", req, cb);
    }
    /**
     * 前置条件：需开启事件存储；事件查询维度值
     */
    async DescribeLogTagValue(req, cb) {
        return this.request("DescribeLogTagValue", req, cb);
    }
    /**
     * 用于删除转换器
     */
    async DeleteTransformation(req, cb) {
        return this.request("DeleteTransformation", req, cb);
    }
    /**
     * 创建事件连接器
     */
    async CreateConnection(req, cb) {
        return this.request("CreateConnection", req, cb);
    }
    /**
     * 获取事件规则详情
     */
    async GetRule(req, cb) {
        return this.request("GetRule", req, cb);
    }
    /**
     * 前置条件：开启事件存储；查询历史推送事件
     */
    async SearchLog(req, cb) {
        return this.request("SearchLog", req, cb);
    }
    /**
     * 删除事件连接器
     */
    async DeleteConnection(req, cb) {
        return this.request("DeleteConnection", req, cb);
    }
    /**
     * 获取事件集列表
     */
    async ListEventBuses(req, cb) {
        return this.request("ListEventBuses", req, cb);
    }
    /**
     * 获取事件集详情
     */
    async GetEventBus(req, cb) {
        return this.request("GetEventBus", req, cb);
    }
    /**
     * 用于更新转换器
     */
    async UpdateTransformation(req, cb) {
        return this.request("UpdateTransformation", req, cb);
    }
    /**
     * 用于在ETL配置页面, 测试规则和数据.
     */
    async CheckTransformation(req, cb) {
        return this.request("CheckTransformation", req, cb);
    }
    /**
     * 获取事件连接器列表
     */
    async ListConnections(req, cb) {
        return this.request("ListConnections", req, cb);
    }
    /**
     * 更新事件连接器
     */
    async UpdateConnection(req, cb) {
        return this.request("UpdateConnection", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248962, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ecc = void 0;
const v20181213_1 = require("./v20181213");
exports.ecc = {
    v20181213: v20181213_1.v20181213,
};

}, function(modId) { var map = {"./v20181213":1738984248963}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248963, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20181213 = void 0;
const Models = require("./ecc_models");
const ecc_client_1 = require("./ecc_client");
exports.v20181213 = {
    Client: ecc_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ecc_models":1738984248964,"./ecc_client":1738984248965}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248964, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248965, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ecc client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ecc.tencentcloudapi.com", "2018-12-13", clientConfig);
    }
    /**
     * https://ecc.tencentcloudapi.com/?Action=EHOCR
图像识别批改接口
     */
    async EHOCR(req, cb) {
        return this.request("EHOCR", req, cb);
    }
    /**
     * 纯文本英语作文批改
     */
    async ECC(req, cb) {
        return this.request("ECC", req, cb);
    }
    /**
     * 异步任务结果查询接口
     */
    async DescribeTask(req, cb) {
        return this.request("DescribeTask", req, cb);
    }
    /**
     * https://ecc.tencentcloudapi.com/?Action=CorrectMultiImage
多图像识别批改接口
     */
    async CorrectMultiImage(req, cb) {
        return this.request("CorrectMultiImage", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248966, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ecdn = void 0;
const v20191012_1 = require("./v20191012");
exports.ecdn = {
    v20191012: v20191012_1.v20191012,
};

}, function(modId) { var map = {"./v20191012":1738984248967}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248967, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20191012 = void 0;
const Models = require("./ecdn_models");
const ecdn_client_1 = require("./ecdn_client");
exports.v20191012 = {
    Client: ecdn_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ecdn_models":1738984248968,"./ecdn_client":1738984248969}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248968, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248969, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ecdn client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ecdn.tencentcloudapi.com", "2019-10-12", clientConfig);
    }
    /**
     * ECDN融合CDN后，接口都用CDN的，此接口已经废弃

本接口（AddEcdnDomain）用于创建加速域名。

>?  若您的业务已迁移至 CDN 控制台，请参考<a href="https://cloud.tencent.com/document/api/228/41123"> CDN 接口文档</a>，使用  CDN 相关API 进行操作。
     */
    async AddEcdnDomain(req, cb) {
        return this.request("AddEcdnDomain", req, cb);
    }
    /**
     * DescribeIpStatus 用于查询域名所在加速平台的所有节点信息, 如果您的源站有白名单设置,可以通过本接口获取ECDN服务的节点IP进行加白, 本接口为内测接口,请联系腾讯云工程师开白。

由于产品服务节点常有更新，对于源站开白的使用场景，请定期调用接口获取最新节点信息，若新增服务节点发布7日后您尚未更新加白导致回源失败等问题，ECDN侧不对此承担责任。
     */
    async DescribeIpStatus(req, cb) {
        return this.request("DescribeIpStatus", req, cb);
    }
    /**
     * ECDN融合CDN后，接口都用CDN的，此接口已经废弃

PurgePathCache 用于批量刷新目录缓存，一次提交将返回一个刷新任务id。

>?  若您的业务已迁移至 CDN 控制台，请参考<a href="	https://cloud.tencent.com/document/api/570/42475"> CDN 接口文档</a>，使用  CDN 相关API 进行操作。
     */
    async PurgePathCache(req, cb) {
        return this.request("PurgePathCache", req, cb);
    }
    /**
     * ECDN融合CDN后，接口都用CDN的，此接口已经废弃

本接口（StartEcdnDomain）用于启用加速域名，待启用域名必须处于已下线状态。

>?  若您的业务已迁移至 CDN 控制台，请参考<a href="https://cloud.tencent.com/document/product/228/41121"> CDN 接口文档</a>，使用  CDN 相关API 进行操作。
     */
    async StartEcdnDomain(req, cb) {
        return this.request("StartEcdnDomain", req, cb);
    }
    /**
     * ECDN融合CDN后，接口都用CDN的，此接口已经废弃

本接口（UpdateDomainConfig）用于更新ECDN加速域名配置信息。
注意：如果需要更新复杂类型的配置项，必须传递整个对象的所有属性，未传递的属性将使用默认值。建议通过查询接口获取配置属性后，直接修改后传递给本接口。Https配置由于证书的特殊性，更新时不用传递证书和密钥字段。

>?  若您的业务已迁移至 CDN 控制台，请参考<a href="https://cloud.tencent.com/document/product/228/41116"> CDN 接口文档</a>，使用  CDN 相关API 进行操作。

     */
    async UpdateDomainConfig(req, cb) {
        return this.request("UpdateDomainConfig", req, cb);
    }
    /**
     * DescribePurgeTasks 用于查询刷新任务提交历史记录及执行进度。

>?  若您的业务已迁移至 CDN 控制台，请参考<a href="https://cloud.tencent.com/document/api/228/37873"> CDN 接口文档</a>，使用  CDN 相关API 进行操作。
     */
    async DescribePurgeTasks(req, cb) {
        return this.request("DescribePurgeTasks", req, cb);
    }
    /**
     * 本接口（DescribeEcdnDomainLogs）用于查询域名的访问日志下载地址。
     */
    async DescribeEcdnDomainLogs(req, cb) {
        return this.request("DescribeEcdnDomainLogs", req, cb);
    }
    /**
     * 本接口（DescribeDomainsConfig）用于查询CDN加速域名详细配置信息。

>?  若您的业务已迁移至 CDN 控制台，请参考<a href="https://cloud.tencent.com/document/api/228/41117"> CDN 接口文档</a>，使用  CDN 相关API 进行操作。
     */
    async DescribeDomainsConfig(req, cb) {
        return this.request("DescribeDomainsConfig", req, cb);
    }
    /**
     * ECDN融合CDN后，接口都用CDN的，此接口已经废弃

查询刷新接口的用量配额。

>?  若您的业务已迁移至 CDN 控制台，请参考<a href="https://cloud.tencent.com/document/api/228/41956"> CDN 接口文档</a>，使用  CDN 相关API 进行操作。
     */
    async DescribePurgeQuota(req, cb) {
        return this.request("DescribePurgeQuota", req, cb);
    }
    /**
     * PurgeUrlsCache 用于批量刷新Url，一次提交将返回一个刷新任务id。

>?  若您的业务已迁移至 CDN 控制台，请参考<a href="https://cloud.tencent.com/document/api/228/37870"> CDN 接口文档</a>，使用  CDN 相关API 进行操作。
     */
    async PurgeUrlsCache(req, cb) {
        return this.request("PurgeUrlsCache", req, cb);
    }
    /**
     * ECDN融合CDN后，接口都用CDN的，此接口已经废弃

本接口（StopCdnDomain）用于停止加速域名，待停用加速域名必须处于已上线或部署中状态。

>?  若您的业务已迁移至 CDN 控制台，请参考<a href="https://cloud.tencent.com/document/product/228/41120"> CDN 接口文档</a>，使用  CDN 相关API 进行操作。
     */
    async StopEcdnDomain(req, cb) {
        return this.request("StopEcdnDomain", req, cb);
    }
    /**
     * ECDN融合CDN后，接口都用CDN的，此接口已经废弃

本接口（DeleteEcdnDomain）用于删除指定加速域名。待删除域名必须处于已停用状态。

>?  若您的业务已迁移至 CDN 控制台，请参考<a href="https://cloud.tencent.com/document/api/228/41122"> CDN 接口文档</a>，使用  CDN 相关API 进行操作。
     */
    async DeleteEcdnDomain(req, cb) {
        return this.request("DeleteEcdnDomain", req, cb);
    }
    /**
     * 本接口（DescribeDomains）用于查询CDN域名基本信息，包括项目id，状态，业务类型，创建时间，更新时间等。

>?  若您的业务已迁移至 CDN 控制台，请参考<a href="https://cloud.tencent.com/document/api/228/41118"> CDN 接口文档</a>，使用  CDN 相关API 进行操作。
     */
    async DescribeDomains(req, cb) {
        return this.request("DescribeDomains", req, cb);
    }
    /**
     * ECDN融合CDN后，接口都用CDN的，此接口已经废弃

生成一条子域名解析，提示客户添加到域名解析上，用于泛域名及域名取回校验归属权。

>?  若您的业务已迁移至 CDN 控制台，请参考<a href="	https://cloud.tencent.com/document/api/228/48118"> CDN 接口文档</a>，使用  CDN 相关API 进行操作。
     */
    async CreateVerifyRecord(req, cb) {
        return this.request("CreateVerifyRecord", req, cb);
    }
    /**
     * 本接口（DescribeEcdnDomainStatistics）用于查询指定时间段内的域名访问统计指标。

>?  若您的业务已迁移至 CDN 控制台，请参考<a href="https://cloud.tencent.com/document/api/228/30986"> CDN 接口文档</a>，使用  CDN 相关API 进行操作。
     */
    async DescribeEcdnDomainStatistics(req, cb) {
        return this.request("DescribeEcdnDomainStatistics", req, cb);
    }
    /**
     * DescribeEcdnStatistics用于查询 ECDN 实时访问监控数据，支持以下指标查询：

+ 流量（单位为 byte）
+ 带宽（单位为 bps）
+ 请求数（单位为 次）
+ 状态码 2xx 汇总及各 2 开头状态码明细（单位为 个）
+ 状态码 3xx 汇总及各 3 开头状态码明细（单位为 个）
+ 状态码 4xx 汇总及各 4 开头状态码明细（单位为 个）
+ 状态码 5xx 汇总及各 5 开头状态码明细（单位为 个）
     */
    async DescribeEcdnStatistics(req, cb) {
        return this.request("DescribeEcdnStatistics", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248970, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ecm = void 0;
const v20190719_1 = require("./v20190719");
exports.ecm = {
    v20190719: v20190719_1.v20190719,
};

}, function(modId) { var map = {"./v20190719":1738984248971}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248971, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190719 = void 0;
const Models = require("./ecm_models");
const ecm_client_1 = require("./ecm_client");
exports.v20190719 = {
    Client: ecm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ecm_models":1738984248972,"./ecm_client":1738984248973}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248972, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248973, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ecm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ecm.tencentcloudapi.com", "2019-07-19", clientConfig);
    }
    /**
     * 替换单条安全组路由规则, 单个请求中只能替换单个方向的一条规则, 必须要指定索引（PolicyIndex）。
     */
    async ReplaceSecurityGroupPolicy(req, cb) {
        return this.request("ReplaceSecurityGroupPolicy", req, cb);
    }
    /**
     * 获取带宽硬盘等数据的限制
     */
    async DescribeConfig(req, cb) {
        return this.request("DescribeConfig", req, cb);
    }
    /**
     * 查询EIP异步任务执行结果
     */
    async DescribeTaskResult(req, cb) {
        return this.request("DescribeTaskResult", req, cb);
    }
    /**
     * 修改模块名称
     */
    async ModifyModuleName(req, cb) {
        return this.request("ModifyModuleName", req, cb);
    }
    /**
     * 查询路由表对象列表
     */
    async DescribeRouteTables(req, cb) {
        return this.request("DescribeRouteTables", req, cb);
    }
    /**
     * 创建了VPC后，系统会创建一个默认路由表，所有新建的子网都会关联到默认路由表。默认情况下您可以直接使用默认路由表来管理您的路由策略。当您的路由策略较多时，您可以调用创建路由表接口创建更多路由表管理您的路由策略。
     */
    async CreateRouteTable(req, cb) {
        return this.request("CreateRouteTable", req, cb);
    }
    /**
     * 批量解绑后端服务。
     */
    async BatchDeregisterTargets(req, cb) {
        return this.request("BatchDeregisterTargets", req, cb);
    }
    /**
     * 修改实例的属性。
     */
    async ModifyInstancesAttribute(req, cb) {
        return this.request("ModifyInstancesAttribute", req, cb);
    }
    /**
     * 对某个路由表名称和所有路由策略（Route）进行重新设置
     */
    async ResetRoutes(req, cb) {
        return this.request("ResetRoutes", req, cb);
    }
    /**
     * 本接口（AssignIpv6CidrBlocks）用于分配IPv6网段。

使用本接口前，您需要已有VPC实例，如果没有可通过接口CreateVpc创建。
每个VPC 可以同时支持运营商网络('CMCC'-中国移动, 'CTCC'-中国电信, 'CUCC'-中国联调)。本接口可以同时申请不同类型的IPv6网段
     */
    async AssignIpv6CidrBlocks(req, cb) {
        return this.request("AssignIpv6CidrBlocks", req, cb);
    }
    /**
     * 用于修改弹性网卡内网IP属性。
     */
    async ModifyPrivateIpAddressesAttribute(req, cb) {
        return this.request("ModifyPrivateIpAddressesAttribute", req, cb);
    }
    /**
     * 创建ECM实例。
     */
    async RunInstances(req, cb) {
        return this.request("RunInstances", req, cb);
    }
    /**
     * 弹性网卡申请内网 IP
     */
    async AssignPrivateIpAddresses(req, cb) {
        return this.request("AssignPrivateIpAddresses", req, cb);
    }
    /**
     * 查询弹性公网IP列表
     */
    async DescribeAddresses(req, cb) {
        return this.request("DescribeAddresses", req, cb);
    }
    /**
     * 修改模块的默认镜像
     */
    async ModifyModuleImage(req, cb) {
        return this.request("ModifyModuleImage", req, cb);
    }
    /**
     * 查询负载均衡的监听器列表。
     */
    async DescribeListeners(req, cb) {
        return this.request("DescribeListeners", req, cb);
    }
    /**
     * 本接口(CreateImage)用于将实例的系统盘制作为新镜像，创建后的镜像可以用于创建实例。
     */
    async CreateImage(req, cb) {
        return this.request("CreateImage", req, cb);
    }
    /**
     * 获取节点列表
     */
    async DescribeNode(req, cb) {
        return this.request("DescribeNode", req, cb);
    }
    /**
     * 查询导入镜像任务
     */
    async DescribeCustomImageTask(req, cb) {
        return this.request("DescribeCustomImageTask", req, cb);
    }
    /**
     * 本接口（AssignIpv6CidrBlock）用于分配IPv6网段。

使用本接口前，您需要已有VPC实例，如果没有可通过接口CreateVpc创建。
     */
    async AssignIpv6CidrBlock(req, cb) {
        return this.request("AssignIpv6CidrBlock", req, cb);
    }
    /**
     * 查询负载均衡实例列表。
     */
    async DescribeLoadBalancers(req, cb) {
        return this.request("DescribeLoadBalancers", req, cb);
    }
    /**
     * 查询负载均衡相关的任务状态
     */
    async DescribeLoadBalanceTaskStatus(req, cb) {
        return this.request("DescribeLoadBalanceTaskStatus", req, cb);
    }
    /**
     * 查询私有网络列表
     */
    async DescribeVpcs(req, cb) {
        return this.request("DescribeVpcs", req, cb);
    }
    /**
     * 批量修改监听器绑定的后端机器的转发权重。
     */
    async BatchModifyTargetWeight(req, cb) {
        return this.request("BatchModifyTargetWeight", req, cb);
    }
    /**
     * 展示镜像列表
     */
    async DescribeImage(req, cb) {
        return this.request("DescribeImage", req, cb);
    }
    /**
     * 解绑安全组
     */
    async DisassociateSecurityGroups(req, cb) {
        return this.request("DisassociateSecurityGroups", req, cb);
    }
    /**
     * 弹性网卡迁移
     */
    async MigrateNetworkInterface(req, cb) {
        return this.request("MigrateNetworkInterface", req, cb);
    }
    /**
     * 调整弹性公网IP带宽
     */
    async ModifyAddressesBandwidth(req, cb) {
        return this.request("ModifyAddressesBandwidth", req, cb);
    }
    /**
     * 创建子网，若创建成功，则此子网会成为此可用区的默认子网。
     */
    async CreateSubnet(req, cb) {
        return this.request("CreateSubnet", req, cb);
    }
    /**
     * 重置实例的最大带宽上限。
     */
    async ResetInstancesMaxBandwidth(req, cb) {
        return this.request("ResetInstancesMaxBandwidth", req, cb);
    }
    /**
     * 获取模块列表
     */
    async DescribeModule(req, cb) {
        return this.request("DescribeModule", req, cb);
    }
    /**
     * 只有状态为STOPPED的实例才可以进行此操作；接口调用成功时，实例会进入STARTING状态；启动实例成功时，实例会进入RUNNING状态。
     */
    async StartInstances(req, cb) {
        return this.request("StartInstances", req, cb);
    }
    /**
     * 删除负载均衡监听器。
     */
    async DeleteListener(req, cb) {
        return this.request("DeleteListener", req, cb);
    }
    /**
     * 解绑弹性公网IP（简称 EIP）
只有状态为 BIND 和 BIND_ENI 的 EIP 才能进行解绑定操作。
EIP 如果被封堵，则不能进行解绑定操作。
     */
    async DisassociateAddress(req, cb) {
        return this.request("DisassociateAddress", req, cb);
    }
    /**
     * 创建私有网络
     */
    async CreateVpc(req, cb) {
        return this.request("CreateVpc", req, cb);
    }
    /**
     * 修改负载均衡实例的属性。
     */
    async ModifyLoadBalancerAttributes(req, cb) {
        return this.request("ModifyLoadBalancerAttributes", req, cb);
    }
    /**
     * 本接口（AttachDisks）用于挂载云硬盘。
 
* 支持批量操作，将多块云盘挂载到同一云主机。如果多个云盘中存在不允许挂载的云盘，则操作不执行，返回特定的错误码。
* 本接口为异步接口，当挂载云盘的请求成功返回时，表示后台已发起挂载云盘的操作，可通过接口[DescribeDisks](/document/product/362/16315)来查询对应云盘的状态，如果云盘的状态由“ATTACHING”变为“ATTACHED”，则为挂载成功。
     */
    async AttachDisks(req, cb) {
        return this.request("AttachDisks", req, cb);
    }
    /**
     * 本接口（AssignIpv6SubnetCidrBlock）用于分配IPv6子网段。

给子网分配 IPv6 网段，要求子网所属 VPC 已获得 IPv6 网段。如果尚未分配，请先通过接口 AssignIpv6CidrBlock 给子网所属 VPC 分配一个 IPv6 网段。否则无法分配 IPv6 子网段。
每个子网只能分配一个IPv6网段。
     */
    async AssignIpv6SubnetCidrBlock(req, cb) {
        return this.request("AssignIpv6SubnetCidrBlock", req, cb);
    }
    /**
     * 设置负载均衡实例的安全组。
     */
    async SetLoadBalancerSecurityGroups(req, cb) {
        return this.request("SetLoadBalancerSecurityGroups", req, cb);
    }
    /**
     * 申请一个或多个弹性公网IP（简称 EIP）
     */
    async AllocateAddresses(req, cb) {
        return this.request("AllocateAddresses", req, cb);
    }
    /**
     * 修改模块是否禁止分配外网ip的属性。
     */
    async ModifyModuleDisableWanIp(req, cb) {
        return this.request("ModifyModuleDisableWanIp", req, cb);
    }
    /**
     * 修改负载均衡监听器属性。
     */
    async ModifyListener(req, cb) {
        return this.request("ModifyListener", req, cb);
    }
    /**
     * 用于解除实例的密钥绑定关系。
     */
    async DisassociateInstancesKeyPairs(req, cb) {
        return this.request("DisassociateInstancesKeyPairs", req, cb);
    }
    /**
     * 将弹性公网IP（简称 EIP）绑定到实例或弹性网卡的指定内网 IP 上。
将 EIP 绑定到实例（ECM）上，其本质是将 EIP 绑定到实例上主网卡的主内网 IP 上。
将 EIP 绑定到指定网卡的内网 IP上，内网IP已经绑定了EIP或普通公网IP，则反馈失败。必须先解绑该 EIP，才能再绑定新的。
只有状态为 UNBIND 的 EIP 才能够绑定内网IP。
     */
    async AssociateAddress(req, cb) {
        return this.request("AssociateAddress", req, cb);
    }
    /**
     * 删除子网，若子网为可用区下的默认子网，则默认子网会回退到系统自动创建的默认子网，非用户最新创建的子网。若默认子网不满足需求，可调用设置默认子网接口设置。
     */
    async DeleteSubnet(req, cb) {
        return this.request("DeleteSubnet", req, cb);
    }
    /**
     * 该接口(ModifyIpv6AddressesBandwidth)用于修改IPV6地址访问internet的带宽
     */
    async ModifyIpv6AddressesBandwidth(req, cb) {
        return this.request("ModifyIpv6AddressesBandwidth", req, cb);
    }
    /**
     * 本接口用于给IPv6地址分配公网带宽
     */
    async AllocateIpv6AddressesBandwidth(req, cb) {
        return this.request("AllocateIpv6AddressesBandwidth", req, cb);
    }
    /**
     * 批量绑定后端目标。
     */
    async BatchRegisterTargets(req, cb) {
        return this.request("BatchRegisterTargets", req, cb);
    }
    /**
     * 通过实例id获取当前禁止的操作
     */
    async DescribeInstancesDeniedActions(req, cb) {
        return this.request("DescribeInstancesDeniedActions", req, cb);
    }
    /**
     * 创建弹性网卡
     */
    async CreateNetworkInterface(req, cb) {
        return this.request("CreateNetworkInterface", req, cb);
    }
    /**
     * 只有处于"RUNNING"状态的实例才能够进行关机操作；
调用成功时，实例会进入STOPPING状态；关闭实例成功时，实例会进入STOPPED状态；
支持强制关闭，强制关机的效果等同于关闭物理计算机的电源开关，强制关机可能会导致数据丢失或文件系统损坏，请仅在服务器不能正常关机时使用。
     */
    async StopInstances(req, cb) {
        return this.request("StopInstances", req, cb);
    }
    /**
     * 查询外部导入镜像支持的OS列表
     */
    async DescribeImportImageOs(req, cb) {
        return this.request("DescribeImportImageOs", req, cb);
    }
    /**
     * 获取客户节点上的出入带宽月峰和计费带宽信息
     */
    async DescribeMonthPeakNetwork(req, cb) {
        return this.request("DescribeMonthPeakNetwork", req, cb);
    }
    /**
     * 弹性网卡解绑云主机
     */
    async DetachNetworkInterface(req, cb) {
        return this.request("DetachNetworkInterface", req, cb);
    }
    /**
     * 重装实例，若指定了ImageId参数，则使用指定的镜像重装；否则按照当前实例使用的镜像进行重装；若未指定密码，则密码通过站内信形式随后发送。
     */
    async ResetInstances(req, cb) {
        return this.request("ResetInstances", req, cb);
    }
    /**
     * 本接口（TerminateDisks）用于退还云硬盘。

* 不再使用的云盘，可通过本接口主动退还。
* 本接口支持退还预付费云盘和按小时后付费云盘。按小时后付费云盘可直接退还，预付费云盘需符合退还规则。
* 支持批量操作，每次请求批量云硬盘的上限为50。如果批量云盘存在不允许操作的，请求会以特定错误码返回。
     */
    async TerminateDisks(req, cb) {
        return this.request("TerminateDisks", req, cb);
    }
    /**
     * 修改监听器绑定的后端机器的端口。
     */
    async ModifyTargetPort(req, cb) {
        return this.request("ModifyTargetPort", req, cb);
    }
    /**
     * 删除弹性网卡
     */
    async DeleteNetworkInterface(req, cb) {
        return this.request("DeleteNetworkInterface", req, cb);
    }
    /**
     * 删除业务模块
     */
    async DeleteModule(req, cb) {
        return this.request("DeleteModule", req, cb);
    }
    /**
     * 本接口（UnassignIpv6Addresses）用于释放弹性网卡IPv6地址。
     */
    async ReleaseIpv6Addresses(req, cb) {
        return this.request("ReleaseIpv6Addresses", req, cb);
    }
    /**
     * 获取负载均衡后端服务的健康检查状态。
     */
    async DescribeTargetHealth(req, cb) {
        return this.request("DescribeTargetHealth", req, cb);
    }
    /**
     * 替换路由策略
     */
    async ReplaceRoutes(req, cb) {
        return this.request("ReplaceRoutes", req, cb);
    }
    /**
     * 本接口（UnassignIpv6SubnetCidrBlock）用于释放IPv6子网段。
子网段如果还有IP占用且未回收，则子网段无法释放。
     */
    async UnassignIpv6SubnetCidrBlock(req, cb) {
        return this.request("UnassignIpv6SubnetCidrBlock", req, cb);
    }
    /**
     * 查询自定义路由策略与云联网路由策略冲突列表
     */
    async DescribeRouteConflicts(req, cb) {
        return this.request("DescribeRouteConflicts", req, cb);
    }
    /**
     * 本接口（DetachDisks）用于卸载云硬盘。

* 支持批量操作，卸载挂载在同一主机上的多块云盘。如果多块云盘中存在不允许卸载的云盘，则操作不执行，返回特定的错误码。
* 本接口为异步接口，当请求成功返回时，云盘并未立即从主机卸载，可通过接口[DescribeDisks](/document/product/362/16315)来查询对应云盘的状态，如果云盘的状态由“ATTACHED”变为“UNATTACHED”，则为卸载成功。
     */
    async DetachDisks(req, cb) {
        return this.request("DetachDisks", req, cb);
    }
    /**
     * 禁用已启用的子网路由
     */
    async DisableRoutes(req, cb) {
        return this.request("DisableRoutes", req, cb);
    }
    /**
     * 修改子网关联的路由表，一个子网只能关联一个路由表。
     */
    async ReplaceRouteTableAssociation(req, cb) {
        return this.request("ReplaceRouteTableAssociation", req, cb);
    }
    /**
     * 查询实例价格
     */
    async DescribePriceRunInstance(req, cb) {
        return this.request("DescribePriceRunInstance", req, cb);
    }
    /**
     * 本接口（ModifyIpv6AddressesAttribute）用于修改弹性网卡IPv6地址属性。
     */
    async ModifyIpv6AddressesAttribute(req, cb) {
        return this.request("ModifyIpv6AddressesAttribute", req, cb);
    }
    /**
     * 获取概览页统计的基本数据
     */
    async DescribeBaseOverview(req, cb) {
        return this.request("DescribeBaseOverview", req, cb);
    }
    /**
     * 弹性网卡绑定云主机
     */
    async AttachNetworkInterface(req, cb) {
        return this.request("AttachNetworkInterface", req, cb);
    }
    /**
     * SecurityGroupPolicySet.Version 用于指定要操作的安全组的版本。传入 Version 版本号若不等于当前安全组的最新版本，将返回失败；若不传 Version 则直接删除指定PolicyIndex的规则。
     */
    async DeleteSecurityGroupPolicies(req, cb) {
        return this.request("DeleteSecurityGroupPolicies", req, cb);
    }
    /**
     * 该接口（DescribeRegionIpv6Addresses）用于查询ECM地域之下的IPV6地址信息。
     */
    async DescribeRegionIpv6Addresses(req, cb) {
        return this.request("DescribeRegionIpv6Addresses", req, cb);
    }
    /**
     * 用于创建一个 OpenSSH RSA 密钥对，可以用于登录 Linux 实例。
     */
    async CreateKeyPair(req, cb) {
        return this.request("CreateKeyPair", req, cb);
    }
    /**
     * 修改模块配置，已关联实例的模块不支持调整配置。
     */
    async ModifyModuleConfig(req, cb) {
        return this.request("ModifyModuleConfig", req, cb);
    }
    /**
     * 修改安全组属性
     */
    async ModifySecurityGroupAttribute(req, cb) {
        return this.request("ModifySecurityGroupAttribute", req, cb);
    }
    /**
     * 展示模块详细信息
     */
    async DescribeModuleDetail(req, cb) {
        return this.request("DescribeModuleDetail", req, cb);
    }
    /**
     * 删除负载均衡实例。
     */
    async DeleteLoadBalancer(req, cb) {
        return this.request("DeleteLoadBalancer", req, cb);
    }
    /**
     * 获取机型配置列表
     */
    async DescribeInstanceTypeConfig(req, cb) {
        return this.request("DescribeInstanceTypeConfig", req, cb);
    }
    /**
     * 对某个路由表批量删除路由策略
     */
    async DeleteRoutes(req, cb) {
        return this.request("DeleteRoutes", req, cb);
    }
    /**
     * 修改安全组出站和入站规则
     */
    async ModifySecurityGroupPolicies(req, cb) {
        return this.request("ModifySecurityGroupPolicies", req, cb);
    }
    /**
     * 修改子网属性
     */
    async ModifySubnetAttribute(req, cb) {
        return this.request("ModifySubnetAttribute", req, cb);
    }
    /**
     * 使用本接口获取某种机型在某些区域的装箱配额（当使用虚拟机型时，返回的是一组相互关联的装箱配额）。
     */
    async DescribePackingQuotaGroup(req, cb) {
        return this.request("DescribePackingQuotaGroup", req, cb);
    }
    /**
     * 查询弹性网卡列表
     */
    async DescribeNetworkInterfaces(req, cb) {
        return this.request("DescribeNetworkInterfaces", req, cb);
    }
    /**
     * 本接口（CreateDisks）用于创建云硬盘。

* 预付费云盘的购买会预先扣除本次云盘购买所需金额，在调用本接口前请确保账户余额充足。
* 本接口支持传入数据盘快照来创建云盘，实现将快照数据复制到新购云盘上。
* 本接口为异步接口，当创建请求下发成功后会返回一个新建的云盘ID列表，此时云盘的创建并未立即完成。可以通过调用[DescribeDisks](/document/product/362/16315)接口根据DiskId查询对应云盘，如果能查到云盘，且状态为'UNATTACHED'或'ATTACHED'，则表示创建成功。
     */
    async CreateDisks(req, cb) {
        return this.request("CreateDisks", req, cb);
    }
    /**
     * 绑定安全组
     */
    async AssociateSecurityGroups(req, cb) {
        return this.request("AssociateSecurityGroups", req, cb);
    }
    /**
     * 本接口（ModifyImageAttribute）用于修改镜像属性。
     */
    async ModifyImageAttribute(req, cb) {
        return this.request("ModifyImageAttribute", req, cb);
    }
    /**
     * 本接口(DescribeTaskStatus)用于获取异步任务状态
     */
    async DescribeTaskStatus(req, cb) {
        return this.request("DescribeTaskStatus", req, cb);
    }
    /**
     * 获取网络峰值数据
     */
    async DescribePeakNetworkOverview(req, cb) {
        return this.request("DescribePeakNetworkOverview", req, cb);
    }
    /**
     * 创建安全组
     */
    async CreateSecurityGroup(req, cb) {
        return this.request("CreateSecurityGroup", req, cb);
    }
    /**
     * 导入自定义镜像，支持 RAW、VHD、QCOW2、VMDK 镜像格式
     */
    async ImportCustomImage(req, cb) {
        return this.request("ImportCustomImage", req, cb);
    }
    /**
     * 本接口（DescribeSnapshots）用于查询快照的详细信息。

* 根据快照ID、创建快照的云硬盘ID、创建快照的云硬盘类型等对结果进行过滤，不同条件之间为与(AND)的关系，过滤信息详细请见过滤器`Filter`。
*  如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的快照列表。
     */
    async DescribeSnapshots(req, cb) {
        return this.request("DescribeSnapshots", req, cb);
    }
    /**
     * 销毁实例
     */
    async TerminateInstances(req, cb) {
        return this.request("TerminateInstances", req, cb);
    }
    /**
     * 查询实例管理终端地址
     */
    async DescribeInstanceVncUrl(req, cb) {
        return this.request("DescribeInstanceVncUrl", req, cb);
    }
    /**
     * 删除路由表
     */
    async DeleteRouteTable(req, cb) {
        return this.request("DeleteRouteTable", req, cb);
    }
    /**
     * 查询用户安全组配额
     */
    async DescribeSecurityGroupLimits(req, cb) {
        return this.request("DescribeSecurityGroupLimits", req, cb);
    }
    /**
     * 绑定或解绑一个安全组到多个负载均衡实例。
     */
    async SetSecurityGroupForLoadbalancers(req, cb) {
        return this.request("SetSecurityGroupForLoadbalancers", req, cb);
    }
    /**
     * 修改在一个可用区下创建实例时使用的默认子网（创建实例时，未填写VPC参数时使用的sunbetId）
     */
    async ModifyDefaultSubnet(req, cb) {
        return this.request("ModifyDefaultSubnet", req, cb);
    }
    /**
     * 只有状态为RUNNING的实例才可以进行此操作；接口调用成功时，实例会进入REBOOTING状态；重启实例成功时，实例会进入RUNNING状态；支持强制重启，强制重启的效果等同于关闭物理计算机的电源开关再重新启动。强制重启可能会导致数据丢失或文件系统损坏，请仅在服务器不能正常重启时使用。
     */
    async RebootInstances(req, cb) {
        return this.request("RebootInstances", req, cb);
    }
    /**
     * 本接口（AssignIpv6Addresses）用于弹性网卡申请IPv6地址。
     */
    async AssignIpv6Addresses(req, cb) {
        return this.request("AssignIpv6Addresses", req, cb);
    }
    /**
     * 弹性网卡内网IP迁移。
该接口用于将一个内网IP从一个弹性网卡上迁移到另外一个弹性网卡，主IP地址不支持迁移。
迁移前后的弹性网卡必须在同一个子网内。
     */
    async MigratePrivateIpAddress(req, cb) {
        return this.request("MigratePrivateIpAddress", req, cb);
    }
    /**
     * 购买负载均衡实例。
     */
    async CreateLoadBalancer(req, cb) {
        return this.request("CreateLoadBalancer", req, cb);
    }
    /**
     * 修改模块默认带宽上限
     */
    async ModifyModuleNetwork(req, cb) {
        return this.request("ModifyModuleNetwork", req, cb);
    }
    /**
     * 用于查询高可用虚拟IP（HAVIP）列表。
     */
    async DescribeHaVips(req, cb) {
        return this.request("DescribeHaVips", req, cb);
    }
    /**
     * 从CVM产品导入镜像到ECM
     */
    async ImportImage(req, cb) {
        return this.request("ImportImage", req, cb);
    }
    /**
     * 用于删除高可用虚拟IP（HAVIP）
     */
    async DeleteHaVip(req, cb) {
        return this.request("DeleteHaVip", req, cb);
    }
    /**
     * 查询私有网络下Vpc、子网、havip等异步任务请求结果
     */
    async QueryVpcTaskResult(req, cb) {
        return this.request("QueryVpcTaskResult", req, cb);
    }
    /**
     * 查询您账户的弹性公网IP（简称 EIP）在当前地域的配额信息
     */
    async DescribeAddressQuota(req, cb) {
        return this.request("DescribeAddressQuota", req, cb);
    }
    /**
     * 删除负载均衡多个监听器
     */
    async DeleteLoadBalancerListeners(req, cb) {
        return this.request("DeleteLoadBalancerListeners", req, cb);
    }
    /**
     * 删除私有网络
     */
    async DeleteVpc(req, cb) {
        return this.request("DeleteVpc", req, cb);
    }
    /**
     * 查询子网列表
     */
    async DescribeSubnets(req, cb) {
        return this.request("DescribeSubnets", req, cb);
    }
    /**
     * 获取实例的相关信息。
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 查看安全组
     */
    async DescribeSecurityGroups(req, cb) {
        return this.request("DescribeSecurityGroups", req, cb);
    }
    /**
     * 查询安全组规则
     */
    async DescribeSecurityGroupPolicies(req, cb) {
        return this.request("DescribeSecurityGroupPolicies", req, cb);
    }
    /**
     * 查询可用区的默认子网
     */
    async DescribeDefaultSubnet(req, cb) {
        return this.request("DescribeDefaultSubnet", req, cb);
    }
    /**
     * 重置处于运行中状态的实例的密码，需要显式指定强制关机参数ForceStop。如果没有显式指定强制关机参数，则只有处于关机状态的实例才允许执行重置密码操作。
     */
    async ResetInstancesPassword(req, cb) {
        return this.request("ResetInstancesPassword", req, cb);
    }
    /**
     * 创建模块
     */
    async CreateModule(req, cb) {
        return this.request("CreateModule", req, cb);
    }
    /**
     * 该接口用于给弹性公网IPv6地址释放带宽。
     */
    async ReleaseIpv6AddressesBandwidth(req, cb) {
        return this.request("ReleaseIpv6AddressesBandwidth", req, cb);
    }
    /**
     * 启用已禁用的子网路由。
本接口会校验启用后，是否与已有路由冲突，如果冲突，则无法启用，失败处理。路由冲突时，需要先禁用与之冲突的路由，才能启用该路由。
     */
    async EnableRoutes(req, cb) {
        return this.request("EnableRoutes", req, cb);
    }
    /**
     * 本接口（CreateHaVip）用于创建高可用虚拟IP（HAVIP）
     */
    async CreateHaVip(req, cb) {
        return this.request("CreateHaVip", req, cb);
    }
    /**
     * 本接口（DescribeDisks）用于查询云硬盘列表。

* 可以根据云硬盘ID、云硬盘类型或者云硬盘状态等信息来查询云硬盘的详细信息，不同条件之间为与(AND)的关系，过滤信息详细请见过滤器`Filter`。
* 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的云硬盘列表。
     */
    async DescribeDisks(req, cb) {
        return this.request("DescribeDisks", req, cb);
    }
    /**
     * 只有当前账号下的安全组允许被删除。
安全组实例ID如果在其他安全组的规则中被引用，则无法直接删除。这种情况下，需要先进行规则修改，再删除安全组。
删除的安全组无法再找回，请谨慎调用。
     */
    async DeleteSecurityGroup(req, cb) {
        return this.request("DeleteSecurityGroup", req, cb);
    }
    /**
     * 创建负载均衡监听器。
     */
    async CreateListener(req, cb) {
        return this.request("CreateListener", req, cb);
    }
    /**
     * 本接口（DeleteSnapshots）用于删除快照。

* 快照必须处于NORMAL状态，快照状态可以通过[DescribeSnapshots](/document/product/362/15647)接口查询，见输出参数中SnapshotState字段解释。
* 支持批量操作。如果多个快照存在无法删除的快照，则操作不执行，以返回特定的错误码返回。
     */
    async DeleteSnapshots(req, cb) {
        return this.request("DeleteSnapshots", req, cb);
    }
    /**
     * 修改路由表属性
     */
    async ModifyRouteTableAttribute(req, cb) {
        return this.request("ModifyRouteTableAttribute", req, cb);
    }
    /**
     * 修改监听器绑定的后端机器的转发权重。
     */
    async ModifyTargetWeight(req, cb) {
        return this.request("ModifyTargetWeight", req, cb);
    }
    /**
     * 修改模块默认安全组
     */
    async ModifyModuleSecurityGroups(req, cb) {
        return this.request("ModifyModuleSecurityGroups", req, cb);
    }
    /**
     * 创建路由策略
     */
    async CreateRoutes(req, cb) {
        return this.request("CreateRoutes", req, cb);
    }
    /**
     * 用于修改高可用虚拟IP（HAVIP）属性
     */
    async ModifyHaVipAttribute(req, cb) {
        return this.request("ModifyHaVipAttribute", req, cb);
    }
    /**
     * 释放一个或多个弹性公网IP（简称 EIP）。
该操作不可逆，释放后 EIP 关联的 IP 地址将不再属于您的名下。
只有状态为 UNBIND 的 EIP 才能进行释放操作。
     */
    async ReleaseAddresses(req, cb) {
        return this.request("ReleaseAddresses", req, cb);
    }
    /**
     * 修改模块IP直通。
     */
    async ModifyModuleIpDirect(req, cb) {
        return this.request("ModifyModuleIpDirect", req, cb);
    }
    /**
     * 查询负载均衡绑定的后端服务列表。
     */
    async DescribeTargets(req, cb) {
        return this.request("DescribeTargets", req, cb);
    }
    /**
     * 修改私有网络（VPC）的相关属性
     */
    async ModifyVpcAttribute(req, cb) {
        return this.request("ModifyVpcAttribute", req, cb);
    }
    /**
     * 查询安全组关联实例统计
     */
    async DescribeSecurityGroupAssociationStatistics(req, cb) {
        return this.request("DescribeSecurityGroupAssociationStatistics", req, cb);
    }
    /**
     * CPU 内存 硬盘等基础信息峰值数据
     */
    async DescribePeakBaseOverview(req, cb) {
        return this.request("DescribePeakBaseOverview", req, cb);
    }
    /**
     * 修改弹性公网IP属性
     */
    async ModifyAddressAttribute(req, cb) {
        return this.request("ModifyAddressAttribute", req, cb);
    }
    /**
     * 弹性网卡退还内网 IP。
退还弹性网卡上的辅助内网IP，接口自动解关联弹性公网 IP。不能退还弹性网卡的主内网IP。
     */
    async RemovePrivateIpAddresses(req, cb) {
        return this.request("RemovePrivateIpAddresses", req, cb);
    }
    /**
     * <p>本接口（CreateSecurityGroupPolicies）用于创建安全组规则（SecurityGroupPolicy）。</p>
<p>在 SecurityGroupPolicySet 参数中：</p>
<ul>
<li>Version 安全组规则版本号，用户每次更新安全规则版本会自动加1，防止您更新的路由规则已过期，不填不考虑冲突。</li>
<li>在创建出站和入站规则（Egress 和 Ingress）时：<ul>
<li>Protocol 字段支持输入TCP, UDP, ICMP, GRE, ALL。</li>
<li>CidrBlock 字段允许输入符合cidr格式标准的任意字符串。在基础网络中，如果 CidrBlock 包含您的账户内的云服务器之外的设备在腾讯云的内网 IP，并不代表此规则允许您访问这些设备，租户之间网络隔离规则优先于安全组中的内网规则。</li>
<li>SecurityGroupId 字段允许输入与待修改的安全组位于相同项目中的安全组 ID，包括这个安全组 ID 本身，代表安全组下所有云服务器的内网 IP。使用这个字段时，这条规则用来匹配网络报文的过程中会随着被使用的这个 ID 所关联的云服务器变化而变化，不需要重新修改。</li>
<li>Port 字段允许输入一个单独端口号，或者用减号分隔的两个端口号代表端口范围，例如80或8000-8010。只有当 Protocol 字段是 TCP 或 UDP 时，Port 字段才被接受，即 Protocol 字段不是 TCP 或 UDP 时，Protocol 和 Port 排他关系，不允许同时输入，否则会接口报错。</li>
<li>Action 字段只允许输入 ACCEPT 或 DROP。</li>
<li>CidrBlock, SecurityGroupId, AddressTemplate 是排他关系，不允许同时输入，Protocol + Port 和 ServiceTemplate 二者是排他关系，不允许同时输入。</li>
<li>一次请求中只能创建单个方向的规则, 如果需要指定索引（PolicyIndex）参数, 多条规则的索引必须一致。</li>
</ul></li></ul>
<p>默认接口请求频率限制：20次/秒。</p>
     */
    async CreateSecurityGroupPolicies(req, cb) {
        return this.request("CreateSecurityGroupPolicies", req, cb);
    }
    /**
     * 删除镜像
     */
    async DeleteImage(req, cb) {
        return this.request("DeleteImage", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248974, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.eiam = void 0;
const v20210420_1 = require("./v20210420");
exports.eiam = {
    v20210420: v20210420_1.v20210420,
};

}, function(modId) { var map = {"./v20210420":1738984248975}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248975, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210420 = void 0;
const Models = require("./eiam_models");
const eiam_client_1 = require("./eiam_client");
exports.v20210420 = {
    Client: eiam_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./eiam_models":1738984248976,"./eiam_client":1738984248977}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248976, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248977, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * eiam client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("eiam.tencentcloudapi.com", "2021-04-20", clientConfig);
    }
    /**
     * 获取用户组信息
     */
    async DescribeUserGroup(req, cb) {
        return this.request("DescribeUserGroup", req, cb);
    }
    /**
     * 创建账号组
     */
    async CreateAccountGroup(req, cb) {
        return this.request("CreateAccountGroup", req, cb);
    }
    /**
     * 查询指定机构下的资源授权列表
     */
    async DescribeOrgResourcesAuthorization(req, cb) {
        return this.request("DescribeOrgResourcesAuthorization", req, cb);
    }
    /**
     * 通过用户名或用户 id 冻结用户
     */
    async ModifyUserInfo(req, cb) {
        return this.request("ModifyUserInfo", req, cb);
    }
    /**
     * 获取JWT公钥信息。
     */
    async DescribePublicKey(req, cb) {
        return this.request("DescribePublicKey", req, cb);
    }
    /**
     * 获取用户列表信息。
     */
    async ListUsers(req, cb) {
        return this.request("ListUsers", req, cb);
    }
    /**
     * 从账号组中移除账号
     */
    async RemoveAccountFromAccountGroup(req, cb) {
        return this.request("RemoveAccountFromAccountGroup", req, cb);
    }
    /**
     *  获取账号组中的账号列表
     */
    async ListAccountInAccountGroup(req, cb) {
        return this.request("ListAccountInAccountGroup", req, cb);
    }
    /**
     * 通过用户组ID获得被授权访问的应用列表。
     */
    async ListAuthorizedApplicationsToUserGroup(req, cb) {
        return this.request("ListAuthorizedApplicationsToUserGroup", req, cb);
    }
    /**
     * 应用授权关系列表（含搜索条件匹配）。
     */
    async ListApplicationAuthorizations(req, cb) {
        return this.request("ListApplicationAuthorizations", req, cb);
    }
    /**
     * 修改账号组
     */
    async ModifyAccountGroup(req, cb) {
        return this.request("ModifyAccountGroup", req, cb);
    }
    /**
     * 查询指定用户下的资源授权列表
     */
    async DescribeUserResourcesAuthorization(req, cb) {
        return this.request("DescribeUserResourcesAuthorization", req, cb);
    }
    /**
     * 修改应用账号
     */
    async ModifyAppAccount(req, cb) {
        return this.request("ModifyAppAccount", req, cb);
    }
    /**
     * 通过用户名或用户 id 获取用户的第三方账号绑定信息。
     */
    async DescribeUserThirdPartyAccountInfo(req, cb) {
        return this.request("DescribeUserThirdPartyAccountInfo", req, cb);
    }
    /**
     * 删除一个用户组
     */
    async DeleteUserGroup(req, cb) {
        return this.request("DeleteUserGroup", req, cb);
    }
    /**
     * 删除账号组
     */
    async DeleteAccountGroup(req, cb) {
        return this.request("DeleteAccountGroup", req, cb);
    }
    /**
     * 更新一个应用的信息
     */
    async ModifyApplication(req, cb) {
        return this.request("ModifyApplication", req, cb);
    }
    /**
     * 获取用户组列表信息（包含查询条件）。
     */
    async ListUserGroups(req, cb) {
        return this.request("ListUserGroups", req, cb);
    }
    /**
     * 加入用户到用户组
     */
    async AddUserToUserGroup(req, cb) {
        return this.request("AddUserToUserGroup", req, cb);
    }
    /**
     * 删除应用账号
     */
    async DeleteAppAccount(req, cb) {
        return this.request("DeleteAppAccount", req, cb);
    }
    /**
     * 查询账号组列表
     */
    async DescribeAccountGroup(req, cb) {
        return this.request("DescribeAccountGroup", req, cb);
    }
    /**
     * 批量删除当前节点下的用户。如果出现个别用户删除错误，将不影响其余被勾选用户被删除的操作，同时提示未被删除的用户名称/用户ID。
     */
    async DeleteUsers(req, cb) {
        return this.request("DeleteUsers", req, cb);
    }
    /**
     * 查询指定用户组下的资源授权列表
     */
    async DescribeUserGroupResourcesAuthorization(req, cb) {
        return this.request("DescribeUserGroupResourcesAuthorization", req, cb);
    }
    /**
     * 创建应用账号
     */
    async CreateAppAccount(req, cb) {
        return this.request("CreateAppAccount", req, cb);
    }
    /**
     * 获取用户组中的用户列表
     */
    async ListUsersInUserGroup(req, cb) {
        return this.request("ListUsersInUserGroup", req, cb);
    }
    /**
     * 获取用户所在的用户组列表
     */
    async ListUserGroupsOfUser(req, cb) {
        return this.request("ListUserGroupsOfUser", req, cb);
    }
    /**
     * 通过用户ID获得被授权访问的应用列表。
     */
    async ListAuthorizedApplicationsToUser(req, cb) {
        return this.request("ListAuthorizedApplicationsToUser", req, cb);
    }
    /**
     * 查询应用账号列表
     */
    async DescribeAppAccount(req, cb) {
        return this.request("DescribeAppAccount", req, cb);
    }
    /**
     * 根据机构节点ID读取机构节点信息
     */
    async DescribeOrgNode(req, cb) {
        return this.request("DescribeOrgNode", req, cb);
    }
    /**
     * 通过用户名或用户 id 搜索用户
     */
    async DescribeUserInfo(req, cb) {
        return this.request("DescribeUserInfo", req, cb);
    }
    /**
     * 从用户组中移除用户
     */
    async RemoveUserFromUserGroup(req, cb) {
        return this.request("RemoveUserFromUserGroup", req, cb);
    }
    /**
     * 新建一个机构节点
     */
    async CreateOrgNode(req, cb) {
        return this.request("CreateOrgNode", req, cb);
    }
    /**
     * 通过用户名或用户 id 删除用户。
     */
    async DeleteUser(req, cb) {
        return this.request("DeleteUser", req, cb);
    }
    /**
     * 获取应用列表信息。
     */
    async ListApplications(req, cb) {
        return this.request("ListApplications", req, cb);
    }
    /**
     * 通过机构节点ID获得被授权访问的应用列表。
     */
    async ListAuthorizedApplicationsToOrgNode(req, cb) {
        return this.request("ListAuthorizedApplicationsToOrgNode", req, cb);
    }
    /**
     * 删除一个机构节点
     */
    async DeleteOrgNode(req, cb) {
        return this.request("DeleteOrgNode", req, cb);
    }
    /**
     * 账号组添加账号
     */
    async AddAccountToAccountGroup(req, cb) {
        return this.request("AddAccountToAccountGroup", req, cb);
    }
    /**
     * 新建用户组
     */
    async CreateUserGroup(req, cb) {
        return this.request("CreateUserGroup", req, cb);
    }
    /**
     * 新建一个用户
     */
    async CreateUser(req, cb) {
        return this.request("CreateUser", req, cb);
    }
    /**
     * 获取一个应用的信息。
     */
    async DescribeApplication(req, cb) {
        return this.request("DescribeApplication", req, cb);
    }
    /**
     * 根据机构节点ID读取节点下用户
     */
    async ListUsersInOrgNode(req, cb) {
        return this.request("ListUsersInOrgNode", req, cb);
    }
    /**
     * 新建一个机构节点，
     */
    async UpdateOrgNode(req, cb) {
        return this.request("UpdateOrgNode", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248978, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.eis = void 0;
const v20210601_1 = require("./v20210601");
const v20200715_1 = require("./v20200715");
exports.eis = {
    v20210601: v20210601_1.v20210601,
    v20200715: v20200715_1.v20200715,
};

}, function(modId) { var map = {"./v20210601":1738984248979,"./v20200715":1738984248982}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248979, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210601 = void 0;
const Models = require("./eis_models");
const eis_client_1 = require("./eis_client");
exports.v20210601 = {
    Client: eis_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./eis_models":1738984248980,"./eis_client":1738984248981}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248980, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248981, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * eis client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("eis.tencentcloudapi.com", "2021-06-01", clientConfig);
    }
    /**
     * 获取运行时详情
     */
    async GetRuntimeMC(req, cb) {
        return this.request("GetRuntimeMC", req, cb);
    }
    /**
     * 返回用户可用的运行时列表，发布应用时返回的运行时环境，仅shared和private运行时，无sandbox运行时，并且只有running/scaling状态的
     */
    async ListDeployableRuntimesMC(req, cb) {
        return this.request("ListDeployableRuntimesMC", req, cb);
    }
    /**
     * 获取运行时资源监控详情，cpu，memory，bandwidth
     */
    async GetRuntimeResourceMonitorMetricMC(req, cb) {
        return this.request("GetRuntimeResourceMonitorMetricMC", req, cb);
    }
    /**
     * 获取运行时部署的应用实例列表
     */
    async ListRuntimeDeployedInstancesMC(req, cb) {
        return this.request("ListRuntimeDeployedInstancesMC", req, cb);
    }
    /**
     * 返回用户的运行时列表，运行时管理主页使用，包含沙箱、共享运行时及独立运行时环境，不包含已经删除的运行时
     */
    async ListRuntimesMC(req, cb) {
        return this.request("ListRuntimesMC", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248982, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200715 = void 0;
const Models = require("./eis_models");
const eis_client_1 = require("./eis_client");
exports.v20200715 = {
    Client: eis_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./eis_models":1738984248983,"./eis_client":1738984248984}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248983, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248984, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * eis client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("eis.tencentcloudapi.com", "2020-07-15", clientConfig);
    }
    /**
     * 获取连接器操作列表
     */
    async ListEisConnectorOperations(req, cb) {
        return this.request("ListEisConnectorOperations", req, cb);
    }
    /**
     * 连接器列表
     */
    async ListEisConnectors(req, cb) {
        return this.request("ListEisConnectors", req, cb);
    }
    /**
     * 获取连接器配置参数
     */
    async DescribeEisConnectorConfig(req, cb) {
        return this.request("DescribeEisConnectorConfig", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248985, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.emr = void 0;
const v20190103_1 = require("./v20190103");
exports.emr = {
    v20190103: v20190103_1.v20190103,
};

}, function(modId) { var map = {"./v20190103":1738984248986}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248986, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190103 = void 0;
const Models = require("./emr_models");
const emr_client_1 = require("./emr_client");
exports.v20190103 = {
    Client: emr_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./emr_models":1738984248987,"./emr_client":1738984248988}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248987, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248988, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * emr client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("emr.tencentcloudapi.com", "2019-01-03", clientConfig);
    }
    /**
     * 查询待续费节点信息
     */
    async DescribeInstanceRenewNodes(req, cb) {
        return this.request("DescribeInstanceRenewNodes", req, cb);
    }
    /**
     * 强制修改标签
     */
    async ModifyResourcesTags(req, cb) {
        return this.request("ModifyResourcesTags", req, cb);
    }
    /**
     * 变配询价
     */
    async InquiryPriceUpdateInstance(req, cb) {
        return this.request("InquiryPriceUpdateInstance", req, cb);
    }
    /**
     * 创建EMR集群实例
     */
    async CreateCluster(req, cb) {
        return this.request("CreateCluster", req, cb);
    }
    /**
     * 续费询价。
     */
    async InquiryPriceRenewInstance(req, cb) {
        return this.request("InquiryPriceRenewInstance", req, cb);
    }
    /**
     * DescribeImpalaQueries
     */
    async DescribeImpalaQueries(req, cb) {
        return this.request("DescribeImpalaQueries", req, cb);
    }
    /**
     * 获取资源调度中的队列信息
     */
    async DescribeYarnQueue(req, cb) {
        return this.request("DescribeYarnQueue", req, cb);
    }
    /**
     * 修改资源调度中队列信息
     */
    async ModifyYarnQueueV2(req, cb) {
        return this.request("ModifyYarnQueueV2", req, cb);
    }
    /**
     * 创建EMR容器集群实例
     */
    async CreateCloudInstance(req, cb) {
        return this.request("CreateCloudInstance", req, cb);
    }
    /**
     * yarn资源调度-部署生效
     */
    async DeployYarnConf(req, cb) {
        return this.request("DeployYarnConf", req, cb);
    }
    /**
     * 查询EMR任务运行详情状态
     */
    async DescribeClusterFlowStatusDetail(req, cb) {
        return this.request("DescribeClusterFlowStatusDetail", req, cb);
    }
    /**
     * EMR同步TKE中POD状态
     */
    async SyncPodState(req, cb) {
        return this.request("SyncPodState", req, cb);
    }
    /**
     * 扩容询价. 当扩容时候，请通过该接口查询价格。
     */
    async InquiryPriceScaleOutInstance(req, cb) {
        return this.request("InquiryPriceScaleOutInstance", req, cb);
    }
    /**
     * 获取集群的自动扩缩容的详细记录
     */
    async DescribeAutoScaleRecords(req, cb) {
        return this.request("DescribeAutoScaleRecords", req, cb);
    }
    /**
     * 获取账户的CVM配额
     */
    async DescribeCvmQuota(req, cb) {
        return this.request("DescribeCvmQuota", req, cb);
    }
    /**
     * DescribeYarnApplications
     */
    async DescribeYarnApplications(req, cb) {
        return this.request("DescribeYarnApplications", req, cb);
    }
    /**
     * 修改YARN资源调度的全局配置
     */
    async ModifyGlobalConfig(req, cb) {
        return this.request("ModifyGlobalConfig", req, cb);
    }
    /**
     * 扩容节点
     */
    async ScaleOutInstance(req, cb) {
        return this.request("ScaleOutInstance", req, cb);
    }
    /**
     * 云盘挂载
     */
    async AttachDisks(req, cb) {
        return this.request("AttachDisks", req, cb);
    }
    /**
     * 设置当前集群的某个节点规格配置为默认或取消默认
     */
    async SetNodeResourceConfigDefault(req, cb) {
        return this.request("SetNodeResourceConfigDefault", req, cb);
    }
    /**
     * 查询YARN资源调度数据信息。已废弃，请使用`DescribeYarnQueue`去查询队列信息。
     */
    async DescribeResourceSchedule(req, cb) {
        return this.request("DescribeResourceSchedule", req, cb);
    }
    /**
     * 查询StarRocks查询信息
     */
    async DescribeStarRocksQueryInfo(req, cb) {
        return this.request("DescribeStarRocksQueryInfo", req, cb);
    }
    /**
     * 获取Hbase表级监控数据概览接口
     */
    async DescribeHBaseTableOverview(req, cb) {
        return this.request("DescribeHBaseTableOverview", req, cb);
    }
    /**
     * 查询服务进程信息
     */
    async DescribeServiceNodeInfos(req, cb) {
        return this.request("DescribeServiceNodeInfos", req, cb);
    }
    /**
     * 查询集群实例信息
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 部署生效。已废弃，请使用`DeployYarnConf`接口进行部署生效
     */
    async ModifyYarnDeploy(req, cb) {
        return this.request("ModifyYarnDeploy", req, cb);
    }
    /**
     * 缩容Task节点
     */
    async TerminateTasks(req, cb) {
        return this.request("TerminateTasks", req, cb);
    }
    /**
     * 销毁EMR实例。此接口仅支持弹性MapReduce正式计费版本。
     */
    async TerminateInstance(req, cb) {
        return this.request("TerminateInstance", req, cb);
    }
    /**
     * 销毁集群节点
     */
    async TerminateClusterNodes(req, cb) {
        return this.request("TerminateClusterNodes", req, cb);
    }
    /**
     * 修改YARN资源调度的资源配置
     */
    async ResetYarnConfig(req, cb) {
        return this.request("ResetYarnConfig", req, cb);
    }
    /**
     * 该接口支持安装了OpenLdap组件的集群。
批量导出用户。对于kerberos集群，如果需要kertab文件下载地址，可以将NeedKeytabInfo设置为true；注意SupportDownLoadKeyTab为true，但是DownLoadKeyTabUrl为空字符串，表示keytab文件在后台没有准备好（正在生成）。
     */
    async DescribeUsersForUserManager(req, cb) {
        return this.request("DescribeUsersForUserManager", req, cb);
    }
    /**
     * 修改用户密码（用户管理）
     */
    async ModifyUserManagerPwd(req, cb) {
        return this.request("ModifyUserManagerPwd", req, cb);
    }
    /**
     * 删除用户列表（用户管理）
     */
    async DeleteUserManagerUserList(req, cb) {
        return this.request("DeleteUserManagerUserList", req, cb);
    }
    /**
     * 本接口（TerminateSLInstance）用于销毁Serverless HBase实例
     */
    async TerminateSLInstance(req, cb) {
        return this.request("TerminateSLInstance", req, cb);
    }
    /**
     * 该接口支持安装了OpenLdap组件的集群。
新增用户列表（用户管理）。
     */
    async AddUsersForUserManager(req, cb) {
        return this.request("AddUsersForUserManager", req, cb);
    }
    /**
     * 前提：预付费集群
资源级别开启或关闭自动续费
     */
    async ModifyAutoRenewFlag(req, cb) {
        return this.request("ModifyAutoRenewFlag", req, cb);
    }
    /**
     * 本接口（CreateSLInstance）用于创建Serverless HBase实例
- 接口调用成功，会创建Serverless HBase实例，创建实例请求成功会返回创建实例的InstaceId和请求的 RequestID。
- 接口为异步接口，接口返回时操作并未立即完成，实例操作结果可以通过调用DescribeInstancesList查看当前实例的StatusDesc状态。
     */
    async CreateSLInstance(req, cb) {
        return this.request("CreateSLInstance", req, cb);
    }
    /**
     * 本接口（DescribeSLInstanceList）用于查询Serverless HBase实例列表详细信息
     */
    async DescribeSLInstanceList(req, cb) {
        return this.request("DescribeSLInstanceList", req, cb);
    }
    /**
     * 云盘扩容
     */
    async ResizeDataDisks(req, cb) {
        return this.request("ResizeDataDisks", req, cb);
    }
    /**
     * 修改自动扩缩容规则
     */
    async ModifyAutoScaleStrategy(req, cb) {
        return this.request("ModifyAutoScaleStrategy", req, cb);
    }
    /**
     * 查询Kyuubi查询信息
     */
    async DescribeKyuubiQueryInfo(req, cb) {
        return this.request("DescribeKyuubiQueryInfo", req, cb);
    }
    /**
     * 删除自动扩缩容规则，后台销毁根据该规则扩缩容出来的节点
     */
    async DeleteAutoScaleStrategy(req, cb) {
        return this.request("DeleteAutoScaleStrategy", req, cb);
    }
    /**
     * yarn application 统计接口查询
     */
    async DescribeEmrApplicationStatics(req, cb) {
        return this.request("DescribeEmrApplicationStatics", req, cb);
    }
    /**
     * 查询HDFS存储文件信息
     */
    async DescribeHDFSStorageInfo(req, cb) {
        return this.request("DescribeHDFSStorageInfo", req, cb);
    }
    /**
     * 用于启停服务 重启服务等功能
     */
    async StartStopServiceOrMonitor(req, cb) {
        return this.request("StartStopServiceOrMonitor", req, cb);
    }
    /**
     * 修改了yarn的资源调度器，点击部署生效。
     */
    async ModifyResourceScheduler(req, cb) {
        return this.request("ModifyResourceScheduler", req, cb);
    }
    /**
     * 快速获取当前集群的节点规格配置
     */
    async DescribeNodeResourceConfigFast(req, cb) {
        return this.request("DescribeNodeResourceConfigFast", req, cb);
    }
    /**
     * YARN资源调度-变更详情
     */
    async DescribeResourceScheduleDiffDetail(req, cb) {
        return this.request("DescribeResourceScheduleDiffDetail", req, cb);
    }
    /**
     * 本接口（DescribeSLInstance）用于查询 Serverless HBase实例基本信息
     */
    async DescribeSLInstance(req, cb) {
        return this.request("DescribeSLInstance", req, cb);
    }
    /**
     * 查询Spark查询信息列表
     */
    async DescribeSparkQueries(req, cb) {
        return this.request("DescribeSparkQueries", req, cb);
    }
    /**
     * 创建EMR集群实例
     */
    async CreateInstance(req, cb) {
        return this.request("CreateInstance", req, cb);
    }
    /**
     * 创建实例询价
     */
    async InquiryPriceCreateInstance(req, cb) {
        return this.request("InquiryPriceCreateInstance", req, cb);
    }
    /**
     * 查询YARN资源调度的全局配置
     */
    async DescribeGlobalConfig(req, cb) {
        return this.request("DescribeGlobalConfig", req, cb);
    }
    /**
     * 查看yarn资源调度的调度历史。废弃，请使用流程中心查看历史记录。
     */
    async DescribeYarnScheduleHistory(req, cb) {
        return this.request("DescribeYarnScheduleHistory", req, cb);
    }
    /**
     * 修改YARN资源调度的资源配置。已废弃，请使用`ModifyYarnQueueV2`来修改队列配置
     */
    async ModifyResourceScheduleConfig(req, cb) {
        return this.request("ModifyResourceScheduleConfig", req, cb);
    }
    /**
     * 查询流程任务
     */
    async DescribeJobFlow(req, cb) {
        return this.request("DescribeJobFlow", req, cb);
    }
    /**
     * 获取hive查询信息
     */
    async DescribeHiveQueries(req, cb) {
        return this.request("DescribeHiveQueries", req, cb);
    }
    /**
     * 查询监控概览页指标数据
     */
    async DescribeEmrOverviewMetrics(req, cb) {
        return this.request("DescribeEmrOverviewMetrics", req, cb);
    }
    /**
     * 增加当前集群的节点规格配置
     */
    async AddNodeResourceConfig(req, cb) {
        return this.request("AddNodeResourceConfig", req, cb);
    }
    /**
     * 集群续费询价。
     */
    async InquirePriceRenewEmr(req, cb) {
        return this.request("InquirePriceRenewEmr", req, cb);
    }
    /**
     * 变配实例
     */
    async ModifyResource(req, cb) {
        return this.request("ModifyResource", req, cb);
    }
    /**
     * 本接口（ModifySLInstance）用于Serverless HBase变配实例。
- 接口调用成功，会创建Serverless HBase实例，创建实例请求成功会返回请求的 RequestID。
- 接口为异步接口，接口返回时操作并未立即完成，实例操作结果可以通过调用DescribeInstancesList查看当前实例的StatusDesc状态。
     */
    async ModifySLInstance(req, cb) {
        return this.request("ModifySLInstance", req, cb);
    }
    /**
     * 查询节点数据盘信息
     */
    async DescribeNodeDataDisks(req, cb) {
        return this.request("DescribeNodeDataDisks", req, cb);
    }
    /**
     * 获取自动扩缩容规则
     */
    async DescribeAutoScaleStrategies(req, cb) {
        return this.request("DescribeAutoScaleStrategies", req, cb);
    }
    /**
     * 添加扩缩容规则，按负载和时间
     */
    async AddMetricScaleStrategy(req, cb) {
        return this.request("AddMetricScaleStrategy", req, cb);
    }
    /**
     * 获取自动扩缩容全局配置
     */
    async DescribeAutoScaleGroupGlobalConf(req, cb) {
        return this.request("DescribeAutoScaleGroupGlobalConf", req, cb);
    }
    /**
     * 查询集群节点信息
     */
    async DescribeClusterNodes(req, cb) {
        return this.request("DescribeClusterNodes", req, cb);
    }
    /**
     * 查询Trino(PrestoSQL)查询信息
     */
    async DescribeTrinoQueryInfo(req, cb) {
        return this.request("DescribeTrinoQueryInfo", req, cb);
    }
    /**
     * 查询集群列表
     */
    async DescribeInstancesList(req, cb) {
        return this.request("DescribeInstancesList", req, cb);
    }
    /**
     * 刷新YARN的动态资源池。已废弃，请使用`DeployYarnConf`
     */
    async ModifyResourcePools(req, cb) {
        return this.request("ModifyResourcePools", req, cb);
    }
    /**
     * 获取洞察结果信息
     */
    async DescribeInsightList(req, cb) {
        return this.request("DescribeInsightList", req, cb);
    }
    /**
     * 删除当前集群的节点规格配置
     */
    async DeleteNodeResourceConfig(req, cb) {
        return this.request("DeleteNodeResourceConfig", req, cb);
    }
    /**
     * 修改集群名称
     */
    async ModifyInstanceBasic(req, cb) {
        return this.request("ModifyInstanceBasic", req, cb);
    }
    /**
     * 调整Pod数量
     */
    async ModifyPodNum(req, cb) {
        return this.request("ModifyPodNum", req, cb);
    }
    /**
     * 扩容集群节点
     */
    async ScaleOutCluster(req, cb) {
        return this.request("ScaleOutCluster", req, cb);
    }
    /**
     * 创建流程作业
     */
    async RunJobFlow(req, cb) {
        return this.request("RunJobFlow", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248989, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.es = void 0;
const v20180416_1 = require("./v20180416");
exports.es = {
    v20180416: v20180416_1.v20180416,
};

}, function(modId) { var map = {"./v20180416":1738984248990}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248990, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180416 = void 0;
const Models = require("./es_models");
const es_client_1 = require("./es_client");
exports.v20180416 = {
    Client: es_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./es_models":1738984248991,"./es_client":1738984248992}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248991, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248992, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * es client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("es.tencentcloudapi.com", "2018-04-16", clientConfig);
    }
    /**
     * 智能运维诊断集群
     */
    async DiagnoseInstance(req, cb) {
        return this.request("DiagnoseInstance", req, cb);
    }
    /**
     * 用于删除Logstash实例
     */
    async DeleteLogstashInstance(req, cb) {
        return this.request("DeleteLogstashInstance", req, cb);
    }
    /**
     * 快照备份恢复，从仓库中恢复快照到集群中
     */
    async RestoreClusterSnapshot(req, cb) {
        return this.request("RestoreClusterSnapshot", req, cb);
    }
    /**
     * 获取接收客户端请求的节点类型
     */
    async GetRequestTargetNodeTypes(req, cb) {
        return this.request("GetRequestTargetNodeTypes", req, cb);
    }
    /**
     * 用于批量停止Logstash管道
     */
    async StopLogstashPipelines(req, cb) {
        return this.request("StopLogstashPipelines", req, cb);
    }
    /**
     * 获取Serverless索引空间列表
     */
    async DescribeServerlessSpaces(req, cb) {
        return this.request("DescribeServerlessSpaces", req, cb);
    }
    /**
     * ES集群安装模型接口
     */
    async InstallInstanceModel(req, cb) {
        return this.request("InstallInstanceModel", req, cb);
    }
    /**
     * 获取索引列表
     */
    async DescribeIndexList(req, cb) {
        return this.request("DescribeIndexList", req, cb);
    }
    /**
     * 用于更新管道描述信息
     */
    async UpdateLogstashPipelineDesc(req, cb) {
        return this.request("UpdateLogstashPipelineDesc", req, cb);
    }
    /**
     * 查询快照信息接口
     */
    async DescribeUserCosSnapshotList(req, cb) {
        return this.request("DescribeUserCosSnapshotList", req, cb);
    }
    /**
     * 更新索引
     */
    async UpdateIndex(req, cb) {
        return this.request("UpdateIndex", req, cb);
    }
    /**
     * 销毁集群实例
     */
    async DeleteInstance(req, cb) {
        return this.request("DeleteInstance", req, cb);
    }
    /**
     * 查看智能运维配置
     */
    async GetDiagnoseSettings(req, cb) {
        return this.request("GetDiagnoseSettings", req, cb);
    }
    /**
     * 创建索引
     */
    async CreateIndex(req, cb) {
        return this.request("CreateIndex", req, cb);
    }
    /**
     * 用于启动Logstash管道
     */
    async StartLogstashPipelines(req, cb) {
        return this.request("StartLogstashPipelines", req, cb);
    }
    /**
     * 更新接收客户端请求的节点类型
     */
    async UpdateRequestTargetNodeTypes(req, cb) {
        return this.request("UpdateRequestTargetNodeTypes", req, cb);
    }
    /**
     * 更新智能运维配置
     */
    async UpdateDiagnoseSettings(req, cb) {
        return this.request("UpdateDiagnoseSettings", req, cb);
    }
    /**
     * cos迁移流程
     */
    async CreateCosMigrateToServerlessInstance(req, cb) {
        return this.request("CreateCosMigrateToServerlessInstance", req, cb);
    }
    /**
     * 变更插件列表
     */
    async UpdatePlugins(req, cb) {
        return this.request("UpdatePlugins", req, cb);
    }
    /**
     * 对集群进行节点规格变更，修改实例名称，修改配置，等操作。参数中InstanceId为必传参数，参数传递组合及含义如下：
- InstanceName：修改实例名称(仅用于标识实例)
- NodeNum: 修改实例节点数量（节点横向扩缩容，纵向扩缩容等）
- YMLConfig: 修改实例YML配置
- BindedES：修改绑定的ES集群配置
以上参数组合只能传递一种，多传或少传均会导致请求失败
     */
    async UpdateLogstashInstance(req, cb) {
        return this.request("UpdateLogstashInstance", req, cb);
    }
    /**
     * 检查cos迁移索引元数据
     */
    async CheckMigrateIndexMetaData(req, cb) {
        return this.request("CheckMigrateIndexMetaData", req, cb);
    }
    /**
     * 更新实例Jdk配置
     */
    async UpdateJdk(req, cb) {
        return this.request("UpdateJdk", req, cb);
    }
    /**
     * 删除Serverless索引
     */
    async DeleteServerlessInstance(req, cb) {
        return this.request("DeleteServerlessInstance", req, cb);
    }
    /**
     * 创建Serverless索引空间
     */
    async CreateServerlessSpaceV2(req, cb) {
        return this.request("CreateServerlessSpaceV2", req, cb);
    }
    /**
     * 获取快照备份列表
     */
    async DescribeClusterSnapshot(req, cb) {
        return this.request("DescribeClusterSnapshot", req, cb);
    }
    /**
     * 用于创建Logstash实例
     */
    async CreateLogstashInstance(req, cb) {
        return this.request("CreateLogstashInstance", req, cb);
    }
    /**
     * 重启ES集群实例(用于系统版本更新等操作)
     */
    async RestartInstance(req, cb) {
        return this.request("RestartInstance", req, cb);
    }
    /**
     * 对集群进行节点规格变更，修改实例名称，修改配置，重置密码， 添加Kibana黑白名单等操作。参数中InstanceId为必传参数，ForceRestart为选填参数，剩余参数传递组合及含义如下：
- InstanceName：修改实例名称(仅用于标识实例)
- NodeInfoList: 修改节点配置（节点横向扩缩容，纵向扩缩容，增加主节点，增加冷节点等）
- EsConfig：修改集群配置
- Password：修改默认用户elastic的密码
- EsAcl：修改访问控制列表
- CosBackUp: 设置集群COS自动备份信息
以上参数组合只能传递一种，多传或少传均会导致请求失败
     */
    async UpdateInstance(req, cb) {
        return this.request("UpdateInstance", req, cb);
    }
    /**
     * 查询用户该地域下符合条件的ES集群的日志
     */
    async DescribeInstanceLogs(req, cb) {
        return this.request("DescribeInstanceLogs", req, cb);
    }
    /**
     * 重启Kibana
     */
    async RestartKibana(req, cb) {
        return this.request("RestartKibana", req, cb);
    }
    /**
     * 修改绑定VIP的安全组，传安全组id列表
     */
    async ModifyEsVipSecurityGroup(req, cb) {
        return this.request("ModifyEsVipSecurityGroup", req, cb);
    }
    /**
     * 创建Serverless索引
     */
    async CreateServerlessInstance(req, cb) {
        return this.request("CreateServerlessInstance", req, cb);
    }
    /**
     * 获取serverless实例对应指标，获取space维度时不需要传入indexid，获取index时不需要传入spaceid
获取一段时间时间范围内的指标数据
     */
    async DescribeServerlessMetrics(req, cb) {
        return this.request("DescribeServerlessMetrics", req, cb);
    }
    /**
     * 查询实例指定条件下的操作记录
     */
    async DescribeInstanceOperations(req, cb) {
        return this.request("DescribeInstanceOperations", req, cb);
    }
    /**
     * space维度的kibana获取登录token
     */
    async DescribeSpaceKibanaTools(req, cb) {
        return this.request("DescribeSpaceKibanaTools", req, cb);
    }
    /**
     * 用于获取Logstash实例管道列表
     */
    async DescribeLogstashPipelines(req, cb) {
        return this.request("DescribeLogstashPipelines", req, cb);
    }
    /**
     * 查询用户该地域下符合条件的所有Logstash实例
     */
    async DescribeLogstashInstances(req, cb) {
        return this.request("DescribeLogstashInstances", req, cb);
    }
    /**
     * Serverless获取索引列表
     */
    async DescribeServerlessInstances(req, cb) {
        return this.request("DescribeServerlessInstances", req, cb);
    }
    /**
     * 查询集群各视图数据，包括集群维度、节点维度、Kibana维度
     */
    async DescribeViews(req, cb) {
        return this.request("DescribeViews", req, cb);
    }
    /**
     * 创建指定规格的ES集群实例
     */
    async CreateInstance(req, cb) {
        return this.request("CreateInstance", req, cb);
    }
    /**
     * 更新Serverless索引
     */
    async UpdateServerlessInstance(req, cb) {
        return this.request("UpdateServerlessInstance", req, cb);
    }
    /**
     * 升级ES集群版本
     */
    async UpgradeInstance(req, cb) {
        return this.request("UpgradeInstance", req, cb);
    }
    /**
     * 查询智能运维诊断结果报告
     */
    async DescribeDiagnose(req, cb) {
        return this.request("DescribeDiagnose", req, cb);
    }
    /**
     * 删除Serverless空间子用户
     */
    async DeleteServerlessSpaceUser(req, cb) {
        return this.request("DeleteServerlessSpaceUser", req, cb);
    }
    /**
     * 用于批量删除Logstash管道
     */
    async DeleteLogstashPipelines(req, cb) {
        return this.request("DeleteLogstashPipelines", req, cb);
    }
    /**
     * 查询用户该地域下符合条件的所有实例
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 更新Serverless索引空间
     */
    async UpdateServerlessSpace(req, cb) {
        return this.request("UpdateServerlessSpace", req, cb);
    }
    /**
     * 删除索引
     */
    async DeleteIndex(req, cb) {
        return this.request("DeleteIndex", req, cb);
    }
    /**
     * 用于重启Logstash实例
     */
    async RestartLogstashInstance(req, cb) {
        return this.request("RestartLogstashInstance", req, cb);
    }
    /**
     * 集群快照手动创建
     */
    async CreateClusterSnapshot(req, cb) {
        return this.request("CreateClusterSnapshot", req, cb);
    }
    /**
     * 删除快照仓库里备份的快照
     */
    async DeleteClusterSnapshot(req, cb) {
        return this.request("DeleteClusterSnapshot", req, cb);
    }
    /**
     * 查询用户该地域下符合条件的Logstash实例的日志
     */
    async DescribeLogstashInstanceLogs(req, cb) {
        return this.request("DescribeLogstashInstanceLogs", req, cb);
    }
    /**
     * 用于重启集群节点
     */
    async RestartNodes(req, cb) {
        return this.request("RestartNodes", req, cb);
    }
    /**
     * 查看Serverless空间子用户
     */
    async DescribeServerlessSpaceUser(req, cb) {
        return this.request("DescribeServerlessSpaceUser", req, cb);
    }
    /**
     * 用于下发并且部署管道
     */
    async SaveAndDeployLogstashPipeline(req, cb) {
        return this.request("SaveAndDeployLogstashPipeline", req, cb);
    }
    /**
     * 更新ES集群词典
     */
    async UpdateDictionaries(req, cb) {
        return this.request("UpdateDictionaries", req, cb);
    }
    /**
     * 升级ES商业特性
     */
    async UpgradeLicense(req, cb) {
        return this.request("UpgradeLicense", req, cb);
    }
    /**
     * 查询实例插件列表
     */
    async DescribeInstancePluginList(req, cb) {
        return this.request("DescribeInstancePluginList", req, cb);
    }
    /**
     * 获取索引元数据
     */
    async DescribeIndexMeta(req, cb) {
        return this.request("DescribeIndexMeta", req, cb);
    }
    /**
     * 查询实例指定条件下的操作记录
     */
    async DescribeLogstashInstanceOperations(req, cb) {
        return this.request("DescribeLogstashInstanceOperations", req, cb);
    }
    /**
     * 集群续费询价接口，续费前通过调用该接口，可获取集群续费的价格。
     */
    async InquirePriceRenewInstance(req, cb) {
        return this.request("InquirePriceRenewInstance", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248993, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ess = void 0;
const v20201111_1 = require("./v20201111");
exports.ess = {
    v20201111: v20201111_1.v20201111,
};

}, function(modId) { var map = {"./v20201111":1738984248994}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248994, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201111 = void 0;
const Models = require("./ess_models");
const ess_client_1 = require("./ess_client");
exports.v20201111 = {
    Client: ess_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ess_models":1738984248995,"./ess_client":1738984248996}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248995, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248996, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ess client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ess.tencentcloudapi.com", "2020-11-11", clientConfig);
    }
    /**
     * 此接口用于启动流程。它是模板发起合同的最后一步。
在[创建签署流程](https://qian.tencent.com/developers/companyApis/startFlows/CreateFlow)和[创建电子文档](https://qian.tencent.com/developers/companyApis/startFlows/CreateDocument)之后，用于开始整个合同流程,  推进流程进入到签署环节。

![image](https://qcloudimg.tencent-cloud.cn/raw/1f38ebd7c5afed8763ad961741d81438.png)

注：
1.<font color="red">合同发起后就会扣减合同的额度</font>, 只有撤销没有参与方签署过或只有自动签署签署过的合同，才会返还合同额度。（过期，拒签，签署完成，解除完成等状态不会返还额度）

2.<font color="red">静默（自动）签署不支持非本企业合同签署方存在填写</font>功能

3.<font color="red">在发起签署流程之前，建议等待 [PDF合成完成的回调](https://qian.tencent.com/developers/company/callback_types_file_resources)</font>，尤其是当模板中存在动态表格等复杂填写控件时，因为合成过程可能会耗费秒级别的时间。
     */
    async StartFlow(req, cb) {
        return this.request("StartFlow", req, cb);
    }
    /**
     * 此接口（DescribeFlowTemplates）用于查询本企业模板列表信息。


**适用场景**
该接口常用来配合<a href="https://qian.tencent.com/developers/companyApis/startFlows/CreateDocument" target="_blank">模板发起合同-创建电子文档</a>接口，作为创建电子文档的前置接口使用。
通过此接口查询到模板信息后，再通过调用创建电子文档接口，指定模板ID，指定模板中需要的填写控件内容等，完成电子文档的创建。

**一个模板通常会包含以下结构信息**

- 模板模板ID, 模板名字等基本信息
- 发起方参与信息Promoter、签署参与方 Recipients，后者会在模板发起合同时用于指定参与方
- 发起方和签署方的填写控件 Components
- 签署方的签署控件 SignComponents

![image](https://qcloudimg.tencent-cloud.cn/raw/ab81fa948a0a6fea14f48cac91d0e36a/channel_DescribeTemplates.png)

模板中各元素的层级关系, 所有的填写控件和签署控件都归属某一个角色(通过控件的ComponentRecipientId来关联)
![image](https://qcloudimg.tencent-cloud.cn/raw/45c638bd93f9c8024763add9ab47c27f.png)
     */
    async DescribeFlowTemplates(req, cb) {
        return this.request("DescribeFlowTemplates", req, cb);
    }
    /**
     * 获取个人用户自动签的开通链接。

注意: `处方单等特殊场景专用，此接口为白名单功能，使用前请联系对接的客户经理沟通。`
     */
    async CreateUserAutoSignEnableUrl(req, cb) {
        return this.request("CreateUserAutoSignEnableUrl", req, cb);
    }
    /**
     * 提交合同组签署流程审批结果的适用场景包括：

1. 在使用[通过多文件创建合同组签署流程](https://qian.tencent.com/developers/companyApis/startFlows/CreateFlowGroupByFiles)或[通过多模板创建合同组签署流程](https://qian.tencent.com/developers/companyApis/startFlows/CreateFlowGroupByTemplates)创建合同组签署流程时，若指定了以下参数 为true，则可以调用此接口提交企业内部签署审批结果。即使是自动签署也需要进行审核通过才会进行签署。
  - [FlowGroupInfo.NeedSignReview](https://qian.tencent.com/developers/companyApis/dataTypes/#flowgroupinfo)
  - [ApproverInfo.ApproverNeedSignReview](https://qian.tencent.com/developers/companyApis/dataTypes/#approverinfo)


2. 同一合同组，同一签署人可以多次提交签署审批结果，签署时的最后一个“审批结果”有效。
     */
    async CreateFlowGroupSignReview(req, cb) {
        return this.request("CreateFlowGroupSignReview", req, cb);
    }
    /**
     * 生成个人用户实名认证链接，个人用户点击此链接进入实名流程（若用户已完成实名认证，则直接进入成功页面）。

注： 调用此接口需要购买<font color="red"><b>单独的实名套餐包</b></font>。使用前请联系对接的客户经理沟通。
     */
    async CreateUserVerifyUrl(req, cb) {
        return this.request("CreateUserVerifyUrl", req, cb);
    }
    /**
     * 本接口（CreateEmbedWebUrl）用于创建可嵌入web页面的URL（此web页面可以通过iframe方式嵌入到贵方系统的网页中），支持以下类型的Web链接创建：
1. 创建印章
2. 创建模板
3. 修改模板
4. 预览模板
5. 预览合同流程

预览模板的嵌入页面长相如下：
![image](https://qcloudimg.tencent-cloud.cn/raw/57bdda4a884e3f5b2de12d5a282a3651.png)

预览合同流程的嵌入页面长相如下：
![image](https://qcloudimg.tencent-cloud.cn/raw/dc7af994e2f6da56bdad5975e927de34.png)
     */
    async CreateEmbedWebUrl(req, cb) {
        return this.request("CreateEmbedWebUrl", req, cb);
    }
    /**
     * 此接口用于获取企业批量认证异步任务的状态及结果。

前提条件：已调用 CreateBatchOrganizationRegistrationTasks创建企业批量认证链接任务接口，并得到了任务Id。

异步任务的处理完成时间视当前已提交的任务量、任务的复杂程度等因素决定，正常情况下 3~5 秒即可完成，但也可能需要更长的时间
     */
    async DescribeBatchOrganizationRegistrationUrls(req, cb) {
        return this.request("DescribeBatchOrganizationRegistrationUrls", req, cb);
    }
    /**
     * 本接口（CreatePreparedPersonalEsign）用于创建导入个人印章（处方单场景专用，使用此接口请与客户经理确认）。
     */
    async CreatePreparedPersonalEsign(req, cb) {
        return this.request("CreatePreparedPersonalEsign", req, cb);
    }
    /**
     * 提交企业流程审批结果
**当前存在两种审核操作：**
<ul>
<li>签署审核
<ul>
<li>在通过接口<ul>
<li>CreateFlowByFiles</li>
<li>CreateFlow</li>
<li>CreateFlowGroupByTemplates</li>
<li>CreateFlowGroupByFiles</li>
<li>CreatePrepareFlow</li>
</ul>
发起签署流程时，通过指定NeedSignReview为true，则可以调用此接口，并指定operate=SignReview，以提交企业内部签署审批结果（<font color="red">审核对象：本企业合同参与方的签署动作</font>）</li>
<li>在通过接口
<ul>
<li>CreateFlowByFiles</li>
<li>CreateFlow</li>
<li>CreateFlowGroupByTemplates</li>
<li>CreateFlowGroupByFiles</li>
</ul>
发起签署流程时，通过指定签署人ApproverNeedSignReview为true，则可以调用此接口，并指定operate=SignReview，并指定RecipientId，以提交企业内部签署审批结果（<font color="red">审核对象：本企业、合同企业、自然人合同参与方的签署动作</font>）</li>
</ul>
</li>

对应签署人在签署页面会看到下面的提示：
![image](https://qcloudimg.tencent-cloud.cn/raw/3bf065bf5afa6de862e80da316be1c53.png)

<li>发起审核
 <ul>
<li>通过接口CreatePrepareFlow指定发起后需要审核，那么可以调用此接口，并指定operate=CreateReview，以提交企业内部审批结果。可以多次提交审批结果，但一旦审批通过，后续提交的结果将无效（<font color="red">审核对象：本企业合同发起方的发起动作</font>）
</li>
</ul>

对应发起人在发起合同的最后环节会有<b>提交审批</b>的按钮：

![image](https://qcloudimg.tencent-cloud.cn/raw/cb4857b7b57302fdcbcf37dad31214a8.png)

</li>
</ul>
     */
    async CreateFlowSignReview(req, cb) {
        return this.request("CreateFlowSignReview", req, cb);
    }
    /**
     * 创建签署流程电子文档<br />

###  调用流程
该接口需要给对应的流程指定一个模板id，并且填充该模板中需要补充的信息。需要配置<a href="https://qian.tencent.com/developers/companyApis/startFlows/CreateFlow" target="_blank">创建签署流程</a>和<a href="https://qian.tencent.com/developers/companyApis/startFlows/StartFlow" target="_blank">发起签署流程</a>接口使用。具体逻辑可以参考下图:

![image](https://qcloudimg.tencent-cloud.cn/raw/1f38ebd7c5afed8763ad961741d81438.png)


### 填充模板中定义的填写控件
模板中配置的<font color="red">发起人填充控件</font>可以通过本接口的**FormFields数组**字段填充。

**<font color="red">填充填写控件需要进行Pdf合成工作，文档合成完成后会收到[合同文档合成完成回调](https://qian.tencent.com/developers/company/callback_types_contracts_sign#%E4%B9%9D-%E5%90%88%E5%90%8C%E6%96%87%E6%A1%A3%E5%90%88%E6%88%90%E5%AE%8C%E6%88%90%E5%9B%9E%E8%B0%83),建议在收到此回调后再调用 [StartFlow](https://qian.tencent.com/developers/companyApis/startFlows/StartFlow) 接口。</font>**

![image](https://qcloudimg.tencent-cloud.cn/raw/37457e0e450fc221effddfcb8b1bad55.png)

填充的传参示例如下

```
    request.FormFields = [{
            "ComponentName": "项目的名字",
            "ComponentValue": "休闲山庄"
        }, {
            "ComponentName": "项目的地址",
            "ComponentValue": "凤凰山北侧",
        }, {
            "ComponentName": "范围",
            "ComponentValue": "凤凰山至107国道",
        }, {
            "ComponentName": "面积",
            "ComponentValue": "100亩",
        }, {
            "ComponentName": "基本情况",
            "ComponentValue": "完好",
        }, , {
            "ComponentName": "用途",
            "ComponentValue": "经营农家乐",
        }
    ]
```
合成后合同样子示例

![image](https://qcloudimg.tencent-cloud.cn/raw/140a2fb771ac66a185d0a000d37485f6.png)
     */
    async CreateDocument(req, cb) {
        return this.request("CreateDocument", req, cb);
    }
    /**
     * 查询企业扩展服务的开通和授权情况，当前支持查询以下内容：

1. **企业自动签署**
2. **批量签署授权**
3. **企业与港澳台居民签署合同**
4. **拓宽签署方年龄限制**
5. **个人签署方仅校验手机号**
6. **隐藏合同经办人姓名**
7. **正楷临摹签名失败后更换其他签名类型**
8. **短信通知签署方**
9. **个人签署方手动签字**
10. **骑缝章**
11. **签署密码开通引导**


对应能力开通页面在Web控制台-更多-企业设置-拓展服务，如下图所示:

![image](https://qcloudimg.tencent-cloud.cn/raw/7d79746ecca1c5fe878a2ec36ed69c23.jpg)

注: <font color='red'>所在企业的超管、法人才有权限调用此接口</font>(Operator.UserId需要传递超管或者法人的UserId)
     */
    async DescribeExtendedServiceAuthInfos(req, cb) {
        return this.request("DescribeExtendedServiceAuthInfos", req, cb);
    }
    /**
     * 通过此接口获取个人用户自动签的开通状态。

注意: `处方单等特殊场景专用，此接口为白名单功能，使用前请联系对接的客户经理沟通。`
     */
    async DescribeUserAutoSignStatus(req, cb) {
        return this.request("DescribeUserAutoSignStatus", req, cb);
    }
    /**
     * 此接口（CreateFlowGroupByTemplates）可用于通过多个模板创建合同组签署流程。

- 该接口允许通过选择多个模板一次性创建多个合同，这些合同被组织在一个合同组中。
- 每个签署方将收到一个签署链接，通过这个链接可以访问并签署合同组中的所有合同。
- 合同组中的合同必须作为一个整体进行签署，不能将合同组拆分成单独的合同进行逐一签署。

<img src="https://qcloudimg.tencent-cloud.cn/raw/a63074a0293c9ff5bf6c0bb74c0d3b20.png"   width="400" />

### 2. 适用场景

该接口适用于需要一次性完成多份合同签署的情况，多份合同一般具有关联性，用户以目录的形式查看合同。


### 3. 合同额度的扣减与返还
- **扣减时机**：合同一旦发起，相关的合同额度就会被扣减，合同组下面的每个合同都要扣减一个合同额度。
- **返还条件**：只有在合同被撤销且没有任何签署方签署过，或者只有自动签署的情况下，合同额度才会被返还。
- **不返还的情况**：如果合同已过期、被拒签、签署完成或已解除，合同额度将不会被返还。

### 4.合同组暂不支持抄送功能
     */
    async CreateFlowGroupByTemplates(req, cb) {
        return this.request("CreateFlowGroupByTemplates", req, cb);
    }
    /**
     * 创建一个用于他方自动签授权的链接（可选择他方授权或我方授权）。通过这个链接，合作方企业可以直接进入小程序，进行自动签授权操作。

如果授权企业尚未开通企业自动签功能，该链接还将引导他们首先开通本企业的自动签服务

注:
1. <font color='red'>所在企业的超管、法人才有权限调用此接口</font>(Operator.UserId 需要传递超管或者法人的UserId)
2. 已经在授权中或者授权成功的企业，无法重复授权
3. 授权企业和被授权企业必须都是已认证企业
4. <font color='red'>需要授权企业或被授权企业的超管或者法人打开链接</font>走开通逻辑。


**该接口效果同控制台： 企业设置-> 扩展服务 -> 企业自动签署 -> 合作企业方授权**
![image](https://qcloudimg.tencent-cloud.cn/raw/489aa0bf74941469b5e740f428f17c3a.png)
     */
    async CreatePartnerAutoSignAuthUrl(req, cb) {
        return this.request("CreatePartnerAutoSignAuthUrl", req, cb);
    }
    /**
     * 此接口（CreateFlowByFiles）用来通过上传后的pdf资源编号来创建待签署的合同流程。<br/>
适用场景：适用非制式的合同文件签署。一般开发者自己有完整的签署文件，可以通过该接口传入完整的PDF文件及流程信息生成待签署的合同流程。<br/>

<table>
    <thead>
        <tr>
            <th>签署人类别</th>
            <th>需要提前准备的信息</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>自己企业的员工签署（未认证加入或已认证加入）</td>
            <td>签署企业的名字、员工的真实名字、员工的触达手机号、员工的证件号（证件号非必传）</td>
        </tr>
        <tr>
            <td>自己企业的员工签署（已认证加入）</td>
            <td>签署企业的名字、员工在电子签平台的ID（UserId）</td>
        </tr>
        <tr>
            <td>其他企业的员工签署</td>
            <td>签署企业的名字、员工的真实名字、员工的触达手机号、员工的证件号（证件号非必传）</td>
        </tr>
        <tr>
            <td>个人（自然人）签署</td>
            <td>个人的真实名字、个人的触达手机号、个人的身份证（证件号非必传）</td>
        </tr>
    </tbody>
</table>



该接口需要依赖[上传文件](https://qian.tencent.com/developers/companyApis/templatesAndFiles/UploadFiles)接口生成pdf资源编号（FileIds）进行使用。（如果非pdf文件需要调用[创建文件转换任务](https://qian.tencent.com/developers/companyApis/templatesAndFiles/CreateConvertTaskApi)接口转换成pdf资源）<br/>


![image](https://qcloudimg.tencent-cloud.cn/raw/f097a74b289e3e1acd740936bdfe9843.png)

注：
-  合同**发起后就会扣减合同的额度**, 只有撤销没有参与方签署过或只有自动签署签署过的合同，才会返还合同额度。（**过期，拒签，签署完成，解除完成等状态不会返还额度**）
- **静默（自动）签署不支持合同签署方存在填写**功能


<font color="red">相关视频指引</font> <br>
1. <a href="https://dyn.ess.tencent.cn/guide/apivideo/ess_uploadfiles.mp4" target="_blank">上传用于合同发起的PDF文件代码编写示例</a><br>
2.  <a href="https://dyn.ess.tencent.cn/guide/apivideo/ess-CreateFlowByFiles.mp4" target="_blank">用PDF文件创建签署流程编写示例</a><br>
     */
    async CreateFlowByFiles(req, cb) {
        return this.request("CreateFlowByFiles", req, cb);
    }
    /**
     * 此接口（DescribeIntegrationRoles）用于分页查询企业角色列表，列表按照角色创建时间升序排列。
     */
    async DescribeIntegrationRoles(req, cb) {
        return this.request("DescribeIntegrationRoles", req, cb);
    }
    /**
     * 此接口（DescribeIntegrationEmployees）用于分页查询企业员工信息列表，支持设置过滤条件以筛选员工查询结果。
     */
    async DescribeIntegrationEmployees(req, cb) {
        return this.request("DescribeIntegrationEmployees", req, cb);
    }
    /**
     * 获取个人用户认证证书图片下载URL

个人用户认证证书图片样式如下图

![image](https://dyn.ess.tencent.cn/guide/capi/CreatePersonAuthCertificateImage.png)

注:
<ul>
<li>只能获取个人用户证明图片, 企业员工的暂不支持</li>
<li>专为电子处方单（医疗自动签）特定场景使用。在使用前，请务必与您的客户经理联系以确认已经开通电子处方单功能 </li>
</ul>
     */
    async CreatePersonAuthCertificateImage(req, cb) {
        return this.request("CreatePersonAuthCertificateImage", req, cb);
    }
    /**
     * 此接口用于赋予员工指定的角色权限，如需解绑请使用 DeleteIntegrationRoleUsers 接口。
     */
    async CreateIntegrationUserRoles(req, cb) {
        return this.request("CreateIntegrationUserRoles", req, cb);
    }
    /**
     * 通过此接口，可以创建小程序批量签署链接，个人/企业员工可通过此链接跳转至小程序进行批量签署。请确保生成链接时的身份信息与签署合同参与方的信息保持一致。

注意事项：
- 使用此接口生成链接，需要贵企业先开通 <font color="red">个人签署方仅校验手机号 </font>功能。您可以在 <b>【腾讯电子签网页端】->【企业设置】->【拓展服务】</b>中找到该功能。
- 生成批量签署链接时，<font color="red">合同目标参与方的状态必须为<b>待签署</b>状态</font>。签署人点击链接后需要输入短信验证码才能查看合同内容。
- 企业员工批量签署链接：需要传入签署方所在企业名称，用户名字和手机号（或者身份证件信息）参数来生成签署链接。<font color="red">该签署方企业必须已完成腾讯电子签企业认证</font>
- 个人批量签署链接：需要传入签署方用户名字和手机号（或者身份证件信息）参数来生成签署链接。个人批量签署进行的合同的签名区， 全部变成<font color="red">手写签名</font>（不管合同里边设置的签名限制）来进行。
- 不支持签署方含有签批控件，或设置了签署方在签署时自行添加签署控件功能的合同进行批量签署。
     */
    async CreateBatchSignUrl(req, cb) {
        return this.request("CreateBatchSignUrl", req, cb);
    }
    /**
     * 指定需要批量催办的签署流程ID，批量催办合同，最多100个。需要符合以下条件的合同才可被催办：

1. 发起合同时，**签署人的NotifyType需设置为sms**
2. 合同中当前状态为 **待签署** 的签署人是催办的对象
3. **每个合同只能催办一次**

**催办的效果**: 对方会收到如下的短信通知

![image](https://qcloudimg.tencent-cloud.cn/raw/3caf94b7f540fa5736270d38528d3a7b.png)

注：`合同催办是白名单功能，请联系客户经理申请开白后使用`
     */
    async CreateFlowReminds(req, cb) {
        return this.request("CreateFlowReminds", req, cb);
    }
    /**
     * 此接口（DescribePersonCertificate）用于查询个人数字证书信息。<br />注：`1.目前仅用于查询开通了医疗自动签署功能的个人数字证书。`<br />`2.调用此接口需要开通白名单，使用前请联系相关人员开通白名单。`
     */
    async DescribePersonCertificate(req, cb) {
        return this.request("DescribePersonCertificate", req, cb);
    }
    /**
     * 通过此接口可以关闭个人用户自动签功能。
无需对应的用户刷脸等方式同意即可关闭。

注意:

<ul><li>处方单等特殊场景专用，此接口为白名单功能，使用前请联系对接的客户经理沟通。</li>
<li>如果此用户在开通时候绑定过个人自动签账号许可,  关闭此用户的自动签不会归还个人自动签账号许可的额度。</li></ul>
     */
    async DisableUserAutoSign(req, cb) {
        return this.request("DisableUserAutoSign", req, cb);
    }
    /**
     * 该接口（DeleteIntegrationEmployees）用于离职本企业员工，同时可选择是否进行离职交接。


- 如果该员工没有未处理的合同，可不设置交接人的ReceiveUserId或ReceiveOpenId进行离职操作。
- 如果该员工有未处理的合同，需要设置ReceiveUserId或ReceiveOpenId表示交接的负责人，交接后员工会进行离职操作。

未处理的合同包括以下：

- 待签署的合同（包括顺序签署还没有轮到的合同，此类合同某些情况可能不会出现在用户的列表中）。
- 待填写的合同。
- 待解除的合同等。

注：
1. <font color="red">超管或法人身份的员工不能被离职</font>， 需要在控制台或小程序更换法人和超管后进行离职删除。
2. <font color="red">员工存在待处理合同时必须交接</font>后才能离职无人交接时不能被离职删除。
3. 未实名的员工可以直接离职，不用交接合同
     */
    async DeleteIntegrationEmployees(req, cb) {
        return this.request("DeleteIntegrationEmployees", req, cb);
    }
    /**
     * 获取设置自动签印章小程序链接。

注意：
<ul><li>需要<code>企业开通自动签</code>后使用。</li>
<li>仅支持<code>已经开通了自动签的个人</code>更换自动签印章。</li>
<li>链接有效期默认7天，<code>最多30天</code>。</li>
<li>该接口的链接适用于<code>小程序</code>端。</li>
<li>该接口不会扣除您的合同套餐，暂不参与计费。</li></ul>
     */
    async CreateUserAutoSignSealUrl(req, cb) {
        return this.request("CreateUserAutoSignSealUrl", req, cb);
    }
    /**
     * 查询企业认证状态- 仅通过[CreateOrganizationAuthUrl](https://qian.tencent.com/developers/companyApis/organizations/CreateOrganizationAuthUrl) 和[CreateBatchOrganizationRegistrationTasks](https://qian.tencent.com/developers/companyApis/organizations/CreateBatchOrganizationRegistrationTasks)这两个接口进行引导认证的企业，调用方企业可以依据这个接口，查询认证状态。
     */
    async DescribeOrganizationAuthStatus(req, cb) {
        return this.request("DescribeOrganizationAuthStatus", req, cb);
    }
    /**
     * 给医疗个人自动签许可续期。续期成功后，可对医疗自动签许可追加一年有效期，只可续期一次。

注意: `处方单等特殊场景专用，此接口为白名单功能，使用前请联系对接的客户经理沟通。`
     */
    async RenewAutoSignLicense(req, cb) {
        return this.request("RenewAutoSignLicense", req, cb);
    }
    /**
     * 对合同流程文件进行数字签名验证，判断数字签名是否有效，合同文件内容是否被篡改。


**补充**： 可以到控制台[合同验签](https://qian.tencent.com/verifySign)体验验签功能，界面如下
![image](https://qcloudimg.tencent-cloud.cn/raw/81c333ccb07f0c5fbaf840d9cee61333.png)
     */
    async VerifyPdf(req, cb) {
        return this.request("VerifyPdf", req, cb);
    }
    /**
     * 此接口（BindEmployeeUserIdWithClientOpenId）用于将电子签系统员工UserId与客户系统员工OpenId进行绑定。

此OpenId只在 [更新企业员工信息 ](https://qian.tencent.com/developers/companyApis/staffs/UpdateIntegrationEmployees)、[移除企业员工](https://qian.tencent.com/developers/companyApis/staffs/DeleteIntegrationEmployees) 等场景下可以使用
     */
    async BindEmployeeUserIdWithClientOpenId(req, cb) {
        return this.request("BindEmployeeUserIdWithClientOpenId", req, cb);
    }
    /**
     * 生成合成后的各类企业授权书，包括：
- 企业认证超管授权书
- 超管变更授权书
- 企业注销授权书

注: 需自行保证传入真实的企业/法人/超管信息，否则后续的审核将会拒绝。
     */
    async CreateOrganizationAuthFile(req, cb) {
        return this.request("CreateOrganizationAuthFile", req, cb);
    }
    /**
     * 解绑员工与对应角色的关系，如需绑定请使用 CreateIntegrationUserRoles 接口。
     */
    async DeleteIntegrationRoleUsers(req, cb) {
        return this.request("DeleteIntegrationRoleUsers", req, cb);
    }
    /**
     * 此接口（CreateFlowGroupByFiles）可用于通过多个文件创建合同组签署流程。使用该接口需要先依赖[多文件上传](https://qian.tencent.com/developers/companyApis/templatesAndFiles/UploadFiles)接口返回的FileIds。

- 该接口允许通过PDF资源ID一次性创建多个合同，这些合同被组织在一个合同组中。
- 每个签署方将收到一个签署链接，通过这个链接可以访问并签署合同组中的所有合同。
- 合同组中的合同必须作为一个整体进行签署，不能将合同组拆分成单独的合同进行逐一签署。

<img src="https://qcloudimg.tencent-cloud.cn/raw/a63074a0293c9ff5bf6c0bb74c0d3b20.png"   width="400" />

### 2. 适用场景

该接口适用于需要一次性完成多份合同签署的情况，多份合同一般具有关联性，用户以目录的形式查看合同。


### 3. 合同额度的扣减与返还
- **扣减时机**：合同一旦发起，相关的合同额度就会被扣减，合同组下面的每个合同都要扣减一个合同额度。
- **返还条件**：只有在合同被撤销且没有任何签署方签署过，或者只有自动签署的情况下，合同额度才会被返还。
- **不返还的情况**：如果合同已过期、被拒签、签署完成或已解除，合同额度将不会被返还。

### 4.合同组暂不支持抄送功能
     */
    async CreateFlowGroupByFiles(req, cb) {
        return this.request("CreateFlowGroupByFiles", req, cb);
    }
    /**
     * 此接口（CreateIntegrationDepartment）用于创建企业的部门信息，支持绑定客户系统部门ID。
     */
    async CreateIntegrationDepartment(req, cb) {
        return this.request("CreateIntegrationDepartment", req, cb);
    }
    /**
     * 提交申请出证报告任务并返回报告ID。

注意：
<ul><li>使用此功能`需搭配出证套餐` ，使用前请联系对接的客户经理沟通。</li>
<li>操作人必须是`发起方或者签署方企业的(非走授权书认证)法人或者超管`。</li>
<li>合同流程必须所有参与方`已经签署完成`。</li>
<li>出证过程需一定时间，建议在`提交出证任务后的24小时之后`，通过<a href="https://qian.tencent.com/developers/companyApis/certificate/DescribeFlowEvidenceReport" target="_blank">获取出证报告任务执行结果</a>接口进行查询执行结果和出证报告的下载URL。</li></ul>

<svg id="SvgjsSvg1006" width="262" height="229" xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs"><defs id="SvgjsDefs1007"><pattern patternUnits="userSpaceOnUse" id="pattern_mark_0" width="300" height="300"><text x="150" y="100" fill="rgba(229,229,229,0.8)" font-size="18" transform="rotate(-45, 150, 150)" style="dominant-baseline: middle; text-anchor: middle;"></text></pattern><pattern patternUnits="userSpaceOnUse" id="pattern_mark_1" width="300" height="300"><text x="150" y="200" fill="rgba(229,229,229,0.8)" font-size="18" transform="rotate(-45, 150, 150)" style="dominant-baseline: middle; text-anchor: middle;"></text></pattern><marker id="SvgjsMarker1021" markerWidth="12" markerHeight="8" refX="9" refY="4" viewBox="0 0 12 8" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1022" d="M0,0 L12,4 L0,8 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path></marker></defs><rect id="svgbackgroundid" width="262" height="229" fill="transparent"></rect><rect id="SvgjsRect1009" width="262" height="229" fill="url(#pattern_mark_0)"></rect><rect id="SvgjsRect1010" width="262" height="229" fill="url(#pattern_mark_1)"></rect><g id="SvgjsG1011" transform="translate(31.75,25)"><path id="SvgjsPath1012" d="M 0 0L 198 0L 198 59L 0 59Z" stroke="rgba(86,146,48,1)" stroke-width="1" fill-opacity="1" fill="#e7ebed"></path><g id="SvgjsG1013"><text id="SvgjsText1014" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="178px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="10.375" transform="rotate(0)"><tspan id="SvgjsTspan1015" dy="16" x="99"><tspan id="SvgjsTspan1016" style="text-decoration:;fill: rgb(28, 30, 33);">CreateFlowEvidenceReport</tspan></tspan><tspan id="SvgjsTspan1017" dy="16" x="99"><tspan id="SvgjsTspan1018" style="text-decoration:;fill: rgb(51, 51, 51);">提交申请出证报告任务</tspan></tspan></text></g></g><g id="SvgjsG1019"><path id="SvgjsPath1020" d="M130.75 84.5L130.75 114.5L130.75 114.5L130.75 143.2" stroke="#323232" stroke-width="1" fill="none" marker-end="url(#SvgjsMarker1021)"></path></g><g id="SvgjsG1023" transform="translate(25,145)"><path id="SvgjsPath1024" d="M 0 0L 211.5 0L 211.5 59L 0 59Z" stroke="rgba(86,146,48,1)" stroke-width="1" fill-opacity="1" fill="#e7ebed"></path><g id="SvgjsG1025"><text id="SvgjsText1026" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="192px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="10.375" transform="rotate(0)"><tspan id="SvgjsTspan1027" dy="16" x="106"><tspan id="SvgjsTspan1028" style="text-decoration:;fill: rgb(28, 30, 33);">DescribeFlowEvidenceReport</tspan></tspan><tspan id="SvgjsTspan1029" dy="16" x="106"><tspan id="SvgjsTspan1030" style="text-decoration:;fill: rgb(51, 51, 51);">获取出证报告任务执行结果</tspan></tspan></text></g></g></svg>
     */
    async CreateFlowEvidenceReport(req, cb) {
        return this.request("CreateFlowEvidenceReport", req, cb);
    }
    /**
     * 通过模板创建签署流程<br/>
适用场景：在标准制式的合同场景中，可通过提前预制好模板文件，每次调用模板文件的id，补充合同内容信息及签署信息生成电子合同。
<table>
    <thead>
        <tr>
            <th>签署人类别</th>
            <th>需要提前准备的信息</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>自己企业的员工签署（未认证加入或已认证加入）</td>
            <td>签署企业的名字、员工的真实名字、员工的触达手机号、员工的证件号（证件号非必传）</td>
        </tr>
        <tr>
            <td>自己企业的员工签署（已认证加入）</td>
            <td>签署企业的名字、员工在电子签平台的ID（UserId）</td>
        </tr>
        <tr>
            <td>其他企业的员工签署</td>
            <td>签署企业的名字、员工的真实名字、员工的触达手机号、员工的证件号（证件号非必传）</td>
        </tr>
        <tr>
            <td>个人（自然人）签署</td>
            <td>个人的真实名字、个人的触达手机号、个人的身份证（证件号非必传）</td>
        </tr>
    </tbody>
</table>


注：配合<a href="https://qian.tencent.com/developers/companyApis/startFlows/CreateDocument" target="_blank">创建电子文档</a>和<a href="https://qian.tencent.com/developers/companyApis/startFlows/StartFlow" target="_blank">发起签署流程</a>接口使用。整体的逻辑如下图

![image](https://qcloudimg.tencent-cloud.cn/raw/1f38ebd7c5afed8763ad961741d81438.png)

注：**静默（自动）签署不支持合同签署方存在填写**功能
<br>

<font color="red">相关视频指引</font> <br>
1. <a href="https://dyn.ess.tencent.cn/guide/apivideo/createflow_seversign.mp4" target="_blank">创建静默（自动）签署模板和开通自动签署</a><br>
2. <a href="https://dyn.ess.tencent.cn/guide/apivideo/flow_document_start.mp4" target="_blank">用模板创建发起合同</a><br>
     */
    async CreateFlow(req, cb) {
        return this.request("CreateFlow", req, cb);
    }
    /**
     * 发起解除协议的主要应用场景为：基于一份已经签署的合同（签署流程），进行解除操作。
解除协议的模板是官方提供 ，经过提供法务审核，暂不支持自定义。具体用法可以参考文档[合同解除](https://qian.tencent.com/developers/company/flow_release)。

注意：
<ul>
<li><strong>完成原合同签署后方可发起解除协议：</strong>只有在原合同所有签署人完成签署后，才可以启动解除协议的流程。</li>
<li><strong>原合同状态更新：</strong>解除协议一旦签署完毕，原合同及解除协议状态将更新为“已解除”。</li>
<li><strong>解除协议的个人参与要求：</strong>原合同中的个人参与者必须直接参与解除协议，禁止替换为其他第三方个人。</li>
<li><strong>企业参与人的代理权：</strong>若原合同的企业参与人无法亲自参与解除协议，可指派具有等同权限的企业员工代行。</li>
<li><strong>解除协议的费用问题：</strong>发起解除协议将产生费用，其扣费标准与其他企业合同相同。</li>
<li><strong>解除协议的发起资格：</strong>仅限原合同中的企业类型参与者发起解除协议，个人参与者无此权限。</li>
<li><strong>非原合同企业参与者的权限：</strong>非原合同的企业参与者发起解除协议时，必须具备相应的解除权限。</li>
<li><strong>自动签署：</strong>支持本企业的自动签署，不支持其他企业的自动签署（不能不动声色的把别人参与的合同作废了）</li>
</ul>

![image](https://qcloudimg.tencent-cloud.cn/raw/3427941ecb091bf0c55009bad192dd1c.png)
     */
    async CreateReleaseFlow(req, cb) {
        return this.request("CreateReleaseFlow", req, cb);
    }
    /**
     * 该接口用于获取创建法人章的二维码，需要通过微信扫描。扫描后将跳转到腾讯电子签署，进入到创建法人章的流程。

**注意**
1. 该二维码**有效期为7天**，过期后将失效，可重新创建 。
2. 每个公司**只能有1个法人章**，无法重复创建或者创建多个

法人章的样式可以参考下图索引（也可以自己上传法人印章图片）：

![image](https://qcloudimg.tencent-cloud.cn/raw/36a0a090750c45bb5cac5047ac461b2c.png)
     */
    async CreateLegalSealQrCode(req, cb) {
        return this.request("CreateLegalSealQrCode", req, cb);
    }
    /**
     * 本接口（CreateSeal）用于创建企业电子印章，支持创建企业公章，合同章，财务专用章和人事专用章创建。

1. 可以**通过图片**创建印章，图片最大5MB
2. 可以**系统创建**创建印章, 系统创建的印章样子下图(样式可以调整)

![image](https://dyn.ess.tencent.cn/guide/capi/CreateSealByImage.png)
     */
    async CreateSeal(req, cb) {
        return this.request("CreateSeal", req, cb);
    }
    /**
     * 此接口（CreateMultiFlowSignQRCode）用于创建一码多签签署码。

**适用场景**:
签署人可通过扫描二维码补充签署信息进行实名签署。常用于提前不知道签署人的身份信息场景，例如：劳务工招工、大批量员工入职等场景。

**注意**:
1. 本接口适用于**发起方没有填写控件的 B2C或者单C模板**,  若是B2C模板,还要满足以下任意一个条件
    - 模板中配置的签署顺序是无序
    - B端企业的签署方式是静默签署
    - B端企业是非首位签署
2. 通过一码多签签署码发起的合同，合同涉及到的回调消息可参考文档[合同发起及签署相关回调
]( https://qian.tencent.com/developers/company/callback_types_contracts_sign)
3. 用户通过一码多签签署码发起合同时，因企业额度不足导致失败 会触发签署二维码相关回调,具体参考文档[签署二维码相关回调](https://qian.tencent.com/developers/company/callback_types_commons#%E7%AD%BE%E7%BD%B2%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%9B%B8%E5%85%B3%E5%9B%9E%E8%B0%83)

签署码的样式如下图:

![image](https://qcloudimg.tencent-cloud.cn/raw/27317cf5aacb094fb1dc6f94179a5148.png )
     */
    async CreateMultiFlowSignQRCode(req, cb) {
        return this.request("CreateMultiFlowSignQRCode", req, cb);
    }
    /**
     * 查询企业扩展服务的授权详情（列表），当前支持查询以下内容：
1. 企业自动签（本企业授权、集团企业授权、合作企业授权）
2. 批量签署能力


注: <font color='red'>所在企业的超管、法人才有权限调用此接口</font>(Agent.ProxyOperator.OpenId 需要传递超管或者法人的OpenId)
     */
    async DescribeExtendedServiceAuthDetail(req, cb) {
        return this.request("DescribeExtendedServiceAuthDetail", req, cb);
    }
    /**
     * 此接口（CancelMultiFlowSignQRCode）用于废除一码多签签署码。
该接口所需的二维码ID，源自[创建一码多签签署码](https://qian.tencent.com/developers/companyApis/startFlows/CreateMultiFlowSignQRCode)生成的。
如果该签署码尚处于有效期内，可通过本接口将其设置为失效状态。
     */
    async CancelMultiFlowSignQRCode(req, cb) {
        return this.request("CancelMultiFlowSignQRCode", req, cb);
    }
    /**
     * 查询流程基础信息，主要用于<font color="red">查询合同的状态</font>信息。可以配合回调通知使用。

注: `每个企业限制日调用量限制：100W，当日超过此限制后再调用接口返回错误`
     */
    async DescribeFlowBriefs(req, cb) {
        return this.request("DescribeFlowBriefs", req, cb);
    }
    /**
     * 该接口用于在使用视频认证方式签署合同后，获取用户的签署人脸认证视频。

1. 该接口**仅适用于在H5端签署**的合同，**在通过视频认证后**获取人脸视频。
2. 该接口**不支持小程序端**的签署人脸视频获取。
3. 请在**签署完成后的三天内**获取人脸视频，**过期后将无法获取**。

**注意：该接口需要开通白名单，请联系客户经理开通后使用。**
     */
    async DescribeSignFaceVideo(req, cb) {
        return this.request("DescribeSignFaceVideo", req, cb);
    }
    /**
     * 该接口用于发起合同后，生成用户的签署链接 <br/>

**注意**
1. 该签署**链接有效期为30分钟**，过期后将失效，如需签署可重新创建签署链接 。
2. 该接口返回的签署链接适用于APP集成的场景，支持APP打开或浏览器直接打开，**不支持微信小程序嵌入**。配置方式请参考：<a href="https://qian.tencent.com/developers/company/openqianh5/">跳转电子签H5</a>。
如需跳转到小程序的实现，参考微信官方文档（分为<a href="https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html">全屏</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html">半屏</a>两种方式），如何配置也可以请参考: <a href="https://qian.tencent.com/developers/company/openwxminiprogram">跳转电子签小程序配置</a>。
3. 因h5涉及人脸身份认证能力基于慧眼人脸核身，对Android和iOS系统均有一定要求， 因此<font color='red'>App嵌入H5签署合同需要按照慧眼提供的<a href="https://cloud.tencent.com/document/product/1007/61076">慧眼人脸核身兼容性文档</a>做兼容性适配</font>。
     */
    async CreateFlowSignUrl(req, cb) {
        return this.request("CreateFlowSignUrl", req, cb);
    }
    /**
     * 支持企业进行批量初始化操作：

此接口存在以下限制：
1. 若批量操作中包含<font  color="red">加入集团企业</font>操作,则调用此接口的员工须有<font  color="red">集团企业管理权限</font>。
2. 批量操作的企业需要已经完成电子签的认证流程。
3. 通过此接口生成的链接在小程序端进行操作时，操作人需要是<font  color="red">所有企业的超管或法人</font>。
4. 批量操作的企业，需要是<a href="https://qian.tencent.com/developers/companyApis/organizations/CreateOrganizationAuthUrl" target="_blank">通过平台方引导认证</a>的企业。
5. <font  color="red">操作链接过期时间默认为生成链接后7天。</font>
     */
    async CreateBatchInitOrganizationUrl(req, cb) {
        return this.request("CreateBatchInitOrganizationUrl", req, cb);
    }
    /**
     * 用来撤销<a href="https://qian.tencent.com/developers/companyApis/users/CreateUserAutoSignEnableUrl" target="_blank">获取个人用户自动签的开通状态</a>生成的开通链接，撤销生成的链接失效。

注:
<ul><li>若个人用户已经用生成的完成自动签署的开通，撤销链接无效不会对开通结果产生影响(此情况接口会报错)。</li>
<li>处方单等特殊场景专用，此接口为白名单功能，使用前请联系对接的客户经理沟通。</li></ul>
     */
    async CancelUserAutoSignEnableUrl(req, cb) {
        return this.request("CancelUserAutoSignEnableUrl", req, cb);
    }
    /**
     * 通过此接口（DescribeBillUsageDetail）查询该企业的套餐消耗详情。
     */
    async DescribeBillUsageDetail(req, cb) {
        return this.request("DescribeBillUsageDetail", req, cb);
    }
    /**
     * 此接口（DescribeIntegrationDepartments）用于查询企业的部门信息列表，支持查询单个部门节点或单个部门节点及一级子节点部门列表。
     */
    async DescribeIntegrationDepartments(req, cb) {
        return this.request("DescribeIntegrationDepartments", req, cb);
    }
    /**
     * 此接口（ModifyIntegrationDepartment）用于更新企业的部门信息，支持更新部门名称、客户系统部门ID和部门序号等信息。
     */
    async ModifyIntegrationDepartment(req, cb) {
        return this.request("ModifyIntegrationDepartment", req, cb);
    }
    /**
     * 此API接口用来查询加入集团的成员企业信息
适用场景：子企业在加入集团后，主企业可能通过此接口获取到所有的子企业列表，方便进行展示和统计
     */
    async DescribeOrganizationGroupOrganizations(req, cb) {
        return this.request("DescribeOrganizationGroupOrganizations", req, cb);
    }
    /**
     * 该接口会生成一个手机号变更的链接，用户可以通过该链接进入电子签系统进行手机号的变更。
该接口支持员工和个人端手机号的变更。
     */
    async CreateUserMobileChangeUrl(req, cb) {
        return this.request("CreateUserMobileChangeUrl", req, cb);
    }
    /**
     * 本接口（DeleteSealPolicies）用于撤销企业员工持有的印章权限
     */
    async DeleteSealPolicies(req, cb) {
        return this.request("DeleteSealPolicies", req, cb);
    }
    /**
     * 本接口（DescribeFileUrls）用于查询文件的下载URL。
适用场景：通过传参合同流程编号，下载对应的合同PDF文件流到本地。


### 2. 确保合同的PDF已经合成后，再调用本接口。

用户创建合同或者提交签署动作后，后台需要1~3秒的时间就进行合同PDF合成或者签名，为了确保您下载的是签署完成的完整合同文件，我们建议采取下面两种方式的一种来<font color="red"><b>确保PDF已经合成完成，然后在调用本接口</b></font>。

**第一种**：请确保您的系统配置了[接收合同完成通知的回调](https://qian.tencent.com/developers/company/callback_types_contracts_sign)功能。一旦所有参与方签署完毕，我们的系统将自动向您提供的回调地址发送完成通知。

**第二种**：通过调用我们的[获取合同信息](https://qian.tencent.com/developers/companyApis/queryFlows/DescribeFlowBriefs)接口来主动检查合同的签署状态。请仅在确认合同状态为“签署完成”后，进行文件的下载操作。

### 3.  链接具有有效期限
<font color="red"><b>生成的链接是有时间限制的，过期后将无法访问</b></font>。您可以在接口返回的信息中查看具体的过期时间。为避免错误，请确保在链接过期之前进行下载操作。
     */
    async DescribeFileUrls(req, cb) {
        return this.request("DescribeFileUrls", req, cb);
    }
    /**
     * 此接口（CreateIntegrationRole）用来创建企业自定义的SaaS角色或集团角色。

适用场景1：创建当前企业的自定义SaaS角色或集团角色，并且创建时不进行权限的设置（PermissionGroups 参数不传），角色中的权限内容可通过控制台编辑角色或通过接口 ModifyIntegrationRole 完成更新。

适用场景2：创建当前企业的自定义SaaS角色或集团角色，并且创建时进行权限的设置（PermissionGroups 参数要传），权限树内容 PermissionGroups 可参考接口 DescribeIntegrationRoles 的输出。此处注意权限树内容可能会更新，需尽量拉取最新的权限树内容，并且权限树内容 PermissionGroups 必须是一颗完整的权限树。

适用场景3：创建集团角色时可同时设置角色管理的子企业列表，可通过设置 SubOrganizationIds 参数达到此效果。

适用场景4：主企业代理子企业操作的场景，需要设置Agent参数，并且ProxyOrganizationId设置为子企业的id即可。

注意事项：SaaS角色和集团角色对应的权限树是不一样的。
     */
    async CreateIntegrationRole(req, cb) {
        return this.request("CreateIntegrationRole", req, cb);
    }
    /**
     * 管理企业扩展服务

- **直接开通的情形：** 若在操作过程中接口没有返回跳转链接，这表明无需进行任何跳转操作。此时，相应的企业拓展服务将会直接被开通或关闭。

- **需要法人或者超管签署开通协议的情形：** 当需要开通以下企业拓展服务时， 系统将返回一个操作链接。贵方需要主动联系并通知企业的超级管理员（超管）或法人。由他们点击该链接，完成服务的开通操作。
  - **OPEN_SERVER_SIGN（企业自动签）**

注意： `在调用此接口以管理企业扩展服务时，操作者（入参中的Operator）必须是企业的超级管理员（超管）或法人`


对应的扩展服务能力可以在控制台的【扩展服务】中找到
![image](https://qcloudimg.tencent-cloud.cn/raw/7eb35d2473d6c29784f3b35617bca9a9.png)
     */
    async ModifyExtendedService(req, cb) {
        return this.request("ModifyExtendedService", req, cb);
    }
    /**
     * 在已启动的签署流程中，可对签署截止日期进行延期操作，主要分为以下两个层面：
1. <b> 合同（流程）层面</b>：仅需提供签署流程ID。此操作将对整个签署流程以及未单独设置签署截止时间的签署人进行延期。
2. <b> 签署人层面</b>  ：需提供流程ID和签署人ID。此操作针对特定签署人进行延期，特别是对于有序合同（流程），签署截止时间不得超过后续签署人的流程截止时间。

此接口存在以下限制：
1. 执行操作的员工须为<font  color="red">发起方企业的超级管理员、法定代表人或签署流程发起人</font>。
2. 延长整个签署流程时，<font  color="red">应至少有一方尚未签署</font>（即签署流程不能处于已全部签署完成、已拒签、已过期、已撤回、拒绝填写、已解除等状态）。
3. 延长整个签署流程时，新的签署截止日期应晚于已设定的签署截止日期和当前日期。
4. 延长签署方截止时间时，<font  color="red">签署方不能处于流程完结或已终止状态</font>（即签署人不能处于已签署、已拒签、已过期、已撤回、拒绝填写、已解除等状态）。
5. 延长签署方截止时间时，新的签署截止日期应晚于当前日期和已设定的截止日期。若为有序合同，还需早于或等于下一签署人的截止日期，且早于签署流程整体的截止日期。
6. <font  color="red">不支持操作合同组合同</font>。

合同（流程）层面 截止时间控制台展示的位置：
![image](https://qcloudimg.tencent-cloud.cn/raw/265b130136bf6e8f01f5880438467dfb.png)
     */
    async ModifyFlowDeadline(req, cb) {
        return this.request("ModifyFlowDeadline", req, cb);
    }
    /**
     * 获取区块链存证证书查看链接/二维码接口

适用场景：企业员工可以通过此接口生成合同区块链存证证书的查看链接/二维码，以供他人扫码打开腾讯电子签小程序查看。

[点击查看区块链存证证书样式](https://qcloudimg.tencent-cloud.cn/raw/47d5e9c2ffa90ad4e27b3cd14095aa08.jpg)

注：
<ul><li>1. 二维码下载链接过期时间为5分钟，请尽快下载保存。二维码/短链的过期时间为<font color="red">7天</font>，超过有效期则不可用。</li>
<li>2. 合同状态需为<font color="red">签署完成</font> 、<font color="red">已解除</font>才能生成证书查看二维码/短链。</li>
<li>3. 调用接口时，需确保接口调用身份拥有此合同的访问数据权限或为合同参与方。</li>
<li>4. 通过扫码或者点击链接，用户无需登录或者鉴权即可查看对应合同的区块链存证证书，请妥善保管好二维码或链接。</li></ul>
     */
    async CreateFlowBlockchainEvidenceUrl(req, cb) {
        return this.request("CreateFlowBlockchainEvidenceUrl", req, cb);
    }
    /**
     * 本接口（CreateBatchOrganizationRegistrationTasks）用于批量创建企业认证链接
该接口为异步提交任务接口,需要跟查询企业批量认证链接(DescribeBatchOrganizationRegistrationUrls) 配合使用.

批量创建链接有以下限制：

1. 单次最多创建10个企业。
2. 一天同一家企业最多创建8000家企业。
3. 同一批创建的企业不能重复 其中包括 企业名称，企业统一信用代码
4. 跳转到小程序的实现，参考微信官方文档（分为全屏、半屏两种方式），如何配置也可以请参考: 跳转电子签小程序配置

注：

1. 此接口需要 <font  color="red"><b>购买单独的实名套餐包</b></font>方可调用，如有需求请联系对接人员评估
  
2. 如果生成的链接是APP链接，跳转到小程序的实现，参考微信官方文档（分为<a href="https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html">全屏</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html">半屏</a>两种方式），如何配置也可以请参考: <a href="https://qian.tencent.com/developers/company/openwxminiprogram">跳转电子签小程序配置</a>
  

**腾讯电子签小程序的AppID 和 原始Id如下:**

| 小程序 | AppID | 原始ID |
| --- | --- | --- |
| 腾讯电子签（正式版） | wxa023b292fd19d41d | gh_da88f6188665 |
| 腾讯电子签Demo | wx371151823f6f3edf | gh_39a5d3de69fa |
     */
    async CreateBatchOrganizationRegistrationTasks(req, cb) {
        return this.request("CreateBatchOrganizationRegistrationTasks", req, cb);
    }
    /**
     * 检测个人用户是否已经实名。

在调用生成C端用户实名链接（[CreateUserVerifyUrl](https://qian.tencent.com/developers/companyApis/users/CreateUserVerifyUrl)）接口之前，客户企业应首先调用本接口判断C端用户是否已经完成实名认证。如果用户已经实名，那么无需再次调用（[CreateUserVerifyUrl](https://qian.tencent.com/developers/companyApis/users/CreateUserVerifyUrl)）生成链接并走实名认证流程。

注意：

- 此接口<font color="red">仅用于确认通过本公司生成[C端用户实名链接（CreateUserVerifyUrl）](https://qian.tencent.com/developers/companyApis/users/CreateUserVerifyUrl)接口注册认证的用户，不包括其他途径（如主动注册认证、在签署合同中注册认证等）在电子签平台上进行的实名认证</font>。

- 调用此接口需要购买单独的实名套餐包。<font color="red">使用前请联系对接的客户经理沟通</font>。
     */
    async DescribeUserVerifyStatus(req, cb) {
        return this.request("DescribeUserVerifyStatus", req, cb);
    }
    /**
     * 此接口（ModifyIntegrationRole）用来更新企业自定义的SaaS角色或集团角色。

适用场景1：更新当前企业的自定义SaaS角色或集团角色，并且更新时不进行角色中权限的更新（PermissionGroups 参数不传）。

适用场景2：更新当前企业的自定义SaaS角色或集团角色，并且更新时进行角色中权限的设置（PermissionGroups 参数要传），权限树内容 PermissionGroups 可参考接口 DescribeIntegrationRoles 的输出。此处注意权限树内容可能会更新，需尽量拉取最新的权限树内容，并且权限树内容 PermissionGroups 必须是一颗完整的权限树。

适用场景3：更新集团角色管理的子企业列表，可通过设置 SubOrganizationIds 参数达到此效果。

适用场景4：主企业代理子企业操作的场景，需要设置Agent参数，并且ProxyOrganizationId设置为子企业的id即可。

注意事项：SaaS角色和集团角色对应的权限树是不一样的。
     */
    async ModifyIntegrationRole(req, cb) {
        return this.request("ModifyIntegrationRole", req, cb);
    }
    /**
     * 此接口用于获取企业批量认证链接-单链接包含多条认证流。

前提条件：已调用 [CreateBatchOrganizationRegistrationTasks创建企业批量认证链接任务接口](https://qian.tencent.com/developers/companyApis/organizations/CreateBatchOrganizationRegistrationTasks) 和[查询企业批量认证链接DescribeBatchOrganizationRegistrationUrls](https://qian.tencent.com/developers/companyApis/organizations/DescribeBatchOrganizationRegistrationUrls) 确保认证任务已经完成。

异步任务的处理完成时间视当前已提交的任务量、任务的复杂程度等因素决定，正常情况下 3~5 秒即可完成，但也可能需要更长的时间。
此链接包含多条认证流程，使用该链接可以批量的对企业进行认证。
     */
    async CreateBatchOrganizationAuthorizationUrl(req, cb) {
        return this.request("CreateBatchOrganizationAuthorizationUrl", req, cb);
    }
    /**
     * 该接口用于获取个人授权执业章给企业的微信二维码，需要个人用户通过微信扫码。

扫描后将跳转到腾讯电子签小程序，进入到授权执业章的流程。

个人用户授权成功后，企业印章管理员需对印章进行审核，审核通过后，即可使用个人授权的执业章进行盖章操作。


**注意**
1. 该二维码**有效期为7天**，过期后将失效，可重新创建。

整体流程入下图

![image](https://qcloudimg.tencent-cloud.cn/raw/21b6b56dbc796c9d6f402d6ce6febb07.png)
     */
    async CreateEmployeeQualificationSealQrCode(req, cb) {
        return this.request("CreateEmployeeQualificationSealQrCode", req, cb);
    }
    /**
     * 创建企业扩展服务授权，当前仅支持授权 “企业自动签” 和 “批量签署” 给企业员工。
该接口作用和电子签控制台 企业设置-扩展服务-企业自动签署和批量签署授权 两个模块功能相同，可通过该接口授权给企业员工。

注：“企业自动签授权”支持集团代子企业操作，请联系运营开通此功能。
     */
    async CreateExtendedServiceAuthInfos(req, cb) {
        return this.request("CreateExtendedServiceAuthInfos", req, cb);
    }
    /**
     * 此接口（CreateOrganizationInfoChangeUrl）用于创建企业信息变更链接，支持创建企业超管变更链接或企业基础信息变更链接，通过入参ChangeType指定。

 需要企业的<font color="red">现有的超级管理员、法人来点击</font>链接执行变动操作。

### 2. 企业基础信息
#### A. 可变动的信息
- **企业名称**
- **法定代表人姓名**（新法人将收到邀请链接）
- **企业地址和所在地**
- **企业超级管理员变更** （此变更将企业超级管理员的职责转移给企业的其他员工）

#### B. 不可变动的信息
- **统一社会信用代码**
- **企业主体类型**

### 3.变更影响

如果企业的名字变更将导致下面的影响：

- **合同**：已存在的合同将保持不变。新发起的合同需使用新的企业名称作为签署方，否则无法签署。
- **印章**：所有现有的机构公章和合同专用章将被删除，并将根据新的企业名称重新生成。法人章、财务专用章和人事专用章将不做处理。
- **证书**：企业证书将重新由CA机构使用新的企业名称生成。
     */
    async CreateOrganizationInfoChangeUrl(req, cb) {
        return this.request("CreateOrganizationInfoChangeUrl", req, cb);
    }
    /**
     * 此接口（CreateConvertTaskApi）用来将word、excel、html、图片、txt类型文件转换为PDF文件。<br />
前提条件：源文件已经通过 <a href="https://qian.tencent.com/developers/companyApis/templatesAndFiles/UploadFiles" target="_blank">文件上传接口</a>完成上传，并得到了源文件的资源Id。<br />
适用场景1：已经上传了一个word文件，希望将该word文件转换成pdf文件后发起合同
适用场景2：已经上传了一个jpg图片文件，希望将该图片文件转换成pdf文件后发起合同<br />
转换文件是一个耗时操作，若想查看转换任务是否完成，可以通过<a href="https://qian.tencent.com/developers/companyApis/templatesAndFiles/GetTaskResultApi" target="_blank">查询转换任务状态</a>接口获取任务状态。<br />
注:
1. `支持的文件类型有doc、docx、xls、xlsx、html、jpg、jpeg、png、bmp、txt`
2. `可通过发起合同时设置预览来检查转换文件是否达到预期效果`
     */
    async CreateConvertTaskApi(req, cb) {
        return this.request("CreateConvertTaskApi", req, cb);
    }
    /**
     * 本接口（CreateOrganizationAuthUrl）的主要功能是生成合作企业的认证链接。

在生成链接的过程中，可以提供一部分已知信息，以便为对方进行认证流程提供便利。

![image](https://qcloudimg.tencent-cloud.cn/raw/7ec91b79a0a4860e77c9ff9f4a5f13ad/channel_SyncProxyOrganization2.png)


- **企业统一社会信用代码**: 对应上图中的**1**
- **企业名称**: 对应上图中的**2**
- **企业法定代表人的名字**:对应上图中的**3**
- **企业详细住所**:对应上图中的**4**




<b>注</b>：此接口需要 <font  color="red"><b>购买单独的实名套餐包</b></font>方可调用，如有需求请联系对接人员评估
     */
    async CreateOrganizationAuthUrl(req, cb) {
        return this.request("CreateOrganizationAuthUrl", req, cb);
    }
    /**
     * 此接口（UploadFiles）文件上传。<br/>

适用场景：用于合同，印章的文件上传。文件上传以后，
如果是PDF格式文件可配合<a href="https://qian.tencent.com/developers/companyApis/startFlows/CreateFlowByFiles" target="_blank">用PDF文件创建签署流程</a>接口进行合同流程的发起
如果是其他类型可以配合<a href="https://qian.tencent.com/developers/companyApis/templatesAndFiles/CreateConvertTaskApi" target="_blank">创建文件转换任务</a>接口转换成PDF文件

注:
1. 图片类型(png/jpg/jpeg)限制大小为5M以下, PDF/word/excel等其他格式限制大小为60M以下
2. 调用此接口时需要设置单独的Domain请求域名，<font color="red">联调开发环境为: file.test.ess.tencent.cn，正式环境需要设置为:file.ess.tencent.cn</font>，代码示例
```
HttpProfile httpProfile = new HttpProfile();
httpProfile.setEndpoint("file.test.ess.tencent.cn");
```

<font color="red">相关视频指引</font> <br>
1. <a href="https://dyn.ess.tencent.cn/guide/apivideo/ess_uploadfiles.mp4" target="_blank">上传用于合同发起的PDF文件代码编写示例</a><br>
     */
    async UploadFiles(req, cb) {
        return this.request("UploadFiles", req, cb);
    }
    /**
     * 使用此接口，可创建子企业激活记录。<font color="red">集团企业管理员</font>可以针对尚未激活的成员企业进行激活操作。


这个操作与页面端激活成员企业操作类似
![image](https://qcloudimg.tencent-cloud.cn/raw/c4e76fbac92e4ce451a03601c964793b.png)

注意：
1. 此接口只能用于激活，**不能用于续期**。
2. 在激活子企业时，**请确保子企业的许可证数量充足**。
     */
    async CreateIntegrationSubOrganizationActiveRecord(req, cb) {
        return this.request("CreateIntegrationSubOrganizationActiveRecord", req, cb);
    }
    /**
     * 您可以通过合同流程ID查询相关的<font color="red"><b>填写控件</b></font>信息及其内容。这包括控件的归属方、控件的填写状态（是否已填写）以及具体的填写内容。

无论是发起方还是签署方填写的控件，均包含在查询结果中。

![image](https://qcloudimg.tencent-cloud.cn/raw/08f6ea50d3ae88b51c280c2b17c2a126.png)


### 2.  那些控件会出现在结果里边？
**A.不返回的控件类型：**
- 动态表格
- 附件控件
- 水印控件

**B.返回的控件类型：**
- 单行文本
- 多行文本
- 勾选框控件
- 数字控件
- 日期控件
- 图片控件（图片下载地址）
- 邮箱控件
- 地址控件
- 学历控件
- 性别控件
- 省市区控件
     */
    async DescribeFlowComponents(req, cb) {
        return this.request("DescribeFlowComponents", req, cb);
    }
    /**
     * 用来设置本企业嵌入式页面个性化主题配置（例如是否展示电子签logo、定义主题色等），设置后获取的web签署界面都会使用此配置进行展示。

如果多次调用，会以最后一次的配置为准
     */
    async CreateWebThemeConfig(req, cb) {
        return this.request("CreateWebThemeConfig", req, cb);
    }
    /**
     * 此接口（CreateDynamicFlowApprover）接口主要用于补充动态签署方2.0合同的签署方信息，包括但不限于名字、手机号和签署区域等信息。


**功能开通**
动态签署方2.0功能的使用需要先<font color="red">联系产品经理开通模块化计费功能</font>，然后到控制台中打开此功能。详细的使用说明请参考<a href="https://qian.tencent.com/developers/company/dynamic_signer_v2" target="_blank">动态签署方2.0</a>文档。

**使用条件**
- 在发起合同时，必须将OpenDynamicSignFlow参数设置为true，以确保合同以动态签署方2.0的方式处理，否则默认处理为普通合同。
- 此接口只能在合同处于非终态时调用。一旦合同进入终态（例如：过期、拒签或撤销），将无法通过此接口添加新的签署方。


动态签署方2.0合同<font color="red">不会自动结束（整个合同变为签署完成）</font>，需要通过调用<a href="https://qian.tencent.com/developers/companyApis/operateFlows/ArchiveDynamicFlow/" target="_blank">结束动态签署合同</a>来手动结束签署流程。整体的流程如下图

![image](https://qcloudimg.tencent-cloud.cn/raw/75d323c66e44b05bbc8e949c18664455.png)
     */
    async CreateDynamicFlowApprover(req, cb) {
        return this.request("CreateDynamicFlowApprover", req, cb);
    }
    /**
     * 此接口（CreateIntegrationEmployees）用于创建企业员工。创建的员工初始化为未实名，如下图所示。

![image](https://qcloudimg.tencent-cloud.cn/raw/2bdcc0d91ac3146b5e8c28811a78ffe9.png)

支持以下场景
<table>
<tbody>
<tr>
<td>生成端</td>
<td >入参</td>
<td>提醒方式</td>
</tr>
<tr>
<td>普通saas员工</td>
<td>将Employees中的DisplayName设置员工的名字，Mobile设置成员工的手机号</td>
<td>发送短信通知员工（短信中带有认证加入企业的链接）  </td>
</tr>
<tr>
<td>企微员工</td>
<td>将Employees 中的WeworkOpenId字段设置为企微员工明文的openid，需<font color="red">确保该企微员工在应用的可见范围内</font></td>
<td>企微内部实名消息</td>
</tr>
<tr>
<td>H5端 saas员工</td>
<td>传递 InvitationNotifyType = H5，将Employees中的DisplayName设置员工的名字，Mobile设置成员工的手机号，<font color="red">此场景不支持企微</font></td>
<td>生成认证加入企业的H5链接，贵方可以通过自己的渠道触达到此员工</td>
</tr>
</tbody>
</table>
注意：

-  <b> 新增员工的手机号、OpenId不能与已加入员工重复</b>， 不管已加入员工的手机号、OpenId是否已经实名
- <b>若通过手机号发现员工已经创建且信息一致（名字，openId等），则不会重复创建，但会发送短信或者生成链接提醒员工实名。</b>
- jumpUrl 仅支持H5的邀请方式，回跳的url，使用前请联系对接的客户经理沟通，进行域名的配置。



短信的样式

![image](https://qcloudimg.tencent-cloud.cn/raw/b6ad1b79e0adaaa41d282456c72a1ee6.png)
     */
    async CreateIntegrationEmployees(req, cb) {
        return this.request("CreateIntegrationEmployees", req, cb);
    }
    /**
     * 批量清理未认证的企业认证流程。

此接口用来清除企业方认证信息填写错误，批量清理认证中的认证流信息。
为接口[创建企业批量认证链接](https://qian.tencent.com/developers/companyApis/organizations/CreateBatchOrganizationRegistrationTasks) 和[查询企业批量认证链接](https://qian.tencent.com/developers/companyApis/organizations/DescribeBatchOrganizationRegistrationUrls) 接口的扩展接口。即在批量认证过程中，当发起认证企业发现超管信息错误的时候，可以将当前超管下的所有认证流企业清除。

注意：
**这个接口的操作人必须跟生成批量认证链接接口的操作人一致，才可以调用，否则会返回当前操作人没有认证中的企业认证流**
     */
    async DeleteOrganizationAuthorizations(req, cb) {
        return this.request("DeleteOrganizationAuthorizations", req, cb);
    }
    /**
     * 该接口用于发起合同后，生成个人/企业用户的批量待办链接。
**注意：**
1. 该接口可生成签署人的批量、合同组签署/查看链接 。
2. 该签署链接**有效期为30分钟**，过期后将失效，如需签署可重新创建批量签署链接 。
3. 该接口返回的签署链接适用于APP集成的场景，支持APP打开或浏览器直接打开，**不支持微信小程序嵌入**。
跳转到小程序的实现，参考微信官方文档(分为<a href="https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html">全屏</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html">半屏</a>两种方式)，如何配置也可以请参考: <a href="https://qian.tencent.com/developers/company/openwxminiprogram">跳转电子签小程序配置</a>。
4. 因h5涉及人脸身份认证能力基于慧眼人脸核身，对Android和iOS系统均有一定要求， 因此<font color='red'>App嵌入H5签署合同需要按照慧眼提供的<a href="https://cloud.tencent.com/document/product/1007/61076">慧眼人脸核身兼容性文档</a>做兼容性适配</font>。
     */
    async CreateBatchQuickSignUrl(req, cb) {
        return this.request("CreateBatchQuickSignUrl", req, cb);
    }
    /**
     * 新增/删除企业应用集成中的回调配置。
新增回调配置只会增加不存在的CallbackUrl；删除操作将针对找到的相同CallbackUrl的配置进行删除。
请确保回调地址能够接收并处理 HTTP POST 请求，并返回状态码 200 以表示处理正常。
更多回调相关的说明参考文档[回调通知能力](https://qian.tencent.com/developers/company/callback_types_v2)
     */
    async ModifyApplicationCallbackInfo(req, cb) {
        return this.request("ModifyApplicationCallbackInfo", req, cb);
    }
    /**
     * 用于撤销合同流程<br/>
适用场景：如果某个合同流程当前至少还有一方没有签署，则可通过该接口取消该合同流程。常用于合同发错、内容填错，需要及时撤销的场景。<br/>
- **可撤回合同状态**：未全部签署完成
- **不撤回合同状态**：已全部签署完成、已拒签、已过期、已撤回、拒绝填写、已解除等合同状态。

注:
1. 如果合同流程中的参与方均已签署完毕，则无法通过该接口撤销合同，签署完毕的合同需要双方走解除流程将合同作废，可以参考<a href="https://qian.tencent.com/developers/companyApis/operateFlows/CreateReleaseFlow" target="_blank">发起解除合同流程</a>接口。

2. 有对应合同撤销权限的人:  <font color='red'>合同的发起人（并已经授予撤销权限）或者发起人所在企业的超管、法人</font>
![image](https://qcloudimg.tencent-cloud.cn/raw/1f9f07fea6a70766cd286e0d58682ee2.png)

3. <font color='red'>只有撤销没有参与方签署过或只有自动签署签署过的合同，才会返还合同额度。</font>

4.  撤销后可以看合同PDF内容的人员： 发起方的超管， 发起方自己，发起方撤销合同的操作人员，已经签署合同、已经填写合同、邀请填写已经补充信息的参与人员， 其他参与人员看不到合同的内容。
     */
    async CancelFlow(req, cb) {
        return this.request("CancelFlow", req, cb);
    }
    /**
     * 此接口（UnbindEmployeeUserIdWithClientOpenId）用于解除电子签系统员工UserId与客户系统员工OpenId之间的绑定关系。

注：`在调用此接口时，需确保OpenId已通过调用`<a href="https://qian.tencent.com/developers/companyApis/staffs/BindEmployeeUserIdWithClientOpenId" target="_blank">BindEmployeeUserIdWithClientOpenId</a>`接口与电子签系统的UserId绑定过。若OpenId未经过绑定，则无法使用此接口进行解绑操作。`
     */
    async UnbindEmployeeUserIdWithClientOpenId(req, cb) {
        return this.request("UnbindEmployeeUserIdWithClientOpenId", req, cb);
    }
    /**
     * 指定需要批量撤回的签署流程Id，以获取批量撤销链接。
客户需指定要撤回的签署流程Id，最多可指定100个，超过100则不处理。
接口调用成功后，将返回批量撤回合同的链接。通过点击链接，可跳转至电子签小程序完成批量撤回操作。

- **可撤回合同状态**：未全部签署完成
- **不撤回合同状态**：已全部签署完成、已拒签、已过期、已撤回、拒绝填写、已解除等合同状态。

批量撤销结果可以通过接口返回的TaskId关联[批量撤销任务结果回调](https://qian.tencent.com/developers/company/callback_types_contracts_sign#%E4%B9%9D-%E6%89%B9%E9%87%8F%E6%92%A4%E9%94%80%E7%BB%93%E6%9E%9C%E5%9B%9E%E8%B0%83)或通过接口[查询批量撤销签署流程任务结果](https://qian.tencent.com/developers/companyApis/operateFlows/CreateBatchCancelFlowUrl)


注：
1. 如果合同流程中的参与方均已签署完毕，则无法通过该接口撤销合同，签署完毕的合同需要双方走解除流程将合同作废，可以参考<a href="https://qian.tencent.com/developers/companyApis/operateFlows/CreateReleaseFlow" target="_blank">发起解除合同流程</a>接口。

2. 有对应合同撤销权限的人:  <font color='red'>合同的发起人（并已经授予撤销权限）或者发起人所在企业的超管、法人</font>
![image](https://qcloudimg.tencent-cloud.cn/raw/1f9f07fea6a70766cd286e0d58682ee2.png)

3. <font color='red'>只有撤销没有参与方签署过或只有自动签署签署过的合同，才会返还合同额度。</font>

4. 撤销后可以看合同PDF内容的人员： 发起方的超管， 发起方自己，发起方撤销合同的操作人员，已经签署合同、已经填写合同、邀请填写已经补充信息的参与人员， 其他参与人员看不到合同的内容。
     */
    async CreateBatchCancelFlowUrl(req, cb) {
        return this.request("CreateBatchCancelFlowUrl", req, cb);
    }
    /**
     * 此接口（DeleteIntegrationDepartment）用于删除企业的部门信息。
     */
    async DeleteIntegrationDepartment(req, cb) {
        return this.request("DeleteIntegrationDepartment", req, cb);
    }
    /**
     * **适用场景 ：**

当通过模板或文件发起合同时， 签署人不制定， 等合同发起后再指定 可以用下面2种方案

<b><font color="red">1. 或签合同</font>: 若未指定企业签署人信息（只指定企业的名字），合同变成或签合同（个人签署方不支持或签合同）</b>。需调用此接口补充或添加签署人。或签签署人在控制台上的展示样式如下（会带有<b>或签</b>标识）：

![image](https://qcloudimg.tencent-cloud.cn/raw/b2715f0236faee807cfc0521f93cf01b.png)

<b><font color="red">2. 动态签署人合同</font>: 若未指定具体签署人的信息，则合同变成动态签署人合同</b>。需调用此接口补充或添加签署人。可以参考文档    <a href="https://qian.tencent.com/developers/company/dynamic_signer/" target="_blank">动态签署人合同</a>   。动态签署人在控制台上的展示样式如下：

![image](https://qcloudimg.tencent-cloud.cn/raw/2729477978e020c3bbb4d2e767bb78eb.png)

实际签署人需要通过[获取跳转至腾讯电子签小程序的签署链接](https://qian.tencent.com/developers/companyApis/startFlows/CreateSchemeUrl/)生成的链接进入小程序，领取合同并签署。同一签署环节可补充多个员工作为或签署人，最终实际签署人取决于谁先领取合同完成签署。

**接口使用说明**：

1.本接口现已支持批量补充签署人

2.当<a href="https://qian.tencent.com/developers/companyApis/dataTypes/#fillapproverinfo/" target="_blank">补充签署人结构体</a>中指定需要补充的FlowId时，可以对指定合同补充签署人；可以指定多个相同发起方的不同合同在完成批量补充

3.当<a href="https://qian.tencent.com/developers/companyApis/operateFlows/CreateFlowApprovers/" target="_blank">补充签署人接口入参</a>中指定需要补充的FlowId时，是对指定的合同补充多个指定的签署人

4.如果同时指定了<a href="https://qian.tencent.com/developers/companyApis/dataTypes/#fillapproverinfo/" target="_blank">补充签署人结构体</a>中的FlowId和<a href="https://qian.tencent.com/developers/companyApis/operateFlows/CreateFlowApprovers/" target="_blank">补充签署人接口入参</a>中的FlowId，仅使用<a href="https://qian.tencent.com/developers/companyApis/dataTypes/#fillapproverinfo/" target="_blank">补充签署人结构体</a>中的FlowId作为补充的合同

5.如果部分指定了<a href="https://qian.tencent.com/developers/companyApis/dataTypes/#fillapproverinfo/" target="_blank">补充签署人结构体</a>中的FlowId，又指定了<a href="https://qian.tencent.com/developers/companyApis/operateFlows/CreateFlowApprovers/" target="_blank">补充签署人接口入参</a>中的FlowId；那么<a href="https://qian.tencent.com/developers/companyApis/dataTypes/#fillapproverinfo/" target="_blank">补充签署人结构体</a>存在指定的FlowId，则使用<a href="https://qian.tencent.com/developers/companyApis/dataTypes/#fillapproverinfo/" target="_blank">补充签署人结构体</a>中的FlowId，不存在则使用<a href="https://qian.tencent.com/developers/companyApis/operateFlows/CreateFlowApprovers/" target="_blank">补充签署人接口入参</a>中的FlowId作为补充的合同


6.如果同时未指定了<a href="https://qian.tencent.com/developers/companyApis/dataTypes/#fillapproverinfo/" target="_blank">补充签署人结构体</a>中的FlowId和<a href="https://qian.tencent.com/developers/companyApis/operateFlows/CreateFlowApprovers/" target="_blank">补充签署人接口入参</a>中的FlowId，则传参错误。

7.新加入的签署方<font color="red">平台不会发送短信</font>通知。请您生成相应的链接，并将该链接发送给签署方以便完成签署过程。

**限制条件**：

1.本企业（发起方企业）企业微信签署人仅支持通过企业微信UserId或姓名+手机号进行补充。

2.本企业（发起方企业）非企业微信签署人仅支持通过姓名+手机号进行补充。

3.他方企业仅支持通过姓名+手机号进行补充。

4.个人签署人支持通过姓名+手机号进行补充（若<b>个人用户已完成实名</b>，动态签署人合同也可以可通过姓名+证件号码进行补充）


**整体流程如下图：**

![image](https://qcloudimg.tencent-cloud.cn/raw/29a0fba0ceebf9227849459947384862.png)
     */
    async CreateFlowApprovers(req, cb) {
        return this.request("CreateFlowApprovers", req, cb);
    }
    /**
     * 创建发起流程Web页面，通过该接口可以获取发起流程的可嵌入web页面的URL（此web页面可以通过iframe方式嵌入到贵方系统的网页中）。在页面上完成签署控件等信息的编辑与确认后，可快速发起流程。

 <br/>注意：调用接口后，<font color="red">流程不会立即发起，需在嵌入页面上点击【发起合同】按钮来发起流程</font>。

嵌入页面长相如下:
![image](https://qcloudimg.tencent-cloud.cn/raw/b2ae013fb4d747891dd3815bbe897208.png)
     */
    async CreatePrepareFlow(req, cb) {
        return this.request("CreatePrepareFlow", req, cb);
    }
    /**
     * 通过此接口（DescribeBillUsage）查询该企业的套餐套餐使用情况。
     */
    async DescribeBillUsage(req, cb) {
        return this.request("DescribeBillUsage", req, cb);
    }
    /**
     * 此接口用于查询合同流程的详情信息，支持查询多个（数量不能超过100）。

适用场景：可用于主动查询某个合同详情信息。
     */
    async DescribeFlowInfo(req, cb) {
        return this.request("DescribeFlowInfo", req, cb);
    }
    /**
     * 本接口（CreateSealPolicy）用于对企业员工进行印章授权
     */
    async CreateSealPolicy(req, cb) {
        return this.request("CreateSealPolicy", req, cb);
    }
    /**
     * 通过[获取批量撤销签署流程腾讯电子签小程序链接](https://qian.tencent.com/developers/companyApis/operateFlows/CreateBatchCancelFlowUrl)发起批量撤销任务后，可通过此接口查询批量撤销任务的结果。
     */
    async DescribeCancelFlowsTask(req, cb) {
        return this.request("DescribeCancelFlowsTask", req, cb);
    }
    /**
     * 仅且仅能查询企业本身在电子签的认证状态
     */
    async DescribeOrganizationVerifyStatus(req, cb) {
        return this.request("DescribeOrganizationVerifyStatus", req, cb);
    }
    /**
     * 生成集团加入链接，分享至子企业超管或者法人，子企业管理员可通过链接加入集团。
注意:调用当前接口的企业 必须为集团企业。如何成为集团企业可以参考下面的文档[集团操作文档](https://qian.tencent.com/document/86707)
     */
    async CreateOrganizationGroupInvitationLink(req, cb) {
        return this.request("CreateOrganizationGroupInvitationLink", req, cb);
    }
    /**
     * 获取出证报告任务执行结果，返回报告 URL。



注意：
<ul><li>使用此功能`需搭配出证套餐` ，使用前请联系对接的客户经理沟通。</li>
<li>需调用创建并返回出证报告接口<a href="https://qian.tencent.com/developers/companyApis/certificate/CreateFlowEvidenceReport" target="_blank">提交申请出证报告任务</a>获取报告编号后调用当前接口获取报告链接。</li></ul>

<svg id="SvgjsSvg1006" width="262" height="229" xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs"><defs id="SvgjsDefs1007"><pattern patternUnits="userSpaceOnUse" id="pattern_mark_0" width="300" height="300"><text x="150" y="100" fill="rgba(229,229,229,0.8)" font-size="18" transform="rotate(-45, 150, 150)" style="dominant-baseline: middle; text-anchor: middle;"></text></pattern><pattern patternUnits="userSpaceOnUse" id="pattern_mark_1" width="300" height="300"><text x="150" y="200" fill="rgba(229,229,229,0.8)" font-size="18" transform="rotate(-45, 150, 150)" style="dominant-baseline: middle; text-anchor: middle;"></text></pattern><marker id="SvgjsMarker1021" markerWidth="12" markerHeight="8" refX="9" refY="4" viewBox="0 0 12 8" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1022" d="M0,0 L12,4 L0,8 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path></marker></defs><rect id="svgbackgroundid" width="262" height="229" fill="transparent"></rect><rect id="SvgjsRect1009" width="262" height="229" fill="url(#pattern_mark_0)"></rect><rect id="SvgjsRect1010" width="262" height="229" fill="url(#pattern_mark_1)"></rect><g id="SvgjsG1011" transform="translate(31.75,25)"><path id="SvgjsPath1012" d="M 0 0L 198 0L 198 59L 0 59Z" stroke="rgba(86,146,48,1)" stroke-width="1" fill-opacity="1" fill="#e7ebed"></path><g id="SvgjsG1013"><text id="SvgjsText1014" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="178px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="10.375" transform="rotate(0)"><tspan id="SvgjsTspan1015" dy="16" x="99"><tspan id="SvgjsTspan1016" style="text-decoration:;fill: rgb(28, 30, 33);">CreateFlowEvidenceReport</tspan></tspan><tspan id="SvgjsTspan1017" dy="16" x="99"><tspan id="SvgjsTspan1018" style="text-decoration:;fill: rgb(51, 51, 51);">提交申请出证报告任务</tspan></tspan></text></g></g><g id="SvgjsG1019"><path id="SvgjsPath1020" d="M130.75 84.5L130.75 114.5L130.75 114.5L130.75 143.2" stroke="#323232" stroke-width="1" fill="none" marker-end="url(#SvgjsMarker1021)"></path></g><g id="SvgjsG1023" transform="translate(25,145)"><path id="SvgjsPath1024" d="M 0 0L 211.5 0L 211.5 59L 0 59Z" stroke="rgba(86,146,48,1)" stroke-width="1" fill-opacity="1" fill="#e7ebed"></path><g id="SvgjsG1025"><text id="SvgjsText1026" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="192px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="10.375" transform="rotate(0)"><tspan id="SvgjsTspan1027" dy="16" x="106"><tspan id="SvgjsTspan1028" style="text-decoration:;fill: rgb(28, 30, 33);">DescribeFlowEvidenceReport</tspan></tspan><tspan id="SvgjsTspan1029" dy="16" x="106"><tspan id="SvgjsTspan1030" style="text-decoration:;fill: rgb(51, 51, 51);">获取出证报告任务执行结果</tspan></tspan></text></g></g></svg>
     */
    async DescribeFlowEvidenceReport(req, cb) {
        return this.request("DescribeFlowEvidenceReport", req, cb);
    }
    /**
     * 此接口（GetTaskResultApi）用来查询转换任务的状态。如需发起转换任务，请使用<a href="https://qian.tencent.com/developers/companyApis/templatesAndFiles/CreateConvertTaskApi" target="_blank">创建文件转换任务接口</a>进行资源文件的转换操作<br />
前提条件：已调用 <a href="https://qian.tencent.com/developers/companyApis/templatesAndFiles/CreateConvertTaskApi" target="_blank">创建文件转换任务接口</a>进行文件转换，并得到了返回的转换任务Id。<br />

适用场景：已创建一个文件转换任务，想查询该文件转换任务的状态，或获取转换后的文件资源Id。<br />
注：
1. `大文件转换所需的时间可能会比较长`
2.  `本接口返回的文件资源ID就是PDF资源ID，可以直接用于【用PDF文件创建签署流程】接口发起合同。`
     */
    async GetTaskResultApi(req, cb) {
        return this.request("GetTaskResultApi", req, cb);
    }
    /**
     * 该接口用于结束动态签署方2.0的合同流程。


**功能开通**
- 动态签署方2.0功能的使用需要先<font color="red">联系产品经理开通模块化计费功能</font>，然后到控制台中打开此功能。详细的使用说明请参考<a href="https://qian.tencent.com/developers/company/dynamic_signer_v2" target="_blank">动态签署方2.0</a>文档。

**使用条件**
- 此接口只能在<font color="red">合同处于非终态且<b>所有的签署方都已经完成签署</b></font>。一旦合同进入终态（例如：过期、拒签、撤销或者调用过此接口成功过），将无法通过此接口结束合同流程。

**整体流程**
![image](https://qcloudimg.tencent-cloud.cn/raw/75d323c66e44b05bbc8e949c18664455.png)
     */
    async ArchiveDynamicFlow(req, cb) {
        return this.request("ArchiveDynamicFlow", req, cb);
    }
    /**
     * 此接口（UpdateIntegrationEmployees）<font color="red"><b>用于修改未实名企业员工信息(姓名，手机号，邮件、部门)</b></font>。
如果企业员工已经实名， 姓名，手机号，邮件等需要企业员工到小程序或者控制台自己修改， 部门则需要超管到控制台分配

修改手机号的时候,支持以下场景进行提醒通知
<table>
<tbody>
<tr>
<td>生成端</td>
<td >入参</td>
<td>提醒方式</td>
</tr>
<tr>
<td>普通saas员工</td>
<td>将Employees中的DisplayName设置员工的名字，Mobile设置成员工的手机号</td>
<td>发送短信通知员工（短信中带有认证加入企业的链接）</td>
</tr>
<tr>
<td>企微员工</td>
<td>将Employees 中的WeworkOpenId字段设置为企微员工明文的openid，需<font color="red">确保该企微员工在应用的可见范围内</font></td>
<td>企微内部实名消息</td>
</tr>
<tr>
<td>H5端 saas员工</td>
<td>传递 InvitationNotifyType = H5，将Employees中的DisplayName设置员工的名字，Mobile设置成员工的手机号，<font color="red">此场景不支持企微</font></td>
<td>生成认证加入企业的H5链接，贵方可以通过自己的渠道触达到此员工</td>
</tr>
</tbody>
</table>
注意：

- <b>若通过手机号发现员工已经创建，则不会重复创建，但会发送短信或者生成链接提醒员工实名。</b>
- jumpUrl 仅支持H5的邀请方式，回跳的url，使用前请联系对接的客户经理沟通，进行域名的配置。
     */
    async UpdateIntegrationEmployees(req, cb) {
        return this.request("UpdateIntegrationEmployees", req, cb);
    }
    /**
     * 使用此接口，您可以创建企业批量签署链接，员工只需点击链接即可跳转至控制台进行批量签署。<br/>

注：
<ul>
<li>员工必须需作为批量签署合同的签署方，或者是或签合同的候选人之一。</li>
<li><b>本方企业签署链接</b>：如有UserId，应以UserId为主要标识；如果没有UserId，则必须填写Name和Mobile信息。</li>
<li><b>他方企业签署链接</b>：传RecipientIds，且必须是合同发起方调用此接口。打开链接后需要他方签署人登录电子签系统。（<b>如果签署人没有加入对方企业则会引导加入；如果对方企业还没有注册认证，会引导企业注册和认证</b>）</li>
<li>只支持待签署、待填写状态的合同生成签署链接。</li>
</ul>

签署的嵌入页面长相如下：
![image](https://qcloudimg.tencent-cloud.cn/raw/a4754bc835a3f837ddec1e28b02ed9c0.png)
     */
    async CreateOrganizationBatchSignUrl(req, cb) {
        return this.request("CreateOrganizationBatchSignUrl", req, cb);
    }
    /**
     * 通过AuthCode查询个人用户是否实名


注意:
<ul>
<li>此接口为合作引流场景使用，使用<b>有白名单限制</b>，使用前请联系对接的客户经理沟通。</li>
<li><b>AuthCode 只能使用一次</b>，查询一次再次查询会返回错误</li>
</ul>
     */
    async DescribeThirdPartyAuthCode(req, cb) {
        return this.request("DescribeThirdPartyAuthCode", req, cb);
    }
    /**
     * 查询企业印章列表。

注：
1. 此操作要求操作者具备<b>印章查询权限</b>（若调用者尚无此权限，请联系超级管理员前往Web控制台【组织管理】->【角色管理】添加相应权限）。
     */
    async DescribeOrganizationSeals(req, cb) {
        return this.request("DescribeOrganizationSeals", req, cb);
    }
    /**
     * 获取跳转至腾讯电子签小程序的签署链接

适用场景：如果需要签署人在自己的APP、小程序、H5应用中签署，可以通过此接口获取跳转腾讯电子签小程序的签署跳转链接。

跳转到小程序的实现，参考微信官方文档（分为<a href="https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html">全屏</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html">半屏</a>两种方式），如何配置也可以请参考: <a href="https://qian.tencent.com/developers/company/openwxminiprogram">跳转电子签小程序配置</a>

注：
<ul><li>1. 如果签署人是在PC端扫码签署，可以通过生成跳转链接自主转换成二维码，让签署人在PC端扫码签署</li>
<li>2. 签署链接的有效期为<font color="red">90天</font>，超过有效期链接不可用</li>
<li>3. 如果需跳转详情页（即PathType值为1）进行填写或签署合同，需指定签署方信息:姓名、手机号码、企业名称等，才能生成正确的跳转链接</li>
<li>4. <font color="red">生成的链路后面不能再增加参数</font>（会出现覆盖链接中已有参数导致错误）</li></ul>

其中小程序的原始Id如下，或者查看小程序信息自助获取。

| 小程序 | AppID | 原始ID |
| ------------ | ------------ | ------------ |
| 腾讯电子签（正式版） | wxa023b292fd19d41d | gh_da88f6188665 |
| 腾讯电子签Demo | wx371151823f6f3edf | gh_39a5d3de69fa |
     */
    async CreateSchemeUrl(req, cb) {
        return this.request("CreateSchemeUrl", req, cb);
    }
    /**
     * 删除企业扩展服务授权，当前仅支持 “企业自动签” 和“批量签署”  的取消授权。
该接口作用和电子签控制台 企业设置-扩展服务-企业自动签署和批量签署授权 两个模块功能相同，可通过该接口取消企业员工授权。

注：支持集团代子企业操作，请联系运营开通此功能。
     */
    async DeleteExtendedServiceAuthInfos(req, cb) {
        return this.request("DeleteExtendedServiceAuthInfos", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248997, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.essbasic = void 0;
const v20210526_1 = require("./v20210526");
const v20201222_1 = require("./v20201222");
exports.essbasic = {
    v20210526: v20210526_1.v20210526,
    v20201222: v20201222_1.v20201222,
};

}, function(modId) { var map = {"./v20210526":1738984248998,"./v20201222":1738984249001}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248998, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210526 = void 0;
const Models = require("./essbasic_models");
const essbasic_client_1 = require("./essbasic_client");
exports.v20210526 = {
    Client: essbasic_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./essbasic_models":1738984248999,"./essbasic_client":1738984249000}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984248999, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249000, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * essbasic client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("essbasic.tencentcloudapi.com", "2021-05-26", clientConfig);
    }
    /**
     * 提交企业流程审批结果
**当前存在两种审核操作：**
<ul>
<li>签署审核
<ul>
<li>在通过接口<ul><li>CreateFlowsByTemplates</li><li>ChannelCreateFlowByFiles</li><li>ChannelCreateFlowGroupByTemplates</li><li>ChannelCreateFlowGroupByFiles</li><li>ChannelCreatePrepareFlow</li></ul> 发起签署流程时，通过指定NeedSignReview为true，则可以调用此接口，并指定operate=SignReview，以提交企业内部签署审批结果</li>
<li>在通过接口<ul><li>CreateFlowsByTemplates</li><li>ChannelCreateFlowByFiles</li><li>ChannelCreateFlowGroupByTemplates</li><li>ChannelCreateFlowGroupByFiles</li></ul>发起签署流程时，通过指定签署人ApproverNeedSignReview为true，则可以调用此接口，并指定operate=SignReview，并指定RecipientId，以提交企业内部签署审批结果</li>
</ul>
</li>
<li>发起审核
 <ul>
<li>通过接口ChannelCreatePrepareFlow指定发起后需要审核，那么可以调用此接口，并指定operate=CreateReview，以提交企业内部审批结果。可以多次提交审批结果，但一旦审批通过，后续提交的结果将无效
</li>
</ul>
</li>
</ul>
     */
    async ChannelCreateFlowSignReview(req, cb) {
        return this.request("ChannelCreateFlowSignReview", req, cb);
    }
    /**
     * 此接口（ChannelModifyRole）用来更新企业自定义角色。

适用场景1：更新当前企业的自定义角色的名称或描述等其他信息，更新时不进行权限的设置（PermissionGroups 参数不传）。

适用场景2：更新当前企业的自定义角色的权限信息，更新时进行权限的设置（PermissionGroups 参数要传），权限树内容 PermissionGroups 可参考[查询角色列表接口](https://qian.tencent.com/developers/partnerApis/accounts/ChannelDescribeRoles) 的输出。此处注意权限树内容可能会更新，需尽量拉取最新的权限树内容，并且权限树内容 PermissionGroups 必须是一颗完整的权限树。
     */
    async ChannelModifyRole(req, cb) {
        return this.request("ChannelModifyRole", req, cb);
    }
    /**
     * 1. 在使用[通过多文件创建合同组签署流程](https://qian.tencent.com/developers/partnerApis/startFlows/ChannelCreateFlowGroupByFiles)或[通过多模板创建合同组签署流程](https://qian.tencent.com/developers/partnerApis/startFlows/ChannelCreateFlowGroupByTemplates)创建合同组签署流程时，若指定了参数以下参数为true,则可以调用此接口提交企业内部签署审批结果,即使是自动签署也需要进行审核通过才会进行签署。
  - [FlowInfo.NeedSignReview](https://qian.tencent.com/developers/partnerApis/dataTypes/#flowinfo)
  - [FlowFileInfo.NeedSignReview](https://qian.tencent.com/developers/partnerApis/dataTypes/#flowfileinfo)
  - [FlowApproverInfo.ApproverNeedSignReview](https://qian.tencent.com/developers/partnerApis/dataTypes/#flowapproverinfo)

2. 同一合同组，同一签署人可以多次提交签署审批结果，签署时的最后一个“审批结果”有效。
     */
    async CreateFlowGroupSignReview(req, cb) {
        return this.request("CreateFlowGroupSignReview", req, cb);
    }
    /**
     * 此接口（CancelMultiFlowSignQRCode）用于废除取消一码多签签署码。
该接口所需的二维码ID，源自[创建一码多签签署码](https://qian.tencent.com/developers/partnerApis/templates/ChannelCreateMultiFlowSignQRCode)生成的。
如果该签署码尚处于有效期内，可通过本接口将其设置为失效状态。
     */
    async ChannelCancelMultiFlowSignQRCode(req, cb) {
        return this.request("ChannelCancelMultiFlowSignQRCode", req, cb);
    }
    /**
     * 查询企业扩展服务的开通和授权情况，当前支持查询以下内容：

1. **企业自动签**
2. **企业与港澳台居民签署合同**
3. **使用手机号验证签署方身份**
4. **拓宽签署方年龄限制**
5. **下载企业合同/文件**
6. **隐藏合同经办人姓名**

对应能力开通页面在子客控制台-企业中心-拓展服务，如下图所示:

![image](https://qcloudimg.tencent-cloud.cn/raw/931a1e02955ab36e5cc69a489af10352.jpg)

注: <font color='red'>所在企业的超管、法人才有权限调用此接口</font>(Agent.ProxyOperator.OpenId 需要传递超管或者法人的OpenId)
     */
    async DescribeExtendedServiceAuthInfo(req, cb) {
        return this.request("DescribeExtendedServiceAuthInfo", req, cb);
    }
    /**
     * 此接口用于获取企业批量认证异步任务的状态及结果。需要先调用接口<a href="https://qian.tencent.com/developers/partnerApis/accounts/CreateBatchOrganizationRegistrationTasks" target="_blank">提交子企业批量认证链接创建任务</a>获取到任务ID，然后再调用此接口获取到各个子企业的注册认证链接。整体流程如下图。
![image](https://qcloudimg.tencent-cloud.cn/raw/654aa2a72ab7d42f06464ea33c50c3bb.png)


注：
`异步任务的处理完成时间视当前已提交的任务量、任务的复杂程度等因素决定，正常情况下 3~5 秒即可完成，但也可能需要更长的时间`
     */
    async DescribeBatchOrganizationRegistrationUrls(req, cb) {
        return this.request("DescribeBatchOrganizationRegistrationUrls", req, cb);
    }
    /**
     * 此接口（DescribeUsage）用于获取此应用下子客企业的合同消耗数量。

<font color="red">此接口即将下线， 请使用新接口</font>  [查询渠道计费消耗情况](https://qian.tencent.com/developers/partnerApis/fee/ChannelDescribeBillUsageDetail)

注: 此接口**每日限频50次**，若要扩大限制次数,请提前与客服经理或邮件至e-contract@tencent.com进行联系。
     */
    async DescribeUsage(req, cb) {
        return this.request("DescribeUsage", req, cb);
    }
    /**
     * 该接口用于在使用视频认证方式签署合同后，获取用户的签署人脸认证视频。

1. 该接口**仅适用于在H5端签署**的合同，**在通过视频认证后**获取认证的视频内容。
2. 该接口**不支持小程序端**的签署认证的视频获取。
3. 请在**签署完成后的三天内**获取视频，**过期后将无法获取**。

**注意：该接口需要开通白名单，请联系客户经理开通后使用。**
     */
    async ChannelDescribeSignFaceVideo(req, cb) {
        return this.request("ChannelDescribeSignFaceVideo", req, cb);
    }
    /**
     * 通过此接口，删除员工绑定的角色，支持以电子签userId、客户系统userId两种方式调用。

对应控制台的操作如下图
![image](https://qcloudimg.tencent-cloud.cn/raw/5b41194d3cb3f2058ec0ba0fb5ebc6a6.png)
     */
    async ChannelDeleteRoleUsers(req, cb) {
        return this.request("ChannelDeleteRoleUsers", req, cb);
    }
    /**
     * 创建跳转小程序查看或签署的链接

**腾讯电子签小程序的AppID 和 原始Id如下:**

| 小程序 | AppID | 原始ID |
| ------------ | ------------ | ------------ |
| 腾讯电子签（正式版） | wxa023b292fd19d41d | gh_da88f6188665 |
| 腾讯电子签Demo | wx371151823f6f3edf | gh_39a5d3de69fa |

**主要使用场景EndPoint分类**

|EndPoint| 场景| 说明和示例|
|  ----  | ----  | --- |
|  WEIXINAPP  | 短链跳转腾讯电子签小程序签署场景  |  点击链接打开电子签小程序（与腾讯电子签官方短信提醒用户签署形式一样）<br> 示例: https://essurl.cn/x9nvWU8fTg|
|  LONGURL2WEIXINAPP  | 长链跳转腾讯电子签小程序签署场景  |  点击链接打开电子签小程序, 是WEIXINAPP生成短链代表的那个长链|
|  CHANNEL  | 带有H5引导页的跳转腾讯电子签小程序签署场景 |  点击链接打开一个H5引导页面, 页面中有个"前往小程序"的按钮, 点击后会跳转到腾讯电子签小程序签署场景;  签署完成会回到H5引导页面, 然后跳转到指定创建链接指定的JumpUrl<br>示例: https://res.ess.tencent.cn/cdn/h5-activity-beta/jump-mp.html?use=channel-guide&type=warning&token=uIFKIU8fTd |
|APP| <font color="red">贵方APP</font>跳转腾讯电子签小程序签署场景|  贵方App直接跳转到小程序后, 在腾讯电子签小程序签署完成后返回贵方App的场景<br>跳转到腾讯电子签小程序的实现可以参考微信的官方文档:<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/launchApp.html" target="_blank">开放能力/打开 App</a> <br> 示例: pages/guide?from=default&where=mini& to=CONTRACT_DETAIL& id=yDwiBUUc*duRvquCSX8wd& shortKey=yDwivUA**W1yRsTre3 |
|APP| <font color="red">贵方小程序</font>跳转腾讯电子签小程序签署场景|  贵方小程序直接跳转到小程序后, 在腾讯电子签小程序签署完成后返回贵方小程序的场景<br>跳转到腾讯电子签小程序的实现可以参考微信官方文档<a href="https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html" target="_blank">全屏方式</a>和<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html " target="_blank">半屏方式</a><br>此时返回的SignUrl就是官方文档中的path<br> 示例:pages/guide?from=default&where=mini& to=CONTRACT_DETAIL& id=yDwiBUUc*duRvquCSX8wd& shortKey=yDwivUA**W1yRsTre3  |
     */
    async CreateSignUrls(req, cb) {
        return this.request("CreateSignUrls", req, cb);
    }
    /**
     * 此接口（ChannelCreateBoundFlows）用于子客企业领取未归属给员工的合同，将合同领取给当前员工，合同不能重复领取。


**未归属合同发起方式**
 指定对应企业的OrganizationOpenId和OrganizationName而不指定具体的参与人(OpenId/名字/手机号等),  则合同进入待领取状态, 示例代码如下
```
        FlowApprovers: []*essbasic.FlowApproverInfo{
            {
                ApproverType:       common.StringPtr("ORGANIZATION"),
                OrganizationOpenId: common.StringPtr("org_dianziqian"),
                OrganizationName:   common.StringPtr("典子谦示例企业"),
            }
        },
```

可以<a href="https://qian.tencent.com/developers/partnerApis/accounts/CreateConsoleLoginUrl" target="_blank">生成子客登录链接</a>登录控制台查看带领取的合同
![image](https://qcloudimg.tencent-cloud.cn/raw/a34d0cc56ec871613e94dfc6252bc072.png)

注:
1. 支持批量领取,  如果有一个合同流程无法领取会导致接口报错,  使得所有合同都领取失败
2. 只有企业的<font color="red">超管或者法人</font>才能进行合同的领取
     */
    async ChannelCreateBoundFlows(req, cb) {
        return this.request("ChannelCreateBoundFlows", req, cb);
    }
    /**
     * 创建一个用于他方自动签授权的链接（可选择他方授权或我方授权）。通过这个链接，合作方企业可以直接进入小程序，进行自动签授权操作。

如果授权企业尚未开通企业自动签功能，该链接还将引导他们首先开通本企业的自动签服务


注:
1. <font color='red'>所在企业的超管、法人才有权限调用此接口</font>(Agent.ProxyOperator.OpenId 需要传递超管或者法人的OpenId)
2. 已经在授权中或者授权成功的企业，无法重复授权
3. 授权企业和被授权企业必须都是已认证企业
4. <font color='red'>需要授权企业或被授权企业的超管或者法人打开链接</font>走开通逻辑。

**该接口效果同控制台： 企业设置-> 扩展服务 -> 企业自动签署 -> 合作企业方授权**
![image](https://qcloudimg.tencent-cloud.cn/raw/091823fd4f02af7dda416fa10ca65f2d.png)
     */
    async CreatePartnerAutoSignAuthUrl(req, cb) {
        return this.request("CreatePartnerAutoSignAuthUrl", req, cb);
    }
    /**
     * 用来创建嵌入式页面个性化主题配置（例如是否展示电子签logo、定义主题色等），该接口配合其他所有可嵌入页面接口使用
创建配置对当前第三方应用全局生效，如果多次调用，会以最后一次的配置为准
     */
    async ChannelCreateWebThemeConfig(req, cb) {
        return this.request("ChannelCreateWebThemeConfig", req, cb);
    }
    /**
     * 指定需要批量催办的签署流程ID，批量催办合同，最多100个。需要符合以下条件的合同才可被催办
1. 合同中当前状态为 **待签署** 的签署人是催办的对象
2. **每个合同只能催办一次**

**催办的效果**: 对方会收到如下的短信通知

![image](https://qcloudimg.tencent-cloud.cn/raw/3caf94b7f540fa5736270d38528d3a7b.png)


**注**：`合同催办是白名单功能，请联系客户经理申请开白后使用`
     */
    async ChannelCreateFlowReminds(req, cb) {
        return this.request("ChannelCreateFlowReminds", req, cb);
    }
    /**
     * 通过合同编号批量撤销合同，单次最多支持撤销100份合同。

适用场景：如果某个合同当前**至少还有一方没有签署**，则可通过该接口取消该合同流程。常用于合同发错、内容填错，需要及时撤销的场景。

- **可撤回合同状态**：未全部签署完成
- **不撤回合同状态**：已全部签署完成、已拒签、已过期、已撤回、拒绝填写、已解除等合同状态。

批量撤销结果可以通过接口返回的TaskId关联[批量撤销任务结果回调](https://qian.tencent.com/developers/partner/callback_types_contracts_sign#%E4%B9%9D-%E6%89%B9%E9%87%8F%E6%92%A4%E9%94%80%E7%BB%93%E6%9E%9C%E5%9B%9E%E8%B0%83)或通过接口[查询批量撤销合同结果](https://qian.tencent.com/developers/partnerApis/operateFlows/DescribeCancelFlowsTask)主动查询。


注:
- 有对应合同撤销权限的人:  <font color='red'>**合同的发起人（并已经授予撤销权限）或者发起人所在企业的超管、法人**</font>
- 签署完毕的合同需要双方走解除流程将合同作废，可以参考<a href="https://qian.tencent.com/developers/partnerApis/startFlows/ChannelCreateReleaseFlow" target="_blank">发起解除合同流程接口</a>
- <font color='red'>只有撤销没有参与方签署过或只有自动签署签署过的合同，才会返还合同额度。</font>
- 撤销后可以看合同PDF内容的人员： 发起方的超管， 发起方自己，发起方撤销合同的操作人员，已经签署合同、已经填写合同、邀请填写已经补充信息的参与人员， 其他参与人员看不到合同的内容。
     */
    async ChannelBatchCancelFlows(req, cb) {
        return this.request("ChannelBatchCancelFlows", req, cb);
    }
    /**
     * **适用场景**：
当通过模板或文件发起合同时，若未指定企业签署人信息，则可调用此接口动态补充签署人。同一签署人只允许补充一人，最终实际签署人取决于谁先领取合同完成签署。

**接口使用说明**：

1.本接口现已支持批量补充签署人

2.当<a href="https://qian.tencent.com/developers/partnerApis/dataTypes/#fillapproverinfo/" target="_blank">补充签署人结构体</a>中指定需要补充的FlowId时，可以对指定合同补充签署人；可以指定多个相同发起方的不同合同在完成批量补充

3.当<a href="https://qian.tencent.com/developers/partnerApis/flows/ChannelCreateFlowApprovers/" target="_blank">补充签署人接口入参</a>中指定需要补充的FlowId时，是对指定的合同补充多个指定的签署人

4.如果同时指定了<a href="https://qian.tencent.com/developers/partnerApis/dataTypes/#fillapproverinfo/" target="_blank">补充签署人结构体</a>中的FlowId和<a href="https://qian.tencent.com/developers/partnerApis/flows/ChannelCreateFlowApprovers/" target="_blank">补充签署人接口入参</a>中的FlowId，仅使用<a href="https://qian.tencent.com/developers/partnerApis/dataTypes/#fillapproverinfo/" target="_blank">补充签署人结构体</a>中的FlowId作为补充的合同

5.如果部分指定了<a href="https://qian.tencent.com/developers/partnerApis/dataTypes/#fillapproverinfo/" target="_blank">补充签署人结构体</a>中的FlowId，又指定了<a href="https://qian.tencent.com/developers/partnerApis/flows/ChannelCreateFlowApprovers/" target="_blank">补充签署人接口入参</a>中的FlowId；那么<a href="https://qian.tencent.com/developers/partnerApis/dataTypes/#fillapproverinfo/" target="_blank">补充签署人结构体</a>存在指定的FlowId，则使用<a href="https://qian.tencent.com/developers/partnerApis/dataTypes/#fillapproverinfo/" target="_blank">补充签署人结构体</a>中的FlowId，不存在则使用<a href="https://qian.tencent.com/developers/partnerApis/flows/ChannelCreateFlowApprovers/" target="_blank">补充签署人接口入参</a>中的FlowId作为补充的合同


6.如果同时未指定了<a href="https://qian.tencent.com/developers/partnerApis/dataTypes/#fillapproverinfo/" target="_blank">补充签署人结构体</a>中的FlowId和<a href="https://qian.tencent.com/developers/partnerApis/flows/ChannelCreateFlowApprovers/" target="_blank">补充签署人接口入参</a>中的FlowId，则传参错误

**限制条件**：
1. 本企业（发起方企业）企业签署人仅支持通过企业名称+姓名+手机号进行补充。
2. 个人签署人支持通过姓名+手机号进行补充，补充动态签署人时：若个人用户已完成实名，则可通过姓名+证件号码进行补充。
     */
    async ChannelCreateFlowApprovers(req, cb) {
        return this.request("ChannelCreateFlowApprovers", req, cb);
    }
    /**
     * 获取个人用户认证证书图片下载URL

个人用户认证证书图片样式如下图

![image](https://qcloudimg.tencent-cloud.cn/raw/d568bc0f101bef582f7af2cb5ab7a715.png)

注:
<ul>
<li>只能获取个人用户证明图片, 企业员工的暂不支持</li>
<li>专为电子处方单（医疗自动签）特定场景使用。在使用前，请务必与您的客户经理联系以确认已经开通电子处方单功能 </li>
</ul>
     */
    async CreatePersonAuthCertificateImage(req, cb) {
        return this.request("CreatePersonAuthCertificateImage", req, cb);
    }
    /**
     * 提交申请出证报告任务并返回报告ID。

注意：
- 使用此功能**需搭配出证套餐**  ，使用前请联系对接的客户经理沟通。
- 操作人必须是**发起方或者签署方企业的(非走授权书认证)法人或者超管**。
- 合同流程必须**所有参与方已经签署完成**。
- 出证过程需一定时间，建议在**提交出证任务后的24小时之后**，通过<a href="https://qian.tencent.com/developers/partnerApis/certificate/DescribeChannelFlowEvidenceReport" target="_blank">获取出证报告任务执行结果</a>接口进行查询执行结果和出证报告的下载URL。


![image](https://qcloudimg.tencent-cloud.cn/raw/1b4307ed143a992940c41d61192d3a0f/channel_CreateChannelFlowEvidenceReport.png)
     */
    async CreateChannelFlowEvidenceReport(req, cb) {
        return this.request("CreateChannelFlowEvidenceReport", req, cb);
    }
    /**
     * 本接口（ChannelCreatePreparedPersonalEsign）用于创建导入个人印章（处方单场景专用，使用此接口请与客户经理确认）。
     */
    async ChannelCreatePreparedPersonalEsign(req, cb) {
        return this.request("ChannelCreatePreparedPersonalEsign", req, cb);
    }
    /**
     * 接口（ChannelCreateFlowByFiles）用PDF文件创建签署流程。

适用场景：适用非制式的合同文件签署，开发者有每个签署流程的PDF，可以通过该接口传入完整的PDF文件及流程信息生成待签署的合同流程。

**注**:
<ul>
<li>此接口静默签(企业自动签)能力为白名单功能，使用前请联系对接的客户经理沟通。</li>
<li>此接口需要依赖<a href="https://qian.tencent.com/developers/partnerApis/files/UploadFiles" target="_blank">文件上传接口</a>生成pdf资源编号（FileIds）进行使用。整体的逻辑如下图</li>
</ul>

![image](https://qcloudimg.tencent-cloud.cn/raw/bf86248a2c163228c4e894cf5926af69/ChannelCreateFlowByFiles.png)

**可以作为发起方和签署方的角色列表**
<table>     <thead>     <tr>         <th>场景编号</th>         <th>发起方</th>         <th>签署方</th>         <th>补充</th>     </tr>     </thead>     <tbody>     <tr>         <td>场景一</td>         <td>子企业A的员工</td>         <td>子企业A的员工</td>         <td>子企业是通过<a href="https://qian.tencent.com/developers/partnerApis/accounts/CreateConsoleLoginUrl" target="_blank">CreateConsoleLoginUrl</a>生成子客登录链接注册的企业</td>     </tr>     <tr>         <td>场景二</td>         <td>子企业A的员工</td>         <td>子企业B(不指定经办人走领取逻辑)</td>         <td>领取的逻辑可以参考文档<a href="https://qian.tencent.com/developers/partner/dynamic_signer" target="_blank">动态签署方</a> </td>     </tr>     <tr>         <td>场景三</td>         <td>子企业A的员工</td>         <td>子企业B的员工</td>         <td>-</td>     </tr>     <tr>         <td>场景四</td>         <td>子企业A的员工</td>         <td>个人</td>         <td>就是自然人，不是企业员工</td>     </tr>     <tr>         <td>场景五</td>         <td>子企业A的员工</td>         <td>SaaS平台企业员工</td>         <td>SaaS平台企业是通过<a href="https://qian.tencent.cn/console/company-register" target="_blank">https://qian.tencent.cn/console/company-register</a>链接注册的企业</td>     </tr>     </tbody> </table>


**注**:
`1. 发起合同时候,  作为发起方的第三方子企业A员工的企业和员工必须经过实名, 而作为签署方的第三方子企业A员工/个人/自然人/SaaS平台企业员工/第三方子企业B员工企业中的企业和个人/员工可以未实名`

`2. 不同类型的签署方传参不同, 可以参考开发者中心的FlowApproverInfo结构体说明`

`3. 合同发起后就会扣减合同的额度, 只有撤销没有参与方签署过或只有自动签署签署过的合同，才会返还合同额度。（过期，拒签，签署完成，解除完成等状态不会返还额度）`

`4. 静默（自动）签署不支持合同签署方存在填写功能`

<font color="red">相关视频指引</font> <br>
1. <a href="https://dyn.ess.tencent.cn/guide/apivideo/essbasic-UploadFiles.mp4" target="_blank">【上传文件代码】编写示例</a><br>
1. <a href="https://dyn.ess.tencent.cn/guide/apivideo/essbasic-ChannelCreateFlowByFiles.mp4" target="_blank">【用PDF文件创建签署流程】编写示例</a><br>
     */
    async ChannelCreateFlowByFiles(req, cb) {
        return this.request("ChannelCreateFlowByFiles", req, cb);
    }
    /**
     * 1. 可以**通过图片**为子客企业代创建印章，图片最大5MB

2. 可以**系统创建**子客企业代创建印章, 系统创建的印章样子下图(样式可以调整)

![image](https://dyn.ess.tencent.cn/guide/capi/CreateSealByImage.png)
     */
    async CreateSealByImage(req, cb) {
        return this.request("CreateSealByImage", req, cb);
    }
    /**
     * 此接口（ChannelCreateConvertTaskApi）用来将word、excel、html、图片、txt类型文件转换为PDF文件。<br />
前提条件：源文件已经通过 <a href="https://qian.tencent.com/developers/partnerApis/files/UploadFiles" target="_blank">文件上传接口</a>完成上传，并得到了源文件的资源Id。<br />
适用场景1：已经上传了一个word文件，希望将该word文件转换成pdf文件后发起合同
适用场景2：已经上传了一个jpg图片文件，希望将该图片文件转换成pdf文件后发起合同<br />
转换文件是一个耗时操作，若想查看转换任务是否完成，可以通过<a href="https://qian.tencent.com/developers/partnerApis/files/ChannelGetTaskResultApi" target="_blank">查询转换任务状态</a>接口获取任务状态。<br />
注:
1. `支持的文件类型有doc、docx、xls、xlsx、html、jpg、jpeg、png、bmp、txt`
2. `可通过发起合同时设置预览来检查转换文件是否达到预期效果`
     */
    async ChannelCreateConvertTaskApi(req, cb) {
        return this.request("ChannelCreateConvertTaskApi", req, cb);
    }
    /**
     * 撤销签署流程接口

适用场景：如果某个合同流程当前至少还有一方没有签署，则可通过该接口取消该合同流程。常用于合同发错、内容填错，需要及时撤销的场景。

- **可撤回合同状态**：未全部签署完成
- **不撤回合同状态**：已全部签署完成、已拒签、已过期、已撤回、拒绝填写、已解除等合同状态。

注:
- 有对应合同撤销权限的人:  <font color='red'>**合同的发起人（并已经授予撤销权限）或者发起人所在企业的超管、法人**</font>
- 签署完毕的合同需要双方走解除流程将合同作废，可以参考<a href="https://qian.tencent.com/developers/partnerApis/startFlows/ChannelCreateReleaseFlow" target="_blank">发起解除合同流程接口</a>
- <font color='red'>只有撤销没有参与方签署过或只有自动签署签署过的合同，才会返还合同额度。</font>
- 撤销后可以看合同PDF内容的人员： 发起方的超管， 发起方自己，发起方撤销合同的操作人员，已经签署合同、已经填写合同、邀请填写已经补充信息的参与人员， 其他参与人员看不到合同的内容。
     */
    async ChannelCancelFlow(req, cb) {
        return this.request("ChannelCancelFlow", req, cb);
    }
    /**
     * 接口（CreateFlowsByTemplates）用于使用模板批量创建签署流程。当前可批量发起合同（签署流程）数量为1-20个。
如若在模板中配置了动态表格, 上传的附件必须为A4大小
合同发起人必须在电子签已经进行实名。

### 一. 整体的逻辑如下

![image](https://qcloudimg.tencent-cloud.cn/raw/e193519d4383fa74782a9e19147ef01a/CreateFlowsByTemplates.png)

###  二. 可以作为发起方和签署方的角色列表

<table>     <thead>     <tr>         <th>场景编号</th>         <th>发起方</th>         <th>签署方</th>         <th>补充</th>     </tr>     </thead>     <tbody>     <tr>         <td>场景一</td>         <td>子企业A的员工</td>         <td>子企业A的员工</td>         <td>子企业是通过<a href="https://qian.tencent.com/developers/partnerApis/accounts/CreateConsoleLoginUrl" target="_blank">CreateConsoleLoginUrl</a>生成子客登录链接注册的企业</td>     </tr>     <tr>         <td>场景二</td>         <td>子企业A的员工</td>         <td>子企业B(不指定经办人走领取逻辑)</td>         <td>领取的逻辑可以参考文档<a href="https://qian.tencent.com/developers/partner/dynamic_signer" target="_blank">动态签署方</a> </td>     </tr>     <tr>         <td>场景三</td>         <td>子企业A的员工</td>         <td>子企业B的员工</td>         <td>-</td>     </tr>     <tr>         <td>场景四</td>         <td>子企业A的员工</td>         <td>个人</td>         <td>就是自然人，不是企业员工</td>     </tr>     <tr>         <td>场景五</td>         <td>子企业A的员工</td>         <td>SaaS平台企业员工</td>         <td>SaaS平台企业是通过<a href="https://qian.tencent.cn/console/company-register" target="_blank">https://qian.tencent.cn/console/company-register</a>链接注册的企业</td>     </tr>     </tbody> </table>




### 三. 填充模板中定义的填写控件
模板中配置的<font color="red">发起人填充控件</font>可以通过本接口的**FormFields数组**字段填充

![image](https://qcloudimg.tencent-cloud.cn/raw/37457e0e450fc221effddfcb8b1bad55.png)
填充的传参示例如下

```
    request.FormFields = [{
            "ComponentName": "项目的名字",
            "ComponentValue": "休闲山庄"
        }, {
            "ComponentName": "项目的地址",
            "ComponentValue": "凤凰山北侧",
        }, {
            "ComponentName": "范围",
            "ComponentValue": "凤凰山至107国道",
        }, {
            "ComponentName": "面积",
            "ComponentValue": "100亩",
        }, {
            "ComponentName": "基本情况",
            "ComponentValue": "完好",
        }, , {
            "ComponentName": "用途",
            "ComponentValue": "经营农家乐",
        }
    ]
```
合成后合同样子示例

![image](https://qcloudimg.tencent-cloud.cn/raw/140a2fb771ac66a185d0a000d37485f6.png)



### 四. 注意
1. 发起合同时候,  作为<font color="red">发起方的第三方子企业A员工的企业和员工必须经过实名</font>, 而作为签署方的第三方子企业A员工/个人/自然人/SaaS平台企业员工/第三方子企业B员工企业中的企业和个人/员工可以未实名

2. 不同类型的签署方传参不同, 可以参考开发者中心的FlowApproverInfo结构体说明

3. <font color="red">调用接口发起合同成功就会扣减合同的额度</font>, 只有撤销没有参与方签署过或只有自动签署签署过的合同，才会返还合同额度。（过期，拒签，签署完成，解除完成等状态不会返还额度）

4. <font color="red">静默（自动）签署不支持合同签署方存在填写</font>

5.  <font color="red">在下一步创建签署链接前，建议等待DocumentFill </font> <a href="https://qian.tencent.com/developers/partner/callback_types_file_resources">PDF合成完成的回调</a>或者睡眠几秒，尤其是当模板中存在动态表格等复杂填写控件时，因为合成过程可能会耗费秒级别的时间。


<font color="red">相关视频指引</font> <br>
1. <a href="https://dyn.ess.tencent.cn/guide/apivideo/essbasic-CreateTemplates.mp4" target="_blank">创建模板&设置成本企业自动签署</a><br>
2. <a href="https://dyn.ess.tencent.cn/guide/apivideo/essbasic-CreateFlowsByTemplates.mp4" target="_blank">【用模板创建签署流程】编写示例视频教程</a><br>
     */
    async CreateFlowsByTemplates(req, cb) {
        return this.request("CreateFlowsByTemplates", req, cb);
    }
    /**
     * 此接口（ChannelCreateRole）用来创建企业自定义角色。

适用场景1：创建当前企业的自定义角色，并且创建时不进行权限的设置（PermissionGroups 参数不传），角色中的权限内容可通过接口 ChannelModifyRole 完成更新。

适用场景2：创建当前企业的自定义角色，并且创建时进行权限的设置（PermissionGroups 参数要传），权限树内容 PermissionGroups 可参考[查询角色列表接口](https://qian.tencent.com/developers/partnerApis/accounts/ChannelDescribeRoles) 的输出。此处注意权限树内容可能会更新，需尽量拉取最新的权限树内容，并且权限树内容 PermissionGroups 必须是一颗完整的权限树。
     */
    async ChannelCreateRole(req, cb) {
        return this.request("ChannelCreateRole", req, cb);
    }
    /**
     * 生成用印申请审批链接，审批人可以通过此链接进入小程序进行审批。
 p.s.
Agent参数中的OpenId 必须为审批者的openId，且链接必须由审批人打开。
     */
    async DescribeChannelSealPolicyWorkflowUrl(req, cb) {
        return this.request("DescribeChannelSealPolicyWorkflowUrl", req, cb);
    }
    /**
     * 生成渠道子客编辑企业信息二维码
     */
    async ChannelCreateOrganizationModifyQrCode(req, cb) {
        return this.request("ChannelCreateOrganizationModifyQrCode", req, cb);
    }
    /**
     * 接口（ChannelCreateDynamicFlowApprover）用来补充<a href="https://qian.tencent.com/developers/partnerApis/startFlows/ChannelCreateFlowByFiles" target="_blank">用PDF文件创建签署流程</a>发起的动态合同的签署人信息
**注**:
<ul>
<li>此接口需要保证：渠道企业已开启：模块化计费能力，</li>
<li>此接口需要保证：渠道应用已开启：动态签署人2.0能力</li>
<li>此接口需要保证：合同发起时指定开启了动态合同</li>
<li>此接口补充的动态签署人传参规则，请参考接口：<a href="https://qian.tencent.com/developers/partnerApis/startFlows/ChannelCreateFlowByFiles" target="_blank">用PDF文件创建签署流程</a>的签署人传参规则</li>
</ul>
     */
    async ChannelCreateDynamicFlowApprover(req, cb) {
        return this.request("ChannelCreateDynamicFlowApprover", req, cb);
    }
    /**
     * 该接口用于获取创建法人章的二维码，需要通过微信扫描。扫描后将跳转到腾讯电子签署，进入到创建法人章的流程。

**注意**
1. 该二维码**有效期为7天**，过期后将失效，可重新创建 。
2. 每个公司**只能有1个法人章**，无法重复创建或者创建多个

法人章的样式可以参考下图索引（也可以自己上传法人印章图片）：

![image](https://qcloudimg.tencent-cloud.cn/raw/36a0a090750c45bb5cac5047ac461b2c.png)
     */
    async CreateLegalSealQrCode(req, cb) {
        return this.request("CreateLegalSealQrCode", req, cb);
    }
    /**
     * 对合同流程文件进行数字签名验证，判断数字签名是否有效，合同文件内容是否被篡改。

**补充**： 可以到控制台[合同验签](https://qian.tencent.com/verifySign)体验验签功能，界面如下
![image](https://qcloudimg.tencent-cloud.cn/raw/81c333ccb07f0c5fbaf840d9cee61333.png)
     */
    async ChannelVerifyPdf(req, cb) {
        return this.request("ChannelVerifyPdf", req, cb);
    }
    /**
     * 此接口（GetDownloadFlowUrl）用户获取合同控制台下载页面链接,  点击链接后会跳转至本企业合同管理控制台(会筛选出传入的合同列表), 点击**下载**按钮后就会下载传入的合同列表, 下载页面如下图
![image](https://dyn.ess.tencent.cn/guide/capi/channel_GetDownloadFlowUrl.png)

注:
<ul>
<li>仅支持下载 <b>本企业</b> 下合同，链接会 <b>登录企业控制台</b> </li>
<li> <b>链接仅可使用一次</b>，不可重复使用</li>
</ul>
     */
    async GetDownloadFlowUrl(req, cb) {
        return this.request("GetDownloadFlowUrl", req, cb);
    }
    /**
     * 此接口查询子企业电子印章。<br />

注：
1. 此操作要求操作者具备<b>印章查询权限</b>（若调用者尚无此权限，请联系超级管理员前往Web控制台【组织管理】->【角色管理】添加相应权限）。
     */
    async ChannelDescribeOrganizationSeals(req, cb) {
        return this.request("ChannelDescribeOrganizationSeals", req, cb);
    }
    /**
     * 查询企业扩展服务的授权详情（列表），当前支持查询以下内容：

1. **企业自动签**
2. **批量签署**


注: <font color='red'>所在企业的超管、法人才有权限调用此接口</font>(Agent.ProxyOperator.OpenId 需要传递超管或者法人的OpenId)
     */
    async DescribeExtendedServiceAuthDetail(req, cb) {
        return this.request("DescribeExtendedServiceAuthDetail", req, cb);
    }
    /**
     * 创建企业注销链接

系统将返回操作链接。贵方需要主动联系并通知企业的超级管理员（超管）或法人。由他们点击该链接，完成企业的注销操作。

注意： `在调用此接口以管理企业扩展服务时，操作者（ Agent.ProxyOperator.OpenId）必须是企业的超级管理员（超管）或法人。`
     */
    async CreateCloseOrganizationUrl(req, cb) {
        return this.request("CreateCloseOrganizationUrl", req, cb);
    }
    /**
     * 该接口 (PrepareFlows) 用于创建待发起文件
用户通过该接口进入签署流程发起的确认页面，进行发起信息二次确认， 如果确认则进行正常发起。
目前该接口只支持B2C，<font color='red'> **不建议使用，将会废弃**</font>。
     */
    async PrepareFlows(req, cb) {
        return this.request("PrepareFlows", req, cb);
    }
    /**
     * 分页查询企业角色列表，法人的角色是系统保留角色，不会返回，按照角色创建时间升序排列。


<font color="red">系统默认角色</font>说明可参考下表

| 角色名称| 建议授予对象 | 角色描述 |
| --- | --- | --- |
| **超级管理员** |电子签业务最高权限，可以授权给法务/企业法人/业务负责人等 | 所有功能和数据管理权限，只能设置一位超管。 |
| **业务管理员**|IT 系统负责人，可以授权给CTO等 | 企业合同模块、印章模块、模板模块等全量功能及数据权限。 |
| **经办人**|企业法务负责人等 | 发起合同、签署合同（含填写、拒签）、撤销合同、持有印章等权限能力，可查看企业所有合同数据。 |
| **业务员**|销售员、采购员 等| 发起合同、签署合同（含填写、拒签）、撤销合同、持有印章等权限能力，可查看自己相关所有合同数据。 |

附件：<a href="https://dyn.ess.tencent.cn/guide/apivideo/roles.xlsx" target="_blank">点击下载角色对应的权限点的excel文档</a>
     */
    async ChannelDescribeRoles(req, cb) {
        return this.request("ChannelDescribeRoles", req, cb);
    }
    /**
     * 获取合同流程PDF的下载链接，可以下载签署中、签署完的此子企业创建的合同。




### 2. 确保合同的PDF已经合成后，再调用本接口。
 用户创建合同或者提交签署动作后，后台需要1~3秒的时间就进行合同PDF合成或者签名，为了确保您下载的是签署完成的完整合同文件，我们建议采取下面两种方式的一种来<font color="red"><b>确保PDF已经合成完成，然后在调用本接口</b></font>。

**第一种**：请确保您的系统配置了[接收合同完成通知的回调](https://qian.tencent.com/developers/partner/callback_types_contracts_sign)功能。一旦所有参与方签署完毕，我们的系统将自动向您提供的回调地址发送完成通知。

**第二种**：通过调用我们的[获取合同信息](https://qian.tencent.com/developers/partnerApis/flows/DescribeFlowDetailInfo)接口来主动检查合同的签署状态。请仅在确认合同状态为“全部签署完成”后，进行文件的下载操作。

### 3.  链接具有有效期限
<font color="red"><b>生成的链接是有时间限制的，过期后将无法访问</b></font>。您可以在接口返回的信息中查看具体的过期时间。为避免错误，请确保在链接过期之前进行下载操作。

### 4. 有两种开通下载权限的途径。

**第一种**:   需第三方应用的子企业登录控制台进行授权,  授权在**企业中心**的**授权管理**区域,  界面如下图。
授权过程需要**子企业超管**扫描跳转到电子签小程序签署<<渠道端下载渠道子客合同功能授权委托书>>

![image](https://qcloudimg.tencent-cloud.cn/raw/8b483dfebdeafac85051279406944048.png)

**第二种**: 渠道方企业在**企业应用管理**的配置界面打开需要配置的应用，点击**应用扩展服务**开通此功能，需要**渠道方企业的超管**扫描二维码跳转到电子签小程序签署 <<渠道端下载渠道子客合同功能开通知情同意书>>
注:
1. `请注意如果第三方应用的子客主动关闭了渠道端下载渠道子客合同功能开关，那么渠道方开通了此功能也无法下载子客的合同文件`

![image](https://qcloudimg.tencent-cloud.cn/raw/238979ef51dd381ccbdbc755a593debc/channel_DescribeResourceUrlsByFlows_appilications2.png)
     */
    async DescribeResourceUrlsByFlows(req, cb) {
        return this.request("DescribeResourceUrlsByFlows", req, cb);
    }
    /**
     * 查询渠道子客企业信息时，可以支持单个子客和整个应用下所有子客的查询。返回的信息包括超管、法人的信息以及当前企业的认证状态等信息。

- 对于单个企业的查询，通过**指定子客的唯一标识**来查询该子客的企业信息
- 对于整个应用下所有企业的查询，**不需要指定子客的唯一标识**，直接查询整个应用下所有子客企业的企业信息
     */
    async DescribeChannelOrganizations(req, cb) {
        return this.request("DescribeChannelOrganizations", req, cb);
    }
    /**
     * 支持企业进行批量初始化操作：

此接口存在以下限制：
1. 批量操作的企业需要已经完成电子签的认证流程。
2. 通过此接口生成的链接在小程序端进行操作时，操作人需要是<font  color="red">所有企业的超管或法人</font>。
3. 批量操作的企业，需要是本方第三方应用下的企业。
4. <font  color="red">操作链接过期时间默认为生成链接后7天。</font>
     */
    async CreateBatchInitOrganizationUrl(req, cb) {
        return this.request("CreateBatchInitOrganizationUrl", req, cb);
    }
    /**
     * 通过此接口（ChannelDescribeAccountBillDetail）查询该第三方平台子客账号计费详情。
<ul>
<li>对于渠道客户企业的查询，通过指定渠道企业的唯一标识(Agent.ProxyOrganizationId)来查询子客账号消耗详情</li>
</ul>
     */
    async ChannelDescribeAccountBillDetail(req, cb) {
        return this.request("ChannelDescribeAccountBillDetail", req, cb);
    }
    /**
     * 您可以通过合同流程ID查询相关的<font color="red"><b>填写控件</b></font>信息及其内容。这包括控件的归属方、控件的填写状态（是否已填写）以及具体的填写内容。

无论是<font color="red"><b>发起方还是签署方</b></font>填写的控件，均包含在查询结果中。

![image](https://qcloudimg.tencent-cloud.cn/raw/08f6ea50d3ae88b51c280c2b17c2a126.png)
### 2.  哪些控件会出现在结果里边？
**A.不返回的控件类型：**
- 动态表格
- 附件控件
- 水印控件

**B.返回的控件类型：**
- 单行文本
- 多行文本
- 勾选框控件
- 数字控件
- 日期控件
- 图片控件（图片下载地址）
- 邮箱控件
- 地址控件
- 学历控件
- 性别控件
- 省市区控件

### 3.怎么授权？

此接口需要授权,  有两种开通权限的途径

**第一种**:   需第三方应用的子企业登录控制台进行授权,  授权在**企业中心**的**授权管理**区域,  界面如下图
授权过程需要**子企业超管**扫描跳转到电子签小程序签署<<渠道端下载渠道子客合同功能授权委托书>>

![image](https://qcloudimg.tencent-cloud.cn/raw/8b483dfebdeafac85051279406944048.png)

**第二种**: 第三方应用的配置接口打开全第三个应用下的所有自己起开通, 需要**渠道方企业的超管**扫描二维码跳转到电子签小程序签署 <<渠道端下载渠道子客合同功能开通知情同意书>>
![image](https://qcloudimg.tencent-cloud.cn/raw/238979ef51dd381ccbdbc755a593debc/channel_DescribeResourceUrlsByFlows_appilications2.png)
     */
    async ChannelDescribeFlowComponents(req, cb) {
        return this.request("ChannelDescribeFlowComponents", req, cb);
    }
    /**
     * 此接口（ChannelDeleteSealPolicies）用于删除已指定员工印章授权信息，删除员工的印章授权后，该员工使用印章进行盖章时，将需要提交印章授权申请且通过审核后才能使用该印章进行签署。
     */
    async ChannelDeleteSealPolicies(req, cb) {
        return this.request("ChannelDeleteSealPolicies", req, cb);
    }
    /**
     * 此接口（ChannelCreateMultiFlowSignQRCode）用于创建一码多签签署码。

**适用场景**:
签署人可通过扫描二维码补充签署信息进行实名签署。常用于提前不知道签署人的身份信息场景，例如：劳务工招工、大批量员工入职等场景。

**注意**:
1. 本接口适用于**发起方没有填写控件的 B2C或者单C模板**,  若是B2C模板,还要满足以下任意一个条件
    - 模板中配置的签署顺序是无序
    - B端企业的签署方式是静默签署
    - B端企业是非首位签署
2. 通过扫描一码多签签署码发起的合同，合同涉及到的回调消息可参考文档[合同发起及签署相关回调
]( https://qian.tencent.com/developers/partner/callback_types_contracts_sign)
3. 用户通过扫描一码多签签署码发起合同时，因企业额度不足导致失败 会触发签署二维码相关回调,具体参考文档[签署二维码相关回调](https://qian.tencent.com/developers/partner/callback_types_commons#%E7%AD%BE%E7%BD%B2%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%9B%B8%E5%85%B3%E5%9B%9E%E8%B0%83)

签署码的样式如下图:
![image](https://qcloudimg.tencent-cloud.cn/raw/27317cf5aacb094fb1dc6f94179a5148.png )
     */
    async ChannelCreateMultiFlowSignQRCode(req, cb) {
        return this.request("ChannelCreateMultiFlowSignQRCode", req, cb);
    }
    /**
     * 管理企业扩展服务

- **直接开通的情形：** 若在操作过程中接口没有返回跳转链接，这表明无需进行任何跳转操作。此时，相应的企业拓展服务将会直接被开通或关闭。

- **需要法人或者超管签署开通协议的情形：** 当需要开通以下企业拓展服务时， 系统将返回一个操作链接。贵方需要主动联系并通知企业的超级管理员（超管）或法人。由他们点击该链接，完成服务的开通操作。
  - **AUTO_SIGN（企业自动签）**
  - **DOWNLOAD_FLOW（授权渠道下载合同）**

注意： `在调用此接口以管理企业扩展服务时，操作者（ Agent.ProxyOperator.OpenId）必须是企业的超级管理员（超管）或法人`


对应的扩展服务能力可以在控制台的【扩展服务】中找到
![image](https://qcloudimg.tencent-cloud.cn/raw/99eebd37883ec55ed1f1df3a57aee60a.png)
     */
    async ModifyExtendedService(req, cb) {
        return this.request("ModifyExtendedService", req, cb);
    }
    /**
     * 获取区块链存证证书查看链接/二维码接口

适用场景：企业员工可以通过此接口生成合同区块链存证证书的查看链接/二维码，以供他人扫码打开腾讯电子签小程序查看。

[点击查看区块链存证证书样式](https://qcloudimg.tencent-cloud.cn/raw/47d5e9c2ffa90ad4e27b3cd14095aa08.jpg)

注：
<ul><li>1. 二维码下载链接过期时间为5分钟，请尽快下载保存。二维码/短链的过期时间为<font color="red">7天</font>，超过有效期则不可用。</li>
<li>2. 合同状态需为<font color="red">签署完成</font> 、<font color="red">已解除</font>才能生成证书查看二维码/短链。</li>
<li>3. 调用接口时，需确保接口调用身份拥有此合同的访问数据权限或为合同参与方。</li>
<li>4. 通过扫码或者点击链接，用户无需登录或者鉴权即可查看对应合同的区块链存证证书，请妥善保管好二维码或链接。</li></ul>
     */
    async CreateFlowBlockchainEvidenceUrl(req, cb) {
        return this.request("CreateFlowBlockchainEvidenceUrl", req, cb);
    }
    /**
     * 此接口用于获取企业批量认证链接-单链接包含多条认证流。

前提条件：已调用 [CreateBatchOrganizationRegistrationTasks创建子企业批量认证链接任务接口](https://qian.tencent.com/developers/partnerApis/accounts/CreateBatchOrganizationRegistrationTasks) 和[查询子企业批量认证链接DescribeBatchOrganizationRegistrationUrls](https://qian.tencent.com/developers/partnerApis/accounts/DescribeBatchOrganizationRegistrationUrls) 确保认证任务已经完成。

异步任务的处理完成时间视当前已提交的任务量、任务的复杂程度等因素决定，正常情况下 3~5 秒即可完成，但也可能需要更长的时间。
此链接包含多条认证流程，使用该链接可以批量的对企业进行认证。
     */
    async CreateBatchOrganizationAuthorizationUrl(req, cb) {
        return this.request("CreateBatchOrganizationAuthorizationUrl", req, cb);
    }
    /**
     * 该接口用于发起合同后，生成个人/企业用户的批量待办链接。
**注意：**
1. 该接口可生成签署人的批量、合同组签署/查看链接 。
2. 该签署链接**有效期为30分钟**，过期后将失效，如需签署可重新创建批量签署链接 。
4. 该接口返回的签署链接适用于APP集成的场景，支持APP打开或浏览器直接打开，**不支持微信小程序嵌入**。
跳转到小程序的实现，参考微信官方文档(分为<a href="https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html">全屏</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html">半屏</a>两种方式)，如何配置也可以请参考: <a href="https://qian.tencent.com/developers/company/openwxminiprogram">跳转电子签小程序配置</a>。
6. 因h5涉及人脸身份认证能力基于慧眼人脸核身，对Android和iOS系统均有一定要求， 因此<font color='red'>App嵌入H5签署合同需要按照慧眼提供的<a href="https://cloud.tencent.com/document/product/1007/61076">慧眼人脸核身兼容性文档</a>做兼容性适配</font>。
     */
    async ChannelCreateBatchQuickSignUrl(req, cb) {
        return this.request("ChannelCreateBatchQuickSignUrl", req, cb);
    }
    /**
     * 通过此接口可以关闭个人用户自动签功能。
无需对应的用户刷脸等方式同意即可关闭。

注意:

<ul><li>处方单等特殊场景专用，此接口为白名单功能，使用前请联系对接的客户经理沟通。</li>
<li>如果此用户在开通时候绑定过个人自动签账号许可,  关闭此用户的自动签不会归还个人自动签账号许可的额度。</li></ul>
     */
    async ChannelDisableUserAutoSign(req, cb) {
        return this.request("ChannelDisableUserAutoSign", req, cb);
    }
    /**
     * 该接口用于批量创建企业认证链接， 可以支持PC浏览器，H5和小程序三种途径。
此接口为异步提交任务接口，需要与[查询子企业批量认证链接](https://qcloudimg.tencent-cloud.cn/raw/1d3737991b2a3be78002bd78a47d6917.png)配合使用，整体流程如下图。
![image](https://qcloudimg.tencent-cloud.cn/raw/654aa2a72ab7d42f06464ea33c50c3bb.png)



**注意**

1. 单次最多创建10个子企业。
2. 一天内，同一家企业最多创建8000个子企业。
3. 同一批创建的子客户不能重复，包括企业名称、企业统一信用代码和子客户经办人openId。
4. 跳转到小程序的实现，请参考微信官方文档（分为<a href="https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html">全屏</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html">半屏</a>两种方式）。如何配置跳转电子签小程序，可参考：<a href="https://qian.tencent.com/developers/company/openwxminiprogram">跳转电子签小程序配置</a>。



**腾讯电子签小程序的AppID 和 原始Id如下:**

| 小程序 | AppID | 原始ID |
| ------------ | ------------ | ------------ |
| 腾讯电子签（正式版） | wxa023b292fd19d41d | gh_da88f6188665 |
| 腾讯电子签Demo | wx371151823f6f3edf | gh_39a5d3de69fa |
     */
    async CreateBatchOrganizationRegistrationTasks(req, cb) {
        return this.request("CreateBatchOrganizationRegistrationTasks", req, cb);
    }
    /**
     * 该接口用于获取个人授权执业章给企业的二维码，需要个人用户通过微信扫码。

扫描后将跳转到腾讯电子签小程序，进入到授权执业章的流程。

个人用户授权成功后，企业印章管理员需对印章进行审核，审核通过后，即可使用个人授权的执业章进行盖章操作。

**注意**
1. 该二维码**有效期为7天**，过期后将失效，可重新创建。
 

整体流程入下图

![image](https://qcloudimg.tencent-cloud.cn/raw/21b6b56dbc796c9d6f402d6ce6febb07.png)
     */
    async CreateEmployeeQualificationSealQrCode(req, cb) {
        return this.request("CreateEmployeeQualificationSealQrCode", req, cb);
    }
    /**
     * 此接口（ChannelGetTaskResultApi）用来查询转换任务的状态。如需发起转换任务，请使用<a href="https://qian.tencent.com/developers/partnerApis/files/ChannelCreateConvertTaskApi" target="_blank">创建文件转换任务接口</a>进行资源文件的转换操作<br />
前提条件：已调用 <a href="https://qian.tencent.com/developers/partnerApis/files/ChannelCreateConvertTaskApi" target="_blank">创建文件转换任务接口</a>进行文件转换，并得到了返回的转换任务Id。<br />

适用场景：已创建一个文件转换任务，想查询该文件转换任务的状态，或获取转换后的文件资源ID。<br />
注：
1. `大文件转换所需的时间可能会比较长。`
2. `本接口返回的文件资源ID就是PDF资源ID，可以直接用于【用PDF文件创建签署流程】接口发起合同。`
     */
    async ChannelGetTaskResultApi(req, cb) {
        return this.request("ChannelGetTaskResultApi", req, cb);
    }
    /**
     * 获取设置自动签印章小程序链接。

注意：
<ul><li>需要<code>企业开通自动签</code>后使用。</li>
<li>仅支持<code>已经开通了自动签的个人</code>更换自动签印章。</li>
<li>链接有效期默认7天，<code>最多30天</code>。</li>
<li>该接口的链接适用于<code>小程序</code>端。</li>
<li>该接口不会扣除您的合同套餐，暂不参与计费。</li></ul>
     */
    async ChannelCreateUserAutoSignSealUrl(req, cb) {
        return this.request("ChannelCreateUserAutoSignSealUrl", req, cb);
    }
    /**
     * 激活或续期子客企业， 在激活状态下，企业可以正常发起合同；在非激活状态下，企业仅能查看和签署合同。

**1. 激活**：使用一个许可证将子客企业从未激活状态转变为激活状态。**激活状态的有效期为一年，一年后将自动回到未激活状态**。

**2. 续期**：使用一个许可证将已激活的子客企业的有效期延长一年。只有处于激活状态的子企业才能进行续期操作（**若处于非激活状态，则需先激活**）。您可以使用多个许可证对同一子客企业进行多次续费。


该接口的效果同：**【企业应用管理】 -> 【子客企业管理】 -> 【激活】或者【续期】**

![image](https://qcloudimg.tencent-cloud.cn/raw/cd63761ca6e814c64b4ecf131555b74e.png)


如果不想调用此接口或者页面点击进行激活或续期，可以在【应用扩展服务】中打开自动激活或续期，在许可证充足的情况下会自动激活或续期子客企业

![image](https://qcloudimg.tencent-cloud.cn/raw/2ccb37ef6bde463c15c39fdda789216f.png)
     */
    async CreateChannelSubOrganizationActive(req, cb) {
        return this.request("CreateChannelSubOrganizationActive", req, cb);
    }
    /**
     * 通过此接口（DescribeTemplates）查询该第三方平台子客企业在电子签拥有的有效模板，不包括第三方平台模板。

**适用场景**
 该接口常用来配合<a href="https://qian.tencent.com/developers/partnerApis/startFlows/CreateFlowsByTemplates" target="_blank">用模板创建签署流程</a>和<a href="https://qian.tencent.com/developers/partnerApis/startFlows/ChannelCreateFlowGroupByTemplates" target="_blank">通过多模板创建合同组签署流程</a>接口，作为创建合同的前置接口使用。
通过此接口查询到模板信息后，再通过调用创建合同的接口，指定模板ID，指定模板中需要的填写控件内容等，完成合同文档的创建。

**模板的来源**
子客企业的模板有两种途径获取
- 渠道方(平台方)配置完成后, 分发给同应用的各个子企业
- 子客企业通过CreateConsoleLoginUrl创建的链接登录子客控制台自己创建

**一个模板通常会包含以下结构信息**

- 模板ID, 模板名字等基本信息
- 发起方参与信息Promoter、签署参与方 Recipients，后者会在模板发起合同时用于指定参与方
- 发起方和签署方的填写控件 Components
- 签署方的签署控件 SignComponents

![image](https://qcloudimg.tencent-cloud.cn/raw/ab81fa948a0a6fea14f48cac91d0e36a/channel_DescribeTemplates.png)

模板中各元素的层级关系, 所有的填写控件和签署控件都归属某一个角色(通过控件的ComponentRecipientId来关联)

![image](https://qcloudimg.tencent-cloud.cn/raw/45c638bd93f9c8024763add9ab47c27f.png)


**注意**

>1. 查询条件TemplateId、TemplateName与ChannelTemplateId可同时存在，即可查询同时满足这些条件的模板。
>2. TemplateId 和TemplateIds互为独立，若两个参数都传入，则以TemplateId为准

<font color="red">相关视频指引</font> <br>
1. <a href="https://dyn.ess.tencent.cn/guide/apivideo/essbasic-CreateTemplates.mp4" target="_blank">创建模板&设置成本企业自动签署</a><br>
     */
    async DescribeTemplates(req, cb) {
        return this.request("DescribeTemplates", req, cb);
    }
    /**
     * 此接口（ChannelCancelUserAutoSignEnableUrl）用来撤销发送给个人用户的自动签开通链接，撤销后对应的个人用户开通链接失效。若个人用户已经完成开通，将无法撤销。（处方单场景专用，使用此接口请与客户经理确认）
     */
    async ChannelCancelUserAutoSignEnableUrl(req, cb) {
        return this.request("ChannelCancelUserAutoSignEnableUrl", req, cb);
    }
    /**
     * 此接口（UploadFiles）文件上传。<br/>

适用场景：用于合同，印章的文件上传。文件上传以后，
如果是PDF格式文件可配合<a href="https://qian.tencent.com/developers/partnerApis/startFlows/ChannelCreateFlowByFiles" target="_blank">用PDF文件创建签署流程</a>接口进行合同流程的发起
如果是其他类型可以配合<a href="https://qian.tencent.com/developers/partnerApis/files/ChannelCreateConvertTaskApi" target="_blank">创建文件转换任务</a>接口转换成PDF文件

注:
1. 图片类型(png/jpg/jpeg)限制大小为5M以下, PDF/word/excel等其他格式限制大小为60M以下
2. <font color='red'>此接口调用时需要单独设置Domain请求域名 </font>,  联调开发环境为 <font color='red'>file.test.ess.tencent.cn</font>，正式环境需要设置为<font color='red'>file.ess.tencent.cn</font>，代码示例
```
HttpProfile httpProfile = new HttpProfile();
httpProfile.setEndpoint("file.test.ess.tencent.cn");
```

<font color="red">相关视频指引</font> <br>
1. <a href="https://dyn.ess.tencent.cn/guide/apivideo/essbasic-UploadFiles.mp4" target="_blank">【上传文件代码】编写示例</a><br>
     */
    async UploadFiles(req, cb) {
        return this.request("UploadFiles", req, cb);
    }
    /**
     * 该接口用于发起合同后，生成用户的签署链接 <br/>

**注意**
1. 该签署**链接有效期为30分钟**，过期后将失效，如需签署可重新创建签署链接 。
2. 该接口返回的签署链接适用于APP集成的场景，支持APP打开或浏览器直接打开，**不支持微信小程序嵌入**。配置方式请参考：<a href="https://qian.tencent.com/developers/company/openqianh5/">跳转电子签H5</a>。
如需跳转到小程序的实现，参考微信官方文档（分为<a href="https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html">全屏</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/openEmbeddedMiniProgram.html">半屏</a>两种方式），如何配置也可以请参考: <a href="https://qian.tencent.com/developers/company/openwxminiprogram">跳转电子签小程序配置</a>。
3. 因h5涉及人脸身份认证能力基于慧眼人脸核身，对Android和iOS系统均有一定要求， 因此<font color='red'>App嵌入H5签署合同需要按照慧眼提供的<a href="https://cloud.tencent.com/document/product/1007/61076">慧眼人脸核身兼容性文档</a>做兼容性适配</font>。
     */
    async ChannelCreateFlowSignUrl(req, cb) {
        return this.request("ChannelCreateFlowSignUrl", req, cb);
    }
    /**
     * 此接口（CreateChannelOrganizationInfoChangeUrl）用于创建子客企业信息变更链接。

<h3 id="1">支持变更链接类型，通过入参 Endpoint 指定，默认为WEIXINAPP。</h3>

<h4 id="WEIXINAPP">WEIXINAPP</h4>
<p>创建变更短链。需要在移动端打开，会跳转到微信腾讯电子签小程序进行更换。</p>

<h4 id="APP">APP</h4>
<p>创建变更小程序链接，可从第三方App跳转到微信腾讯电子签小程序进行更换。</p>


<h3 id="2">支持创建企业超管变更链接或企业基础信息变更链接，通过入参 ChangeType 指定。</h3>

<h4 id="1-企业超管变更">1. 企业超管变更</h4>

<p>换成企业的其他员工来当超管</p>

<h4 id="2-企业基础信息变更">2. 企业基础信息变更</h4>

<h5 id="可以变动">可以变动</h5>

<ul>
<li>企业名称<br>
</li>
<li>法定代表人姓名(新法人有邀请链接)<br>
</li>
<li>企业地址和所在地</li>
</ul>

<h5 id="不可变动">不可变动</h5>

<ul>
<li>统一社会信用代码<br>
</li>
<li>企业主体类型</li>
</ul>

<p>如果企业名称变动会引起下面的变动</p>

<ul>
<li>合同:   老合同不做任何处理,   新发起的合同需要用新的企业名字作为签署方, 否则无法签署</li>
<li>印章:   会删除所有的印章所有的机构公章，合同专用章，财务专用章和人事专用章,  然后用新企业名称生成新的机构公章，合同专用章，财务专用章和人事专用章,  而法人章不会处理</li>
<li>证书:   企业证书会重新请求CA机构用新企业名称生成新的证书</li>
</ul>


注意：
1. 生成的电子签小程序链接<font color='red'>只能由企业的法人或者超管</font>点击后进行操作， 其他员工打开后会提示“无权查看该内容”
2. 法人可以无需生成链接，直接在电子签小程序中更换本企业的超管
     */
    async CreateChannelOrganizationInfoChangeUrl(req, cb) {
        return this.request("CreateChannelOrganizationInfoChangeUrl", req, cb);
    }
    /**
     * 接口（ChannelCreateFlowGroupByFiles）用于使用 PDF 文件创建合同组签署流程。

- 该接口允许通过选择多个模板一次性创建多个合同，这些合同被组织在一个合同组中。
- 每个签署方将收到一个签署链接，通过这个链接可以访问并签署合同组中的所有合同。
- 合同组中的合同必须作为一个整体进行签署，不能将合同组拆分成单独的合同进行逐一签署。

<img src="https://qcloudimg.tencent-cloud.cn/raw/a63074a0293c9ff5bf6c0bb74c0d3b20.png"   width="400" />


### 2. 适用场景

该接口适用于需要一次性完成多份合同签署的情况，多份合同一般具有关联性，用户以目录的形式查看合同。

### 3. 发起方要求和签署方实名要求
- **发起方要求**：作为合同发起方的第三方子企业A的员工必须进行实名认证。
- **签署方要求**：签署方可以是多种身份（如第三方子企业的员工、个人、SaaS平台企业员工），其中企业和员工可以不进行实名认证。

**可以作为发起方和签署方的角色列表**

<table>
<thead>
<tr>
<th>场景编号</th>
<th>可作为发起方类型</th>
<th>可作为签署方的类型</th>
</tr>
</thead>

<tbody>
<tr>
<td>场景一</td>
<td>第三方子企业A员工</td>
<td>第三方子企业A员工</td>
</tr>

<tr>
<td>场景二</td>
<td>第三方子企业A员工</td>
<td>第三方子企业B员工</td>
</tr>

<tr>
<td>场景三</td>
<td>第三方子企业A员工</td>
<td>个人/自然人</td>
</tr>

<tr>
<td>场景四</td>
<td>第三方子企业A员工</td>
<td>SaaS平台企业员工</td>
</tr>
</tbody>
</table>

### 4. 签署方参数差异
- 根据签署方的不同类型（第三方子企业的员工、个人、SaaS平台企业员工），传递的参数也不同。具体参数的结构和要求可以参考开发者中心提供的 `FlowApproverInfo` 结构体说明。

### 5. 合同额度的扣减与返还
- **扣减时机**：合同一旦发起，相关的合同额度就会被扣减，合同组下面的每个合同都要扣减一个合同额度。
- **返还条件**：只有在合同被撤销且没有任何签署方签署过，或者只有自动签署的情况下，合同额度才会被返还。
- **不返还的情况**：如果合同已过期、被拒签、签署完成或已解除，合同额度将不会被返还。

### 6. 静默（自动）签署的限制
- 在使用静默（自动）签署功能时，合同签署方不能有填写控件。<font color="red">此接口静默签(企业自动签)能力为白名单功能</font>，使用前请联系对接的客户经理沟通。

### 7.合同组暂不支持抄送功能
     */
    async ChannelCreateFlowGroupByFiles(req, cb) {
        return this.request("ChannelCreateFlowGroupByFiles", req, cb);
    }
    /**
     * 此接口用于查询合同或者合同组的详情信息，支持查询多个（数量不能超过100）。

适用场景：可用于主动查询某个合同或者合同组的详情信息。

注:  `只能查询本企业创建的合同(创建合同用的Agent和此接口用的Agent数据最好一致) `
     */
    async DescribeFlowDetailInfo(req, cb) {
        return this.request("DescribeFlowDetailInfo", req, cb);
    }
    /**
     * 通过此接口（ChannelDescribeBillUsageDetail）查询该第三方平台子客企业的套餐消耗详情。可以支持单个子客和整个应用下所有子客的查询。
<ul>
<li>对于单个子客企业的查询，通过指定子客的唯一标识(Agent.ProxyOrganizationOpenId)来查询该子客消耗详情</li>
<li>对于整个应用下所有企业的查询，不需要指定子客的唯一标识，只需要传入渠道应用标识(Agent.AppId)直接查询整个应用下所有子客企业消耗详情</li>
</ul>
     */
    async ChannelDescribeBillUsageDetail(req, cb) {
        return this.request("ChannelDescribeBillUsageDetail", req, cb);
    }
    /**
     * 批量清理未认证的企业认证流程。

此接口用来清除企业方认证信息填写错误，批量清理认证中的认证流信息。
为接口[提交子企业批量认证链接创建任务](https://qian.tencent.com/developers/partnerApis/accounts/CreateBatchOrganizationRegistrationTasks) 和[查询子企业批量认证链接](https://qian.tencent.com/developers/partnerApis/accounts/DescribeBatchOrganizationRegistrationUrls) 接口的扩展接口。即在批量认证过程中，当发起认证企业发现超管信息错误的时候，可以将当前超管下的所有认证流企业清除。

注意：
**这个接口的操作人必须跟生成批量认证链接接口的应用号一致，才可以调用，否则会返回当前操作人没有认证中的企业认证流**
     */
    async DeleteOrganizationAuthorizations(req, cb) {
        return this.request("DeleteOrganizationAuthorizations", req, cb);
    }
    /**
     * 在已启动的签署流程中，可对签署截止日期进行延期操作，主要分为以下两个层面：
1. <b> 合同（流程）层面</b>：仅需提供签署流程ID。此操作将对整个签署流程以及未单独设置签署截止时间的签署人进行延期。
2. <b> 签署人层面</b>  ：需提供流程ID和签署人ID。此操作针对特定签署人进行延期，特别是对于有序合同（流程），签署截止时间不得超过后续签署人的流程截止时间。

此接口存在以下限制：
1. 执行操作的员工须为<font  color="red">发起方企业的超级管理员、法定代表人或签署流程发起人</font>。
2. 延长整个签署流程时，<font  color="red">应至少有一方尚未签署</font>（即签署流程不能处于已全部签署完成、已拒签、已过期、已撤回、拒绝填写、已解除等状态）。
3. 延长整个签署流程时，新的签署截止日期应晚于已设定的签署截止日期和当前日期。
4. 延长签署方截止时间时，<font  color="red">签署方不能处于流程完结或已终止状态</font>（即签署人不能处于已签署、已拒签、已过期、已撤回、拒绝填写、已解除等状态）。
5. 延长签署方截止时间时，新的签署截止日期应晚于当前日期和已设定的截止日期。若为有序合同，还需早于或等于下一签署人的截止日期，且早于签署流程整体的截止日期。
6. <font  color="red">不支持操作合同组合同</font>。

合同（流程）层面截止时间子企业控制台展示的位置：
![image](https://qcloudimg.tencent-cloud.cn/raw/f0f88c0eb49a926da9a86e5a6e9efa8b.png)
     */
    async ModifyFlowDeadline(req, cb) {
        return this.request("ModifyFlowDeadline", req, cb);
    }
    /**
     * 通过此接口，可以创建企业批量签署链接，员工只需点击链接即可跳转至控制台进行批量签署。

注：
- 员工必须在企业下完成实名认证，且需作为批量签署合同的签署方或者领取方。
- 仅支持传入待签署或者待领取的合同，待填写暂不支持。
- 员工批量签署，支持多种签名方式，包括手写签名、临摹签名、系统签名、个人印章、签批控件等。

签署的嵌入页面长相如下：
![image](https://qcloudimg.tencent-cloud.cn/raw/a4754bc835a3f837ddec1e28b02ed9c0.png)
     */
    async ChannelCreateOrganizationBatchSignUrl(req, cb) {
        return this.request("ChannelCreateOrganizationBatchSignUrl", req, cb);
    }
    /**
     * 将指定印章授权给第三方平台子客企业下的某些员工
     */
    async ChannelCreateSealPolicy(req, cb) {
        return this.request("ChannelCreateSealPolicy", req, cb);
    }
    /**
     * 通过接口[批量撤销合同流程](https://qian.tencent.com/developers/partnerApis/operateFlows/ChannelBatchCancelFlows)或者[获取批量撤销签署流程腾讯电子签小程序链接](https://qian.tencent.com/developers/partnerApis/operateFlows/ChannelCreateBatchCancelFlowUrl)发起批量撤销任务后，可通过此接口查询批量撤销任务的结果。
     */
    async DescribeCancelFlowsTask(req, cb) {
        return this.request("DescribeCancelFlowsTask", req, cb);
    }
    /**
     * 此接口（CreateConsoleLoginUrl）用于创建第三方平台子客企业控制台Web/移动登录链接。支持web控制台、电子签小程序和H5链接。登录链接是进入子客web企业控制台的唯一入口。

Web链接访问后，会根据子客企业(**Agent中ProxyOrganizationOpenId表示**)和员工(**Agent中OpenId表示**)的状态，进入不同的流程，主要情况分类如下：
<table>
<thead>
<tr>
<th>子客企业状态</th>
<th>子客企业员工状态</th>
<th>点击链接进入的流程</th>
</tr>
</thead>
<tbody>
<tr>
<td>企业未激活</td>
<td>员工未认证</td>
<td>进入企业激活流程，首次完成企业激活流程的员工会成为超管</td>
</tr>
<tr>
<td>企业已激活</td>
<td>员工未认证</td>
<td>进入员工认证并加入企业流程</td>
</tr>
<tr>
<td>企业已激活</td>
<td>员工已认证</td>
<td>进入子客企业Web控制台</td>
</tr>
</tbody>
</table>
如果是企业激活流程，需要注意如下情况：

1. 若在激活过程中，**更换用户OpenID重新生成链接，之前的认证会被清理**。因此不要在企业认证过程生成多个链接给多人同时操作，会导致认证过程互相影响。
2. 若您认证中发现信息有误需要重新认证，**可通过更换用户OpenID重新生成链接的方式，来清理掉已有的流程**。

系统的渠道企业, 应用, 子客企业, 子客员工的组织形式
![image](https://qcloudimg.tencent-cloud.cn/raw/77677faeea26c9d7f37474597c81fe01.png)


<font color="red">相关视频指引</font> <br>
1. <a href="https://dyn.ess.tencent.cn/guide/apivideo/essbasic-createconsoleloginin.mp4" target="_blank">【生成子客登录链接】代码编写 &  子企业认证示例</a><br>
     */
    async CreateConsoleLoginUrl(req, cb) {
        return this.request("CreateConsoleLoginUrl", req, cb);
    }
    /**
     * 通过此接口指定合同、签署人、填写控件等信息，生成嵌入式链接，此链接可以嵌入到其他网页或者直接打开，打开后进入发起页面。在此页面上，合同信息和签署人信息均不可更改。

注意：
1. <font color="red">仅支持在PC浏览器</font>上进行操作和使用。
2. 在使用<font color="red">模板发起合同时，需指定RecipientId</font>以明确参与方在模板中所扮演的角色。

**嵌入式签署人-各种场景传参说明**:

<table>
<thead>
<tr>
<th>场景编号</th>
<th>可作为签署方的类型</th>
<th>签署方传参说明</th>
</tr>
</thead>

<tbody>
<tr>
<td>场景一</td>
<td>第三方子企业员工</td>
<td>OpenId、OrganizationName、OrganizationOpenId必传 ,ApproverType设置为0</td>
</tr>
<tr>
<td>场景二</td>
<td>SaaS平台企业员工</td>
<td>Name、Mobile、OrganizationName必传，NotChannelOrganization=True。 ApproverType设置为0</td>
</tr>
<tr>
<td>场景三</td>
<td>个人/自然人</td>
<td>Name、Mobile必传, ApproverType设置为1</td>
</tr>
</tbody>
</table>

嵌入的页面样式如下：
![image](https://qcloudimg.tencent-cloud.cn/raw/b2ae013fb4d747891dd3815bbe897208.png)
     */
    async ChannelCreatePrepareFlow(req, cb) {
        return this.request("ChannelCreatePrepareFlow", req, cb);
    }
    /**
     * 通过合同编号生成批量撤销合同的链接，单次最多支持撤销100份合同,   返回的链接需要有此权限的人<font color='red'>**合同的发起人（并已经授予撤销权限）或者发起人所在企业的超管、法人**</font>在<font color='red'>**手机端**</font>打开,  跳转到腾讯电子签小程序输入撤销原因来进行撤销合同

适用场景：如果某个合同当前**至少还有一方没有签署**，则可通过该接口取消该合同流程。常用于合同发错、内容填错，需要及时撤销的场景。

- **可撤回合同状态**：未全部签署完成
- **不撤回合同状态**：已全部签署完成、已拒签、已过期、已撤回、拒绝填写、已解除等合同状态。

批量撤销结果可以通过接口返回的TaskId关联[批量撤销任务结果回调](https://qian.tencent.com/developers/partner/callback_types_contracts_sign#%E4%B9%9D-%E6%89%B9%E9%87%8F%E6%92%A4%E9%94%80%E7%BB%93%E6%9E%9C%E5%9B%9E%E8%B0%83)或通过接口[查询批量撤销合同结果](https://qian.tencent.com/developers/partnerApis/operateFlows/DescribeCancelFlowsTask)主动查询。

注:
- 签署完毕的合同需要双方走解除流程将合同作废，可以参考<a href="https://qian.tencent.com/developers/partnerApis/startFlows/ChannelCreateReleaseFlow" target="_blank">发起解除合同流程接口</a>
- <font color='red'>只有撤销没有参与方签署过或只有自动签署签署过的合同，才会返还合同额度。</font>
- 撤销后可以看合同PDF内容的人员： 发起方的超管， 发起方自己，发起方撤销合同的操作人员，已经签署合同、已经填写合同、邀请填写已经补充信息的参与人员， 其他参与人员看不到合同的内容。
     */
    async ChannelCreateBatchCancelFlowUrl(req, cb) {
        return this.request("ChannelCreateBatchCancelFlowUrl", req, cb);
    }
    /**
     * 此接口（ChannelDeleteRole）用来删除企业自定义角色。

注：**系统角色不可删除。**
     */
    async ChannelDeleteRole(req, cb) {
        return this.request("ChannelDeleteRole", req, cb);
    }
    /**
     * 此接口（SyncProxyOrganization）用于同步第三方平台子客企业信息，包括企业名称、企业营业执照、企业统一社会信用代码和法人姓名等，便于子客企业在企业激活过程中无需手动上传营业执照或补充企业信息。

注意：

- **需要在<a href="https://qian.tencent.com/developers/partnerApis/accounts/CreateConsoleLoginUrl" target="_blank">生成子客登录链接</a>前同步的企业信息**, 否则会出现信息同步没有用的情形
- **企业信息需要和营业执照信息对应**,  否则会出现激活过程验证不通过的问题

![image](https://qcloudimg.tencent-cloud.cn/raw/7ec91b79a0a4860e77c9ff9f4a5f13ad/channel_SyncProxyOrganization2.png)


- **企业统一社会信用代码**: 对应上图中的**1**
- **第三方平台子客企业名称**: 对应上图中的**2**
- **企业法定代表人的名字**:对应上图中的**3**
- **企业详细住所**:对应上图中的**4**
     */
    async SyncProxyOrganization(req, cb) {
        return this.request("SyncProxyOrganization", req, cb);
    }
    /**
     * 此接口（ChannelUpdateSealStatus）用于第三方应用平台为子客企业更新印章状态。
     */
    async ChannelUpdateSealStatus(req, cb) {
        return this.request("ChannelUpdateSealStatus", req, cb);
    }
    /**
     * 通过此接口，创建小程序批量签署链接，个人/企业员工点击此链接即可跳转小程序进行批量签署。
请确保生成链接时候的身份信息和签署合同参与方的信息保持一致。

注：
- 使用此接口生成链接，需要提前开通 `个人签署方仅校验手机号` 功能，在 `腾讯电子签网页端-企业设置-拓展服务` 中可以找到。
- 个人参与方点击链接后需短信验证码才能查看合同内容。
- 个人用户批量签署，需要传Name，Mobile，IdCardNumber(IdCardType) 参数。
- saas企业员工用户批量签署，在传递了姓名等基本信息参数的情况下，还需要传OrganizationName（参与方所在企业名称）参数生成签署链接，<font color="red">请确保此企业已完成腾讯电子签企业认证</font>。
- 子客企业员工用户批量签署，需要传递员工OpenId和子客企业的OrganizationOpenId。<font color="red">请确保此OrganizationOpenId对应子客已经认证，且OpenId对应员工此子客下已经实名</font>。Name，Mobile, IdCard等信息此时可以不传，系统会查询此OpenId实名信息自动补充。
- 生成批量签署链接时，合同目标参与方状态需为<font color="red">待签署</font>状态。
- 个人批量签署进行的合同的签名区， 全部变成<font color="red">手写签名</font>（不管合同里边设置的签名限制）来进行。
- 不支持签署方含有签批控件，或设置了签署方在签署时自行添加签署控件功能的合同进行批量签署。
     */
    async ChannelCreateBatchSignUrl(req, cb) {
        return this.request("ChannelCreateBatchSignUrl", req, cb);
    }
    /**
     * 给医疗个人自动签许可续期。续期成功后，可对医疗自动签许可追加一年有效期，只可续期一次。

注意: `处方单等特殊场景专用，此接口为白名单功能，使用前请联系对接的客户经理沟通。`
     */
    async ChannelRenewAutoSignLicense(req, cb) {
        return this.request("ChannelRenewAutoSignLicense", req, cb);
    }
    /**
     * 通过此接口获取个人用户自动签的开通状态。

注意: `处方单等特殊场景专用，此接口为白名单功能，使用前请联系对接的客户经理沟通。`
     */
    async ChannelDescribeUserAutoSignStatus(req, cb) {
        return this.request("ChannelDescribeUserAutoSignStatus", req, cb);
    }
    /**
     * 发起解除协议的主要应用场景为：基于一份已经签署的合同(签署流程)，进行解除操作。
解除协议的模板是官方提供，经过提供法务审核，暂不支持自定义。具体用法可以参考文档[合同解除](https://qian.tencent.com/developers/partner/flow_release)。

注意：
<ul><li><code>原合同必须签署完</code>成后才能发起解除协议。</li>
<li>只有原合同企业类型的参与人才能发起解除协议，<code>个人参与方不能发起解除协议</code>。</li>
<li>原合同个人类型参与人必须是解除协议的参与人，<code>不能更换其他第三方个人</code>参与解除协议。</li>
<li>如果原合同企业参与人无法参与解除协议，可以指定同企业具有同等权限的<code>企业员工代为处理</code>。</li>
<li>发起解除协议同发起其他企业合同一样，也会参与合同<code>扣费</code>，扣费标准同其他类型合同。</li>
<li>在解除协议签署完毕后，原合同及解除协议均变为已解除状态。</li>
<li>非原合同企业参与人发起解除协议时，需要有<code>解除合同的权限</code>。</li>
</ul>
     */
    async ChannelCreateReleaseFlow(req, cb) {
        return this.request("ChannelCreateReleaseFlow", req, cb);
    }
    /**
     * 获取企业员工信息, 可以获取员工的名字,OpenId,UserId和简述的角色等信息，支持设置过滤条件以筛选员工查询结果。

**注**:通过<a href="https://qian.tencent.com/developers/partnerApis/accounts/SyncProxyOrganizationOperators" target="_blank">企业员工新增或离职</a>接口增加的新员工或者离职的员工也会在列表中。
     */
    async ChannelDescribeEmployees(req, cb) {
        return this.request("ChannelDescribeEmployees", req, cb);
    }
    /**
     * 该接口用于结束动态签署方2.0的合同流程。


**功能开通**
- 动态签署方2.0功能的使用需要先<font color="red">联系产品经理开通模块化计费功能</font>，然后到控制台中打开此功能。详细的使用说明请参考<a href="https://qian.tencent.com/developers/company/dynamic_signer_v2" target="_blank">动态签署方2.0</a>文档。

**使用条件**
- 此接口只能在<font color="red">合同处于非终态且<b>所有的签署方都已经完成签署</b></font>。一旦合同进入终态（例如：过期、拒签、撤销或者调用过此接口成功过），将无法通过此接口结束合同流程。
     */
    async ArchiveDynamicFlow(req, cb) {
        return this.request("ArchiveDynamicFlow", req, cb);
    }
    /**
     * 生成合成后的各类企业授权书，包括：
- 企业认证超管授权书
- 超管变更授权书
- 企业注销授权书

注: 需自行保证传入真实的企业/法人/超管信息，否则后续的审核将会拒绝。
     */
    async CreateOrganizationAuthFile(req, cb) {
        return this.request("CreateOrganizationAuthFile", req, cb);
    }
    /**
     * 使用此接口，用来绑定企业实名员工的角色，
支持以电子签userId、客户系统openId两种方式进行绑定。

对应控制台的操作如下图
![image](https://qcloudimg.tencent-cloud.cn/raw/5b41194d3cb3f2058ec0ba0fb5ebc6a6.png)
     */
    async ChannelCreateUserRoles(req, cb) {
        return this.request("ChannelCreateUserRoles", req, cb);
    }
    /**
     * 接口（ChannelCreateFlowGroupByTemplates）用于通过多模板创建合同组签署流程。

- 该接口允许通过选择多个模板一次性创建多个合同，这些合同被组织在一个合同组中。
- 每个签署方将收到一个签署链接，通过这个链接可以访问并签署合同组中的所有合同。
- 合同组中的合同必须作为一个整体进行签署，不能将合同组拆分成单独的合同进行逐一签署。

<img src="https://qcloudimg.tencent-cloud.cn/raw/a63074a0293c9ff5bf6c0bb74c0d3b20.png"   width="400" />

### 2. 适用场景

该接口适用于需要一次性完成多份合同签署的情况，多份合同一般具有关联性，用户以目录的形式查看合同。

### 3. 发起方要求和签署方实名要求
- **发起方要求**：作为合同发起方的第三方子企业A的员工必须进行实名认证。
- **签署方要求**：签署方可以是多种身份（如第三方子企业的员工、个人、SaaS平台企业员工），其中企业和员工可以不进行实名认证。

**可以作为发起方和签署方的角色列表**

<table>
<thead>
<tr>
<th>场景编号</th>
<th>可作为发起方类型</th>
<th>可作为签署方的类型</th>
</tr>
</thead>

<tbody>
<tr>
<td>场景一</td>
<td>第三方子企业A员工</td>
<td>第三方子企业A员工</td>
</tr>
<tr>
<td>场景二</td>
<td>第三方子企业A员工</td>
<td>第三方子企业B员工</td>
</tr>

<tr>
<td>场景三</td>
<td>第三方子企业A员工</td>
<td>个人/自然人</td>
</tr>

<tr>
<td>场景四</td>
<td>第三方子企业A员工</td>
<td>SaaS平台企业员工</td>
</tr>
</tbody>
</table>

### 4. 签署方参数差异
- 根据签署方的不同类型（第三方子企业的员工、个人、SaaS平台企业员工），传递的参数也不同。具体参数的结构和要求可以参考开发者中心提供的 `FlowApproverInfo` 结构体说明。

### 5. 合同额度的扣减与返还
- **扣减时机**：合同一旦发起，相关的合同额度就会被扣减，合同组下面的每个合同都要扣减一个合同额度。
- **返还条件**：只有在合同被撤销且没有任何签署方签署过，或者只有自动签署的情况下，合同额度才会被返还。
- **不返还的情况**：如果合同已过期、被拒签、签署完成或已解除，合同额度将不会被返还。

### 6. 静默（自动）签署的限制
- 在使用静默（自动）签署功能时，合同签署方不能有填写控件。<font color="red">此接口静默签(企业自动签)能力为白名单功能</font>，使用前请联系对接的客户经理沟通。

### 7.合同组暂不支持抄送功能
     */
    async ChannelCreateFlowGroupByTemplates(req, cb) {
        return this.request("ChannelCreateFlowGroupByTemplates", req, cb);
    }
    /**
     * 获取出证报告任务执行结果，返回报告 URL。

注意：

- 使用此功能`需搭配出证套餐` ，使用前请联系对接的客户经理沟通。
- 需调用创建并返回出证报告接口<a href="https://qian.tencent.com/developers/partnerApis/certificate/CreateChannelFlowEvidenceReport" target="_blank">提交申请出证报告任务</a>获取报告编号后调用当前接口获取报告链接。

![image](https://qcloudimg.tencent-cloud.cn/raw/1b4307ed143a992940c41d61192d3a0f/channel_CreateChannelFlowEvidenceReport.png)
     */
    async DescribeChannelFlowEvidenceReport(req, cb) {
        return this.request("DescribeChannelFlowEvidenceReport", req, cb);
    }
    /**
     * 此接口（OperateChannelTemplate）用于针对第三方应用平台模板库中的模板对子客企业发布授权的查询和设置。
平台模板库中的模板的位置在控制台 企业应用管理 中下面的应用模板库管理目录, 可以参照下图位置
![image](https://qcloudimg.tencent-cloud.cn/raw/7f2b6c94164b3e931efc9a037e0400f7.png)

# 支持的操作

## 1. 查询模板的子客企业授权 (OperateType=SELECT)
- 查询模板的授权子企业列表

## 2. 修改模板的子客企业授权 (OperateType=UPDATE)
- 当模板未发布时，可以修改模板的模板授权范围是**所有第三方应用合作企业**(AuthTag设置为all)或者**指定第三方应用合作企业**(AuthTag设置为part)，**当模板发布后，不可做此修改**
- 如果模板是部分授权,  可通过ProxyOrganizationOpenIds增加子客的授权范围。

## 3. 取消模板的子客企业授权 (OperateType=DELETE)
- 对子客企业进行模板库中模板授权范围的进行删除操作。
- 主要对于手动领取的模板，去除授权后子客在模板库中看不到，就无法再领取了。但是**已经领取过成为自有模板的不会同步删除**。
- 对于自动领取的模板，由于已经下发，更改授权不会影响。
- 如果要同步删除子客自有模板库中的模板，请使用OperateType=UPDATE+Available参数处理。
     */
    async OperateChannelTemplate(req, cb) {
        return this.request("OperateChannelTemplate", req, cb);
    }
    /**
     * 此接口（SyncProxyOrganizationOperators）用于同步 第三方平台子客企业经办人列表，主要是同步经办人的离职状态。
子客Web控制台的组织架构管理，依赖于第三方应用平台的，无法在页面针对员工做新增/更新/离职等操作， 必须通过 API 来操作。

- **新增员工的场景**:    通过本接口提前导入员工列表, 然后调用<a href="https://qian.tencent.com/developers/partnerApis/accounts/CreateConsoleLoginUrl" target="_blank">生成子客登录链接</a>分享给对应的员工进行实名, 新增员工后员工的状态为**未实名**, 通过链接实名后状态变为**已实名**, 已实名员工就可以参与合同的发起。

- **员工离职的场景**: 通过本接口将员工置为离职, 员工无法登录控制台和腾讯电子签小程序进行操作了,   同时给此员工分配的openid会被回收可以给其他新员工使用 (离职后员工数据会被置空,  再次加入公司会从零开始) ,  若员工信息有误可通过离职后在新增来解决,  离职员工状态为**离职**。

![image](https://qcloudimg.tencent-cloud.cn/raw/7a27a6bb0e4d39c2f6aa2a0b39946181/channel_SyncProxyOrganizationOperators.png)

**注**:
-  新增员工可以配置白名单限制注册使用对应openid的员工必须满足SyncProxyOrganizationOperators导入的(默认生成子客登录链接生成的链接可以任意员工点击注册绑定对应的openid), 此白名单需要咨询接入经理
-  <font color='red'>超管和法人无法通过此接口离职</font>,  需要超管和法人将权限转移给其他人后才可通过此接口离职
- 新增员工的场景同ID不同员工会覆盖掉上一个同ID的员工, 如果上一个员工已经实名则不会被覆盖
     */
    async SyncProxyOrganizationOperators(req, cb) {
        return this.request("SyncProxyOrganizationOperators", req, cb);
    }
    /**
     * 本接口（ChannelCreateEmbedWebUrl）用于创建可嵌入web页面的URL（此web页面可以通过iframe方式嵌入到贵方系统的网页中），支持以下类型的Web链接创建：
1. 创建印章
2. 创建模板
3. 修改模板
4. 预览模板
5. 预览合同流程

预览模板的嵌入页面长相如下：
![image](https://qcloudimg.tencent-cloud.cn/raw/57bdda4a884e3f5b2de12d5a282a3651.png)

预览合同流程的嵌入页面长相如下：
![image](https://qcloudimg.tencent-cloud.cn/raw/dc7af994e2f6da56bdad5975e927de34.png)
     */
    async ChannelCreateEmbedWebUrl(req, cb) {
        return this.request("ChannelCreateEmbedWebUrl", req, cb);
    }
    /**
     * 获取个人用户自动签的开通链接。

注意: `处方单等特殊场景专用，此接口为白名单功能，使用前请联系对接的客户经理沟通。`
     */
    async ChannelCreateUserAutoSignEnableUrl(req, cb) {
        return this.request("ChannelCreateUserAutoSignEnableUrl", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249001, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201222 = void 0;
const Models = require("./essbasic_models");
const essbasic_client_1 = require("./essbasic_client");
exports.v20201222 = {
    Client: essbasic_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./essbasic_models":1738984249002,"./essbasic_client":1738984249003}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249002, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249003, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * essbasic client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("essbasic.tencentcloudapi.com", "2020-12-22", clientConfig);
    }
    /**
     * 该接口为第三方平台向电子签平台验证手机号三要素
     */
    async CheckMobileVerification(req, cb) {
        return this.request("CheckMobileVerification", req, cb);
    }
    /**
     * 此接口（CreateSubOrganization）用于在腾讯电子签内注册子机构。
     */
    async CreateSubOrganization(req, cb) {
        return this.request("CreateSubOrganization", req, cb);
    }
    /**
     * 此接口（CancelFlow）用于撤销正在进行中的流程。

注：已归档流程不可完成撤销动作。
     */
    async CancelFlow(req, cb) {
        return this.request("CancelFlow", req, cb);
    }
    /**
     * 此接口（DescribeFileUrls）用于获取签署文件下载的URL。
     */
    async DescribeFileUrls(req, cb) {
        return this.request("DescribeFileUrls", req, cb);
    }
    /**
     * 该接口为第三方平台向电子签平台获取慧眼H5人脸核身Url
     */
    async CreateH5FaceIdUrl(req, cb) {
        return this.request("CreateH5FaceIdUrl", req, cb);
    }
    /**
     * 第三方应用可通过此接口（DescribeFlowApprovers）查询流程参与者信息。
     */
    async DescribeFlowApprovers(req, cb) {
        return this.request("DescribeFlowApprovers", req, cb);
    }
    /**
     * 该接口为第三方平台向电子签平台验证银行卡四要素
     */
    async CheckBankCard4EVerification(req, cb) {
        return this.request("CheckBankCard4EVerification", req, cb);
    }
    /**
     * 此接口 (DeleteSeal) 用于删除指定ID的印章。

注意：默认印章不支持删除
     */
    async DeleteSeal(req, cb) {
        return this.request("DeleteSeal", req, cb);
    }
    /**
     * 此接口（CreateSignUrl）用于生成指定用户的签署URL。

注：调用此接口前，请确保您已提前调用了发送流程接口（SendFlow）指定相关签署方。
     */
    async CreateSignUrl(req, cb) {
        return this.request("CreateSignUrl", req, cb);
    }
    /**
     * 此接口（DescribeUsers）用于查询应用号下的个人用户信息。

注：此接口仅可查询您所属机构应用号创建的个人用户信息，不可跨应用/跨机构查询。
     */
    async DescribeUsers(req, cb) {
        return this.request("DescribeUsers", req, cb);
    }
    /**
     * 发送流程并获取签署URL
     */
    async SendFlowUrl(req, cb) {
        return this.request("SendFlowUrl", req, cb);
    }
    /**
     * 此接口用于发送签署验证码
     */
    async SendSignInnerVerifyCode(req, cb) {
        return this.request("SendSignInnerVerifyCode", req, cb);
    }
    /**
     * 查询流程文件
     */
    async DescribeFlowFiles(req, cb) {
        return this.request("DescribeFlowFiles", req, cb);
    }
    /**
     * 此接口（CreateSeal）用于创建个人/企业印章。

注意：使用FileId参数指定印章，需先调用多文件上传 (UploadFiles) 上传印章图片。
     */
    async CreateSeal(req, cb) {
        return this.request("CreateSeal", req, cb);
    }
    /**
     * 此接口 (ModifyUserDefaultSeal) 用于重新指定个人默认印章。
     */
    async ModifyUserDefaultSeal(req, cb) {
        return this.request("ModifyUserDefaultSeal", req, cb);
    }
    /**
     * 此接口（CreatePreviewSignUrl）用于生成生成预览签署URL。

注：调用此接口前，请确保您已提前调用了发送流程接口（SendFlow）指定相关签署方。
     */
    async CreatePreviewSignUrl(req, cb) {
        return this.request("CreatePreviewSignUrl", req, cb);
    }
    /**
     * 此接口用于确认验证码是否正确
     */
    async CheckVerifyCodeMatchFlowId(req, cb) {
        return this.request("CheckVerifyCodeMatchFlowId", req, cb);
    }
    /**
     * 该接口为第三方平台向电子签平台检测慧眼或腾讯电子签小程序人脸核身结果
     */
    async CheckFaceIdentify(req, cb) {
        return this.request("CheckFaceIdentify", req, cb);
    }
    /**
     * 此接口（GenerateUserSeal）用于生成个人签名图片。

注意：
1. 个人签名由用户注册时预留的姓名信息生成，不支持自定义签名内容。
2. 个人用户仅支持拥有一个系统生成的电子签名。
     */
    async GenerateUserSeal(req, cb) {
        return this.request("GenerateUserSeal", req, cb);
    }
    /**
     * 此接口（UploadFiles）用于文件上传。
     */
    async UploadFiles(req, cb) {
        return this.request("UploadFiles", req, cb);
    }
    /**
     * 此接口（DescribeCustomFlowIds）用于通过自定义流程id来查询对应的电子签流程id
     */
    async DescribeCustomFlowIds(req, cb) {
        return this.request("DescribeCustomFlowIds", req, cb);
    }
    /**
     * 此接口（CreateSubOrganizationAndSeal）用于注册子机构，同时系统将为该子企业自动生成一个默认电子印章图片。

注意：
1. 在后续的签署流程中，若未指定签署使用的印章ID，则默认调用自动生成的印章图片进行签署。
2. 此接口为白名单接口，如您需要使用此能力，请提前与客户经理沟通或邮件至e-contract@tencent.com与我们联系。
     */
    async CreateSubOrganizationAndSeal(req, cb) {
        return this.request("CreateSubOrganizationAndSeal", req, cb);
    }
    /**
     * 通过此接口（DescribeFlow）可查询签署流程的详细信息。
     */
    async DescribeFlow(req, cb) {
        return this.request("DescribeFlow", req, cb);
    }
    /**
     * 此接口（CreateFlowByFiles）用于通过PDF文件创建签署流程。

注意：调用此接口前，请先调用多文件上传接口 (UploadFiles)，提前上传合同文件。
     */
    async CreateFlowByFiles(req, cb) {
        return this.request("CreateFlowByFiles", req, cb);
    }
    /**
     * 第三方应用可通过此接口（DescribeCatalogApprovers）查询指定目录的参与者列表
     */
    async DescribeCatalogApprovers(req, cb) {
        return this.request("DescribeCatalogApprovers", req, cb);
    }
    /**
     * 此接口（DescribeSubOrganizations）用于查询子机构信息。

注：此接口仅可查询您所属机构应用号创建的子机构信息，不可跨应用/跨机构查询。
     */
    async DescribeSubOrganizations(req, cb) {
        return this.request("DescribeSubOrganizations", req, cb);
    }
    /**
     * 该接口为第三方平台向电子签平台验证银行卡二要素
     */
    async CheckBankCard2EVerification(req, cb) {
        return this.request("CheckBankCard2EVerification", req, cb);
    }
    /**
     * 此接口（ArchiveFlow）用于流程的归档。

注意：归档后的流程不可再进行发送、签署、拒签、撤回等一系列操作。
     */
    async ArchiveFlow(req, cb) {
        return this.request("ArchiveFlow", req, cb);
    }
    /**
     * 该接口为第三方平台向电子签平台验证手机号二要素
     */
    async CheckMobileAndName(req, cb) {
        return this.request("CheckMobileAndName", req, cb);
    }
    /**
     * 生成企业电子印章
     */
    async GenerateOrganizationSeal(req, cb) {
        return this.request("GenerateOrganizationSeal", req, cb);
    }
    /**
     * 此接口（ModifySubOrganizationInfo）用于更新子机构信息。

注：若修改子机构名称或更新机构证件照片，需要重新通过子机构实名接口（VerifySubOrganization）进行重新实名。
     */
    async ModifySubOrganizationInfo(req, cb) {
        return this.request("ModifySubOrganizationInfo", req, cb);
    }
    /**
     * 第三方应用可通过此接口（CreateUserAndSeal）注册腾讯电子签实名个人用户，同时系统将为该用户自动生成一个默认电子签名图片。

注意：
1. 在后续的签署流程中，若未指定签署使用的印章ID，则默认调用自动生成的签名图片进行签署。
2. 此接口为白名单接口，如您需要使用此能力，请提前与客户经理沟通或邮件至e-contract@tencent.com与我们联系。
     */
    async CreateUserAndSeal(req, cb) {
        return this.request("CreateUserAndSeal", req, cb);
    }
    /**
     * 通过此接口（DestroyFlowFile）可删除指定流程中的合同文件。

注：调用此接口前，请确保此流程已属于归档状态。您可通过查询流程信息接口（DescribeFlow）进行查询。
     */
    async DestroyFlowFile(req, cb) {
        return this.request("DestroyFlowFile", req, cb);
    }
    /**
     * 此接口（ModifySeal）用于修改指定印章ID的印章图片和名称。

注：印章类型暂不支持修改，如需调整，请联系客服经理或通过创建印章接口（CreateSeal）进行创建新印章。
     */
    async ModifySeal(req, cb) {
        return this.request("ModifySeal", req, cb);
    }
    /**
     * 根据用户自定义id查询文件id
     */
    async DescribeFileIdsByCustomIds(req, cb) {
        return this.request("DescribeFileIdsByCustomIds", req, cb);
    }
    /**
     * 此接口（SignFlow）可用于对流程文件进行签署。
     */
    async SignFlow(req, cb) {
        return this.request("SignFlow", req, cb);
    }
    /**
     * 该接口为第三方平台向电子签平台获取慧眼人脸核身结果
     */
    async DescribeFaceIdResults(req, cb) {
        return this.request("DescribeFaceIdResults", req, cb);
    }
    /**
     * 第三方应用可通过此接口（DescribeCatalogSignComponents）拉取目录签署区
     */
    async DescribeCatalogSignComponents(req, cb) {
        return this.request("DescribeCatalogSignComponents", req, cb);
    }
    /**
     * 此接口（RejectFlow）用于用户拒绝签署合同流程。
     */
    async RejectFlow(req, cb) {
        return this.request("RejectFlow", req, cb);
    }
    /**
     * 此接口（ModifyUser）用于更新个人用户信息。

注：若修改用户姓名，需要重新通过个人用户实名接口（VerifyUser）进行重新实名。
     */
    async ModifyUser(req, cb) {
        return this.request("ModifyUser", req, cb);
    }
    /**
     * 此接口（VerifySubOrganization）用于通过子机构的实名认证。

注：此接口为白名单接口，如您需要使用此能力，请提前与客户经理沟通或邮件至e-contract@tencent.com与我们联系。
     */
    async VerifySubOrganization(req, cb) {
        return this.request("VerifySubOrganization", req, cb);
    }
    /**
     * 第三方应用可通过此接口（VerifyUser）将腾讯电子签个人用户的实名认证状态设为通过。

注：此接口为白名单接口，如您需要使用此能力，请提前与客户经理沟通或邮件至e-contract@tencent.com与我们联系。
     */
    async VerifyUser(req, cb) {
        return this.request("VerifyUser", req, cb);
    }
    /**
     * 此接口（DescribeCustomFlowIdsByFlowId）用于根据流程id反查自定义流程id
     */
    async DescribeCustomFlowIdsByFlowId(req, cb) {
        return this.request("DescribeCustomFlowIdsByFlowId", req, cb);
    }
    /**
     * 该接口为第三方平台向电子签平台获取慧眼人脸核身照片
     */
    async DescribeFaceIdPhotos(req, cb) {
        return this.request("DescribeFaceIdPhotos", req, cb);
    }
    /**
     * 该接口为第三方平台向电子签平台获取慧眼慧眼API签名
     */
    async CreateFaceIdSign(req, cb) {
        return this.request("CreateFaceIdSign", req, cb);
    }
    /**
     * 该接口为第三方平台向电子签平台验证姓名和身份证信息
     */
    async CheckIdCardVerification(req, cb) {
        return this.request("CheckIdCardVerification", req, cb);
    }
    /**
     * 该接口为第三方平台向电子签平台验证银行卡三要素
     */
    async CheckBankCard3EVerification(req, cb) {
        return this.request("CheckBankCard3EVerification", req, cb);
    }
    /**
     * 此接口（SendFlow）用于指定签署者及签署内容，后续可通过生成签署接口（CreateSignUrl）获取签署url。
     */
    async SendFlow(req, cb) {
        return this.request("SendFlow", req, cb);
    }
    /**
     * 此接口（CreateUser）用于注册腾讯电子签个人用户。
     */
    async CreateUser(req, cb) {
        return this.request("CreateUser", req, cb);
    }
    /**
     * 此接口 (ModifyOrganizationDefaultSeal) 用于重新指定企业默认印章。
     */
    async ModifyOrganizationDefaultSeal(req, cb) {
        return this.request("ModifyOrganizationDefaultSeal", req, cb);
    }
    /**
     * 此接口（DescribeSeals）用于查询指定ID的印章信息。
     */
    async DescribeSeals(req, cb) {
        return this.request("DescribeSeals", req, cb);
    }
    /**
     * 该接口为第三方平台向电子签平台验证银行卡二/三/四要素
银行卡二要素(同CheckBankCard2EVerification): bank_card + name
银行卡三要素(同CheckBankCard3EVerification): bank_card + name + id_card_number
银行卡四要素(同CheckBankCard4EVerification): bank_card + name + id_card_number + mobile
     */
    async CheckBankCardVerification(req, cb) {
        return this.request("CheckBankCardVerification", req, cb);
    }
    /**
     * 此接口（CreateServerFlowSign）用于静默签署文件。

注：
1、此接口为白名单接口，调用前请提前与客服经理或邮件至e-contract@tencent.com进行联系。
2、仅合同发起者可使用流程静默签署能力。
     */
    async CreateServerFlowSign(req, cb) {
        return this.request("CreateServerFlowSign", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249004, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.facefusion = void 0;
const v20220927_1 = require("./v20220927");
const v20181201_1 = require("./v20181201");
exports.facefusion = {
    v20220927: v20220927_1.v20220927,
    v20181201: v20181201_1.v20181201,
};

}, function(modId) { var map = {"./v20220927":1738984249005,"./v20181201":1738984249008}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249005, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220927 = void 0;
const Models = require("./facefusion_models");
const facefusion_client_1 = require("./facefusion_client");
exports.v20220927 = {
    Client: facefusion_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./facefusion_models":1738984249006,"./facefusion_client":1738984249007}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249006, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249007, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * facefusion client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("facefusion.tencentcloudapi.com", "2022-09-27", clientConfig);
    }
    /**
     * 通常通过腾讯云人脸融合的控制台可以查看到素材相关的参数数据，可以满足使用。本接口返回活动的素材数据，包括素材状态等。用于用户通过Api查看素材相关数据，方便使用。
     */
    async DescribeMaterialList(req, cb) {
        return this.request("DescribeMaterialList", req, cb);
    }
    /**
     * 本接口用于单脸、多脸、选脸融合，上传人脸图片，得到与素材模板融合后的人脸图片。支持为融合结果图添加标识。查看 <a href="https://cloud.tencent.com/document/product/670/38247" target="_blank">融合接入指引</a>。

请求频率限制为20次/秒。
>
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async FuseFace(req, cb) {
        return this.request("FuseFace", req, cb);
    }
    /**
     * 图片人脸融合（专业版）为同步接口，支持自定义美颜、人脸增强、牙齿增强、拉脸等参数，最高支持8K分辨率，有多个模型类型供选择。查看 <a href="https://cloud.tencent.com/document/product/670/38247" target="_blank">融合接入指引</a>。
     */
    async FuseFaceUltra(req, cb) {
        return this.request("FuseFaceUltra", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249008, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20181201 = void 0;
const Models = require("./facefusion_models");
const facefusion_client_1 = require("./facefusion_client");
exports.v20181201 = {
    Client: facefusion_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./facefusion_models":1738984249009,"./facefusion_client":1738984249010}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249009, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249010, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * facefusion client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("facefusion.tencentcloudapi.com", "2018-12-01", clientConfig);
    }
    /**
     * 通常通过腾讯云人脸融合的控制台可以查看到素材相关的参数数据，可以满足使用。本接口返回活动的素材数据，包括素材状态等。用于用户通过Api查看素材相关数据，方便使用。
     */
    async DescribeMaterialList(req, cb) {
        return this.request("DescribeMaterialList", req, cb);
    }
    /**
     * 本接口用于人脸融合，用户上传人脸图片，获取与模板融合后的人脸图片。未发布的活动请求频率限制为1次/秒，已发布的活动请求频率限制50次/秒。如有需要提高活动的请求频率限制，请在控制台中申请。
>
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async FaceFusion(req, cb) {
        return this.request("FaceFusion", req, cb);
    }
    /**
     * 本接口用于单脸、多脸融合，用户上传人脸图片，获取与模板融合后的人脸图片。查看 <a href="https://cloud.tencent.com/document/product/670/38247" target="_blank">选脸融合接入指引</a>。

未发布的活动请求频率限制为1次/秒，已发布的活动请求频率限制50次/秒。如有需要提高活动的请求频率限制，请在控制台中申请。
>
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async FuseFace(req, cb) {
        return this.request("FuseFace", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249011, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.faceid = void 0;
const v20180301_1 = require("./v20180301");
exports.faceid = {
    v20180301: v20180301_1.v20180301,
};

}, function(modId) { var map = {"./v20180301":1738984249012}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249012, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180301 = void 0;
const Models = require("./faceid_models");
const faceid_client_1 = require("./faceid_client");
exports.v20180301 = {
    Client: faceid_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./faceid_models":1738984249013,"./faceid_client":1738984249014}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249013, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249014, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * faceid client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("faceid.tencentcloudapi.com", "2018-03-01", clientConfig);
    }
    /**
     * 使用数字活体检测模式前，需调用本接口获取数字验证码。
     */
    async GetLiveCode(req, cb) {
        return this.request("GetLiveCode", req, cb);
    }
    /**
     * 完成验证后，用FaceIdToken调用本接口获取设备风险相关信息，FaceIdToken生成后三天内（3\*24\*3,600秒）可多次拉取。
     */
    async GetFaceIdRiskInfo(req, cb) {
        return this.request("GetFaceIdRiskInfo", req, cb);
    }
    /**
     * 查询微信渠道服务（微信小程序、微信原生H5、微信普通H5）的账单明细及计费状态。
     */
    async GetWeChatBillDetails(req, cb) {
        return this.request("GetWeChatBillDetails", req, cb);
    }
    /**
     * 传入身份证人像面照片，识别身份证照片上的信息，并将姓名、身份证号、身份证人像照片与权威库的证件照进行比对，是否属于同一个人，从而验证身份证信息的真实性。
     */
    async CheckIdCardInformation(req, cb) {
        return this.request("CheckIdCardInformation", req, cb);
    }
    /**
     * 用于轮询E证通H5场景EidToken验证状态。
     */
    async CheckEidTokenStatus(req, cb) {
        return this.request("CheckEidTokenStatus", req, cb);
    }
    /**
     * 本接口用于输入银行卡号、姓名、开户证件号、开户手机号，校验信息的真实性和一致性。
     */
    async BankCard4EVerification(req, cb) {
        return this.request("BankCard4EVerification", req, cb);
    }
    /**
     * 本接口用于校验手机号、姓名和身份证号的真实性和一致性，入参支持明文、MD5和SHA256加密传输。
     */
    async EncryptedPhoneVerification(req, cb) {
        return this.request("EncryptedPhoneVerification", req, cb);
    }
    /**
     * 使用动作活体检测模式前，需调用本接口获取动作顺序。
     */
    async GetActionSequence(req, cb) {
        return this.request("GetActionSequence", req, cb);
    }
    /**
     * 完成验证后，用BizToken调用本接口获取结果信息，BizToken生成后三天内（3\*24\*3,600秒）可多次拉取。
     */
    async GetDetectInfoEnhanced(req, cb) {
        return this.request("GetDetectInfoEnhanced", req, cb);
    }
    /**
     * 每次调用人脸核身SDK服务前，需先调用本接口获取SDKToken，用来串联核身流程，在验证完成后，用于获取验证结果信息，该token仅能核身一次。
     */
    async GetFaceIdToken(req, cb) {
        return this.request("GetFaceIdToken", req, cb);
    }
    /**
     * 手机号二要素核验接口用于校验手机号和姓名的真实性和一致性，支持的手机号段详情请查阅<a href="https://cloud.tencent.com/document/product/1007/46063">运营商类</a>文档。
     */
    async CheckPhoneAndName(req, cb) {
        return this.request("CheckPhoneAndName", req, cb);
    }
    /**
     * 本接口用于银行卡号、姓名、开户证件号信息的真实性和一致性。
     */
    async BankCardVerification(req, cb) {
        return this.request("BankCardVerification", req, cb);
    }
    /**
     * 传入照片和身份信息，判断该照片与权威库的证件照是否属于同一个人。
     */
    async ImageRecognitionV2(req, cb) {
        return this.request("ImageRecognitionV2", req, cb);
    }
    /**
     * 传入视频和照片，先判断视频中是否为真人，判断为真人后，再判断该视频中的人与上传照片是否属于同一个人。
     */
    async LivenessCompare(req, cb) {
        return this.request("LivenessCompare", req, cb);
    }
    /**
     * 本接口用于校验姓名和身份证号的真实性和一致性，您可以通过输入姓名和身份证号或传入身份证人像面照片提供所需验证信息。
     */
    async IdCardOCRVerification(req, cb) {
        return this.request("IdCardOCRVerification", req, cb);
    }
    /**
     * 完成验证后，用FaceIdToken调用本接口获取结果信息，FaceIdToken生成后三天内（3\*24\*3,600秒）可多次拉取。
     */
    async GetFaceIdResult(req, cb) {
        return this.request("GetFaceIdResult", req, cb);
    }
    /**
     * 传入照片和身份信息，判断该照片与权威库的证件照是否属于同一个人（该接口已停止接入，新客户请使用<a href="https://cloud.tencent.com/document/product/1007/102203">照片人脸核身（V2.0）</a>接口）。
     */
    async ImageRecognition(req, cb) {
        return this.request("ImageRecognition", req, cb);
    }
    /**
     * 每次调用E证通服务前，需先调用本接口获取EidToken，用来串联E证通流程，在验证完成后，用于获取E证通结果信息。
     */
    async GetEidToken(req, cb) {
        return this.request("GetEidToken", req, cb);
    }
    /**
     * 基于多模态的AI大模型算法，提供对人脸图片、视频的防攻击检测能力，可针对性有效识别高仿真的AIGC换脸、高清翻拍、批量黑产攻击、水印等攻击痕迹，增强对图片和视频的防伪安全能力。
     */
    async DetectAIFakeFaces(req, cb) {
        return this.request("DetectAIFakeFaces", req, cb);
    }
    /**
     * 本接口用于校验手机号、姓名和身份证号的真实性和一致性。支持的手机号段详情请查阅<a href="https://cloud.tencent.com/document/product/1007/46063">运营商类</a>文档。
     */
    async PhoneVerification(req, cb) {
        return this.request("PhoneVerification", req, cb);
    }
    /**
     * 本接口用于验证手机号的状态，您可以输入手机号进行查询。
     */
    async MobileStatus(req, cb) {
        return this.request("MobileStatus", req, cb);
    }
    /**
     * 本接口用于校验姓名、身份证号、身份证有效期的真实性和一致性。
     */
    async CheckIdNameDate(req, cb) {
        return this.request("CheckIdNameDate", req, cb);
    }
    /**
     * 本接口用于校验中国移动手机号、姓名和身份证号的真实性和一致性。中国移动支持的手机号段详情请查阅<a href="https://cloud.tencent.com/document/product/1007/46063">运营商类</a>文档。
     */
    async PhoneVerificationCMCC(req, cb) {
        return this.request("PhoneVerificationCMCC", req, cb);
    }
    /**
     * 通过传入手机号或姓名和身份证号，结合权威数据源和腾讯健康守护可信模型，判断该信息是否真实且年满18周岁。腾讯健康守护可信模型覆盖了上十亿手机库源，覆盖率高、准确率高，如果不在库中的手机号，还可以通过姓名+身份证进行兜底验证。
     */
    async MinorsVerification(req, cb) {
        return this.request("MinorsVerification", req, cb);
    }
    /**
     * 每次调用人脸核身SDK服务前，需先调用本接口获取SDKToken，用来串联核身流程，在验证完成后，用于获取风险结果信息，该Token仅能核身一次。
     */
    async GetFaceidRiskInfoToken(req, cb) {
        return this.request("GetFaceidRiskInfoToken", req, cb);
    }
    /**
     * 活体检测
     */
    async Liveness(req, cb) {
        return this.request("Liveness", req, cb);
    }
    /**
     * 本接口用于校验中国联通手机号、姓名和身份证号的真实性和一致性。中国联通支持的手机号段详情请查阅<a href="https://cloud.tencent.com/document/product/1007/46063">运营商类</a>文档。
     */
    async PhoneVerificationCUCC(req, cb) {
        return this.request("PhoneVerificationCUCC", req, cb);
    }
    /**
     * 传入视频和身份信息，先判断视频中是否为真人，判断为真人后，再判断该视频中的人与权威库的证件照是否属于同一个人。
     */
    async LivenessRecognition(req, cb) {
        return this.request("LivenessRecognition", req, cb);
    }
    /**
     * 解析SDK获取到的证件NFC数据，接口传入SDK返回的ReqId，返回证件信息（个别字段为特定证件类型特有）。SDK生成的ReqId五分钟内有效，重复查询仅收一次费。支持身份证类证件（二代身份证、港澳居住证、台湾居住证、外国人永居证）以及旅行类证件（港澳通行证、台湾通行证、台胞证、回乡证）的NFC识别及核验。
     */
    async ParseNfcData(req, cb) {
        return this.request("ParseNfcData", req, cb);
    }
    /**
     * 传入姓名和身份证号，校验两者的真实性和一致性。
     */
    async IdCardVerification(req, cb) {
        return this.request("IdCardVerification", req, cb);
    }
    /**
     * 本接口用于查询手机号在网时长，输入手机号进行查询。
     */
    async MobileNetworkTimeVerification(req, cb) {
        return this.request("MobileNetworkTimeVerification", req, cb);
    }
    /**
     * 完成验证后，用EidToken调用本接口获取结果信息，EidToken生成后三天内（3\*24\*3,600秒）可多次拉取。
     */
    async GetEidResult(req, cb) {
        return this.request("GetEidResult", req, cb);
    }
    /**
     * 每次调用人脸核身SaaS化服务前，需先调用本接口获取BizToken，用来串联核身流程，在验证完成后，用于获取验证结果信息。
     */
    async DetectAuth(req, cb) {
        return this.request("DetectAuth", req, cb);
    }
    /**
     * 银行卡基础信息查询
     */
    async CheckBankCardInformation(req, cb) {
        return this.request("CheckBankCardInformation", req, cb);
    }
    /**
     * 完成验证后，用BizToken调用本接口获取结果信息，BizToken生成后三天内（3\*24\*3,600秒）可多次拉取。
     */
    async GetDetectInfo(req, cb) {
        return this.request("GetDetectInfo", req, cb);
    }
    /**
     * 本接口用于校验姓名和银行卡号的真实性和一致性。
     */
    async BankCard2EVerification(req, cb) {
        return this.request("BankCard2EVerification", req, cb);
    }
    /**
     * 本接口用于校验中国电信手机号、姓名和身份证号的真实性和一致性。中国电信支持的手机号段详情请查阅<a href="https://cloud.tencent.com/document/product/1007/46063">运营商类</a>文档。
     */
    async PhoneVerificationCTCC(req, cb) {
        return this.request("PhoneVerificationCTCC", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249015, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.fmu = void 0;
const v20191213_1 = require("./v20191213");
exports.fmu = {
    v20191213: v20191213_1.v20191213,
};

}, function(modId) { var map = {"./v20191213":1738984249016}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249016, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20191213 = void 0;
const Models = require("./fmu_models");
const fmu_client_1 = require("./fmu_client");
exports.v20191213 = {
    Client: fmu_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./fmu_models":1738984249017,"./fmu_client":1738984249018}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249017, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249018, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * fmu client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("fmu.tencentcloudapi.com", "2019-12-13", clientConfig);
    }
    /**
     * 在使用LUT素材的modelid实现试唇色前，您需要先上传 LUT 格式的cube文件注册唇色ID。查看 [LUT文件的使用说明](https://cloud.tencent.com/document/product/1172/41701)。

注：您也可以直接使用 [试唇色接口](https://cloud.tencent.com/document/product/1172/40706)，通过输入RGBA模型数值的方式指定唇色，更简单易用。
     */
    async CreateModel(req, cb) {
        return this.request("CreateModel", req, cb);
    }
    /**
     * 上传一张照片，输出滤镜处理后的图片。
     */
    async StyleImage(req, cb) {
        return this.request("StyleImage", req, cb);
    }
    /**
     * 上传一张照片，输出滤镜处理后的图片。
     */
    async StyleImagePro(req, cb) {
        return this.request("StyleImagePro", req, cb);
    }
    /**
     * 产品不再维护，准备下线。

撤销视频美颜任务请求
     */
    async CancelBeautifyVideoJob(req, cb) {
        return this.request("CancelBeautifyVideoJob", req, cb);
    }
    /**
     * 产品不再维护，准备下线。

查询视频美颜处理进度
     */
    async QueryBeautifyVideoJob(req, cb) {
        return this.request("QueryBeautifyVideoJob", req, cb);
    }
    /**
     * 删除已注册的唇色素材。
     */
    async DeleteModel(req, cb) {
        return this.request("DeleteModel", req, cb);
    }
    /**
     * 用户上传一张人脸图片（最多能处理一张图片中最大的五张人脸信息），精准定位五官，实现美肤、亮肤、祛痘等美颜功能。
     */
    async BeautifyPic(req, cb) {
        return this.request("BeautifyPic", req, cb);
    }
    /**
     * 对图片中的人脸嘴唇进行着色，最多支持同时对一张图中的3张人脸进行试唇色。

您可以通过事先注册在腾讯云的唇色素材（LUT文件）改变图片中的人脸唇色，也可以输入RGBA模型数值。

为了更好的效果，建议您使用事先注册在腾讯云的唇色素材（LUT文件）。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async TryLipstickPic(req, cb) {
        return this.request("TryLipstickPic", req, cb);
    }
    /**
     * 查询已注册的唇色素材。
     */
    async GetModelList(req, cb) {
        return this.request("GetModelList", req, cb);
    }
    /**
     * 产品不再维护，准备下线。

视频美颜(此接口目前已下线)
     */
    async BeautifyVideo(req, cb) {
        return this.request("BeautifyVideo", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249019, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ft = void 0;
const v20200304_1 = require("./v20200304");
exports.ft = {
    v20200304: v20200304_1.v20200304,
};

}, function(modId) { var map = {"./v20200304":1738984249020}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249020, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200304 = void 0;
const Models = require("./ft_models");
const ft_client_1 = require("./ft_client");
exports.v20200304 = {
    Client: ft_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ft_models":1738984249021,"./ft_client":1738984249022}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249021, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249022, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ft client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ft.tencentcloudapi.com", "2020-03-04", clientConfig);
    }
    /**
     * 撤销人像渐变任务请求
     */
    async CancelFaceMorphJob(req, cb) {
        return this.request("CancelFaceMorphJob", req, cb);
    }
    /**
     * 用户上传一张人脸图片，基于人脸编辑与生成算法，输出一张人脸性别转换的图片。男变女可实现美颜、淡妆、加刘海和长发的效果；女变男可实现加胡须、变短发的效果。
     */
    async SwapGenderPic(req, cb) {
        return this.request("SwapGenderPic", req, cb);
    }
    /**
     * 输入2-5张人脸照片，生成一段以人脸为焦点的渐变视频或GIF图，支持自定义图片播放速度、视频每秒传输帧数，可用于短视频、表情包、创意H5等应用场景，丰富静态图片的玩法。
     */
    async MorphFace(req, cb) {
        return this.request("MorphFace", req, cb);
    }
    /**
     * 用户上传一张人脸图片，基于人脸编辑与生成算法，输出一张人脸变老或变年轻的图片，支持实现人脸不同年龄的变化。
     */
    async ChangeAgePic(req, cb) {
        return this.request("ChangeAgePic", req, cb);
    }
    /**
     * 查询人像渐变处理进度
     */
    async QueryFaceMorphJob(req, cb) {
        return this.request("QueryFaceMorphJob", req, cb);
    }
    /**
     * 输入一张人脸照片，生成个性化的二次元动漫形象，可用于打造个性头像、趣味活动、特效类应用等场景，提升社交娱乐的体验。
     */
    async FaceCartoonPic(req, cb) {
        return this.request("FaceCartoonPic", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249023, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.gaap = void 0;
const v20180529_1 = require("./v20180529");
exports.gaap = {
    v20180529: v20180529_1.v20180529,
};

}, function(modId) { var map = {"./v20180529":1738984249024}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249024, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180529 = void 0;
const Models = require("./gaap_models");
const gaap_client_1 = require("./gaap_client");
exports.v20180529 = {
    Client: gaap_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./gaap_models":1738984249025,"./gaap_client":1738984249026}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249025, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249026, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * gaap client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("gaap.tencentcloudapi.com", "2018-05-29", clientConfig);
    }
    /**
     * 修改域名解析记录
     */
    async ModifyGlobalDomainDns(req, cb) {
        return this.request("ModifyGlobalDomainDns", req, cb);
    }
    /**
     * 本接口（DescribeCertificates）用来查询可以使用的证书列表。
     */
    async DescribeCertificates(req, cb) {
        return this.request("DescribeCertificates", req, cb);
    }
    /**
     * 添加安全策略规则
     */
    async CreateSecurityRules(req, cb) {
        return this.request("CreateSecurityRules", req, cb);
    }
    /**
     * 本接口（DescribeHTTPSListeners）用来查询HTTPS监听器信息。
     */
    async DescribeHTTPSListeners(req, cb) {
        return this.request("DescribeHTTPSListeners", req, cb);
    }
    /**
     * 删除安全策略
     */
    async DeleteSecurityPolicy(req, cb) {
        return this.request("DeleteSecurityPolicy", req, cb);
    }
    /**
     * 本接口（DescribeBlackHeader）用于查询禁用的自定义header 名称
     */
    async DescribeBlackHeader(req, cb) {
        return this.request("DescribeBlackHeader", req, cb);
    }
    /**
     * 本接口（DescribeCountryAreaMapping）用于获取国家地区编码映射表。
     */
    async DescribeCountryAreaMapping(req, cb) {
        return this.request("DescribeCountryAreaMapping", req, cb);
    }
    /**
     * 该接口（ModifyHTTPListenerAttribute）用于修改通道的HTTP监听器配置信息，目前仅支持修改监听器的名称。
注意：通道组通道暂时不支持HTTP/HTTPS监听器。
     */
    async ModifyHTTPListenerAttribute(req, cb) {
        return this.request("ModifyHTTPListenerAttribute", req, cb);
    }
    /**
     * 本接口（ModifyCertificateAttributes）用于修改证书，包括证书名字以及证书内容。
     */
    async ModifyCertificateAttributes(req, cb) {
        return this.request("ModifyCertificateAttributes", req, cb);
    }
    /**
     * 查询域名解析列表
     */
    async DescribeGlobalDomainDns(req, cb) {
        return this.request("DescribeGlobalDomainDns", req, cb);
    }
    /**
     * 用来创建统一域名
     */
    async CreateGlobalDomain(req, cb) {
        return this.request("CreateGlobalDomain", req, cb);
    }
    /**
     * 本接口（CreateCustomHeader）用于创建HTTP/HTTPS监听器的自定义header，客户端请求通过访问该监听器时，会将监听器中配置的header信息发送到源站。
     */
    async CreateCustomHeader(req, cb) {
        return this.request("CreateCustomHeader", req, cb);
    }
    /**
     * 本接口（DescribeCrossBorderProxies）用于查询跨境通道实例列表。
     */
    async DescribeCrossBorderProxies(req, cb) {
        return this.request("DescribeCrossBorderProxies", req, cb);
    }
    /**
     * 该接口为内部接口，用于查询可以获取统计数据的通道组和通道信息
     */
    async DescribeGroupAndStatisticsProxy(req, cb) {
        return this.request("DescribeGroupAndStatisticsProxy", req, cb);
    }
    /**
     * 关闭安全策略
     */
    async CloseSecurityPolicy(req, cb) {
        return this.request("CloseSecurityPolicy", req, cb);
    }
    /**
     * 本接口（CreateProxyGroupDomain）用于创建通道组域名，并开启域名解析。
     */
    async CreateProxyGroupDomain(req, cb) {
        return this.request("CreateProxyGroupDomain", req, cb);
    }
    /**
     * 设置监听器TLS配置
     */
    async SetTlsVersion(req, cb) {
        return this.request("SetTlsVersion", req, cb);
    }
    /**
     * 该接口（CreateUDPListeners）用于批量创建单通道或者通道组的UDP协议类型的监听器。
     */
    async CreateUDPListeners(req, cb) {
        return this.request("CreateUDPListeners", req, cb);
    }
    /**
     * 本接口（DescribeProxyDetail）用于查询通道详情。
     */
    async DescribeProxyDetail(req, cb) {
        return this.request("DescribeProxyDetail", req, cb);
    }
    /**
     * 本接口（DescribeRuleRealServers）用于查询转发规则相关的源站信息， 包括该规则可绑定的源站信息和已绑定的源站信息。
     */
    async DescribeRuleRealServers(req, cb) {
        return this.request("DescribeRuleRealServers", req, cb);
    }
    /**
     * 该接口（DescribeUDPListeners）用于查询单通道或者通道组下的UDP监听器信息
     */
    async DescribeUDPListeners(req, cb) {
        return this.request("DescribeUDPListeners", req, cb);
    }
    /**
     * 本接口（DescribeDestRegions）用于查询源站区域，即源站服务器所在区域。
     */
    async DescribeDestRegions(req, cb) {
        return this.request("DescribeDestRegions", req, cb);
    }
    /**
     * 本接口（DescribeProxyGroupList）用于拉取通道组列表及各通道组基本信息。
     */
    async DescribeProxyGroupList(req, cb) {
        return this.request("DescribeProxyGroupList", req, cb);
    }
    /**
     * 开启安全策略
     */
    async OpenSecurityPolicy(req, cb) {
        return this.request("OpenSecurityPolicy", req, cb);
    }
    /**
     * 删除域名的定制错误
     */
    async DeleteDomainErrorPageInfo(req, cb) {
        return this.request("DeleteDomainErrorPageInfo", req, cb);
    }
    /**
     * 本接口（ModifyCertificate）用于修改监听器下的域名对应的证书。该接口仅适用于version3.0的通道。
     */
    async ModifyCertificate(req, cb) {
        return this.request("ModifyCertificate", req, cb);
    }
    /**
     * 定制域名指定错误码的错误响应
     */
    async CreateDomainErrorPageInfo(req, cb) {
        return this.request("CreateDomainErrorPageInfo", req, cb);
    }
    /**
     * 该接口用于查询监听器统计数据，包括出入带宽，出入包量，并发数据。支持300, 3600和86400的细粒度，取值为细粒度范围内最大值。
     */
    async DescribeProxyGroupStatistics(req, cb) {
        return this.request("DescribeProxyGroupStatistics", req, cb);
    }
    /**
     * 本接口（ModifyRealServerName）用于修改源站的名称
     */
    async ModifyRealServerName(req, cb) {
        return this.request("ModifyRealServerName", req, cb);
    }
    /**
     * 本接口（BindListenerRealServers）用于TCP/UDP监听器绑定解绑源站。
注意：本接口会解绑之前绑定的源站，绑定本次调用所选择的源站。例如：原来绑定的源站为A，B，C，本次调用的选择绑定的源站为C，D，E，那么调用后所绑定的源站为C，D，E。
     */
    async BindListenerRealServers(req, cb) {
        return this.request("BindListenerRealServers", req, cb);
    }
    /**
     * 删除安全策略规则
     */
    async DeleteSecurityRules(req, cb) {
        return this.request("DeleteSecurityRules", req, cb);
    }
    /**
     * 本接口（DeleteCertificate）用于删除证书。
     */
    async DeleteCertificate(req, cb) {
        return this.request("DeleteCertificate", req, cb);
    }
    /**
     * 产品功能已下线，对应的api接口下线

本接口（CreateFirstLinkSession）用于创建接入段加速会话，创建有可能成功，也可能失败，需要通过返回码来进行判断。
     */
    async CreateFirstLinkSession(req, cb) {
        return this.request("CreateFirstLinkSession", req, cb);
    }
    /**
     * 本接口（DescribeAccessRegionsByDestRegion）根据源站区域查询可用的加速区域列表。
     */
    async DescribeAccessRegionsByDestRegion(req, cb) {
        return this.request("DescribeAccessRegionsByDestRegion", req, cb);
    }
    /**
     * 本接口（ModifyGroupDomainConfig）用于配置通道组就近接入域名。
     */
    async ModifyGroupDomainConfig(req, cb) {
        return this.request("ModifyGroupDomainConfig", req, cb);
    }
    /**
     * 该接口（DescribeTCPListeners）用于查询单通道或者通道组下的TCP监听器信息。
     */
    async DescribeTCPListeners(req, cb) {
        return this.request("DescribeTCPListeners", req, cb);
    }
    /**
     * 本接口（DescribeRealServers）用于查询源站信息，可以根据项目名查询所有的源站信息，此外支持指定IP或者域名的源站模糊查询。
     */
    async DescribeRealServers(req, cb) {
        return this.request("DescribeRealServers", req, cb);
    }
    /**
     * 该接口为内部接口，用于查询可以获取统计数据的通道和监听器信息
     */
    async DescribeProxyAndStatisticsListeners(req, cb) {
        return this.request("DescribeProxyAndStatisticsListeners", req, cb);
    }
    /**
     * 修改域名属性
     */
    async ModifyGlobalDomainAttribute(req, cb) {
        return this.request("ModifyGlobalDomainAttribute", req, cb);
    }
    /**
     * 本接口（DescribeRulesByRuleIds）用于根据规则ID拉取规则信息列表。支持一个或者多个规则信息的拉取。一次最多支持10个规则信息的拉取。
     */
    async DescribeRulesByRuleIds(req, cb) {
        return this.request("DescribeRulesByRuleIds", req, cb);
    }
    /**
     * 本接口（ModifyProxyConfiguration）用于修改通道的配置。根据当前业务的容量需求，扩容或缩容相关通道的配置。仅支持Scalarable为1的通道,Scalarable可通过接口DescribeProxies获取。
     */
    async ModifyProxyConfiguration(req, cb) {
        return this.request("ModifyProxyConfiguration", req, cb);
    }
    /**
     * 本接口（CloseProxyGroup）用于关闭通道组。通道组关闭后，不再产生流量，但每天仍然收取通道基础配置费用。
     */
    async CloseProxyGroup(req, cb) {
        return this.request("CloseProxyGroup", req, cb);
    }
    /**
     * 本接口（ModifyTCPListenerAttribute）用于修改通道实例下TCP监听器配置，包括健康检查的配置，调度策略。
     */
    async ModifyTCPListenerAttribute(req, cb) {
        return this.request("ModifyTCPListenerAttribute", req, cb);
    }
    /**
     * 该接口（CreateHTTPListener）用于在通道实例下创建HTTP协议类型的监听器。
     */
    async CreateHTTPListener(req, cb) {
        return this.request("CreateHTTPListener", req, cb);
    }
    /**
     * 该接口（DescribeRealServerStatistics）用于查询源站健康检查结果的统计数据。源站状态展示位为1：正常或者0：异常。查询的源站需要在监听器或者规则上进行了绑定，查询时需指定绑定的监听器或者规则ID。该接口支持1分钟细粒度的源站状态统计数据展示。
     */
    async DescribeRealServerStatistics(req, cb) {
        return this.request("DescribeRealServerStatistics", req, cb);
    }
    /**
     * 该接口（DescribeHTTPListeners）用来查询HTTP监听器信息。
     */
    async DescribeHTTPListeners(req, cb) {
        return this.request("DescribeHTTPListeners", req, cb);
    }
    /**
     * 本接口（CreateProxyGroup）用于创建通道组。
     */
    async CreateProxyGroup(req, cb) {
        return this.request("CreateProxyGroup", req, cb);
    }
    /**
     * 本接口（CreateCertificate）用于创建Gaap相关证书和配置文件，包括基础认证配置文件，客户端CA证书，服务器SSL证书，Gaap SSL证书以及源站CA证书。
     */
    async CreateCertificate(req, cb) {
        return this.request("CreateCertificate", req, cb);
    }
    /**
     * 本接口（DescribeCustomHeader）用于自定义header列表
     */
    async DescribeCustomHeader(req, cb) {
        return this.request("DescribeCustomHeader", req, cb);
    }
    /**
     * 删除域名的某条解析记录
     */
    async DeleteGlobalDomainDns(req, cb) {
        return this.request("DeleteGlobalDomainDns", req, cb);
    }
    /**
     * 本接口（DestroyProxies）用于销毁。通道销毁后，不再产生任何费用。
     */
    async DestroyProxies(req, cb) {
        return this.request("DestroyProxies", req, cb);
    }
    /**
     * 本接口（CreateProxy）用于创建/复制一个指定配置的加速通道。当复制通道时，需要设置新通道的基本配置参数，并设置ClonedProxyId来指定被复制的通道。
     */
    async CreateProxy(req, cb) {
        return this.request("CreateProxy", req, cb);
    }
    /**
     * 本接口（DeleteDomain）仅适用于7层监听器，用于删除该监听器下对应域名及域名下的所有规则，所有已绑定源站的规则将自动解绑。
     */
    async DeleteDomain(req, cb) {
        return this.request("DeleteDomain", req, cb);
    }
    /**
     * 获取安全策略详情
     */
    async DescribeSecurityPolicyDetail(req, cb) {
        return this.request("DescribeSecurityPolicyDetail", req, cb);
    }
    /**
     * 删除已添加的源站(服务器)IP或域名
     */
    async RemoveRealServers(req, cb) {
        return this.request("RemoveRealServers", req, cb);
    }
    /**
     * 删除统一域名
     */
    async DeleteGlobalDomain(req, cb) {
        return this.request("DeleteGlobalDomain", req, cb);
    }
    /**
     * 本接口（DescribeSecurityRules）用于根据安全规则ID查询安全规则详情列表。支持一个或多个安全规则的查询。一次最多支持20个安全规则的查询。
     */
    async DescribeSecurityRules(req, cb) {
        return this.request("DescribeSecurityRules", req, cb);
    }
    /**
     * 创建安全策略
     */
    async CreateSecurityPolicy(req, cb) {
        return this.request("CreateSecurityPolicy", req, cb);
    }
    /**
     * 该接口（DeleteRule）用于删除HTTP/HTTPS监听器的转发规则。
     */
    async DeleteRule(req, cb) {
        return this.request("DeleteRule", req, cb);
    }
    /**
     * 该接口（CreateRule）用于创建HTTP/HTTPS监听器转发规则。
     */
    async CreateRule(req, cb) {
        return this.request("CreateRule", req, cb);
    }
    /**
     * 本接口（ModifyDomain）用于监听器下的域名。当通道版本为3.0时，支持对该域名所对应的证书修改。
     */
    async ModifyDomain(req, cb) {
        return this.request("ModifyDomain", req, cb);
    }
    /**
     * 该接口（OpenProxies）用于开启一条或者多条通道。
     */
    async OpenProxies(req, cb) {
        return this.request("OpenProxies", req, cb);
    }
    /**
     * 本接口（ModifyUDPListenerAttribute）用于修改通道实例下UDP监听器配置，包括监听器名称和调度策略的修改。
     */
    async ModifyUDPListenerAttribute(req, cb) {
        return this.request("ModifyUDPListenerAttribute", req, cb);
    }
    /**
     * 本接口（DescribeProxyGroupDetails）用于查询通道组详情。
     */
    async DescribeProxyGroupDetails(req, cb) {
        return this.request("DescribeProxyGroupDetails", req, cb);
    }
    /**
     * 本接口（DescribeProxies）用于查询通道实例列表。
     */
    async DescribeProxies(req, cb) {
        return this.request("DescribeProxies", req, cb);
    }
    /**
     * 本接口（DeleteProxyGroup）用于删除通道组。
     */
    async DeleteProxyGroup(req, cb) {
        return this.request("DeleteProxyGroup", req, cb);
    }
    /**
     * 本接口（ModifyProxiesProject）用于修改通道所属项目。
     */
    async ModifyProxiesProject(req, cb) {
        return this.request("ModifyProxiesProject", req, cb);
    }
    /**
     * 添加源站(服务器)信息，支持IP或域名
     */
    async AddRealServers(req, cb) {
        return this.request("AddRealServers", req, cb);
    }
    /**
     * 本接口（CreateDomain）用于创建HTTP/HTTPS监听器的访问域名，客户端请求通过访问该域名来请求后端业务。
该接口仅支持version3.0的通道。
     */
    async CreateDomain(req, cb) {
        return this.request("CreateDomain", req, cb);
    }
    /**
     * 本接口（DescribeCertificateDetail）用于查询证书详情，包括证书ID，证书名字，证书类型，证书内容以及密钥等信息。
     */
    async DescribeCertificateDetail(req, cb) {
        return this.request("DescribeCertificateDetail", req, cb);
    }
    /**
     * 产品功能已下线，下线对应的api接口

本接口（DescribeFirstLinkSession）用于查询接入段加速会话状态，包括会话状态，生效时长，加速套餐等信息。
     */
    async DescribeFirstLinkSession(req, cb) {
        return this.request("DescribeFirstLinkSession", req, cb);
    }
    /**
     * 查询异步任务执行状态
     */
    async DescribeTaskStatus(req, cb) {
        return this.request("DescribeTaskStatus", req, cb);
    }
    /**
     * 产品功能已下线，下线对应的api接口

本接口（DeleteFirstLinkSession）用于删除接入段加速会话，删除加速会话后会停止加速。
     */
    async DeleteFirstLinkSession(req, cb) {
        return this.request("DeleteFirstLinkSession", req, cb);
    }
    /**
     * 暂停域名解析
     */
    async DisableGlobalDomain(req, cb) {
        return this.request("DisableGlobalDomain", req, cb);
    }
    /**
     * 该接口（DescribeRegionAndPrice）用于获取源站区域和带宽梯度价格
     */
    async DescribeRegionAndPrice(req, cb) {
        return this.request("DescribeRegionAndPrice", req, cb);
    }
    /**
     * 查询域名列表
     */
    async DescribeGlobalDomains(req, cb) {
        return this.request("DescribeGlobalDomains", req, cb);
    }
    /**
     * 本接口（DescribeRealServersStatus）用于查询源站是否已被规则或者监听器绑定
     */
    async DescribeRealServersStatus(req, cb) {
        return this.request("DescribeRealServersStatus", req, cb);
    }
    /**
     * 本接口（DescribeRules）用于查询监听器下的所有规则信息，包括规则域名，路径以及该规则下所绑定的源站列表。当通道版本为3.0时，该接口会返回该域名对应的高级认证配置信息。
     */
    async DescribeRules(req, cb) {
        return this.request("DescribeRules", req, cb);
    }
    /**
     * 开启域名解析
     */
    async EnableGlobalDomain(req, cb) {
        return this.request("EnableGlobalDomain", req, cb);
    }
    /**
     * 该接口（DescribeListenerRealServers）用于查询TCP/UDP监听器源站列表，包括该监听器已经绑定的源站列表以及可以绑定的源站列表。
     */
    async DescribeListenerRealServers(req, cb) {
        return this.request("DescribeListenerRealServers", req, cb);
    }
    /**
     * 本接口（SetAuthentication）用于通道的高级认证配置，包括认证方式选择，以及各种认证方式对应的证书选择。仅支持Version3.0的通道。
     */
    async SetAuthentication(req, cb) {
        return this.request("SetAuthentication", req, cb);
    }
    /**
     * 该接口（CreateHTTPSListener）用于在通道实例下创建HTTPS协议类型的监听器。
     */
    async CreateHTTPSListener(req, cb) {
        return this.request("CreateHTTPSListener", req, cb);
    }
    /**
     * 本接口(CheckProxyCreate)用于查询能否创建指定配置的加速通道。
     */
    async CheckProxyCreate(req, cb) {
        return this.request("CheckProxyCreate", req, cb);
    }
    /**
     * 该接口（OpenProxyGroup）用于开启一条通道组中的所有通道
     */
    async OpenProxyGroup(req, cb) {
        return this.request("OpenProxyGroup", req, cb);
    }
    /**
     * 本接口（DescribeAccessRegions）用于查询加速区域，即客户端接入区域。
     */
    async DescribeAccessRegions(req, cb) {
        return this.request("DescribeAccessRegions", req, cb);
    }
    /**
     * 本接口（ModifyRuleAttribute）用于修改转发规则的信息，包括健康检查的配置以及转发策略。
     */
    async ModifyRuleAttribute(req, cb) {
        return this.request("ModifyRuleAttribute", req, cb);
    }
    /**
     * 本接口（DescribeGroupDomainConfig）用于获取通道组域名解析配置详情。
     */
    async DescribeGroupDomainConfig(req, cb) {
        return this.request("DescribeGroupDomainConfig", req, cb);
    }
    /**
     * 本接口（ModifyProxiesAttribute）用于修改实例的属性（目前只支持修改通道的名称）。
     */
    async ModifyProxiesAttribute(req, cb) {
        return this.request("ModifyProxiesAttribute", req, cb);
    }
    /**
     * 该接口（ModifyHTTPSListenerAttribute）用于修改HTTPS监听器配置，当前不支持通道组和v1版本通道。
     */
    async ModifyHTTPSListenerAttribute(req, cb) {
        return this.request("ModifyHTTPSListenerAttribute", req, cb);
    }
    /**
     * 该接口用于查询监听器统计数据，包括出入带宽，出入包量，并发数据。支持300秒, 3600秒和86400秒的细粒度，取值为细粒度范围内最大值。
     */
    async DescribeListenerStatistics(req, cb) {
        return this.request("DescribeListenerStatistics", req, cb);
    }
    /**
     * 该接口（DeleteListeners）用于批量删除通道或通道组的监听器，包括4/7层监听器。
     */
    async DeleteListeners(req, cb) {
        return this.request("DeleteListeners", req, cb);
    }
    /**
     * 该接口用于查询监听器统计数据，包括出入带宽，出入包量，并发，丢包和时延数据。支持300, 3600和86400的细粒度，取值为细粒度范围内最大值。
     */
    async DescribeProxyStatistics(req, cb) {
        return this.request("DescribeProxyStatistics", req, cb);
    }
    /**
     * 查询目前定制域名的错误响应
     */
    async DescribeDomainErrorPageInfo(req, cb) {
        return this.request("DescribeDomainErrorPageInfo", req, cb);
    }
    /**
     * 为了防止在下单、询价、后付费开通等过程中确保来源合法以及订单参数没有被篡改过，各个业务方使用下单、询价等场景需调用计费签名接口获取签名，获取签名的请求需带上签名以验证身份，本接口可以获取计费签名。
     */
    async DescribeAuthSignature(req, cb) {
        return this.request("DescribeAuthSignature", req, cb);
    }
    /**
     * 本接口（BanAndRecoverProxy）用于联通封禁解封GAAP跨境通道实例，支持按照客户UIN维度下发请求。被封禁的实例带宽上限将会被限制到0Mbps，无法正常处理客户端和源站之间的请求。
     */
    async BanAndRecoverProxy(req, cb) {
        return this.request("BanAndRecoverProxy", req, cb);
    }
    /**
     * 本接口（ModifyProxyGroupAttribute）用于修改通道组属性，目前仅支持修改通道组名称与项目ID。
     */
    async ModifyProxyGroupAttribute(req, cb) {
        return this.request("ModifyProxyGroupAttribute", req, cb);
    }
    /**
     * 本接口（InquiryPriceCreateProxy）用于创建加速通道询价。
     */
    async InquiryPriceCreateProxy(req, cb) {
        return this.request("InquiryPriceCreateProxy", req, cb);
    }
    /**
     * 创建域名解析记录
     */
    async CreateGlobalDomainDns(req, cb) {
        return this.request("CreateGlobalDomainDns", req, cb);
    }
    /**
     * 修改安全策略规则名
     */
    async ModifySecurityRule(req, cb) {
        return this.request("ModifySecurityRule", req, cb);
    }
    /**
     * 本接口（CloseProxies）用于关闭通道。通道关闭后，不再产生流量，但每天仍然收取通道基础配置费用。
     */
    async CloseProxies(req, cb) {
        return this.request("CloseProxies", req, cb);
    }
    /**
     * 根据定制错误ID查询错误响应
     */
    async DescribeDomainErrorPageInfoByIds(req, cb) {
        return this.request("DescribeDomainErrorPageInfoByIds", req, cb);
    }
    /**
     * 本接口（DescribeProxiesStatus）用于查询通道状态列表。
     */
    async DescribeProxiesStatus(req, cb) {
        return this.request("DescribeProxiesStatus", req, cb);
    }
    /**
     * 该接口（CreateTCPListeners）用于批量创建单通道或者通道组的TCP协议类型的监听器。
     */
    async CreateTCPListeners(req, cb) {
        return this.request("CreateTCPListeners", req, cb);
    }
    /**
     * 该接口用于7层监听器的转发规则绑定源站。注意：本接口会解绑之前绑定的源站，绑定本次调用所选择的源站。
     */
    async BindRuleRealServers(req, cb) {
        return this.request("BindRuleRealServers", req, cb);
    }
    /**
     * 本接口（DescribeResourcesByTag）用于根据标签来查询对应的资源信息，包括通道，通道组和源站。
     */
    async DescribeResourcesByTag(req, cb) {
        return this.request("DescribeResourcesByTag", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249027, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.gme = void 0;
const v20180711_1 = require("./v20180711");
exports.gme = {
    v20180711: v20180711_1.v20180711,
};

}, function(modId) { var map = {"./v20180711":1738984249028}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249028, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180711 = void 0;
const Models = require("./gme_models");
const gme_client_1 = require("./gme_client");
exports.v20180711 = {
    Client: gme_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./gme_models":1738984249029,"./gme_client":1738984249030}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249029, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249030, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * gme client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("gme.tencentcloudapi.com", "2018-07-11", clientConfig);
    }
    /**
     * 获取房间内用户信息
     */
    async DescribeRoomInfo(req, cb) {
        return this.request("DescribeRoomInfo", req, cb);
    }
    /**
     * 停止录制

     */
    async StopRecord(req, cb) {
        return this.request("StopRecord", req, cb);
    }
    /**
     * 删除自定义送检用户。**接口使用前提**：目前 DeleteScanUser 接口通过白名单开放，如需使用，需要 [提交工单申请](https://console.cloud.tencent.com/workorder/category?level1_id=438&level2_id=445&source=0&data_title=%E6%B8%B8%E6%88%8F%E5%A4%9A%E5%AA%92%E4%BD%93%E5%BC%95%E6%93%8EGME&step=1)。
     */
    async DeleteScanUser(req, cb) {
        return this.request("DeleteScanUser", req, cb);
    }
    /**
     * 更新自定义送检用户号。
**接口使用前提**：目前 UpdateScanUsers 接口通过白名单开放，如需使用，需要 [提交工单申请](https://console.cloud.tencent.com/workorder/category?level1_id=438&level2_id=445&source=0&data_title=%E6%B8%B8%E6%88%8F%E5%A4%9A%E5%AA%92%E4%BD%93%E5%BC%95%E6%93%8EGME&step=1)。
     */
    async UpdateScanUsers(req, cb) {
        return this.request("UpdateScanUsers", req, cb);
    }
    /**
     * 查询语音消息转文本热句模型列表
     */
    async GetCustomizationList(req, cb) {
        return this.request("GetCustomizationList", req, cb);
    }
    /**
     * 拉取用户在房间得进出时间
     */
    async DescribeUserInAndOutTime(req, cb) {
        return this.request("DescribeUserInAndOutTime", req, cb);
    }
    /**
     * 更新自定义送检房间号。**接口使用前提**：目前 UpdateScanRooms 接口通过白名单开放，如需使用，需要 [提交工单申请](https://console.cloud.tencent.com/workorder/category?level1_id=438&level2_id=445&source=0&data_title=%E6%B8%B8%E6%88%8F%E5%A4%9A%E5%AA%92%E4%BD%93%E5%BC%95%E6%93%8EGME&step=1)。
     */
    async UpdateScanRooms(req, cb) {
        return this.request("UpdateScanRooms", req, cb);
    }
    /**
     * 用户使用该接口可以创建语音消息转文本热句模型，以供识别调用
     */
    async CreateCustomization(req, cb) {
        return this.request("CreateCustomization", req, cb);
    }
    /**
     * 查询房间录制的详细信息
     */
    async DescribeTaskInfo(req, cb) {
        return this.request("DescribeTaskInfo", req, cb);
    }
    /**
     * 目前该功能底层能力已不具备，不对外提供，目前需要下线，走预下线流程。

用于创建年龄语音识别任务的接口，请求频率10次/秒。该接口目前通过白名单开放试用，如有需求，请提交工单申请。
</br>
<h4><b>接口功能说明：</b></h4>
<li>支持对语音文件进行检测，判断是否为未成年人。</li>
<li>支持批量提交检测子任务。检测子任务列表最多支持100个。</li>
</br>
<h4><b>音频文件限制说明：</b></h4>
<li>音频文件大小限制：10 M</li>
<li>音频文件时长限制：3分钟</li>
<li>音频文件格式支持的类型：.wav、.m4a、.amr、.mp3、.aac、.wma、.ogg</li>
</br>
     */
    async CreateAgeDetectTask(req, cb) {
        return this.request("CreateAgeDetectTask", req, cb);
    }
    /**
     * 本接口(DeleteRoomMember)用户删除房间或者剔除房间内用户
     */
    async DeleteRoomMember(req, cb) {
        return this.request("DeleteRoomMember", req, cb);
    }
    /**
     * 本接口(DescribeApplicationData)用于获取数据详情信息，最多可拉取最近90天的数据。
     */
    async DescribeApplicationData(req, cb) {
        return this.request("DescribeApplicationData", req, cb);
    }
    /**
     * 本接口(ScanVoice)用于提交语音检测任务，检测任务列表最多支持100个。使用前请您登录[控制台 - 服务配置](https://console.cloud.tencent.com/gamegme/conf)开启语音内容安全服务。
</br></br>

<h4><b>功能试用说明：</b></h4>
<li>打开前往<a href="https://console.cloud.tencent.com/gamegme/tryout">控制台 - 产品试用</a>免费试用语音内容安全服务。</li>
</br>

<h4><b>接口功能说明：</b></h4>
<li>支持对语音流或语音文件进行检测，判断其中是否包含违规内容。</li>
<li>支持设置回调地址 Callback 获取检测结果，同时支持通过接口(查询语音检测结果)主动轮询获取检测结果。</li>
<li>支持场景输入，包括：谩骂、色情等场景</li>
<li>支持批量提交检测任务。检测任务列表最多支持100个。</li>
</br>
<h4><b>音频文件限制说明：</b></h4>
<li>音频文件大小限制：100 M</li>
<li>音频文件时长限制：30分钟</li>
<li>音频文件格式支持的类型：.wav、.m4a、.amr、.mp3、.aac、.wma、.ogg</li>
</br>
<h4><b>语音流限制说明：</b></h4>
<li>语音流格式支持的类型：.m3u8、.flv</li>
<li>语音流支持的传输协议：RTMP、HTTP、HTTPS</li>
<li>语音流时长限制：4小时</li>
<li>支持音视频流分离并对音频流进行分析</li>
</br>
<h4 id="Label_Value"><b>Scenes 与 Label 参数说明：</b></h4>
<p>提交语音检测任务时，需要指定 Scenes 场景参数，<font color="red">目前要求您设置 Scenes 参数值为：["default"]</font>；而在检测结果中，则包含请求时指定的场景，以及对应类型的检测结果。</p>
<table>
<thread>
<tr>
<th>场景</th>
<th>描述</th>
<th>Label</th>
</tr>
</thread>
<tbody>
<tr>
<td>语音检测</td>
<td>语音检测的检测类型</td>
<td>
<p>normal:正常文本</p>
<p>porn:色情</p>
<p>abuse:谩骂</p>
<p>ad :广告</p>
<p>illegal :违法</p>
<p>moan :呻吟</p>
<p>customized:自定义词库</p>
</td>
</tr>
</tbody>
</table>
</br>
<h4 id="Callback_Declare"><b>回调相关说明：</b></h4>
<li>如果在请求参数中指定了回调地址参数 Callback，即一个 HTTP(S) 协议接口的 URL，则需要支持 POST 方法，传输数据编码采用 UTF-8。</li>
<li>在推送回调数据后，接收到的 HTTP 状态码为 200 时，表示推送成功。</li>
<li>HTTP 请求参数（query）说明：</li>
<table>
<thread>
<tr>
<th>名称</th>
<th>类型</th>
<th>是否必需</th>
<th>描述</th>
</tr>
</thread>
<tbody>
<tr>
<td>Signatue</td>
<td>string</td>
<td>是</td>
<td>签名，具体见<a href="#Callback_Signatue">签名生成说明</a></td>
</tr>
</tbody>
</table>
<ul  id="Callback_Signatue">
    <li>签名生成说明：</li>
    <ul>
        <li>使用 HMAC-SH1 算法, 最终结果做 BASE64 编码;</li>
        <li>签名原文串为 POST+body 的整个json内容(长度以 Content-Length 为准);</li>
        <li>签名key为应用的 SecretKey，可以通过控制台查看。</li>
    </ul>
</ul>

<li>回调示例如下<font color="red">（详细字段说明见结构：
<a href="https://cloud.tencent.com/document/api/607/35375#DescribeScanResult" target="_blank">DescribeScanResult</a>）</font>：</li>
<pre><code>{
    "Code": 0,
    "DataId": "1400000000_test_data_id",
    "ScanFinishTime": 1566720906,
    "HitFlag": true,
    "Live": false,
    "Msg": "",
    "ScanPiece": [{
        "DumpUrl": "",
        "HitFlag": true,
        "MainType": "abuse",
        "RoomId": "123",
        "OpenId": "111",
        "Info":"",
        "Offset": 0,
        "Duration": 3400,
        "PieceStartTime":1574684231,
        "ScanDetail": [{
            "EndTime": 1110,
            "KeyWord": "违规字",
            "Label": "abuse",
            "Rate": "90.00",
            "StartTime": 1110
        }, {
            "EndTime": 1380,
            "KeyWord": "违规字",
            "Label": "abuse",
            "Rate": "90.00",
            "StartTime": 930
        }, {
            "EndTime": 1560,
            "KeyWord": "违规字",
            "Label": "abuse",
            "Rate": "90.00",
            "StartTime": 930
        }, {
            "EndTime": 2820,
            "KeyWord": "违规字",
            "Label": "abuse",
            "Rate": "90.00",
            "StartTime": 2490
        }]
    }],
    "ScanStartTime": 1566720905,
    "Scenes": [
        "default"
    ],
    "Status": "Success",
    "TaskId": "6330xxxx-9xx7-11ed-98e3-52xxxxe4ac3b",
    "Url": "https://xxx/xxx.m4a"
}
</code></pre>
     */
    async ScanVoice(req, cb) {
        return this.request("ScanVoice", req, cb);
    }
    /**
     * 新增自定义送检用户。**接口使用前提**：目前 CreateScanUser 接口通过白名单开放，如需使用，需要 [提交工单申请](https://console.cloud.tencent.com/workorder/category?level1_id=438&level2_id=445&source=0&data_title=%E6%B8%B8%E6%88%8F%E5%A4%9A%E5%AA%92%E4%BD%93%E5%BC%95%E6%93%8EGME&step=1)。
     */
    async CreateScanUser(req, cb) {
        return this.request("CreateScanUser", req, cb);
    }
    /**
     * 本接口(DescribeAppStatistics)用于获取某个GME应用的用量数据。包括实时语音，语音消息及转文本，语音分析等。最长查询周期为最近60天。
     */
    async DescribeAppStatistics(req, cb) {
        return this.request("DescribeAppStatistics", req, cb);
    }
    /**
     * 用户通过该接口可以更新语音消息转文本热句模型。
     */
    async ModifyCustomization(req, cb) {
        return this.request("ModifyCustomization", req, cb);
    }
    /**
     * 获取用户自定义送检信息。**接口使用前提**：目前 DescribeRealtimeScanConfig 接口通过白名单开放，如需使用，需要 [提交工单申请](https://console.cloud.tencent.com/workorder/category?level1_id=438&level2_id=445&source=0&data_title=%E6%B8%B8%E6%88%8F%E5%A4%9A%E5%AA%92%E4%BD%93%E5%BC%95%E6%93%8EGME&step=1)。
     */
    async DescribeRealtimeScanConfig(req, cb) {
        return this.request("DescribeRealtimeScanConfig", req, cb);
    }
    /**
     * 修改录制配置信息
     */
    async ModifyRecordInfo(req, cb) {
        return this.request("ModifyRecordInfo", req, cb);
    }
    /**
     * 本接口(CreateApp)用于创建一个GME应用。
     */
    async CreateApp(req, cb) {
        return this.request("CreateApp", req, cb);
    }
    /**
     * 本接口(DescribeScanResultList)用于查询语音检测结果，查询任务列表最多支持100个。
<p style="color:red">如果在提交语音检测任务时未设置 Callback 字段，则需要通过本接口获取检测结果</p>
     */
    async DescribeScanResultList(req, cb) {
        return this.request("DescribeScanResultList", req, cb);
    }
    /**
     * 本接口(DescribeApplicationList)用于查询自己账号下的应用列表
     */
    async DescribeApplicationList(req, cb) {
        return this.request("DescribeApplicationList", req, cb);
    }
    /**
     * 通过该接口，用户可以修改语音消息转文本热句模型状态，上下线热句模型
     */
    async ModifyCustomizationState(req, cb) {
        return this.request("ModifyCustomizationState", req, cb);
    }
    /**
     * 查询录制任务信息。
     */
    async DescribeRecordInfo(req, cb) {
        return this.request("DescribeRecordInfo", req, cb);
    }
    /**
     * **接口作用**：此接口用于修改房间用户的麦克风状态，例如房间内用户麦克风为打开状态，可调用此接口将该用户麦克风进行关闭，关闭后即使该用户使用客户端接口 EnableMic 打开麦克风，依然无法与房间内成员通话，属于被禁言状态。该状态持续到此用户退房后失效，或者调用该接口重新打开此用户麦克风状态。
**接口应用场景**：此接口多用于游戏业务中台或者风控后台，对一些发表不当言论的玩家进行禁言处理。
**接口使用前提**：目前 ModifyUserMicStatus 接口通过白名单开放，如需使用，需要 [提交工单申请](https://console.cloud.tencent.com/workorder/category?level1_id=438&level2_id=445&source=0&data_title=%E6%B8%B8%E6%88%8F%E5%A4%9A%E5%AA%92%E4%BD%93%E5%BC%95%E6%93%8EGME&step=1)。
     */
    async ModifyUserMicStatus(req, cb) {
        return this.request("ModifyUserMicStatus", req, cb);
    }
    /**
     * 用户通过该接口可以删除语音消息转文本热句模型
     */
    async DeleteCustomization(req, cb) {
        return this.request("DeleteCustomization", req, cb);
    }
    /**
     * 开启录制
     */
    async StartRecord(req, cb) {
        return this.request("StartRecord", req, cb);
    }
    /**
     * 本接口(ModifyAppStatus)用于修改应用总开关状态。
     */
    async ModifyAppStatus(req, cb) {
        return this.request("ModifyAppStatus", req, cb);
    }
    /**
     * 目前该功能底层能力已不具备，不对外提供，目前需要下线，走预下线流程。

查询年龄语音识别任务结果，请求频率10次/秒。该接口目前通过白名单开放试用，如有需求，请提交工单申请。
     */
    async DescribeAgeDetectTask(req, cb) {
        return this.request("DescribeAgeDetectTask", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249031, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.goosefs = void 0;
const v20220519_1 = require("./v20220519");
exports.goosefs = {
    v20220519: v20220519_1.v20220519,
};

}, function(modId) { var map = {"./v20220519":1738984249032}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249032, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220519 = void 0;
const Models = require("./goosefs_models");
const goosefs_client_1 = require("./goosefs_client");
exports.v20220519 = {
    Client: goosefs_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./goosefs_models":1738984249033,"./goosefs_client":1738984249034}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249033, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249034, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * goosefs client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("goosefs.tencentcloudapi.com", "2022-05-19", clientConfig);
    }
    /**
     * 查询GooseFS集群角色
     */
    async DescribeClusterRoles(req, cb) {
        return this.request("DescribeClusterRoles", req, cb);
    }
    /**
     * 删除文件系统
     */
    async DeleteFileSystem(req, cb) {
        return this.request("DeleteFileSystem", req, cb);
    }
    /**
     * 为客户端节点添加跨vpc或子网访问能力
     */
    async AddCrossVpcSubnetSupportForClientNode(req, cb) {
        return this.request("AddCrossVpcSubnetSupportForClientNode", req, cb);
    }
    /**
     * 批量添加客户端节点
     */
    async BatchAddClientNodes(req, cb) {
        return this.request("BatchAddClientNodes", req, cb);
    }
    /**
     * 解绑文件系统与Bucket的映射
     */
    async DetachFileSystemBucket(req, cb) {
        return this.request("DetachFileSystemBucket", req, cb);
    }
    /**
     * 列出所有的文件系统
     */
    async DescribeFileSystems(req, cb) {
        return this.request("DescribeFileSystems", req, cb);
    }
    /**
     * 查询数据流动带宽
     */
    async QueryDataRepositoryBandwidth(req, cb) {
        return this.request("QueryDataRepositoryBandwidth", req, cb);
    }
    /**
     * 罗列文件系统关联的Bucket映射
     */
    async DescribeFileSystemBuckets(req, cb) {
        return this.request("DescribeFileSystemBuckets", req, cb);
    }
    /**
     * 列出集群中所有的客户端节点
     */
    async DescribeClientNodes(req, cb) {
        return this.request("DescribeClientNodes", req, cb);
    }
    /**
     * 获取数据流通任务实时状态，用作客户端控制
     */
    async DescribeDataRepositoryTaskStatus(req, cb) {
        return this.request("DescribeDataRepositoryTaskStatus", req, cb);
    }
    /**
     * 为客户端节点删除跨vpc子网访问能力
     */
    async DeleteCrossVpcSubnetSupportForClientNode(req, cb) {
        return this.request("DeleteCrossVpcSubnetSupportForClientNode", req, cb);
    }
    /**
     * 修改数据流动带宽
     */
    async ModifyDataRepositoryBandwidth(req, cb) {
        return this.request("ModifyDataRepositoryBandwidth", req, cb);
    }
    /**
     * 为文件系统关联Bucket
     */
    async AttachFileSystemBucket(req, cb) {
        return this.request("AttachFileSystemBucket", req, cb);
    }
    /**
     * 批量删除客户端节点
     */
    async BatchDeleteClientNodes(req, cb) {
        return this.request("BatchDeleteClientNodes", req, cb);
    }
    /**
     * 查询客户端节点跨vpc子网访问能力
     */
    async QueryCrossVpcSubnetSupportForClientNode(req, cb) {
        return this.request("QueryCrossVpcSubnetSupportForClientNode", req, cb);
    }
    /**
     * 查询GooseFS集群客户端凭证
     */
    async DescribeClusterClientToken(req, cb) {
        return this.request("DescribeClusterClientToken", req, cb);
    }
    /**
     * 创建文件系统
     */
    async CreateFileSystem(req, cb) {
        return this.request("CreateFileSystem", req, cb);
    }
    /**
     * 扩展文件系统容量
     */
    async ExpandCapacity(req, cb) {
        return this.request("ExpandCapacity", req, cb);
    }
    /**
     * 查询GooseFS集群角色凭证
     */
    async DescribeClusterRoleToken(req, cb) {
        return this.request("DescribeClusterRoleToken", req, cb);
    }
    /**
     * 创建数据流通任务,包括从将文件系统的数据上传到存储桶下, 以及从存储桶下载到文件系统里。
     */
    async CreateDataRepositoryTask(req, cb) {
        return this.request("CreateDataRepositoryTask", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249035, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.gpm = void 0;
const v20200820_1 = require("./v20200820");
exports.gpm = {
    v20200820: v20200820_1.v20200820,
};

}, function(modId) { var map = {"./v20200820":1738984249036}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249036, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200820 = void 0;
const Models = require("./gpm_models");
const gpm_client_1 = require("./gpm_client");
exports.v20200820 = {
    Client: gpm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./gpm_models":1738984249037,"./gpm_client":1738984249038}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249037, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249038, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * gpm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("gpm.tencentcloudapi.com", "2020-08-20", clientConfig);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

取消匹配。
     */
    async CancelMatching(req, cb) {
        return this.request("CancelMatching", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

修改匹配Token。
     */
    async ModifyToken(req, cb) {
        return this.request("ModifyToken", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

查询匹配进度。
     */
    async DescribeMatchingProgress(req, cb) {
        return this.request("DescribeMatchingProgress", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

创建匹配
     */
    async CreateMatch(req, cb) {
        return this.request("CreateMatch", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

修改匹配
     */
    async ModifyMatch(req, cb) {
        return this.request("ModifyMatch", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

查询匹配Token，Token用于push消息验证。
     */
    async DescribeToken(req, cb) {
        return this.request("DescribeToken", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

查询规则详情
     */
    async DescribeRule(req, cb) {
        return this.request("DescribeRule", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

通过调用StartMatchingBackfill，用户可以传入一个回填的匹配请求，GPM为回填请求搜索符合条件的ticket并形成一个新的match。
     */
    async StartMatchingBackfill(req, cb) {
        return this.request("StartMatchingBackfill", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

查询匹配详情
     */
    async DescribeMatch(req, cb) {
        return this.request("DescribeMatch", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

删除规则
     */
    async DeleteRule(req, cb) {
        return this.request("DeleteRule", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

删除匹配
     */
    async DeleteMatch(req, cb) {
        return this.request("DeleteMatch", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

分页查询规则集列表
     */
    async DescribeRules(req, cb) {
        return this.request("DescribeRules", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

修改规则（描述、标签）
     */
    async ModifyRule(req, cb) {
        return this.request("ModifyRule", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

创建规则
     */
    async CreateRule(req, cb) {
        return this.request("CreateRule", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

支持传入一个玩家或多个玩家发起匹配，在同一个请求内的玩家将被分到同一个对局。
     */
    async StartMatching(req, cb) {
        return this.request("StartMatching", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

分页查询匹配列表
     */
    async DescribeMatches(req, cb) {
        return this.request("DescribeMatches", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

分页查询匹配Code
     */
    async DescribeMatchCodes(req, cb) {
        return this.request("DescribeMatchCodes", req, cb);
    }
    /**
     * 此接口无法使用，游戏玩家匹配GPM已于6.1正式下架，感谢您的支持

统计数据
     */
    async DescribeData(req, cb) {
        return this.request("DescribeData", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249039, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.gs = void 0;
const v20191118_1 = require("./v20191118");
exports.gs = {
    v20191118: v20191118_1.v20191118,
};

}, function(modId) { var map = {"./v20191118":1738984249040}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249040, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20191118 = void 0;
const Models = require("./gs_models");
const gs_client_1 = require("./gs_client");
exports.v20191118 = {
    Client: gs_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./gs_models":1738984249041,"./gs_client":1738984249042}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249041, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249042, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * gs client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("gs.tencentcloudapi.com", "2019-11-18", clientConfig);
    }
    /**
     * 获取并发总数和运行数
     */
    async DescribeInstancesCount(req, cb) {
        return this.request("DescribeInstancesCount", req, cb);
    }
    /**
     * 尝试锁定机器
     */
    async TrylockWorker(req, cb) {
        return this.request("TrylockWorker", req, cb);
    }
    /**
     * 强制退出游戏
     */
    async StopGame(req, cb) {
        return this.request("StopGame", req, cb);
    }
    /**
     * 保存游戏存档
     */
    async SaveGameArchive(req, cb) {
        return this.request("SaveGameArchive", req, cb);
    }
    /**
     * 开始云端推流
     */
    async StartPublishStreamToCSS(req, cb) {
        return this.request("StartPublishStreamToCSS", req, cb);
    }
    /**
     * 切换游戏存档
     */
    async SwitchGameArchive(req, cb) {
        return this.request("SwitchGameArchive", req, cb);
    }
    /**
     * 开始云端推流
     */
    async StartPublishStream(req, cb) {
        return this.request("StartPublishStream", req, cb);
    }
    /**
     * 停止云端推流
     */
    async StopPublishStream(req, cb) {
        return this.request("StopPublishStream", req, cb);
    }
    /**
     * 创建会话
     */
    async CreateSession(req, cb) {
        return this.request("CreateSession", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249043, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.gse = void 0;
const v20191112_1 = require("./v20191112");
exports.gse = {
    v20191112: v20191112_1.v20191112,
};

}, function(modId) { var map = {"./v20191112":1738984249044}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249044, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20191112 = void 0;
const Models = require("./gse_models");
const gse_client_1 = require("./gse_client");
exports.v20191112 = {
    Client: gse_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./gse_models":1738984249045,"./gse_client":1738984249046}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249045, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249046, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * gse client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("gse.tencentcloudapi.com", "2019-11-12", clientConfig);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（UpdateBucketCORSOpt）用于设置cos跨域访问。
     */
    async UpdateBucketCORSOpt(req, cb) {
        return this.request("UpdateBucketCORSOpt", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DeleteFleet）用于删除服务器舰队。
     */
    async DeleteFleet(req, cb) {
        return this.request("DeleteFleet", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（UpdateFleetCapacity）用于更新服务器舰队容量配置。
     */
    async UpdateFleetCapacity(req, cb) {
        return this.request("UpdateFleetCapacity", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeFleetRelatedResources）用于获取与游戏服务器舰队关联的资源信息，如别名、队列
     */
    async DescribeFleetRelatedResources(req, cb) {
        return this.request("DescribeFleetRelatedResources", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeRuntimeConfiguration）用于获取服务器舰队运行配置。
     */
    async DescribeRuntimeConfiguration(req, cb) {
        return this.request("DescribeRuntimeConfiguration", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（UpdateAlias）用于更新别名的属性。
     */
    async UpdateAlias(req, cb) {
        return this.request("UpdateAlias", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeGameServerSessionPlacement）用于查询游戏服务器会话的放置。
     */
    async DescribeGameServerSessionPlacement(req, cb) {
        return this.request("DescribeGameServerSessionPlacement", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeGameServerSessionDetails）用于查询游戏服务器会话详情列表。
     */
    async DescribeGameServerSessionDetails(req, cb) {
        return this.request("DescribeGameServerSessionDetails", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（CreateAsset）用于创建生成包。
通过获取上传cos的临时密钥，将文件上传至cos，然后将生成包的zip名称下发给本接口完成资源创建。

上传文件至 cos支持俩种方式：

- 获取预签名方式，COS 简单上传
    1. [GetUploadCredentials](https://cloud.tencent.com/document/product/1165/48727) 获取预签名信息
    2. 使用 COS API 进行上传([参考文档](https://cloud.tencent.com/document/product/436/7749))
-  临时密钥方式，COS 简单上传或者分块上传方式
    1. [GetUploadCredentials](https://cloud.tencent.com/document/product/1165/48727)（获取上传 bucket  第一次调用需要，后续可以不用调用）
    2. [GetUploadFederationToken](https://cloud.tencent.com/document/product/1165/48742) 获取临时密钥
    3. 使用 COS API 进行上传([参考文档](https://cloud.tencent.com/document/product/436/7742))

具体使用场景可以参考 [GetUploadCredentials](https://cloud.tencent.com/document/product/1165/48727) ,  [GetUploadFederationToken](https://cloud.tencent.com/document/product/1165/48742)和下面 CreateAsset 示例。
     */
    async CreateAsset(req, cb) {
        return this.request("CreateAsset", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（SetServerReserved）用于将异常的实例标记为保留，用于问题排查。

字段ReserveValue：0默认值，不保留；1 保留

     */
    async SetServerReserved(req, cb) {
        return this.request("SetServerReserved", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（CreateGameServerSessionQueue）用于创建游戏服务器会话队列。
     */
    async CreateGameServerSessionQueue(req, cb) {
        return this.request("CreateGameServerSessionQueue", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeInstanceLimit）用于查询用户实例数限额。
     */
    async DescribeInstanceLimit(req, cb) {
        return this.request("DescribeInstanceLimit", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DeleteAsset）用于删除生成包。
     */
    async DeleteAsset(req, cb) {
        return this.request("DeleteAsset", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（ListFleets）用于获取服务器舰队列表。
     */
    async ListFleets(req, cb) {
        return this.request("ListFleets", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（GetGameServerSessionLogUrl）用于获取游戏服务器会话的日志URL。
     */
    async GetGameServerSessionLogUrl(req, cb) {
        return this.request("GetGameServerSessionLogUrl", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（UpdateRuntimeConfiguration）用于更新服务器舰队配置。
     */
    async UpdateRuntimeConfiguration(req, cb) {
        return this.request("UpdateRuntimeConfiguration", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeFleetCapacity）用于查询服务部署容量配置。
     */
    async DescribeFleetCapacity(req, cb) {
        return this.request("DescribeFleetCapacity", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（StopGameServerSessionPlacement）用于停止放置游戏服务器会话。
     */
    async StopGameServerSessionPlacement(req, cb) {
        return this.request("StopGameServerSessionPlacement", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（UpdateBucketAccelerateOpt）用于开启cos全球加速。
     */
    async UpdateBucketAccelerateOpt(req, cb) {
        return this.request("UpdateBucketAccelerateOpt", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DeleteGameServerSessionQueue）用于删除游戏服务器会话队列。
     */
    async DeleteGameServerSessionQueue(req, cb) {
        return this.request("DeleteGameServerSessionQueue", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeGameServerSessionQueues）用于查询游戏服务器会话队列。
     */
    async DescribeGameServerSessionQueues(req, cb) {
        return this.request("DescribeGameServerSessionQueues", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeCcnInstances）用于查询云联网实例。
     */
    async DescribeCcnInstances(req, cb) {
        return this.request("DescribeCcnInstances", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（PutScalingPolicy）用于设置服务器舰队的动态扩缩容策略。

通过此接口可以增加或者更新服务器舰队的扩缩容策略。
服务器舰队可以有多个扩缩容策略，但是只有一个TargetBased基于目标的策略。

## TargetBased基于目标的策略

TargetBased策略计算的指标是PercentAvailableGameSessions，这个策略用于计算当前服务器舰队应该有多少个CVM实例来支撑和分配游戏会话。
PercentAvailableGameSessions表示服务器舰队的缓冲值；用来计算服务器舰队在当前容量下可以处理的额外玩家会话数量。
如果使用基于目标的策略，可以按照业务需求设置一个期望的缓冲区大小，GSE的会按照配置的策略来扩容和缩容到这个目标要求的CVM实例数。

例如：客户可以设置同时承载100个游戏会话的服务器舰队预留10%的缓冲区。GSE会按照这个策略执行时，若服务器舰队的可用容量低于或高于10%的游戏服务器会话时，执行扩缩容动作。
GSE按照策略期望，扩容新CVM实例或缩容未使用的实例，保持在10%左右的缓冲区。

#### 请求参数取值说明

```
Name取值策略名称，
FleetId取值为选择的服务器舰队ID，
PolicyType取值TargetBased，
MetricName取值PercentAvailableGameSessions，
TargetConfiguration取值为所需的缓冲区值对象，
其他参数不用传递。
请求成功时，将返回策略名称。扩缩容策略在成功创建立即自动生效。
```



## RuleBased基于规则的策略

####  请求参数取值说明

```
Name取值策略名称，
FleetId取值为选择的服务器舰队ID，
PolicyType取值RuleBased，
MetricName取值（AvailableGameServerSessions，AvailableCustomCount，PercentAvailableCustomCount，ActiveInstances，IdleInstances，CurrentPlayerSessions和PercentIdleInstances）说明见备注1，
其他参数不用传递。
ComparisonOperator取值为 >,>=,<,<=这4个比较符号中的一个，
Threshold取值为指标MetricName达到的阈值是多少，
EvaluationPeriods取值为指标MetricName达到的阈值持续了多少时间，单位是分钟，
ScalingAdjustmentType取值（ChangeInCapacity，ExactCapacity，PercentChangeInCapacity）说明见备注2
ScalingAdjustment取值为指标MetricName达到的阈值的条件后，扩缩容多少个CVM实例。
请求成功时，将返回策略名称。扩缩容策略在成功创建立即自动生效。
```

规则执行的条件表达式如下所示：

```
若 [MetricName] 是 [ComparisonOperator] [Threshold] 持续 [EvaluationPeriods] 分钟, 则 [ScalingAdjustmentType] 调整 [ScalingAdjustment]个实例。
```
```
if [MetricName] ComparisonOperator [Threshold] for [EvaluationPeriods] minutes, then scaling up by/to  [ScalingAdjustment]
```
例如1：如果当前AvailableCustomCount值大于等于10，持续5分钟，扩容1台CVM实例。
```
ScalingAdjustmentType = ChangeInCapacity
if [AvailableGameServerSessions] >= [10] for [5] minutes, then scaling up [1]
```
例如2：如果当前AvailableGameServerSessions值大于等于200，持续5分钟，扩容到2台CVM实例。
```
ScalingAdjustmentType = ExactCapacity
if [AvailableGameServerSessions] >= [200] for [5] minutes, then scaling to [2]
```
例如3：如果当前AvailableCustomCount值大于等于400，持续5分钟，扩容20%台CVM实例。
当前CVM实例数为10台。扩容20%台CVM实例就是增加 10*20%等于2台
```
ScalingAdjustmentType = PercentChangeInCapacity
if [AvailableGameServerSessions] >= [400] for [5] minutes, then scaling by [currentCVMCount * 20 %]
```
**备注1**

- | 策略名称（MetricName）                                       | 计算公式                                   | 场景                                        | 场景使用举例                                                 |
  | :----------------------------------------------------------- | :----------------------------------------- | :------------------------------------------ | :----------------------------------------------------------- |
  | CurrentPlayerSessions<br>当前玩家数指标                      | = 当前在线的玩家数                         | CVM随着玩家会话数变化做扩缩容。             | 例如：<br>MetricName: CurrentPlayerSessions<br>ComparisonOperator: '<=' <br>Threshold: 300<br/>EvaluationPeriods: 1<br/>ScalingAdjustment: 2<br/>ScalingAdjustment: ChangeInCapacity<br>说明：若当前CurrentPlayerSessions小于等于300，持续1分钟，则扩容2台CVM。 |
  | AvailableGameServerSessions<br>可用游戏服务器会话数          | = 可用游戏服务会话数                       | CVM随着可用游戏会话数变化做扩缩容。         | 例如：<br/>MetricName: AvailableGameServerSessions<br/>ComparisonOperator: '<' <br/>Threshold: 50<br/>EvaluationPeriods: 5<br/>ScalingAdjustment: 2<br/>ScalingAdjustment: ExactCapacity<br/>说明：若当前AvailableGameServerSessions小于50，持续5分钟，则扩容到2台CVM。 |
  | PercentAvailableGameServerSessions<br>可用游戏服务器会话百分比 | = 空闲游戏会话数 / 所有的游戏会话数 * 100% | CVM随着可用游戏会话数百分比变化做扩缩容。   | 例如：<br/>MetricName: PercentAvailableGameServerSessions<br/>ComparisonOperator: '<' <br/>Threshold: 50<br/>EvaluationPeriods: 1<br/>ScalingAdjustment: -30<br/>ScalingAdjustment: PercentChangeInCapacity<br/>说明：若当前PercentAvailableGameServerSessions小于50%，持续1分钟，则缩容当前实例数30%台CVM。 |
  | AvailableCustomCount<br>可用客户自定义数指标                 | = 客户自定义的数                           | CVM随着可用客户自定义数变化做扩缩容。       | 例如：<br/>MetricName: AvailableCustomCount<br/>ComparisonOperator: '>=' <br/>Threshold: 6<br/>EvaluationPeriods: 3<br/>ScalingAdjustment: -1<br/>ScalingAdjustment: ExactCapacity<br/>说明：若当前AvailableCustomCount大于等于6，持续3分钟，则缩容到1台CVM。 |
  | PercentAvailableCustomCount<br>可用客户自定义数百分比        | = 客户自定义数 / 客户最大自定义数* 100%    | CVM随着可用客户自定义数百分比变化做扩缩容。 | 例如：<br/>MetricName: PercentAvailableCustomCount<br/>ComparisonOperator: '<' <br/>Threshold: 15<br/>EvaluationPeriods: 3<br/>ScalingAdjustment: 1<br/>ScalingAdjustment: ChangeInCapacity<br/>说明：若当前PercentAvailableCustomCount小于15%，持续3分钟，则扩容1台CVM。 |
  | ActiveInstances<br>活跃实例数指标                            | = 总实例数 - 缩容中的实例数                | CVM随着活跃实例数变化做扩缩容。             | 例如：<br/>MetricName: ActiveInstances<br/>ComparisonOperator: '<' <br/>Threshold: 3<br/>EvaluationPeriods: 1<br/>ScalingAdjustment: 3<br/>ScalingAdjustment: ExactCapacity<br/>说明：若当前ActiveInstances小于3台，持续1分钟，则扩容保留到3台CVM。 |
  | IdleInstances<br>空闲实例数指标                              | = 未使用的进程数 / 每实例进程数            | CVM随着空闲实例数变化做扩缩容。             | 例如：<br/>MetricName: IdleInstances<br/>ComparisonOperator: '<' <br/>Threshold: 2<br/>EvaluationPeriods: 3<br/>ScalingAdjustment: 1<br/>ScalingAdjustment: ChangeInCapacity<br/>说明：若当前IdleInstances小于2台，持续3分钟，则扩容1台CVM。 |
  | PercentIdleInstances<br>空闲实例百分比                       | = IdleInstances / ActiveInstances * 100%   | CVM随着空闲实例百分比变化做扩缩容。         | 例如：<br/>MetricName: PercentIdleInstances<br/>ComparisonOperator: '<' <br/>Threshold: 50<br/>EvaluationPeriods: 3<br/>ScalingAdjustment: 1<br/>ScalingAdjustment: ChangeInCapacity<br/>说明：若当前PercentIdleInstances小于50%，持续3分钟，则扩容1台CVM。 |



**备注2**

**ChangeInCapacity**

    当前CVM实例个数的扩容或缩容的调整值。正值按值扩容，负值按值缩容。

**ExactCapacity**

    把当前CVM实例个数调整为ScalingAdjustment设置的CVM实例数。

**PercentChangeInCapacity**

    按比例增加或减少的百分比。正值按比例扩容，负值按比例缩容；例如，值“-10”将按10%的比例缩容CVM实例。
     */
    async PutScalingPolicy(req, cb) {
        return this.request("PutScalingPolicy", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeScalingPolicies）用于查询服务器舰队的动态扩缩容策略列表。
     */
    async DescribeScalingPolicies(req, cb) {
        return this.request("DescribeScalingPolicies", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（CopyFleet）用于复制服务器舰队。
     */
    async CopyFleet(req, cb) {
        return this.request("CopyFleet", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeGameServerSessions）用于查询游戏服务器会话列表。
     */
    async DescribeGameServerSessions(req, cb) {
        return this.request("DescribeGameServerSessions", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（StartGameServerSessionPlacement）用于开始放置游戏服务器会话。
     */
    async StartGameServerSessionPlacement(req, cb) {
        return this.request("StartGameServerSessionPlacement", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（JoinGameServerSession）用于加入游戏服务器会话。
     */
    async JoinGameServerSession(req, cb) {
        return this.request("JoinGameServerSession", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（JoinGameServerSessionBatch）用于批量加入游戏服务器会话。
     */
    async JoinGameServerSessionBatch(req, cb) {
        return this.request("JoinGameServerSessionBatch", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeFleetStatisticSummary）用于查询服务部署统计汇总信息。
     */
    async DescribeFleetStatisticSummary(req, cb) {
        return this.request("DescribeFleetStatisticSummary", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（ResolveAlias）用于获取别名当前指向的fleetId。
     */
    async ResolveAlias(req, cb) {
        return this.request("ResolveAlias", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DeleteAlias）用于删除别名。
     */
    async DeleteAlias(req, cb) {
        return this.request("DeleteAlias", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DeleteTimerScalingPolicy）用于删除fleet下的定时器。

     */
    async DeleteTimerScalingPolicy(req, cb) {
        return this.request("DeleteTimerScalingPolicy", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（UpdateAsset）用于修改生成包信息。
     */
    async UpdateAsset(req, cb) {
        return this.request("UpdateAsset", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（StartFleetActions）用于启用服务器舰队自动扩缩容。
     */
    async StartFleetActions(req, cb) {
        return this.request("StartFleetActions", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeFleetPortSettings）用于获取服务器舰队安全组信息。
     */
    async DescribeFleetPortSettings(req, cb) {
        return this.request("DescribeFleetPortSettings", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（GetUploadCredentials）获取上传文件授权信息。
通过 [GetUploadCredentials](https://cloud.tencent.com/document/product/1165/48727) 接口获取临时授权信息后，调用 COS API将数据上传，根据上传的 BucketKey 信息进行生成包 [CreateAsset](https://cloud.tencent.com/document/product/1165/48731) 的创建。参考下面的示例部分。
     */
    async GetUploadCredentials(req, cb) {
        return this.request("GetUploadCredentials", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（AttachCcnInstances）用于关联云联网实例。
     */
    async AttachCcnInstances(req, cb) {
        return this.request("AttachCcnInstances", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DetachCcnInstances）用于解关联云联网实例。
     */
    async DetachCcnInstances(req, cb) {
        return this.request("DetachCcnInstances", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DeleteScalingPolicy）用于删除服务器舰队的扩缩容策略。
通过服务器舰队ID和策略名称删除服务器舰队的扩缩容策略，只传递服务器舰队ID时，会将这个服务器舰队下的所有策略都删除。
传递策略名称时，单独删除策略名称对应的策略。
     */
    async DeleteScalingPolicy(req, cb) {
        return this.request("DeleteScalingPolicy", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（CreateAlias）用于创建别名。
     */
    async CreateAlias(req, cb) {
        return this.request("CreateAlias", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeFleetStatisticFlows）用于查询服务部署统计用量。
     */
    async DescribeFleetStatisticFlows(req, cb) {
        return this.request("DescribeFleetStatisticFlows", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（CreateGameServerSession）用于创建游戏服务会话。
     */
    async CreateGameServerSession(req, cb) {
        return this.request("CreateGameServerSession", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribePlayerSessions）用于获取玩家会话列表。
     */
    async DescribePlayerSessions(req, cb) {
        return this.request("DescribePlayerSessions", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeAsset）获取生成包信息。
     */
    async DescribeAsset(req, cb) {
        return this.request("DescribeAsset", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeAssetSystems）用于获取生成包支持的操作系统。
     */
    async DescribeAssetSystems(req, cb) {
        return this.request("DescribeAssetSystems", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（CreateFleet）用于创建服务器舰队。
     */
    async CreateFleet(req, cb) {
        return this.request("CreateFleet", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeTimerScalingPolicies）用于查询fleet下的定时器列表。可以通过fleetid，定时器名称分页查询。

     */
    async DescribeTimerScalingPolicies(req, cb) {
        return this.request("DescribeTimerScalingPolicies", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（UpdateGameServerSessionQueue）用于修改游戏服务器会话队列。
     */
    async UpdateGameServerSessionQueue(req, cb) {
        return this.request("UpdateGameServerSessionQueue", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（GetInstanceAccess）用于获取实例登录所需要的凭据。
     */
    async GetInstanceAccess(req, cb) {
        return this.request("GetInstanceAccess", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（UpdateFleetAttributes）用于更新服务器舰队属性。
     */
    async UpdateFleetAttributes(req, cb) {
        return this.request("UpdateFleetAttributes", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeUserQuota）获取用户单个模块配额。
     */
    async DescribeUserQuota(req, cb) {
        return this.request("DescribeUserQuota", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeFleetAttributes）用于查询服务器舰队属性。
     */
    async DescribeFleetAttributes(req, cb) {
        return this.request("DescribeFleetAttributes", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（UpdateGameServerSession）用于更新游戏服务器会话。
     */
    async UpdateGameServerSession(req, cb) {
        return this.request("UpdateGameServerSession", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（GetUploadFederationToken）用于 获取生成包上传所需要的临时密钥。
     */
    async GetUploadFederationToken(req, cb) {
        return this.request("GetUploadFederationToken", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口用于获取游戏服务器实例的日志URL。
     */
    async GetGameServerInstanceLogUrl(req, cb) {
        return this.request("GetGameServerInstanceLogUrl", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（SearchGameServerSessions）用于搜索游戏服务器会话列表。
     */
    async SearchGameServerSessions(req, cb) {
        return this.request("SearchGameServerSessions", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeFleetStatisticDetails）用于查询服务部署统计详情。
     */
    async DescribeFleetStatisticDetails(req, cb) {
        return this.request("DescribeFleetStatisticDetails", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeAssets）用于获取生成包列表。
     */
    async DescribeAssets(req, cb) {
        return this.request("DescribeAssets", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（CreateAssetWithImage）用于创建生成包镜像信息。
     */
    async CreateAssetWithImage(req, cb) {
        return this.request("CreateAssetWithImage", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（StopFleetActions）用于停止服务器舰队自动扩缩容，改为手动扩缩容。
     */
    async StopFleetActions(req, cb) {
        return this.request("StopFleetActions", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeInstancesExtend）用于查询实例扩展信息列表。
     */
    async DescribeInstancesExtend(req, cb) {
        return this.request("DescribeInstancesExtend", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeAlias）用于获取别名详情。
     */
    async DescribeAlias(req, cb) {
        return this.request("DescribeAlias", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（ListAliases）用于检索帐户下的所有别名。
     */
    async ListAliases(req, cb) {
        return this.request("ListAliases", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（UpdateFleetPortSettings）用于更新服务器舰队安全组。
     */
    async UpdateFleetPortSettings(req, cb) {
        return this.request("UpdateFleetPortSettings", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeUserQuotas）用于获取用户配额
     */
    async DescribeUserQuotas(req, cb) {
        return this.request("DescribeUserQuotas", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeInstanceTypes）用于获取服务器实例类型列表。
     */
    async DescribeInstanceTypes(req, cb) {
        return this.request("DescribeInstanceTypes", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeFleetEvents）用于查询服务器舰队相关的事件列表。
     */
    async DescribeFleetEvents(req, cb) {
        return this.request("DescribeFleetEvents", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（SetServerWeight）用于设置服务器权重。
     */
    async SetServerWeight(req, cb) {
        return this.request("SetServerWeight", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（UpdateFleetName）用于更新服务器舰队名称。
     */
    async UpdateFleetName(req, cb) {
        return this.request("UpdateFleetName", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeFleetUtilization）用于查询服务器舰队的利用率信息。
     */
    async DescribeFleetUtilization(req, cb) {
        return this.request("DescribeFleetUtilization", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（DescribeInstances）用于查询服务器实例列表。
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（EndGameServerSessionAndProcess）用于终止游戏服务器会话和对应的进程，适用于时限保护和不保护。
     */
    async EndGameServerSessionAndProcess(req, cb) {
        return this.request("EndGameServerSessionAndProcess", req, cb);
    }
    /**
     * 此接口无法使用，游戏服务器引擎GSE已于6.1正式下架，感谢您的支持

本接口（PutTimerScalingPolicy）用于给fleet创建或更新定时器。

填写字段timer_id，表示更新；不填字段timer_id表示新增。

     */
    async PutTimerScalingPolicy(req, cb) {
        return this.request("PutTimerScalingPolicy", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249047, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.gwlb = void 0;
const v20240906_1 = require("./v20240906");
exports.gwlb = {
    v20240906: v20240906_1.v20240906,
};

}, function(modId) { var map = {"./v20240906":1738984249048}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249048, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20240906 = void 0;
const Models = require("./gwlb_models");
const gwlb_client_1 = require("./gwlb_client");
exports.v20240906 = {
    Client: gwlb_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./gwlb_models":1738984249049,"./gwlb_client":1738984249050}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249049, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249050, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * gwlb client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("gwlb.tencentcloudapi.com", "2024-09-06", clientConfig);
    }
    /**
     * 删除目标组
     */
    async DeleteTargetGroups(req, cb) {
        return this.request("DeleteTargetGroups", req, cb);
    }
    /**
     * DeleteGatewayLoadBalancer 接口用以删除指定的一个或多个网关负载均衡实例。成功删除后，会把网关负载均衡实例与后端服务解绑。
本接口为异步接口，接口返回成功后，需以返回的 RequestId 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async DeleteGatewayLoadBalancer(req, cb) {
        return this.request("DeleteGatewayLoadBalancer", req, cb);
    }
    /**
     * 注册服务器到目标组。
本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async RegisterTargetGroupInstances(req, cb) {
        return this.request("RegisterTargetGroupInstances", req, cb);
    }
    /**
     * 查询目标组信息
     */
    async DescribeTargetGroups(req, cb) {
        return this.request("DescribeTargetGroups", req, cb);
    }
    /**
     * 修改目标组的名称、健康探测等属性。
     */
    async ModifyTargetGroupAttribute(req, cb) {
        return this.request("ModifyTargetGroupAttribute", req, cb);
    }
    /**
     * 本接口用于查询异步任务的执行状态，对于非查询类的接口（创建/删除负载均衡实例等），在接口调用成功后，都需要使用本接口查询任务最终是否执行成功。
     */
    async DescribeTaskStatus(req, cb) {
        return this.request("DescribeTaskStatus", req, cb);
    }
    /**
     * 本接口(CreateGatewayLoadBalancer)用来创建网关负载均衡实例。为了使用网关负载均衡服务，您必须购买一个或多个网关负载均衡实例。成功调用该接口后，会返回网关负载均衡实例的唯一 ID。
注意：单个账号在每个地域的默认购买配额为：10个。
本接口为异步接口，接口成功返回后，可使用 DescribeGatewayLoadBalancers 接口查询负载均衡实例的状态（如创建中、正常），以确定是否创建成功。
     */
    async CreateGatewayLoadBalancer(req, cb) {
        return this.request("CreateGatewayLoadBalancer", req, cb);
    }
    /**
     * 解除负载均衡和目标组的关联关系。
本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async DisassociateTargetGroups(req, cb) {
        return this.request("DisassociateTargetGroups", req, cb);
    }
    /**
     * 修改目标组的服务器权重。
本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async ModifyTargetGroupInstancesWeight(req, cb) {
        return this.request("ModifyTargetGroupInstancesWeight", req, cb);
    }
    /**
     * 查询目标组后端服务状态。目前仅支持网关负载均衡类型的目标组支持查询后端服务状态。
     */
    async DescribeTargetGroupInstanceStatus(req, cb) {
        return this.request("DescribeTargetGroupInstanceStatus", req, cb);
    }
    /**
     * 本接口(AssociateTargetGroups)用来将目标组绑定到负载均衡。
本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async AssociateTargetGroups(req, cb) {
        return this.request("AssociateTargetGroups", req, cb);
    }
    /**
     * 查询一个地域的网关负载均衡实例列表。
     */
    async DescribeGatewayLoadBalancers(req, cb) {
        return this.request("DescribeGatewayLoadBalancers", req, cb);
    }
    /**
     * ModifyGatewayLoadBalancerAttribute 接口用于修改负载均衡实例的属性。支持修改负载均衡实例的名称、带宽上限。
     */
    async ModifyGatewayLoadBalancerAttribute(req, cb) {
        return this.request("ModifyGatewayLoadBalancerAttribute", req, cb);
    }
    /**
     * 获取目标组列表
     */
    async DescribeTargetGroupList(req, cb) {
        return this.request("DescribeTargetGroupList", req, cb);
    }
    /**
     * InquirePriceCreateGatewayLoadBalancer接口查询创建网关负载均衡的价格。
     */
    async InquirePriceCreateGatewayLoadBalancer(req, cb) {
        return this.request("InquirePriceCreateGatewayLoadBalancer", req, cb);
    }
    /**
     * 从目标组中解绑服务器。
本接口为异步接口，本接口返回成功后需以返回的 RequestID 为入参，调用 DescribeTaskStatus 接口查询本次任务是否成功。
     */
    async DeregisterTargetGroupInstances(req, cb) {
        return this.request("DeregisterTargetGroupInstances", req, cb);
    }
    /**
     * 创建目标组。该功能正在内测中，如需使用，请通过[工单申请](https://console.cloud.tencent.com/workorder/category?level1_id=6&level2_id=163&source=0&data_title=%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%20LB&step=1)。
     */
    async CreateTargetGroup(req, cb) {
        return this.request("CreateTargetGroup", req, cb);
    }
    /**
     * 获取目标组绑定的服务器信息。
     */
    async DescribeTargetGroupInstances(req, cb) {
        return this.request("DescribeTargetGroupInstances", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249051, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.habo = void 0;
const v20181203_1 = require("./v20181203");
exports.habo = {
    v20181203: v20181203_1.v20181203,
};

}, function(modId) { var map = {"./v20181203":1738984249052}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249052, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20181203 = void 0;
const Models = require("./habo_models");
const habo_client_1 = require("./habo_client");
exports.v20181203 = {
    Client: habo_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./habo_models":1738984249053,"./habo_client":1738984249054}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249053, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249054, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * habo client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("habo.tencentcloudapi.com", "2018-12-03", clientConfig);
    }
    /**
     * 上传样本到哈勃进行分析，异步生成分析日志。
     */
    async StartAnalyse(req, cb) {
        return this.request("StartAnalyse", req, cb);
    }
    /**
     * 查询指定md5样本是否分析完成，并获取分析日志下载地址。
     */
    async DescribeStatus(req, cb) {
        return this.request("DescribeStatus", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249055, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.hai = void 0;
const v20230812_1 = require("./v20230812");
exports.hai = {
    v20230812: v20230812_1.v20230812,
};

}, function(modId) { var map = {"./v20230812":1738984249056}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249056, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20230812 = void 0;
const Models = require("./hai_models");
const hai_client_1 = require("./hai_client");
exports.v20230812 = {
    Client: hai_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./hai_models":1738984249057,"./hai_client":1738984249058}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249057, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249058, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * hai client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("hai.tencentcloudapi.com", "2023-08-12", clientConfig);
    }
    /**
     * 查询实例
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 查询应用
     */
    async DescribeApplications(req, cb) {
        return this.request("DescribeApplications", req, cb);
    }
    /**
     * 获取prompt任务列表
     */
    async DescribeMuskPrompts(req, cb) {
        return this.request("DescribeMuskPrompts", req, cb);
    }
    /**
     * 查询场景
     */
    async DescribeScenes(req, cb) {
        return this.request("DescribeScenes", req, cb);
    }
    /**
     * 查询地域列表
     */
    async DescribeRegions(req, cb) {
        return this.request("DescribeRegions", req, cb);
    }
    /**
     * 本接口 (RunInstances) 用于创建一个或多个指定配置的实例。
     */
    async RunInstances(req, cb) {
        return this.request("RunInstances", req, cb);
    }
    /**
     * 本接口 (StartInstance) 用于主动启动实例。
     */
    async StartInstance(req, cb) {
        return this.request("StartInstance", req, cb);
    }
    /**
     * 创建musk prompt 任务
     */
    async CreateMuskPrompt(req, cb) {
        return this.request("CreateMuskPrompt", req, cb);
    }
    /**
     * 本接口 (TerminateInstances) 用于主动退还实例。
     */
    async TerminateInstances(req, cb) {
        return this.request("TerminateInstances", req, cb);
    }
    /**
     * 查询实例的网络配置及消耗情况
     */
    async DescribeInstanceNetworkStatus(req, cb) {
        return this.request("DescribeInstanceNetworkStatus", req, cb);
    }
    /**
     * 查询服务登录配置
     */
    async DescribeServiceLoginSettings(req, cb) {
        return this.request("DescribeServiceLoginSettings", req, cb);
    }
    /**
     * 本接口 (InquirePriceRunInstances) 用于实例询价。
     */
    async InquirePriceRunInstances(req, cb) {
        return this.request("InquirePriceRunInstances", req, cb);
    }
    /**
     * 本接口 (StopInstance) 用于主动关闭实例。
     */
    async StopInstance(req, cb) {
        return this.request("StopInstance", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249059, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.hasim = void 0;
const v20210716_1 = require("./v20210716");
exports.hasim = {
    v20210716: v20210716_1.v20210716,
};

}, function(modId) { var map = {"./v20210716":1738984249060}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249060, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210716 = void 0;
const Models = require("./hasim_models");
const hasim_client_1 = require("./hasim_client");
exports.v20210716 = {
    Client: hasim_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./hasim_models":1738984249061,"./hasim_client":1738984249062}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249061, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249062, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * hasim client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("hasim.tencentcloudapi.com", "2021-07-16", clientConfig);
    }
    /**
     * 删除策略
     */
    async DeleteTactic(req, cb) {
        return this.request("DeleteTactic", req, cb);
    }
    /**
     * 查询订单列表
     */
    async DescribeOrders(req, cb) {
        return this.request("DescribeOrders", req, cb);
    }
    /**
     * 查询云兔切换策略列表
     */
    async DescribeTactics(req, cb) {
        return this.request("DescribeTactics", req, cb);
    }
    /**
     * 创建自动化规则
     */
    async CreateRule(req, cb) {
        return this.request("CreateRule", req, cb);
    }
    /**
     * 删除标签
     */
    async DeleteTag(req, cb) {
        return this.request("DeleteTag", req, cb);
    }
    /**
     * 查询云兔连接列表
     */
    async DescribeLinks(req, cb) {
        return this.request("DescribeLinks", req, cb);
    }
    /**
     * 删除自动化规则
     */
    async DeleteRule(req, cb) {
        return this.request("DeleteRule", req, cb);
    }
    /**
     * 编辑自动化规则状态
     */
    async ModifyRuleStatus(req, cb) {
        return this.request("ModifyRuleStatus", req, cb);
    }
    /**
     * 编辑云兔高级日志状态
     */
    async ModifyLinkAdvancedLog(req, cb) {
        return this.request("ModifyLinkAdvancedLog", req, cb);
    }
    /**
     * 创建标签
     */
    async CreateTag(req, cb) {
        return this.request("CreateTag", req, cb);
    }
    /**
     * 修改云兔运营商
     */
    async ModifyLinkTele(req, cb) {
        return this.request("ModifyLinkTele", req, cb);
    }
    /**
     * 查询自动化规则
     */
    async DescribeRule(req, cb) {
        return this.request("DescribeRule", req, cb);
    }
    /**
     * 查询标签列表
     */
    async DescribeTags(req, cb) {
        return this.request("DescribeTags", req, cb);
    }
    /**
     * 编辑自动化规则
     */
    async ModifyRule(req, cb) {
        return this.request("ModifyRule", req, cb);
    }
    /**
     * 查询云兔连接详细信息
     */
    async DescribeLink(req, cb) {
        return this.request("DescribeLink", req, cb);
    }
    /**
     * 创建云兔切换策略
     */
    async CreateTactic(req, cb) {
        return this.request("CreateTactic", req, cb);
    }
    /**
     * 刷新云兔连接信息同步
     */
    async RenewLinkInfo(req, cb) {
        return this.request("RenewLinkInfo", req, cb);
    }
    /**
     * 修改云兔切换策略
     */
    async ModifyTactic(req, cb) {
        return this.request("ModifyTactic", req, cb);
    }
    /**
     * 查询云兔切换策略信息
     */
    async DescribeTactic(req, cb) {
        return this.request("DescribeTactic", req, cb);
    }
    /**
     * 查询自动化规则列表
     */
    async DescribeRules(req, cb) {
        return this.request("DescribeRules", req, cb);
    }
    /**
     * 编辑云兔策略
     */
    async ModifyLinkTactic(req, cb) {
        return this.request("ModifyLinkTactic", req, cb);
    }
    /**
     * 编辑标签
     */
    async ModifyTag(req, cb) {
        return this.request("ModifyTag", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249063, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.hcm = void 0;
const v20181106_1 = require("./v20181106");
exports.hcm = {
    v20181106: v20181106_1.v20181106,
};

}, function(modId) { var map = {"./v20181106":1738984249064}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249064, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20181106 = void 0;
const Models = require("./hcm_models");
const hcm_client_1 = require("./hcm_client");
exports.v20181106 = {
    Client: hcm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./hcm_models":1738984249065,"./hcm_client":1738984249066}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249065, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249066, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * hcm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("hcm.tencentcloudapi.com", "2018-11-06", clientConfig);
    }
    /**
     * 速算题目批改接口，根据用户上传的图片或图片的URL识别图片中的数学算式，进而给出算式的正确性评估。
     */
    async Evaluation(req, cb) {
        return this.request("Evaluation", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249067, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.hunyuan = void 0;
const v20230901_1 = require("./v20230901");
exports.hunyuan = {
    v20230901: v20230901_1.v20230901,
};

}, function(modId) { var map = {"./v20230901":1738984249068}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249068, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20230901 = void 0;
const Models = require("./hunyuan_models");
const hunyuan_client_1 = require("./hunyuan_client");
exports.v20230901 = {
    Client: hunyuan_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./hunyuan_models":1738984249069,"./hunyuan_client":1738984249070}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249069, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249070, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * hunyuan client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("hunyuan.tencentcloudapi.com", "2023-09-01", clientConfig);
    }
    /**
     * 设置付费模式
     */
    async SetPayMode(req, cb) {
        return this.request("SetPayMode", req, cb);
    }
    /**
     * 文件列表。
     */
    async FilesList(req, cb) {
        return this.request("FilesList", req, cb);
    }
    /**
     * 腾讯混元大模型是由腾讯研发的大语言模型，具备强大的中文创作能力，复杂语境下的逻辑推理能力，以及可靠的任务执行能力。本接口支持流式或非流式调用，当使用流式调用时为 SSE 协议。

 1. 本接口暂不支持返回图片内容。
 2. 默认该接口下单账号限制并发数为  5 路，如您有提高并发限制的需求请 [购买](https://buy.cloud.tencent.com/hunyuan) 。
 3. 请使用 SDK 调用本接口，每种开发语言的 SDK Git 仓库 examples/hunyuan/v20230901/ 目录下有提供示例供参考。SDK 链接在文档下方 “**开发者资源 - SDK**” 部分提供。
 4. 我们推荐您使用 API Explorer，方便快速地在线调试接口和下载各语言的示例代码，[点击打开](https://console.cloud.tencent.com/api/explorer?Product=hunyuan&Version=2023-09-01&Action=ChatCompletions)。
     */
    async GetThread(req, cb) {
        return this.request("GetThread", req, cb);
    }
    /**
     * 混元生图（多轮对话）接口基于混元大模型，将根据输入的文本描述生成图像，支持通过多轮对话的方式不断调整图像内容。分为提交任务和查询任务2个接口。
提交任务：输入文本和前置对话 ID 等，提交一个混元生图多轮对话异步任务，获得任务 ID。
查询任务：根据任务 ID 查询任务的处理状态、处理结果，任务处理完成后可获得在上一轮对话基础上继续生成的图像结果。
混元生图（多轮对话）默认提供1个并发任务数，代表最多能同时处理1个已提交的任务，上一个任务处理完毕后才能开始处理下一个任务。
     */
    async SubmitHunyuanImageChatJob(req, cb) {
        return this.request("SubmitHunyuanImageChatJob", req, cb);
    }
    /**
     * 腾讯混元大模型是由腾讯研发的大语言模型，具备强大的中文创作能力，复杂语境下的逻辑推理能力，以及可靠的任务执行能力。本接口支持流式或非流式调用，当使用流式调用时为 SSE 协议。

 1. 本接口暂不支持返回图片内容。
 2. 默认该接口下单账号限制并发数为  5 路，如您有提高并发限制的需求请 [购买](https://buy.cloud.tencent.com/hunyuan) 。
 3. 请使用 SDK 调用本接口，每种开发语言的 SDK Git 仓库 examples/hunyuan/v20230901/ 目录下有提供示例供参考。SDK 链接在文档下方 “**开发者资源 - SDK**” 部分提供。
 4. 我们推荐您使用 API Explorer，方便快速地在线调试接口和下载各语言的示例代码，[点击打开](https://console.cloud.tencent.com/api/explorer?Product=hunyuan&Version=2023-09-01&Action=ChatCompletions)。
     */
    async CreateThread(req, cb) {
        return this.request("CreateThread", req, cb);
    }
    /**
     * 该接口用于计算文本对应Token数、字符数。
     */
    async GetTokenCount(req, cb) {
        return this.request("GetTokenCount", req, cb);
    }
    /**
     * 混元生图接口基于混元大模型，将根据输入的文本描述，智能生成与之相关的结果图。分为提交任务和查询任务2个接口。
提交任务：输入文本等，提交一个混元生图异步任务，获得任务 ID。
查询任务：根据任务 ID 查询任务的处理状态、处理结果，任务处理完成后可获得生成图像结果。
并发任务数（并发）说明：并发任务数指能同时处理的任务数量。混元生图默认提供1个并发任务数，代表最多能同时处理1个已提交的任务，上一个任务处理完毕后才能开始处理下一个任务。
     */
    async QueryHunyuanImageJob(req, cb) {
        return this.request("QueryHunyuanImageJob", req, cb);
    }
    /**
     * 混元生图接口基于混元大模型，将根据输入的文本描述，智能生成与之相关的结果图。分为提交任务和查询任务2个接口。
提交任务：输入文本等，提交一个混元生图异步任务，获得任务 ID。
查询任务：根据任务 ID 查询任务的处理状态、处理结果，任务处理完成后可获得生成图像结果。
并发任务数（并发）说明：并发任务数指能同时处理的任务数量。混元生图默认提供1个并发任务数，代表最多能同时处理1个已提交的任务，上一个任务处理完毕后才能开始处理下一个任务。
     */
    async SubmitHunyuanImageJob(req, cb) {
        return this.request("SubmitHunyuanImageJob", req, cb);
    }
    /**
     * 删除文件。
     */
    async FilesDeletions(req, cb) {
        return this.request("FilesDeletions", req, cb);
    }
    /**
     * 腾讯混元大模型是由腾讯研发的大语言模型，具备强大的中文创作能力，复杂语境下的逻辑推理能力，以及可靠的任务执行能力。本接口支持流式或非流式调用，当使用流式调用时为 SSE 协议。

 1. 本接口暂不支持返回图片内容。
 2. 默认该接口下单账号限制并发数为  5 路，如您有提高并发限制的需求请 [购买](https://buy.cloud.tencent.com/hunyuan) 。
 3. 请使用 SDK 调用本接口，每种开发语言的 SDK Git 仓库 examples/hunyuan/v20230901/ 目录下有提供示例供参考。SDK 链接在文档下方 “**开发者资源 - SDK**” 部分提供。
 4. 我们推荐您使用 API Explorer，方便快速地在线调试接口和下载各语言的示例代码，[点击打开](https://console.cloud.tencent.com/api/explorer?Product=hunyuan&Version=2023-09-01&Action=ChatCompletions)。
     */
    async GetThreadMessageList(req, cb) {
        return this.request("GetThreadMessageList", req, cb);
    }
    /**
     * 腾讯混元大模型是由腾讯研发的大语言模型，具备强大的中文创作能力，复杂语境下的逻辑推理能力，以及可靠的任务执行能力。本接口支持流式或非流式调用，当使用流式调用时为 SSE 协议。

 1. 本接口暂不支持返回图片内容。
 2. 默认该接口下单账号限制并发数为  5 路，如您有提高并发限制的需求请 [购买](https://buy.cloud.tencent.com/hunyuan) 。
 3. 请使用 SDK 调用本接口，每种开发语言的 SDK Git 仓库 examples/hunyuan/v20230901/ 目录下有提供示例供参考。SDK 链接在文档下方 “**开发者资源 - SDK**” 部分提供。
 4. 我们推荐您使用 API Explorer，方便快速地在线调试接口和下载各语言的示例代码，[点击打开](https://console.cloud.tencent.com/api/explorer?Product=hunyuan&Version=2023-09-01&Action=ChatCompletions)。
     */
    async GetThreadMessage(req, cb) {
        return this.request("GetThreadMessage", req, cb);
    }
    /**
     * 腾讯混元大模型是由腾讯研发的大语言模型，具备强大的中文创作能力，复杂语境下的逻辑推理能力，以及可靠的任务执行能力。本接口支持流式或非流式调用，当使用流式调用时为 SSE 协议。

 1. 本接口暂不支持返回图片内容。
 2. 默认该接口下单账号限制并发数为  5 路，如您有提高并发限制的需求请 [购买](https://buy.cloud.tencent.com/hunyuan) 。
 3. 请使用 SDK 调用本接口，每种开发语言的 SDK Git 仓库 examples/hunyuan/v20230901/ 目录下有提供示例供参考。SDK 链接在文档下方 “**开发者资源 - SDK**” 部分提供。
 4. 我们推荐您使用 API Explorer，方便快速地在线调试接口和下载各语言的示例代码，[点击打开](https://console.cloud.tencent.com/api/explorer?Product=hunyuan&Version=2023-09-01&Action=ChatCompletions)。
     */
    async RunThread(req, cb) {
        return this.request("RunThread", req, cb);
    }
    /**
     * 如需使用OpenAI兼容接口， 请参考文档：[OpenAI 兼容接口](https://cloud.tencent.com/document/product/1729/111007)

腾讯混元大模型是由腾讯研发的大语言模型，具备强大的中文创作能力，复杂语境下的逻辑推理能力，以及可靠的任务执行能力。本接口支持流式或非流式调用，当使用流式调用时为 SSE 协议。

 1. 本接口暂不支持返回图片内容。
 2. 默认该接口下单账号限制并发数为  5 路，如您有提高并发限制的需求请 [购买](https://buy.cloud.tencent.com/hunyuan) 。
 3. 请使用 SDK 调用本接口，每种开发语言的 SDK Git 仓库 examples/hunyuan/v20230901/ 目录下有提供示例供参考。SDK 链接在文档下方 “**开发者资源 - SDK**” 部分提供。
 4. 我们推荐您使用 API Explorer，方便快速地在线调试接口和下载各语言的示例代码，[点击打开](https://console.cloud.tencent.com/api/explorer?Product=hunyuan&Version=2023-09-01&Action=ChatCompletions)。
     */
    async ChatCompletions(req, cb) {
        return this.request("ChatCompletions", req, cb);
    }
    /**
     * 混元生图（多轮对话）接口基于混元大模型，将根据输入的文本描述生成图像，支持通过多轮对话的方式不断调整图像内容。分为提交任务和查询任务2个接口。
提交任务：输入文本和前置对话 ID 等，提交一个混元生图多轮对话异步任务，获得任务 ID。
查询任务：根据任务 ID 查询任务的处理状态、处理结果，任务处理完成后可获得在上一轮对话基础上继续生成的图像结果。
混元生图（多轮对话）默认提供1个并发任务数，代表最多能同时处理1个已提交的任务，上一个任务处理完毕后才能开始处理下一个任务。
     */
    async QueryHunyuanImageChatJob(req, cb) {
        return this.request("QueryHunyuanImageChatJob", req, cb);
    }
    /**
     * 腾讯混元大模型是由腾讯研发的大语言模型，具备强大的中文创作能力，复杂语境下的逻辑推理能力，以及可靠的任务执行能力。本接口支持流式或非流式调用，当使用流式调用时为 SSE 协议。

 1. 本接口暂不支持返回图片内容。
 2. 默认该接口下单账号限制并发数为  5 路，如您有提高并发限制的需求请 [购买](https://buy.cloud.tencent.com/hunyuan) 。
 3. 请使用 SDK 调用本接口，每种开发语言的 SDK Git 仓库 examples/hunyuan/v20230901/ 目录下有提供示例供参考。SDK 链接在文档下方 “**开发者资源 - SDK**” 部分提供。
 4. 我们推荐您使用 API Explorer，方便快速地在线调试接口和下载各语言的示例代码，[点击打开](https://console.cloud.tencent.com/api/explorer?Product=hunyuan&Version=2023-09-01&Action=ChatCompletions)。
     */
    async ChatTranslations(req, cb) {
        return this.request("ChatTranslations", req, cb);
    }
    /**
     * 腾讯混元 Embedding 接口，可以将文本转化为高质量的向量数据。向量维度为1024维。
     */
    async GetEmbedding(req, cb) {
        return this.request("GetEmbedding", req, cb);
    }
    /**
     * 上传用于不同用途的文件。
当前用途仅支持 hunyuan 等模型的文档理解。
     */
    async FilesUploads(req, cb) {
        return this.request("FilesUploads", req, cb);
    }
    /**
     * 文生图轻量版接口根据输入的文本描述，智能生成与之相关的结果图。
文生图轻量版默认提供3个并发任务数，代表最多能同时处理3个已提交的任务，上一个任务处理完毕后才能开始处理下一个任务。
     */
    async TextToImageLite(req, cb) {
        return this.request("TextToImageLite", req, cb);
    }
    /**
     * 开通服务
     */
    async ActivateService(req, cb) {
        return this.request("ActivateService", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249071, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.iai = void 0;
const v20200303_1 = require("./v20200303");
const v20180301_1 = require("./v20180301");
exports.iai = {
    v20200303: v20200303_1.v20200303,
    v20180301: v20180301_1.v20180301,
};

}, function(modId) { var map = {"./v20200303":1738984249072,"./v20180301":1738984249075}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249072, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200303 = void 0;
const Models = require("./iai_models");
const iai_client_1 = require("./iai_client");
exports.v20200303 = {
    Client: iai_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./iai_models":1738984249073,"./iai_client":1738984249074}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249073, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249074, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * iai client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("iai.tencentcloudapi.com", "2020-03-03", clientConfig);
    }
    /**
     * 从某人员库中删除人员，此操作仅影响该人员库。若该人员仅存在于指定的人员库中，该人员将被删除，其所有的人脸信息也将被删除。
     */
    async DeletePersonFromGroup(req, cb) {
        return this.request("DeletePersonFromGroup", req, cb);
    }
    /**
     * 用于对一张待识别的人脸图片，在一个或多个人员库中识别出最相似的 TopK 人员，按照**人员库的维度**以人员相似度从大到小顺序排列。

支持一次性识别图片中的最多 10 张人脸，支持跨人员库（Group）搜索。

单次搜索的人员库人脸总数量和人员库的算法模型版本（FaceModelVersion）相关。算法模型版本为2.0的人员库，单次搜索人员库人脸总数量不得超过 100 万张；算法模型版本为3.0的人员库，单次搜索人员库人脸总数量不得超过 300 万张。

与[人员搜索](https://cloud.tencent.com/document/product/867/44992)及[人员搜索按库返回](https://cloud.tencent.com/document/product/867/44991)接口不同的是，本接口将该人员（Person）下的每个人脸（Face）都作为单独个体进行验证，而[人员搜索](https://cloud.tencent.com/document/product/867/44992)及[人员搜索按库返回](https://cloud.tencent.com/document/product/867/44991)接口 会将该人员（Person）下的所有人脸（Face）进行融合特征处理，即若某个Person下有4张 Face，本接口会将4张 Face 的特征进行融合处理，生成对应这个 Person 的特征，使搜索更加准确。

本接口需与[人员库管理相关接口](https://cloud.tencent.com/document/product/867/45015)结合使用。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。

>
- 不可同时搜索不同算法模型版本（FaceModelVersion）的人员库。
     */
    async SearchFacesReturnsByGroup(req, cb) {
        return this.request("SearchFacesReturnsByGroup", req, cb);
    }
    /**
     * 用于创建一个空的人员库，如果人员库已存在返回错误。
可根据需要创建自定义描述字段，用于辅助描述该人员库下的人员信息。

1个APPID下最多创建10万个人员库（Group）、最多包含5000万张人脸（Face）。

不同算法模型版本（FaceModelVersion）的人员库（Group）最多可包含人脸（Face）数不同。算法模型版本为2.0的人员库最多包含100万张人脸，算法模型版本为3.0的人员库最多可包含300万张人脸。
     */
    async CreateGroup(req, cb) {
        return this.request("CreateGroup", req, cb);
    }
    /**
     * 获取指定人员的信息，包括姓名、性别、人脸等。
     */
    async GetPersonBaseInfo(req, cb) {
        return this.request("GetPersonBaseInfo", req, cb);
    }
    /**
     * 用于对用户上传的静态图片进行人脸活体检测。与动态活体检测的区别是：静态活体检测中，用户不需要通过唇语或摇头眨眼等动作来识别。

静态活体检测适用于手机自拍的场景，或对防攻击要求不高的场景。如果对活体检测有更高安全性要求，请使用[人脸核身·云智慧眼](https://cloud.tencent.com/product/faceid)产品。

>
- 图片的宽高比请接近3：4，不符合宽高比的图片返回的分值不具备参考意义。本接口适用于类手机自拍场景，非类手机自拍照返回的分值不具备参考意义。

>
- 使用过程中建议正对摄像头，不要距离太远，使面部可以完整地显示在识别的框内，识别过程中不要移动设备或遮挡面部。不要选择光线过强或过弱的环境进行面部识别，识别时不要添加任何滤镜。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async DetectLiveFace(req, cb) {
        return this.request("DetectLiveFace", req, cb);
    }
    /**
     * 将一组人脸图片添加到一个人员中。一个人员最多允许包含 5 张图片。若该人员存在多个人员库中，所有人员库中该人员图片均会增加。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async CreateFace(req, cb) {
        return this.request("CreateFace", req, cb);
    }
    /**
     * 删除该人员库及包含的所有的人员。同时，人员对应的所有人脸信息将被删除。若某人员同时存在多个人员库中，该人员不会被删除，但属于该人员库中的自定义描述字段信息会被删除，属于其他人员库的自定义描述字段信息不受影响。
     */
    async DeleteGroup(req, cb) {
        return this.request("DeleteGroup", req, cb);
    }
    /**
     * 获取指定人员库中人员数量。
     */
    async GetPersonListNum(req, cb) {
        return this.request("GetPersonListNum", req, cb);
    }
    /**
     * 获取指定人员的信息，包括加入的人员库、描述内容等。
     */
    async GetPersonGroupInfo(req, cb) {
        return this.request("GetPersonGroupInfo", req, cb);
    }
    /**
     * 对请求图片进行五官定位（也称人脸关键点定位），计算构成人脸轮廓的 90 个点，包括眉毛（左右各 8 点）、眼睛（左右各 8 点）、鼻子（13 点）、嘴巴（22 点）、脸型轮廓（21 点）、眼珠[或瞳孔]（2点）。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async AnalyzeFace(req, cb) {
        return this.request("AnalyzeFace", req, cb);
    }
    /**
     * 修改人员信息，包括名称、性别等。人员名称和性别修改会同步到包含该人员的所有人员库。
     */
    async ModifyPersonBaseInfo(req, cb) {
        return this.request("ModifyPersonBaseInfo", req, cb);
    }
    /**
     * 用于对一张待识别的人脸图片，在一个或多个人员库中识别出最相似的 TopK 人员，识别结果按照相似度从大到小排序。

支持一次性识别图片中的最多 10 张人脸，支持一次性跨 100 个人员库（Group）搜索。

单次搜索的人员库人脸总数量和人员库的算法模型版本（FaceModelVersion）相关。算法模型版本为2.0的人员库，单次搜索人员库人脸总数量不得超过 100 万张；算法模型版本为3.0的人员库，单次搜索人员库人脸总数量不得超过 300 万张。

与[人员搜索](https://cloud.tencent.com/document/product/867/44992)及[人员搜索按库返回](https://cloud.tencent.com/document/product/867/44991)接口不同的是，本接口将该人员（Person）下的每个人脸（Face）都作为单独个体进行验证，而人员搜索及人员搜索按库返回接口 会将该人员（Person）下的所有人脸（Face）进行融合特征处理，即若某个Person下有4张 Face，本接口会将4张 Face 的特征进行融合处理，生成对应这个 Person 的特征，使搜索更加准确。


本接口需与[人员库管理相关接口](https://cloud.tencent.com/document/product/867/45015)结合使用。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。

>
- 不可同时搜索不同算法模型版本（FaceModelVersion）的人员库。
     */
    async SearchFaces(req, cb) {
        return this.request("SearchFaces", req, cb);
    }
    /**
     * 将已存在于某人员库的人员复制到其他人员库，该人员的描述信息不会被复制。单个人员最多只能同时存在100个人员库中。
>
- 注：若该人员创建时算法模型版本为2.0，复制到非2.0算法模型版本的Group中时，复制操作将会失败。
     */
    async CopyPerson(req, cb) {
        return this.request("CopyPerson", req, cb);
    }
    /**
     * 给定一张人脸图片和一个 PersonId，判断图片中的人和 PersonId 对应的人是否为同一人。PersonId 请参考[人员库管理相关接口](https://cloud.tencent.com/document/product/867/45015)。

与[人脸比对](https://cloud.tencent.com/document/product/867/44987)接口不同的是，人脸验证用于判断 “此人是否是此人”，“此人”的信息已存于人员库中，“此人”可能存在多张人脸图片；而[人脸比对](https://cloud.tencent.com/document/product/867/44987)用于判断两张人脸的相似度。

与[人员验证](https://cloud.tencent.com/document/product/867/44982)接口不同的是，人脸验证将该人员（Person）下的每个人脸（Face）都作为单独个体进行验证，而[人员验证](https://cloud.tencent.com/document/product/867/44982)会将该人员（Person）下的所有人脸（Face）进行融合特征处理，即若某个 Person下有4张 Face，人员验证接口会将4张 Face 的特征进行融合处理，生成对应这个 Person 的特征，使人员验证（确定待识别的人脸图片是某人员）更加准确。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async VerifyFace(req, cb) {
        return this.request("VerifyFace", req, cb);
    }
    /**
     * 对请求图片进行五官定位（也称人脸关键点定位），获得人脸的精准信息，返回多达888点关键信息，对五官和脸部轮廓进行精确定位。
     */
    async AnalyzeDenseLandmarks(req, cb) {
        return this.request("AnalyzeDenseLandmarks", req, cb);
    }
    /**
     * 删除该人员信息，此操作会导致所有人员库均删除此人员。同时，该人员的所有人脸信息将被删除。
     */
    async DeletePerson(req, cb) {
        return this.request("DeletePerson", req, cb);
    }
    /**
     * 修改人员库名称、备注、自定义描述字段名称。
     */
    async ModifyGroup(req, cb) {
        return this.request("ModifyGroup", req, cb);
    }
    /**
     * 避免官网歧义

升级人员库。升级过程中，人员库仍然为原算法版本，人员库相关操作仍然支持。升级完成后，人员库为新算法版本。
单个人员库有且仅支持一次回滚操作。

升级是一个耗时的操作，执行时间与人员库的人脸数相关，升级的人员库中的人脸数越多，升级的耗时越长。升级接口是个异步任务，调用成功后返回JobId，通过GetUpgradeGroupFaceModelVersionResult查询升级进度和结果。如果升级成功，人员库版本将切换到新版本。如果想回滚到旧版本，可以调用RevertGroupFaceModelVersion进行回滚。

注：某些接口无法进行跨人员库版本操作，例如SearchFaces，SearchPersons和CopyPerson等。当业务有多个Group操作的场景时，如同时搜索Group1和Group2，如果升级了Group1，此时Group1和Group2版本不同，造成了跨版本操作，将导致Search接口无法正常执行，返回不允许执行跨版本操作错误，升级前需考虑业务是否有多库操作的场景，否则会影响线上接口表现。
     */
    async UpgradeGroupFaceModelVersion(req, cb) {
        return this.request("UpgradeGroupFaceModelVersion", req, cb);
    }
    /**
     * 同理

本接口用于回滚人员库的人脸识别算法模型版本。单个人员库有且仅有一次回滚机会。

回滚操作会在10s内生效，回滚操作中，您对人员库的操作可能会失效。
     */
    async RevertGroupFaceModelVersion(req, cb) {
        return this.request("RevertGroupFaceModelVersion", req, cb);
    }
    /**
     * 创建人员，添加人脸、姓名、性别及其他相关信息。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async CreatePerson(req, cb) {
        return this.request("CreatePerson", req, cb);
    }
    /**
     * 对两张图片中的人脸进行相似度比对，返回人脸相似度分数。

防疫场景人脸比对接口可在人脸戴口罩情况下使用，口罩遮挡程度最高可以遮挡鼻尖。

如图片人脸不存在防疫场景下戴口罩的情况，建议使用人脸比对服务。
     */
    async CompareMaskFace(req, cb) {
        return this.request("CompareMaskFace", req, cb);
    }
    /**
     * 避免官网歧义

获取人员库升级任务列表

     */
    async GetUpgradeGroupFaceModelVersionJobList(req, cb) {
        return this.request("GetUpgradeGroupFaceModelVersionJobList", req, cb);
    }
    /**
     * 对两张图片中的人脸进行相似度比对，返回人脸相似度分数。

若您需要判断 “此人是否是某人”，即验证某张图片中的人是否是已知身份的某人，如常见的人脸登录场景，建议使用[人脸验证](https://www.tencentcloud.com/document/product/1059/36972)或[人员验证](https://www.tencentcloud.com/document/product/1059/36971)接口。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async DetectFaceSimilarity(req, cb) {
        return this.request("DetectFaceSimilarity", req, cb);
    }
    /**
     * 获取人员库信息。
     */
    async GetGroupInfo(req, cb) {
        return this.request("GetGroupInfo", req, cb);
    }
    /**
     * 检测给定图片中的人脸（Face）的位置、相应的面部属性和人脸质量信息，位置包括 (x，y，w，h)，面部属性包括性别（gender）、年龄（age）、表情（expression）、魅力（beauty）、眼镜（glass）、发型（hair）、口罩（mask）和姿态 (pitch，roll，yaw)，人脸质量信息包括整体质量分（score）、模糊分（sharpness）、光照分（brightness）和五官遮挡分（completeness）。

 
其中，人脸质量信息主要用于评价输入的人脸图片的质量。在使用人脸识别服务时，建议您对输入的人脸图片进行质量检测，提升后续业务处理的效果。该功能的应用场景包括：

1） 人员库[创建人员](https://cloud.tencent.com/document/product/867/45014)/[增加人脸](https://cloud.tencent.com/document/product/867/45016)：保证人员人脸信息的质量，便于后续的业务处理。

2） [人脸搜索](https://cloud.tencent.com/document/product/867/44994)：保证输入的图片质量，快速准确匹配到对应的人员。

3） [人脸验证](https://cloud.tencent.com/document/product/867/44983)：保证人脸信息的质量，避免明明是本人却认证不通过的情况。

4） 人脸融合：保证上传的人脸质量，人脸融合的效果更好。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async DetectFace(req, cb) {
        return this.request("DetectFace", req, cb);
    }
    /**
     * 获取指定人员库中的人员列表。
     */
    async GetPersonList(req, cb) {
        return this.request("GetPersonList", req, cb);
    }
    /**
     * 给定一张人脸图片和一个 PersonId，判断图片中的人和 PersonId 对应的人是否为同一人。PersonId 请参考[人员库管理相关接口](https://cloud.tencent.com/document/product/867/45015)。
本接口会将该人员（Person）下的所有人脸（Face）进行融合特征处理，即若某个Person下有4张 Face，本接口会将4张 Face 的特征进行融合处理，生成对应这个 Person 的特征，使人员验证（确定待识别的人脸图片是某人员）更加准确。

 和人脸比对相关接口不同的是，人脸验证相关接口用于判断 “此人是否是此人”，“此人”的信息已存于人员库中，“此人”可能存在多张人脸图片；而人脸比对相关接口用于判断两张人脸的相似度。


>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
- 仅支持算法模型版本（FaceModelVersion）为3.0的人员库。
     */
    async VerifyPerson(req, cb) {
        return this.request("VerifyPerson", req, cb);
    }
    /**
     * 检测给定图片中的人脸（Face）的位置、相应的面部属性和人脸质量信息，位置包括 (x，y，w，h)，面部属性包括性别（gender）、年龄（age）、表情（expression）、魅力（beauty）、眼镜（glass）、发型（hair）、口罩（mask）和姿态 (pitch，roll，yaw)。

 
其中，人脸质量信息主要用于评价输入的人脸图片的质量。在使用人脸识别服务时，建议您对输入的人脸图片进行质量检测，提升后续业务处理的效果。该功能的应用场景包括：

1） 人员库[创建人员](https://cloud.tencent.com/document/product/867/32793)/[增加人脸](https://cloud.tencent.com/document/product/867/32795)：保证人员人脸信息的质量，便于后续的业务处理。

2） [人脸搜索](https://cloud.tencent.com/document/product/867/32798)：保证输入的图片质量，快速准确匹配到对应的人员。

3） [人脸验证](https://cloud.tencent.com/document/product/867/32806)：保证人脸信息的质量，避免明明是本人却认证不通过的情况。

4） [人脸融合](https://cloud.tencent.com/product/facefusion)：保证上传的人脸质量，人脸融合的效果更好。

>
- 本接口是[人脸检测与分析](https://cloud.tencent.com/document/product/867/44989)的升级，具体在于：
1.本接口可以指定需要计算返回的人脸属性，避免无效计算，降低耗时；
2.本接口支持更多属性细项数，也会持续增加更多功能。
请您使用本接口完成相应的人脸检测与属性分析需求。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async DetectFaceAttributes(req, cb) {
        return this.request("DetectFaceAttributes", req, cb);
    }
    /**
     * 人脸静态活体检测（高精度版）可用于对用户上传的静态图片进行防翻拍活体检测，以判断是否是翻拍图片。

相比现有静态活体检测服务，高精度版在维持高真人通过率的前提下，增强了对高清屏幕、裁剪纸片、3D面具等攻击的防御能力，攻击拦截率约为业内同类型产品形态4-5倍。同时支持多场景人脸核验，满足移动端、PC端各类型场景的图片活体检验需求，适用于各个行业不同的活体检验应用。

人脸静态活体检测（高精度版）接口于2022年8月1日 00:00起正式开始计费，采取后付费按量计费模式，详见[计费概述](https://cloud.tencent.com/document/product/867/17640)。
     */
    async DetectLiveFaceAccurate(req, cb) {
        return this.request("DetectLiveFaceAccurate", req, cb);
    }
    /**
     * 避免官网歧义

人员库升级结果查询
     */
    async GetUpgradeGroupFaceModelVersionResult(req, cb) {
        return this.request("GetUpgradeGroupFaceModelVersionResult", req, cb);
    }
    /**
     * 修改指定人员库人员描述内容。
     */
    async ModifyPersonGroupInfo(req, cb) {
        return this.request("ModifyPersonGroupInfo", req, cb);
    }
    /**
     * 用于对一张待识别的人脸图片，在一个或多个人员库中识别出最相似的 TopK 人员，按照相似度从大到小排列。

支持一次性识别图片中的最多 10 张人脸，支持一次性跨 100 个人员库（Group）搜索。

单次搜索的人员库人脸总数量和人员库的算法模型版本（FaceModelVersion）相关。算法模型版本为2.0的人员库，单次搜索人员库人脸总数量不得超过 100 万张；算法模型版本为3.0的人员库，单次搜索人员库人脸总数量不得超过 300 万张。

本接口会将该人员（Person）下的所有人脸（Face）进行融合特征处理，即若某个 Person 下有4张 Face ，本接口会将4张 Face 的特征进行融合处理，生成对应这个 Person 的特征，使人员搜索（确定待识别的人脸图片是某人）更加准确。而[人脸搜索](https://cloud.tencent.com/document/product/867/44994)及[人脸搜索按库返回接口](https://cloud.tencent.com/document/product/867/44993)将该人员（Person）下的每个人脸（Face）都作为单独个体进行搜索。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
- 仅支持算法模型版本（FaceModelVersion）为3.0的人员库。
     */
    async SearchPersons(req, cb) {
        return this.request("SearchPersons", req, cb);
    }
    /**
     * 对两张图片中的人脸进行相似度比对，返回人脸相似度分数。

若您需要判断 “此人是否是某人”，即验证某张图片中的人是否是已知身份的某人，如常见的人脸登录场景，建议使用[人脸验证](https://cloud.tencent.com/document/product/867/44983)或[人员验证](https://cloud.tencent.com/document/product/867/44982)接口。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async CompareFace(req, cb) {
        return this.request("CompareFace", req, cb);
    }
    /**
     * 用于对一张待识别的人脸图片，在一个或多个人员库中识别出最相似的 TopK 人员，按照**人员库的维度**以人员相似度从大到小顺序排列。

支持一次性识别图片中的最多 10 张人脸，支持跨人员库（Group）搜索。

单次搜索的人员库人脸总数量和人员库的算法模型版本（FaceModelVersion）相关。算法模型版本为2.0的人员库，单次搜索人员库人脸总数量不得超过 100 万张；算法模型版本为3.0的人员库，单次搜索人员库人脸总数量不得超过 300 万张。

本接口会将该人员（Person）下的所有人脸（Face）进行融合特征处理，即若某个 Person 下有4张 Face ，本接口会将4张 Face 的特征进行融合处理，生成对应这个 Person 的特征，使人员搜索（确定待识别的人脸图片是某人）更加准确。而[人脸搜索](https://cloud.tencent.com/document/product/867/44994)及[人脸搜索按库返回接口](https://cloud.tencent.com/document/product/867/44993)将该人员（Person）下的每个人脸（Face）都作为单独个体进行搜索。
>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
- 仅支持算法模型版本（FaceModelVersion）为3.0的人员库。
     */
    async SearchPersonsReturnsByGroup(req, cb) {
        return this.request("SearchPersonsReturnsByGroup", req, cb);
    }
    /**
     * 获取人员库列表。
     */
    async GetGroupList(req, cb) {
        return this.request("GetGroupList", req, cb);
    }
    /**
     * 删除一个人员下的人脸图片。如果该人员只有一张人脸图片，则返回错误。
     */
    async DeleteFace(req, cb) {
        return this.request("DeleteFace", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249075, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180301 = void 0;
const Models = require("./iai_models");
const iai_client_1 = require("./iai_client");
exports.v20180301 = {
    Client: iai_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./iai_models":1738984249076,"./iai_client":1738984249077}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249076, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249077, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * iai client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("iai.tencentcloudapi.com", "2018-03-01", clientConfig);
    }
    /**
     * 从某人员库中删除人员，此操作仅影响该人员库。若该人员仅存在于指定的人员库中，该人员将被删除，其所有的人脸信息也将被删除。
     */
    async DeletePersonFromGroup(req, cb) {
        return this.request("DeletePersonFromGroup", req, cb);
    }
    /**
     * 用于对一张待识别的人脸图片，在一个或多个人员库中识别出最相似的 TopK 人员，按照**人员库的维度**以人员相似度从大到小顺序排列。

支持一次性识别图片中的最多 10 张人脸，支持跨人员库（Group）搜索。

单次搜索的人员库人脸总数量和人员库的算法模型版本（FaceModelVersion）相关。算法模型版本为2.0的人员库，单次搜索人员库人脸总数量不得超过 100 万张；算法模型版本为3.0的人员库，单次搜索人员库人脸总数量不得超过 300 万张。

与[人员搜索](https://cloud.tencent.com/document/product/867/38881)及[人员搜索按库返回](https://cloud.tencent.com/document/product/867/38880)接口不同的是，本接口将该人员（Person）下的每个人脸（Face）都作为单独个体进行验证，而[人员搜索](https://cloud.tencent.com/document/product/867/38881)及[人员搜索按库返回](https://cloud.tencent.com/document/product/867/38880)接口 会将该人员（Person）下的所有人脸（Face）进行融合特征处理，即若某个Person下有4张 Face，本接口会将4张 Face 的特征进行融合处理，生成对应这个 Person 的特征，使搜索更加准确。

本接口需与[人员库管理相关接口](https://cloud.tencent.com/document/product/867/32794)结合使用。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。


     */
    async SearchFacesReturnsByGroup(req, cb) {
        return this.request("SearchFacesReturnsByGroup", req, cb);
    }
    /**
     * 用于创建一个空的人员库，如果人员库已存在返回错误。
可根据需要创建自定义描述字段，用于辅助描述该人员库下的人员信息。

1个APPID下最多创建10万个人员库（Group）、最多包含5000万张人脸（Face）。

不同算法模型版本（FaceModelVersion）的人员库（Group）最多可包含人脸（Face）数不同。算法模型版本为2.0的人员库最多包含100万张人脸，算法模型版本为3.0的人员库最多可包含300万张人脸。
     */
    async CreateGroup(req, cb) {
        return this.request("CreateGroup", req, cb);
    }
    /**
     * 获取指定人员的信息，包括姓名、性别、人脸等。
     */
    async GetPersonBaseInfo(req, cb) {
        return this.request("GetPersonBaseInfo", req, cb);
    }
    /**
     * 用于对用户上传的静态图片进行人脸活体检测。与动态活体检测的区别是：静态活体检测中，用户不需要通过唇语或摇头眨眼等动作来识别。

静态活体检测适用于手机自拍的场景，或对防攻击要求不高的场景。如果对活体检测有更高安全性要求，请使用[人脸核身·云智慧眼](https://cloud.tencent.com/product/faceid)产品。

>
- 图片的宽高比请接近3：4，不符合宽高比的图片返回的分值不具备参考意义。本接口适用于类手机自拍场景，非类手机自拍照返回的分值不具备参考意义。

>
- 使用过程中建议正对摄像头，不要距离太远，使面部可以完整地显示在识别的框内，识别过程中不要移动设备或遮挡面部。不要选择光线过强或过弱的环境进行面部识别，识别时不要添加任何滤镜。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。

## 调用次数计费（资源包）
|资源包规格|100万次|1000万次|5000万次|1亿次|
|-|-|-|-|-|
|人脸静态活体检测|1800元|17400元|75000元|110000元|

## 调用次数计费（后付费）
|月接口调用总量|0<调用量≤300万|300万<调用量≤1500万|调用量>1500万|
|-|-|-|-|
|人脸静态活体检测|0.0019元/次|0.0017元/次|0.0013元/次|
     */
    async DetectLiveFace(req, cb) {
        return this.request("DetectLiveFace", req, cb);
    }
    /**
     * 将一组人脸图片添加到一个人员中。一个人员最多允许包含 5 张图片。若该人员存在多个人员库中，所有人员库中该人员图片均会增加。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async CreateFace(req, cb) {
        return this.request("CreateFace", req, cb);
    }
    /**
     * 删除该人员库及包含的所有的人员。同时，人员对应的所有人脸信息将被删除。若某人员同时存在多个人员库中，该人员不会被删除，但属于该人员库中的自定义描述字段信息会被删除，属于其他人员库的自定义描述字段信息不受影响。

     */
    async DeleteGroup(req, cb) {
        return this.request("DeleteGroup", req, cb);
    }
    /**
     * 获取指定人员库中人员数量。
     */
    async GetPersonListNum(req, cb) {
        return this.request("GetPersonListNum", req, cb);
    }
    /**
     * 获取指定人员的信息，包括加入的人员库、描述内容等。
     */
    async GetPersonGroupInfo(req, cb) {
        return this.request("GetPersonGroupInfo", req, cb);
    }
    /**
     * 对请求图片进行五官定位（也称人脸关键点定位），计算构成人脸轮廓的 90 个点，包括眉毛（左右各 8 点）、眼睛（左右各 8 点）、鼻子（13 点）、嘴巴（22 点）、脸型轮廓（21 点）、眼珠[或瞳孔]（2点）。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async AnalyzeFace(req, cb) {
        return this.request("AnalyzeFace", req, cb);
    }
    /**
     * 修改人员信息，包括名称、性别等。人员名称和性别修改会同步到包含该人员的所有人员库。
     */
    async ModifyPersonBaseInfo(req, cb) {
        return this.request("ModifyPersonBaseInfo", req, cb);
    }
    /**
     * 用于对一张待识别的人脸图片，在一个或多个人员库中识别出最相似的 TopK 人员，识别结果按照相似度从大到小排序。

支持一次性识别图片中的最多 10 张人脸，支持一次性跨 100 个人员库（Group）搜索。

单次搜索的人员库人脸总数量和人员库的算法模型版本（FaceModelVersion）相关。算法模型版本为2.0的人员库，单次搜索人员库人脸总数量不得超过 100 万张；算法模型版本为3.0的人员库，单次搜索人员库人脸总数量不得超过 300 万张。

与[人员搜索](https://cloud.tencent.com/document/product/867/38881)及[人员搜索按库返回](https://cloud.tencent.com/document/product/867/38880)接口不同的是，本接口将该人员（Person）下的每个人脸（Face）都作为单独个体进行验证，而人员搜索及人员搜索按库返回接口 会将该人员（Person）下的所有人脸（Face）进行融合特征处理，即若某个Person下有4张 Face，本接口会将4张 Face 的特征进行融合处理，生成对应这个 Person 的特征，使搜索更加准确。


本接口需与[人员库管理相关接口](https://cloud.tencent.com/document/product/867/32794)结合使用。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async SearchFaces(req, cb) {
        return this.request("SearchFaces", req, cb);
    }
    /**
     * 将已存在于某人员库的人员复制到其他人员库，该人员的描述信息不会被复制。单个人员最多只能同时存在100个人员库中。
>
- 注：若该人员创建时算法模型版本为2.0，复制到非2.0算法模型版本的Group中时，复制操作将会失败。
     */
    async CopyPerson(req, cb) {
        return this.request("CopyPerson", req, cb);
    }
    /**
     * 给定一张人脸图片和一个 PersonId，判断图片中的人和 PersonId 对应的人是否为同一人。PersonId 请参考[人员库管理相关接口](https://cloud.tencent.com/document/product/867/32794)。

与[人脸比对](https://cloud.tencent.com/document/product/867/32802)接口不同的是，人脸验证用于判断 “此人是否是此人”，“此人”的信息已存于人员库中，“此人”可能存在多张人脸图片；而[人脸比对](https://cloud.tencent.com/document/product/867/32802)用于判断两张人脸的相似度。

与[人员验证](https://cloud.tencent.com/document/product/867/38879)接口不同的是，人脸验证将该人员（Person）下的每个人脸（Face）都作为单独个体进行验证，而[人员验证](https://cloud.tencent.com/document/product/867/38879)会将该人员（Person）下的所有人脸（Face）进行融合特征处理，即若某个 Person下有4张 Face，人员验证接口会将4张 Face 的特征进行融合处理，生成对应这个 Person 的特征，使人员验证（确定待识别的人脸图片是某人员）更加准确。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async VerifyFace(req, cb) {
        return this.request("VerifyFace", req, cb);
    }
    /**
     * 对请求图片进行五官定位（也称人脸关键点定位），获得人脸的精准信息，返回多达888点关键信息，对五官和脸部轮廓进行精确定位。
     */
    async AnalyzeDenseLandmarks(req, cb) {
        return this.request("AnalyzeDenseLandmarks", req, cb);
    }
    /**
     * 删除该人员信息，此操作会导致所有人员库均删除此人员。同时，该人员的所有人脸信息将被删除。
     */
    async DeletePerson(req, cb) {
        return this.request("DeletePerson", req, cb);
    }
    /**
     * 修改人员库名称、备注、自定义描述字段名称。
     */
    async ModifyGroup(req, cb) {
        return this.request("ModifyGroup", req, cb);
    }
    /**
     * 接口已经不使用了，需要下线掉，以免留在官网产生歧义

升级人员库。升级过程中，人员库仍然为原算法版本，人员库相关操作仍然支持。升级完成后，人员库为新算法版本。
单个人员库有且仅支持一次回滚操作。
注：此处QPS限制为10。
     */
    async UpgradeGroupFaceModelVersion(req, cb) {
        return this.request("UpgradeGroupFaceModelVersion", req, cb);
    }
    /**
     * 此接口文档早已废弃，为了避免官网18版本存留歧义，需要下线

本接口用于回滚人员库的人脸识别算法模型版本。单个人员库有且仅有一次回滚机会。

回滚操作会在10s内生效，回滚操作中，您对人员库的操作可能会失效。
     */
    async RevertGroupFaceModelVersion(req, cb) {
        return this.request("RevertGroupFaceModelVersion", req, cb);
    }
    /**
     * 创建人员，添加人脸、姓名、性别及其他相关信息。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async CreatePerson(req, cb) {
        return this.request("CreatePerson", req, cb);
    }
    /**
     * 避免官网歧义

获取人员库升级任务列表

     */
    async GetUpgradeGroupFaceModelVersionJobList(req, cb) {
        return this.request("GetUpgradeGroupFaceModelVersionJobList", req, cb);
    }
    /**
     * 获取人员库信息。
     */
    async GetGroupInfo(req, cb) {
        return this.request("GetGroupInfo", req, cb);
    }
    /**
     * 检测给定图片中的人脸（Face）的位置、相应的面部属性和人脸质量信息，位置包括 (x，y，w，h)，面部属性包括性别（gender）、年龄（age）、表情（expression）、魅力（beauty）、眼镜（glass）、发型（hair）、口罩（mask）和姿态 (pitch，roll，yaw)，人脸质量信息包括整体质量分（score）、模糊分（sharpness）、光照分（brightness）和五官遮挡分（completeness）。

 
其中，人脸质量信息主要用于评价输入的人脸图片的质量。在使用人脸识别服务时，建议您对输入的人脸图片进行质量检测，提升后续业务处理的效果。该功能的应用场景包括：

1） 人员库[创建人员](https://cloud.tencent.com/document/product/867/32793)/[增加人脸](https://cloud.tencent.com/document/product/867/32795)：保证人员人脸信息的质量，便于后续的业务处理。

2） [人脸搜索](https://cloud.tencent.com/document/product/867/32798)：保证输入的图片质量，快速准确匹配到对应的人员。

3） [人脸验证](https://cloud.tencent.com/document/product/867/32806)：保证人脸信息的质量，避免明明是本人却认证不通过的情况。

4） [人脸融合](https://cloud.tencent.com/product/facefusion)：保证上传的人脸质量，人脸融合的效果更好。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async DetectFace(req, cb) {
        return this.request("DetectFace", req, cb);
    }
    /**
     * 获取指定人员库中的人员列表。
     */
    async GetPersonList(req, cb) {
        return this.request("GetPersonList", req, cb);
    }
    /**
     * 给定一张人脸图片和一个 PersonId，判断图片中的人和 PersonId 对应的人是否为同一人。PersonId 请参考[人员库管理相关接口](https://cloud.tencent.com/document/product/867/32794)。
本接口会将该人员（Person）下的所有人脸（Face）进行融合特征处理，即若某个Person下有4张 Face，本接口会将4张 Face 的特征进行融合处理，生成对应这个 Person 的特征，使人员验证（确定待识别的人脸图片是某人员）更加准确。

 和人脸比对相关接口不同的是，人脸验证相关接口用于判断 “此人是否是此人”，“此人”的信息已存于人员库中，“此人”可能存在多张人脸图片；而人脸比对相关接口用于判断两张人脸的相似度。


>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
- 仅支持算法模型版本（FaceModelVersion）为3.0的人员库。
     */
    async VerifyPerson(req, cb) {
        return this.request("VerifyPerson", req, cb);
    }
    /**
     * 检测给定图片中的人脸（Face）的位置、相应的面部属性和人脸质量信息，位置包括 (x，y，w，h)，面部属性包括性别（gender）、年龄（age）、表情（expression）、魅力（beauty）、眼镜（glass）、发型（hair）、口罩（mask）和姿态 (pitch，roll，yaw)，人脸质量信息包括整体质量分（score）、模糊分（sharpness）、光照分（brightness）和五官遮挡分（completeness）。

 
其中，人脸质量信息主要用于评价输入的人脸图片的质量。在使用人脸识别服务时，建议您对输入的人脸图片进行质量检测，提升后续业务处理的效果。该功能的应用场景包括：

1） 人员库[创建人员](https://cloud.tencent.com/document/product/867/32793)/[增加人脸](https://cloud.tencent.com/document/product/867/32795)：保证人员人脸信息的质量，便于后续的业务处理。

2） [人脸搜索](https://cloud.tencent.com/document/product/867/32798)：保证输入的图片质量，快速准确匹配到对应的人员。

3） [人脸验证](https://cloud.tencent.com/document/product/867/32806)：保证人脸信息的质量，避免明明是本人却认证不通过的情况。

4） [人脸融合](https://cloud.tencent.com/product/facefusion)：保证上传的人脸质量，人脸融合的效果更好。

>
- 本接口是[人脸检测与分析](https://cloud.tencent.com/document/product/867/32800)的升级，具体在于：

1.本接口可以指定需要计算返回的人脸属性，避免无效计算，降低耗时；

2.本接口支持更多属性细项数，也会持续增加更多功能。

请您使用本接口完成相应的人脸检测与属性分析需求。

- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async DetectFaceAttributes(req, cb) {
        return this.request("DetectFaceAttributes", req, cb);
    }
    /**
     * 避免官网歧义

人员库升级结果查询

     */
    async GetUpgradeGroupFaceModelVersionResult(req, cb) {
        return this.request("GetUpgradeGroupFaceModelVersionResult", req, cb);
    }
    /**
     * 修改指定人员库人员描述内容。
     */
    async ModifyPersonGroupInfo(req, cb) {
        return this.request("ModifyPersonGroupInfo", req, cb);
    }
    /**
     * 用于对一张待识别的人脸图片，在一个或多个人员库中识别出最相似的 TopK 人员，按照相似度从大到小排列。

支持一次性识别图片中的最多 10 张人脸，支持一次性跨 100 个人员库（Group）搜索。

单次搜索的人员库人脸总数量和人员库的算法模型版本（FaceModelVersion）相关。算法模型版本为2.0的人员库，单次搜索人员库人脸总数量不得超过 100 万张；算法模型版本为3.0的人员库，单次搜索人员库人脸总数量不得超过 300 万张。

本接口会将该人员（Person）下的所有人脸（Face）进行融合特征处理，即若某个 Person 下有4张 Face ，本接口会将4张 Face 的特征进行融合处理，生成对应这个 Person 的特征，使人员搜索（确定待识别的人脸图片是某人）更加准确。而[人脸搜索](https://cloud.tencent.com/document/product/867/32798)及[人脸搜索按库返回接口](https://cloud.tencent.com/document/product/867/38882)将该人员（Person）下的每个人脸（Face）都作为单独个体进行搜索。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
- 仅支持算法模型版本（FaceModelVersion）为3.0的人员库。
     */
    async SearchPersons(req, cb) {
        return this.request("SearchPersons", req, cb);
    }
    /**
     * 对两张图片中的人脸进行相似度比对，返回人脸相似度分数。

若您需要判断 “此人是否是某人”，即验证某张图片中的人是否是已知身份的某人，如常见的人脸登录场景，建议使用[人脸验证](https://cloud.tencent.com/document/product/867/32806)或[人员验证](https://cloud.tencent.com/document/product/867/38879)接口。

>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async CompareFace(req, cb) {
        return this.request("CompareFace", req, cb);
    }
    /**
     * 用于对一张待识别的人脸图片，在一个或多个人员库中识别出最相似的 TopK 人员，按照**人员库的维度**以人员相似度从大到小顺序排列。

支持一次性识别图片中的最多 10 张人脸，支持跨人员库（Group）搜索。

单次搜索的人员库人脸总数量和人员库的算法模型版本（FaceModelVersion）相关。算法模型版本为2.0的人员库，单次搜索人员库人脸总数量不得超过 100 万张；算法模型版本为3.0的人员库，单次搜索人员库人脸总数量不得超过 300 万张。

本接口会将该人员（Person）下的所有人脸（Face）进行融合特征处理，即若某个 Person 下有4张 Face ，本接口会将4张 Face 的特征进行融合处理，生成对应这个 Person 的特征，使人员搜索（确定待识别的人脸图片是某人）更加准确。而[人脸搜索](https://cloud.tencent.com/document/product/867/32798)及[人脸搜索按库返回接口](https://cloud.tencent.com/document/product/867/38882)将该人员（Person）下的每个人脸（Face）都作为单独个体进行搜索。
>
- 公共参数中的签名方式请使用V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
- 仅支持算法模型版本（FaceModelVersion）为3.0的人员库。
     */
    async SearchPersonsReturnsByGroup(req, cb) {
        return this.request("SearchPersonsReturnsByGroup", req, cb);
    }
    /**
     * 获取人员库列表。
     */
    async GetGroupList(req, cb) {
        return this.request("GetGroupList", req, cb);
    }
    /**
     * 删除一个人员下的人脸图片。如果该人员只有一张人脸图片，则返回错误。
     */
    async DeleteFace(req, cb) {
        return this.request("DeleteFace", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249078, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.iap = void 0;
const v20240713_1 = require("./v20240713");
exports.iap = {
    v20240713: v20240713_1.v20240713,
};

}, function(modId) { var map = {"./v20240713":1738984249079}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249079, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20240713 = void 0;
const Models = require("./iap_models");
const iap_client_1 = require("./iap_client");
exports.v20240713 = {
    Client: iap_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./iap_models":1738984249080,"./iap_client":1738984249081}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249080, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249081, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * iap client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("iap.tencentcloudapi.com", "2024-07-13", clientConfig);
    }
    /**
     * 修改用户OIDC配置
     */
    async UpdateIAPUserOIDCConfig(req, cb) {
        return this.request("UpdateIAPUserOIDCConfig", req, cb);
    }
    /**
     * 查询登录会话时长
     */
    async DescribeIAPLoginSessionDuration(req, cb) {
        return this.request("DescribeIAPLoginSessionDuration", req, cb);
    }
    /**
     * 查询用户OIDC配置
     */
    async DescribeIAPUserOIDCConfig(req, cb) {
        return this.request("DescribeIAPUserOIDCConfig", req, cb);
    }
    /**
     * 禁用用户SSO
     */
    async DisableIAPUserSSO(req, cb) {
        return this.request("DisableIAPUserSSO", req, cb);
    }
    /**
     * 创建用户OIDC配置。只能创建一个用户OIDC身份提供商，并且创建用户OIDC配置之后会自动关闭用户SAML SSO身份提供商。
     */
    async CreateIAPUserOIDCConfig(req, cb) {
        return this.request("CreateIAPUserOIDCConfig", req, cb);
    }
    /**
     * 修改登录会话时长
     */
    async ModifyIAPLoginSessionDuration(req, cb) {
        return this.request("ModifyIAPLoginSessionDuration", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249082, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ic = void 0;
const v20190307_1 = require("./v20190307");
exports.ic = {
    v20190307: v20190307_1.v20190307,
};

}, function(modId) { var map = {"./v20190307":1738984249083}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249083, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190307 = void 0;
const Models = require("./ic_models");
const ic_client_1 = require("./ic_client");
exports.v20190307 = {
    Client: ic_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ic_models":1738984249084,"./ic_client":1738984249085}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249084, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249085, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ic client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ic.tencentcloudapi.com", "2019-03-07", clientConfig);
    }
    /**
     * 根据应用id查询物联卡应用详情
     */
    async DescribeApp(req, cb) {
        return this.request("DescribeApp", req, cb);
    }
    /**
     * 查询卡片详细信息
     */
    async DescribeCard(req, cb) {
        return this.request("DescribeCard", req, cb);
    }
    /**
     * 发送短信息接口
     */
    async SendSms(req, cb) {
        return this.request("SendSms", req, cb);
    }
    /**
     * 群发短信
     */
    async SendMultiSms(req, cb) {
        return this.request("SendMultiSms", req, cb);
    }
    /**
     * 编辑卡片备注
     */
    async ModifyUserCardRemark(req, cb) {
        return this.request("ModifyUserCardRemark", req, cb);
    }
    /**
     * 查询短信列表
     */
    async DescribeSms(req, cb) {
        return this.request("DescribeSms", req, cb);
    }
    /**
     * 购买套外流量包
     */
    async PayForExtendData(req, cb) {
        return this.request("PayForExtendData", req, cb);
    }
    /**
     * 批量为卡片续费，此接口建议调用至少间隔10s,如果出现返回deal lock failed相关的错误，请过10s再重试。
续费的必要条件：
1、单次续费的卡片不可以超过 100张。
2、接口只支持在控制台购买的卡片进行续费
3、销户和未激活的卡片不支持续费。
4、每张物联网卡，续费总周期不能超过24个月
     */
    async RenewCards(req, cb) {
        return this.request("RenewCards", req, cb);
    }
    /**
     * 查询卡片列表信息
     */
    async DescribeCards(req, cb) {
        return this.request("DescribeCards", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249086, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.icr = void 0;
const v20211014_1 = require("./v20211014");
exports.icr = {
    v20211014: v20211014_1.v20211014,
};

}, function(modId) { var map = {"./v20211014":1738984249087}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249087, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20211014 = void 0;
const Models = require("./icr_models");
const icr_client_1 = require("./icr_client");
exports.v20211014 = {
    Client: icr_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./icr_models":1738984249088,"./icr_client":1738984249089}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249088, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249089, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * icr client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("icr.tencentcloudapi.com", "2021-10-14", clientConfig);
    }
    /**
     * 获取成员列表接口
     */
    async GetIndustryV1HomeMembers(req, cb) {
        return this.request("GetIndustryV1HomeMembers", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249090, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ie = void 0;
const v20200304_1 = require("./v20200304");
exports.ie = {
    v20200304: v20200304_1.v20200304,
};

}, function(modId) { var map = {"./v20200304":1738984249091}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249091, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200304 = void 0;
const Models = require("./ie_models");
const ie_client_1 = require("./ie_client");
exports.v20200304 = {
    Client: ie_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ie_models":1738984249092,"./ie_client":1738984249093}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249092, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249093, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ie client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ie.tencentcloudapi.com", "2020-03-04", clientConfig);
    }
    /**
     * 获取画质重生任务结果，查看结束后的文件信息
     */
    async DescribeMediaQualityRestorationTaskRusult(req, cb) {
        return this.request("DescribeMediaQualityRestorationTaskRusult", req, cb);
    }
    /**
     * 用于创建编辑处理任务，如媒体截取、媒体编辑、媒体拼接、媒体字幕。
     */
    async CreateMediaProcessTask(req, cb) {
        return this.request("CreateMediaProcessTask", req, cb);
    }
    /**
     * 删除正在进行的画质重生任务
     */
    async StopMediaQualityRestorationTask(req, cb) {
        return this.request("StopMediaQualityRestorationTask", req, cb);
    }
    /**
     * 用于获取编辑处理任务的结果。
     */
    async DescribeMediaProcessTaskResult(req, cb) {
        return this.request("DescribeMediaProcessTaskResult", req, cb);
    }
    /**
     * 创建画质重生任务，对视频进行转码、去噪、去划痕、去毛刺、超分、细节增强和色彩增强。
     */
    async CreateMediaQualityRestorationTask(req, cb) {
        return this.request("CreateMediaQualityRestorationTask", req, cb);
    }
    /**
     * 获取编辑理解任务结果。
     */
    async DescribeEditingTaskResult(req, cb) {
        return this.request("DescribeEditingTaskResult", req, cb);
    }
    /**
     * 用于停止正在进行中的编辑处理任务。
     */
    async StopMediaProcessTask(req, cb) {
        return this.request("StopMediaProcessTask", req, cb);
    }
    /**
     * 获取媒体质检任务结果
     */
    async DescribeQualityControlTaskResult(req, cb) {
        return this.request("DescribeQualityControlTaskResult", req, cb);
    }
    /**
     * 通过接口可以智能检测视频画面中抖动重影、模糊、低光照、过曝光、黑边、白边、黑屏、白屏、花屏、噪点、马赛克、二维码等在内的多个场景，还可以自动检测视频无音频异常、无声音片段。
     */
    async CreateQualityControlTask(req, cb) {
        return this.request("CreateQualityControlTask", req, cb);
    }
    /**
     * 创建编辑理解任务，可以同时选择视频标签识别、分类识别、智能拆条、智能集锦、智能封面和片头片尾识别中的一项或者多项能力。
     */
    async CreateEditingTask(req, cb) {
        return this.request("CreateEditingTask", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249094, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.iecp = void 0;
const v20210914_1 = require("./v20210914");
exports.iecp = {
    v20210914: v20210914_1.v20210914,
};

}, function(modId) { var map = {"./v20210914":1738984249095}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249095, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210914 = void 0;
const Models = require("./iecp_models");
const iecp_client_1 = require("./iecp_client");
exports.v20210914 = {
    Client: iecp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./iecp_models":1738984249096,"./iecp_client":1738984249097}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249096, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249097, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * iecp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("iecp.tencentcloudapi.com", "2021-09-14", clientConfig);
    }
    /**
     * 查询边缘集群监控状态
     */
    async DescribeEdgeUnitMonitorStatus(req, cb) {
        return this.request("DescribeEdgeUnitMonitorStatus", req, cb);
    }
    /**
     * 删除边缘单元NodeGroup
     */
    async DeleteEdgeNodeGroup(req, cb) {
        return this.request("DeleteEdgeNodeGroup", req, cb);
    }
    /**
     * 创建子设备
     */
    async CreateIotDevice(req, cb) {
        return this.request("CreateIotDevice", req, cb);
    }
    /**
     * 删除设备
     */
    async DeleteIotDevice(req, cb) {
        return this.request("DeleteIotDevice", req, cb);
    }
    /**
     * 获取节点安装信息
     */
    async DescribeEdgeAgentNodeInstaller(req, cb) {
        return this.request("DescribeEdgeAgentNodeInstaller", req, cb);
    }
    /**
     * 查询边缘单元额外信息
     */
    async DescribeEdgeUnitExtra(req, cb) {
        return this.request("DescribeEdgeUnitExtra", req, cb);
    }
    /**
     * 获取命名空间下的资源信息
     */
    async DescribeNamespaceResources(req, cb) {
        return this.request("DescribeNamespaceResources", req, cb);
    }
    /**
     * 创建token
     */
    async CreateUserToken(req, cb) {
        return this.request("CreateUserToken", req, cb);
    }
    /**
     * 批量删除边缘节点
     */
    async DeleteEdgeNodes(req, cb) {
        return this.request("DeleteEdgeNodes", req, cb);
    }
    /**
     * 创建或更新边缘单元NodeUnit
     */
    async CreateUpdateNodeUnit(req, cb) {
        return this.request("CreateUpdateNodeUnit", req, cb);
    }
    /**
     * 修改边缘单元NodeUnit模板
     */
    async ModifyNodeUnitTemplate(req, cb) {
        return this.request("ModifyNodeUnitTemplate", req, cb);
    }
    /**
     * 查询边缘单元EdgeUnit模板列表
     */
    async DescribeEdgeUnitNodeUnitTemplates(req, cb) {
        return this.request("DescribeEdgeUnitNodeUnitTemplates", req, cb);
    }
    /**
     * 创建命名空间
     */
    async CreateNamespace(req, cb) {
        return this.request("CreateNamespace", req, cb);
    }
    /**
     * 自动获取Draco设备的安装包
     */
    async DescribeDracoEdgeNodeInstaller(req, cb) {
        return this.request("DescribeDracoEdgeNodeInstaller", req, cb);
    }
    /**
     * 单元应用重部署
     */
    async RedeployEdgeUnitApplication(req, cb) {
        return this.request("RedeployEdgeUnitApplication", req, cb);
    }
    /**
     * 获取边缘节点信息
     */
    async DescribeEdgeNode(req, cb) {
        return this.request("DescribeEdgeNode", req, cb);
    }
    /**
     * 获取节点备注信息列表
     */
    async DescribeEdgeNodeRemarkList(req, cb) {
        return this.request("DescribeEdgeNodeRemarkList", req, cb);
    }
    /**
     * 创建边缘单元
     */
    async CreateEdgeUnitCloud(req, cb) {
        return this.request("CreateEdgeUnitCloud", req, cb);
    }
    /**
     * 查询边缘单元监控数据
     */
    async DescribeMonitorMetrics(req, cb) {
        return this.request("DescribeMonitorMetrics", req, cb);
    }
    /**
     * 删除命名空间
     */
    async DeleteNamespace(req, cb) {
        return this.request("DeleteNamespace", req, cb);
    }
    /**
     * 建立消息路由
     */
    async BuildMessageRoute(req, cb) {
        return this.request("BuildMessageRoute", req, cb);
    }
    /**
     * 获取Secrets列表
     */
    async DescribeSecrets(req, cb) {
        return this.request("DescribeSecrets", req, cb);
    }
    /**
     * 开关消息路由
     */
    async SetRouteOnOff(req, cb) {
        return this.request("SetRouteOnOff", req, cb);
    }
    /**
     * 创建ConfigMap
     */
    async CreateConfigMap(req, cb) {
        return this.request("CreateConfigMap", req, cb);
    }
    /**
     * 创建边缘节点
     */
    async CreateEdgeNode(req, cb) {
        return this.request("CreateEdgeNode", req, cb);
    }
    /**
     * 删除边缘单元NodeUnit模板
     */
    async DeleteEdgeNodeUnitTemplates(req, cb) {
        return this.request("DeleteEdgeNodeUnitTemplates", req, cb);
    }
    /**
     * 编辑边缘节点标签
     */
    async ModifyEdgeNodeLabels(req, cb) {
        return this.request("ModifyEdgeNodeLabels", req, cb);
    }
    /**
     * 查询指定Grid下应用的Yaml
     */
    async DescribeEdgeUnitDeployGridItemYaml(req, cb) {
        return this.request("DescribeEdgeUnitDeployGridItemYaml", req, cb);
    }
    /**
     * 获取ConfigMap列表
     */
    async DescribeConfigMaps(req, cb) {
        return this.request("DescribeConfigMaps", req, cb);
    }
    /**
     * 获取组件市场组件列表
     */
    async GetMarketComponentList(req, cb) {
        return this.request("GetMarketComponentList", req, cb);
    }
    /**
     * 重新部署边缘单元指定Grid下应用
     */
    async DeleteEdgeUnitDeployGridItem(req, cb) {
        return this.request("DeleteEdgeUnitDeployGridItem", req, cb);
    }
    /**
     * 获取ConfigMap详情
     */
    async DescribeConfigMap(req, cb) {
        return this.request("DescribeConfigMap", req, cb);
    }
    /**
     * 删除消息路由
     */
    async DeleteMessageRoute(req, cb) {
        return this.request("DeleteMessageRoute", req, cb);
    }
    /**
     * 修改边缘集群
     */
    async ModifyEdgeUnit(req, cb) {
        return this.request("ModifyEdgeUnit", req, cb);
    }
    /**
     * 修改ConfigMap
     */
    async ModifyConfigMap(req, cb) {
        return this.request("ModifyConfigMap", req, cb);
    }
    /**
     * 查询边缘单元NodeUnit列表
     */
    async DescribeNodeUnit(req, cb) {
        return this.request("DescribeNodeUnit", req, cb);
    }
    /**
     * 查询边缘单元指定Grid下的部署应用列表
     */
    async DescribeEdgeUnitDeployGridItem(req, cb) {
        return this.request("DescribeEdgeUnitDeployGridItem", req, cb);
    }
    /**
     * 编辑draco设备信息
     */
    async ModifyEdgeDracoNode(req, cb) {
        return this.request("ModifyEdgeDracoNode", req, cb);
    }
    /**
     * 修改设备信息
     */
    async ModifyIotDevice(req, cb) {
        return this.request("ModifyIotDevice", req, cb);
    }
    /**
     * 修改单元应用基本信息
     */
    async ModifyEdgeUnitApplicationBasicInfo(req, cb) {
        return this.request("ModifyEdgeUnitApplicationBasicInfo", req, cb);
    }
    /**
     * 获取组件市场的组件信息
     */
    async GetMarketComponent(req, cb) {
        return this.request("GetMarketComponent", req, cb);
    }
    /**
     * 查询边缘单元Grid的Pod列表
     */
    async DescribeEdgeUnitGridPods(req, cb) {
        return this.request("DescribeEdgeUnitGridPods", req, cb);
    }
    /**
     * 批量删除设备
     */
    async DeleteIotDeviceBatch(req, cb) {
        return this.request("DeleteIotDeviceBatch", req, cb);
    }
    /**
     * 获取命名空间
     */
    async DescribeNamespace(req, cb) {
        return this.request("DescribeNamespace", req, cb);
    }
    /**
     * 获取边缘集群默认VPC信息
     */
    async DescribeEdgeDefaultVpc(req, cb) {
        return this.request("DescribeEdgeDefaultVpc", req, cb);
    }
    /**
     * 校验Secret的Yaml语法
     */
    async DescribeSecretYamlError(req, cb) {
        return this.request("DescribeSecretYamlError", req, cb);
    }
    /**
     * 删除ConfigMap
     */
    async DeleteConfigMap(req, cb) {
        return this.request("DeleteConfigMap", req, cb);
    }
    /**
     * 创建边缘单元NodeUnit模板
     */
    async CreateEdgeNodeUnitTemplate(req, cb) {
        return this.request("CreateEdgeNodeUnitTemplate", req, cb);
    }
    /**
     * 批量解绑单元设备
     */
    async DeleteEdgeUnitDevices(req, cb) {
        return this.request("DeleteEdgeUnitDevices", req, cb);
    }
    /**
     * 修改Secret
     */
    async ModifySecret(req, cb) {
        return this.request("ModifySecret", req, cb);
    }
    /**
     * 批量绑定设备到单元
     */
    async CreateEdgeUnitDevices(req, cb) {
        return this.request("CreateEdgeUnitDevices", req, cb);
    }
    /**
     * 获取设备列表信息
     */
    async DescribeIotDevices(req, cb) {
        return this.request("DescribeIotDevices", req, cb);
    }
    /**
     * 删除边缘单元
     */
    async DeleteEdgeUnitCloud(req, cb) {
        return this.request("DeleteEdgeUnitCloud", req, cb);
    }
    /**
     * 查询指定NodeGroup下NodeUnit模板列表
     */
    async DescribeNodeUnitTemplateOnNodeGroup(req, cb) {
        return this.request("DescribeNodeUnitTemplateOnNodeGroup", req, cb);
    }
    /**
     * 查询节点Pod内的容器列表
     */
    async DescribeEdgeNodePodContainers(req, cb) {
        return this.request("DescribeEdgeNodePodContainers", req, cb);
    }
    /**
     * 获取消息路由列表
     */
    async DescribeMessageRouteList(req, cb) {
        return this.request("DescribeMessageRouteList", req, cb);
    }
    /**
     * 校验ConfigMap的Yaml语法
     */
    async DescribeConfigMapYamlError(req, cb) {
        return this.request("DescribeConfigMapYamlError", req, cb);
    }
    /**
     * 获取单元下应用列表
     */
    async DescribeEdgeUnitApplications(req, cb) {
        return this.request("DescribeEdgeUnitApplications", req, cb);
    }
    /**
     * 获取命名空间列表信息
     */
    async DescribeNamespaces(req, cb) {
        return this.request("DescribeNamespaces", req, cb);
    }
    /**
     * 查询边缘节点列表
     */
    async DescribeEdgeNodes(req, cb) {
        return this.request("DescribeEdgeNodes", req, cb);
    }
    /**
     * 查询边缘操作日志
     */
    async DescribeEdgeOperationLogs(req, cb) {
        return this.request("DescribeEdgeOperationLogs", req, cb);
    }
    /**
     * 创建Secret
     */
    async CreateSecret(req, cb) {
        return this.request("CreateSecret", req, cb);
    }
    /**
     * 查询边缘集群NodeGroup
     */
    async DescribeEdgeUnitNodeGroup(req, cb) {
        return this.request("DescribeEdgeUnitNodeGroup", req, cb);
    }
    /**
     * 查询边缘单元Pod
     */
    async DescribeEdgePod(req, cb) {
        return this.request("DescribeEdgePod", req, cb);
    }
    /**
     * 获取Secret详情
     */
    async DescribeSecret(req, cb) {
        return this.request("DescribeSecret", req, cb);
    }
    /**
     * 更新边缘单元信息
     */
    async ModifyEdgeUnitCloudApi(req, cb) {
        return this.request("ModifyEdgeUnitCloudApi", req, cb);
    }
    /**
     * 获取设备信息
     */
    async DescribeIotDevice(req, cb) {
        return this.request("DescribeIotDevice", req, cb);
    }
    /**
     * 创建边缘单元NodeGroup
     */
    async CreateEdgeNodeGroup(req, cb) {
        return this.request("CreateEdgeNodeGroup", req, cb);
    }
    /**
     * 查询节点Pod列表
     */
    async DescribeEdgeNodePods(req, cb) {
        return this.request("DescribeEdgeNodePods", req, cb);
    }
    /**
     * 批量预注册节点
     */
    async CreateEdgeNodeBatch(req, cb) {
        return this.request("CreateEdgeNodeBatch", req, cb);
    }
    /**
     * 修改边缘单元Grid部署应用副本数
     */
    async ModifyEdgeUnitDeployGridItem(req, cb) {
        return this.request("ModifyEdgeUnitDeployGridItem", req, cb);
    }
    /**
     * 创建消息路由
     */
    async CreateMessageRoute(req, cb) {
        return this.request("CreateMessageRoute", req, cb);
    }
    /**
     * 查询用户的资源限制
     */
    async DescribeYeheResourceLimit(req, cb) {
        return this.request("DescribeYeheResourceLimit", req, cb);
    }
    /**
     * 删除边缘单元NodeUnit
     */
    async DeleteNodeUnit(req, cb) {
        return this.request("DeleteNodeUnit", req, cb);
    }
    /**
     * Yaml方式修改应用配置
     */
    async ModifyEdgeUnitApplicationYaml(req, cb) {
        return this.request("ModifyEdgeUnitApplicationYaml", req, cb);
    }
    /**
     * 删除指定pod
     */
    async DeleteEdgeUnitPod(req, cb) {
        return this.request("DeleteEdgeUnitPod", req, cb);
    }
    /**
     * 查询边缘单元Grid列表
     */
    async DescribeEdgeUnitDeployGrid(req, cb) {
        return this.request("DescribeEdgeUnitDeployGrid", req, cb);
    }
    /**
     * 查询边缘单元Grid事件列表
     */
    async DescribeEdgeUnitGridEvents(req, cb) {
        return this.request("DescribeEdgeUnitGridEvents", req, cb);
    }
    /**
     * 可视化修改应用配置
     */
    async ModifyEdgeUnitApplicationVisualization(req, cb) {
        return this.request("ModifyEdgeUnitApplicationVisualization", req, cb);
    }
    /**
     * 查询预注册节点列表
     */
    async DescribeEdgeSnNodes(req, cb) {
        return this.request("DescribeEdgeSnNodes", req, cb);
    }
    /**
     * 删除Secret
     */
    async DeleteSecret(req, cb) {
        return this.request("DeleteSecret", req, cb);
    }
    /**
     * 查询边缘单元列表
     */
    async DescribeEdgeUnitsCloud(req, cb) {
        return this.request("DescribeEdgeUnitsCloud", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249098, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ig = void 0;
const v20210518_1 = require("./v20210518");
exports.ig = {
    v20210518: v20210518_1.v20210518,
};

}, function(modId) { var map = {"./v20210518":1738984249099}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249099, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210518 = void 0;
const Models = require("./ig_models");
const ig_client_1 = require("./ig_client");
exports.v20210518 = {
    Client: ig_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ig_models":1738984249100,"./ig_client":1738984249101}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249100, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249101, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ig client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ig.tencentcloudapi.com", "2021-05-18", clientConfig);
    }
    /**
     * 查询智能导诊订单列表
     */
    async DescribeIgOrderList(req, cb) {
        return this.request("DescribeIgOrderList", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249102, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.iir = void 0;
const v20200417_1 = require("./v20200417");
exports.iir = {
    v20200417: v20200417_1.v20200417,
};

}, function(modId) { var map = {"./v20200417":1738984249103}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249103, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200417 = void 0;
const Models = require("./iir_models");
const iir_client_1 = require("./iir_client");
exports.v20200417 = {
    Client: iir_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./iir_models":1738984249104,"./iir_client":1738984249105}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249104, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249105, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * iir client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("iir.tencentcloudapi.com", "2020-04-17", clientConfig);
    }
    /**
     * 商品识别，使用微信扫一扫识物同款技术，基于人工智能技术、海量训练图片、亿级商品库，可以实现全覆盖、细粒度、高准确率的商品识别和商品推荐功能。 本服务可以识别出图片中的主体位置、主体商品类型，覆盖亿级SKU，输出具体商品的价格、型号等详细信息。 客户无需自建商品库，即可快速实现商品识别、拍照搜商品等功能。

目前“商品识别”为公测服务，需要申请、开通后方可使用。请在[服务开通申请表](https://cloud.tencent.com/apply/p/y1q2mnf0vdl) 中填写详细信息和需求，如果通过审核，我们将会在2个工作日内与您联系，并开通服务。 公测期间，本服务免费提供最高2QPS，收费模式和标准会在正式版上线前通过站内信、短信通知客户。如果需要提升并发，请与我们联系洽谈。

注意：本文档为公测版本，仅适用于功能体验和测试，正式业务接入请等待正式版。正式版的输入、输出可能会与公测版存在少量差异。
     */
    async RecognizeProduct(req, cb) {
        return this.request("RecognizeProduct", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249106, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ims = void 0;
const v20200713_1 = require("./v20200713");
const v20201229_1 = require("./v20201229");
exports.ims = {
    v20200713: v20200713_1.v20200713,
    v20201229: v20201229_1.v20201229,
};

}, function(modId) { var map = {"./v20200713":1738984249107,"./v20201229":1738984249110}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249107, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200713 = void 0;
const Models = require("./ims_models");
const ims_client_1 = require("./ims_client");
exports.v20200713 = {
    Client: ims_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ims_models":1738984249108,"./ims_client":1738984249109}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249108, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249109, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ims client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ims.tencentcloudapi.com", "2020-07-13", clientConfig);
    }
    /**
     * 图片同步检测服务（Image Moderation, IM）能自动扫描图片，识别可能令人反感、不安全或不适宜的内容，同时支持用户配置图片黑名单，打击自定义识别类型的图片。

<div class="rno-api-explorer" style="margin-bottom:20px">
    <div class="rno-api-explorer-inner">
        <div class="rno-api-explorer-hd">
            <div class="rno-api-explorer-title">
                关于版本迭代的描述
            </div>
        </div>
        <div class="rno-api-explorer-body">
            <div class="rno-api-explorer-cont">
                <p>当前页面版本为图片内容安全2020版本，2020.11.3日前接入的图片内容安全接口为2019版本，在此时间前接入的用户可直接访问以下链接进行维护操作：<a href="https://cloud.tencent.com/document/product/1125/38206" target="_blank">图片内容安全-2019版本</a></p>
                <p>2020版本相对2019版本进行了升级，支持更灵活的多场景业务策略配置以及更丰富的识别回调信息，满足不同业务的识别需求，建议按照2020版本接入指引进行接口升级；同时，2019版本也会持续维护直至用户不再使用为止。</p>
            </div>
        </div>
    </div>
</div>
     */
    async ImageModeration(req, cb) {
        return this.request("ImageModeration", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249110, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201229 = void 0;
const Models = require("./ims_models");
const ims_client_1 = require("./ims_client");
exports.v20201229 = {
    Client: ims_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ims_models":1738984249111,"./ims_client":1738984249112}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249111, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249112, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ims client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ims.tencentcloudapi.com", "2020-12-29", clientConfig);
    }
    /**
     * 本接口用于提交图片文件进行异步智能审核任务。使用前请您使用腾讯云主账号登录控制台 [开通图片内容安全服务](https://console.cloud.tencent.com/cms/image/package) 并调整好对应的业务配置。
### 接口使用说明：
- 前往“[内容安全控制台-图片内容安全](https://console.cloud.tencent.com/cms/image/package)”开启使用图片内容安全服务，首次开通服务的用户可免费领用试用套餐包，包含**3000张图片**识别额度，有效期为15天。
- 该接口为收费接口，计费方式敬请参见 [腾讯云图片内容安全定价](https://cloud.tencent.com/product/ims/pricing)。

### 接口功能说明：
- 支持对图片文件或链接进行检测，通过深度学习技术，识别可能令人反感、不安全或不适宜的违规图片内容；
- 支持对长图进行拆分检测；
- 支持识别多种违规场景，包括：低俗、违法违规、色情、广告等场景；
- 支持多种物体检测（实体、广告台标、二维码等）及图片中文本的OCR文本识别；
- 支持根据不同的业务场景配置自定义的审核策略；
- 支持用户自定义选择图片风险库，打击自定义识别类型的违规图片（目前仅支持黑名单配置）；
- 支持在审核图片内容时同时关联账号或设备信息，可识别违规风险账号或设备。
### 接口调用说明：
- 图片文件大小限制：**Base64编码内容应小于10MB**；**图片资源应小于100MB**
- 图片尺寸支持：**长和宽 需>50分辨率且<40000分辨率，并且图片长宽比<90:1；**
- 图片文件分辨率支持：建议**分辨率大于256x256**，否则可能会影响识别效果；
- 图片文件支持格式：PNG、JPG、JPEG、BMP、GIF、WEBP格式；
- 图片文件链接支持的传输协议：HTTP、HTTPS；
- 若传入图片文件的访问链接，则需要注意**图片异步接口下载超时时间为15秒，失败后重试1次为3 秒，共18秒下载时间**，为保障被检测图片的稳定性和可靠性，建议您使用腾讯云COS存储或者CDN缓存等；
- 默认接口请求频率限制：**20次/秒**，超过此调用频率则会报错。
- ### 接口回调格式：
- 图片异步检测接口回调格式同[图片同步检测接口输出参数](https://cloud.tencent.com/document/product/1125/53273#3.-.E8.BE.93.E5.87.BA.E5.8F.82.E6.95.B0)
     */
    async CreateImageModerationAsyncTask(req, cb) {
        return this.request("CreateImageModerationAsyncTask", req, cb);
    }
    /**
     * 本接口（Image Moderation, IM）用于提交图片文件进行同步智能审核任务。使用前请您使用腾讯云主账号登录控制台 [开通图片内容安全服务](https://console.cloud.tencent.com/cms) 并调整好对应的业务配置。
### 接口使用说明：
- 前往“[内容安全控制台-图片内容安全](https://console.cloud.tencent.com/cms)”开启使用图片内容安全服务，首次开通服务的用户可免费领用试用套餐包，包含**3000张图片**识别额度，有效期为15天。
- 该接口为收费接口，计费方式敬请参见 [腾讯云图片内容安全定价](https://cloud.tencent.com/product/ims/pricing)。

### 接口功能说明：
- 支持对图片文件或链接进行检测，通过深度学习技术，识别可能令人反感、不安全或不适宜的违规图片内容；
- 支持对GIF图/长图进行截帧或拆分检测；
- 支持识别多种违规场景，包括：低俗、违法违规、色情、广告等场景；
- 支持多种物体检测（实体、广告台标、二维码等）及图片中文本的OCR文本识别；
- 支持根据不同的业务场景配置自定义的审核策略；
- 支持用户自定义选择图片风险库，打击自定义识别类型的违规图片（目前仅支持黑名单配置）；
- 支持在审核图片内容时同时关联账号或设备信息，可识别违规风险账号或设备。

### 接口调用说明：
- 图片文件大小限制：图片文件须大于256字节，Base64编码后的FileContent内容应小于10MB，FileURL的源图应小于30MB；
- 图片默认尺寸支持：**长和宽 需>50分辨率且<10000分辨率，并且图片长宽比<90:1；**
- 图片文件分辨率支持：建议**分辨率大于256x256**，否则可能会影响识别效果；
- 图片文件支持格式（无备注默认只支持静态图）：BMP、ICO、JPEG、JNG、PNG、TIFF、RAW、SVG、GIF（静、动）、WEBP（静、动）、HEIC（静、动），动图在处理时，默认最多抽取5帧图像，并且每隔5帧进行一次采样；
- 图片文件链接支持的传输协议：HTTP、HTTPS；
- 图片审核仅支持单次传输一条URL进行审核，支持多并发请求。默认并发为100 QPS，超过此限制将返回`RequestLimitExceeded`错误；
- 若传入图片文件的访问链接时，为保障被检测图片的稳定性和可靠性，建议您使用腾讯云COS存储或者CDN缓存等。

### 图片下载说明：
- 下载时间限制：图片首次下载限制为3秒。如超过此时间，将重试一次，重试时间为3秒。如果重试仍超时，将返回 `ImageDownloadError`（下载超时）；
- 网络安全策略：由于网络安全策略，带有重定向的链接（如HTTP返回302状态码）可能导致下载失败。请尽量避免使用此类链接，以确保下载顺利进行，可能返回 `ResourceUnavailable.ImageDownloadError`；
- 异步回源支持：目前不支持通过异步回源方式获取图片源。请确保使用直接链接，以避免下载失败。

<div class="rno-api-explorer" style="margin-bottom:20px">
    <div class="rno-api-explorer-inner">
        <div class="rno-api-explorer-hd">
            <div class="rno-api-explorer-title">
                关于版本迭代的描述
            </div>
        </div>
        <div class="rno-api-explorer-body">
            <div class="rno-api-explorer-cont">
                <p>当前页面版本为图片内容安全2020版本，2020.11.3日前接入的图片内容安全接口为2019版本，在此时间前接入的用户可直接访问以下链接进行维护操作：<a href="https://cloud.tencent.com/document/product/1125/38206" target="_blank">图片内容安全-2019版本</a></p>
                <p>2020版本相对2019版本进行了升级，支持更灵活的多场景业务策略配置以及更丰富的识别回调信息，满足不同业务的识别需求，建议按照2020版本接入指引进行接口升级；同时，2019版本也会持续维护直至用户不再使用为止。</p>
            </div>
        </div>
    </div>
</div>
     */
    async ImageModeration(req, cb) {
        return this.request("ImageModeration", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249113, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ioa = void 0;
const v20220601_1 = require("./v20220601");
exports.ioa = {
    v20220601: v20220601_1.v20220601,
};

}, function(modId) { var map = {"./v20220601":1738984249114}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249114, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220601 = void 0;
const Models = require("./ioa_models");
const ioa_client_1 = require("./ioa_client");
exports.v20220601 = {
    Client: ioa_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ioa_models":1738984249115,"./ioa_client":1738984249116}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249115, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249116, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ioa client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ioa.tencentcloudapi.com", "2022-06-01", clientConfig);
    }
    /**
     * 查询账号根分组详情。对应“用户与授权管理”里内置不可见的全网根账号组，所有新建的目录，都挂在该全网根账号组下。
     */
    async DescribeRootAccountGroup(req, cb) {
        return this.request("DescribeRootAccountGroup", req, cb);
    }
    /**
     * 查询满足条件的终端数据详情，私有化调用path为：/capi/Assets/Device/DescribeDevices
     */
    async DescribeDevices(req, cb) {
        return this.request("DescribeDevices", req, cb);
    }
    /**
     * 创建终端自定义分组，私有化调用path为：/capi/Assets/Device/CreateDeviceVirtualGroup
     */
    async CreateDeviceVirtualGroup(req, cb) {
        return this.request("CreateDeviceVirtualGroup", req, cb);
    }
    /**
     * 以分页的方式查询账号分组列表，私有化调用path为：/capi/Assets/DescribeAccountGroups
     */
    async DescribeAccountGroups(req, cb) {
        return this.request("DescribeAccountGroups", req, cb);
    }
    /**
     * 获取账号列表，支持分页，模糊搜索，私有化调用path为：/capi/Assets/Account/DescribeLocalAccounts
     */
    async DescribeLocalAccounts(req, cb) {
        return this.request("DescribeLocalAccounts", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249117, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.iot = void 0;
const v20180123_1 = require("./v20180123");
exports.iot = {
    v20180123: v20180123_1.v20180123,
};

}, function(modId) { var map = {"./v20180123":1738984249118}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249118, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180123 = void 0;
const Models = require("./iot_models");
const iot_client_1 = require("./iot_client");
exports.v20180123 = {
    Client: iot_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./iot_models":1738984249119,"./iot_client":1738984249120}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249119, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249120, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * iot client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("iot.tencentcloudapi.com", "2018-01-23", clientConfig);
    }
    /**
     * 批量获取设备某一段时间范围的设备上报数据。该接口适用于使用高级版类型的产品
     */
    async GetDataHistory(req, cb) {
        return this.request("GetDataHistory", req, cb);
    }
    /**
     * 重置设备操作，将会为设备生成新的证书及清空最新数据，需谨慎操作。
     */
    async ResetDevice(req, cb) {
        return this.request("ResetDevice", req, cb);
    }
    /**
     * 查询某段时间范围内产品的在线、激活设备数
     */
    async GetDeviceStatistics(req, cb) {
        return this.request("GetDeviceStatistics", req, cb);
    }
    /**
     * 用户绑定设备，绑定后可以在APP端进行控制。绑定设备前需调用“获取设备绑定签名”接口
     */
    async AppSecureAddDevice(req, cb) {
        return this.request("AppSecureAddDevice", req, cb);
    }
    /**
     * 提供下发控制指令到指定设备的能力，该接口适用于使用高级版类型的产品。
     */
    async IssueDeviceControl(req, cb) {
        return this.request("IssueDeviceControl", req, cb);
    }
    /**
     * 获取设备的调试日志，用于定位问题
     */
    async GetDebugLog(req, cb) {
        return this.request("GetDebugLog", req, cb);
    }
    /**
     * 禁用规则
     */
    async DeactivateRule(req, cb) {
        return this.request("DeactivateRule", req, cb);
    }
    /**
     * 提供分页查询某个产品Id下设备信息的能力。
     */
    async GetDevices(req, cb) {
        return this.request("GetDevices", req, cb);
    }
    /**
     * 新增Topic，用于设备或应用发布消息至该Topic或订阅该Topic的消息。
     */
    async AddTopic(req, cb) {
        return this.request("AddTopic", req, cb);
    }
    /**
     * 获取绑定设备的上下线状态
     */
    async AppGetDeviceStatuses(req, cb) {
        return this.request("AppGetDeviceStatuses", req, cb);
    }
    /**
     * 获取用户在物联网套件所创建的所有产品信息。
     */
    async GetProducts(req, cb) {
        return this.request("GetProducts", req, cb);
    }
    /**
     * 获取用户token
     */
    async AppGetToken(req, cb) {
        return this.request("AppGetToken", req, cb);
    }
    /**
     * 修改用户信息
     */
    async AppUpdateUser(req, cb) {
        return this.request("AppUpdateUser", req, cb);
    }
    /**
     * 新增规则
     */
    async AddRule(req, cb) {
        return this.request("AddRule", req, cb);
    }
    /**
     * 业务无客户使用，下线接口。

取消子设备产品与网关设备产品的关联
     */
    async UnassociateSubDeviceFromGatewayProduct(req, cb) {
        return this.request("UnassociateSubDeviceFromGatewayProduct", req, cb);
    }
    /**
     * 获取设备绑定签名，用于用户绑定某个设备的应用场景
     */
    async GetDeviceSignatures(req, cb) {
        return this.request("GetDeviceSignatures", req, cb);
    }
    /**
     * 删除规则
     */
    async DeleteRule(req, cb) {
        return this.request("DeleteRule", req, cb);
    }
    /**
     * 本接口(AddProduct)用于创建、定义某款硬件产品。
     */
    async AddProduct(req, cb) {
        return this.request("AddProduct", req, cb);
    }
    /**
     * 提供在指定的产品Id下删除一个设备的能力。
     */
    async DeleteDevice(req, cb) {
        return this.request("DeleteDevice", req, cb);
    }
    /**
     * 提供向指定的Topic发布消息的能力，常用于向设备下发控制指令。该接口只适用于产品版本为“基础版”类型的产品，使用高级版的产品需使用“下发设备控制指令”接口
     */
    async PublishMsg(req, cb) {
        return this.request("PublishMsg", req, cb);
    }
    /**
     * 更新规则
     */
    async UpdateRule(req, cb) {
        return this.request("UpdateRule", req, cb);
    }
    /**
     * 用户解除与设备的关联关系，解除后APP用户无法控制设备，获取设备数据
     */
    async AppDeleteDevice(req, cb) {
        return this.request("AppDeleteDevice", req, cb);
    }
    /**
     * 批量获取设备的当前状态，状态包括在线、离线或未激活状态。
     */
    async GetDeviceStatuses(req, cb) {
        return this.request("GetDeviceStatuses", req, cb);
    }
    /**
     * 获取转发规则列表
     */
    async GetRules(req, cb) {
        return this.request("GetRules", req, cb);
    }
    /**
     * 删除用户指定的产品Id对应的信息。
     */
    async DeleteProduct(req, cb) {
        return this.request("DeleteProduct", req, cb);
    }
    /**
     * 获取用户信息
     */
    async AppGetUser(req, cb) {
        return this.request("AppGetUser", req, cb);
    }
    /**
     * 获取用户的绑定设备列表
     */
    async AppGetDevices(req, cb) {
        return this.request("AppGetDevices", req, cb);
    }
    /**
     * 为APP提供用户注册功能
     */
    async AppAddUser(req, cb) {
        return this.request("AppAddUser", req, cb);
    }
    /**
     * 提供修改产品信息及数据模板的能力。
     */
    async UpdateProduct(req, cb) {
        return this.request("UpdateProduct", req, cb);
    }
    /**
     * 用户通过APP控制设备
     */
    async AppIssueDeviceControl(req, cb) {
        return this.request("AppIssueDeviceControl", req, cb);
    }
    /**
     * 获取Topic信息
     */
    async GetTopic(req, cb) {
        return this.request("GetTopic", req, cb);
    }
    /**
     * 获取绑定设备数据，用于实时展示设备的最新数据
     */
    async AppGetDeviceData(req, cb) {
        return this.request("AppGetDeviceData", req, cb);
    }
    /**
     * 提供查询某个设备详细信息的能力。
     */
    async GetDevice(req, cb) {
        return this.request("GetDevice", req, cb);
    }
    /**
     * 获取绑定设备的基本信息与数据模板定义
     */
    async AppGetDevice(req, cb) {
        return this.request("AppGetDevice", req, cb);
    }
    /**
     * 获取某个设备当前上报到云端的数据，该接口适用于使用数据模板协议的产品。
     */
    async GetDeviceData(req, cb) {
        return this.request("GetDeviceData", req, cb);
    }
    /**
     * 获取转发规则信息
     */
    async GetRule(req, cb) {
        return this.request("GetRule", req, cb);
    }
    /**
     * 批量获取设备与云端的详细通信日志，该接口适用于使用高级版类型的产品。
     */
    async GetDeviceLog(req, cb) {
        return this.request("GetDeviceLog", req, cb);
    }
    /**
     * 获取Topic列表
     */
    async GetTopics(req, cb) {
        return this.request("GetTopics", req, cb);
    }
    /**
     * 提供在指定的产品Id下创建一个设备的能力，生成设备名称与设备秘钥。
     */
    async AddDevice(req, cb) {
        return this.request("AddDevice", req, cb);
    }
    /**
     * 获取产品定义的详细信息，包括产品名称、产品描述，鉴权模式等信息。
     */
    async GetProduct(req, cb) {
        return this.request("GetProduct", req, cb);
    }
    /**
     * 重置APP用户密码
     */
    async AppResetPassword(req, cb) {
        return this.request("AppResetPassword", req, cb);
    }
    /**
     * 启用规则
     */
    async ActivateRule(req, cb) {
        return this.request("ActivateRule", req, cb);
    }
    /**
     * 关联子设备产品和网关产品
     */
    async AssociateSubDeviceToGatewayProduct(req, cb) {
        return this.request("AssociateSubDeviceToGatewayProduct", req, cb);
    }
    /**
     * 删除Topic
     */
    async DeleteTopic(req, cb) {
        return this.request("DeleteTopic", req, cb);
    }
    /**
     * 修改设备别名，便于用户个性化定义设备的名称
     */
    async AppUpdateDevice(req, cb) {
        return this.request("AppUpdateDevice", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249121, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.iotcloud = void 0;
const v20180614_1 = require("./v20180614");
const v20210408_1 = require("./v20210408");
exports.iotcloud = {
    v20180614: v20180614_1.v20180614,
    v20210408: v20210408_1.v20210408,
};

}, function(modId) { var map = {"./v20180614":1738984249122,"./v20210408":1738984249125}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249122, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180614 = void 0;
const Models = require("./iotcloud_models");
const iotcloud_client_1 = require("./iotcloud_client");
exports.v20180614 = {
    Client: iotcloud_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./iotcloud_models":1738984249123,"./iotcloud_client":1738984249124}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249123, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249124, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * iotcloud client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("iotcloud.tencentcloudapi.com", "2018-06-14", clientConfig);
    }
    /**
     * 本接口（CreateTask）用于创建一个批量任务。目前此接口可以创建批量更新影子以及批量下发消息的任务
     */
    async CreateTask(req, cb) {
        return this.request("CreateTask", req, cb);
    }
    /**
     * 本接口（DescribeDevices）用于查询物联网通信设备的设备列表。
     */
    async DescribeDevices(req, cb) {
        return this.request("DescribeDevices", req, cb);
    }
    /**
     * 本接口（GetCOSURL）用于获取固件存储在COS的URL
     */
    async GetCOSURL(req, cb) {
        return this.request("GetCOSURL", req, cb);
    }
    /**
     * 发布RRPC消息
     */
    async PublishRRPCMessage(req, cb) {
        return this.request("PublishRRPCMessage", req, cb);
    }
    /**
     * 删除lora类型的设备
     */
    async DeleteLoraDevice(req, cb) {
        return this.request("DeleteLoraDevice", req, cb);
    }
    /**
     * 本接口（DescribeMultiDevices）用于查询批量创建设备的执行结果。
     */
    async DescribeMultiDevices(req, cb) {
        return this.request("DescribeMultiDevices", req, cb);
    }
    /**
     * 获取日志内容列表
     */
    async ListLogPayload(req, cb) {
        return this.request("ListLogPayload", req, cb);
    }
    /**
     * 查询固件信息
     */
    async DescribeFirmware(req, cb) {
        return this.request("DescribeFirmware", req, cb);
    }
    /**
     * 本接口（DescribeDeviceShadow）用于查询虚拟设备信息。
     */
    async DescribeDeviceShadow(req, cb) {
        return this.request("DescribeDeviceShadow", req, cb);
    }
    /**
     * 本接口（DescribeDevice）用于查看设备信息
     */
    async DescribeDevice(req, cb) {
        return this.request("DescribeDevice", req, cb);
    }
    /**
     * 本接口（CreateMultiDevice）用于批量创建物联云设备。
     */
    async CreateMultiDevice(req, cb) {
        return this.request("CreateMultiDevice", req, cb);
    }
    /**
     * 启用或者禁用设备
     */
    async UpdateDeviceAvailableState(req, cb) {
        return this.request("UpdateDeviceAvailableState", req, cb);
    }
    /**
     * 本接口（DescribeProduct）用于查看产品详情
     */
    async DescribeProduct(req, cb) {
        return this.request("DescribeProduct", req, cb);
    }
    /**
     * 本接口（CreateTopicRule）用于创建一个规则
     */
    async CreateTopicRule(req, cb) {
        return this.request("CreateTopicRule", req, cb);
    }
    /**
     * 本接口（CancelTask）用于取消一个未被调度的任务。
     */
    async CancelTask(req, cb) {
        return this.request("CancelTask", req, cb);
    }
    /**
     * 重试设备升级任务
     */
    async RetryDeviceFirmwareTask(req, cb) {
        return this.request("RetryDeviceFirmwareTask", req, cb);
    }
    /**
     * 本接口（CreateTopicPolicy）用于创建一个Topic
     */
    async CreateTopicPolicy(req, cb) {
        return this.request("CreateTopicPolicy", req, cb);
    }
    /**
     * 本接口（BatchUpdateFirmware）用于批量更新设备固件
     */
    async BatchUpdateFirmware(req, cb) {
        return this.request("BatchUpdateFirmware", req, cb);
    }
    /**
     * 本接口（CreateProduct）用于创建一个新的物联网通信产品
     */
    async CreateProduct(req, cb) {
        return this.request("CreateProduct", req, cb);
    }
    /**
     * 本接口（GetUserResourceInfo）用于查询用户资源使用信息。
     */
    async GetUserResourceInfo(req, cb) {
        return this.request("GetUserResourceInfo", req, cb);
    }
    /**
     * 批量设置产品禁用状态
     */
    async SetProductsForbiddenStatus(req, cb) {
        return this.request("SetProductsForbiddenStatus", req, cb);
    }
    /**
     * 获取证书认证类型设备的私钥，刚生成或者重置设备后仅可调用一次
     */
    async DescribeDeviceClientKey(req, cb) {
        return this.request("DescribeDeviceClientKey", req, cb);
    }
    /**
     * 本接口（DescribeProducts）用于列出产品列表。
     */
    async DescribeProducts(req, cb) {
        return this.request("DescribeProducts", req, cb);
    }
    /**
     * 本接口（CreateMultiDevicesTask）用于创建产品级别的批量创建设备任务
     */
    async CreateMultiDevicesTask(req, cb) {
        return this.request("CreateMultiDevicesTask", req, cb);
    }
    /**
     * 查询资源推送任务列表
     */
    async DescribeResourceTasks(req, cb) {
        return this.request("DescribeResourceTasks", req, cb);
    }
    /**
     * 查询固件升级任务统计信息
     */
    async DescribeFirmwareTaskStatistics(req, cb) {
        return this.request("DescribeFirmwareTaskStatistics", req, cb);
    }
    /**
     * 获取lora类型设备的详细信息
     */
    async DescribeLoraDevice(req, cb) {
        return this.request("DescribeLoraDevice", req, cb);
    }
    /**
     * 本接口（DescribeTask）用于查询一个已创建任务的详情，任务保留一个月
     */
    async DescribeTask(req, cb) {
        return this.request("DescribeTask", req, cb);
    }
    /**
     * 本接口（DeleteDevice）用于删除物联网通信设备。
     */
    async DeleteDevice(req, cb) {
        return this.request("DeleteDevice", req, cb);
    }
    /**
     * 批量启用或者禁用设备
     */
    async UpdateDevicesEnableState(req, cb) {
        return this.request("UpdateDevicesEnableState", req, cb);
    }
    /**
     * 本接口（ReplaceTopicRule）用于修改替换规则
     */
    async ReplaceTopicRule(req, cb) {
        return this.request("ReplaceTopicRule", req, cb);
    }
    /**
     * 获取设备上报的日志
     */
    async ListSDKLog(req, cb) {
        return this.request("ListSDKLog", req, cb);
    }
    /**
     * 本接口（DescribeProductResource）用于查询产品资源详情。
     */
    async DescribeProductResource(req, cb) {
        return this.request("DescribeProductResource", req, cb);
    }
    /**
     * 查询推送资源任务统计信息
     */
    async DescribePushResourceTaskStatistics(req, cb) {
        return this.request("DescribePushResourceTaskStatistics", req, cb);
    }
    /**
     * 编辑固件信息
     */
    async EditFirmware(req, cb) {
        return this.request("EditFirmware", req, cb);
    }
    /**
     * 本接口（CreateDevice）用于新建一个物联网通信设备。
     */
    async CreateDevice(req, cb) {
        return this.request("CreateDevice", req, cb);
    }
    /**
     * 本接口（DescribeDeviceResource）用于查询设备资源详情。
     */
    async DescribeDeviceResource(req, cb) {
        return this.request("DescribeDeviceResource", req, cb);
    }
    /**
     * 本接口（PublishMessage）用于向某个主题发消息。
     */
    async PublishMessage(req, cb) {
        return this.request("PublishMessage", req, cb);
    }
    /**
     * 查询固件升级任务状态分布
     */
    async DescribeFirmwareTaskDistribution(req, cb) {
        return this.request("DescribeFirmwareTaskDistribution", req, cb);
    }
    /**
     * 本接口（DeleteProduct）用于删除一个物联网通信产品
     */
    async DeleteProduct(req, cb) {
        return this.request("DeleteProduct", req, cb);
    }
    /**
     * 本接口（DownloadDeviceResource）用于下载设备资源
     */
    async DownloadDeviceResource(req, cb) {
        return this.request("DownloadDeviceResource", req, cb);
    }
    /**
     * 本接口（CreateTaskFileUrl）用于获取产品级任务文件上传链接
     */
    async CreateTaskFileUrl(req, cb) {
        return this.request("CreateTaskFileUrl", req, cb);
    }
    /**
     * 重置设备的连接状态
     */
    async ResetDeviceState(req, cb) {
        return this.request("ResetDeviceState", req, cb);
    }
    /**
     * 查询固件升级任务详情
     */
    async DescribeFirmwareTask(req, cb) {
        return this.request("DescribeFirmwareTask", req, cb);
    }
    /**
     * 本接口（UploadFirmware）用于上传设备固件信息
     */
    async UploadFirmware(req, cb) {
        return this.request("UploadFirmware", req, cb);
    }
    /**
     * 本接口（DescribeTasks）用于查询已创建的任务列表，任务保留一个月
     */
    async DescribeTasks(req, cb) {
        return this.request("DescribeTasks", req, cb);
    }
    /**
     * 本接口（DescribeDeviceResources）用于查询设备资源列表。
     */
    async DescribeDeviceResources(req, cb) {
        return this.request("DescribeDeviceResources", req, cb);
    }
    /**
     * 更新产品动态注册的配置
     */
    async UpdateProductDynamicRegister(req, cb) {
        return this.request("UpdateProductDynamicRegister", req, cb);
    }
    /**
     * 本接口（ListLog）用于查看日志信息
     */
    async ListLog(req, cb) {
        return this.request("ListLog", req, cb);
    }
    /**
     * 查询固件升级任务的设备列表
     */
    async DescribeFirmwareTaskDevices(req, cb) {
        return this.request("DescribeFirmwareTaskDevices", req, cb);
    }
    /**
     * 取消设备升级任务
     */
    async CancelDeviceFirmwareTask(req, cb) {
        return this.request("CancelDeviceFirmwareTask", req, cb);
    }
    /**
     * 模拟lora类型的设备端向服务器端发送消息
     */
    async PublishAsDevice(req, cb) {
        return this.request("PublishAsDevice", req, cb);
    }
    /**
     * 创建lora类型的设备
     */
    async CreateLoraDevice(req, cb) {
        return this.request("CreateLoraDevice", req, cb);
    }
    /**
     * 本接口（EnableTopicRule）用于启用规则
     */
    async EnableTopicRule(req, cb) {
        return this.request("EnableTopicRule", req, cb);
    }
    /**
     * 本接口（BindDevices）用于网关设备批量绑定子设备
     */
    async BindDevices(req, cb) {
        return this.request("BindDevices", req, cb);
    }
    /**
     * 本接口（UpdateTopicPolicy）用于更新Topic信息
     */
    async UpdateTopicPolicy(req, cb) {
        return this.request("UpdateTopicPolicy", req, cb);
    }
    /**
     * 本接口（UnbindDevices）用于网关设备批量解绑子设备
     */
    async UnbindDevices(req, cb) {
        return this.request("UnbindDevices", req, cb);
    }
    /**
     * 发布广播消息
     */
    async PublishBroadcastMessage(req, cb) {
        return this.request("PublishBroadcastMessage", req, cb);
    }
    /**
     * 本接口（DescribeProductTasks）用于查看产品级别的任务列表
     */
    async DescribeProductTasks(req, cb) {
        return this.request("DescribeProductTasks", req, cb);
    }
    /**
     * 查询所有设备列表
     */
    async DescribeAllDevices(req, cb) {
        return this.request("DescribeAllDevices", req, cb);
    }
    /**
     * 本接口（DisableTopicRule）用于禁用规则
     */
    async DisableTopicRule(req, cb) {
        return this.request("DisableTopicRule", req, cb);
    }
    /**
     * 本接口（DescribeMultiDevTask）用于查询批量创建设备任务的执行状态。
     */
    async DescribeMultiDevTask(req, cb) {
        return this.request("DescribeMultiDevTask", req, cb);
    }
    /**
     * 本接口（UpdateDeviceShadow）用于更新虚拟设备信息。
     */
    async UpdateDeviceShadow(req, cb) {
        return this.request("UpdateDeviceShadow", req, cb);
    }
    /**
     * 查询固件升级任务列表
     */
    async DescribeFirmwareTasks(req, cb) {
        return this.request("DescribeFirmwareTasks", req, cb);
    }
    /**
     * 服务器端下发消息给lora类型的设备
     */
    async PublishToDevice(req, cb) {
        return this.request("PublishToDevice", req, cb);
    }
    /**
     * 本接口（DescribeProductResources）用于查询产品资源列表。
     */
    async DescribeProductResources(req, cb) {
        return this.request("DescribeProductResources", req, cb);
    }
    /**
     * 本接口（DeleteDeviceResource）用于删除设备资源
     */
    async DeleteDeviceResource(req, cb) {
        return this.request("DeleteDeviceResource", req, cb);
    }
    /**
     * 本接口（DescribeProductTask）用于查看产品级别的任务信息
     */
    async DescribeProductTask(req, cb) {
        return this.request("DescribeProductTask", req, cb);
    }
    /**
     * 本接口（DeleteTopicRule）用于删除规则
     */
    async DeleteTopicRule(req, cb) {
        return this.request("DeleteTopicRule", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249125, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210408 = void 0;
const Models = require("./iotcloud_models");
const iotcloud_client_1 = require("./iotcloud_client");
exports.v20210408 = {
    Client: iotcloud_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./iotcloud_models":1738984249126,"./iotcloud_client":1738984249127}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249126, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249127, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * iotcloud client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("iotcloud.tencentcloudapi.com", "2021-04-08", clientConfig);
    }
    /**
     * 本接口（GetCOSURL）用于获取固件存储在COS的URL
     */
    async GetCOSURL(req, cb) {
        return this.request("GetCOSURL", req, cb);
    }
    /**
     * 本接口（ReplaceTopicRule）用于修改替换规则
     */
    async ReplaceTopicRule(req, cb) {
        return this.request("ReplaceTopicRule", req, cb);
    }
    /**
     * 发布RRPC消息
     */
    async PublishRRPCMessage(req, cb) {
        return this.request("PublishRRPCMessage", req, cb);
    }
    /**
     * 设置设备上报的日志级别
     */
    async UpdateDeviceLogLevel(req, cb) {
        return this.request("UpdateDeviceLogLevel", req, cb);
    }
    /**
     * 本接口（DescribeGatewayBindDevices）用于获取网关绑定的子设备列表
     */
    async DescribeGatewayBindDevices(req, cb) {
        return this.request("DescribeGatewayBindDevices", req, cb);
    }
    /**
     * 获取日志内容列表
     */
    async ListLogPayload(req, cb) {
        return this.request("ListLogPayload", req, cb);
    }
    /**
     * 本接口（UpdateTopicPolicy）用于更新Topic信息
     */
    async UpdateTopicPolicy(req, cb) {
        return this.request("UpdateTopicPolicy", req, cb);
    }
    /**
     * 查询固件信息
     */
    async DescribeFirmware(req, cb) {
        return this.request("DescribeFirmware", req, cb);
    }
    /**
     * 本接口（DescribeDeviceShadow）用于查询虚拟设备信息。
     */
    async DescribeDeviceShadow(req, cb) {
        return this.request("DescribeDeviceShadow", req, cb);
    }
    /**
     * 本接口（DescribeDevice）用于查看设备信息
     */
    async DescribeDevice(req, cb) {
        return this.request("DescribeDevice", req, cb);
    }
    /**
     * 发布广播消息
     */
    async PublishBroadcastMessage(req, cb) {
        return this.request("PublishBroadcastMessage", req, cb);
    }
    /**
     * 启用或者禁用设备
     */
    async UpdateDeviceAvailableState(req, cb) {
        return this.request("UpdateDeviceAvailableState", req, cb);
    }
    /**
     * 本接口（DescribeProduct）用于查看产品详情
     */
    async DescribeProduct(req, cb) {
        return this.request("DescribeProduct", req, cb);
    }
    /**
     * 本接口（CreateTopicRule）用于创建一个规则
     */
    async CreateTopicRule(req, cb) {
        return this.request("CreateTopicRule", req, cb);
    }
    /**
     * 重试设备升级任务
     */
    async RetryDeviceFirmwareTask(req, cb) {
        return this.request("RetryDeviceFirmwareTask", req, cb);
    }
    /**
     * 本接口（CreateTopicPolicy）用于创建一个Topic
     */
    async CreateTopicPolicy(req, cb) {
        return this.request("CreateTopicPolicy", req, cb);
    }
    /**
     * 更新产品的私有CA
     */
    async UpdateProductPrivateCA(req, cb) {
        return this.request("UpdateProductPrivateCA", req, cb);
    }
    /**
     * 查询私有CA绑定的产品列表
     */
    async DescribePrivateCABindedProducts(req, cb) {
        return this.request("DescribePrivateCABindedProducts", req, cb);
    }
    /**
     * 本接口（BatchUpdateFirmware）用于批量更新设备固件
     */
    async BatchUpdateFirmware(req, cb) {
        return this.request("BatchUpdateFirmware", req, cb);
    }
    /**
     * 本接口（CreateProduct）用于创建一个新的物联网通信产品
     */
    async CreateProduct(req, cb) {
        return this.request("CreateProduct", req, cb);
    }
    /**
     * 本接口（GetUserResourceInfo）用于查询用户资源使用信息。
     */
    async GetUserResourceInfo(req, cb) {
        return this.request("GetUserResourceInfo", req, cb);
    }
    /**
     * 批量设置产品禁用状态
     */
    async SetProductsForbiddenStatus(req, cb) {
        return this.request("SetProductsForbiddenStatus", req, cb);
    }
    /**
     * 查询产品绑定的CA证书
     */
    async DescribeProductCA(req, cb) {
        return this.request("DescribeProductCA", req, cb);
    }
    /**
     * 获取证书认证类型设备的私钥，刚生成或者重置设备后仅可调用一次
     */
    async DescribeDeviceClientKey(req, cb) {
        return this.request("DescribeDeviceClientKey", req, cb);
    }
    /**
     * 本接口（DescribeProducts）用于列出产品列表。
     */
    async DescribeProducts(req, cb) {
        return this.request("DescribeProducts", req, cb);
    }
    /**
     * 本接口（CreateMultiDevicesTask）用于创建产品级别的批量创建设备任务
     */
    async CreateMultiDevicesTask(req, cb) {
        return this.request("CreateMultiDevicesTask", req, cb);
    }
    /**
     * 查询资源推送任务列表
     */
    async DescribeResourceTasks(req, cb) {
        return this.request("DescribeResourceTasks", req, cb);
    }
    /**
     * 查询固件升级任务统计信息
     */
    async DescribeFirmwareTaskStatistics(req, cb) {
        return this.request("DescribeFirmwareTaskStatistics", req, cb);
    }
    /**
     * 删除产品的私有CA证书
     */
    async DeleteProductPrivateCA(req, cb) {
        return this.request("DeleteProductPrivateCA", req, cb);
    }
    /**
     * 查询推送资源任务统计信息
     */
    async DescribePushResourceTaskStatistics(req, cb) {
        return this.request("DescribePushResourceTaskStatistics", req, cb);
    }
    /**
     * 本接口（DescribeProductTask）用于查看产品级别的任务信息
     */
    async DescribeProductTask(req, cb) {
        return this.request("DescribeProductTask", req, cb);
    }
    /**
     * 本接口（DeleteDevice）用于删除物联网通信设备。
     */
    async DeleteDevice(req, cb) {
        return this.request("DeleteDevice", req, cb);
    }
    /**
     * 批量启用或者禁用设备
     */
    async UpdateDevicesEnableState(req, cb) {
        return this.request("UpdateDevicesEnableState", req, cb);
    }
    /**
     * 本接口（UpdateOtaTask）当固件升级大任务处于没有在全部成功的状态时，可修改为取消状态，取消部分或全部设备的升级;或其它允许的可修改的状态
     */
    async UpdateOtaTaskStatus(req, cb) {
        return this.request("UpdateOtaTaskStatus", req, cb);
    }
    /**
     * 本接口（ListFirmwares）用于获取固件列表
     */
    async ListFirmwares(req, cb) {
        return this.request("ListFirmwares", req, cb);
    }
    /**
     * 获取设备上报的日志
     */
    async ListSDKLog(req, cb) {
        return this.request("ListSDKLog", req, cb);
    }
    /**
     * 本接口（DescribeProductResource）用于查询产品资源详情。
     */
    async DescribeProductResource(req, cb) {
        return this.request("DescribeProductResource", req, cb);
    }
    /**
     * 编辑固件信息
     */
    async EditFirmware(req, cb) {
        return this.request("EditFirmware", req, cb);
    }
    /**
     * 本接口（DeleteDeviceShadow）用于删除设备影子
     */
    async DeleteDeviceShadow(req, cb) {
        return this.request("DeleteDeviceShadow", req, cb);
    }
    /**
     * 本接口（CreateDevice）用于新建一个物联网通信设备。
     */
    async CreateDevice(req, cb) {
        return this.request("CreateDevice", req, cb);
    }
    /**
     * 本接口（DescribeDeviceResource）用于查询设备资源详情。
     */
    async DescribeDeviceResource(req, cb) {
        return this.request("DescribeDeviceResource", req, cb);
    }
    /**
     * 本接口（PublishMessage）用于向某个主题发消息。
     */
    async PublishMessage(req, cb) {
        return this.request("PublishMessage", req, cb);
    }
    /**
     * 查询固件升级任务状态分布
     */
    async DescribeFirmwareTaskDistribution(req, cb) {
        return this.request("DescribeFirmwareTaskDistribution", req, cb);
    }
    /**
     * 创建私有CA证书
     */
    async CreatePrivateCA(req, cb) {
        return this.request("CreatePrivateCA", req, cb);
    }
    /**
     * 本接口（DeleteProduct）用于删除一个物联网通信产品
     */
    async DeleteProduct(req, cb) {
        return this.request("DeleteProduct", req, cb);
    }
    /**
     * 更新私有CA证书
     */
    async UpdatePrivateCA(req, cb) {
        return this.request("UpdatePrivateCA", req, cb);
    }
    /**
     * 本接口（DownloadDeviceResource）用于下载设备资源
     */
    async DownloadDeviceResource(req, cb) {
        return this.request("DownloadDeviceResource", req, cb);
    }
    /**
     * 删除私有CA证书
     */
    async DeletePrivateCA(req, cb) {
        return this.request("DeletePrivateCA", req, cb);
    }
    /**
     * 重置设备的连接状态
     */
    async ResetDeviceState(req, cb) {
        return this.request("ResetDeviceState", req, cb);
    }
    /**
     * 查询固件升级任务详情
     */
    async DescribeFirmwareTask(req, cb) {
        return this.request("DescribeFirmwareTask", req, cb);
    }
    /**
     * 本接口（UploadFirmware）用于上传设备固件信息
     */
    async UploadFirmware(req, cb) {
        return this.request("UploadFirmware", req, cb);
    }
    /**
     * 本接口（DescribeDeviceResources）用于查询设备资源列表。
     */
    async DescribeDeviceResources(req, cb) {
        return this.request("DescribeDeviceResources", req, cb);
    }
    /**
     * 更新产品动态注册的配置
     */
    async UpdateProductDynamicRegister(req, cb) {
        return this.request("UpdateProductDynamicRegister", req, cb);
    }
    /**
     * 本接口（ListLog）用于查看日志信息
     */
    async ListLog(req, cb) {
        return this.request("ListLog", req, cb);
    }
    /**
     * 查询固件升级任务的设备列表
     */
    async DescribeFirmwareTaskDevices(req, cb) {
        return this.request("DescribeFirmwareTaskDevices", req, cb);
    }
    /**
     * 取消设备升级任务
     */
    async CancelDeviceFirmwareTask(req, cb) {
        return this.request("CancelDeviceFirmwareTask", req, cb);
    }
    /**
     * 本接口（EnableTopicRule）用于启用规则
     */
    async EnableTopicRule(req, cb) {
        return this.request("EnableTopicRule", req, cb);
    }
    /**
     * 本接口（BindDevices）用于网关设备批量绑定子设备
     */
    async BindDevices(req, cb) {
        return this.request("BindDevices", req, cb);
    }
    /**
     * 本接口（CreateTaskFileUrl）用于获取产品级任务文件上传链接
     */
    async CreateTaskFileUrl(req, cb) {
        return this.request("CreateTaskFileUrl", req, cb);
    }
    /**
     * 本接口（UnbindDevices）用于网关设备批量解绑子设备
     */
    async UnbindDevices(req, cb) {
        return this.request("UnbindDevices", req, cb);
    }
    /**
     * 查询私有化CA信息
     */
    async DescribePrivateCA(req, cb) {
        return this.request("DescribePrivateCA", req, cb);
    }
    /**
     * 本接口（DescribeProductTasks）用于查看产品级别的任务列表
     */
    async DescribeProductTasks(req, cb) {
        return this.request("DescribeProductTasks", req, cb);
    }
    /**
     * 本接口（DescribeDevices）用于查询物联网通信设备的设备列表。
     */
    async DescribeDevices(req, cb) {
        return this.request("DescribeDevices", req, cb);
    }
    /**
     * 本接口（GetAllVersion）用于获取所有的版本列表
     */
    async GetAllVersion(req, cb) {
        return this.request("GetAllVersion", req, cb);
    }
    /**
     * 本接口（DisableTopicRule）用于禁用规则
     */
    async DisableTopicRule(req, cb) {
        return this.request("DisableTopicRule", req, cb);
    }
    /**
     * 本接口（UpdateDeviceShadow）用于更新虚拟设备信息。
     */
    async UpdateDeviceShadow(req, cb) {
        return this.request("UpdateDeviceShadow", req, cb);
    }
    /**
     * 查询固件升级任务列表
     */
    async DescribeFirmwareTasks(req, cb) {
        return this.request("DescribeFirmwareTasks", req, cb);
    }
    /**
     * 本接口（ListTopicRules）用于分页获取规则列表
     */
    async ListTopicRules(req, cb) {
        return this.request("ListTopicRules", req, cb);
    }
    /**
     * 本接口（DescribeProductResources）用于查询产品资源列表。
     */
    async DescribeProductResources(req, cb) {
        return this.request("DescribeProductResources", req, cb);
    }
    /**
     * 本接口（DeleteDeviceResource）用于删除设备资源
     */
    async DeleteDeviceResource(req, cb) {
        return this.request("DeleteDeviceResource", req, cb);
    }
    /**
     * 查询私有CA证书列表
     */
    async DescribePrivateCAs(req, cb) {
        return this.request("DescribePrivateCAs", req, cb);
    }
    /**
     * 本接口（UpdateDevicePSK）用于更新设备的PSK
     */
    async UpdateDevicePSK(req, cb) {
        return this.request("UpdateDevicePSK", req, cb);
    }
    /**
     * 本接口（DeleteTopicRule）用于删除规则
     */
    async DeleteTopicRule(req, cb) {
        return this.request("DeleteTopicRule", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249128, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.iotexplorer = void 0;
const v20190423_1 = require("./v20190423");
exports.iotexplorer = {
    v20190423: v20190423_1.v20190423,
};

}, function(modId) { var map = {"./v20190423":1738984249129}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249129, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190423 = void 0;
const Models = require("./iotexplorer_models");
const iotexplorer_client_1 = require("./iotexplorer_client");
exports.v20190423 = {
    Client: iotexplorer_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./iotexplorer_models":1738984249130,"./iotexplorer_client":1738984249131}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249130, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249131, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * iotexplorer client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("iotexplorer.tencentcloudapi.com", "2019-04-23", clientConfig);
    }
    /**
     * 本接口（GetCOSURL）用于获取固件COS存储的上传请求URL地址
     */
    async GetCOSURL(req, cb) {
        return this.request("GetCOSURL", req, cb);
    }
    /**
     * 提供修改产品的名称和描述等信息的能力，对于已发布产品不允许进行修改。
     */
    async ModifyStudioProduct(req, cb) {
        return this.request("ModifyStudioProduct", req, cb);
    }
    /**
     * 根据设备信息拉取有效套餐列表
     */
    async DescribeDevicePackages(req, cb) {
        return this.request("DescribeDevicePackages", req, cb);
    }
    /**
     * 本接口（DescribeFirmwareUpdateStatus）用于查询设备固件升级状态及进度。
     */
    async DescribeFirmwareUpdateStatus(req, cb) {
        return this.request("DescribeFirmwareUpdateStatus", req, cb);
    }
    /**
     * 用于查看某个设备的详细信息
     */
    async DescribeDevice(req, cb) {
        return this.request("DescribeDevice", req, cb);
    }
    /**
     * 拉取云存事件列表
     */
    async DescribeCloudStorageEventsWithAITasks(req, cb) {
        return this.request("DescribeCloudStorageEventsWithAITasks", req, cb);
    }
    /**
     * 本接口（DescribeTopicPolicy）用于查看Topic详细信息
     */
    async DescribeTopicPolicy(req, cb) {
        return this.request("DescribeTopicPolicy", req, cb);
    }
    /**
     * 开通设备云存AI分析服务
     */
    async CreateCloudStorageAIService(req, cb) {
        return this.request("CreateCloudStorageAIService", req, cb);
    }
    /**
     * 提供查询用户所创建的项目列表查询功能。
     */
    async GetProjectList(req, cb) {
        return this.request("GetProjectList", req, cb);
    }
    /**
     * 为用户提供同步调用设备行为的能力。
     */
    async CallDeviceActionSync(req, cb) {
        return this.request("CallDeviceActionSync", req, cb);
    }
    /**
     * 直接绑定设备和家庭
     */
    async DirectBindDeviceInFamily(req, cb) {
        return this.request("DirectBindDeviceInFamily", req, cb);
    }
    /**
     * 获取实时位置解析
     */
    async DescribeDeviceLocationSolve(req, cb) {
        return this.request("DescribeDeviceLocationSolve", req, cb);
    }
    /**
     * 获取视频防盗链播放URL
     */
    async GenerateSignedVideoURL(req, cb) {
        return this.request("GenerateSignedVideoURL", req, cb);
    }
    /**
     * 查询设备绑定的网关设备
     */
    async DescribeDeviceBindGateway(req, cb) {
        return this.request("DescribeDeviceBindGateway", req, cb);
    }
    /**
     * 获取设备历史位置
     */
    async GetDeviceLocationHistory(req, cb) {
        return this.request("GetDeviceLocationHistory", req, cb);
    }
    /**
     * 获取设备的历史事件
     */
    async ListEventHistory(req, cb) {
        return this.request("ListEventHistory", req, cb);
    }
    /**
     * 提供查看产品详细信息的能力，包括产品的ID、数据协议、认证类型等重要参数
     */
    async DescribeStudioProduct(req, cb) {
        return this.request("DescribeStudioProduct", req, cb);
    }
    /**
     * 获取 LoRa 网关列表接口
     */
    async GetLoRaGatewayList(req, cb) {
        return this.request("GetLoRaGatewayList", req, cb);
    }
    /**
     * 产品开发完成并测试通过后，通过发布产品将产品设置为发布状态
     */
    async ReleaseStudioProduct(req, cb) {
        return this.request("ReleaseStudioProduct", req, cb);
    }
    /**
     * 列出量产数据列表信息。
     */
    async GetBatchProductionsList(req, cb) {
        return this.request("GetBatchProductionsList", req, cb);
    }
    /**
     * 批量拉取云存事件缩略图
     */
    async DescribeCloudStorageThumbnailList(req, cb) {
        return this.request("DescribeCloudStorageThumbnailList", req, cb);
    }
    /**
     * 创建TRTC通话参数
     */
    async CreateTRTCSignaturesWithRoomId(req, cb) {
        return this.request("CreateTRTCSignaturesWithRoomId", req, cb);
    }
    /**
     * 更新围栏绑定信息
     */
    async ModifyFenceBind(req, cb) {
        return this.request("ModifyFenceBind", req, cb);
    }
    /**
     * 查询指定产品的云存 AI 服务开通状态
     */
    async DescribeProductCloudStorageAIService(req, cb) {
        return this.request("DescribeProductCloudStorageAIService", req, cb);
    }
    /**
     * 查询套餐消耗记录列表
     */
    async DescribePackageConsumeTasks(req, cb) {
        return this.request("DescribePackageConsumeTasks", req, cb);
    }
    /**
     * 获取云存套餐包消耗统计
     */
    async DescribeCloudStoragePackageConsumeStats(req, cb) {
        return this.request("DescribeCloudStoragePackageConsumeStats", req, cb);
    }
    /**
     * 删除位置空间
     */
    async DeletePositionSpace(req, cb) {
        return this.request("DeletePositionSpace", req, cb);
    }
    /**
     * 获取设备激活详情
     */
    async DescribeActivateDevice(req, cb) {
        return this.request("DescribeActivateDevice", req, cb);
    }
    /**
     * 获取网关产品已经绑定的子产品
     */
    async DescribeBindedProducts(req, cb) {
        return this.request("DescribeBindedProducts", req, cb);
    }
    /**
     * 修改 LoRa 网关信息
     */
    async ModifyLoRaGateway(req, cb) {
        return this.request("ModifyLoRaGateway", req, cb);
    }
    /**
     * 获取围栏告警事件列表
     */
    async DescribeFenceEventList(req, cb) {
        return this.request("DescribeFenceEventList", req, cb);
    }
    /**
     * 开通云存服务
     */
    async CreateIotVideoCloudStorage(req, cb) {
        return this.request("CreateIotVideoCloudStorage", req, cb);
    }
    /**
     * 删除规则
     */
    async DeleteTopicRule(req, cb) {
        return this.request("DeleteTopicRule", req, cb);
    }
    /**
     * 查询指定设备的云存 AI 服务开通状态与参数配置
     */
    async DescribeCloudStorageAIService(req, cb) {
        return this.request("DescribeCloudStorageAIService", req, cb);
    }
    /**
     * 获取围栏绑定信息列表
     */
    async DescribeFenceBindList(req, cb) {
        return this.request("DescribeFenceBindList", req, cb);
    }
    /**
     * 删除  LoRa 网关的接口
     */
    async DeleteLoRaGateway(req, cb) {
        return this.request("DeleteLoRaGateway", req, cb);
    }
    /**
     * 取消分配
     */
    async CancelAssignTWeCallLicense(req, cb) {
        return this.request("CancelAssignTWeCallLicense", req, cb);
    }
    /**
     * 为用户提供新建产品的能力，用于管理用户的设备
     */
    async CreateStudioProduct(req, cb) {
        return this.request("CreateStudioProduct", req, cb);
    }
    /**
     * 获取具有云存的日期
     */
    async DescribeCloudStorageDate(req, cb) {
        return this.request("DescribeCloudStorageDate", req, cb);
    }
    /**
     * 查询云存卡套餐信息
     */
    async DescribeFreeCloudStorageNum(req, cb) {
        return this.request("DescribeFreeCloudStorageNum", req, cb);
    }
    /**
     * 启用规则
     */
    async EnableTopicRule(req, cb) {
        return this.request("EnableTopicRule", req, cb);
    }
    /**
     * 查询绑定到家庭的网关设备的子设备列表
     */
    async DescribeGatewaySubDeviceList(req, cb) {
        return this.request("DescribeGatewaySubDeviceList", req, cb);
    }
    /**
     * 拉取云存用户列表
     */
    async DescribeCloudStorageUsers(req, cb) {
        return this.request("DescribeCloudStorageUsers", req, cb);
    }
    /**
     * 转移云存服务
     */
    async TransferCloudStorage(req, cb) {
        return this.request("TransferCloudStorage", req, cb);
    }
    /**
     * 用于查询视频激活码统计概览
     */
    async DescribeVideoLicense(req, cb) {
        return this.request("DescribeVideoLicense", req, cb);
    }
    /**
     * 提供根据产品名称查找产品的能力
     */
    async SearchStudioProduct(req, cb) {
        return this.request("SearchStudioProduct", req, cb);
    }
    /**
     * 修改规则
     */
    async ModifyTopicRule(req, cb) {
        return this.request("ModifyTopicRule", req, cb);
    }
    /**
     * 继承云存用户
     */
    async InheritCloudStorageUser(req, cb) {
        return this.request("InheritCloudStorageUser", req, cb);
    }
    /**
     * 转移设备
     */
    async TransferTWeCallDevice(req, cb) {
        return this.request("TransferTWeCallDevice", req, cb);
    }
    /**
     * 本接口（ListFirmwares）用于获取固件列表
     */
    async ListFirmwares(req, cb) {
        return this.request("ListFirmwares", req, cb);
    }
    /**
     * 本接口（PublishFirmwareUpdateMessage）用于用户确认升级后，云端向设备发起固件升级请求。
     */
    async PublishFirmwareUpdateMessage(req, cb) {
        return this.request("PublishFirmwareUpdateMessage", req, cb);
    }
    /**
     * 创建设备
     */
    async CreateDevice(req, cb) {
        return this.request("CreateDevice", req, cb);
    }
    /**
     * 删除围栏绑定信息
     */
    async DeleteFenceBind(req, cb) {
        return this.request("DeleteFenceBind", req, cb);
    }
    /**
     * 根据设备产品ID、设备名称，设置控制设备的属性数据。
     */
    async ControlDeviceData(req, cb) {
        return this.request("ControlDeviceData", req, cb);
    }
    /**
     * 查询固件升级任务列表
     */
    async DescribeFirmwareTask(req, cb) {
        return this.request("DescribeFirmwareTask", req, cb);
    }
    /**
     * 无
     */
    async GenSingleDeviceSignatureOfPublic(req, cb) {
        return this.request("GenSingleDeviceSignatureOfPublic", req, cb);
    }
    /**
     * 重置云存服务
     */
    async ResetCloudStorage(req, cb) {
        return this.request("ResetCloudStorage", req, cb);
    }
    /**
     * 创建外部视频 AI 分析任务
     */
    async InvokeExternalSourceAIServiceTask(req, cb) {
        return this.request("InvokeExternalSourceAIServiceTask", req, cb);
    }
    /**
     * 提供查询LoRa自定义频点详情的能力
     */
    async DescribeLoRaFrequency(req, cb) {
        return this.request("DescribeLoRaFrequency", req, cb);
    }
    /**
     * 更新位置空间
     */
    async ModifyPositionSpace(req, cb) {
        return this.request("ModifyPositionSpace", req, cb);
    }
    /**
     * 获取某一天云存时间轴
     */
    async DescribeCloudStorageTime(req, cb) {
        return this.request("DescribeCloudStorageTime", req, cb);
    }
    /**
     * 获取规则列表
     */
    async GetTopicRuleList(req, cb) {
        return this.request("GetTopicRuleList", req, cb);
    }
    /**
     * 拉取云存事件缩略图
     */
    async DescribeCloudStorageThumbnail(req, cb) {
        return this.request("DescribeCloudStorageThumbnail", req, cb);
    }
    /**
     * 重置指定设备的云存 AI 服务
     */
    async ResetCloudStorageAIService(req, cb) {
        return this.request("ResetCloudStorageAIService", req, cb);
    }
    /**
     * 查询微信设备授权票据
     */
    async GetWechatDeviceTicket(req, cb) {
        return this.request("GetWechatDeviceTicket", req, cb);
    }
    /**
     * 拉取多个云存事件缩略图
     */
    async DescribeCloudStorageMultiThumbnail(req, cb) {
        return this.request("DescribeCloudStorageMultiThumbnail", req, cb);
    }
    /**
     * 提供给用户异步调用设备行为的能力
     */
    async CallDeviceActionAsync(req, cb) {
        return this.request("CallDeviceActionAsync", req, cb);
    }
    /**
     * 修改LoRa自定义频点
     */
    async ModifyLoRaFrequency(req, cb) {
        return this.request("ModifyLoRaFrequency", req, cb);
    }
    /**
     * 拉取设备统计汇总数据
     */
    async GetDeviceSumStatistics(req, cb) {
        return this.request("GetDeviceSumStatistics", req, cb);
    }
    /**
     * 提供删除某个项目的能力
     */
    async DeleteProject(req, cb) {
        return this.request("DeleteProject", req, cb);
    }
    /**
     * 获取规则信息
     */
    async DescribeTopicRule(req, cb) {
        return this.request("DescribeTopicRule", req, cb);
    }
    /**
     * 发布广播消息、发布RRPC消息属于早期服务，目前已停止维护，需要从官网下线。

发布广播消息
     */
    async PublishBroadcastMessage(req, cb) {
        return this.request("PublishBroadcastMessage", req, cb);
    }
    /**
     * 批量解绑子产品
     */
    async UnbindProducts(req, cb) {
        return this.request("UnbindProducts", req, cb);
    }
    /**
     * 获取位置空间列表
     */
    async GetPositionSpaceList(req, cb) {
        return this.request("GetPositionSpaceList", req, cb);
    }
    /**
     * 提供删除某个项目下产品的能力
     */
    async DeleteStudioProduct(req, cb) {
        return this.request("DeleteStudioProduct", req, cb);
    }
    /**
     * 根据设备产品ID、设备名称，获取设备上报的属性数据。
     */
    async DescribeDeviceData(req, cb) {
        return this.request("DescribeDeviceData", req, cb);
    }
    /**
     * 获取网关绑定的子设备列表
     */
    async DescribeGatewayBindDevices(req, cb) {
        return this.request("DescribeGatewayBindDevices", req, cb);
    }
    /**
     * 解散TRTC房间
     */
    async DismissRoomByStrRoomIdFromTRTC(req, cb) {
        return this.request("DismissRoomByStrRoomIdFromTRTC", req, cb);
    }
    /**
     * 创建围栏
     */
    async CreatePositionFence(req, cb) {
        return this.request("CreatePositionFence", req, cb);
    }
    /**
     * 修改指定产品的云存 AI 服务开通状态
     */
    async ModifyProductCloudStorageAIService(req, cb) {
        return this.request("ModifyProductCloudStorageAIService", req, cb);
    }
    /**
     * 创建新 LoRa 网关设备接口
     */
    async CreateLoRaGateway(req, cb) {
        return this.request("CreateLoRaGateway", req, cb);
    }
    /**
     * 创建规则
     */
    async CreateTopicRule(req, cb) {
        return this.request("CreateTopicRule", req, cb);
    }
    /**
     * 创建 LoRa 自定义频点
     */
    async CreateLoRaFrequency(req, cb) {
        return this.request("CreateLoRaFrequency", req, cb);
    }
    /**
     * 本接口（CreateTopicPolicy）用于创建一个Topic
     */
    async CreateTopicPolicy(req, cb) {
        return this.request("CreateTopicPolicy", req, cb);
    }
    /**
     * 发布广播消息、发布RRPC消息属于早期服务，目前已停止维护，需要从官网下线。

下发RRPC消息
     */
    async PublishRRPCMessage(req, cb) {
        return this.request("PublishRRPCMessage", req, cb);
    }
    /**
     * 获取设备云存服务详情
     */
    async DescribeCloudStorage(req, cb) {
        return this.request("DescribeCloudStorage", req, cb);
    }
    /**
     * 本接口（UploadFirmware）用于创建设备固件版本信息，在平台用于固件版本升级、固件资源下发等。
     */
    async UploadFirmware(req, cb) {
        return this.request("UploadFirmware", req, cb);
    }
    /**
     * 同步执行设备云存 AI 分析任务
     */
    async InvokeCloudStorageAIServiceTask(req, cb) {
        return this.request("InvokeCloudStorageAIServiceTask", req, cb);
    }
    /**
     * 获取增值服务激活码详情
     */
    async DescribeActivateLicenseService(req, cb) {
        return this.request("DescribeActivateLicenseService", req, cb);
    }
    /**
     * 开通免费云存服务
     */
    async CreateFreeCloudStorage(req, cb) {
        return this.request("CreateFreeCloudStorage", req, cb);
    }
    /**
     * 微信VOIP功能调整下线

查询TWeCall包列表
     */
    async GetTWeCallPkgList(req, cb) {
        return this.request("GetTWeCallPkgList", req, cb);
    }
    /**
     * 批量禁用启用设备
     */
    async UpdateDevicesEnableState(req, cb) {
        return this.request("UpdateDevicesEnableState", req, cb);
    }
    /**
     * 修改项目
     */
    async ModifyProject(req, cb) {
        return this.request("ModifyProject", req, cb);
    }
    /**
     * 批量绑定子产品
     */
    async BindProducts(req, cb) {
        return this.request("BindProducts", req, cb);
    }
    /**
     * TRTC操作，将用户从房间移出
     */
    async RemoveUserByRoomIdFromTRTC(req, cb) {
        return this.request("RemoveUserByRoomIdFromTRTC", req, cb);
    }
    /**
     * 搜索位置空间
     */
    async SearchPositionSpace(req, cb) {
        return this.request("SearchPositionSpace", req, cb);
    }
    /**
     * 微信VOIP功能调整下线

分配License
     */
    async AssignTWeCallLicense(req, cb) {
        return this.request("AssignTWeCallLicense", req, cb);
    }
    /**
     * 重置设备
     */
    async ResetTWeCallDevice(req, cb) {
        return this.request("ResetTWeCallDevice", req, cb);
    }
    /**
     * 本接口（UpdateTopicPolicy）用于更新Topic信息
     */
    async ModifyTopicPolicy(req, cb) {
        return this.request("ModifyTopicPolicy", req, cb);
    }
    /**
     * 获取位置空间中围栏告警事件列表
     */
    async DescribeSpaceFenceEventList(req, cb) {
        return this.request("DescribeSpaceFenceEventList", req, cb);
    }
    /**
     * 本接口（UpdateFirmware）用于对指定设备发起固件升级请求
     */
    async UpdateFirmware(req, cb) {
        return this.request("UpdateFirmware", req, cb);
    }
    /**
     * 查询激活状态
     */
    async GetTWeCallActiveStatus(req, cb) {
        return this.request("GetTWeCallActiveStatus", req, cb);
    }
    /**
     * 用于获取网关可绑定或解绑的子产品
     */
    async DescribeGatewaySubProducts(req, cb) {
        return this.request("DescribeGatewaySubProducts", req, cb);
    }
    /**
     * 获取设备位置列表
     */
    async DescribeDevicePositionList(req, cb) {
        return this.request("DescribeDevicePositionList", req, cb);
    }
    /**
     * 查询固件信息
     */
    async DescribeFirmware(req, cb) {
        return this.request("DescribeFirmware", req, cb);
    }
    /**
     * 获取设备当前固件信息
     */
    async DescribeDeviceFirmwares(req, cb) {
        return this.request("DescribeDeviceFirmwares", req, cb);
    }
    /**
     * 批量绑定子设备
     */
    async BindDevices(req, cb) {
        return this.request("BindDevices", req, cb);
    }
    /**
     * 用于新建批量生产设备
     */
    async CreateBatchProduction(req, cb) {
        return this.request("CreateBatchProduction", req, cb);
    }
    /**
     * 创建设备云存 AI 分析任务
     */
    async CreateCloudStorageAIServiceTask(req, cb) {
        return this.request("CreateCloudStorageAIServiceTask", req, cb);
    }
    /**
     * 禁用规则
     */
    async DisableTopicRule(req, cb) {
        return this.request("DisableTopicRule", req, cb);
    }
    /**
     * 批量解绑子设备
     */
    async UnbindDevices(req, cb) {
        return this.request("UnbindDevices", req, cb);
    }
    /**
     * 修改指定设备的云存 AI 服务参数配置
     */
    async ModifyCloudStorageAIService(req, cb) {
        return this.request("ModifyCloudStorageAIService", req, cb);
    }
    /**
     * 恢复设备
     */
    async ResumeWeCallDevice(req, cb) {
        return this.request("ResumeWeCallDevice", req, cb);
    }
    /**
     * 提供查询某个项目下所有产品信息的能力。
     */
    async GetStudioProductList(req, cb) {
        return this.request("GetStudioProductList", req, cb);
    }
    /**
     * 绑定云存用户
     */
    async BindCloudStorageUser(req, cb) {
        return this.request("BindCloudStorageUser", req, cb);
    }
    /**
     * 获取指定网关设备的子设备列表
     */
    async GetGatewaySubDeviceList(req, cb) {
        return this.request("GetGatewaySubDeviceList", req, cb);
    }
    /**
     * 获取量产详情信息。
     */
    async DescribeBatchProduction(req, cb) {
        return this.request("DescribeBatchProduction", req, cb);
    }
    /**
     * 创建外部视频 AI 分析任务
     */
    async CreateExternalSourceAIServiceTask(req, cb) {
        return this.request("CreateExternalSourceAIServiceTask", req, cb);
    }
    /**
     * 激活
     */
    async ActivateTWeCallLicense(req, cb) {
        return this.request("ActivateTWeCallLicense", req, cb);
    }
    /**
     * 更新用户对设备的TweCall授权状态
     */
    async UpdateDeviceTWeCallAuthorizeStatus(req, cb) {
        return this.request("UpdateDeviceTWeCallAuthorizeStatus", req, cb);
    }
    /**
     * 删除云存事件
     */
    async DeleteCloudStorageEvent(req, cb) {
        return this.request("DeleteCloudStorageEvent", req, cb);
    }
    /**
     * 批量删除设备
     */
    async DeleteDevices(req, cb) {
        return this.request("DeleteDevices", req, cb);
    }
    /**
     * 创建设备通道
     */
    async CreateDeviceChannel(req, cb) {
        return this.request("CreateDeviceChannel", req, cb);
    }
    /**
     * 本接口（CheckFirmwareUpdate）用于查询设备可升级固件版本
     */
    async CheckFirmwareUpdate(req, cb) {
        return this.request("CheckFirmwareUpdate", req, cb);
    }
    /**
     * 为用户提供新建项目的能力，用于集中管理产品和应用。
     */
    async CreateProject(req, cb) {
        return this.request("CreateProject", req, cb);
    }
    /**
     * 获取云存 AI 分析任务输出文件的下载地址
     */
    async GenerateCloudStorageAIServiceTaskFileURL(req, cb) {
        return this.request("GenerateCloudStorageAIServiceTaskFileURL", req, cb);
    }
    /**
     * 查询云存服务详情
     */
    async DescribeCloudStorageOrder(req, cb) {
        return this.request("DescribeCloudStorageOrder", req, cb);
    }
    /**
     * 本接口（PublishMessage）用于使用自定义透传协议进行设备远控
     */
    async PublishMessage(req, cb) {
        return this.request("PublishMessage", req, cb);
    }
    /**
     * 获取设备在指定时间范围内上报的历史数据。
     */
    async DescribeDeviceDataHistory(req, cb) {
        return this.request("DescribeDeviceDataHistory", req, cb);
    }
    /**
     * 更新围栏
     */
    async ModifyPositionFence(req, cb) {
        return this.request("ModifyPositionFence", req, cb);
    }
    /**
     * 删除设备
     */
    async DeleteDevice(req, cb) {
        return this.request("DeleteDevice", req, cb);
    }
    /**
     * 获取围栏列表
     */
    async DescribePositionFenceList(req, cb) {
        return this.request("DescribePositionFenceList", req, cb);
    }
    /**
     * 提供删除LoRa自定义频点的能力
     */
    async DeleteLoRaFrequency(req, cb) {
        return this.request("DeleteLoRaFrequency", req, cb);
    }
    /**
     * 查询套餐消耗记录详情
     */
    async DescribePackageConsumeTask(req, cb) {
        return this.request("DescribePackageConsumeTask", req, cb);
    }
    /**
     * 重置云存事件
     */
    async ResetCloudStorageEvent(req, cb) {
        return this.request("ResetCloudStorageEvent", req, cb);
    }
    /**
     * 查询云存AI分析回调配置
     */
    async DescribeCloudStorageAIServiceCallback(req, cb) {
        return this.request("DescribeCloudStorageAIServiceCallback", req, cb);
    }
    /**
     * 更新位置空间产品属性
     */
    async ModifySpaceProperty(req, cb) {
        return this.request("ModifySpaceProperty", req, cb);
    }
    /**
     * 本接口（DeleteTopicPolicy）用于删除Topic
     */
    async DeleteTopicPolicy(req, cb) {
        return this.request("DeleteTopicPolicy", req, cb);
    }
    /**
     * 用于查询某个产品下的设备列表
     */
    async GetDeviceList(req, cb) {
        return this.request("GetDeviceList", req, cb);
    }
    /**
     * 本接口（ListTopicPolicy）用于获取Topic列表
     */
    async ListTopicPolicy(req, cb) {
        return this.request("ListTopicPolicy", req, cb);
    }
    /**
     * 查询指定的云存 AI 分析任务
     */
    async DescribeCloudStorageAIServiceTask(req, cb) {
        return this.request("DescribeCloudStorageAIServiceTask", req, cb);
    }
    /**
     * 公共实例过期时间 0001-01-01T00:00:00Z，公共实例是永久有效
     */
    async DescribeInstance(req, cb) {
        return this.request("DescribeInstance", req, cb);
    }
    /**
     * 获取设备图片流数据
     */
    async DescribeCloudStorageStreamData(req, cb) {
        return this.request("DescribeCloudStorageStreamData", req, cb);
    }
    /**
     * 暂停设备
     */
    async PauseTWeCallDevice(req, cb) {
        return this.request("PauseTWeCallDevice", req, cb);
    }
    /**
     * 查询小程序列表
     */
    async GetAuthMiniProgramAppList(req, cb) {
        return this.request("GetAuthMiniProgramAppList", req, cb);
    }
    /**
     * 删除围栏
     */
    async DeletePositionFence(req, cb) {
        return this.request("DeletePositionFence", req, cb);
    }
    /**
     * 修改云存AI分析回调配置
     */
    async ModifyCloudStorageAIServiceCallback(req, cb) {
        return this.request("ModifyCloudStorageAIServiceCallback", req, cb);
    }
    /**
     * 查询指定设备的云存 AI 分析任务列表
     */
    async DescribeCloudStorageAIServiceTasks(req, cb) {
        return this.request("DescribeCloudStorageAIServiceTasks", req, cb);
    }
    /**
     * 搜索规则
     */
    async SearchTopicRule(req, cb) {
        return this.request("SearchTopicRule", req, cb);
    }
    /**
     * 拉取云存事件列表
     */
    async DescribeCloudStorageEvents(req, cb) {
        return this.request("DescribeCloudStorageEvents", req, cb);
    }
    /**
     * 提供修改产品的数据模板的能力
     */
    async ModifyModelDefinition(req, cb) {
        return this.request("ModifyModelDefinition", req, cb);
    }
    /**
     * 用于获取设备绑定的用户列表
     */
    async GetFamilyDeviceUserList(req, cb) {
        return this.request("GetFamilyDeviceUserList", req, cb);
    }
    /**
     * 查询项目详情
     */
    async DescribeProject(req, cb) {
        return this.request("DescribeProject", req, cb);
    }
    /**
     * 查询产品配置的数据模板信息
     */
    async DescribeModelDefinition(req, cb) {
        return this.request("DescribeModelDefinition", req, cb);
    }
    /**
     * 创建位置空间
     */
    async CreatePositionSpace(req, cb) {
        return this.request("CreatePositionSpace", req, cb);
    }
    /**
     * 获取设备固件信息
     */
    async DescribeDeviceFirmWare(req, cb) {
        return this.request("DescribeDeviceFirmWare", req, cb);
    }
    /**
     * 创建围栏绑定信息
     */
    async CreateFenceBind(req, cb) {
        return this.request("CreateFenceBind", req, cb);
    }
    /**
     * 获取云存套餐包消耗详细记录
     */
    async DescribeCloudStoragePackageConsumeDetails(req, cb) {
        return this.request("DescribeCloudStoragePackageConsumeDetails", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249132, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.iottid = void 0;
const v20190411_1 = require("./v20190411");
exports.iottid = {
    v20190411: v20190411_1.v20190411,
};

}, function(modId) { var map = {"./v20190411":1738984249133}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249133, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190411 = void 0;
const Models = require("./iottid_models");
const iottid_client_1 = require("./iottid_client");
exports.v20190411 = {
    Client: iottid_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./iottid_models":1738984249134,"./iottid_client":1738984249135}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249134, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249135, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * iottid client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("iottid.tencentcloudapi.com", "2019-04-11", clientConfig);
    }
    /**
     * 单向认证测试TID
     */
    async AuthTestTid(req, cb) {
        return this.request("AuthTestTid", req, cb);
    }
    /**
     * 上传硬件唯一标识码，是软加固设备身份参数。本接口如遇到错误数据，则所有当次上传数据失效。
     */
    async UploadDeviceUniqueCode(req, cb) {
        return this.request("UploadDeviceUniqueCode", req, cb);
    }
    /**
     * 下载控制台验证芯片烧录信息，保证TID与中心信息一致
     */
    async VerifyChipBurnInfo(req, cb) {
        return this.request("VerifyChipBurnInfo", req, cb);
    }
    /**
     * 设备服务商请求空发产品订单的TID信息
     */
    async DeliverTids(req, cb) {
        return this.request("DeliverTids", req, cb);
    }
    /**
     * 安全芯片TID烧录回执
     */
    async BurnTidNotify(req, cb) {
        return this.request("BurnTidNotify", req, cb);
    }
    /**
     * 查询企业用户TID平台控制台权限
     */
    async DescribePermission(req, cb) {
        return this.request("DescribePermission", req, cb);
    }
    /**
     * 安全芯片为载体的TID空发回执，绑定TID与订单号。
     */
    async DeliverTidNotify(req, cb) {
        return this.request("DeliverTidNotify", req, cb);
    }
    /**
     * 下载芯片订单的TID
     */
    async DownloadTids(req, cb) {
        return this.request("DownloadTids", req, cb);
    }
    /**
     * 查询指定订单的可空发的白盒密钥数量
     */
    async DescribeAvailableLibCount(req, cb) {
        return this.request("DescribeAvailableLibCount", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249136, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.iotvideo = void 0;
const v20191126_1 = require("./v20191126");
const v20201215_1 = require("./v20201215");
const v20211125_1 = require("./v20211125");
exports.iotvideo = {
    v20191126: v20191126_1.v20191126,
    v20201215: v20201215_1.v20201215,
    v20211125: v20211125_1.v20211125,
};

}, function(modId) { var map = {"./v20191126":1738984249137,"./v20201215":1738984249140,"./v20211125":1738984249143}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249137, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20191126 = void 0;
const Models = require("./iotvideo_models");
const iotvideo_client_1 = require("./iotvideo_client");
exports.v20191126 = {
    Client: iotvideo_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./iotvideo_models":1738984249138,"./iotvideo_client":1738984249139}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249138, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249139, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * iotvideo client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("iotvideo.tencentcloudapi.com", "2019-11-26", clientConfig);
    }
    /**
     * 本接口（DescribeOtaVersions）用于查询固件版本信息列表。
     */
    async DescribeOtaVersions(req, cb) {
        return this.request("DescribeOtaVersions", req, cb);
    }
    /**
     * 本接口（DisableOtaVersion）用于禁用固件版本。
     */
    async DisableOtaVersion(req, cb) {
        return this.request("DisableOtaVersion", req, cb);
    }
    /**
     * 设备申请cos上传证书
     */
    async CreateUploadTest(req, cb) {
        return this.request("CreateUploadTest", req, cb);
    }
    /**
     * 清除设备激活码
     */
    async ClearDeviceActiveCode(req, cb) {
        return this.request("ClearDeviceActiveCode", req, cb);
    }
    /**
     * 本接口（DescribeIotDataType）用于查询自定义的物模型数据类型。
     */
    async DescribeIotDataType(req, cb) {
        return this.request("DescribeIotDataType", req, cb);
    }
    /**
     * 本接口（DisableDevice）用于禁用设备，可进行批量操作，每次操作最多100台设备。
     */
    async DisableDevice(req, cb) {
        return this.request("DisableDevice", req, cb);
    }
    /**
     * 本接口（DeleteTraceIds）用于将设备从日志跟踪白名单中删除，该接口可批量操作，最多支持同时操作100台设备。
     */
    async DeleteTraceIds(req, cb) {
        return this.request("DeleteTraceIds", req, cb);
    }
    /**
     * 本接口（RunOtaVersion）用于固件版本正式发布。
     */
    async RunOtaVersion(req, cb) {
        return this.request("RunOtaVersion", req, cb);
    }
    /**
     * 本接口（DescribeDevice）获取设备信息。
     */
    async DescribeDevice(req, cb) {
        return this.request("DescribeDevice", req, cb);
    }
    /**
     * 本接口（RunTestOtaVersion）用于固件版本测试发布。
     */
    async RunTestOtaVersion(req, cb) {
        return this.request("RunTestOtaVersion", req, cb);
    }
    /**
     * 本接口（DescribeProduct）用于获取单个产品的详细信息。
     */
    async DescribeProduct(req, cb) {
        return this.request("DescribeProduct", req, cb);
    }
    /**
     * 本接口（SendOnlineMsg）用于向设备发送在线消息。
注意：
若设备当前不在线,会直接返回错误;
若设备网络出现异常时,消息发送可能超时,超时等待最长时间为3秒.waitresp非0情况下,会导致本接口阻塞3秒。
     */
    async SendOnlineMsg(req, cb) {
        return this.request("SendOnlineMsg", req, cb);
    }
    /**
     * 本接口（RunIotModel）用于对定义的物模型进行发布。
     */
    async RunIotModel(req, cb) {
        return this.request("RunIotModel", req, cb);
    }
    /**
     * 修改设备信息
     */
    async ModifyDevice(req, cb) {
        return this.request("ModifyDevice", req, cb);
    }
    /**
     * 本接口（CreateIotDataType）用于创建自定义物模型数据类型。
     */
    async CreateIotDataType(req, cb) {
        return this.request("CreateIotDataType", req, cb);
    }
    /**
     * 创建匿名访问Token
     */
    async CreateAnonymousAccessToken(req, cb) {
        return this.request("CreateAnonymousAccessToken", req, cb);
    }
    /**
     * 本接口（CreateDevices）用于批量创建新的物联网视频通信设备。
注意：腾讯云不会对设备私钥进行保存，请自行保管好您的设备私钥。
     */
    async CreateDevices(req, cb) {
        return this.request("CreateDevices", req, cb);
    }
    /**
     * 本接口（CreateProduct）用于创建一个新的物联网智能视频产品。
     */
    async CreateProduct(req, cb) {
        return this.request("CreateProduct", req, cb);
    }
    /**
     * 本接口（CreateIotModel）用于定义的物模型提交。
该接口实现了物模型草稿箱的功能，保存用户最后一次编辑的物模型数据。
     */
    async CreateIotModel(req, cb) {
        return this.request("CreateIotModel", req, cb);
    }
    /**
     * 本接口（DeleteIotDataType）用于删除自定义物模型数据类型。
     */
    async DeleteIotDataType(req, cb) {
        return this.request("DeleteIotDataType", req, cb);
    }
    /**
     * 本接口（DescribeMessageQueue）用于查询物联网智能视频产品转发消息配置。
     */
    async DescribeMessageQueue(req, cb) {
        return this.request("DescribeMessageQueue", req, cb);
    }
    /**
     * 本接口（DescribeIotModel）用于获取物模型定义详情。
     */
    async DescribeIotModel(req, cb) {
        return this.request("DescribeIotModel", req, cb);
    }
    /**
     * 本接口（ModifyDeviceAction）用于修改设备物模型的行为（Action）。

可对ctlVal数据属性进行写入,如:Action.takePhoto.ctlVal,设备在线且成功发送到设备才返回,物模型写入数据时,不需要传入时标信息,平台以当前时标作为数据的时标更新物模型中的时标信息。
注意:
  1.若设备当前不在线,会直接返回错误
  2.若设备网络出现异常时,消息发送可能超时,超时等待最长时间为3秒
  3.value的内容必须与实际物模型的定义一致
     */
    async ModifyDeviceAction(req, cb) {
        return this.request("ModifyDeviceAction", req, cb);
    }
    /**
     * 本接口（DescribeProducts）用于列出用户账号下的物联网智能视频产品列表。
     */
    async DescribeProducts(req, cb) {
        return this.request("DescribeProducts", req, cb);
    }
    /**
     * 本接口（CreateTraceIds）用于将设备加到日志跟踪白名单。
     */
    async CreateTraceIds(req, cb) {
        return this.request("CreateTraceIds", req, cb);
    }
    /**
     * 本接口（DescribeBindUsr）用于查询设备被分享的所有用户列表。
     */
    async DescribeBindUsr(req, cb) {
        return this.request("DescribeBindUsr", req, cb);
    }
    /**
     * 本接口（CreateAppUsr）用于接收由厂商云发送过来的注册请求,建立厂商云终端用户与IoT Video终端用户的映射关系。
     */
    async CreateAppUsr(req, cb) {
        return this.request("CreateAppUsr", req, cb);
    }
    /**
     * 本接口（CreateBinding）用于终端用户和设备进行绑定，具体的应用场景如下：
    终端用户与设备具有“强关联”关系。用户与设备绑定之后，用户终端即具备了该设备的访问权限,访问或操作设备时，无需获取设备访问Token。
     */
    async CreateBinding(req, cb) {
        return this.request("CreateBinding", req, cb);
    }
    /**
     * 本接口（CreateDevToken）用于以下场景：
终端用户与设备没有强绑定关联关系;
允许终端用户短时或一次性临时访问设备;
当终端用户与设备有强绑定关系时，可以不用调用此接口
     */
    async CreateDevToken(req, cb) {
        return this.request("CreateDevToken", req, cb);
    }
    /**
     * 本接口（DeleteDevice）用于删除设备，可进行批量操作，每次操作最多100台设备。
     */
    async DeleteDevice(req, cb) {
        return this.request("DeleteDevice", req, cb);
    }
    /**
     * 本接口（DeleteAppUsr）用于删除终端用户。
     */
    async DeleteAppUsr(req, cb) {
        return this.request("DeleteAppUsr", req, cb);
    }
    /**
     * 客户可通过本接口获取充值记录信息, 一次最多返回50条记录。
     */
    async DescribeRechargeRecords(req, cb) {
        return this.request("DescribeRechargeRecords", req, cb);
    }
    /**
     * 本接口（ModifyProduct）用于编辑物联网智能视频产品的相关信息。
     */
    async ModifyProduct(req, cb) {
        return this.request("ModifyProduct", req, cb);
    }
    /**
     * 本接口（DescribeLogs）用于查询设备日志列表。
设备日志最长保留时长为15天,超期自动清除。
     */
    async DescribeLogs(req, cb) {
        return this.request("DescribeLogs", req, cb);
    }
    /**
     * 本接口（RefundStorageService）用于退订已购买的云存服务。
退订时，云存服务对应订单的处理方式 :
1. 未开始的订单自动回到已付费订单池
2. 已开始的订单自动失效
3. 购买云存接口,优先从已付费订单池中分配订单
     */
    async RefundStorageService(req, cb) {
        return this.request("RefundStorageService", req, cb);
    }
    /**
     * 购买云存服务
     */
    async CreateStorageService(req, cb) {
        return this.request("CreateStorageService", req, cb);
    }
    /**
     * 本接口（SetMessageQueue）用于配置物联网智能视频产品的转发消息队列。
     */
    async SetMessageQueue(req, cb) {
        return this.request("SetMessageQueue", req, cb);
    }
    /**
     * 客户可通过本接口获取账户余额信息, 默认接口请求频率限制：1次/秒
     */
    async DescribeAccountBalance(req, cb) {
        return this.request("DescribeAccountBalance", req, cb);
    }
    /**
     * 本接口（DeleteProduct）用于删除一个物联网智能视频产品。
     */
    async DeleteProduct(req, cb) {
        return this.request("DeleteProduct", req, cb);
    }
    /**
     * 查看操作系统支持的芯片列表
     */
    async DescribeOsList(req, cb) {
        return this.request("DescribeOsList", req, cb);
    }
    /**
     * 本接口（DescribeIotModels）用于列出物模型历史版本列表。
     */
    async DescribeIotModels(req, cb) {
        return this.request("DescribeIotModels", req, cb);
    }
    /**
     * 本接口（DeleteOtaVersion）用于删除固件版本信息。
     */
    async DeleteOtaVersion(req, cb) {
        return this.request("DeleteOtaVersion", req, cb);
    }
    /**
     * 将已购买的云存服务转移到另一设备
     */
    async DeliverStorageService(req, cb) {
        return this.request("DeliverStorageService", req, cb);
    }
    /**
     * 本接口（DescribeTraceStatus）用于查询指定设备是否在白名单中。
     */
    async DescribeTraceStatus(req, cb) {
        return this.request("DescribeTraceStatus", req, cb);
    }
    /**
     * 请求设备直播流地址
     */
    async DescribeStream(req, cb) {
        return this.request("DescribeStream", req, cb);
    }
    /**
     * 本接口（DescribeRegistrationStatus）用于查询终端用户的注册状态。
     */
    async DescribeRegistrationStatus(req, cb) {
        return this.request("DescribeRegistrationStatus", req, cb);
    }
    /**
     * 本接口（DescribeRunLog）用于获取设备运行日志。
     */
    async DescribeRunLog(req, cb) {
        return this.request("DescribeRunLog", req, cb);
    }
    /**
     * 本接口（DescribeBindDev）用于查询终端用户绑定的设备列表。
     */
    async DescribeBindDev(req, cb) {
        return this.request("DescribeBindDev", req, cb);
    }
    /**
     * 查询云存服务
     */
    async DescribeStorageService(req, cb) {
        return this.request("DescribeStorageService", req, cb);
    }
    /**
     * 本接口（DisableDeviceStream）用于停止设备推流，可进行批量操作，每次操作最多100台设备。
     */
    async DisableDeviceStream(req, cb) {
        return this.request("DisableDeviceStream", req, cb);
    }
    /**
     * 本接口（CreateUploadPath）用于获取固件上传路径。
     */
    async CreateUploadPath(req, cb) {
        return this.request("CreateUploadPath", req, cb);
    }
    /**
     * 本接口（DescribeModelDataRet）用于根据TaskId获取对设备物模型操作最终响应的结果。
     */
    async DescribeModelDataRet(req, cb) {
        return this.request("DescribeModelDataRet", req, cb);
    }
    /**
     * 本接口（DescribePubVersions）用于获取某一产品发布过的全部固件版本。
     */
    async DescribePubVersions(req, cb) {
        return this.request("DescribePubVersions", req, cb);
    }
    /**
     * 本接口（RunDeviceStream）用于开启设备推流，可进行批量操作，每次操作最多100台设备。
     */
    async RunDeviceStream(req, cb) {
        return this.request("RunDeviceStream", req, cb);
    }
    /**
     * 设备刷新cos上传证书
     */
    async RenewUploadTest(req, cb) {
        return this.request("RenewUploadTest", req, cb);
    }
    /**
     * 编辑版本描述信息
     */
    async ModifyVerContent(req, cb) {
        return this.request("ModifyVerContent", req, cb);
    }
    /**
     * 本接口（DescribeDevices）用于获取设备信息列表。
     */
    async DescribeDevices(req, cb) {
        return this.request("DescribeDevices", req, cb);
    }
    /**
     * 本接口（CreateGencode）用于生成设备物模型源代码
     */
    async CreateGencode(req, cb) {
        return this.request("CreateGencode", req, cb);
    }
    /**
     * 本接口（DescribeDeviceModel）用于获取设备物模型。
     */
    async DescribeDeviceModel(req, cb) {
        return this.request("DescribeDeviceModel", req, cb);
    }
    /**
     * 本接口（DeleteBinding）用于终端用户和设备进行解绑定。
     */
    async DeleteBinding(req, cb) {
        return this.request("DeleteBinding", req, cb);
    }
    /**
     * 该接口已经停止维护，请勿使用
     */
    async CreateStorage(req, cb) {
        return this.request("CreateStorage", req, cb);
    }
    /**
     * 本接口（DescribeTraceIds）用于查询设备日志跟踪白名单。
     */
    async DescribeTraceIds(req, cb) {
        return this.request("DescribeTraceIds", req, cb);
    }
    /**
     * 本接口（DeleteMessageQueue）用于删除物联网智能视频产品的转发消息配置信息。
     */
    async DeleteMessageQueue(req, cb) {
        return this.request("DeleteMessageQueue", req, cb);
    }
    /**
     * 本接口（ModifyDeviceProperty）用于修改设备物模型的属性（ProWritable）。
可对setVal数据属性进行写入,如:
ProWritable.Pos.setVal
对于嵌套类型的可写属性，可以仅对其部分数据内容进行写入，如:
ProWritable.Pos.setVal.x;
可写属性云端写入成功即返回;云端向设备端发布属性变更参数;若当前设备不在线,在设备下次上线时会自动更新这些属性参数;
物模型写入数据时,不需要传入时标信息,平台以当前时标作为数据的时标更新物模型中的时标信息。
     */
    async ModifyDeviceProperty(req, cb) {
        return this.request("ModifyDeviceProperty", req, cb);
    }
    /**
     * 本接口（RunDevice）用于启用设备，可进行批量操作，每次操作最多100台设备。
     */
    async RunDevice(req, cb) {
        return this.request("RunDevice", req, cb);
    }
    /**
     * 本接口（UploadOtaVersion）接收上传到控制台的固件版本信息。
     */
    async UploadOtaVersion(req, cb) {
        return this.request("UploadOtaVersion", req, cb);
    }
    /**
     * 本接口（UpgradeDevice）用于对设备进行固件升级。
该接口向指定的设备下发固件更新指令,可将固件升级到任意版本(可实现固件降级)。
警告:使能UpgradeNow参数存在一定的风险性！建议仅在debug场景下使用!
     */
    async UpgradeDevice(req, cb) {
        return this.request("UpgradeDevice", req, cb);
    }
    /**
     * 本接口（CreateUsrToken）用于终端用户获取IoT Video平台的accessToken，初始化SDK,连接到IoT Video接入服务器。
     */
    async CreateUsrToken(req, cb) {
        return this.request("CreateUsrToken", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249140, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201215 = void 0;
const Models = require("./iotvideo_models");
const iotvideo_client_1 = require("./iotvideo_client");
exports.v20201215 = {
    Client: iotvideo_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./iotvideo_models":1738984249141,"./iotvideo_client":1738984249142}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249141, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249142, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * iotvideo client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("iotvideo.tencentcloudapi.com", "2020-12-15", clientConfig);
    }
    /**
     * 获取产品列表
     */
    async DescribeProducts(req, cb) {
        return this.request("DescribeProducts", req, cb);
    }
    /**
     * 获取设备在指定时间范围内的通讯日志
     */
    async DescribeDeviceCommLog(req, cb) {
        return this.request("DescribeDeviceCommLog", req, cb);
    }
    /**
     * 判断是否开启转发的权限
     */
    async CheckForwardAuth(req, cb) {
        return this.request("CheckForwardAuth", req, cb);
    }
    /**
     * 获取设备属性数据
     */
    async DescribeDeviceData(req, cb) {
        return this.request("DescribeDeviceData", req, cb);
    }
    /**
     * 获取设备sdk日志
     */
    async DescribeSDKLog(req, cb) {
        return this.request("DescribeSDKLog", req, cb);
    }
    /**
     * 修改产品信息
     */
    async ModifyProduct(req, cb) {
        return this.request("ModifyProduct", req, cb);
    }
    /**
     * 转移云存服务
     */
    async TransferCloudStorage(req, cb) {
        return this.request("TransferCloudStorage", req, cb);
    }
    /**
     * 更新设备日志级别
     */
    async ModifyDeviceLogLevel(req, cb) {
        return this.request("ModifyDeviceLogLevel", req, cb);
    }
    /**
     * 发起AI推理请求
     */
    async CreateAIDetection(req, cb) {
        return this.request("CreateAIDetection", req, cb);
    }
    /**
     * 本接口（DescribeFirmware）用于查询固件信息
     */
    async DescribeFirmware(req, cb) {
        return this.request("DescribeFirmware", req, cb);
    }
    /**
     * 获取具有云存的日期
     */
    async DescribeCloudStorageDate(req, cb) {
        return this.request("DescribeCloudStorageDate", req, cb);
    }
    /**
     * 本接口用于重试设备升级任务
     */
    async RetryDeviceFirmwareTask(req, cb) {
        return this.request("RetryDeviceFirmwareTask", req, cb);
    }
    /**
     * 拉取AI模型列表
     */
    async DescribeAIModels(req, cb) {
        return this.request("DescribeAIModels", req, cb);
    }
    /**
     * 本接口（UploadFirmware）用于上传设备固件信息
     */
    async UploadFirmware(req, cb) {
        return this.request("UploadFirmware", req, cb);
    }
    /**
     * 用户AI模型申请记录
     */
    async DescribeAIModelApplications(req, cb) {
        return this.request("DescribeAIModelApplications", req, cb);
    }
    /**
     * 获取产品详情
     */
    async DescribeProduct(req, cb) {
        return this.request("DescribeProduct", req, cb);
    }
    /**
     * 查看AI模型资源包
     */
    async DescribeAIModelUsage(req, cb) {
        return this.request("DescribeAIModelUsage", req, cb);
    }
    /**
     * 获取批次详情
     */
    async DescribeBatch(req, cb) {
        return this.request("DescribeBatch", req, cb);
    }
    /**
     * 修改设备信息
     */
    async ModifyDevice(req, cb) {
        return this.request("ModifyDevice", req, cb);
    }
    /**
     * 拉取云存用户列表
     */
    async DescribeCloudStorageUsers(req, cb) {
        return this.request("DescribeCloudStorageUsers", req, cb);
    }
    /**
     * 取消AI模型申请
     */
    async CancelAIModelApplication(req, cb) {
        return this.request("CancelAIModelApplication", req, cb);
    }
    /**
     * 修改数据转发
     */
    async ModifyDataForward(req, cb) {
        return this.request("ModifyDataForward", req, cb);
    }
    /**
     * 获取设备云存服务详情
     */
    async DescribeCloudStorage(req, cb) {
        return this.request("DescribeCloudStorage", req, cb);
    }
    /**
     * 获取批次列表
     */
    async DescribeBatchs(req, cb) {
        return this.request("DescribeBatchs", req, cb);
    }
    /**
     * 本接口（BatchUpdateFirmware）用于批量更新设备固件
     */
    async BatchUpdateFirmware(req, cb) {
        return this.request("BatchUpdateFirmware", req, cb);
    }
    /**
     * 创建产品
     */
    async CreateProduct(req, cb) {
        return this.request("CreateProduct", req, cb);
    }
    /**
     * 为用户提供获取动作历史的能力。
     */
    async DescribeDeviceActionHistory(req, cb) {
        return this.request("DescribeDeviceActionHistory", req, cb);
    }
    /**
     * 更新AI推理结果推送配置
     */
    async UpdateAIModelChannel(req, cb) {
        return this.request("UpdateAIModelChannel", req, cb);
    }
    /**
     * 创建COS上传密钥
     */
    async CreateCOSCredentials(req, cb) {
        return this.request("CreateCOSCredentials", req, cb);
    }
    /**
     * 查询产品配置的数据模板信息
     */
    async DescribeModelDefinition(req, cb) {
        return this.request("DescribeModelDefinition", req, cb);
    }
    /**
     * 删除转发规则
     */
    async DeleteForwardRule(req, cb) {
        return this.request("DeleteForwardRule", req, cb);
    }
    /**
     * 继承云存用户
     */
    async InheritCloudStorageUser(req, cb) {
        return this.request("InheritCloudStorageUser", req, cb);
    }
    /**
     * 创建批次
     */
    async CreateBatch(req, cb) {
        return this.request("CreateBatch", req, cb);
    }
    /**
     * 本接口用于查询固件升级任务统计信息
     */
    async DescribeFirmwareTaskStatistics(req, cb) {
        return this.request("DescribeFirmwareTaskStatistics", req, cb);
    }
    /**
     * 修改产品动态注册
     */
    async ModifyProductDynamicRegister(req, cb) {
        return this.request("ModifyProductDynamicRegister", req, cb);
    }
    /**
     * 获取设备在指定时间范围内上报的历史数据。
     */
    async DescribeDeviceDataHistory(req, cb) {
        return this.request("DescribeDeviceDataHistory", req, cb);
    }
    /**
     * 本接口用于查询固件升级任务列表
     */
    async DescribeFirmwareTasks(req, cb) {
        return this.request("DescribeFirmwareTasks", req, cb);
    }
    /**
     * 本接口（GetFirmwareURL）用于获取固件存储的URL
     */
    async GetFirmwareURL(req, cb) {
        return this.request("GetFirmwareURL", req, cb);
    }
    /**
     * 修改转发规则
     */
    async ModifyForwardRule(req, cb) {
        return this.request("ModifyForwardRule", req, cb);
    }
    /**
     * 删除设备
     */
    async DeleteDevice(req, cb) {
        return this.request("DeleteDevice", req, cb);
    }
    /**
     * 开通云存服务
     */
    async CreateCloudStorage(req, cb) {
        return this.request("CreateCloudStorage", req, cb);
    }
    /**
     * 获取视频防盗链播放URL
     */
    async GenerateSignedVideoURL(req, cb) {
        return this.request("GenerateSignedVideoURL", req, cb);
    }
    /**
     * 设置转发权限
     */
    async SetForwardAuth(req, cb) {
        return this.request("SetForwardAuth", req, cb);
    }
    /**
     * 本接口（ListFirmwares）用于获取固件列表
     */
    async ListFirmwares(req, cb) {
        return this.request("ListFirmwares", req, cb);
    }
    /**
     * 本接口用于编辑固件信息
     */
    async EditFirmware(req, cb) {
        return this.request("EditFirmware", req, cb);
    }
    /**
     * 获取Category详情
     */
    async DescribeCategory(req, cb) {
        return this.request("DescribeCategory", req, cb);
    }
    /**
     * 本接口（PublishMessage）用于使用自定义透传协议进行设备远控
     */
    async PublishMessage(req, cb) {
        return this.request("PublishMessage", req, cb);
    }
    /**
     * 本接口用于查询固件升级任务状态分布
     */
    async DescribeFirmwareTaskDistribution(req, cb) {
        return this.request("DescribeFirmwareTaskDistribution", req, cb);
    }
    /**
     * 删除产品
     */
    async DeleteProduct(req, cb) {
        return this.request("DeleteProduct", req, cb);
    }
    /**
     * 获取产品动态注册详情
     */
    async DescribeProductDynamicRegister(req, cb) {
        return this.request("DescribeProductDynamicRegister", req, cb);
    }
    /**
     * 获取设备的历史事件
     */
    async DescribeDeviceEventHistory(req, cb) {
        return this.request("DescribeDeviceEventHistory", req, cb);
    }
    /**
     * 设置数据转发状态
     */
    async ModifyDataForwardStatus(req, cb) {
        return this.request("ModifyDataForwardStatus", req, cb);
    }
    /**
     * 本接口（CreateTaskFileUrl）用于获取产品级任务文件上传链接
     */
    async CreateTaskFileUrl(req, cb) {
        return this.request("CreateTaskFileUrl", req, cb);
    }
    /**
     * 此接口查询固件升级任务详情
     */
    async DescribeFirmwareTask(req, cb) {
        return this.request("DescribeFirmwareTask", req, cb);
    }
    /**
     * 导入其它产品的数据模板，覆盖现有数据模板的物模型和产品分类信息
     */
    async ImportModelDefinition(req, cb) {
        return this.request("ImportModelDefinition", req, cb);
    }
    /**
     * 上报活跃设备
     */
    async ReportAliveDevice(req, cb) {
        return this.request("ReportAliveDevice", req, cb);
    }
    /**
     * 重置云存服务
     */
    async ResetCloudStorage(req, cb) {
        return this.request("ResetCloudStorage", req, cb);
    }
    /**
     * 获取设备上下线日志
     */
    async DescribeDeviceStatusLog(req, cb) {
        return this.request("DescribeDeviceStatusLog", req, cb);
    }
    /**
     * 拉取云存事件列表
     */
    async DescribeCloudStorageEvents(req, cb) {
        return this.request("DescribeCloudStorageEvents", req, cb);
    }
    /**
     * 创建数据转发
     */
    async CreateDataForward(req, cb) {
        return this.request("CreateDataForward", req, cb);
    }
    /**
     * 本接口用于查询固件升级任务的设备列表
     */
    async DescribeFirmwareTaskDevices(req, cb) {
        return this.request("DescribeFirmwareTaskDevices", req, cb);
    }
    /**
     * 本接口用于取消设备升级任务
     */
    async CancelDeviceFirmwareTask(req, cb) {
        return this.request("CancelDeviceFirmwareTask", req, cb);
    }
    /**
     * 查看AI推理结果推送配置
     */
    async DescribeAIModelChannel(req, cb) {
        return this.request("DescribeAIModelChannel", req, cb);
    }
    /**
     * 获取数据转发列表
     */
    async DescribeDataForwardList(req, cb) {
        return this.request("DescribeDataForwardList", req, cb);
    }
    /**
     * 获取某一天云存时间轴
     */
    async DescribeCloudStorageTime(req, cb) {
        return this.request("DescribeCloudStorageTime", req, cb);
    }
    /**
     * 获取产品转发规则
     */
    async DescribeForwardRule(req, cb) {
        return this.request("DescribeForwardRule", req, cb);
    }
    /**
     * 创建转发规则
     */
    async CreateForwardRule(req, cb) {
        return this.request("CreateForwardRule", req, cb);
    }
    /**
     * 本接口（GetAllFirmwareVersion）用于获取所有的版本列表
     */
    async GetAllFirmwareVersion(req, cb) {
        return this.request("GetAllFirmwareVersion", req, cb);
    }
    /**
     * 提供修改产品的数据模板的能力
     */
    async ModifyModelDefinition(req, cb) {
        return this.request("ModifyModelDefinition", req, cb);
    }
    /**
     * 申请AI模型
     */
    async ApplyAIModel(req, cb) {
        return this.request("ApplyAIModel", req, cb);
    }
    /**
     * 绑定云存用户
     */
    async BindCloudStorageUser(req, cb) {
        return this.request("BindCloudStorageUser", req, cb);
    }
    /**
     * 获取设备列表
     */
    async DescribeDevices(req, cb) {
        return this.request("DescribeDevices", req, cb);
    }
    /**
     * 本接口（DeleteFirmware）用于删除固件
     */
    async DeleteFirmware(req, cb) {
        return this.request("DeleteFirmware", req, cb);
    }
    /**
     * 查看设备详情
     */
    async DescribeDevice(req, cb) {
        return this.request("DescribeDevice", req, cb);
    }
    /**
     * 拉取账户流水
     */
    async DescribeBalanceTransactions(req, cb) {
        return this.request("DescribeBalanceTransactions", req, cb);
    }
    /**
     * 根据设备产品ID、设备名称，设置控制设备的属性数据。
     */
    async ControlDeviceData(req, cb) {
        return this.request("ControlDeviceData", req, cb);
    }
    /**
     * 拉取云存事件缩略图
     */
    async DescribeCloudStorageThumbnail(req, cb) {
        return this.request("DescribeCloudStorageThumbnail", req, cb);
    }
    /**
     * 查询账户余额
     */
    async DescribeBalance(req, cb) {
        return this.request("DescribeBalance", req, cb);
    }
    /**
     * 设备唤醒
     */
    async WakeUpDevice(req, cb) {
        return this.request("WakeUpDevice", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249143, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20211125 = void 0;
const Models = require("./iotvideo_models");
const iotvideo_client_1 = require("./iotvideo_client");
exports.v20211125 = {
    Client: iotvideo_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./iotvideo_models":1738984249144,"./iotvideo_client":1738984249145}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249144, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249145, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * iotvideo client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("iotvideo.tencentcloudapi.com", "2021-11-25", clientConfig);
    }
    /**
     * 呼叫TRTC设备
     */
    async CallTRTCDevice(req, cb) {
        return this.request("CallTRTCDevice", req, cb);
    }
    /**
     * 根据设备信息拉取有效套餐列表
     */
    async DescribeDevicePackages(req, cb) {
        return this.request("DescribeDevicePackages", req, cb);
    }
    /**
     * 发起AI推理请求
     */
    async CreateAIDetection(req, cb) {
        return this.request("CreateAIDetection", req, cb);
    }
    /**
     * 拉取AI模型列表
     */
    async DescribeAIModels(req, cb) {
        return this.request("DescribeAIModels", req, cb);
    }
    /**
     * 用户AI模型申请记录
     */
    async DescribeAIModelApplications(req, cb) {
        return this.request("DescribeAIModelApplications", req, cb);
    }
    /**
     * 获取产品详情
     */
    async DescribeProduct(req, cb) {
        return this.request("DescribeProduct", req, cb);
    }
    /**
     * 本接口（GetAllFirmwareVersion）用于获取所有的版本列表
     */
    async GetAllFirmwareVersion(req, cb) {
        return this.request("GetAllFirmwareVersion", req, cb);
    }
    /**
     * 获取产品列表
     */
    async DescribeProducts(req, cb) {
        return this.request("DescribeProducts", req, cb);
    }
    /**
     * 获取video消费版用户信息
     */
    async DescribeUser(req, cb) {
        return this.request("DescribeUser", req, cb);
    }
    /**
     * 本接口用于查询固件升级任务统计信息
     */
    async DescribeFirmwareTaskStatistics(req, cb) {
        return this.request("DescribeFirmwareTaskStatistics", req, cb);
    }
    /**
     * 更新设备日志级别
     */
    async ModifyDeviceLogLevel(req, cb) {
        return this.request("ModifyDeviceLogLevel", req, cb);
    }
    /**
     * 同步调用设备行为
     */
    async CallDeviceActionSync(req, cb) {
        return this.request("CallDeviceActionSync", req, cb);
    }
    /**
     * 更新推送通道
     */
    async ModifyPushChannel(req, cb) {
        return this.request("ModifyPushChannel", req, cb);
    }
    /**
     * 获取视频防盗链播放URL
     */
    async GenerateSignedVideoURL(req, cb) {
        return this.request("GenerateSignedVideoURL", req, cb);
    }
    /**
     * 本接口用于编辑固件信息
     */
    async EditFirmware(req, cb) {
        return this.request("EditFirmware", req, cb);
    }
    /**
     * 本接口（PublishMessage）用于使用自定义透传协议进行设备远控
     */
    async PublishMessage(req, cb) {
        return this.request("PublishMessage", req, cb);
    }
    /**
     * 获取设备的历史事件
     */
    async DescribeDeviceEventHistory(req, cb) {
        return this.request("DescribeDeviceEventHistory", req, cb);
    }
    /**
     * 导入其它产品的数据模板，覆盖现有数据模板的物模型和产品分类信息
     */
    async ImportModelDefinition(req, cb) {
        return this.request("ImportModelDefinition", req, cb);
    }
    /**
     * 批量拉取云存事件缩略图
     */
    async DescribeCloudStorageThumbnailList(req, cb) {
        return this.request("DescribeCloudStorageThumbnailList", req, cb);
    }
    /**
     * 本接口用于取消设备升级任务
     */
    async CancelDeviceFirmwareTask(req, cb) {
        return this.request("CancelDeviceFirmwareTask", req, cb);
    }
    /**
     * 上报活跃设备
     */
    async ReportAliveDevice(req, cb) {
        return this.request("ReportAliveDevice", req, cb);
    }
    /**
     * 获取产品转发规则
     */
    async DescribeForwardRule(req, cb) {
        return this.request("DescribeForwardRule", req, cb);
    }
    /**
     * 查询套餐消耗记录列表
     */
    async DescribePackageConsumeTasks(req, cb) {
        return this.request("DescribePackageConsumeTasks", req, cb);
    }
    /**
     * 获取消费版账号信息
     */
    async DescribeAccount(req, cb) {
        return this.request("DescribeAccount", req, cb);
    }
    /**
     * 获取云存套餐包消耗统计
     */
    async DescribeCloudStoragePackageConsumeStats(req, cb) {
        return this.request("DescribeCloudStoragePackageConsumeStats", req, cb);
    }
    /**
     * 本接口用于查询固件升级任务列表
     */
    async DescribeFirmwareTasks(req, cb) {
        return this.request("DescribeFirmwareTasks", req, cb);
    }
    /**
     * 根据设备产品ID、设备名称，设置控制设备的属性数据。
     */
    async ControlDeviceData(req, cb) {
        return this.request("ControlDeviceData", req, cb);
    }
    /**
     * 获取设备在指定时间范围内的通讯日志
     */
    async DescribeDeviceCommLog(req, cb) {
        return this.request("DescribeDeviceCommLog", req, cb);
    }
    /**
     * 本接口（DescribeFirmware）用于查询固件信息
     */
    async DescribeFirmware(req, cb) {
        return this.request("DescribeFirmware", req, cb);
    }
    /**
     * 获取具有云存的日期
     */
    async DescribeCloudStorageDate(req, cb) {
        return this.request("DescribeCloudStorageDate", req, cb);
    }
    /**
     * 查询云存卡套餐信息
     */
    async DescribeFreeCloudStorageNum(req, cb) {
        return this.request("DescribeFreeCloudStorageNum", req, cb);
    }
    /**
     * 设置转发权限
     */
    async SetForwardAuth(req, cb) {
        return this.request("SetForwardAuth", req, cb);
    }
    /**
     * 拉取云存用户列表
     */
    async DescribeCloudStorageUsers(req, cb) {
        return this.request("DescribeCloudStorageUsers", req, cb);
    }
    /**
     * 转移云存服务
     */
    async TransferCloudStorage(req, cb) {
        return this.request("TransferCloudStorage", req, cb);
    }
    /**
     * 本接口用于重试设备升级任务
     */
    async RetryDeviceFirmwareTask(req, cb) {
        return this.request("RetryDeviceFirmwareTask", req, cb);
    }
    /**
     * 修改设备信息
     */
    async ModifyDevice(req, cb) {
        return this.request("ModifyDevice", req, cb);
    }
    /**
     * 修改数据转发
     */
    async ModifyDataForward(req, cb) {
        return this.request("ModifyDataForward", req, cb);
    }
    /**
     * 本接口（BatchUpdateFirmware）用于批量更新设备固件
     */
    async BatchUpdateFirmware(req, cb) {
        return this.request("BatchUpdateFirmware", req, cb);
    }
    /**
     * 创建产品
     */
    async CreateProduct(req, cb) {
        return this.request("CreateProduct", req, cb);
    }
    /**
     * 继承云存用户
     */
    async InheritCloudStorageUser(req, cb) {
        return this.request("InheritCloudStorageUser", req, cb);
    }
    /**
     * 本接口（GetFirmwareURL）用于获取固件存储的URL
     */
    async GetFirmwareURL(req, cb) {
        return this.request("GetFirmwareURL", req, cb);
    }
    /**
     * 获取批次详情
     */
    async DescribeBatch(req, cb) {
        return this.request("DescribeBatch", req, cb);
    }
    /**
     * 本接口（ListFirmwares）用于获取固件列表
     */
    async ListFirmwares(req, cb) {
        return this.request("ListFirmwares", req, cb);
    }
    /**
     * 获取Category详情
     */
    async DescribeCategory(req, cb) {
        return this.request("DescribeCategory", req, cb);
    }
    /**
     * 删除产品
     */
    async DeleteProduct(req, cb) {
        return this.request("DeleteProduct", req, cb);
    }
    /**
     * 设置数据转发状态
     */
    async ModifyDataForwardStatus(req, cb) {
        return this.request("ModifyDataForwardStatus", req, cb);
    }
    /**
     * 此接口查询固件升级任务详情
     */
    async DescribeFirmwareTask(req, cb) {
        return this.request("DescribeFirmwareTask", req, cb);
    }
    /**
     * 重置云存服务
     */
    async ResetCloudStorage(req, cb) {
        return this.request("ResetCloudStorage", req, cb);
    }
    /**
     * 本接口用于查询固件升级任务的设备列表
     */
    async DescribeFirmwareTaskDevices(req, cb) {
        return this.request("DescribeFirmwareTaskDevices", req, cb);
    }
    /**
     * 获取数据转发列表
     */
    async DescribeDataForwardList(req, cb) {
        return this.request("DescribeDataForwardList", req, cb);
    }
    /**
     * 获取某一天云存时间轴
     */
    async DescribeCloudStorageTime(req, cb) {
        return this.request("DescribeCloudStorageTime", req, cb);
    }
    /**
     * 更新AI推理结果推送配置
     */
    async UpdateAIModelChannel(req, cb) {
        return this.request("UpdateAIModelChannel", req, cb);
    }
    /**
     * 拉取云存事件缩略图
     */
    async DescribeCloudStorageThumbnail(req, cb) {
        return this.request("DescribeCloudStorageThumbnail", req, cb);
    }
    /**
     * 拉取多个云存事件缩略图
     */
    async DescribeCloudStorageMultiThumbnail(req, cb) {
        return this.request("DescribeCloudStorageMultiThumbnail", req, cb);
    }
    /**
     * 本接口（DeleteFirmware）用于删除固件
     */
    async DeleteFirmware(req, cb) {
        return this.request("DeleteFirmware", req, cb);
    }
    /**
     * 异步调用设备行为
     */
    async CallDeviceActionAsync(req, cb) {
        return this.request("CallDeviceActionAsync", req, cb);
    }
    /**
     * 判断是否开启转发的权限
     */
    async CheckForwardAuth(req, cb) {
        return this.request("CheckForwardAuth", req, cb);
    }
    /**
     * 获取设备属性数据
     */
    async DescribeDeviceData(req, cb) {
        return this.request("DescribeDeviceData", req, cb);
    }
    /**
     * 修改产品信息
     */
    async ModifyProduct(req, cb) {
        return this.request("ModifyProduct", req, cb);
    }
    /**
     * 查看AI模型资源包
     */
    async DescribeAIModelUsage(req, cb) {
        return this.request("DescribeAIModelUsage", req, cb);
    }
    /**
     * 修改转发规则
     */
    async ModifyForwardRule(req, cb) {
        return this.request("ModifyForwardRule", req, cb);
    }
    /**
     * 取消AI模型申请
     */
    async CancelAIModelApplication(req, cb) {
        return this.request("CancelAIModelApplication", req, cb);
    }
    /**
     * 获取设备云存服务详情
     */
    async DescribeCloudStorage(req, cb) {
        return this.request("DescribeCloudStorage", req, cb);
    }
    /**
     * 获取批次列表
     */
    async DescribeBatchs(req, cb) {
        return this.request("DescribeBatchs", req, cb);
    }
    /**
     * 为用户提供获取动作历史的能力。
     */
    async DescribeDeviceActionHistory(req, cb) {
        return this.request("DescribeDeviceActionHistory", req, cb);
    }
    /**
     * 创建COS上传密钥
     */
    async CreateCOSCredentials(req, cb) {
        return this.request("CreateCOSCredentials", req, cb);
    }
    /**
     * 开通免费云存服务
     */
    async CreateFreeCloudStorage(req, cb) {
        return this.request("CreateFreeCloudStorage", req, cb);
    }
    /**
     * 创建批次
     */
    async CreateBatch(req, cb) {
        return this.request("CreateBatch", req, cb);
    }
    /**
     * 查看推送通道
     */
    async DescribePushChannel(req, cb) {
        return this.request("DescribePushChannel", req, cb);
    }
    /**
     * 开通云存服务
     */
    async CreateCloudStorage(req, cb) {
        return this.request("CreateCloudStorage", req, cb);
    }
    /**
     * 获取产品动态注册详情
     */
    async DescribeProductDynamicRegister(req, cb) {
        return this.request("DescribeProductDynamicRegister", req, cb);
    }
    /**
     * 查询设备数据统计
     */
    async DescribeDeviceDataStats(req, cb) {
        return this.request("DescribeDeviceDataStats", req, cb);
    }
    /**
     * 设备唤醒
     */
    async WakeUpDevice(req, cb) {
        return this.request("WakeUpDevice", req, cb);
    }
    /**
     * 获取设备上下线日志
     */
    async DescribeDeviceStatusLog(req, cb) {
        return this.request("DescribeDeviceStatusLog", req, cb);
    }
    /**
     * 创建转发规则
     */
    async CreateForwardRule(req, cb) {
        return this.request("CreateForwardRule", req, cb);
    }
    /**
     * 查看AI推理结果推送配置
     */
    async DescribeAIModelChannel(req, cb) {
        return this.request("DescribeAIModelChannel", req, cb);
    }
    /**
     * 查询账户余额
     */
    async DescribeBalance(req, cb) {
        return this.request("DescribeBalance", req, cb);
    }
    /**
     * 获取设备sdk日志
     */
    async DescribeSDKLog(req, cb) {
        return this.request("DescribeSDKLog", req, cb);
    }
    /**
     * 绑定云存用户
     */
    async BindCloudStorageUser(req, cb) {
        return this.request("BindCloudStorageUser", req, cb);
    }
    /**
     * 查看设备详情
     */
    async DescribeDevice(req, cb) {
        return this.request("DescribeDevice", req, cb);
    }
    /**
     * 查询设备消息数量统计
     */
    async DescribeMessageDataStats(req, cb) {
        return this.request("DescribeMessageDataStats", req, cb);
    }
    /**
     * 删除云存事件
     */
    async DeleteCloudStorageEvent(req, cb) {
        return this.request("DeleteCloudStorageEvent", req, cb);
    }
    /**
     * 创建设备通道
     */
    async CreateDeviceChannel(req, cb) {
        return this.request("CreateDeviceChannel", req, cb);
    }
    /**
     * 拉取设备p2p信息
     */
    async DescribeP2PInfo(req, cb) {
        return this.request("DescribeP2PInfo", req, cb);
    }
    /**
     * 查询云存服务详情
     */
    async DescribeCloudStorageOrder(req, cb) {
        return this.request("DescribeCloudStorageOrder", req, cb);
    }
    /**
     * 拉取账户流水
     */
    async DescribeBalanceTransactions(req, cb) {
        return this.request("DescribeBalanceTransactions", req, cb);
    }
    /**
     * 删除转发规则
     */
    async DeleteForwardRule(req, cb) {
        return this.request("DeleteForwardRule", req, cb);
    }
    /**
     * 修改产品动态注册
     */
    async ModifyProductDynamicRegister(req, cb) {
        return this.request("ModifyProductDynamicRegister", req, cb);
    }
    /**
     * 获取设备在指定时间范围内上报的历史数据。
     */
    async DescribeDeviceDataHistory(req, cb) {
        return this.request("DescribeDeviceDataHistory", req, cb);
    }
    /**
     * 删除设备
     */
    async DeleteDevice(req, cb) {
        return this.request("DeleteDevice", req, cb);
    }
    /**
     * 查询套餐消耗记录详情
     */
    async DescribePackageConsumeTask(req, cb) {
        return this.request("DescribePackageConsumeTask", req, cb);
    }
    /**
     * 重置云存事件
     */
    async ResetCloudStorageEvent(req, cb) {
        return this.request("ResetCloudStorageEvent", req, cb);
    }
    /**
     * 本接口用于查询固件升级任务状态分布
     */
    async DescribeFirmwareTaskDistribution(req, cb) {
        return this.request("DescribeFirmwareTaskDistribution", req, cb);
    }
    /**
     * 获取设备的绑定签名
     */
    async GenSingleDeviceSignatureOfPublic(req, cb) {
        return this.request("GenSingleDeviceSignatureOfPublic", req, cb);
    }
    /**
     * 本接口（CreateTaskFileUrl）用于获取产品级任务文件上传链接
     */
    async CreateTaskFileUrl(req, cb) {
        return this.request("CreateTaskFileUrl", req, cb);
    }
    /**
     * 获取设备图片流数据
     */
    async DescribeCloudStorageStreamData(req, cb) {
        return this.request("DescribeCloudStorageStreamData", req, cb);
    }
    /**
     * 本接口（UploadFirmware）用于上传设备固件信息
     */
    async UploadFirmware(req, cb) {
        return this.request("UploadFirmware", req, cb);
    }
    /**
     * 创建数据转发
     */
    async CreateDataForward(req, cb) {
        return this.request("CreateDataForward", req, cb);
    }
    /**
     * 查看运营活动资源包列表
     */
    async DescribeBonuses(req, cb) {
        return this.request("DescribeBonuses", req, cb);
    }
    /**
     * 拉取云存事件列表
     */
    async DescribeCloudStorageEvents(req, cb) {
        return this.request("DescribeCloudStorageEvents", req, cb);
    }
    /**
     * 提供修改产品的数据模板的能力
     */
    async ModifyModelDefinition(req, cb) {
        return this.request("ModifyModelDefinition", req, cb);
    }
    /**
     * 申请AI模型
     */
    async ApplyAIModel(req, cb) {
        return this.request("ApplyAIModel", req, cb);
    }
    /**
     * 查询产品配置的数据模板信息
     */
    async DescribeModelDefinition(req, cb) {
        return this.request("DescribeModelDefinition", req, cb);
    }
    /**
     * 获取设备列表
     */
    async DescribeDevices(req, cb) {
        return this.request("DescribeDevices", req, cb);
    }
    /**
     * 获取云存套餐包消耗详细记录
     */
    async DescribeCloudStoragePackageConsumeDetails(req, cb) {
        return this.request("DescribeCloudStoragePackageConsumeDetails", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249146, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.iotvideoindustry = void 0;
const v20201201_1 = require("./v20201201");
exports.iotvideoindustry = {
    v20201201: v20201201_1.v20201201,
};

}, function(modId) { var map = {"./v20201201":1738984249147}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249147, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201201 = void 0;
const Models = require("./iotvideoindustry_models");
const iotvideoindustry_client_1 = require("./iotvideoindustry_client");
exports.v20201201 = {
    Client: iotvideoindustry_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./iotvideoindustry_models":1738984249148,"./iotvideoindustry_client":1738984249149}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249148, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249149, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * iotvideoindustry client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("iotvideoindustry.tencentcloudapi.com", "2020-12-01", clientConfig);
    }
    /**
     * 获取IPC设备下属通道
请使用DescribeChannels接口
     */
    async DescribeIPCChannels(req, cb) {
        return this.request("DescribeIPCChannels", req, cb);
    }
    /**
     * 修改录像存储列表
     */
    async ModifyVideoInfo(req, cb) {
        return this.request("ModifyVideoInfo", req, cb);
    }
    /**
     * 本接口(DescribeSubGroups)用于查询分组下的子分组列表。
     */
    async DescribeSubGroups(req, cb) {
        return this.request("DescribeSubGroups", req, cb);
    }
    /**
     * 本接口(DescribeStatisticSummary)用于查询用户昨日的概览数据。
     */
    async DescribeStatisticSummary(req, cb) {
        return this.request("DescribeStatisticSummary", req, cb);
    }
    /**
     * 创建场景
     */
    async CreateScene(req, cb) {
        return this.request("CreateScene", req, cb);
    }
    /**
     * 场景详情
     */
    async DescribeScene(req, cb) {
        return this.request("DescribeScene", req, cb);
    }
    /**
     * 获取指定设备详细信息
     */
    async DescribeDevice(req, cb) {
        return this.request("DescribeDevice", req, cb);
    }
    /**
     * 本接口(ModifyBindRecordingPlan)用于更新录制计划绑定的通道
     */
    async ModifyBindRecordingPlan(req, cb) {
        return this.request("ModifyBindRecordingPlan", req, cb);
    }
    /**
     * 本接口(DescribeVideoListByChannel)用于查询指定通道的录制文件列表
     */
    async DescribeVideoListByChannel(req, cb) {
        return this.request("DescribeVideoListByChannel", req, cb);
    }
    /**
     * 直播拉流接口
     */
    async DescribeLiveStream(req, cb) {
        return this.request("DescribeLiveStream", req, cb);
    }
    /**
     * 修改场景
     */
    async ModifyScene(req, cb) {
        return this.request("ModifyScene", req, cb);
    }
    /**
     * 本接口(DescribeRecordingPlanById)用于根据录制计划ID获取录制计划。
     */
    async DescribeRecordingPlanById(req, cb) {
        return this.request("DescribeRecordingPlanById", req, cb);
    }
    /**
     * 本接口(DescribeGroupDevices)用于查询分组下的设备列表。
     */
    async DescribeGroupDevices(req, cb) {
        return this.request("DescribeGroupDevices", req, cb);
    }
    /**
     * 查询设备统计当前信息
     */
    async DescribeCurrentDeviceData(req, cb) {
        return this.request("DescribeCurrentDeviceData", req, cb);
    }
    /**
     * 本接口(DescribeDeviceStreams)用于获取设备实时流地址。
请使用DescribeChannelStreamURL接口
     */
    async DescribeDeviceStreams(req, cb) {
        return this.request("DescribeDeviceStreams", req, cb);
    }
    /**
     * 本接口(GetVideoListByCon)用于查询设备的录制文件列表
请使用DescribeVideoListByChannel接口
     */
    async GetVideoListByCon(req, cb) {
        return this.request("GetVideoListByCon", req, cb);
    }
    /**
     * 本接口(DescribeRecordingPlans)用于获取用户的全部录制计划。
     */
    async DescribeRecordingPlans(req, cb) {
        return this.request("DescribeRecordingPlans", req, cb);
    }
    /**
     * 本接口(DescribeDeviceGroup)用于根据设备ID查询设备所在分组信息，可批量查询。
     */
    async DescribeDeviceGroup(req, cb) {
        return this.request("DescribeDeviceGroup", req, cb);
    }
    /**
     * 本接口(DeleteRecordPlan)用于删除录制计划
录制计划删除的同时，会停止该录制计划下的全部录制任务。
请使用DeleteRecordingPlan接口
     */
    async DeleteRecordPlan(req, cb) {
        return this.request("DeleteRecordPlan", req, cb);
    }
    /**
     * 创建消息转发配置
     */
    async CreateMessageForward(req, cb) {
        return this.request("CreateMessageForward", req, cb);
    }
    /**
     * 本接口(DeleteTimeTemplate) 用于删除时间模板。
     */
    async DeleteTimeTemplate(req, cb) {
        return this.request("DeleteTimeTemplate", req, cb);
    }
    /**
     * 本接口（DescribeChannels）用于获取设备下属通道列表
     */
    async DescribeChannels(req, cb) {
        return this.request("DescribeChannels", req, cb);
    }
    /**
     * 编辑直播接口
     */
    async ModifyLiveChannel(req, cb) {
        return this.request("ModifyLiveChannel", req, cb);
    }
    /**
     * 重置设备告警
     */
    async ResetWarning(req, cb) {
        return this.request("ResetWarning", req, cb);
    }
    /**
     * 本接口(ControlDevicePTZ) 用于对支持GB28181 PTZ信令的设备进行远程控制。
请使用ControlChannelPTZ接口
     */
    async ControlDevicePTZ(req, cb) {
        return this.request("ControlDevicePTZ", req, cb);
    }
    /**
     * 本接口(GetRecordDatesByDev)用于查询设备含有录像文件的日期列表。
请使用DescribeRecordDatesByChannel接口
     */
    async GetRecordDatesByDev(req, cb) {
        return this.request("GetRecordDatesByDev", req, cb);
    }
    /**
     * 看守位控制
     */
    async ControlHomePosition(req, cb) {
        return this.request("ControlHomePosition", req, cb);
    }
    /**
     * 本接口(DescribeStatisticDetails)用于查询指定统计项详情，返回结果按天为单位聚合，支持的最大时间查询范围为31天。
     */
    async DescribeStatisticDetails(req, cb) {
        return this.request("DescribeStatisticDetails", req, cb);
    }
    /**
     * 本接口(DescribeGroupById)用于根据分组ID查询分组。
     */
    async DescribeGroupById(req, cb) {
        return this.request("DescribeGroupById", req, cb);
    }
    /**
     * 本接口(CreateTimeTemplate) 用于根据模板描述的具体录制时间片段，创建定制化的时间模板。
     */
    async CreateTimeTemplate(req, cb) {
        return this.request("CreateTimeTemplate", req, cb);
    }
    /**
     * 本接口(CreateDeviceGroup) 用于创建设备管理分组。
     */
    async CreateDeviceGroup(req, cb) {
        return this.request("CreateDeviceGroup", req, cb);
    }
    /**
     * 本接口（ControlChannelLocalRecord）用于对通道本地回放流进行控制，包括暂停、播放、拉动、结束等

     */
    async ControlChannelLocalRecord(req, cb) {
        return this.request("ControlChannelLocalRecord", req, cb);
    }
    /**
     * 本接口（DescribeChannelLocalRecordURL）用于将NVR等设备对应通道本地回放文件，通过GB28181信令推送至云端，并生成对应的实时视频流URL，流地址URL是动态生成，如需重新播放请重新调用此接口获取最新地址。
正常推流，如未设置对应录制计划，且180s无人观看此流，将会被自动掐断。
     */
    async DescribeChannelLocalRecordURL(req, cb) {
        return this.request("DescribeChannelLocalRecordURL", req, cb);
    }
    /**
     * 本接口(UpdateDevicePassWord)用于修改设备密码。
     */
    async UpdateDevicePassWord(req, cb) {
        return this.request("UpdateDevicePassWord", req, cb);
    }
    /**
     * 编辑设备订阅状态
     */
    async ModifySubscriptionStatus(req, cb) {
        return this.request("ModifySubscriptionStatus", req, cb);
    }
    /**
     * 告警等级列表
     */
    async DescribeWarnMod(req, cb) {
        return this.request("DescribeWarnMod", req, cb);
    }
    /**
     * 直播录制计划绑定解绑直播频道
     */
    async ModifyBindPlanLiveChannel(req, cb) {
        return this.request("ModifyBindPlanLiveChannel", req, cb);
    }
    /**
     * 获取设备事件
     */
    async DescribeDeviceEvent(req, cb) {
        return this.request("DescribeDeviceEvent", req, cb);
    }
    /**
     * 编辑直播录制计划
     */
    async ModifyLiveRecordPlan(req, cb) {
        return this.request("ModifyLiveRecordPlan", req, cb);
    }
    /**
     * 本接口用于删除设备下的通道
注意： 在线状态的设备不允许删除
     */
    async DeleteChannel(req, cb) {
        return this.request("DeleteChannel", req, cb);
    }
    /**
     * 根据直播录制计划获取频道列表
     */
    async DescribeChannelsByLiveRecordPlan(req, cb) {
        return this.request("DescribeChannelsByLiveRecordPlan", req, cb);
    }
    /**
     * 场景绑定/解绑通道接口
     */
    async ModifyBindSceneDevice(req, cb) {
        return this.request("ModifyBindSceneDevice", req, cb);
    }
    /**
     * 直播录像存储日期列表
     */
    async DescribeRecordDatesByLive(req, cb) {
        return this.request("DescribeRecordDatesByLive", req, cb);
    }
    /**
     * 本接口(DescribeChannelLiveStreamURL)用于获取设备指定通道实时流地址，地址是动态生成，如重新播放需要调用此接口重新获取最新播放地址。
正常推流，如未设置对应录制计划，且180s无人观看此流，将会被自动掐断。
     */
    async DescribeChannelLiveStreamURL(req, cb) {
        return this.request("DescribeChannelLiveStreamURL", req, cb);
    }
    /**
     * 查询主设备订阅状态
     */
    async DescribeSubscriptionStatus(req, cb) {
        return this.request("DescribeSubscriptionStatus", req, cb);
    }
    /**
     * 本接口(CreateDevice) 用于创建设备。
     */
    async CreateDevice(req, cb) {
        return this.request("CreateDevice", req, cb);
    }
    /**
     * 设备告警-删除告警
     */
    async DeleteWarning(req, cb) {
        return this.request("DeleteWarning", req, cb);
    }
    /**
     * 本接口(DescribeGroups)用于批量查询分组信息。
     */
    async DescribeGroups(req, cb) {
        return this.request("DescribeGroups", req, cb);
    }
    /**
     * 获取直播录制计划列表
     */
    async DescribeLiveRecordPlanIds(req, cb) {
        return this.request("DescribeLiveRecordPlanIds", req, cb);
    }
    /**
     * 预置位控制
     */
    async ControlPreset(req, cb) {
        return this.request("ControlPreset", req, cb);
    }
    /**
     * 本接口(CreateRecordPlan) 用于创建录制计划，使设备与时间模板绑定，以便及时启动录制
请使用CreateRecordingPlan代替
     */
    async CreateRecordPlan(req, cb) {
        return this.request("CreateRecordPlan", req, cb);
    }
    /**
     * 本接口(UpdateDeviceGroup)用于修改分组信息。
     */
    async UpdateDeviceGroup(req, cb) {
        return this.request("UpdateDeviceGroup", req, cb);
    }
    /**
     * 删除录像存储列表
     */
    async DeleteVideoList(req, cb) {
        return this.request("DeleteVideoList", req, cb);
    }
    /**
     * 获取场景绑定设备列表
     */
    async DescribeBindSceneDevices(req, cb) {
        return this.request("DescribeBindSceneDevices", req, cb);
    }
    /**
     * 本接口(UpdateTimeTemplate)用于更新时间模板。
     */
    async UpdateTimeTemplate(req, cb) {
        return this.request("UpdateTimeTemplate", req, cb);
    }
    /**
     * 本接口(CreateRecordingPlan) 用于创建录制计划，使通道与时间模板绑定，以便及时启动录制
     */
    async CreateRecordingPlan(req, cb) {
        return this.request("CreateRecordingPlan", req, cb);
    }
    /**
     * 查询设备统计monitor信息
     */
    async DescribeDeviceMonitorData(req, cb) {
        return this.request("DescribeDeviceMonitorData", req, cb);
    }
    /**
     * 本接口(GetTimeTemplateById)用于根据模板ID获取时间模板详情。
     */
    async GetTimeTemplateById(req, cb) {
        return this.request("GetTimeTemplateById", req, cb);
    }
    /**
     * 查看消息转发配置列表
     */
    async DescribeMessageForwards(req, cb) {
        return this.request("DescribeMessageForwards", req, cb);
    }
    /**
     * 获取预置位列表
     */
    async DescribePresetList(req, cb) {
        return this.request("DescribePresetList", req, cb);
    }
    /**
     * 修改消息转发配置
     */
    async ModifyMessageForward(req, cb) {
        return this.request("ModifyMessageForward", req, cb);
    }
    /**
     * 本接口(DescribeDeviceList) 用于获取设备列表，支持模糊搜索
     */
    async DescribeDeviceList(req, cb) {
        return this.request("DescribeDeviceList", req, cb);
    }
    /**
     * 创建直播录制计划
     */
    async CreateLiveRecordPlan(req, cb) {
        return this.request("CreateLiveRecordPlan", req, cb);
    }
    /**
     * 查看消息转发配置详情
     */
    async DescribeMessageForward(req, cb) {
        return this.request("DescribeMessageForward", req, cb);
    }
    /**
     * 本接口(GetTimeTemplates)用于获取时间模板列表。
     */
    async GetTimeTemplates(req, cb) {
        return this.request("GetTimeTemplates", req, cb);
    }
    /**
     * 获取异常事件统计
     */
    async DescribeAbnormalEvents(req, cb) {
        return this.request("DescribeAbnormalEvents", req, cb);
    }
    /**
     * 本接口(GetRecordPlanById)用于根据录制计划ID获取录制计划。
请使用DescribeRecordingPlanById接口
     */
    async GetRecordPlanById(req, cb) {
        return this.request("GetRecordPlanById", req, cb);
    }
    /**
     * 获取回放视频流地址
请使用DescribeChannelLocalRecordURL接口

RecordId和StartTime/EndTime互斥
当存在RecordId时，StartTime和EndTime无效
当RecordId为空，StartTime和EndTime生效
     */
    async DescribeRecordStream(req, cb) {
        return this.request("DescribeRecordStream", req, cb);
    }
    /**
     * 删除直播录制计划
     */
    async DeleteLiveRecordPlan(req, cb) {
        return this.request("DeleteLiveRecordPlan", req, cb);
    }
    /**
     * 运营中心-设备录像存储统计
     */
    async DescribeMonitorDataByDate(req, cb) {
        return this.request("DescribeMonitorDataByDate", req, cb);
    }
    /**
     * 获取告警列表
     */
    async DescribeWarnings(req, cb) {
        return this.request("DescribeWarnings", req, cb);
    }
    /**
     * 本接口(DeleteDeviceGroup)用于删除分组。
     */
    async DeleteDeviceGroup(req, cb) {
        return this.request("DeleteDeviceGroup", req, cb);
    }
    /**
     * 本接口(ModifyRecordingPlan)用于更新录制计划。
     */
    async ModifyRecordingPlan(req, cb) {
        return this.request("ModifyRecordingPlan", req, cb);
    }
    /**
     * 本接口(DescribeChannelStreamURL)用于获取设备指定通道实时流地址，地址是动态生成，如重新播放需要调用此接口重新获取最新播放地址。
正常推流，如未设置对应录制计划，且180s无人观看此流，将会被自动掐断。
     */
    async DescribeChannelStreamURL(req, cb) {
        return this.request("DescribeChannelStreamURL", req, cb);
    }
    /**
     * 直播详情接口
     */
    async DescribeLiveChannel(req, cb) {
        return this.request("DescribeLiveChannel", req, cb);
    }
    /**
     * 本接口(DescribeAllDeviceList) 用于获取设备列表。
请使用DescribeDevicesList接口
     */
    async DescribeAllDeviceList(req, cb) {
        return this.request("DescribeAllDeviceList", req, cb);
    }
    /**
     * 删除场景
     */
    async DeleteScene(req, cb) {
        return this.request("DeleteScene", req, cb);
    }
    /**
     * 创建直播频道
     */
    async CreateLiveChannel(req, cb) {
        return this.request("CreateLiveChannel", req, cb);
    }
    /**
     * 获取场景绑定通道列表
     */
    async DescribeBindSceneChannels(req, cb) {
        return this.request("DescribeBindSceneChannels", req, cb);
    }
    /**
     * 本接口(UpdateRecordPlan)用于更新录制计划。
请使用 ModifyRecordingPlan接口和ModifyBindRecordingPlan接口
     */
    async UpdateRecordPlan(req, cb) {
        return this.request("UpdateRecordPlan", req, cb);
    }
    /**
     * 本接口(DeleteRecordingPlan)用于删除录制计划
录制计划删除的同时，会停止该录制计划下的全部录制任务。
     */
    async DeleteRecordingPlan(req, cb) {
        return this.request("DeleteRecordingPlan", req, cb);
    }
    /**
     * 本接口(ControlChannelPTZ) 用于对支持GB28181 PTZ信令的设备进行指定通道的远程控制。
     */
    async ControlChannelPTZ(req, cb) {
        return this.request("ControlChannelPTZ", req, cb);
    }
    /**
     * 对回放流进行控制，包括暂停、播放、拉动、结束等
请使用ControlChannelLocalRecord接口
     */
    async ControlRecordStream(req, cb) {
        return this.request("ControlRecordStream", req, cb);
    }
    /**
     * 直播录像回放列表
     */
    async DescribeLiveVideoList(req, cb) {
        return this.request("DescribeLiveVideoList", req, cb);
    }
    /**
     * 场景绑定解绑通道接口
     */
    async ModifyBindSceneChannels(req, cb) {
        return this.request("ModifyBindSceneChannels", req, cb);
    }
    /**
     * 本接口(DescribeDevicePassWord)用于查询设备密码。
     */
    async DescribeDevicePassWord(req, cb) {
        return this.request("DescribeDevicePassWord", req, cb);
    }
    /**
     * 直播列表接口
     */
    async DescribeLiveChannelList(req, cb) {
        return this.request("DescribeLiveChannelList", req, cb);
    }
    /**
     * 删除消息转发配置
     */
    async DeleteMessageForward(req, cb) {
        return this.request("DeleteMessageForward", req, cb);
    }
    /**
     * 编辑预置位信息
     */
    async ModifyPreset(req, cb) {
        return this.request("ModifyPreset", req, cb);
    }
    /**
     * 本接口(DeleteDevice)用于删除设备。
     */
    async DeleteDevice(req, cb) {
        return this.request("DeleteDevice", req, cb);
    }
    /**
     * 本接口(ModifyDeviceData)用于编辑设备信息。
     */
    async ModifyDeviceData(req, cb) {
        return this.request("ModifyDeviceData", req, cb);
    }
    /**
     * 根据分组路径查询分组
     */
    async DescribeGroupByPath(req, cb) {
        return this.request("DescribeGroupByPath", req, cb);
    }
    /**
     * 删除直播接口
     */
    async DeleteLiveChannel(req, cb) {
        return this.request("DeleteLiveChannel", req, cb);
    }
    /**
     * 本接口(GetRecordPlans)用于获取用户的全部录制计划。
请使用DescribeRecordingPlans接口
     */
    async GetRecordPlans(req, cb) {
        return this.request("GetRecordPlans", req, cb);
    }
    /**
     * 本接口(GetRecordPlanByDev)用于根据设备ID查询其绑定的录制计划.
     */
    async GetRecordPlanByDev(req, cb) {
        return this.request("GetRecordPlanByDev", req, cb);
    }
    /**
     * 本接口用于获取SIP服务器相关配置，用户可以通过这些配置项，将设备通过GB28181协议注册到本服务。
     */
    async DescribeSIPServer(req, cb) {
        return this.request("DescribeSIPServer", req, cb);
    }
    /**
     * 直播录像删除
     */
    async DeleteLiveVideoList(req, cb) {
        return this.request("DeleteLiveVideoList", req, cb);
    }
    /**
     * 根据时间获取云端录制文件列表
     */
    async DescribeVideoList(req, cb) {
        return this.request("DescribeVideoList", req, cb);
    }
    /**
     * 直播录像编辑
     */
    async ModifyLiveVideo(req, cb) {
        return this.request("ModifyLiveVideo", req, cb);
    }
    /**
     * 获取X-P2P的统计数据
     */
    async DescribeXP2PData(req, cb) {
        return this.request("DescribeXP2PData", req, cb);
    }
    /**
     * 获取场景列表
     */
    async DescribeScenes(req, cb) {
        return this.request("DescribeScenes", req, cb);
    }
    /**
     * 本接口(BindGroupDevices) 用于绑定设备到分组。
     */
    async BindGroupDevices(req, cb) {
        return this.request("BindGroupDevices", req, cb);
    }
    /**
     * 获取直播录制计划详情
     */
    async DescribeLiveRecordPlanById(req, cb) {
        return this.request("DescribeLiveRecordPlanById", req, cb);
    }
    /**
     * 本接口(DescribeRecordDatesByChannel)用于查询设备含有录像文件的日期列表。
     */
    async DescribeRecordDatesByChannel(req, cb) {
        return this.request("DescribeRecordDatesByChannel", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249150, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.irp = void 0;
const v20220324_1 = require("./v20220324");
const v20220805_1 = require("./v20220805");
exports.irp = {
    v20220324: v20220324_1.v20220324,
    v20220805: v20220805_1.v20220805,
};

}, function(modId) { var map = {"./v20220324":1738984249151,"./v20220805":1738984249154}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249151, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220324 = void 0;
const Models = require("./irp_models");
const irp_client_1 = require("./irp_client");
exports.v20220324 = {
    Client: irp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./irp_models":1738984249152,"./irp_client":1738984249153}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249152, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249153, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * irp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("irp.tencentcloudapi.com", "2022-03-24", clientConfig);
    }
    /**
     * 获取推荐结果
     */
    async RecommendContent(req, cb) {
        return this.request("RecommendContent", req, cb);
    }
    /**
     * 上报物料
     */
    async ReportMaterial(req, cb) {
        return this.request("ReportMaterial", req, cb);
    }
    /**
     * 上报行为
     */
    async ReportAction(req, cb) {
        return this.request("ReportAction", req, cb);
    }
    /**
     * 上报用户画像
     */
    async ReportPortrait(req, cb) {
        return this.request("ReportPortrait", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249154, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220805 = void 0;
const Models = require("./irp_models");
const irp_client_1 = require("./irp_client");
exports.v20220805 = {
    Client: irp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./irp_models":1738984249155,"./irp_client":1738984249156}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249155, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249156, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * irp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("irp.tencentcloudapi.com", "2022-08-05", clientConfig);
    }
    /**
     * 上报电商类商品信息
     */
    async ReportGoodsInfo(req, cb) {
        return this.request("ReportGoodsInfo", req, cb);
    }
    /**
     * 上报电商类行为数据
     */
    async ReportGoodsBehavior(req, cb) {
        return this.request("ReportGoodsBehavior", req, cb);
    }
    /**
     * 上报信息流场景内的行为数据，随着数据的积累，模型的效果会逐渐稳定。
     */
    async ReportFeedBehavior(req, cb) {
        return this.request("ReportFeedBehavior", req, cb);
    }
    /**
     * 获取电商类推荐结果
     */
    async DescribeGoodsRecommend(req, cb) {
        return this.request("DescribeGoodsRecommend", req, cb);
    }
    /**
     * 上报信息流用户信息，请务必确认用户的唯一性，并在请求推荐结果时指定用户的唯一标识信息（UserId），否则将无法进行千人千面的推荐
     */
    async ReportFeedUser(req, cb) {
        return this.request("ReportFeedUser", req, cb);
    }
    /**
     * 上报被用于推荐的信息流内容信息
     */
    async ReportFeedItem(req, cb) {
        return this.request("ReportFeedItem", req, cb);
    }
    /**
     * 获取信息流推荐结果
     */
    async FeedRecommend(req, cb) {
        return this.request("FeedRecommend", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249157, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.iss = void 0;
const v20230517_1 = require("./v20230517");
exports.iss = {
    v20230517: v20230517_1.v20230517,
};

}, function(modId) { var map = {"./v20230517":1738984249158}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249158, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20230517 = void 0;
const Models = require("./iss_models");
const iss_client_1 = require("./iss_client");
exports.v20230517 = {
    Client: iss_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./iss_models":1738984249159,"./iss_client":1738984249160}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249159, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249160, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * iss client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("iss.tencentcloudapi.com", "2023-05-17", clientConfig);
    }
    /**
     * 用于删除实时上云模板
     */
    async DeleteRecordTemplate(req, cb) {
        return this.request("DeleteRecordTemplate", req, cb);
    }
    /**
     * 用于启用/禁用设备，禁用后拒绝设备注册。
     */
    async UpdateDeviceStatus(req, cb) {
        return this.request("UpdateDeviceStatus", req, cb);
    }
    /**
     * 用于修改网关信息（支持对网关名称和描述的修改）。
     */
    async UpdateGateway(req, cb) {
        return this.request("UpdateGateway", req, cb);
    }
    /**
     * 用于查询取回任务列表
     */
    async ListRecordRetrieveTasks(req, cb) {
        return this.request("ListRecordRetrieveTasks", req, cb);
    }
    /**
     * 用于修改录像上云模板。
     */
    async UpdateRecordBackupTemplate(req, cb) {
        return this.request("UpdateRecordBackupTemplate", req, cb);
    }
    /**
     * 用于删除已添加的设备。
     */
    async DeleteUserDevice(req, cb) {
        return this.request("DeleteUserDevice", req, cb);
    }
    /**
     * 用于查询设备的通道。
     */
    async DescribeDeviceChannel(req, cb) {
        return this.request("DescribeDeviceChannel", req, cb);
    }
    /**
     * 用于删除录像上云模板。
     */
    async DeleteRecordBackupTemplate(req, cb) {
        return this.request("DeleteRecordBackupTemplate", req, cb);
    }
    /**
     * 用于用户添加域名时，查询可以绑定的服务节点，结果为平台支持的所有服务节点。（注意：每个服务节点只能绑定一个域名）
     */
    async DescribeDomainRegion(req, cb) {
        return this.request("DescribeDomainRegion", req, cb);
    }
    /**
     * 平台支持将数据以TS切片的形式存入客户自有COS桶，该接口用于支持客户快捷查询切片信息列表
（注意：只支持标准存储类型的查询）
     */
    async DescribeRecordSlice(req, cb) {
        return this.request("DescribeRecordSlice", req, cb);
    }
    /**
     * 用于查询网关接入协议。
     */
    async DescribeGatewayProtocol(req, cb) {
        return this.request("DescribeGatewayProtocol", req, cb);
    }
    /**
     * 用于查询录像上云模板详情。
     */
    async DescribeRecordBackupTemplate(req, cb) {
        return this.request("DescribeRecordBackupTemplate", req, cb);
    }
    /**
     * 用于获取网关的数据及流量监控信息。
     */
    async DescribeGatewayMonitor(req, cb) {
        return this.request("DescribeGatewayMonitor", req, cb);
    }
    /**
     * 用于查询录像上云计划列表。
     */
    async ListRecordBackupPlans(req, cb) {
        return this.request("ListRecordBackupPlans", req, cb);
    }
    /**
     * 用于获取视频通道的码率信息
     */
    async DescribeVideoBitRate(req, cb) {
        return this.request("DescribeVideoBitRate", req, cb);
    }
    /**
     * 查询网关服务版本
     */
    async DescribeGatewayVersion(req, cb) {
        return this.request("DescribeGatewayVersion", req, cb);
    }
    /**
     * 更新AI任务
     */
    async UpdateAITask(req, cb) {
        return this.request("UpdateAITask", req, cb);
    }
    /**
     * 用于查询任务的子任务列表
     */
    async ListSubTasks(req, cb) {
        return this.request("ListSubTasks", req, cb);
    }
    /**
     * 用于查询用户下所有实时上云计划中的通道列表
     */
    async ListRecordPlanChannels(req, cb) {
        return this.request("ListRecordPlanChannels", req, cb);
    }
    /**
     * 用于添加设备时，查询设备可以使用的服务节点，查询结果为已经绑定了域名的服务节点。
     */
    async DescribeDeviceRegion(req, cb) {
        return this.request("DescribeDeviceRegion", req, cb);
    }
    /**
     * 用于新增组织。
     */
    async AddOrganization(req, cb) {
        return this.request("AddOrganization", req, cb);
    }
    /**
     * 用于查询设备通道预置位信息。
     */
    async DescribeDevicePreset(req, cb) {
        return this.request("DescribeDevicePreset", req, cb);
    }
    /**
     * 用于查询实时上云计划列表
     */
    async ListRecordPlans(req, cb) {
        return this.request("ListRecordPlans", req, cb);
    }
    /**
     * 用于查询录像上云计划详情。
     */
    async DescribeRecordBackupPlan(req, cb) {
        return this.request("DescribeRecordBackupPlan", req, cb);
    }
    /**
     * 用于查询设备云端录像时间轴信息（即为视频上云后设置录像计划后云存储的录像）
     */
    async DescribeRecordFile(req, cb) {
        return this.request("DescribeRecordFile", req, cb);
    }
    /**
     * 用于查询云录像取回任务详情
     */
    async DescribeRecordRetrieveTask(req, cb) {
        return this.request("DescribeRecordRetrieveTask", req, cb);
    }
    /**
     * 用于查询设备的详细信息。
     */
    async DescribeUserDevice(req, cb) {
        return this.request("DescribeUserDevice", req, cb);
    }
    /**
     * 查询禁播通道列表
     */
    async QueryForbidPlayChannelList(req, cb) {
        return this.request("QueryForbidPlayChannelList", req, cb);
    }
    /**
     * 获取AI任务识别结果
     */
    async DescribeAITaskResult(req, cb) {
        return this.request("DescribeAITaskResult", req, cb);
    }
    /**
     * 用于查询实时上云模板详情
     */
    async DescribeRecordTemplate(req, cb) {
        return this.request("DescribeRecordTemplate", req, cb);
    }
    /**
     * 用于修改实时上云模板
     */
    async UpdateRecordTemplate(req, cb) {
        return this.request("UpdateRecordTemplate", req, cb);
    }
    /**
     * 用于新建取回任务
     */
    async AddRecordRetrieveTask(req, cb) {
        return this.request("AddRecordRetrieveTask", req, cb);
    }
    /**
     * 用于根据服务节点获取 CNAME 值。
     */
    async DescribeCNAME(req, cb) {
        return this.request("DescribeCNAME", req, cb);
    }
    /**
     * 用于新增单个设备。添加设备之后，可根据返回结果到设备上进行配置，配置后等待设备注册/推流。
     */
    async AddUserDevice(req, cb) {
        return this.request("AddUserDevice", req, cb);
    }
    /**
     * 用于查询任务详情
     */
    async DescribeTask(req, cb) {
        return this.request("DescribeTask", req, cb);
    }
    /**
     * 添加AI任务
     */
    async AddAITask(req, cb) {
        return this.request("AddAITask", req, cb);
    }
    /**
     * 用于删除组织。
     */
    async DeleteOrganization(req, cb) {
        return this.request("DeleteOrganization", req, cb);
    }
    /**
     * 用于获取云端录像回放url地址
     */
    async DescribeRecordPlaybackUrl(req, cb) {
        return this.request("DescribeRecordPlaybackUrl", req, cb);
    }
    /**
     * 用于批量更改设备的组织。
     */
    async UpdateDeviceOrganization(req, cb) {
        return this.request("UpdateDeviceOrganization", req, cb);
    }
    /**
     * 用于查询添加的域名列表。
     */
    async DescribeDomain(req, cb) {
        return this.request("DescribeDomain", req, cb);
    }
    /**
     * 用于获取设备的实时开流地址。
     */
    async ControlDeviceStream(req, cb) {
        return this.request("ControlDeviceStream", req, cb);
    }
    /**
     * 用于获取云录像下载 url
     */
    async DescribeVideoDownloadUrl(req, cb) {
        return this.request("DescribeVideoDownloadUrl", req, cb);
    }
    /**
     * 用于同步国标设备的通道（接口调用后，触发向设备请求通道列表，新增的通道入库，设备上已删除的通道需自行删除、后台不自动删除）。
     */
    async RefreshDeviceChannel(req, cb) {
        return this.request("RefreshDeviceChannel", req, cb);
    }
    /**
     * 用于操作设备预置位，包括设置、删除、调用。
     */
    async ControlDevicePreset(req, cb) {
        return this.request("ControlDevicePreset", req, cb);
    }
    /**
     * 用于批量操作（启用，禁用，删除）设备
     */
    async BatchOperateDevice(req, cb) {
        return this.request("BatchOperateDevice", req, cb);
    }
    /**
     * 本接口可基于海康ISUP 5.0协议实现透传ISAPI的请求数据，调用接口前需确保设备采用ISUP协议成功注册至本平台
     */
    async CallISAPI(req, cb) {
        return this.request("CallISAPI", req, cb);
    }
    /**
     * 用于查询实时上云计划详情
     */
    async DescribeRecordPlan(req, cb) {
        return this.request("DescribeRecordPlan", req, cb);
    }
    /**
     * 用于修改实时上云计划
     */
    async UpdateRecordPlan(req, cb) {
        return this.request("UpdateRecordPlan", req, cb);
    }
    /**
     * 用于获取网关详情。
     */
    async DescribeGateway(req, cb) {
        return this.request("DescribeGateway", req, cb);
    }
    /**
     * 用于网关升级（支持对所有待更新的服务一键升级）。
     */
    async UpgradeGateway(req, cb) {
        return this.request("UpgradeGateway", req, cb);
    }
    /**
     * 用于修改组织。
     */
    async UpdateOrganization(req, cb) {
        return this.request("UpdateOrganization", req, cb);
    }
    /**
     * 用于删除实时上云计划
     */
    async DeleteRecordPlan(req, cb) {
        return this.request("DeleteRecordPlan", req, cb);
    }
    /**
     * 用于新增实时上云模板
     */
    async AddRecordTemplate(req, cb) {
        return this.request("AddRecordTemplate", req, cb);
    }
    /**
     * 用于新增实时上云计划
     */
    async AddRecordPlan(req, cb) {
        return this.request("AddRecordPlan", req, cb);
    }
    /**
     * 禁止主、子账号对视频通道的实况预览
     */
    async SetForbidPlayChannels(req, cb) {
        return this.request("SetForbidPlayChannels", req, cb);
    }
    /**
     * 用于查询组织目录下的未添加到实时上云计划中的通道数量
     */
    async ListOrganizationChannelNumbers(req, cb) {
        return this.request("ListOrganizationChannelNumbers", req, cb);
    }
    /**
     * 用于修改录像上云计划。
     */
    async UpdateRecordBackupPlan(req, cb) {
        return this.request("UpdateRecordBackupPlan", req, cb);
    }
    /**
     * 用于获取网关列表。
     */
    async ListGateways(req, cb) {
        return this.request("ListGateways", req, cb);
    }
    /**
     * 用于查询组织。
     */
    async DescribeOrganization(req, cb) {
        return this.request("DescribeOrganization", req, cb);
    }
    /**
     * 用于录像回放过程中的倍速、跳转、播放/暂停/停止等控制。
     */
    async ControlRecord(req, cb) {
        return this.request("ControlRecord", req, cb);
    }
    /**
     * 用于获取对应组织下的设备列表。
     */
    async ListDevices(req, cb) {
        return this.request("ListDevices", req, cb);
    }
    /**
     * 用于查询录像上云模板列表。
     */
    async ListRecordBackupTemplates(req, cb) {
        return this.request("ListRecordBackupTemplates", req, cb);
    }
    /**
     * 用于设备通道云台控制，包括转动、变倍、变焦、光圈等。
     */
    async ControlDevicePTZ(req, cb) {
        return this.request("ControlDevicePTZ", req, cb);
    }
    /**
     * 更新 AI 任务状态
     */
    async UpdateAITaskStatus(req, cb) {
        return this.request("UpdateAITaskStatus", req, cb);
    }
    /**
     * 用于修改设备的配置信息。
     */
    async UpdateUserDevice(req, cb) {
        return this.request("UpdateUserDevice", req, cb);
    }
    /**
     * 用于查询录像上云计划下的设备通道列表。
     */
    async ListRecordBackupPlanDevices(req, cb) {
        return this.request("ListRecordBackupPlanDevices", req, cb);
    }
    /**
     * 获取AI任务列表
     */
    async ListAITasks(req, cb) {
        return this.request("ListAITasks", req, cb);
    }
    /**
     * 用于查询实时上云模板列表
     */
    async ListRecordTemplates(req, cb) {
        return this.request("ListRecordTemplates", req, cb);
    }
    /**
     * 用于查询实时上云计划下的设备通道列表
     */
    async ListRecordPlanDevices(req, cb) {
        return this.request("ListRecordPlanDevices", req, cb);
    }
    /**
     * 删除AI任务
     */
    async DeleteAITask(req, cb) {
        return this.request("DeleteAITask", req, cb);
    }
    /**
     * 用于设置推拉流鉴权配置。
     */
    async AddStreamAuth(req, cb) {
        return this.request("AddStreamAuth", req, cb);
    }
    /**
     * 用于查询批量任务和简单任务列表
     */
    async ListTasks(req, cb) {
        return this.request("ListTasks", req, cb);
    }
    /**
     * 用于删除取回任务
     */
    async DeleteRecordRetrieveTask(req, cb) {
        return this.request("DeleteRecordRetrieveTask", req, cb);
    }
    /**
     * 用于新增录像上云计划 （当前仅适用于通过GB28181协议和网关接入的设备/视频通道）
     */
    async AddRecordBackupPlan(req, cb) {
        return this.request("AddRecordBackupPlan", req, cb);
    }
    /**
     * 用于查询推拉流鉴权配置。
     */
    async DescribeStreamAuth(req, cb) {
        return this.request("DescribeStreamAuth", req, cb);
    }
    /**
     * 用于查询设备本地录像时间轴信息，为NVR/IPC本地存储的录像。
     */
    async ControlRecordTimeline(req, cb) {
        return this.request("ControlRecordTimeline", req, cb);
    }
    /**
     * 获取AI任务详情
     */
    async DescribeAITask(req, cb) {
        return this.request("DescribeAITask", req, cb);
    }
    /**
     * 用于删除录像上云模板。
     */
    async DeleteRecordBackupPlan(req, cb) {
        return this.request("DeleteRecordBackupPlan", req, cb);
    }
    /**
     * 用于删除网关。
     */
    async DeleteGateway(req, cb) {
        return this.request("DeleteGateway", req, cb);
    }
    /**
     * 用于查询网关下挂载的设备列表。
     */
    async ListGatewayDevices(req, cb) {
        return this.request("ListGatewayDevices", req, cb);
    }
    /**
     * 用于删除域名。
     */
    async DeleteDomain(req, cb) {
        return this.request("DeleteDomain", req, cb);
    }
    /**
     * 用于获取设备本地录像 URL 地址。
     */
    async PlayRecord(req, cb) {
        return this.request("PlayRecord", req, cb);
    }
    /**
     * 用于新增录像上云模板。
> 该功能本质是拉取设备本地录像数据上云（即存在 IPC 摄像头存储卡或 NVR 硬盘中的录像），操作时需先设定录像时间段（即想要上云的设备本地录像），再设定上云时间段和上云倍速，平台将于上云时间段倍速拉取设备对应前一天的录像时间段数据。

> 设定需至少满足（上云时间段=前一天的录像时间段/上云倍速），建议上云时间段可多设定10%左右的时间，避免因网络波动导致数据拉取不完整。
     */
    async AddRecordBackupTemplate(req, cb) {
        return this.request("AddRecordBackupTemplate", req, cb);
    }
    /**
     * 用于查询组织目录下的通道列表
     */
    async ListOrganizationChannels(req, cb) {
        return this.request("ListOrganizationChannels", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249161, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ivld = void 0;
const v20210903_1 = require("./v20210903");
exports.ivld = {
    v20210903: v20210903_1.v20210903,
};

}, function(modId) { var map = {"./v20210903":1738984249162}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249162, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210903 = void 0;
const Models = require("./ivld_models");
const ivld_client_1 = require("./ivld_client");
exports.v20210903 = {
    Client: ivld_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ivld_models":1738984249163,"./ivld_client":1738984249164}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249163, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249164, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ivld client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ivld.tencentcloudapi.com", "2021-09-03", clientConfig);
    }
    /**
     * 创建智能标签任务。

请注意，本接口为异步接口，**返回TaskId只代表任务创建成功，不代表任务执行成功**。
     */
    async CreateTask(req, cb) {
        return this.request("CreateTask", req, cb);
    }
    /**
     * 将URL指向的媒资视频文件导入系统之中。

**请注意，本接口为异步接口**。接口返回MediaId仅代表导入视频任务发起，不代表任务完成，您可调用读接口(DescribeMedia/DescribeMedias)接口查询MediaId

URL字段推荐您使用COS地址，其形式为`https://${Bucket}-${AppId}.cos.${Region}.myqcloud.com/${ObjectKey}`，其中`${Bucket}`为您的COS桶名称，Region为COS桶所在[可用区](https://cloud.tencent.com/document/product/213/6091)，`${ObjectKey}`为指向存储在COS桶内的待分析的视频的[ObjectKey](https://cloud.tencent.com/document/product/436/13324)

另外，目前产品也支持使用外部URL地址，但是当传入URL为非COS地址时，需要您指定额外的WriteBackCosPath以供产品回写结果数据。

分析完成后，本产品将在您的`${Bucket}`桶内创建名为`${ObjectKey}_${task-create-time}`的目录(`task-create-time`形式为1970-01-01T08:08:08)并将分析结果将回传回该目录，也即，结构化分析结果(包括图片，JSON等数据)将会写回`https://${Bucket}-${AppId}.cos.${Region}.myqcloud.com/${ObjectKey}_${task-create-time}`目录
     */
    async ImportMedia(req, cb) {
        return this.request("ImportMedia", req, cb);
    }
    /**
     * 创建自定义人物。

输入人物名称，基本信息，分类信息与人脸图片，创建自定义人物

人脸图片可使用图片数据(base64编码的图片数据)或者图片URL(推荐使用COS以减少下载时间，其他地址也支持)，原始图片优先，也即如果同时指定了图片数据和图片URL，接口将仅使用图片数据
     */
    async CreateCustomPerson(req, cb) {
        return this.request("CreateCustomPerson", req, cb);
    }
    /**
     * 删除自定义人脸数据
     */
    async DeleteCustomPersonImage(req, cb) {
        return this.request("DeleteCustomPersonImage", req, cb);
    }
    /**
     * 查询用户回调设置
     */
    async QueryCallback(req, cb) {
        return this.request("QueryCallback", req, cb);
    }
    /**
     * 更新自定义人物分类

当L2Category为空时，代表更新CategoryId对应的一级自定义人物类型以及所有二级自定义人物类型所从属的一级自定义人物类型；
当L2Category非空时，仅更新CategoryId对应的二级自定义人物类型
     */
    async UpdateCustomCategory(req, cb) {
        return this.request("UpdateCustomCategory", req, cb);
    }
    /**
     * 更新自定义人物信息，包括姓名，简要信息，分类信息等
     */
    async UpdateCustomPerson(req, cb) {
        return this.request("UpdateCustomPerson", req, cb);
    }
    /**
     * 描述任务信息，如果任务成功完成，还将返回任务结果
     */
    async DescribeVideoSummaryDetail(req, cb) {
        return this.request("DescribeVideoSummaryDetail", req, cb);
    }
    /**
     * 删除自定义分类信息
     */
    async DeleteCustomCategory(req, cb) {
        return this.request("DeleteCustomCategory", req, cb);
    }
    /**
     * 增加自定义人脸图片，每个自定义人物最多可包含10张人脸图片

请注意，与创建自定义人物一样，图片数据优先级优于图片URL优先级
     */
    async AddCustomPersonImage(req, cb) {
        return this.request("AddCustomPersonImage", req, cb);
    }
    /**
     * 描述任务信息，如果任务成功完成，还将返回任务结果
     */
    async DescribeTaskDetail(req, cb) {
        return this.request("DescribeTaskDetail", req, cb);
    }
    /**
     * 创建默认自定义人物类型
     */
    async CreateDefaultCategories(req, cb) {
        return this.request("CreateDefaultCategories", req, cb);
    }
    /**
     * 描述智能标签任务进度。

请注意，**此接口仅返回任务执行状态信息，不返回任务执行结果**
     */
    async DescribeTask(req, cb) {
        return this.request("DescribeTask", req, cb);
    }
    /**
     * 创建一个视频缩编任务。

### 回调事件消息通知协议

#### 网络协议
- 回调接口协议目前仅支持http/https协议；
- 请求：HTTP POST 请求，包体内容为 JSON，每一种消息的具体包体内容参见后文。
- 应答：HTTP STATUS CODE = 200，服务端忽略应答包具体内容，为了协议友好，建议客户应答内容携带 JSON： `{"code":0}`

#### 通知可靠性

事件通知服务具备重试能力，事件通知失败后会总计重试3次；
为了避免重试对您的服务器以及网络带宽造成冲击，请保持正常回包。触发重试条件如下：
- 长时间（5 秒）未回包应答。
- 应答 HTTP STATUS 不为200。


#### 回调接口协议

##### 分析任务完成消息回调
| 参数名称 | 必选 | 类型 | 描述 |
|---------|---------|---------|---------|
| TaskId | 是 | String | 任务ID |
| TaskStatus | 是 | Integer | 任务执行状态 |
| FailedReason | 是 | String | 若任务失败，该字段为失败原因 |
     */
    async CreateVideoSummaryTask(req, cb) {
        return this.request("CreateVideoSummaryTask", req, cb);
    }
    /**
     * 描述自定义人物详细信息，包括人物信息与人物信息
     */
    async DescribeCustomPersonDetail(req, cb) {
        return this.request("DescribeCustomPersonDetail", req, cb);
    }
    /**
     * 创建自定义人物分类信息

当L2Category为空时，将创建一级自定义分类。
当L1Category与L2Category均不为空时，将创建二级自定义分类。请注意，**只有当一级自定义分类存在时，才可创建二级自定义分类**。
     */
    async CreateCustomCategory(req, cb) {
        return this.request("CreateCustomCategory", req, cb);
    }
    /**
     * 批量描述自定义人物
     */
    async DescribeCustomPersons(req, cb) {
        return this.request("DescribeCustomPersons", req, cb);
    }
    /**
     * 删除自定义人物
     */
    async DeleteCustomPerson(req, cb) {
        return this.request("DeleteCustomPerson", req, cb);
    }
    /**
     * 描述媒资文件信息，包括媒资状态，分辨率，帧率等。

如果媒资文件未完成导入，本接口将仅输出媒资文件的状态信息；导入完成后，本接口还将输出媒资文件的其他元信息。
     */
    async DescribeMedia(req, cb) {
        return this.request("DescribeMedia", req, cb);
    }
    /**
     * 获取用户资源使用量
     */
    async DescribeUsageAmount(req, cb) {
        return this.request("DescribeUsageAmount", req, cb);
    }
    /**
     * 将MediaId对应的媒资文件从系统中删除。

**请注意，本接口仅删除媒资文件，媒资文件对应的视频分析结果不会被删除**。如您需要删除结构化分析结果，请调用DeleteTask接口。
     */
    async DeleteMedia(req, cb) {
        return this.request("DeleteMedia", req, cb);
    }
    /**
     * 用户设置对应事件的回调地址

### 回调事件消息通知协议

#### 网络协议
- 回调接口协议目前仅支持http/https协议；
- 请求：HTTP POST 请求，包体内容为 JSON，每一种消息的具体包体内容参见后文。
- 应答：HTTP STATUS CODE = 200，服务端忽略应答包具体内容，为了协议友好，建议客户应答内容携带 JSON： `{"code":0}`

#### 通知可靠性

事件通知服务具备重试能力，事件通知失败后会总计重试3次；
为了避免重试对您的服务器以及网络带宽造成冲击，请保持正常回包。触发重试条件如下：
- 长时间（5 秒）未回包应答。
- 应答 HTTP STATUS 不为200。


#### 回调接口协议

##### 分析任务完成消息回调
| 参数名称 | 必选 | 类型 | 描述 |
|---------|---------|---------|---------|
| EventType | 是 | int | 回调时间类型，1-任务分析完成，2-媒资导入完成 |
| TaskId | 是 | String | 任务ID |
| TaskStatus | 是 | [TaskStatus](/document/product/1509/65063#TaskInfo) | 任务执行状态 |
| FailedReason | 是 | String | 若任务失败，该字段为失败原因 |


##### 导入媒资完成消息回调
| 参数名称 | 必选 | 类型 | 描述 |
|---------|---------|---------|---------|
| EventType | 是 | int | 回调时间类型，1-任务分析完成，2-媒资导入完成 |
| MediaId | 是 | String | 媒资ID |
| MediaStatus | 是 | [MediaStatus](/document/product/1509/65063#MediaInfo) | 媒资导入状态|
| FailedReason | 是 | String | 若任务失败，该字段为失败原因 |
     */
    async ModifyCallback(req, cb) {
        return this.request("ModifyCallback", req, cb);
    }
    /**
     * 依照输入条件，描述命中的任务信息，包括任务创建时间，处理时间信息等。

请注意，本接口最多支持同时描述**50**个任务信息
     */
    async DescribeTasks(req, cb) {
        return this.request("DescribeTasks", req, cb);
    }
    /**
     * 创建自定义人物库

Bucket的格式参考为 `bucketName-123456.cos.ap-shanghai.myqcloud.com`

在调用CreateCustomPerson和AddCustomPersonImage接口之前，请先确保本接口成功调用。当前每个用户只支持一个自定义人物库，一旦自定义人物库创建成功，后续接口调用均会返回人物库已存在错误。

由于人脸图片对于自定义人物识别至关重要，因此自定义人物识别功能需要用户显式指定COS存储桶方可使用。具体来说，自定义人物识别功能接口(主要是CreateCustomPerson和AddCustomPersonImage)会在此COS桶下面新建IVLDCustomPersonImage目录，并在此目录下存储自定义人物图片数据以支持后续潜在的特征更新。

请注意：本接口指定的COS桶仅用于**备份存储自定义人物图片**，CreateCustomPerson和AddCustomPersonImage接口入参URL可使用任意COS存储桶下的任意图片。

**重要**：请务必确保本接口指定的COS存储桶存在(不要手动删除COS桶)。COS存储桶一旦指定，将不能修改。

     */
    async CreateCustomGroup(req, cb) {
        return this.request("CreateCustomGroup", req, cb);
    }
    /**
     * 批量描述自定义人物分类信息
     */
    async DescribeCustomCategories(req, cb) {
        return this.request("DescribeCustomCategories", req, cb);
    }
    /**
     * 删除任务信息

请注意，本接口**不会**删除媒资文件

只有已完成(成功或者失败)的任务可以删除，**正在执行中的任务不支持删除**
     */
    async DeleteTask(req, cb) {
        return this.request("DeleteTask", req, cb);
    }
    /**
     * 描述自定义人物库信息，当前库大小(库中有多少人脸)，以及库中的存储桶
     */
    async DescribeCustomGroup(req, cb) {
        return this.request("DescribeCustomGroup", req, cb);
    }
    /**
     * 依照输入条件，描述命中的媒资文件信息，包括媒资状态，分辨率，帧率等。

请注意，本接口最多支持同时描述**50**个媒资文件

如果媒资文件未完成导入，本接口将仅输出媒资文件的状态信息；导入完成后，本接口还将输出媒资文件的其他元信息。
     */
    async DescribeMedias(req, cb) {
        return this.request("DescribeMedias", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249165, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.keewidb = void 0;
const v20220308_1 = require("./v20220308");
exports.keewidb = {
    v20220308: v20220308_1.v20220308,
};

}, function(modId) { var map = {"./v20220308":1738984249166}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249166, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220308 = void 0;
const Models = require("./keewidb_models");
const keewidb_client_1 = require("./keewidb_client");
exports.v20220308 = {
    Client: keewidb_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./keewidb_models":1738984249167,"./keewidb_client":1738984249168}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249167, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249168, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * keewidb client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("keewidb.tencentcloudapi.com", "2022-03-08", clientConfig);
    }
    /**
     * 本接口（DescribeInstanceNodeInfo）查询实例节点信息。
     */
    async DescribeInstanceNodeInfo(req, cb) {
        return this.request("DescribeInstanceNodeInfo", req, cb);
    }
    /**
     * 本接口（ModifyMaintenanceWindow）修改实例维护时间窗时间。
     */
    async ModifyMaintenanceWindow(req, cb) {
        return this.request("ModifyMaintenanceWindow", req, cb);
    }
    /**
     * 本接口（DescribeTaskList）用于查询任务列表信息。
     */
    async DescribeTaskList(req, cb) {
        return this.request("DescribeTaskList", req, cb);
    }
    /**
     * 本接口（CleanUpInstance）用于立即下线回收站已隔离的实例。
     */
    async CleanUpInstance(req, cb) {
        return this.request("CleanUpInstance", req, cb);
    }
    /**
     * 本接口（DescribeMaintenanceWindow）用于查询实例维护时间窗。
     */
    async DescribeMaintenanceWindow(req, cb) {
        return this.request("DescribeMaintenanceWindow", req, cb);
    }
    /**
     * 本接口（DescribeInstanceBackups）用于查询实例全量备份列表。
     */
    async DescribeInstanceBackups(req, cb) {
        return this.request("DescribeInstanceBackups", req, cb);
    }
    /**
     * 本接口（ModifyNetworkConfig）用于修改实例网络配置。
     */
    async ModifyNetworkConfig(req, cb) {
        return this.request("ModifyNetworkConfig", req, cb);
    }
    /**
     * 本接口（ModifyAutoBackupConfig）用于修改自动备份配置。
     */
    async ModifyAutoBackupConfig(req, cb) {
        return this.request("ModifyAutoBackupConfig", req, cb);
    }
    /**
     * 本接口（ResetPassword）用于重置数据库访问密码。
     */
    async ResetPassword(req, cb) {
        return this.request("ResetPassword", req, cb);
    }
    /**
     * 本接口（DescribeInstances）可以根据地域、网络、实例id、标签、计费方式等条件，搜索查询实例列表。
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 本接口（DescribeConnectionConfig）用于查询实例连接配置，包括出流量和入流量带宽、最大连接数限制。
     */
    async DescribeConnectionConfig(req, cb) {
        return this.request("DescribeConnectionConfig", req, cb);
    }
    /**
     * 本接口（DescribeInstanceBinlogs）用于查询增量备份列表。
     */
    async DescribeInstanceBinlogs(req, cb) {
        return this.request("DescribeInstanceBinlogs", req, cb);
    }
    /**
     * 本接口（DescribeAutoBackupConfig）用于获取自动备份配置。
     */
    async DescribeAutoBackupConfig(req, cb) {
        return this.request("DescribeAutoBackupConfig", req, cb);
    }
    /**
     * 本接口（ChangeInstanceMaster）用于将副本节点提升为主节点。
     */
    async ChangeInstanceMaster(req, cb) {
        return this.request("ChangeInstanceMaster", req, cb);
    }
    /**
     * 创建数据库实例
     */
    async CreateInstances(req, cb) {
        return this.request("CreateInstances", req, cb);
    }
    /**
     * 本接口（RenewInstance）用于为包年包月计费实例续费。
     */
    async RenewInstance(req, cb) {
        return this.request("RenewInstance", req, cb);
    }
    /**
     * 本接口（DescribeTaskInfo）用于查询异步任务结果。
     */
    async DescribeTaskInfo(req, cb) {
        return this.request("DescribeTaskInfo", req, cb);
    }
    /**
     * 本接口（DescribeProxySlowLog）用于查询代理（Proxy）慢日志。
     */
    async DescribeProxySlowLog(req, cb) {
        return this.request("DescribeProxySlowLog", req, cb);
    }
    /**
     * 本接口(DescribeProjectSecurityGroups)用于查询项目的安全组详情。
     */
    async DescribeProjectSecurityGroups(req, cb) {
        return this.request("DescribeProjectSecurityGroups", req, cb);
    }
    /**
     * 本接口（DescribeTendisSlowLog）用于查询实例慢日志。
     */
    async DescribeTendisSlowLog(req, cb) {
        return this.request("DescribeTendisSlowLog", req, cb);
    }
    /**
     * 本接口 (AssociateSecurityGroups) 用于安全组批量绑定多个指定实例。
     */
    async AssociateSecurityGroups(req, cb) {
        return this.request("AssociateSecurityGroups", req, cb);
    }
    /**
     * 本接口（ModifyInstanceParams）用于修改实例参数配置。
     */
    async ModifyInstanceParams(req, cb) {
        return this.request("ModifyInstanceParams", req, cb);
    }
    /**
     * 本接口(ModifyDBInstanceSecurityGroups)用于修改实例绑定的安全组。
     */
    async ModifyDBInstanceSecurityGroups(req, cb) {
        return this.request("ModifyDBInstanceSecurityGroups", req, cb);
    }
    /**
     * 本接口（DescribeInstanceParams）用于查询实例的参数列表。
     */
    async DescribeInstanceParams(req, cb) {
        return this.request("DescribeInstanceParams", req, cb);
    }
    /**
     * 本接口（DescribeInstanceReplicas）用于获取实例副本节点信息。
     */
    async DescribeInstanceReplicas(req, cb) {
        return this.request("DescribeInstanceReplicas", req, cb);
    }
    /**
     * 本接口（ModifyConnectionConfig）用于修改实例的连接配置，包括带宽和最大连接数。
     */
    async ModifyConnectionConfig(req, cb) {
        return this.request("ModifyConnectionConfig", req, cb);
    }
    /**
     * 本接口查询指定可用区和实例类型下keewidb 的售卖规格， 如果用户不在购买白名单中，将不能查询该可用区或该类型的售卖规格详情。申请购买某地域白名单可以提交工单
     */
    async DescribeProductInfo(req, cb) {
        return this.request("DescribeProductInfo", req, cb);
    }
    /**
     * 本接口（UpgradeInstance）用于对实例进行配置变更。
     */
    async UpgradeInstance(req, cb) {
        return this.request("UpgradeInstance", req, cb);
    }
    /**
     * 本接口(DescribeDBSecurityGroups)用于查询实例的安全组详情。
     */
    async DescribeDBSecurityGroups(req, cb) {
        return this.request("DescribeDBSecurityGroups", req, cb);
    }
    /**
     * 手动发起备份
     */
    async CreateBackupManually(req, cb) {
        return this.request("CreateBackupManually", req, cb);
    }
    /**
     * 本接口（DestroyPrepaidInstance）用于退还包年包月计费实例。
     */
    async DestroyPrepaidInstance(req, cb) {
        return this.request("DestroyPrepaidInstance", req, cb);
    }
    /**
     * 本接口（DescribeInstanceParamRecords）查询参数配置修改历史列表。
     */
    async DescribeInstanceParamRecords(req, cb) {
        return this.request("DescribeInstanceParamRecords", req, cb);
    }
    /**
     * 本接口（ClearInstance）用于清空实例数据。
     */
    async ClearInstance(req, cb) {
        return this.request("ClearInstance", req, cb);
    }
    /**
     * 本接口（DescribeInstanceDealDetail）用于查询预付费订单信息。
     */
    async DescribeInstanceDealDetail(req, cb) {
        return this.request("DescribeInstanceDealDetail", req, cb);
    }
    /**
     * 本接口（DestroyPostpaidInstance）用于退还按量计费实例。
     */
    async DestroyPostpaidInstance(req, cb) {
        return this.request("DestroyPostpaidInstance", req, cb);
    }
    /**
     * 本接口(DisassociateSecurityGroups)用于安全组批量解绑实例。
     */
    async DisassociateSecurityGroups(req, cb) {
        return this.request("DisassociateSecurityGroups", req, cb);
    }
    /**
     * 本接口（ModifyInstance）用于修改实例相关信息。
     */
    async ModifyInstance(req, cb) {
        return this.request("ModifyInstance", req, cb);
    }
    /**
     * 本接口（StartUpInstance）用于按量计费实例解隔离
     */
    async StartUpInstance(req, cb) {
        return this.request("StartUpInstance", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249169, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.kms = void 0;
const v20190118_1 = require("./v20190118");
exports.kms = {
    v20190118: v20190118_1.v20190118,
};

}, function(modId) { var map = {"./v20190118":1738984249170}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249170, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190118 = void 0;
const Models = require("./kms_models");
const kms_client_1 = require("./kms_client");
exports.v20190118 = {
    Client: kms_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./kms_models":1738984249171,"./kms_client":1738984249172}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249171, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249172, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * kms client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("kms.tencentcloudapi.com", "2019-01-18", clientConfig);
    }
    /**
     * 使用后量子密码算法密钥对签名进行验证。
     */
    async PostQuantumCryptoVerify(req, cb) {
        return this.request("PostQuantumCryptoVerify", req, cb);
    }
    /**
     * 本接口用于加密最多为4KB任意数据，可用于加密数据库密码，RSA Key，或其它较小的敏感信息。对于应用的数据加密，使用GenerateDataKey生成的DataKey进行本地数据的加解密操作
     */
    async Encrypt(req, cb) {
        return this.request("Encrypt", req, cb);
    }
    /**
     * 本接口用于解密密文，得到明文数据。
     */
    async Decrypt(req, cb) {
        return this.request("Decrypt", req, cb);
    }
    /**
     * 用于修改CMK的别名。对于处于PendingDelete状态的CMK禁止修改。
     */
    async UpdateAlias(req, cb) {
        return this.request("UpdateAlias", req, cb);
    }
    /**
     * 删除白盒密钥, 注意：必须先禁用后，才可以删除。
     */
    async DeleteWhiteBoxKey(req, cb) {
        return this.request("DeleteWhiteBoxKey", req, cb);
    }
    /**
     * 用于导入密钥材料。只有类型为EXTERNAL 的CMK 才可以导入，导入的密钥材料使用 GetParametersForImport 获取的密钥进行加密。可以为指定的 CMK 重新导入密钥材料，并重新指定过期时间，但必须导入相同的密钥材料。CMK 密钥材料导入后不可以更换密钥材料。导入的密钥材料过期或者被删除后，指定的CMK将无法使用，需要再次导入相同的密钥材料才能正常使用。CMK是独立的，同样的密钥材料可导入不同的 CMK 中，但使用其中一个 CMK 加密的数据无法使用另一个 CMK解密。
只有Enabled 和 PendingImport状态的CMK可以导入密钥材料。
     */
    async ImportKeyMaterial(req, cb) {
        return this.request("ImportKeyMaterial", req, cb);
    }
    /**
     * 该接口用于获取非对称密钥的公钥信息，可用于本地数据加密或验签。只有处于Enabled状态的非对称密钥才可能获取公钥。
     */
    async GetPublicKey(req, cb) {
        return this.request("GetPublicKey", req, cb);
    }
    /**
     * 本接口用于禁用一个主密钥，处于禁用状态的Key无法用于加密、解密操作。
     */
    async DisableKey(req, cb) {
        return this.request("DisableKey", req, cb);
    }
    /**
     * 本接口生成一个数据密钥，您可以用这个密钥进行本地数据的加密。
     */
    async GenerateDataKey(req, cb) {
        return this.request("GenerateDataKey", req, cb);
    }
    /**
     * 用于查询该用户是否已开通KMS服务
     */
    async GetServiceStatus(req, cb) {
        return this.request("GetServiceStatus", req, cb);
    }
    /**
     * 使用指定的SM2非对称密钥的私钥进行数据解密，密文必须是使用对应公钥加密的。处于Enabled 状态的非对称密钥才能进行解密操作。传入的密文的长度不能超过256字节。
     */
    async AsymmetricSm2Decrypt(req, cb) {
        return this.request("AsymmetricSm2Decrypt", req, cb);
    }
    /**
     * 非对称密钥签名。
注意：只有 KeyUsage 为 ASYMMETRIC_SIGN_VERIFY_SM2、ASYMMETRIC_SIGN_VERIFY_ECC 或其他支持的 ASYMMETRIC_SIGN_VERIFY_${ALGORITHM} 的密钥才可以使用签名功能。
     */
    async SignByAsymmetricKey(req, cb) {
        return this.request("SignByAsymmetricKey", req, cb);
    }
    /**
     * 取消CMK的计划删除操作
     */
    async CancelKeyDeletion(req, cb) {
        return this.request("CancelKeyDeletion", req, cb);
    }
    /**
     * 查询指定的CMK是否开启了密钥轮换功能。
     */
    async GetKeyRotationStatus(req, cb) {
        return this.request("GetKeyRotationStatus", req, cb);
    }
    /**
     * 获取白盒密钥列表
     */
    async DescribeWhiteBoxKeyDetails(req, cb) {
        return this.request("DescribeWhiteBoxKeyDetails", req, cb);
    }
    /**
     * 记录当前key被哪个云产品的那个资源所使用。如果当前key设置了自动过期，则取消该设置，确保当前key不会自动失效。如果当前关联关系已经创建，也返回成功。
     */
    async BindCloudResource(req, cb) {
        return this.request("BindCloudResource", req, cb);
    }
    /**
     * 对密钥进行归档，被归档的密钥只能用于解密，不能加密
     */
    async ArchiveKey(req, cb) {
        return this.request("ArchiveKey", req, cb);
    }
    /**
     * 取消密钥归档，取消后密钥的状态变为Enabled。
     */
    async CancelKeyArchive(req, cb) {
        return this.request("CancelKeyArchive", req, cb);
    }
    /**
     * 使用指定CMK对密文重新加密。
     */
    async ReEncrypt(req, cb) {
        return this.request("ReEncrypt", req, cb);
    }
    /**
     * 批量启用白盒密钥
     */
    async EnableWhiteBoxKeys(req, cb) {
        return this.request("EnableWhiteBoxKeys", req, cb);
    }
    /**
     * 列出当前Region支持的加密方式
     */
    async ListAlgorithms(req, cb) {
        return this.request("ListAlgorithms", req, cb);
    }
    /**
     * 用于获取指定KeyId的主密钥属性详情信息。
     */
    async DescribeKey(req, cb) {
        return this.request("DescribeKey", req, cb);
    }
    /**
     * 列出账号下面状态为Enabled， Disabled 和 PendingImport 的CMK KeyId 列表
     */
    async ListKeys(req, cb) {
        return this.request("ListKeys", req, cb);
    }
    /**
     * 随机数生成接口。
     */
    async GenerateRandom(req, cb) {
        return this.request("GenerateRandom", req, cb);
    }
    /**
     * 本接口使用后量子密码算法密钥，解密密文，并得到明文数据。
     */
    async PostQuantumCryptoDecrypt(req, cb) {
        return this.request("PostQuantumCryptoDecrypt", req, cb);
    }
    /**
     * 覆盖指定密钥的设备指纹信息
     */
    async OverwriteWhiteBoxDeviceFingerprints(req, cb) {
        return this.request("OverwriteWhiteBoxDeviceFingerprints", req, cb);
    }
    /**
     * 创建用户管理数据密钥的主密钥CMK（Custom Master Key）。
     */
    async CreateKey(req, cb) {
        return this.request("CreateKey", req, cb);
    }
    /**
     * 展示白盒密钥的信息
     */
    async DescribeWhiteBoxKey(req, cb) {
        return this.request("DescribeWhiteBoxKey", req, cb);
    }
    /**
     * 使用白盒密钥进行加密
     */
    async EncryptByWhiteBox(req, cb) {
        return this.request("EncryptByWhiteBox", req, cb);
    }
    /**
     * 获取导入主密钥（CMK）材料的参数，返回的Token作为执行ImportKeyMaterial的参数之一，返回的PublicKey用于对自主导入密钥材料进行加密。返回的Token和PublicKey 24小时后失效，失效后如需重新导入，需要再次调用该接口获取新的Token和PublicKey。
     */
    async GetParametersForImport(req, cb) {
        return this.request("GetParametersForImport", req, cb);
    }
    /**
     * 批量禁用白盒密钥
     */
    async DisableWhiteBoxKeys(req, cb) {
        return this.request("DisableWhiteBoxKeys", req, cb);
    }
    /**
     * 根据指定Offset和Limit获取主密钥列表详情。
     */
    async ListKeyDetail(req, cb) {
        return this.request("ListKeyDetail", req, cb);
    }
    /**
     * 对指定的CMK禁止密钥轮换功能。
     */
    async DisableKeyRotation(req, cb) {
        return this.request("DisableKeyRotation", req, cb);
    }
    /**
     * 禁用白盒密钥
     */
    async DisableWhiteBoxKey(req, cb) {
        return this.request("DisableWhiteBoxKey", req, cb);
    }
    /**
     * 该接口用于批量启用CMK。
     */
    async EnableKeys(req, cb) {
        return this.request("EnableKeys", req, cb);
    }
    /**
     * CMK计划删除接口，用于指定CMK删除的时间，可选时间区间为[7,30]天
     */
    async ScheduleKeyDeletion(req, cb) {
        return this.request("ScheduleKeyDeletion", req, cb);
    }
    /**
     * 获取指定密钥的设备指纹列表
     */
    async DescribeWhiteBoxDeviceFingerprints(req, cb) {
        return this.request("DescribeWhiteBoxDeviceFingerprints", req, cb);
    }
    /**
     * 使用指定的RSA非对称密钥的私钥进行数据解密，密文必须是使用对应公钥加密的。处于Enabled 状态的非对称密钥才能进行解密操作。
     */
    async AsymmetricRsaDecrypt(req, cb) {
        return this.request("AsymmetricRsaDecrypt", req, cb);
    }
    /**
     * 删除指定（key, 资源，云产品）的记录，以表明：指定的云产品的资源已不再使用当前的key。
     */
    async UnbindCloudResource(req, cb) {
        return this.request("UnbindCloudResource", req, cb);
    }
    /**
     * 对指定的CMK开启密钥轮换功能。
     */
    async EnableKeyRotation(req, cb) {
        return this.request("EnableKeyRotation", req, cb);
    }
    /**
     * 创建白盒密钥。 密钥个数的上限为 50。
     */
    async CreateWhiteBoxKey(req, cb) {
        return this.request("CreateWhiteBoxKey", req, cb);
    }
    /**
     * 本接口使用后量子密码算法密钥，可加密最多为4KB任意数据，可用于加密数据库密码，RSA Key，或其它较小的敏感信息。对于应用的数据加密，使用GenerateDataKey生成的DataKey进行本地数据的加解密操作。
     */
    async PostQuantumCryptoEncrypt(req, cb) {
        return this.request("PostQuantumCryptoEncrypt", req, cb);
    }
    /**
     * 启用白盒密钥
     */
    async EnableWhiteBoxKey(req, cb) {
        return this.request("EnableWhiteBoxKey", req, cb);
    }
    /**
     * 用于启用一个指定的CMK。
     */
    async EnableKey(req, cb) {
        return this.request("EnableKey", req, cb);
    }
    /**
     * 用于删除导入的密钥材料，仅对EXTERNAL类型的CMK有效，该接口将CMK设置为PendingImport 状态，并不会删除CMK，在重新进行密钥导入后可继续使用。彻底删除CMK请使用 ScheduleKeyDeletion 接口。
     */
    async DeleteImportedKeyMaterial(req, cb) {
        return this.request("DeleteImportedKeyMaterial", req, cb);
    }
    /**
     * 该接口用于批量获取主密钥属性信息。
     */
    async DescribeKeys(req, cb) {
        return this.request("DescribeKeys", req, cb);
    }
    /**
     * 获取白盒密钥服务状态
     */
    async DescribeWhiteBoxServiceStatus(req, cb) {
        return this.request("DescribeWhiteBoxServiceStatus", req, cb);
    }
    /**
     * 该接口用于对指定的cmk修改描述信息。对于处于PendingDelete状态的CMK禁止修改。
     */
    async UpdateKeyDescription(req, cb) {
        return this.request("UpdateKeyDescription", req, cb);
    }
    /**
     * 该接口用于批量禁止CMK的使用。
     */
    async DisableKeys(req, cb) {
        return this.request("DisableKeys", req, cb);
    }
    /**
     * 获取白盒解密密钥
     */
    async DescribeWhiteBoxDecryptKey(req, cb) {
        return this.request("DescribeWhiteBoxDecryptKey", req, cb);
    }
    /**
     * 使用后量子密码算法签名验签密钥进行签名。
     */
    async PostQuantumCryptoSign(req, cb) {
        return this.request("PostQuantumCryptoSign", req, cb);
    }
    /**
     * 获取可以提供KMS服务的地域列表
     */
    async GetRegions(req, cb) {
        return this.request("GetRegions", req, cb);
    }
    /**
     * 使用非对称密钥验签
     */
    async VerifyByAsymmetricKey(req, cb) {
        return this.request("VerifyByAsymmetricKey", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249173, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.lcic = void 0;
const v20220817_1 = require("./v20220817");
exports.lcic = {
    v20220817: v20220817_1.v20220817,
};

}, function(modId) { var map = {"./v20220817":1738984249174}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249174, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220817 = void 0;
const Models = require("./lcic_models");
const lcic_client_1 = require("./lcic_client");
exports.v20220817 = {
    Client: lcic_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./lcic_models":1738984249175,"./lcic_client":1738984249176}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249175, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249176, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * lcic client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("lcic.tencentcloudapi.com", "2022-08-17", clientConfig);
    }
    /**
     * 获取应用详情
     */
    async DescribeAppDetail(req, cb) {
        return this.request("DescribeAppDetail", req, cb);
    }
    /**
     * 根据房间ID获取群组中被禁言的用户列表。
     */
    async DescribeRoomForbiddenUser(req, cb) {
        return this.request("DescribeRoomForbiddenUser", req, cb);
    }
    /**
     * App 管理员可以通过该接口在群组中发送通知、公告等。目前仅支持文本消息。
     */
    async SendRoomNotificationMessage(req, cb) {
        return this.request("SendRoomNotificationMessage", req, cb);
    }
    /**
     * 录制流查询
     */
    async DescribeRecordStream(req, cb) {
        return this.request("DescribeRecordStream", req, cb);
    }
    /**
     * 有新接口替换

批量获取文档信息（已废弃，替代接口BatchDescribeDocument）
     */
    async DescribeDocuments(req, cb) {
        return this.request("DescribeDocuments", req, cb);
    }
    /**
     * 此接口获取指定房间下课件列表
     */
    async DescribeDocumentsByRoom(req, cb) {
        return this.request("DescribeDocumentsByRoom", req, cb);
    }
    /**
     * 修改房间
     */
    async ModifyRoom(req, cb) {
        return this.request("ModifyRoom", req, cb);
    }
    /**
     * 删除设置自定义元素。如果参数scenes为空则删除所有自定义元素，否则删除指定的scene自定义元素。
     */
    async DeleteAppCustomContent(req, cb) {
        return this.request("DeleteAppCustomContent", req, cb);
    }
    /**
     * 获取房间历史消息(房间历史消息保存7天)
     */
    async GetRoomMessage(req, cb) {
        return this.request("GetRoomMessage", req, cb);
    }
    /**
     * 设置水印
     */
    async SetWatermark(req, cb) {
        return this.request("SetWatermark", req, cb);
    }
    /**
     * 此接口用于修改用户信息，例如头像、昵称（用户名）等。注意，课中的用户信息不会立即同步修改，需待下次上课时，修改后的信息才会更新显示。
     */
    async ModifyUserProfile(req, cb) {
        return this.request("ModifyUserProfile", req, cb);
    }
    /**
     * 获取水印设置
     */
    async GetWatermark(req, cb) {
        return this.request("GetWatermark", req, cb);
    }
    /**
     * 此接口用于获取群组详情
     */
    async DescribeGroup(req, cb) {
        return this.request("DescribeGroup", req, cb);
    }
    /**
     * 修改应用
     */
    async ModifyApp(req, cb) {
        return this.request("ModifyApp", req, cb);
    }
    /**
     * 文档从房间解绑
     */
    async UnbindDocumentFromRoom(req, cb) {
        return this.request("UnbindDocumentFromRoom", req, cb);
    }
    /**
     * 此接口用于获取指定应用ID下用户列表
     */
    async DescribeSdkAppIdUsers(req, cb) {
        return this.request("DescribeSdkAppIdUsers", req, cb);
    }
    /**
     * 开始房间的直播。 说明：开始房间接口调用之前需要有用户进入课堂初始化课堂信息。
     */
    async StartRoom(req, cb) {
        return this.request("StartRoom", req, cb);
    }
    /**
     * 此接口用于删除群组中指定成员
     */
    async DeleteGroupMember(req, cb) {
        return this.request("DeleteGroupMember", req, cb);
    }
    /**
     * 解禁从房间里面踢出的用户
     */
    async UnblockKickedUser(req, cb) {
        return this.request("UnblockKickedUser", req, cb);
    }
    /**
     * 创建房间内可以使用的文档。
     */
    async CreateDocument(req, cb) {
        return this.request("CreateDocument", req, cb);
    }
    /**
     * 获取巡课列表
     */
    async DescribeSupervisors(req, cb) {
        return this.request("DescribeSupervisors", req, cb);
    }
    /**
     * 此接口用于删除指定群组，支持批量操作。
     */
    async DeleteGroup(req, cb) {
        return this.request("DeleteGroup", req, cb);
    }
    /**
     * 获取用户信息
     */
    async DescribeUser(req, cb) {
        return this.request("DescribeUser", req, cb);
    }
    /**
     * 此接口用于获取群组成员列表
     */
    async DescribeGroupMemberList(req, cb) {
        return this.request("DescribeGroupMemberList", req, cb);
    }
    /**
     * 此接口修改群组信息
     */
    async ModifyGroup(req, cb) {
        return this.request("ModifyGroup", req, cb);
    }
    /**
     * 如果批量注册的用户已存在，则会被覆盖。一次最多注册1000个用户。默认请求频率限制：10次/秒
     */
    async BatchRegister(req, cb) {
        return this.request("BatchRegister", req, cb);
    }
    /**
     * 删除巡课
     */
    async DeleteSupervisor(req, cb) {
        return this.request("DeleteSupervisor", req, cb);
    }
    /**
     * 此接口用于批量删除成员列表到指定群组列表
     */
    async BatchDeleteGroupMember(req, cb) {
        return this.request("BatchDeleteGroupMember", req, cb);
    }
    /**
     * 获取房间事件,仅在课堂结束1小时内有效。
     */
    async GetRoomEvent(req, cb) {
        return this.request("GetRoomEvent", req, cb);
    }
    /**
     * 删除已注册用户。注：如果该成员已被添加到群组，请先在群组中删除该成员。
     */
    async DeleteUser(req, cb) {
        return this.request("DeleteUser", req, cb);
    }
    /**
     * 获取房间配置信息
     */
    async DescribeRoom(req, cb) {
        return this.request("DescribeRoom", req, cb);
    }
    /**
     * 删除指定房间的录制文件
     */
    async DeleteRecord(req, cb) {
        return this.request("DeleteRecord", req, cb);
    }
    /**
     * 1、按照指定身份发送消息，目前支持表情消息、图片消息、文本消息。
     */
    async SendRoomNormalMessage(req, cb) {
        return this.request("SendRoomNormalMessage", req, cb);
    }
    /**
     * 查询录制信息
     */
    async DescribeRecord(req, cb) {
        return this.request("DescribeRecord", req, cb);
    }
    /**
     * 获取群组列表
     */
    async DescribeGroupList(req, cb) {
        return this.request("DescribeGroupList", req, cb);
    }
    /**
     * 此接口用于批量添加成员列表到指定群组
     */
    async BatchAddGroupMember(req, cb) {
        return this.request("BatchAddGroupMember", req, cb);
    }
    /**
     * 此接口用于添加成员列表到指定群组
     */
    async AddGroupMember(req, cb) {
        return this.request("AddGroupMember", req, cb);
    }
    /**
     * 注册用户
     */
    async RegisterUser(req, cb) {
        return this.request("RegisterUser", req, cb);
    }
    /**
     * 获取房间统计信息，仅可在房间结束后调用。
     */
    async DescribeRoomStatistics(req, cb) {
        return this.request("DescribeRoomStatistics", req, cb);
    }
    /**
     * 绑定文档到房间
     */
    async BindDocumentToRoom(req, cb) {
        return this.request("BindDocumentToRoom", req, cb);
    }
    /**
     * 使用源账号登录，源账号为注册时填入的originId
     */
    async LoginOriginId(req, cb) {
        return this.request("LoginOriginId", req, cb);
    }
    /**
     * 禁止指定房间中某些用户在一段时间内发言。
取消对某些用户的禁言。
被禁言用户退出房间之后再进入同一房间，禁言仍然有效。
     */
    async ForbidSendMsg(req, cb) {
        return this.request("ForbidSendMsg", req, cb);
    }
    /**
     * 登录
     */
    async LoginUser(req, cb) {
        return this.request("LoginUser", req, cb);
    }
    /**
     * 此接口根据成员列表创建群组
     */
    async CreateGroupWithMembers(req, cb) {
        return this.request("CreateGroupWithMembers", req, cb);
    }
    /**
     * 开发商信息获取
     */
    async DescribeDeveloper(req, cb) {
        return this.request("DescribeDeveloper", req, cb);
    }
    /**
     * 创建巡课
     */
    async CreateSupervisor(req, cb) {
        return this.request("CreateSupervisor", req, cb);
    }
    /**
     * 获取房间提问列表
     */
    async DescribeQuestionList(req, cb) {
        return this.request("DescribeQuestionList", req, cb);
    }
    /**
     * 设置应用的自定义内容，包括应用图标，自定义的代码等。如果已存在，则为更新。更新js、css内容后，要生效也需要调用该接口
     */
    async SetAppCustomContent(req, cb) {
        return this.request("SetAppCustomContent", req, cb);
    }
    /**
     * 批量获取文档详情
     */
    async BatchDescribeDocument(req, cb) {
        return this.request("BatchDescribeDocument", req, cb);
    }
    /**
     * 获取当前房间的成员列表，房间结束或过期后无法使用。
     */
    async DescribeCurrentMemberList(req, cb) {
        return this.request("DescribeCurrentMemberList", req, cb);
    }
    /**
     * 批量创建房间接口
     */
    async BatchCreateRoom(req, cb) {
        return this.request("BatchCreateRoom", req, cb);
    }
    /**
     * 获取房间答题详情
     */
    async DescribeAnswerList(req, cb) {
        return this.request("DescribeAnswerList", req, cb);
    }
    /**
     * 删除文档
     */
    async DeleteDocument(req, cb) {
        return this.request("DeleteDocument", req, cb);
    }
    /**
     * 停止录制
     */
    async StopRecord(req, cb) {
        return this.request("StopRecord", req, cb);
    }
    /**
     * 批量删除多个房间的录制文件
     */
    async BatchDeleteRecord(req, cb) {
        return this.request("BatchDeleteRecord", req, cb);
    }
    /**
     * 结束房间的直播
     */
    async EndRoom(req, cb) {
        return this.request("EndRoom", req, cb);
    }
    /**
     * 设置跑马灯参数设置
     */
    async SetMarquee(req, cb) {
        return this.request("SetMarquee", req, cb);
    }
    /**
     * 获取房间列表
     */
    async GetRooms(req, cb) {
        return this.request("GetRooms", req, cb);
    }
    /**
     * 从房间里面踢出用户
     */
    async KickUserFromRoom(req, cb) {
        return this.request("KickUserFromRoom", req, cb);
    }
    /**
     * 删除房间
     */
    async DeleteRoom(req, cb) {
        return this.request("DeleteRoom", req, cb);
    }
    /**
     * 获取文档信息
     */
    async DescribeDocument(req, cb) {
        return this.request("DescribeDocument", req, cb);
    }
    /**
     * 开始录制
     */
    async StartRecord(req, cb) {
        return this.request("StartRecord", req, cb);
    }
    /**
     * 此接口会聚合子群组创建联合群组
     */
    async CreateGroupWithSubGroup(req, cb) {
        return this.request("CreateGroupWithSubGroup", req, cb);
    }
    /**
     * 查询跑马灯配置
     */
    async DescribeMarquee(req, cb) {
        return this.request("DescribeMarquee", req, cb);
    }
    /**
     * 此接口用于批量创建群组
     */
    async BatchCreateGroupWithMembers(req, cb) {
        return this.request("BatchCreateGroupWithMembers", req, cb);
    }
    /**
     * 获取课堂评分列表
     */
    async DescribeScoreList(req, cb) {
        return this.request("DescribeScoreList", req, cb);
    }
    /**
     * 创建房间
     */
    async CreateRoom(req, cb) {
        return this.request("CreateRoom", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249177, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.lighthouse = void 0;
const v20200324_1 = require("./v20200324");
exports.lighthouse = {
    v20200324: v20200324_1.v20200324,
};

}, function(modId) { var map = {"./v20200324":1738984249178}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249178, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200324 = void 0;
const Models = require("./lighthouse_models");
const lighthouse_client_1 = require("./lighthouse_client");
exports.v20200324 = {
    Client: lighthouse_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./lighthouse_models":1738984249179,"./lighthouse_client":1738984249180}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249179, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249180, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * lighthouse client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("lighthouse.tencentcloudapi.com", "2020-03-24", clientConfig);
    }
    /**
     * 本接口 (ModifyFirewallTemplate) 用于修改防火墙模板。
     */
    async ModifyFirewallTemplate(req, cb) {
        return this.request("ModifyFirewallTemplate", req, cb);
    }
    /**
     * 本接口 (DeleteBlueprints) 用于删除镜像。
     */
    async DeleteBlueprints(req, cb) {
        return this.request("DeleteBlueprints", req, cb);
    }
    /**
     * 本接口（CancelShareBlueprintAcrossAccounts）用于取消镜像跨账号共享。
指定的镜像ID必须为自定义镜像，且指定账号ID必须已进行共享。
     */
    async CancelShareBlueprintAcrossAccounts(req, cb) {
        return this.request("CancelShareBlueprintAcrossAccounts", req, cb);
    }
    /**
     * 本接口（CreateFirewallRules）用于在实例上添加防火墙规则。


* FirewallVersion 为防火墙版本号，用户每次更新防火墙规则版本会自动加1，防止您更新的规则已过期，不填不考虑冲突。

在 FirewallRules 参数中：
* Protocol 字段支持输入 TCP，UDP，ICMP，ALL。
* Port 字段允许输入 ALL，或者一个单独的端口号，或者用逗号分隔的离散端口号，或者用减号分隔的两个端口号代表的端口范围。当 Port 为范围时，减号分隔的第一个端口号小于第二个端口号。当 Protocol 字段不是 TCP 或 UDP 时，Port 字段只能为空或 ALL。Port 字段长度不得超过 64。
* CidrBlock 字段允许输入符合 cidr 格式标准的任意字符串。租户之间网络隔离规则优先于防火墙中的内网规则。
* Action 字段只允许输入 ACCEPT 或 DROP。
* FirewallRuleDescription 字段长度不得超过 64。
     */
    async CreateFirewallRules(req, cb) {
        return this.request("CreateFirewallRules", req, cb);
    }
    /**
     * 本接口（ModifyInstancesAttribute）用于修改实例的属性。
* “实例名称”仅为方便用户自己管理之用。
* 支持批量操作。每次请求批量实例的上限为 100。
     */
    async ModifyInstancesAttribute(req, cb) {
        return this.request("ModifyInstancesAttribute", req, cb);
    }
    /**
     * 本接口 (DescribeCcnAttachedInstances) 用于查询云联网关联的实例信息。
     */
    async DescribeCcnAttachedInstances(req, cb) {
        return this.request("DescribeCcnAttachedInstances", req, cb);
    }
    /**
     * 本接口（DeleteKeyPairs）用于删除密钥对。
     */
    async DeleteKeyPairs(req, cb) {
        return this.request("DeleteKeyPairs", req, cb);
    }
    /**
     * 本接口（ModifyDisksRenewFlag）用于修改云硬盘续费标识。
     */
    async ModifyDisksRenewFlag(req, cb) {
        return this.request("ModifyDisksRenewFlag", req, cb);
    }
    /**
     * 重命名实例内的Docker容器，之后可以通过返回的ActivityId调用[DescribeDockerActivities](https://cloud.tencent.com/document/product/1207/95476)接口查询重命名情况。
     */
    async RenameDockerContainer(req, cb) {
        return this.request("RenameDockerContainer", req, cb);
    }
    /**
     * 本接口（ImportKeyPair）用于导入用户指定密钥对。
     */
    async ImportKeyPair(req, cb) {
        return this.request("ImportKeyPair", req, cb);
    }
    /**
     * 本接口（InquirePriceCreateDisks）用于新购云硬盘询价。
     */
    async InquirePriceCreateDisks(req, cb) {
        return this.request("InquirePriceCreateDisks", req, cb);
    }
    /**
     * 本接口 (TerminateInstances) 用于销毁实例。

* 处于 SHUTDOWN 状态的实例，可通过本接口销毁，且不可恢复。
* 支持批量操作，每次请求批量实例的上限为100。
* 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 <a href="https://cloud.tencent.com/document/product/1207/47573" target="_blank">DescribeInstances</a> 接口查询，如果实例的最新操作状态 (LatestOperationState) 为“SUCCESS”，则代表操作成功。
     */
    async TerminateInstances(req, cb) {
        return this.request("TerminateInstances", req, cb);
    }
    /**
     * 本接口（DescribeBundleDiscount）用于查询套餐折扣信息。
     */
    async DescribeBundleDiscount(req, cb) {
        return this.request("DescribeBundleDiscount", req, cb);
    }
    /**
     * 本接口 (ModifyBlueprintAttribute) 用于修改镜像属性。
     */
    async ModifyBlueprintAttribute(req, cb) {
        return this.request("ModifyBlueprintAttribute", req, cb);
    }
    /**
     * 重启实例内的Docker容器，之后可以通过返回的ActivityId调用[DescribeDockerActivities](https://cloud.tencent.com/document/product/1207/95476)接口查询重启情况。
     */
    async RestartDockerContainers(req, cb) {
        return this.request("RestartDockerContainers", req, cb);
    }
    /**
     * 本接口 (DescribeFirewallTemplateRules) 用于查询防火墙模板规则列表。
     */
    async DescribeFirewallTemplateRules(req, cb) {
        return this.request("DescribeFirewallTemplateRules", req, cb);
    }
    /**
     * 本接口 (ModifyDiskBackupsAttribute) 用于修改云硬盘备份点属性。
     */
    async ModifyDiskBackupsAttribute(req, cb) {
        return this.request("ModifyDiskBackupsAttribute", req, cb);
    }
    /**
     * 查询实例内的Docker容器配置信息
     */
    async DescribeDockerContainerConfiguration(req, cb) {
        return this.request("DescribeDockerContainerConfiguration", req, cb);
    }
    /**
     * 本接口（InquirePriceRenewDisks）用于续费云硬盘询价。
     */
    async InquirePriceRenewDisks(req, cb) {
        return this.request("InquirePriceRenewDisks", req, cb);
    }
    /**
     * 本接口(ModifyDisksAttribute)用于修改云硬盘属性。
     */
    async ModifyDisksAttribute(req, cb) {
        return this.request("ModifyDisksAttribute", req, cb);
    }
    /**
     * 后端代码已与23年2月4号下线
近90天只有一次调用记录，且明确返回前端接口下线错误信息

经评估无风险，操作接口下线

本接口用于设置实例默认登录密钥对属性。


     */
    async ModifyInstancesLoginKeyPairAttribute(req, cb) {
        return this.request("ModifyInstancesLoginKeyPairAttribute", req, cb);
    }
    /**
     * 重新创建并运行实例内的Docker容器，之后可以通过返回的ActivityId调用[DescribeDockerActivities](https://cloud.tencent.com/document/product/1207/95476)接口查询重建情况。
     */
    async RerunDockerContainer(req, cb) {
        return this.request("RerunDockerContainer", req, cb);
    }
    /**
     * 本接口（DescribeDisksReturnable）用于查询云硬盘是否可退还。
     */
    async DescribeDisksReturnable(req, cb) {
        return this.request("DescribeDisksReturnable", req, cb);
    }
    /**
     * 本接口（ModifyFirewallRules）用于重置实例防火墙规则。

本接口先删除当前实例的所有防火墙规则，然后添加新的规则。

* FirewallVersion 用于指定要操作的防火墙的版本。传入 FirewallVersion 版本号若不等于当前防火墙的最新版本，将返回失败；若不传 FirewallVersion 则直接重置防火墙规则。

在 FirewallRules 参数中：
* Protocol 字段支持输入 TCP，UDP，ICMP，ALL。
* Port 字段允许输入 ALL，或者一个单独的端口号，或者用逗号分隔的离散端口号，或者用减号分隔的两个端口号代表的端口范围。当 Port 为范围时，减号分隔的第一个端口号小于第二个端口号。当 Protocol 字段不是 TCP 或 UDP 时，Port 字段只能为空或 ALL。Port 字段长度不得超过 64。
* CidrBlock 字段允许输入符合 cidr 格式标准的任意字符串。租户之间网络隔离规则优先于防火墙中的内网规则。
* Action 字段只允许输入 ACCEPT 或 DROP。
* FirewallRuleDescription 字段长度不得超过 64。
     */
    async ModifyFirewallRules(req, cb) {
        return this.request("ModifyFirewallRules", req, cb);
    }
    /**
     * 本接口(ResizeDisks)用于扩容云硬盘。该操作目前仅支持云硬盘类型为数据盘的云硬盘。
     */
    async ResizeDisks(req, cb) {
        return this.request("ResizeDisks", req, cb);
    }
    /**
     * 本接口 ( CreateDiskBackup  ) 用于创建指定云硬盘（当前只支持数据盘）的备份点。
     */
    async CreateDiskBackup(req, cb) {
        return this.request("CreateDiskBackup", req, cb);
    }
    /**
     * 本接口(DescribeDiskDiscount)用于查询云硬盘折扣信息。
     */
    async DescribeDiskDiscount(req, cb) {
        return this.request("DescribeDiskDiscount", req, cb);
    }
    /**
     * 本接口 (DescribeFirewallTemplateQuota) 用于查询防火墙模板配额。
     */
    async DescribeFirewallTemplateQuota(req, cb) {
        return this.request("DescribeFirewallTemplateQuota", req, cb);
    }
    /**
     * 本接口(DescribeAllScenes)用于查询全地域使用场景列表。
     */
    async DescribeAllScenes(req, cb) {
        return this.request("DescribeAllScenes", req, cb);
    }
    /**
     * 本接口 (CreateFirewallTemplate) 用于创建防火墙模板。
     */
    async CreateFirewallTemplate(req, cb) {
        return this.request("CreateFirewallTemplate", req, cb);
    }
    /**
     * 本接口（AttachDisks）用于挂载一个或多个云硬盘。
     */
    async AttachDisks(req, cb) {
        return this.request("AttachDisks", req, cb);
    }
    /**
     * 本接口（DeleteDiskBackups）用于删除云硬盘备份点。
云硬盘备份点必须处于 NORMAL 状态，云硬盘备份点状态可以通过 [DescribeDiskBackups](https://cloud.tencent.com/document/api/1207/84379)接口查询，见输出参数中 DiskBackupState 字段解释。
     */
    async DeleteDiskBackups(req, cb) {
        return this.request("DeleteDiskBackups", req, cb);
    }
    /**
     * 本接口（AssociateInstancesKeyPairs）用于绑定用户指定密钥对到实例。
* 只支持 [RUNNING, STOPPED] 状态的 LINUX_UNIX 操作系统的实例。处于 RUNNING 状态的实例会强制关机，然后绑定。
* 将密钥的公钥写入到实例的 SSH 配置当中，用户就可以通过该密钥的私钥来登录实例。
* 如果实例原来绑定过密钥，那么原来的密钥将失效。
* 如果实例原来是通过密码登录，绑定密钥后无法使用密码登录。
* 支持批量操作。每次请求批量实例的上限为 100。如果批量实例存在不允许操作的实例，操作会以特定错误码返回。
* 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 <a href="https://cloud.tencent.com/document/product/1207/47573" target="_blank">DescribeInstances</a> 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
     */
    async AssociateInstancesKeyPairs(req, cb) {
        return this.request("AssociateInstancesKeyPairs", req, cb);
    }
    /**
     * 本接口 (DeleteFirewallTemplate) 用于删除防火墙模板。
     */
    async DeleteFirewallTemplate(req, cb) {
        return this.request("DeleteFirewallTemplate", req, cb);
    }
    /**
     * 本接口（DisassociateInstancesKeyPairs）用于解除实例与指定密钥对的绑定关系。

* 只支持 [RUNNING, STOPPED] 状态的 LINUX_UNIX 操作系统的实例。处于 RUNNING 状态的实例会强制关机，然后解绑。
* 解绑密钥后，实例可以通过原来设置的密码登录。
* 如果原来没有设置密码，解绑后将无法使用 SSH 登录。可以调用 <a href="https://cloud.tencent.com/document/product/1207/55546" target="_blank">ResetInstancesPassword</a> 接口来设置登录密码。
* 支持批量操作。每次请求批量实例的上限为 100。
* 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 <a href="https://cloud.tencent.com/document/product/1207/47573" target="_blank">DescribeInstances</a> 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
     */
    async DisassociateInstancesKeyPairs(req, cb) {
        return this.request("DisassociateInstancesKeyPairs", req, cb);
    }
    /**
     * 本接口（DescribeBlueprints）用于查询镜像信息。
     */
    async DescribeBlueprints(req, cb) {
        return this.request("DescribeBlueprints", req, cb);
    }
    /**
     * 修改实例内的Docker容器，之后可以通过返回的ActivityId调用<a href="https://cloud.tencent.com/document/product/1207/95476" target="_blank">DescribeDockerActivities</a>接口查询重建情况。
请注意：本接口会重新创建并运行实例内的Docker容器。
     */
    async ModifyDockerContainer(req, cb) {
        return this.request("ModifyDockerContainer", req, cb);
    }
    /**
     * 后端代码已与23年2月4号下线
近90天无调用记录
经评估，下线无风险，操作下线

本接口用于查询实例默认登录密钥属性。
     */
    async DescribeInstanceLoginKeyPairAttribute(req, cb) {
        return this.request("DescribeInstanceLoginKeyPairAttribute", req, cb);
    }
    /**
     * 本接口（DescribeInstancesDeniedActions）用于查询一个或多个实例的操作限制列表信息。
     */
    async DescribeInstancesDeniedActions(req, cb) {
        return this.request("DescribeInstancesDeniedActions", req, cb);
    }
    /**
     * 本接口（InquiryPriceCreateInstances）用于创建实例询价。
     */
    async InquirePriceCreateInstances(req, cb) {
        return this.request("InquirePriceCreateInstances", req, cb);
    }
    /**
     * 本接口（CreateInstanceSnapshot）用于创建指定实例的系统盘快照。
     */
    async CreateInstanceSnapshot(req, cb) {
        return this.request("CreateInstanceSnapshot", req, cb);
    }
    /**
     * 本接口(ModifyDisksBackupQuota)用于调整云硬盘备份点配额。该操作目前仅支持云硬盘类型为数据盘的云硬盘。
     */
    async ModifyDisksBackupQuota(req, cb) {
        return this.request("ModifyDisksBackupQuota", req, cb);
    }
    /**
     * 本接口（DescribeRegions）用于查询地域信息。
     */
    async DescribeRegions(req, cb) {
        return this.request("DescribeRegions", req, cb);
    }
    /**
     * 本接口（ModifySnapshotAttribute）用于修改指定快照的属性。
<li>“快照名称”仅为方便用户自己管理之用。</li>
     */
    async ModifySnapshotAttribute(req, cb) {
        return this.request("ModifySnapshotAttribute", req, cb);
    }
    /**
     * 查询实例内的Docker容器详情
     */
    async DescribeDockerContainerDetail(req, cb) {
        return this.request("DescribeDockerContainerDetail", req, cb);
    }
    /**
     * 本接口（DescribeBlueprintInstances）用于查询镜像实例信息。
     */
    async DescribeBlueprintInstances(req, cb) {
        return this.request("DescribeBlueprintInstances", req, cb);
    }
    /**
     * 查询实例内的容器列表。
     */
    async DescribeDockerContainers(req, cb) {
        return this.request("DescribeDockerContainers", req, cb);
    }
    /**
     * 本接口（TerminateDisks）用于销毁一个或多个云硬盘。
     */
    async TerminateDisks(req, cb) {
        return this.request("TerminateDisks", req, cb);
    }
    /**
     * 本接口 (CreateFirewallTemplateRules) 用于创建防火墙模板规则。
     */
    async CreateFirewallTemplateRules(req, cb) {
        return this.request("CreateFirewallTemplateRules", req, cb);
    }
    /**
     * 本接口（DescribeSnapshotsDeniedActions）用于查询一个或多个快照的操作限制列表信息。
     */
    async DescribeSnapshotsDeniedActions(req, cb) {
        return this.request("DescribeSnapshotsDeniedActions", req, cb);
    }
    /**
     * 本接口(IsolateInstances)用于退还一个或多个轻量应用服务器实例。
* 只有状态为 RUNNING 或 STOPPED 的实例才可以进行此操作。
* 接口调用成功后，实例会进入SHUTDOWN 状态。
* 支持批量操作。每次请求批量资源（包括实例与数据盘）的上限为 20。
* 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 <a href="https://cloud.tencent.com/document/product/1207/47573" target="_blank">DescribeInstances</a> 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
     */
    async IsolateInstances(req, cb) {
        return this.request("IsolateInstances", req, cb);
    }
    /**
     * 本接口 (CreateBlueprint) 用于创建镜像。
     */
    async CreateBlueprint(req, cb) {
        return this.request("CreateBlueprint", req, cb);
    }
    /**
     * 查询实例内的Docker活动列表。
     */
    async DescribeDockerActivities(req, cb) {
        return this.request("DescribeDockerActivities", req, cb);
    }
    /**
     * 本接口（DetachDisks）用于卸载一个或多个云硬盘。
     */
    async DetachDisks(req, cb) {
        return this.request("DetachDisks", req, cb);
    }
    /**
     * 启动实例内的Docker容器，之后可以通过返回的ActivityId调用[DescribeDockerActivities](https://cloud.tencent.com/document/product/1207/95476)接口查询启动情况。
     */
    async StartDockerContainers(req, cb) {
        return this.request("StartDockerContainers", req, cb);
    }
    /**
     * 本接口（DescribeModifyInstanceBundles）用于查询实例可变更套餐列表。
     */
    async DescribeModifyInstanceBundles(req, cb) {
        return this.request("DescribeModifyInstanceBundles", req, cb);
    }
    /**
     * 本接口（CreateKeyPair）用于创建一个密钥对。
     */
    async CreateKeyPair(req, cb) {
        return this.request("CreateKeyPair", req, cb);
    }
    /**
     * 本接口（DescribeBundles）用于查询套餐信息。
     */
    async DescribeBundles(req, cb) {
        return this.request("DescribeBundles", req, cb);
    }
    /**
     * 本接口（ShareBlueprintAcrossAccounts）用于跨账号共享镜像。
仅支持共享自定义镜像， 且用于共享的镜像状态必须为NORMAL。
共享的账号必须为主账号。
     */
    async ShareBlueprintAcrossAccounts(req, cb) {
        return this.request("ShareBlueprintAcrossAccounts", req, cb);
    }
    /**
     * 本接口（DescribeInstancesTrafficPackages）用于查询一个或多个实例的流量包详情。
     */
    async DescribeInstancesTrafficPackages(req, cb) {
        return this.request("DescribeInstancesTrafficPackages", req, cb);
    }
    /**
     * 本接口（DescribeDiskBackups）用于查询云硬盘备份点的详细信息。
     */
    async DescribeDiskBackups(req, cb) {
        return this.request("DescribeDiskBackups", req, cb);
    }
    /**
     * 本接口 (AttachCcn) 用于建立与云联网的关联。
     */
    async AttachCcn(req, cb) {
        return this.request("AttachCcn", req, cb);
    }
    /**
     * 本接口 (ModifyInstancesRenewFlag) 用于修改包年包月实例续费标识。

* 实例被标识为自动续费后，每次在实例到期时，会自动续费一个月。
* 支持批量操作。每次请求批量实例的上限为100。
     */
    async ModifyInstancesRenewFlag(req, cb) {
        return this.request("ModifyInstancesRenewFlag", req, cb);
    }
    /**
     * 本接口（ResetInstance）用于重装指定实例上的镜像。

* 如果指定了 BlueprintId 参数，则使用指定的镜像重装；否则按照当前实例使用的镜像进行重装。
* 系统盘将会被格式化，并重置；请确保系统盘中无重要文件。
* 目前不支持实例使用该接口实现 LINUX_UNIX 和 WINDOWS 操作系统切换。
* 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 <a href="https://cloud.tencent.com/document/product/1207/47573" target="_blank">DescribeInstances</a> 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
* 对于游戏专区实例，仅支持重装当前镜像。
     */
    async ResetInstance(req, cb) {
        return this.request("ResetInstance", req, cb);
    }
    /**
     * 本接口（DescribeFirewallRules）用于查询实例的防火墙规则。
     */
    async DescribeFirewallRules(req, cb) {
        return this.request("DescribeFirewallRules", req, cb);
    }
    /**
     * 本接口（DescribeGeneralResourceQuotas）用于查询通用资源配额信息。
     */
    async DescribeGeneralResourceQuotas(req, cb) {
        return this.request("DescribeGeneralResourceQuotas", req, cb);
    }
    /**
     * 本接口(CreateDisks)用于创建一个或多个云硬盘。
     */
    async CreateDisks(req, cb) {
        return this.request("CreateDisks", req, cb);
    }
    /**
     * 本接口 (ApplyFirewallTemplate) 用于应用防火墙模板到多个实例。
     */
    async ApplyFirewallTemplate(req, cb) {
        return this.request("ApplyFirewallTemplate", req, cb);
    }
    /**
     * 本接口（DescribeSnapshots）用于查询快照的详细信息。
     */
    async DescribeSnapshots(req, cb) {
        return this.request("DescribeSnapshots", req, cb);
    }
    /**
     * 本接口（DescribeDiskBackupsDeniedActions）用于查询一个或多个云硬盘备份点的操作限制列表信息。
     */
    async DescribeDiskBackupsDeniedActions(req, cb) {
        return this.request("DescribeDiskBackupsDeniedActions", req, cb);
    }
    /**
     * 创建并运行多个Docker容器，之后可以通过返回的ActivityIds调用<a href="https://cloud.tencent.com/document/product/1207/95476" target="_blank">DescribeDockerActivities</a>接口查询创建情况。
     */
    async RunDockerContainers(req, cb) {
        return this.request("RunDockerContainers", req, cb);
    }
    /**
     * 本接口 ( DescribeInstanceVncUrl ) 用于查询实例管理终端地址，获取的地址可用于实例的 VNC 登录。

* 处于 `STOPPED` 状态的机器无法使用此功能。
* 管理终端地址的有效期为 15 秒，调用接口成功后如果 15 秒内不使用该链接进行访问，管理终端地址自动失效，您需要重新查询。
* 管理终端地址一旦被访问，将自动失效，您需要重新查询。
* 如果连接断开，每分钟内重新连接的次数不能超过 30 次。
* 参数 `InstanceVncUrl` ：调用接口成功后会返回的 `InstanceVncUrl` 的值。
获取到 `InstanceVncUrl` 后，您需要在链接 `https://img.qcloud.com/qcloud/app/active_vnc/index.html?` 末尾加上参数 `InstanceVncUrl=xxxx`。
 最后组成的 URL 格式如下：

```
https://img.qcloud.com/qcloud/app/active_vnc/index.html?InstanceVncUrl=wss%3A%2F%2Fbjvnc.qcloud.com%3A26789%2Fvnc%3Fs%3DaHpjWnRVMFNhYmxKdDM5MjRHNlVTSVQwajNUSW0wb2tBbmFtREFCTmFrcy8vUUNPMG0wSHZNOUUxRm5PMmUzWmFDcWlOdDJIbUJxSTZDL0RXcHZxYnZZMmRkWWZWcEZia2lyb09XMzdKNmM9
```

     */
    async DescribeInstanceVncUrl(req, cb) {
        return this.request("DescribeInstanceVncUrl", req, cb);
    }
    /**
     * 本接口（StartInstances）用于启动一个或多个实例。

* 只有状态为 STOPPED 的实例才可以进行此操作。
* 接口调用成功时，实例会进入 STARTING 状态；启动实例成功时，实例会进入 RUNNING 状态。
* 支持批量操作。每次请求批量实例的上限为 100。
* 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 <a href="https://cloud.tencent.com/document/product/1207/47573" target="_blank">DescribeInstances</a> 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
     */
    async StartInstances(req, cb) {
        return this.request("StartInstances", req, cb);
    }
    /**
     * 本接口 (DescribeKeyPairs) 用于查询用户密钥对信息。
     */
    async DescribeKeyPairs(req, cb) {
        return this.request("DescribeKeyPairs", req, cb);
    }
    /**
     * 本接口（DescribeDiskConfigs）用于查询云硬盘配置。
     */
    async DescribeDiskConfigs(req, cb) {
        return this.request("DescribeDiskConfigs", req, cb);
    }
    /**
     * 本接口（ModifyFirewallRuleDescription）用于修改单条防火墙规则描述。

* FirewallVersion 用于指定要操作的防火墙的版本。传入 FirewallVersion 版本号若不等于当前防火墙的最新版本，将返回失败；若不传 FirewallVersion 则直接修改防火墙规则备注。

用FirewallRule参数来指定要修改的防火墙规则，使用其中的Protocol， Port， CidrBlock，Action字段来匹配要修改的防火墙规则。

在 FirewallRule 参数中：
* Protocol 字段支持输入 TCP，UDP，ICMP，ALL。
* Port 字段允许输入 ALL，或者一个单独的端口号，或者用逗号分隔的离散端口号，或者用减号分隔的两个端口号代表的端口范围。当 Port 为范围时，减号分隔的第一个端口号小于第二个端口号。当 Protocol 字段不是 TCP 或 UDP 时，Port 字段只能为空或 ALL。Port 字段长度不得超过 64。
* CidrBlock 字段允许输入符合 cidr 格式标准的任意字符串。租户之间网络隔离规则优先于防火墙中的内网规则。
* Action 字段只允许输入 ACCEPT 或 DROP。
* FirewallRuleDescription 字段长度不得超过 64。
     */
    async ModifyFirewallRuleDescription(req, cb) {
        return this.request("ModifyFirewallRuleDescription", req, cb);
    }
    /**
     * 本接口 (ResetAttachCcn) 用于关联云联网实例申请过期时，重新申请关联操作。
     */
    async ResetAttachCcn(req, cb) {
        return this.request("ResetAttachCcn", req, cb);
    }
    /**
     * 本接口（RebootInstances）用于重启实例。

* 只有状态为 RUNNING 的实例才可以进行此操作。
* 接口调用成功时，实例会进入 REBOOTING 状态；重启实例成功时，实例会进入 RUNNING 状态。
* 支持批量操作，每次请求批量实例的上限为 100。
* 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 <a href="https://cloud.tencent.com/document/product/1207/47573" target="_blank">DescribeInstances</a> 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
     */
    async RebootInstances(req, cb) {
        return this.request("RebootInstances", req, cb);
    }
    /**
     * 本接口(ModifyInstancesBundle)用于变更一个或多个轻量应用服务器实例套餐。
* 只有状态为 RUNNING，STOPPED的实例才可以进行此操作。
* 支持批量操作。每次请求批量实例的上限为 30。
* 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 <a href="https://cloud.tencent.com/document/product/1207/47573" target="_blank">DescribeInstances</a> 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
     */
    async ModifyInstancesBundle(req, cb) {
        return this.request("ModifyInstancesBundle", req, cb);
    }
    /**
     * 本接口（StopInstances）用于关闭一个或多个实例。
* 只有状态为 RUNNING 的实例才可以进行此操作。
* 接口调用成功时，实例会进入 STOPPING 状态；关闭实例成功时，实例会进入 STOPPED 状态。
* 支持批量操作。每次请求批量实例的上限为 100。
* 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 <a href="https://cloud.tencent.com/document/product/1207/47573" target="_blank">DescribeInstances</a> 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
     */
    async StopInstances(req, cb) {
        return this.request("StopInstances", req, cb);
    }
    /**
     * 停止实例内的Docker容器，之后可以通过返回的ActivityId调用[DescribeDockerActivities](https://cloud.tencent.com/document/product/1207/95476)接口查询停止情况。
     */
    async StopDockerContainers(req, cb) {
        return this.request("StopDockerContainers", req, cb);
    }
    /**
     * 本接口（ApplyDiskBackup）用于回滚指定云硬盘的备份点。
* 仅支持回滚到原云硬盘。
* 用于回滚的云硬盘备份点必须处于 NORMAL 状态。
  云硬盘备份点状态可以通过  [DescribeDiskBackups](https://cloud.tencent.com/document/api/1207/84379) 接口查询。
* 回滚云硬盘备份点时，云硬盘的状态必须为 UNATTACHED或ATTACHED。
  云硬盘状态可通过 [DescribeDisks](https://cloud.tencent.com/document/api/1207/66093) 接口查询。
* 如果云硬盘处于 ATTACHED状态，相关RUNNING 状态的实例会强制关机，然后回滚云硬盘备份点。
     */
    async ApplyDiskBackup(req, cb) {
        return this.request("ApplyDiskBackup", req, cb);
    }
    /**
     * 本接口(DescribeInstancesDiskNum)用于查询实例挂载云硬盘数量。
     */
    async DescribeInstancesDiskNum(req, cb) {
        return this.request("DescribeInstancesDiskNum", req, cb);
    }
    /**
     * 本接口 (DeleteFirewallTemplateRules) 用于删除防火墙模板规则。
     */
    async DeleteFirewallTemplateRules(req, cb) {
        return this.request("DeleteFirewallTemplateRules", req, cb);
    }
    /**
     * 本接口 (DescribeFirewallTemplateRuleQuota) 用于查询防火墙模板规则配额。
     */
    async DescribeFirewallTemplateRuleQuota(req, cb) {
        return this.request("DescribeFirewallTemplateRuleQuota", req, cb);
    }
    /**
     * 本接口（DescribeInstancesReturnable）用于查询实例是否可退还。
     */
    async DescribeInstancesReturnable(req, cb) {
        return this.request("DescribeInstancesReturnable", req, cb);
    }
    /**
     * 本接口（DescribeFirewallRulesTemplate）用于查询防火墙规则模板。
     */
    async DescribeFirewallRulesTemplate(req, cb) {
        return this.request("DescribeFirewallRulesTemplate", req, cb);
    }
    /**
     * 本接口（DescribeInstances）用于查询一个或多个实例的详细信息。

* 可以根据实例 ID、实例名称或者实例的内网 IP 查询实例的详细信息。
* 过滤信息详细请见过滤器 [Filters](https://cloud.tencent.com/document/product/1207/47576#Filter) 。
* 如果参数为空，返回当前用户一定数量（Limit 所指定的数量，默认为 20）的实例。
* 支持查询实例的最新操作（LatestOperation）以及最新操作状态（LatestOperationState）。
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 删除实例内的Docker容器，之后可以通过返回的ActivityId调用[DescribeDockerActivities](https://cloud.tencent.com/document/product/1207/95476)接口查询删除情况。
     */
    async RemoveDockerContainers(req, cb) {
        return this.request("RemoveDockerContainers", req, cb);
    }
    /**
     * 本接口(IsolateDisks)用于退还一个或多个轻量应用服务器云硬盘。

只有状态为 UNATTACHED 的数据盘才可以进行此操作。
接口调用成功后，云硬盘会进入SHUTDOWN 状态。
支持批量操作。每次请求批量资源的上限为 20。
本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。云硬盘操作结果可以通过调用 [DescribeDisks](https://cloud.tencent.com/document/product/1207/66093) 接口查询，如果云硬盘的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
     */
    async IsolateDisks(req, cb) {
        return this.request("IsolateDisks", req, cb);
    }
    /**
     * 本接口 (InquirePriceCreateBlueprint) 用于创建镜像询价。
     */
    async InquirePriceCreateBlueprint(req, cb) {
        return this.request("InquirePriceCreateBlueprint", req, cb);
    }
    /**
     * 本接口（DeleteFirewallRules）用于删除实例的防火墙规则。

* FirewallVersion 用于指定要操作的防火墙的版本。传入 FirewallVersion 版本号若不等于当前防火墙的最新版本，将返回失败；若不传 FirewallVersion 则直接删除指定的规则。

在 FirewallRules 参数中：
* Protocol 字段支持输入 TCP，UDP，ICMP，ALL。
* Port 字段允许输入 ALL，或者一个单独的端口号，或者用逗号分隔的离散端口号，或者用减号分隔的两个端口号代表的端口范围。当 Port 为范围时，减号分隔的第一个端口号小于第二个端口号。当 Protocol 字段不是 TCP 或 UDP 时，Port 字段只能为空或 ALL。Port 字段长度不得超过 64。
* CidrBlock 字段允许输入符合 cidr 格式标准的任意字符串。租户之间网络隔离规则优先于防火墙中的内网规则。
* Action 字段只允许输入 ACCEPT 或 DROP。
* FirewallRuleDescription 字段长度不得超过 64。
     */
    async DeleteFirewallRules(req, cb) {
        return this.request("DeleteFirewallRules", req, cb);
    }
    /**
     * 本接口（ResetInstancesPassword）用于将实例操作系统的密码重置为用户指定的密码。
* 只修改管理员账号的密码。实例的操作系统不同，管理员账号也会不一样（Windows 为 Administrator，Ubuntu 为 ubuntu ，其它系统为 root）。
* 支持批量操作。将多个实例操作系统的密码重置为相同的密码。每次请求批量实例的上限为 100。
* 建议对运行中的实例先手动关机，然后再进行密码重置。如实例处于运行中状态，本接口操作过程中会对实例进行关机操作，尝试正常关机失败后进行强制关机。
* 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 <a href="https://cloud.tencent.com/document/product/1207/47573" target="_blank">DescribeInstances</a> 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
注意：强制关机的效果等同于关闭物理计算机的电源开关。强制关机可能会导致数据丢失或文件系统损坏。
     */
    async ResetInstancesPassword(req, cb) {
        return this.request("ResetInstancesPassword", req, cb);
    }
    /**
     * 本接口（DescribeDisksDeniedActions）用于查询一个或多个云硬盘的操作限制列表信息。
     */
    async DescribeDisksDeniedActions(req, cb) {
        return this.request("DescribeDisksDeniedActions", req, cb);
    }
    /**
     * 查询地域下可用区
     */
    async DescribeZones(req, cb) {
        return this.request("DescribeZones", req, cb);
    }
    /**
     * 本接口（DescribeDisks）用于查询云硬盘信息。
     */
    async DescribeDisks(req, cb) {
        return this.request("DescribeDisks", req, cb);
    }
    /**
     * 本接口（InquirePriceRenewInstances）用于续费实例询价。
     */
    async InquirePriceRenewInstances(req, cb) {
        return this.request("InquirePriceRenewInstances", req, cb);
    }
    /**
     * 本接口（DeleteSnapshots）用于删除快照。
快照必须处于 NORMAL 状态，快照状态可以通过 <a href="https://cloud.tencent.com/document/product/1207/54388" target="_blank">DescribeSnapshots</a> 接口查询，见输出参数中 SnapshotState 字段解释。
     */
    async DeleteSnapshots(req, cb) {
        return this.request("DeleteSnapshots", req, cb);
    }
    /**
     * 本接口 (DescribeFirewallTemplateApplyRecords) 用于查询防火墙模板应用记录列表。
     */
    async DescribeFirewallTemplateApplyRecords(req, cb) {
        return this.request("DescribeFirewallTemplateApplyRecords", req, cb);
    }
    /**
     * 本接口 (ResetFirewallTemplateRules) 用于重置防火墙模板下所有规则。
     */
    async ResetFirewallTemplateRules(req, cb) {
        return this.request("ResetFirewallTemplateRules", req, cb);
    }
    /**
     * 本接口（DescribeResetInstanceBlueprints）查询重置实例的镜像信息。对于游戏专区实例，该接口只会返回当前镜像，且不支持 Filters 参数。
     */
    async DescribeResetInstanceBlueprints(req, cb) {
        return this.request("DescribeResetInstanceBlueprints", req, cb);
    }
    /**
     * 本接口（ApplyInstanceSnapshot）用于回滚指定实例的系统盘快照。
<li>仅支持回滚到原系统盘。</li>
<li>用于回滚的快照必须处于 NORMAL 状态。快照状态可以通过 DescribeSnapshots 接口查询，见输出参数中 SnapshotState 字段解释。</li>
<li>回滚快照时，实例的状态必须为 STOPPED 或 RUNNING，可通过 DescribeInstances 接口查询实例状态。处于 RUNNING 状态的实例会强制关机，然后回滚快照。</li>
     */
    async ApplyInstanceSnapshot(req, cb) {
        return this.request("ApplyInstanceSnapshot", req, cb);
    }
    /**
     * 本接口 (DetachCcn) 用于解除与云联网的关联。
     */
    async DetachCcn(req, cb) {
        return this.request("DetachCcn", req, cb);
    }
    /**
     * 本接口(RenewDisks)用于续费一个或多个轻量应用服务器云硬盘。

只有状态为 ATTACHED，UNATTACHED 或 SHUTDOWN 的数据盘才可以进行此操作。
支持批量操作。每次请求批量云硬盘的上限为 50。
本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。云硬盘操作结果可以通过调用 [DescribeDisks](https://cloud.tencent.com/document/product/1207/66093) 接口查询，如果云硬盘的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
     */
    async RenewDisks(req, cb) {
        return this.request("RenewDisks", req, cb);
    }
    /**
     * 本接口(RenewInstances)用于续费一个或多个轻量应用服务器实例。
* 只有状态为 RUNNING，STOPPED 或 SHUTDOWN 的实例才可以进行此操作。
* 支持批量操作。每次请求批量实例的上限为 100。
* 本接口为异步接口，请求发送成功后会返回一个 RequestId，此时操作并未立即完成。实例操作结果可以通过调用 <a href="https://cloud.tencent.com/document/product/1207/47573" target="_blank">DescribeInstances</a> 接口查询，如果实例的最新操作状态（LatestOperationState）为“SUCCESS”，则代表操作成功。
     */
    async RenewInstances(req, cb) {
        return this.request("RenewInstances", req, cb);
    }
    /**
     * 本接口(DescribeScenes)用于查看使用场景列表。
     */
    async DescribeScenes(req, cb) {
        return this.request("DescribeScenes", req, cb);
    }
    /**
     * 本接口(CreateInstances)用于创建一个或多个指定套餐的轻量应用服务器实例。
     */
    async CreateInstances(req, cb) {
        return this.request("CreateInstances", req, cb);
    }
    /**
     * 本接口 (ReplaceFirewallTemplateRules) 用于替换防火墙模板规则。
     */
    async ReplaceFirewallTemplateRule(req, cb) {
        return this.request("ReplaceFirewallTemplateRule", req, cb);
    }
    /**
     * 本接口 (DescribeFirewallTemplates) 用于查询防火墙模板列表。
     */
    async DescribeFirewallTemplates(req, cb) {
        return this.request("DescribeFirewallTemplates", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249181, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.live = void 0;
const v20180801_1 = require("./v20180801");
exports.live = {
    v20180801: v20180801_1.v20180801,
};

}, function(modId) { var map = {"./v20180801":1738984249182}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249182, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180801 = void 0;
const Models = require("./live_models");
const live_client_1 = require("./live_client");
exports.v20180801 = {
    Client: live_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./live_models":1738984249183,"./live_client":1738984249184}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249183, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249184, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * live client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("live.tencentcloudapi.com", "2018-08-01", clientConfig);
    }
    /**
     * 该接口用来查询账号下所有的导播台列表
     */
    async DescribeCasterList(req, cb) {
        return this.request("DescribeCasterList", req, cb);
    }
    /**
     * 断开推流连接，但可以重新推流。
注：对已经不活跃的流，调用该断流接口时，接口返回成功。
     */
    async DropLiveStream(req, cb) {
        return this.request("DropLiveStream", req, cb);
    }
    /**
     * 查询水印列表。
     */
    async DescribeLiveWatermarks(req, cb) {
        return this.request("DescribeLiveWatermarks", req, cb);
    }
    /**
     * 查询并发录制路数，对慢直播和普通直播适用。
     */
    async DescribeConcurrentRecordStreamNum(req, cb) {
        return this.request("DescribeConcurrentRecordStreamNum", req, cb);
    }
    /**
     * - 使用前提
  1. 录制文件存放于点播平台，所以用户如需使用录制功能，需首先自行开通点播服务。
  2. 录制文件存放后相关费用（含存储以及下行播放流量）按照点播平台计费方式收取，具体请参考 [对应文档](https://cloud.tencent.com/document/product/266/2838)。

- 模式说明
  该接口支持两种录制模式：
  1. 定时录制模式【默认模式】。
    需要传入开始时间与结束时间，录制任务根据起止时间自动开始与结束。在所设置结束时间过期之前（且未调用StopLiveRecord提前终止任务），录制任务都是有效的，期间多次断流然后重推都会启动录制任务。
  2. 实时视频录制模式。
    忽略传入的开始时间，在录制任务创建后立即开始录制，录制时长支持最大为30分钟，如果传入的结束时间与当前时间差大于30分钟，则按30分钟计算，实时视频录制主要用于录制精彩视频场景，时长建议控制在5分钟以内。

- 注意事项
  1. 调用接口超时设置应大于3秒，小于3秒重试以及按不同起止时间调用都有可能产生重复录制任务，进而导致额外录制费用。
  2. 受限于音视频文件格式（FLV/MP4/HLS）对编码类型的支持，视频编码类型支持 H.264，音频编码类型支持 AAC。
  3. 为避免恶意或非主观的频繁 API 请求，对定时录制模式最大创建任务数做了限制：其中，当天可以创建的最大任务数不超过4000（不含已删除的任务）；当前时刻并发运行的任务数不超过400。有超出此限制的需要提工单申请。
  4. 此调用方式暂时不支持海外推流录制。
     */
    async CreateLiveRecord(req, cb) {
        return this.request("CreateLiveRecord", req, cb);
    }
    /**
     * 更新水印。
     */
    async UpdateLiveWatermark(req, cb) {
        return this.request("UpdateLiveWatermark", req, cb);
    }
    /**
     * 修改录制模板配置。
     */
    async ModifyLiveRecordTemplate(req, cb) {
        return this.request("ModifyLiveRecordTemplate", req, cb);
    }
    /**
     * 查询指定时间段范围内启动和结束的录制任务列表。
- 使用前提
1. 仅用于查询由 CreateRecordTask 接口创建的录制任务。
2. 不能查询被 DeleteRecordTask 接口删除以及已过期（平台侧保留3个月）的录制任务。

     */
    async DescribeRecordTask(req, cb) {
        return this.request("DescribeRecordTask", req, cb);
    }
    /**
     * 该接口用来停止导播台的预监任务。
     */
    async StopCasterPvw(req, cb) {
        return this.request("StopCasterPvw", req, cb);
    }
    /**
     * 创建水印规则，需要先调用[AddLiveWatermark](/document/product/267/30154)接口添加水印，将返回的水印id绑定到流使用。
     */
    async CreateLiveWatermarkRule(req, cb) {
        return this.request("CreateLiveWatermarkRule", req, cb);
    }
    /**
     * 用于查询推断流事件。<br>

注意：
1. 该接口提供离线推断流记录查询功能，不可作为重要业务场景强依赖接口。
2. 该接口可通过使用IsFilter进行过滤，返回推流历史记录。
     */
    async DescribeLiveStreamEventList(req, cb) {
        return this.request("DescribeLiveStreamEventList", req, cb);
    }
    /**
     * 该接口用来创建通用混流。用法与旧接口 mix_streamv2.start_mix_stream_advanced 基本一致。
注意：当前最多支持16路混流。
最佳实践：https://cloud.tencent.com/document/product/267/45566
     */
    async CreateCommonMixStream(req, cb) {
        return this.request("CreateCommonMixStream", req, cb);
    }
    /**
     * 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
查询某段时间内5分钟粒度的各播放http状态码的个数。
备注：数据延迟1小时，如10:00-10:59点的数据12点才能查到。
     */
    async DescribeHttpStatusInfoList(req, cb) {
        return this.request("DescribeHttpStatusInfoList", req, cb);
    }
    /**
     * 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
查询某省份某运营商下行播放数据，包括带宽，流量，请求数，并发连接数信息。
     */
    async DescribeProvinceIspPlayInfoList(req, cb) {
        return this.request("DescribeProvinceIspPlayInfoList", req, cb);
    }
    /**
     * 修改播放域名信息。
     */
    async ModifyLivePlayDomain(req, cb) {
        return this.request("ModifyLivePlayDomain", req, cb);
    }
    /**
     * 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
查询流id的上行推流质量数据，包括音视频的帧率，码率，流逝时间，编码格式等。
     */
    async DescribeStreamPushInfoList(req, cb) {
        return this.request("DescribeStreamPushInfoList", req, cb);
    }
    /**
     * 该接口用来启动直播流监播任务。
     */
    async StartLiveStreamMonitor(req, cb) {
        return this.request("StartLiveStreamMonitor", req, cb);
    }
    /**
     * 获取截图规则列表
     */
    async DescribeLiveSnapshotRules(req, cb) {
        return this.request("DescribeLiveSnapshotRules", req, cb);
    }
    /**
     * 调用该接口，释放导播台实例，但保留所有的配置。
执行该接口，预监与主监画面停止，第三方推流停止。
点播文件与直播地址将停止展示，客户自行推到导播台的流需要手动停止。
     */
    async ReleaseCaster(req, cb) {
        return this.request("ReleaseCaster", req, cb);
    }
    /**
     * 查询某个时间范围内所有时移流列表。最大支持查询24小时内的数据。
     */
    async DescribeTimeShiftStreamList(req, cb) {
        return this.request("DescribeTimeShiftStreamList", req, cb);
    }
    /**
     * 该接口用来向导播台中添加一个输入源，该输入源可以是拉流地址、或是一个文件链接
     */
    async AddCasterInputInfo(req, cb) {
        return this.request("AddCasterInputInfo", req, cb);
    }
    /**
     * 创建直播垫片模板。
     */
    async CreateLivePadTemplate(req, cb) {
        return this.request("CreateLivePadTemplate", req, cb);
    }
    /**
     * 获取截图模板列表。
     */
    async DescribeLiveSnapshotTemplates(req, cb) {
        return this.request("DescribeLiveSnapshotTemplates", req, cb);
    }
    /**
     * 查询直播域名 Referer 黑白名单配置。
由于 Referer 信息包含在 http 协议中，在开启配置后，播放协议为 rtmp 或 WebRTC 不会校验 Referer 配置，仍可正常播放。如需配置 Referer 鉴权建议使用 http-flv 或 http-hls 协议播放。
     */
    async DescribeLiveDomainReferer(req, cb) {
        return this.request("DescribeLiveDomainReferer", req, cb);
    }
    /**
     * 获取单个转码模板。
     */
    async DescribeLiveTranscodeTemplate(req, cb) {
        return this.request("DescribeLiveTranscodeTemplate", req, cb);
    }
    /**
     * 支持直播时移写入量数据查询。
     */
    async DescribeLiveTimeShiftWriteSizeInfoList(req, cb) {
        return this.request("DescribeLiveTimeShiftWriteSizeInfoList", req, cb);
    }
    /**
     * 设置直播域名 Referer 黑白名单。
由于 Referer 信息包含在 http 协议中，在开启配置后，播放协议为 rtmp 或 WebRTC 不会校验 Referer 配置，仍可正常播放。如需配置 Referer 鉴权建议使用 http-flv 或 http-hls 协议播放。
     */
    async ModifyLiveDomainReferer(req, cb) {
        return this.request("ModifyLiveDomainReferer", req, cb);
    }
    /**
     * 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
查询某段时间top n客户端ip汇总信息（暂支持top 1000）
     */
    async DescribeTopClientIpSumInfoList(req, cb) {
        return this.request("DescribeTopClientIpSumInfoList", req, cb);
    }
    /**
     * 该接口用来生成导播台推流地址
     */
    async CreateCasterInputPushUrl(req, cb) {
        return this.request("CreateCasterInputPushUrl", req, cb);
    }
    /**
     * 该接口用来查询某个导播台的推流信息列表。
     */
    async DescribeCasterOutputInfos(req, cb) {
        return this.request("DescribeCasterOutputInfos", req, cb);
    }
    /**
     * 创建一个在指定时间启动、结束的截图任务，并使用指定截图模板ID对应的配置进行截图。
- 注意事项
1. 断流会结束当前截图。在结束时间到达之前任务仍然有效，期间只要正常推流都会正常截图，与是否多次推、断流无关。
2. 使用上避免创建时间段相互重叠的截图任务。若同一条流当前存在多个时段重叠的任务，为避免重复系统将启动最多3个截图任务。
3. 创建的截图任务记录在平台侧只保留3个月。
4. 当前截图任务管理API（CreateScreenshotTask/StopScreenshotTask/DeleteScreenshotTask）与旧API（CreateLiveInstantSnapshot/StopLiveInstantSnapshot）不兼容，两套接口不能混用。
5. 避免 创建截图任务 与 推流 操作同时进行，可能导致因截图任务未生效而引起任务延迟启动问题，两者操作间隔建议大于3秒。
     */
    async CreateScreenshotTask(req, cb) {
        return this.request("CreateScreenshotTask", req, cb);
    }
    /**
     * 获取录制模板列表。
     */
    async DescribeLiveRecordTemplates(req, cb) {
        return this.request("DescribeLiveRecordTemplates", req, cb);
    }
    /**
     * 该接口用来停止直播流监播任务。
     */
    async StopLiveStreamMonitor(req, cb) {
        return this.request("StopLiveStreamMonitor", req, cb);
    }
    /**
     * 验证用户是否拥有特定直播域名。
     */
    async AuthenticateDomainOwner(req, cb) {
        return this.request("AuthenticateDomainOwner", req, cb);
    }
    /**
     * 修改截图模板配置。
     */
    async ModifyLiveSnapshotTemplate(req, cb) {
        return this.request("ModifyLiveSnapshotTemplate", req, cb);
    }
    /**
     * 查询某时间段top n的域名或流id信息（暂支持top 1000）。
     */
    async DescribeVisitTopSumInfoList(req, cb) {
        return this.request("DescribeVisitTopSumInfoList", req, cb);
    }
    /**
     * 该接口用来修改导播台文本配置。
     */
    async ModifyCasterMarkWordInfo(req, cb) {
        return this.request("ModifyCasterMarkWordInfo", req, cb);
    }
    /**
     * 该接口用来增加导播台的布局参数。
     */
    async AddCasterLayoutInfo(req, cb) {
        return this.request("AddCasterLayoutInfo", req, cb);
    }
    /**
     * 获取域名证书信息。
     */
    async DescribeLiveDomainCert(req, cb) {
        return this.request("DescribeLiveDomainCert", req, cb);
    }
    /**
     * 添加水印，成功返回水印 ID 后，需要调用[CreateLiveWatermarkRule](/document/product/267/32629)接口将水印 ID 绑定到流使用。 水印数量上限 100，超过后需要先删除，再添加。
     */
    async AddLiveWatermark(req, cb) {
        return this.request("AddLiveWatermark", req, cb);
    }
    /**
     * 海外分区直播播放带宽和流量数据查询。
     */
    async DescribeAreaBillBandwidthAndFluxList(req, cb) {
        return this.request("DescribeAreaBillBandwidthAndFluxList", req, cb);
    }
    /**
     * 该接口用来查询某个导播台的文本列表。
     */
    async DescribeCasterMarkWordInfos(req, cb) {
        return this.request("DescribeCasterMarkWordInfos", req, cb);
    }
    /**
     * 该接口用来将布局信息从导播台中删除
     */
    async DeleteCasterLayoutInfo(req, cb) {
        return this.request("DeleteCasterLayoutInfo", req, cb);
    }
    /**
     * 删除水印规则
     */
    async DeleteLiveWatermarkRule(req, cb) {
        return this.request("DeleteLiveWatermarkRule", req, cb);
    }
    /**
     * 删除直播垫片模板。
     */
    async DeleteLivePadTemplate(req, cb) {
        return this.request("DeleteLivePadTemplate", req, cb);
    }
    /**
     * 删除回调规则。
     */
    async DeleteLiveCallbackRule(req, cb) {
        return this.request("DeleteLiveCallbackRule", req, cb);
    }
    /**
     * 更新拉流配置。该接口为已下线接口，请使用新接口 ModifyLivePullStreamTask。
     */
    async ModifyPullStreamConfig(req, cb) {
        return this.request("ModifyPullStreamConfig", req, cb);
    }
    /**
     * 创建截图模板，数量上限：50，成功返回模板id后，需要调用[CreateLiveSnapshotRule](/document/product/267/32625)接口，将模板id绑定到流使用。
<br>截图相关文档：[直播截图](/document/product/267/32737)。
     */
    async CreateLiveSnapshotTemplate(req, cb) {
        return this.request("CreateLiveSnapshotTemplate", req, cb);
    }
    /**
     * 返回正在直播中的流列表。适用于推流成功后查询在线流信息。

注意：
1. 该接口仅提供辅助查询在线流列表功能，业务重要场景不可强依赖该接口。
2. 该接口仅适用于流数少于2万路的情况，对于流数较大用户请联系售后。
     */
    async DescribeLiveStreamOnlineList(req, cb) {
        return this.request("DescribeLiveStreamOnlineList", req, cb);
    }
    /**
     * 启用择优调度。
注意：流维度的择优调度，当主备流结束后自动失效。
     */
    async EnableOptimalSwitching(req, cb) {
        return this.request("EnableOptimalSwitching", req, cb);
    }
    /**
     * 删除回调模板。
     */
    async DeleteLiveCallbackTemplate(req, cb) {
        return this.request("DeleteLiveCallbackTemplate", req, cb);
    }
    /**
     * 该接口用来修改导播台水印信息。
注意，修改的Index对应的水印需已存在
     */
    async ModifyCasterMarkPicInfo(req, cb) {
        return this.request("ModifyCasterMarkPicInfo", req, cb);
    }
    /**
     * 该接口用来获取导播台视频流的播放url，用来在页面上拉流展示。
     */
    async DescribeCasterPlayUrl(req, cb) {
        return this.request("DescribeCasterPlayUrl", req, cb);
    }
    /**
     * 查询直播推流鉴权key
     */
    async DescribeLivePushAuthKey(req, cb) {
        return this.request("DescribeLivePushAuthKey", req, cb);
    }
    /**
     * 删除直播拉流配置。该接口已下线,请使用新接口 DeleteLivePullStreamTask。
     */
    async DeletePullStreamConfig(req, cb) {
        return this.request("DeletePullStreamConfig", req, cb);
    }
    /**
     * 前提调用 DescribeTimeShiftStreamList 获得请求必要参数。查询指定范围内的时移流录制详情，最大支持24小时范围查询。
     */
    async DescribeTimeShiftRecordDetail(req, cb) {
        return this.request("DescribeTimeShiftRecordDetail", req, cb);
    }
    /**
     * 获取单个录制模板。
     */
    async DescribeLiveRecordTemplate(req, cb) {
        return this.request("DescribeLiveRecordTemplate", req, cb);
    }
    /**
     * 获取单个直播垫片模板
     */
    async DescribeLivePadTemplate(req, cb) {
        return this.request("DescribeLivePadTemplate", req, cb);
    }
    /**
     * 提前结束截图，中止运行中的截图任务。任务被成功终止后，本次任务将不再启动。
     */
    async StopScreenshotTask(req, cb) {
        return this.request("StopScreenshotTask", req, cb);
    }
    /**
     * 为导播台添加文本配置。
     */
    async AddCasterMarkWordInfo(req, cb) {
        return this.request("AddCasterMarkWordInfo", req, cb);
    }
    /**
     * 用来查询监播场次7天内的智能识别、断流、低帧率等信息的汇总报告。
     */
    async DescribeMonitorReport(req, cb) {
        return this.request("DescribeMonitorReport", req, cb);
    }
    /**
     * 查询直播拉流配置。该接口已下线,请使用新接口 DescribeLivePullStreamTasks。
     */
    async DescribePullStreamConfigs(req, cb) {
        return this.request("DescribePullStreamConfigs", req, cb);
    }
    /**
     * 该接口用来查询某个特定监播任务的配置。
     */
    async DescribeLiveStreamMonitor(req, cb) {
        return this.request("DescribeLiveStreamMonitor", req, cb);
    }
    /**
     * 删除水印。
     */
    async DeleteLiveWatermark(req, cb) {
        return this.request("DeleteLiveWatermark", req, cb);
    }
    /**
     * 该接口用来设置导播台的描述、名称、录制模板id等参数。
     */
    async ModifyCaster(req, cb) {
        return this.request("ModifyCaster", req, cb);
    }
    /**
     * 查询绑定证书的域名列表。
     */
    async DescribeLiveDomainCertBindings(req, cb) {
        return this.request("DescribeLiveDomainCertBindings", req, cb);
    }
    /**
     * 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
查询下行播放错误码信息。
     */
    async DescribePlayErrorCodeSumInfoList(req, cb) {
        return this.request("DescribePlayErrorCodeSumInfoList", req, cb);
    }
    /**
     * 针对大型活动直播，通过对直播流设置延时来控制现场与观众播放画面的时间间隔，避免突发状况造成影响。

注意：如果在推流前设置延播，需要提前5分钟设置，目前该接口只支持流粒度。
     */
    async AddDelayLiveStream(req, cb) {
        return this.request("AddDelayLiveStream", req, cb);
    }
    /**
     * 直播上行路数查询。
     */
    async DescribeUploadStreamNums(req, cb) {
        return this.request("DescribeUploadStreamNums", req, cb);
    }
    /**
     * 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
查询天维度每条流的播放数据，包括总流量等。
     */
    async DescribeStreamDayPlayInfoList(req, cb) {
        return this.request("DescribeStreamDayPlayInfoList", req, cb);
    }
    /**
     * 修改直播推流鉴权key
     */
    async ModifyLivePushAuthKey(req, cb) {
        return this.request("ModifyLivePushAuthKey", req, cb);
    }
    /**
     * 修改转码模板配置。
     */
    async ModifyLiveTranscodeTemplate(req, cb) {
        return this.request("ModifyLiveTranscodeTemplate", req, cb);
    }
    /**
     * 删除转码规则。
DomainName+AppName+StreamName+TemplateId唯一标识单个转码规则，如需删除需要强匹配。其中TemplateId必填，其余参数为空时也需要传空字符串进行强匹配。
     */
    async DeleteLiveTranscodeRule(req, cb) {
        return this.request("DeleteLiveTranscodeRule", req, cb);
    }
    /**
     * 查询转码总量数据，可查询近三个月内的数据。
注意：
如果是查询某一天内，则返回5分钟粒度数据；
如果是查询跨天或指定域名， 则返回1小时粒度数据。
     */
    async DescribeLiveTranscodeTotalInfo(req, cb) {
        return this.request("DescribeLiveTranscodeTotalInfo", req, cb);
    }
    /**
     * 删除截图规则。
     */
    async DeleteLiveSnapshotRule(req, cb) {
        return this.request("DeleteLiveSnapshotRule", req, cb);
    }
    /**
     * 删除接口 CreateLivePullStreamTask 创建的拉流任务。
注意：
1. 入参中的 TaskId 为 CreateLivePullStreamTask 接口创建时返回的TaskId。
2. 也可通过 DescribeLivePullStreamTasks 进行查询创建的任务。
     */
    async DeleteLivePullStreamTask(req, cb) {
        return this.request("DeleteLivePullStreamTask", req, cb);
    }
    /**
     * 获取禁推流列表。

注意：该接口仅作为直播辅助查询接口，重要业务场景不可强依赖该接口。
     */
    async DescribeLiveForbidStreamList(req, cb) {
        return this.request("DescribeLiveForbidStreamList", req, cb);
    }
    /**
     * 修改直播垫片模板。
     */
    async ModifyLivePadTemplate(req, cb) {
        return this.request("ModifyLivePadTemplate", req, cb);
    }
    /**
     * 获取单个水印信息。
     */
    async DescribeLiveWatermark(req, cb) {
        return this.request("DescribeLiveWatermark", req, cb);
    }
    /**
     * 获取证书信息
     */
    async DescribeLiveCert(req, cb) {
        return this.request("DescribeLiveCert", req, cb);
    }
    /**
     * 批量绑定证书对应的播放域名，并更新启用状态。
新建自有证书将自动上传至腾讯云ssl。
     */
    async ModifyLiveDomainCertBindings(req, cb) {
        return this.request("ModifyLiveDomainCertBindings", req, cb);
    }
    /**
     * 批量获取转推日志的URL。
     */
    async DescribeDeliverLogDownList(req, cb) {
        return this.request("DescribeDeliverLogDownList", req, cb);
    }
    /**
     * 该接口用来启动主监任务，并将获取主监画面的播放地址。
     */
    async CreateCasterPgm(req, cb) {
        return this.request("CreateCasterPgm", req, cb);
    }
    /**
     * 更新直播拉流任务。
1. 不支持修改拉流源类型，如需更换，请创建新任务。
     */
    async ModifyLivePullStreamTask(req, cb) {
        return this.request("ModifyLivePullStreamTask", req, cb);
    }
    /**
     * 查询直播增强用量明细信息。
     */
    async DescribeLiveEnhanceInfoList(req, cb) {
        return this.request("DescribeLiveEnhanceInfoList", req, cb);
    }
    /**
     * 查询拉流转推任务的时长信息。
     */
    async DescribePullTransformPushInfo(req, cb) {
        return this.request("DescribePullTransformPushInfo", req, cb);
    }
    /**
     * 创建回调模板，数量上限：50，成功返回模板id后，需要调用[CreateLiveCallbackRule](/document/product/267/32638)接口将模板 ID 绑定到域名/路径使用。
<br>回调协议相关文档：[事件消息通知](/document/product/267/32744)。
注意：至少填写一个回调 URL。
     */
    async CreateLiveCallbackTemplate(req, cb) {
        return this.request("CreateLiveCallbackTemplate", req, cb);
    }
    /**
     * 根据域名状态、类型等信息查询用户的域名信息。
     */
    async DescribeLiveDomains(req, cb) {
        return this.request("DescribeLiveDomains", req, cb);
    }
    /**
     * 该接口用来修改导播台的推流信息。
注：只有在主监启动前设置才生效，主监启动后设置，下次推流生效。
     */
    async ModifyCasterOutputInfo(req, cb) {
        return this.request("ModifyCasterOutputInfo", req, cb);
    }
    /**
     * 该接口用来启动预监任务，并将获取预监画面的播放地址。
     */
    async CreateCasterPvw(req, cb) {
        return this.request("CreateCasterPvw", req, cb);
    }
    /**
     * 恢复某条流的推流。
     */
    async ResumeLiveStream(req, cb) {
        return this.request("ResumeLiveStream", req, cb);
    }
    /**
     * 该接口用来查询某个导播台的水印列表。
     */
    async DescribeCasterMarkPicInfos(req, cb) {
        return this.request("DescribeCasterMarkPicInfos", req, cb);
    }
    /**
     * 获取单个回调模板。
     */
    async DescribeLiveCallbackTemplate(req, cb) {
        return this.request("DescribeLiveCallbackTemplate", req, cb);
    }
    /**
     * 删除已添加的直播域名
     */
    async DeleteLiveDomain(req, cb) {
        return this.request("DeleteLiveDomain", req, cb);
    }
    /**
     * 修改回调模板。
     */
    async ModifyLiveCallbackTemplate(req, cb) {
        return this.request("ModifyLiveCallbackTemplate", req, cb);
    }
    /**
     * 该接口用来新增图片水印。
     */
    async AddCasterMarkPicInfo(req, cb) {
        return this.request("AddCasterMarkPicInfo", req, cb);
    }
    /**
     * 删除直播时移模板。
     */
    async DeleteLiveTimeShiftTemplate(req, cb) {
        return this.request("DeleteLiveTimeShiftTemplate", req, cb);
    }
    /**
     * 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
查询按省份和运营商分组的下行播放数据。
     */
    async DescribeGroupProIspPlayInfoList(req, cb) {
        return this.request("DescribeGroupProIspPlayInfoList", req, cb);
    }
    /**
     * 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
查询播放数据，支持按流名称查询详细播放数据，也可按播放域名查询详细总数据，数据延迟4分钟左右。
     */
    async DescribeStreamPlayInfoList(req, cb) {
        return this.request("DescribeStreamPlayInfoList", req, cb);
    }
    /**
     * 该接口用来创建新的导播台
     */
    async CreateCaster(req, cb) {
        return this.request("CreateCaster", req, cb);
    }
    /**
     * 该接口用来查询某个导播台的布局列表
     */
    async DescribeCasterLayoutInfos(req, cb) {
        return this.request("DescribeCasterLayoutInfos", req, cb);
    }
    /**
     * 查询直播拉流任务状态信息。
     */
    async DescribeLivePullStreamTaskStatus(req, cb) {
        return this.request("DescribeLivePullStreamTaskStatus", req, cb);
    }
    /**
     * 获取单个截图模板。
     */
    async DescribeLiveSnapshotTemplate(req, cb) {
        return this.request("DescribeLiveSnapshotTemplate", req, cb);
    }
    /**
     * 获取回调模板列表
     */
    async DescribeLiveCallbackTemplates(req, cb) {
        return this.request("DescribeLiveCallbackTemplates", req, cb);
    }
    /**
     * 提前结束录制，中止运行中的录制任务并生成录制文件。任务被成功终止后，本次任务将不再启动。
     */
    async StopRecordTask(req, cb) {
        return this.request("StopRecordTask", req, cb);
    }
    /**
     * 修改直播时移模板。
     */
    async ModifyLiveTimeShiftTemplate(req, cb) {
        return this.request("ModifyLiveTimeShiftTemplate", req, cb);
    }
    /**
     * 该接口用来创建直播流监播任务。
     */
    async CreateLiveStreamMonitor(req, cb) {
        return this.request("CreateLiveStreamMonitor", req, cb);
    }
    /**
     * 创建直播垫片规则。
     */
    async CreateLivePadRule(req, cb) {
        return this.request("CreateLivePadRule", req, cb);
    }
    /**
     * 说明：录制后的文件存放于点播平台。用户如需使用录制功能，需首先自行开通点播账号并确保账号可用。录制文件存放后，相关费用（含存储以及下行播放流量）按照点播平台计费方式收取，请参考对应文档。
     */
    async StopLiveRecord(req, cb) {
        return this.request("StopLiveRecord", req, cb);
    }
    /**
     * 修改播放鉴权key
     */
    async ModifyLivePlayAuthKey(req, cb) {
        return this.request("ModifyLivePlayAuthKey", req, cb);
    }
    /**
     * 该接口用来删除一个导播台的所有信息。
注意，调用该接口后，所有的导播台信息将被清除，包括正在直播的内容也将直接中断。
     */
    async DeleteCaster(req, cb) {
        return this.request("DeleteCaster", req, cb);
    }
    /**
     * 删除转码模板。
     */
    async DeleteLiveTranscodeTemplate(req, cb) {
        return this.request("DeleteLiveTranscodeTemplate", req, cb);
    }
    /**
     * 接口用来查询直播增值业务--截图的张数
     */
    async DescribeScreenShotSheetNumList(req, cb) {
        return this.request("DescribeScreenShotSheetNumList", req, cb);
    }
    /**
     * 解绑域名证书
     */
    async UnBindLiveDomainCert(req, cb) {
        return this.request("UnBindLiveDomainCert", req, cb);
    }
    /**
     * 删除录制任务配置。删除操作不影响正在运行当中的任务，仅对删除之后新的推流有效。
     */
    async DeleteRecordTask(req, cb) {
        return this.request("DeleteRecordTask", req, cb);
    }
    /**
     * 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
支持查询某天或某段时间的转码详细信息。由于转码数据量较大，如果查询时间跨度太长可能会拉不到数据，可以尝试将查询时间范围缩小些再重试。
     */
    async DescribeLiveTranscodeDetailInfo(req, cb) {
        return this.request("DescribeLiveTranscodeDetailInfo", req, cb);
    }
    /**
     * 批量获取日志URL。
     */
    async DescribeLogDownloadList(req, cb) {
        return this.request("DescribeLogDownloadList", req, cb);
    }
    /**
     * 获取直播时移模板。
     */
    async DescribeLiveTimeShiftTemplates(req, cb) {
        return this.request("DescribeLiveTimeShiftTemplates", req, cb);
    }
    /**
     * 获取录制规则列表
     */
    async DescribeLiveRecordRules(req, cb) {
        return this.request("DescribeLiveRecordRules", req, cb);
    }
    /**
     * 该接口用来删除导播台的推流信息。
注：若删除推流到腾讯云直播源站配置，即OutputIndex为0，OutputType为1的推流配置，在重新启动主监后，系统会自动重新生成一个推流到腾讯云直播源站配置。
     */
    async DeleteCasterOutputInfo(req, cb) {
        return this.request("DeleteCasterOutputInfo", req, cb);
    }
    /**
     * 该接口用来修改布局参数
     */
    async ModifyCasterLayoutInfo(req, cb) {
        return this.request("ModifyCasterLayoutInfo", req, cb);
    }
    /**
     * 该接口用来新增导播台推流信息。导播台主监启动后，将会将主监画面推向该接口设置的地址。
     */
    async AddCasterOutputInfo(req, cb) {
        return this.request("AddCasterOutputInfo", req, cb);
    }
    /**
     * P2P流数据查询接口，用来获取流量、卡播和起播信息。
     */
    async DescribeLiveXP2PDetailInfoList(req, cb) {
        return this.request("DescribeLiveXP2PDetailInfoList", req, cb);
    }
    /**
     * 获取直播延播列表。
     */
    async DescribeLiveDelayInfoList(req, cb) {
        return this.request("DescribeLiveDelayInfoList", req, cb);
    }
    /**
     * 获取直播时移规则列表。
     */
    async DescribeLiveTimeShiftRules(req, cb) {
        return this.request("DescribeLiveTimeShiftRules", req, cb);
    }
    /**
     * 删除录制规则。
     */
    async DeleteLiveRecordRule(req, cb) {
        return this.request("DeleteLiveRecordRule", req, cb);
    }
    /**
     * 查询直播域名信息。
     */
    async DescribeLiveDomain(req, cb) {
        return this.request("DescribeLiveDomain", req, cb);
    }
    /**
     * 删除直播垫片规则。
     */
    async DeleteLivePadRule(req, cb) {
        return this.request("DeleteLivePadRule", req, cb);
    }
    /**
     * 创建回调规则，需要先调用[CreateLiveCallbackTemplate](/document/product/267/32637)接口创建回调模板，将返回的模板id绑定到域名/路径进行使用。
<br>回调协议相关文档：[事件消息通知](/document/product/267/32744)。
     */
    async CreateLiveCallbackRule(req, cb) {
        return this.request("CreateLiveCallbackRule", req, cb);
    }
    /**
     * 获取回调规则列表
     */
    async DescribeLiveCallbackRules(req, cb) {
        return this.request("DescribeLiveCallbackRules", req, cb);
    }
    /**
     * 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
查询下行播放错误码信息，某段时间内1分钟粒度的各http错误码出现的次数，包括4xx，5xx。
     */
    async DescribePlayErrorCodeDetailInfoList(req, cb) {
        return this.request("DescribePlayErrorCodeDetailInfoList", req, cb);
    }
    /**
     * 提供给客户对账，按天统计，维度：推流域名、时移文件时长（累加）、配置天数（不累加）、时移总时长（累加）。
     */
    async DescribeLiveTimeShiftBillInfoList(req, cb) {
        return this.request("DescribeLiveTimeShiftBillInfoList", req, cb);
    }
    /**
     * 返回已经推过流的流列表。<br>
注意：分页最多支持查询1万条记录，可通过调整查询时间范围来获取更多数据。
     */
    async DescribeLiveStreamPublishedList(req, cb) {
        return this.request("DescribeLiveStreamPublishedList", req, cb);
    }
    /**
     * 查询指定时间段范围内启动和结束的截图任务列表。
- 使用前提
1. 仅用于查询由 CreateScreenshotTask接口创建的截图任务。
2. 不能查询被 DeleteScreenshotTask接口删除以及已过期（平台侧保留3个月）的截图任务。
     */
    async DescribeScreenshotTask(req, cb) {
        return this.request("DescribeScreenshotTask", req, cb);
    }
    /**
     * 使用该接口查询垫片流。垫片流状态更新存在一定延迟，可间隔30秒以上查询，避免频繁查询该接口。
     */
    async DescribeLivePadProcessorList(req, cb) {
        return this.request("DescribeLivePadProcessorList", req, cb);
    }
    /**
     * 直播推流带宽和流量数据查询。
推流计费会先取全球推流用量和全球播放用量进行比较，满足计费条件后再按各地区用量出账。详情参见[计费文档](https://cloud.tencent.com/document/product/267/34175)。
     */
    async DescribePushBandwidthAndFluxList(req, cb) {
        return this.request("DescribePushBandwidthAndFluxList", req, cb);
    }
    /**
     * 删除截图任务配置。删除操作不影响正在运行当中的任务，仅对删除之后新的推流有效。
     */
    async DeleteScreenshotTask(req, cb) {
        return this.request("DeleteScreenshotTask", req, cb);
    }
    /**
     * 禁止某条流的推送，可以预设某个时刻将流恢复。
注意：
1. 默认只要流名称正确，禁推就会生效。
2. 如需要推流域名+推流路径+流名称 强匹配生效禁推，需提单联系售后开启配置。
3. 如果配置了域名分组，需填写准确推流域名，才可断掉当前推流。
     */
    async ForbidLiveStream(req, cb) {
        return this.request("ForbidLiveStream", req, cb);
    }
    /**
     * 添加域名，一次只能提交一个域名。域名必须已备案。
     */
    async AddLiveDomain(req, cb) {
        return this.request("AddLiveDomain", req, cb);
    }
    /**
     * 修改直播拉流配置的状态。该接口已下线,请使用新接口 ModifyLivePullStreamTask。
     */
    async ModifyPullStreamStatus(req, cb) {
        return this.request("ModifyPullStreamStatus", req, cb);
    }
    /**
     * 查询直播转推计费带宽，查询时间范围最大支持3个月内的数据，时间跨度最长31天。
     */
    async DescribeDeliverBandwidthList(req, cb) {
        return this.request("DescribeDeliverBandwidthList", req, cb);
    }
    /**
     * 调用该接口实现切换当前播放所使用的主备流。
     */
    async SwitchBackupStream(req, cb) {
        return this.request("SwitchBackupStream", req, cb);
    }
    /**
     * 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
查询实时的域名维度下行播放数据，由于数据处理有耗时，接口默认查询4分钟前的准实时数据。
     */
    async DescribeLiveDomainPlayInfoList(req, cb) {
        return this.request("DescribeLiveDomainPlayInfoList", req, cb);
    }
    /**
     * 创建直播时移规则，需要先调用[CreateLiveTimeShiftTemplate](/document/product/267/86169)接口创建直播时移模板，将返回的模板id绑定到流使用。
<br>直播时移相关文档：[直播时移](/document/product/267/86134)。
     */
    async CreateLiveTimeShiftRule(req, cb) {
        return this.request("CreateLiveTimeShiftRule", req, cb);
    }
    /**
     * 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
用于查询回调事件。
     */
    async DescribeCallbackRecordsList(req, cb) {
        return this.request("DescribeCallbackRecordsList", req, cb);
    }
    /**
     * 创建录制规则，需要先调用[CreateLiveRecordTemplate](/document/product/267/32614)接口创建录制模板，将返回的模板id绑定到流使用。
<br>录制相关文档：[直播录制](/document/product/267/32739)。
     */
    async CreateLiveRecordRule(req, cb) {
        return this.request("CreateLiveRecordRule", req, cb);
    }
    /**
     * 创建直播拉流任务。支持将外部已有的点播文件，或者直播源拉取过来转推到指定的目标地址。
注意：
1. 默认支持任务数上限200个，如有特殊需求，可通过提单到售后进行评估增加上限。
2. 源流视频编码目前只支持: H264, H265。其他编码格式建议先进行转码处理。
3. 源流音频编码目前只支持: AAC。其他编码格式建议先进行转码处理。
4. 可在控制台开启过期自动清理，避免过期任务占用任务数额度。
5. 拉流转推功能为计费增值服务，计费规则详情可参见[计费文档](https://cloud.tencent.com/document/product/267/53308)。
6. 拉流转推功能仅提供内容拉取与推送服务，请确保内容已获得授权并符合内容传播相关的法律法规。若内容有侵权或违规相关问题，云直播会停止相关的功能服务并保留追究法律责任的权利。
     */
    async CreateLivePullStreamTask(req, cb) {
        return this.request("CreateLivePullStreamTask", req, cb);
    }
    /**
     * 获取转码模板列表。
     */
    async DescribeLiveTranscodeTemplates(req, cb) {
        return this.request("DescribeLiveTranscodeTemplates", req, cb);
    }
    /**
     * 创建录制模板，数量上限：50，成功返回模板id后，需要调用[CreateLiveRecordRule](/document/product/267/32615)接口，将模板id绑定到流进行使用。
<br>录制相关文档：[直播录制](/document/product/267/32739)。
     */
    async CreateLiveRecordTemplate(req, cb) {
        return this.request("CreateLiveRecordTemplate", req, cb);
    }
    /**
     * 直播播放带宽和流量数据查询。
     */
    async DescribeBillBandwidthAndFluxList(req, cb) {
        return this.request("DescribeBillBandwidthAndFluxList", req, cb);
    }
    /**
     * 停止使用某个直播域名。
     */
    async ForbidLiveDomain(req, cb) {
        return this.request("ForbidLiveDomain", req, cb);
    }
    /**
     * 创建转码规则，数量上限：50，需要先调用[CreateLiveTranscodeTemplate](/document/product/267/32646)接口创建转码模板，将返回的模板id绑定到流使用。
<br>转码相关文档：[直播转封装及转码](/document/product/267/32736)。
     */
    async CreateLiveTranscodeRule(req, cb) {
        return this.request("CreateLiveTranscodeRule", req, cb);
    }
    /**
     * 删除直播时移规则。
     */
    async DeleteLiveTimeShiftRule(req, cb) {
        return this.request("DeleteLiveTimeShiftRule", req, cb);
    }
    /**
     * 将正在运行的拉流转推任务进行重启。
注意：
1. 重启任务会造成推流中断。
2. 点播源任务的重启，会根据VodRefreshType决定是续播还是从头开始播。
     */
    async RestartLivePullStreamTask(req, cb) {
        return this.request("RestartLivePullStreamTask", req, cb);
    }
    /**
     * 获取直播垫片模板。
     */
    async DescribeLivePadTemplates(req, cb) {
        return this.request("DescribeLivePadTemplates", req, cb);
    }
    /**
     * 获取水印规则列表。
     */
    async DescribeLiveWatermarkRules(req, cb) {
        return this.request("DescribeLiveWatermarkRules", req, cb);
    }
    /**
     * 获取直播垫片规则列表。
     */
    async DescribeLivePadRules(req, cb) {
        return this.request("DescribeLivePadRules", req, cb);
    }
    /**
     * 该接口用来删除导播台中的输入源信息。
     */
    async DeleteCasterInputInfo(req, cb) {
        return this.request("DeleteCasterInputInfo", req, cb);
    }
    /**
     * 注：DeleteLiveRecord 接口仅用于删除录制任务记录，不具备停止录制的功能，也不能删除正在进行中的录制。如果需要停止录制任务，请使用终止录制[StopLiveRecord](/document/product/267/30146) 接口。
     */
    async DeleteLiveRecord(req, cb) {
        return this.request("DeleteLiveRecord", req, cb);
    }
    /**
     * 该接口用来查询直播流监播任务配置的列表信息。
     */
    async DescribeLiveStreamMonitorList(req, cb) {
        return this.request("DescribeLiveStreamMonitorList", req, cb);
    }
    /**
     * 创建截图规则，需要先调用[CreateLiveSnapshotTemplate](/document/product/267/32624)接口创建截图模板，然后将返回的模板 ID 绑定到流进行使用。
<br>截图相关文档：[直播截图](/document/product/267/32737)。
注意：单个域名仅支持关联一个截图模板。
     */
    async CreateLiveSnapshotRule(req, cb) {
        return this.request("CreateLiveSnapshotRule", req, cb);
    }
    /**
     * 创建直播时移模板。
     */
    async CreateLiveTimeShiftTemplate(req, cb) {
        return this.request("CreateLiveTimeShiftTemplate", req, cb);
    }
    /**
     * 该接口用来删除直播流监播任务。
     */
    async DeleteLiveStreamMonitor(req, cb) {
        return this.request("DeleteLiveStreamMonitor", req, cb);
    }
    /**
     * 查询导播台信息接口，用来查询导播台状态、描述、输出长、宽等信息
     */
    async DescribeCaster(req, cb) {
        return this.request("DescribeCaster", req, cb);
    }
    /**
     * 查询使用 CreateLivePullStreamTask 接口创建的直播拉流任务。
排序方式：默认按更新时间 倒序排列。
     */
    async DescribeLivePullStreamTasks(req, cb) {
        return this.request("DescribeLivePullStreamTasks", req, cb);
    }
    /**
     * 该接口用来停止导播台的主监输出。
停止主监后，对应的推流到腾讯云直播源站和推流到其他第三方平台均将会停止。
     */
    async StopCasterPgm(req, cb) {
        return this.request("StopCasterPgm", req, cb);
    }
    /**
     * 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
查询某段时间内每个国家地区每个省份每个运营商的平均每秒流量，总流量，总请求数信息。
     */
    async DescribeProIspPlaySumInfoList(req, cb) {
        return this.request("DescribeProIspPlaySumInfoList", req, cb);
    }
    /**
     * 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
输入某个时间点（1分钟维度），查询该时间点所有流的下行信息。
     */
    async DescribeAllStreamPlayInfoList(req, cb) {
        return this.request("DescribeAllStreamPlayInfoList", req, cb);
    }
    /**
     * 查询播放鉴权key。
     */
    async DescribeLivePlayAuthKey(req, cb) {
        return this.request("DescribeLivePlayAuthKey", req, cb);
    }
    /**
     * 该接口用来将预监画面的布局、水印、字幕等配置，复制到主监画面中。
该接口使用时，预监任务需处于运行状态。
     */
    async CreateCasterPgmFromPvw(req, cb) {
        return this.request("CreateCasterPgmFromPvw", req, cb);
    }
    /**
     * 该接口用来获取所有的转场名称及其对应的素材url。
     */
    async DescribeCasterTransitionTypes(req, cb) {
        return this.request("DescribeCasterTransitionTypes", req, cb);
    }
    /**
     * 查询导播台PVW任务和PGM任务的展示信息，包括使用的布局、水印、字幕等信息。
     */
    async DescribeCasterDisplayInfo(req, cb) {
        return this.request("DescribeCasterDisplayInfo", req, cb);
    }
    /**
     * 该接口用来修改直播流监播任务的配置。
     */
    async ModifyLiveStreamMonitor(req, cb) {
        return this.request("ModifyLiveStreamMonitor", req, cb);
    }
    /**
     * 本接口用来查询当前APPID导播台业务状态
     */
    async DescribeCasterUserStatus(req, cb) {
        return this.request("DescribeCasterUserStatus", req, cb);
    }
    /**
     * 返回直播中、无推流或者禁播等状态。

使用建议：
该接口提供实时流状态查询功能，鉴于网络抖动等一些不可抗因素，使用该接口作为判断主播是否开播等重要业务场景时，请参考以下使用建议。
1. 优先使用业务自身的房间开关播逻辑，判断主播是否在线，譬如客户端开播信令和主播在线心跳等。
2. 对于没有房间管理的直播场景，可以结合以下方案综合判断。
2.1 根据[推断流事件通知](/document/product/267/20388) 判断主播在线状态。
2.2 通过定时（间隔>1min）查询[直播中的流接口](/document/api/267/20472)，判断主播是否在线。
2.3 通过 本接口 查询直播流状态，判断主播是否在线。
2.4 以上任一方式判断为在线，都认为主播开播中，并且接口查询超时或解析异常时，也默认为在线，减少对业务的影响。
     */
    async DescribeLiveStreamState(req, cb) {
        return this.request("DescribeLiveStreamState", req, cb);
    }
    /**
     * 该接口用来查询导播台的输入源信息列表。
     */
    async DescribeCasterInputInfos(req, cb) {
        return this.request("DescribeCasterInputInfos", req, cb);
    }
    /**
     * 删除录制模板。
     */
    async DeleteLiveRecordTemplate(req, cb) {
        return this.request("DeleteLiveRecordTemplate", req, cb);
    }
    /**
     * 该接口用来复制导播台配置
     */
    async CopyCaster(req, cb) {
        return this.request("CopyCaster", req, cb);
    }
    /**
     * 该接口用来修改已经设置过的输入源信息，如源地址，源类型等。
设置前，需保证待修改的输入源已经存在。若不存在，需使用AddCasterInputInfo接口。
     */
    async ModifyCasterInputInfo(req, cb) {
        return this.request("ModifyCasterInputInfo", req, cb);
    }
    /**
     * 该接口用来删除导播台某个Index对应的水印。
     */
    async DeleteCasterMarkPicInfo(req, cb) {
        return this.request("DeleteCasterMarkPicInfo", req, cb);
    }
    /**
     * 该接口用来删除导播台的文本配置。
     */
    async DeleteCasterMarkWordInfo(req, cb) {
        return this.request("DeleteCasterMarkWordInfo", req, cb);
    }
    /**
     * 返回正在直播中的流列表。适用于推流成功后查询在线流信息。

注意：
1. 该接口仅提供辅助查询在线流列表功能，业务重要场景不可强依赖该接口。
2. 该接口仅适用于流数少于2万路的情况，对于流数较大用户请联系售后。
     */
    async DescribeBackupStreamList(req, cb) {
        return this.request("DescribeBackupStreamList", req, cb);
    }
    /**
     * 取消直播流设置的延时配置，恢复实时直播画面。
     */
    async ResumeDelayLiveStream(req, cb) {
        return this.request("ResumeDelayLiveStream", req, cb);
    }
    /**
     * 创建一个在指定时间启动、结束的录制任务，并使用指定录制模板ID对应的配置进行录制。
- 使用前提
1. 录制文件存放于点播平台或对象存储内，所以用户如需使用录制功能，需首先自行开通点播服务或对象存储服务。
2. 录制文件存放后相关费用（含存储以及下行播放流量）按照点播平台计费方式收取，具体请参考[对应文档](https://cloud.tencent.com/document/product/266/2837)。
- 注意事项
1. 断流会结束当前录制并生成录制文件。在结束时间到达之前任务仍然有效，期间只要正常推流都会正常录制，与是否多次推、断流无关。
2. 使用上避免创建时间段相互重叠的录制任务。若同一条流当前存在多个时段重叠的任务，为避免重复录制系统将启动最多3个录制任务。
3. 创建的录制任务记录在平台侧只保留3个月。
4. 当前录制任务管理API（[CreateRecordTask](https://cloud.tencent.com/document/product/267/45983)/[StopRecordTask](https://cloud.tencent.com/document/product/267/45981)/[DeleteRecordTask](https://cloud.tencent.com/document/product/267/45982)）与旧API（CreateLiveRecord/StopLiveRecord/DeleteLiveRecord）不兼容，两套接口不能混用。
5. 避免 创建录制任务 与 推流 操作同时进行，可能导致因录制任务未生效而引起任务延迟启动问题，两者操作间隔建议大于3秒。
     */
    async CreateRecordTask(req, cb) {
        return this.request("CreateRecordTask", req, cb);
    }
    /**
     * 创建转码模板，数量上限：50，成功返回模板id后，需要调用[CreateLiveTranscodeRule](/document/product/267/32647)接口，将返回的模板id绑定到流使用。
<br>转码相关文档：[直播转封装及转码](/document/product/267/32736)。
     */
    async CreateLiveTranscodeTemplate(req, cb) {
        return this.request("CreateLiveTranscodeTemplate", req, cb);
    }
    /**
     * 获取证书信息列表
     */
    async DescribeLiveCerts(req, cb) {
        return this.request("DescribeLiveCerts", req, cb);
    }
    /**
     * 获取转码规则列表
     */
    async DescribeLiveTranscodeRules(req, cb) {
        return this.request("DescribeLiveTranscodeRules", req, cb);
    }
    /**
     * 启用状态为停用的直播域名。
     */
    async EnableLiveDomain(req, cb) {
        return this.request("EnableLiveDomain", req, cb);
    }
    /**
     * 该接口用来取消混流。用法与 mix_streamv2.cancel_mix_stream 基本一致。
     */
    async CancelCommonMixStream(req, cb) {
        return this.request("CancelCommonMixStream", req, cb);
    }
    /**
     * 使用该接口停止垫片流。
     */
    async StopLivePadProcessor(req, cb) {
        return this.request("StopLivePadProcessor", req, cb);
    }
    /**
     * 查询用户套餐包总量、使用量、剩余量、包状态、购买时间和过期时间等。
     */
    async DescribeLivePackageInfo(req, cb) {
        return this.request("DescribeLivePackageInfo", req, cb);
    }
    /**
     * 创建临时拉流转推任务，目前限制添加10条任务。
该接口已下线,请使用新接口 CreateLivePullStreamTask。

注意：该接口用于创建临时拉流转推任务，
拉流源地址即 FromUrl 可以是腾讯或非腾讯数据源，
但转推目标地址即 ToUrl 目前限制为已注册的腾讯直播域名。
     */
    async CreatePullStreamConfig(req, cb) {
        return this.request("CreatePullStreamConfig", req, cb);
    }
    /**
     * 查询转码任务数。
     */
    async DescribeTranscodeTaskNum(req, cb) {
        return this.request("DescribeTranscodeTaskNum", req, cb);
    }
    /**
     * 该接口为监控数据接口，数据采集及统计方式与计费数据不同，仅供运营分析使用，不能用于计费对账参考。
查询所有实时流的推流信息，包括客户端IP，服务端IP，帧率，码率，域名，开始推流时间。
     */
    async DescribeLiveStreamPushInfoList(req, cb) {
        return this.request("DescribeLiveStreamPushInfoList", req, cb);
    }
    /**
     * 删除截图模板
     */
    async DeleteLiveSnapshotTemplate(req, cb) {
        return this.request("DeleteLiveSnapshotTemplate", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249185, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.lke = void 0;
const v20231130_1 = require("./v20231130");
exports.lke = {
    v20231130: v20231130_1.v20231130,
};

}, function(modId) { var map = {"./v20231130":1738984249186}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249186, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20231130 = void 0;
const Models = require("./lke_models");
const lke_client_1 = require("./lke_client");
exports.v20231130 = {
    Client: lke_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./lke_models":1738984249187,"./lke_client":1738984249188}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249187, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249188, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * lke client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("lke.tencentcloudapi.com", "2023-11-30", clientConfig);
    }
    /**
     * 查询不满意回复列表
     */
    async ListUnsatisfiedReply(req, cb) {
        return this.request("ListUnsatisfiedReply", req, cb);
    }
    /**
     * 删除属性标签
     */
    async DeleteAttributeLabel(req, cb) {
        return this.request("DeleteAttributeLabel", req, cb);
    }
    /**
     * 查询企业知识库容量饼图
     */
    async DescribeKnowledgeUsagePieGraph(req, cb) {
        return this.request("DescribeKnowledgeUsagePieGraph", req, cb);
    }
    /**
     * 批量修改问答适用范围
     */
    async ModifyQAAttrRange(req, cb) {
        return this.request("ModifyQAAttrRange", req, cb);
    }
    /**
     * 本接口为异步接口的查询结果接口，用于获取文档解析处理结果。
     */
    async GetReconstructDocumentResult(req, cb) {
        return this.request("GetReconstructDocumentResult", req, cb);
    }
    /**
     * 获取账户信息
     */
    async ListSelectDoc(req, cb) {
        return this.request("ListSelectDoc", req, cb);
    }
    /**
     * 批量修改文档适用范围
     */
    async ModifyDocAttrRange(req, cb) {
        return this.request("ModifyDocAttrRange", req, cb);
    }
    /**
     * 创建发布
     */
    async CreateRelease(req, cb) {
        return this.request("CreateRelease", req, cb);
    }
    /**
     * 删除问答
     */
    async DeleteQA(req, cb) {
        return this.request("DeleteQA", req, cb);
    }
    /**
     * 终止文档解析
     */
    async StopDocParse(req, cb) {
        return this.request("StopDocParse", req, cb);
    }
    /**
     * 创建属性
     */
    async CreateAttributeLabel(req, cb) {
        return this.request("CreateAttributeLabel", req, cb);
    }
    /**
     * 获取Doc分类
     */
    async ListDocCate(req, cb) {
        return this.request("ListDocCate", req, cb);
    }
    /**
     * 产品规划

接口支持图片和PDF转可编辑word格式文件，将文件中的图片、文本、表格等元素识别，并根据位置进行还原。
     */
    async ConvertDocument(req, cb) {
        return this.request("ConvertDocument", req, cb);
    }
    /**
     * 查询属性标签详情
     */
    async DescribeAttributeLabel(req, cb) {
        return this.request("DescribeAttributeLabel", req, cb);
    }
    /**
     * 发布拒答问题预览
     */
    async ListRejectedQuestionPreview(req, cb) {
        return this.request("ListRejectedQuestionPreview", req, cb);
    }
    /**
     * 基于知识引擎精调模型技术的rerank模型，支持对多路召回的结果进行重排序，根据query与切片内容的相关性，按分数由高到低对切片进行排序，并输出对应的打分结果。
     */
    async RunReRank(req, cb) {
        return this.request("RunReRank", req, cb);
    }
    /**
     * 文档解析重试
     */
    async RetryDocParse(req, cb) {
        return this.request("RetryDocParse", req, cb);
    }
    /**
     * 录入问答
     */
    async CreateQA(req, cb) {
        return this.request("CreateQA", req, cb);
    }
    /**
     * 接口调用token折线图
     */
    async DescribeTokenUsageGraph(req, cb) {
        return this.request("DescribeTokenUsageGraph", req, cb);
    }
    /**
     * 文档生成问答
     */
    async GenerateQA(req, cb) {
        return this.request("GenerateQA", req, cb);
    }
    /**
     * 获取企业下应用详情
     */
    async DescribeApp(req, cb) {
        return this.request("DescribeApp", req, cb);
    }
    /**
     * 获取ws token
     */
    async GetWsToken(req, cb) {
        return this.request("GetWsToken", req, cb);
    }
    /**
     * 查询属性标签列表
     */
    async ListAttributeLabel(req, cb) {
        return this.request("ListAttributeLabel", req, cb);
    }
    /**
     * 发布配置项预览
     */
    async ListReleaseConfigPreview(req, cb) {
        return this.request("ListReleaseConfigPreview", req, cb);
    }
    /**
     * 查询搜索服务调用折线图
     */
    async DescribeSearchStatsGraph(req, cb) {
        return this.request("DescribeSearchStatsGraph", req, cb);
    }
    /**
     * 接口已迁移到新接口了，无调用量

查询文档解析结果。该接口需开通文档解析原子能力后调用。文档解析原子能力内测中，如有需要请联系架构师或[联系客服](https://cloud.tencent.com/act/event/Online_service) 。
     */
    async QueryParseDocResult(req, cb) {
        return this.request("QueryParseDocResult", req, cb);
    }
    /**
     * 校验问答
     */
    async VerifyQA(req, cb) {
        return this.request("VerifyQA", req, cb);
    }
    /**
     * 创建Doc分类
     */
    async CreateDocCate(req, cb) {
        return this.request("CreateDocCate", req, cb);
    }
    /**
     * 检查属性下的标签名是否存在
     */
    async CheckAttributeLabelExist(req, cb) {
        return this.request("CheckAttributeLabelExist", req, cb);
    }
    /**
     * 文档详情
     */
    async DescribeDoc(req, cb) {
        return this.request("DescribeDoc", req, cb);
    }
    /**
     * 列表查询单次调用明细
     */
    async ListUsageCallDetail(req, cb) {
        return this.request("ListUsageCallDetail", req, cb);
    }
    /**
     * 获取文件上传临时密钥
     */
    async DescribeStorageCredential(req, cb) {
        return this.request("DescribeStorageCredential", req, cb);
    }
    /**
     * 点赞点踩消息
     */
    async RateMsgRecord(req, cb) {
        return this.request("RateMsgRecord", req, cb);
    }
    /**
     * 文档列表
     */
    async ListReleaseQAPreview(req, cb) {
        return this.request("ListReleaseQAPreview", req, cb);
    }
    /**
     * 更新QA分类
     */
    async ModifyQACate(req, cb) {
        return this.request("ModifyQACate", req, cb);
    }
    /**
     * 删除应用
     */
    async DeleteApp(req, cb) {
        return this.request("DeleteApp", req, cb);
    }
    /**
     * 检查属性标签引用
     */
    async CheckAttributeLabelRefer(req, cb) {
        return this.request("CheckAttributeLabelRefer", req, cb);
    }
    /**
     * 企业详情
     */
    async DescribeCorp(req, cb) {
        return this.request("DescribeCorp", req, cb);
    }
    /**
     * 获取不满意回复上下文
     */
    async DescribeUnsatisfiedReplyContext(req, cb) {
        return this.request("DescribeUnsatisfiedReplyContext", req, cb);
    }
    /**
     * Doc分组
     */
    async GroupDoc(req, cb) {
        return this.request("GroupDoc", req, cb);
    }
    /**
     * 获取企业下应用列表
     */
    async ListApp(req, cb) {
        return this.request("ListApp", req, cb);
    }
    /**
     * 接口调用token详情
     */
    async DescribeTokenUsage(req, cb) {
        return this.request("DescribeTokenUsage", req, cb);
    }
    /**
     * Doc分类删除
     */
    async DeleteDocCate(req, cb) {
        return this.request("DeleteDocCate", req, cb);
    }
    /**
     * 获取QA分类
     */
    async ListQACate(req, cb) {
        return this.request("ListQACate", req, cb);
    }
    /**
     * 应用类型列表
     */
    async ListAppCategory(req, cb) {
        return this.request("ListAppCategory", req, cb);
    }
    /**
     * 问答详情
     */
    async DescribeQA(req, cb) {
        return this.request("DescribeQA", req, cb);
    }
    /**
     * 创建知识引擎应用。
     */
    async CreateApp(req, cb) {
        return this.request("CreateApp", req, cb);
    }
    /**
     * 修改文档
     */
    async ModifyDoc(req, cb) {
        return this.request("ModifyDoc", req, cb);
    }
    /**
     * 创建QA分类
     */
    async CreateQACate(req, cb) {
        return this.request("CreateQACate", req, cb);
    }
    /**
     * 导出属性标签
     */
    async ExportAttributeLabel(req, cb) {
        return this.request("ExportAttributeLabel", req, cb);
    }
    /**
     * 获取来源详情列表
     */
    async DescribeRefer(req, cb) {
        return this.request("DescribeRefer", req, cb);
    }
    /**
     * 查询知识库用量
     */
    async DescribeKnowledgeUsage(req, cb) {
        return this.request("DescribeKnowledgeUsage", req, cb);
    }
    /**
     * 通过appKey获取应用业务ID
     */
    async DescribeRobotBizIDByAppKey(req, cb) {
        return this.request("DescribeRobotBizIDByAppKey", req, cb);
    }
    /**
     * 文档列表
     */
    async ListDoc(req, cb) {
        return this.request("ListDoc", req, cb);
    }
    /**
     * 问答列表
     */
    async ListQA(req, cb) {
        return this.request("ListQA", req, cb);
    }
    /**
     * 点赞点踩数据统计
     */
    async GetLikeDataCount(req, cb) {
        return this.request("GetLikeDataCount", req, cb);
    }
    /**
     * 修改Doc分类
     */
    async ModifyDocCate(req, cb) {
        return this.request("ModifyDocCate", req, cb);
    }
    /**
     * 导出QA列表
     */
    async ExportQAList(req, cb) {
        return this.request("ExportQAList", req, cb);
    }
    /**
     * 本接口为异步接口的发起请求接口，用于发起文档解析任务。
文档解析支持将图片或PDF文件转换成Markdown格式文件，可解析包括表格、公式、图片、标题、段落、页眉、页脚等内容元素，并将内容智能转换成阅读顺序。

体验期间单账号限制qps仅为1，若有正式接入需要请与产研团队沟通开放。
     */
    async CreateReconstructDocumentFlow(req, cb) {
        return this.request("CreateReconstructDocumentFlow", req, cb);
    }
    /**
     * 上传导入属性标签
     */
    async UploadAttributeLabel(req, cb) {
        return this.request("UploadAttributeLabel", req, cb);
    }
    /**
     * 获取文档预览信息
     */
    async GetDocPreview(req, cb) {
        return this.request("GetDocPreview", req, cb);
    }
    /**
     * 并发调用响应
     */
    async DescribeConcurrencyUsage(req, cb) {
        return this.request("DescribeConcurrencyUsage", req, cb);
    }
    /**
     * 修改拒答问题
     */
    async ModifyRejectedQuestion(req, cb) {
        return this.request("ModifyRejectedQuestion", req, cb);
    }
    /**
     * 接口已迁移到新接口了，无调用量

接口即将下线，请切换使用新接口：[文档解析](https://cloud.tencent.com/document/product/1759/107504)
     */
    async ParseDoc(req, cb) {
        return this.request("ParseDoc", req, cb);
    }
    /**
     * 是否意图转人工
     */
    async IsTransferIntent(req, cb) {
        return this.request("IsTransferIntent", req, cb);
    }
    /**
     * 拉取发布按钮状态、最后发布时间
     */
    async DescribeReleaseInfo(req, cb) {
        return this.request("DescribeReleaseInfo", req, cb);
    }
    /**
     * 发布列表
     */
    async ListRelease(req, cb) {
        return this.request("ListRelease", req, cb);
    }
    /**
     * 获取模型列表
     */
    async ListModel(req, cb) {
        return this.request("ListModel", req, cb);
    }
    /**
     * 获取拒答问题
     */
    async ListRejectedQuestion(req, cb) {
        return this.request("ListRejectedQuestion", req, cb);
    }
    /**
     * 分类删除
     */
    async DeleteQACate(req, cb) {
        return this.request("DeleteQACate", req, cb);
    }
    /**
     * 导出不满意回复
     */
    async ExportUnsatisfiedReply(req, cb) {
        return this.request("ExportUnsatisfiedReply", req, cb);
    }
    /**
     * 发布暂停后重试
     */
    async RetryRelease(req, cb) {
        return this.request("RetryRelease", req, cb);
    }
    /**
     * 更新问答
     */
    async ModifyQA(req, cb) {
        return this.request("ModifyQA", req, cb);
    }
    /**
     * 保存文档
     */
    async SaveDoc(req, cb) {
        return this.request("SaveDoc", req, cb);
    }
    /**
     * 删除文档
     */
    async DeleteDoc(req, cb) {
        return this.request("DeleteDoc", req, cb);
    }
    /**
     * 删除拒答问题
     */
    async DeleteRejectedQuestion(req, cb) {
        return this.request("DeleteRejectedQuestion", req, cb);
    }
    /**
     * 多轮改写（QueryRewrite）主要用于多轮对话中，进行指代消解和省略补全。使用本接口，无需输入prompt描述，根据对话历史即可生成更精确的用户查询。在应用场景上，本接口可应用于智能问答、对话式搜索等多种场景。
本接口（QueryRewrite）有单账号调用上限控制，如您有提高并发限制的需求请 [联系我们](https://cloud.tencent.com/act/event/Online_service) 。
     */
    async QueryRewrite(req, cb) {
        return this.request("QueryRewrite", req, cb);
    }
    /**
     * 文档解析重试
     */
    async RetryDocAudit(req, cb) {
        return this.request("RetryDocAudit", req, cb);
    }
    /**
     * 修改应用请求结构体
     */
    async ModifyApp(req, cb) {
        return this.request("ModifyApp", req, cb);
    }
    /**
     * 本接口（GetEmbedding）调用文本表示模型，将文本转化为用数值表示的向量形式，可用于文本检索、信息推荐、知识挖掘等场景。
本接口（GetEmbedding）有单账号调用上限控制，如您有提高并发限制的需求请 [联系我们](https://cloud.tencent.com/act/event/Online_service) 。
     */
    async GetEmbedding(req, cb) {
        return this.request("GetEmbedding", req, cb);
    }
    /**
     * 获取应用密钥
     */
    async GetAppSecret(req, cb) {
        return this.request("GetAppSecret", req, cb);
    }
    /**
     * 编辑属性标签
     */
    async ModifyAttributeLabel(req, cb) {
        return this.request("ModifyAttributeLabel", req, cb);
    }
    /**
     * 回答类型数据统计
     */
    async GetAnswerTypeDataCount(req, cb) {
        return this.request("GetAnswerTypeDataCount", req, cb);
    }
    /**
     * 发布文档预览
     */
    async ListReleaseDocPreview(req, cb) {
        return this.request("ListReleaseDocPreview", req, cb);
    }
    /**
     * 发布详情
     */
    async DescribeRelease(req, cb) {
        return this.request("DescribeRelease", req, cb);
    }
    /**
     * 创建企业
     */
    async CreateCorp(req, cb) {
        return this.request("CreateCorp", req, cb);
    }
    /**
     * 获取模型列表
     */
    async GetAppKnowledgeCount(req, cb) {
        return this.request("GetAppKnowledgeCount", req, cb);
    }
    /**
     * 并发调用折线图
     */
    async DescribeConcurrencyUsageGraph(req, cb) {
        return this.request("DescribeConcurrencyUsageGraph", req, cb);
    }
    /**
     * 获取聊天历史请求
     */
    async GetMsgRecord(req, cb) {
        return this.request("GetMsgRecord", req, cb);
    }
    /**
     * 创建拒答问题
     */
    async CreateRejectedQuestion(req, cb) {
        return this.request("CreateRejectedQuestion", req, cb);
    }
    /**
     * 接口调用折线图
     */
    async DescribeCallStatsGraph(req, cb) {
        return this.request("DescribeCallStatsGraph", req, cb);
    }
    /**
     * QA分组
     */
    async GroupQA(req, cb) {
        return this.request("GroupQA", req, cb);
    }
    /**
     * 获取片段详情
     */
    async DescribeSegments(req, cb) {
        return this.request("DescribeSegments", req, cb);
    }
    /**
     * 获取任务状态
     */
    async GetTaskStatus(req, cb) {
        return this.request("GetTaskStatus", req, cb);
    }
    /**
     * 支持将图片或PDF文件转换成Markdown格式文件，可解析包括表格、公式、图片、标题、段落、页眉、页脚等内容元素，并将内容智能转换成阅读顺序。

体验期间单账号限制qps仅为1，若有正式接入需要请与产研团队沟通开放。
     */
    async ReconstructDocument(req, cb) {
        return this.request("ReconstructDocument", req, cb);
    }
    /**
     * 重置会话
     */
    async ResetSession(req, cb) {
        return this.request("ResetSession", req, cb);
    }
    /**
     * 列表查询知识库容量详情
     */
    async ListAppKnowledgeDetail(req, cb) {
        return this.request("ListAppKnowledgeDetail", req, cb);
    }
    /**
     * 忽略不满意回复
     */
    async IgnoreUnsatisfiedReply(req, cb) {
        return this.request("IgnoreUnsatisfiedReply", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249189, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.lkeap = void 0;
const v20240522_1 = require("./v20240522");
exports.lkeap = {
    v20240522: v20240522_1.v20240522,
};

}, function(modId) { var map = {"./v20240522":1738984249190}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249190, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20240522 = void 0;
const Models = require("./lkeap_models");
const lkeap_client_1 = require("./lkeap_client");
exports.v20240522 = {
    Client: lkeap_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./lkeap_models":1738984249191,"./lkeap_client":1738984249192}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249191, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249192, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * lkeap client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("lkeap.tencentcloudapi.com", "2024-05-22", clientConfig);
    }
    /**
     * 用于检索知识库中的文档和问答对内容。 使用场景：适用于查询长期存储在知识库中的文档和问答对，比如产品手册、用户指南等内容的检索。
     */
    async RetrieveKnowledge(req, cb) {
        return this.request("RetrieveKnowledge", req, cb);
    }
    /**
     * 用于修改已有的问答对。 使用场景：当需要更新问答对的内容或答案时使用。
     */
    async ModifyQA(req, cb) {
        return this.request("ModifyQA", req, cb);
    }
    /**
     * 本接口为异步接口的查询结果接口，用于获取文档解析处理结果。
     */
    async GetReconstructDocumentResult(req, cb) {
        return this.request("GetReconstructDocumentResult", req, cb);
    }
    /**
     * 查询文档拆分任务结果
     */
    async GetSplitDocumentResult(req, cb) {
        return this.request("GetSplitDocumentResult", req, cb);
    }
    /**
     * 用于查询特定文档的详细信息。 使用场景：当需要查看某个文档的具体内容和属性时使用。
     */
    async DescribeDoc(req, cb) {
        return this.request("DescribeDoc", req, cb);
    }
    /**
     * 准实时文档解析接口，使用HTTP SSE 协议通信。
     */
    async ReconstructDocumentSSE(req, cb) {
        return this.request("ReconstructDocumentSSE", req, cb);
    }
    /**
     * 用于删除已有的文档。 使用场景：当某个文档不再需要时，可以将其删除以保持文档库的整洁。
     */
    async DeleteDocs(req, cb) {
        return this.request("DeleteDocs", req, cb);
    }
    /**
     * 用于删除已有的问答对。 使用场景：当某个问答对不再适用或需要移除时使用。
     */
    async DeleteQAs(req, cb) {
        return this.request("DeleteQAs", req, cb);
    }
    /**
     * 多轮改写（QueryRewrite）主要用于多轮对话中，进行指代消解和省略补全。使用本接口，无需输入prompt描述，根据对话历史即可生成更精确的用户查询。在应用场景上，本接口可应用于智能问答、对话式搜索等多种场景。
开通[产品体验](https://lke.cloud.tencent.com/lke/#/trialProduct)后可获得50wtoken体验额度。本接口（QueryRewrite）有单账号调用上限控制，如您有提高并发限制的需求请 [联系我们](https://cloud.tencent.com/act/event/Online_service) 。
     */
    async QueryRewrite(req, cb) {
        return this.request("QueryRewrite", req, cb);
    }
    /**
     * 本接口（GetEmbedding）调用文本表示模型，将文本转化为用数值表示的向量形式，可用于文本检索、信息推荐、知识挖掘等场景。
本接口（GetEmbedding）有单账号调用上限控制，如您有提高并发限制的需求请 [联系我们](https://cloud.tencent.com/act/event/Online_service) 。
     */
    async GetEmbedding(req, cb) {
        return this.request("GetEmbedding", req, cb);
    }
    /**
     * 用于修改已有的属性标签。 使用场景：当需要更改属性标签的名称或描述时使用，比如将“售后”标签改为“售前”。
     */
    async ModifyAttributeLabel(req, cb) {
        return this.request("ModifyAttributeLabel", req, cb);
    }
    /**
     * 基于知识引擎精调模型技术的rerank模型，支持对多路召回的结果进行重排序，根据query与切片内容的相关性，按分数由高到低对切片进行排序，并输出对应的打分结果。
     */
    async RunRerank(req, cb) {
        return this.request("RunRerank", req, cb);
    }
    /**
     * 用于获取所有问答对的列表。 使用场景：用于查看当前系统中所有已有的问答对，方便进行管理和维护。
     */
    async ListQAs(req, cb) {
        return this.request("ListQAs", req, cb);
    }
    /**
     * 用于删除不再需要的属性标签。 使用场景：当某个标签不再使用时，可以将其删除以保持标签系统的整洁。
     */
    async DeleteAttributeLabels(req, cb) {
        return this.request("DeleteAttributeLabels", req, cb);
    }
    /**
     * 用于为问答对创建属性标签，以便对内容进行分类和管理。 使用场景：当需要为问答对添加分类标签和属性标记时使用，比如为问答对添加“售后”标签。
     */
    async CreateAttributeLabel(req, cb) {
        return this.request("CreateAttributeLabel", req, cb);
    }
    /**
     * 本接口为异步接口的发起请求接口，用于发起文档解析任务。
文档解析支持将图片或PDF文件转换成Markdown格式文件，可解析包括表格、公式、图片、标题、段落、页眉、页脚等内容元素，并将内容智能转换成阅读顺序。

体验期间单账号限制qps仅为1，若有正式接入需要请与产研团队沟通开放。
     */
    async CreateReconstructDocumentFlow(req, cb) {
        return this.request("CreateReconstructDocumentFlow", req, cb);
    }
    /**
     * 用于获取所有属性标签的列表。 使用场景：用于查看当前系统中所有已有的属性标签，方便进行管理和维护。
     */
    async ListAttributeLabels(req, cb) {
        return this.request("ListAttributeLabels", req, cb);
    }
    /**
     * 用于获取所有文档的列表。 使用场景：用于查看当前系统中所有已有的文档，方便进行管理和维护。
     */
    async ListDocs(req, cb) {
        return this.request("ListDocs", req, cb);
    }
    /**
     * 用于在系统中创建一个新的知识库。知识库是一个用于存储和管理知识条目的集合，可以包括文档、问答对、属性标签等。创建知识库后，可以向其中添加各种知识条目，以便在后续的知识检索中使用。 使用场景：当需要在系统中建立一个新的知识库以存储和管理特定领域或项目的知识条目时使用。例如，一个用户可能需要创建一个知识库，以存储用户指南、常见问题解答和技术文档。
     */
    async CreateKnowledgeBase(req, cb) {
        return this.request("CreateKnowledgeBase", req, cb);
    }
    /**
     * 用于批量导入问答对，最多支持50,000条数据导入。通过此接口，可以将多个问答对一次性导入系统中，以便在后续的知识检索中使用。导入的问答对可以来自外部系统、文件或其他数据源。使用场景：当需要一次性导入大量的问答对时使用。例如，一个公司可能需要将其产品的常见问题解答从一个文档或外部系统批量导入到知识库中，以便用户可以通过知识检索系统进行查询。
     */
    async ImportQAs(req, cb) {
        return this.request("ImportQAs", req, cb);
    }
    /**
     * 用于创建新的问答对。问答对可以在SearchKnowledge接口知识检索时提供匹配的答案。 使用场景：当需要添加新的知识点和对应的问答对时使用，比如为产品添加新的常见问题解答。
     */
    async CreateQA(req, cb) {
        return this.request("CreateQA", req, cb);
    }
    /**
     * 用于从系统中删除一个现有的知识库。删除知识库将移除该知识库及其所有关联的知识条目（如文档、问答对、属性标签等）。该操作是不可逆的，请在执行前确认是否需要删除。**使用场景**：当某个知识库不再需要时，可以使用此接口将其从系统中删除。例如，一个项目结束后，其相关的知识库可能不再需要存储，可以使用该接口进行删除。
     */
    async DeleteKnowledgeBase(req, cb) {
        return this.request("DeleteKnowledgeBase", req, cb);
    }
    /**
     * 用于创建一个文档拆分任务，支持多种文件类型，具备mllm能力，能够解析并深入理解图表中的信息。
     */
    async CreateSplitDocumentFlow(req, cb) {
        return this.request("CreateSplitDocumentFlow", req, cb);
    }
    /**
     * 用于上传实时文档内容。实时文档在上传后可以立即通过SearchRealtime进行实时检索，适用于在会话中对文档进行问答的场景。
     */
    async UploadDocRealtime(req, cb) {
        return this.request("UploadDocRealtime", req, cb);
    }
    /**
     * 用于上传文档内容。上传的文档将存储在知识库中，可以通过SearchKnowledge知识库内容检索接口进行检索。
使用场景：适用于需要长期存储和检索的文档内容，如产品手册、用户指南等。
     */
    async UploadDoc(req, cb) {
        return this.request("UploadDoc", req, cb);
    }
    /**
     * #### 接口功能

调用接口，发起一次对话请求。

#### 已支持的模型
- DeepSeek-V3（model 参数值为**deepseek-v3**）
    - DeepSeek-V3为671B参数MoE模型，在百科知识、数学推理等多项任务上优势突出，评测成绩在主流榜单中位列开源模型榜首。
    - 支持64K上下文长度，最大支持8K输出长度。
- DeepSeek-R1（model 参数值为**deepseek-r1**）
    - DeepSeek-R1为671B模型，使用强化学习训练，推理过程包含大量反思和验证，思维链长度可达数万字。 该系列模型在数学、代码以及各种复杂逻辑推理任务上推理效果优异，并为用户展现了完整的思考过程。
    - 支持64K上下文长度，最大支持8K输出长度。

#### 计费说明
- 限时免费

本接口调用DeepSeek系列模型限时免费。即日至北京时间2025年2月25日23:59:59，所有腾讯云用户均可享受DeepSeek-V3、DeepSeek-R1模型限时免费服务，单账号限制接口并发上限为5。在此之后，模型价格将恢复至原价。
- 标准计费（2025年2月26日起生效）
![image](https://cdn.xiaowei.qq.com/static/lke/deepseek-token.png)

### Openai兼容协议接口
知识引擎原子能力大模型对话 API 兼容了 OpenAI 的接口规范，这意味着您可以直接使用 OpenAI 官方提供的 SDK 来调用大模型对话接口。您仅需要将 base_url 和 [api_key](https://cloud.tencent.com/document/product/1772/115970) 替换成相关配置，不需要对应用做额外修改，即可无缝将您的应用切换到相应的大模型。
> base_url：  https://api.lkeap.cloud.tencent.com/v1

> api_key的获取请参考[API KEY管理](https://cloud.tencent.com/document/product/1772/115970)


#### 快速接入
1. 完成[实名认证](https://console.cloud.tencent.com/developer/auth)。
2. 主账户前往[控制台](https://console.cloud.tencent.com/lkeap)开通服务。若为子账户，需由主账号在[权限管理](https://console.cloud.tencent.com/cam)中为子账号授权，关联预设策略，策略名称：QcloudLKEAPFullAccess。
3. 通过API Explorer[在线调试](https://console.cloud.tencent.com/api/explorer?Product=lkeap&Version=2024-05-22&Action=ChatCompletions)。
4. 使用[官方 SDK ](https://cloud.tencent.com/document/product/1772/115963#SDK)调用本接口（支持Python/Java/PHP/Go/Node.js/.NET等语言）。

-----------

### SDK调用示例
通过本地代码调用本接口（支持Python/Java/PHP/Go/Node.js/.NET等语言）：下面的代码以 Python 语言为例，展示如何访问腾讯云上的DeepSeek模型API的样例。
（1）安装环境
```
python3 -m pip install --upgrade tencentcloud-sdk-python-common
python3 -m pip install --upgrade tencentcloud-sdk-python-lkeap
```

（2）示例代码

- 其中SecretKey和SecretID需要从腾讯云控制台获取

- 参数params中模型Model字段可以选择“deepseek-r1“和“deepseek-v3”

```
# -*- coding: utf-8 -*-
import json

from tencentcloud.common.common_client import CommonClient
from tencentcloud.common import credential
from tencentcloud.common.exception.tencent_cloud_sdk_exception import TencentCloudSDKException
from tencentcloud.common.profile.client_profile import ClientProfile
from tencentcloud.common.profile.http_profile import HttpProfile

class NonStreamResponse(object):
    def __init__(self):
        self.response = ""

    def _deserialize(self, obj):
        self.response = json.dumps(obj)

try:
    # 实例化一个认证对象，入参需要传入腾讯云账户 SecretId 和 SecretKey，此处还需注意密钥对的保密
    # 代码泄露可能会导致 SecretId 和 SecretKey 泄露，并威胁账号下所有资源的安全性。以下代码示例仅供参考，建议采用更安全的方式来使用密钥，请参见：https://cloud.tencent.com/document/product/1278/85305
    # 密钥可前往官网控制台 https://console.cloud.tencent.com/cam/capi 进行获取
    cred = credential.Credential("", "")

    httpProfile = HttpProfile()
    httpProfile.endpoint = "lkeap.tencentcloudapi.com"
    httpProfile.reqTimeout = 40000  # 流式接口可能耗时较长
    clientProfile = ClientProfile()
    clientProfile.httpProfile = httpProfile

    params = "{\"Model\":\"deepseek-r1\",\"Messages\":[{\"Role\":\"user\",\"Content\":\"你好\"}],\"Stream\":true}";
    common_client = CommonClient("lkeap", "2024-05-22", cred, "ap-guangzhou", profile=clientProfile)
    resp = common_client._call_and_deserialize("ChatCompletions", json.loads(params), NonStreamResponse)
    if isinstance(resp, NonStreamResponse):  # 非流式响应
        print(resp.response)
    else:  # 流式响应
        for event in resp:
            print(event)
except TencentCloudSDKException as err:
    print(err)

```

**DeepSeek-R1使用建议**

1. 将温度设置在 0.5-0.7 范围内（建议为0.6），以防止无休止的重复或不连贯的输出。
2. 避免添加system prompt，所有说明都应包含在user prompt中。
     */
    async ChatCompletions(req, cb) {
        return this.request("ChatCompletions", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249193, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.lowcode = void 0;
const v20210108_1 = require("./v20210108");
exports.lowcode = {
    v20210108: v20210108_1.v20210108,
};

}, function(modId) { var map = {"./v20210108":1738984249194}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249194, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210108 = void 0;
const Models = require("./lowcode_models");
const lowcode_client_1 = require("./lowcode_client");
exports.v20210108 = {
    Client: lowcode_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./lowcode_models":1738984249195,"./lowcode_client":1738984249196}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249195, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249196, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * lowcode client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("lowcode.tencentcloudapi.com", "2021-01-08", clientConfig);
    }
    /**
     * 获取数据源详情列表
     */
    async DescribeDataSourceList(req, cb) {
        return this.request("DescribeDataSourceList", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249197, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.lp = void 0;
const v20200224_1 = require("./v20200224");
exports.lp = {
    v20200224: v20200224_1.v20200224,
};

}, function(modId) { var map = {"./v20200224":1738984249198}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249198, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200224 = void 0;
const Models = require("./lp_models");
const lp_client_1 = require("./lp_client");
exports.v20200224 = {
    Client: lp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./lp_models":1738984249199,"./lp_client":1738984249200}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249199, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249200, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * lp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("lp.tencentcloudapi.com", "2020-02-24", clientConfig);
    }
    /**
     * 登录保护服务（LoginProtection，LP）针对网站和 APP 的用户登录场景，实时检测是否存在盗号、撞库等恶意登录行为，帮助开发者发现异常登录，降低恶意用户登录给业务带来的风险。
     */
    async QueryLoginProtection(req, cb) {
        return this.request("QueryLoginProtection", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249201, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.mall = void 0;
const v20230518_1 = require("./v20230518");
exports.mall = {
    v20230518: v20230518_1.v20230518,
};

}, function(modId) { var map = {"./v20230518":1738984249202}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249202, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20230518 = void 0;
const Models = require("./mall_models");
const mall_client_1 = require("./mall_client");
exports.v20230518 = {
    Client: mall_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./mall_models":1738984249203,"./mall_client":1738984249204}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249203, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249204, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * mall client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("mall.tencentcloudapi.com", "2023-05-18", clientConfig);
    }
    /**
     * 依据客户的Uin查询开通的资源列表
     */
    async DescribeDrawResourceList(req, cb) {
        return this.request("DescribeDrawResourceList", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249205, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.mariadb = void 0;
const v20170312_1 = require("./v20170312");
exports.mariadb = {
    v20170312: v20170312_1.v20170312,
};

}, function(modId) { var map = {"./v20170312":1738984249206}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249206, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20170312 = void 0;
const Models = require("./mariadb_models");
const mariadb_client_1 = require("./mariadb_client");
exports.v20170312 = {
    Client: mariadb_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./mariadb_models":1738984249207,"./mariadb_client":1738984249208}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249207, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249208, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * mariadb client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("mariadb.tencentcloudapi.com", "2017-03-12", clientConfig);
    }
    /**
     * 本接口（DescribeAccountPrivileges）用于查询云数据库账号权限。
注意：注意：相同用户名，不同Host是不同的账号。
     */
    async DescribeAccountPrivileges(req, cb) {
        return this.request("DescribeAccountPrivileges", req, cb);
    }
    /**
     * 本接口（DescribeRenewalPrice）用于在续费云数据库实例时，查询续费的价格。
     */
    async DescribeRenewalPrice(req, cb) {
        return this.request("DescribeRenewalPrice", req, cb);
    }
    /**
     * 创建MariaDB按量计费实例
     */
    async CreateHourDBInstance(req, cb) {
        return this.request("CreateHourDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeInstanceNodeInfo）用于获取数据库实例主备节点信息
     */
    async DescribeInstanceNodeInfo(req, cb) {
        return this.request("DescribeInstanceNodeInfo", req, cb);
    }
    /**
     * 本接口（DescribeDatabaseObjects）用于查询云数据库实例的数据库中的对象列表，包含表、存储过程、视图和函数。
     */
    async DescribeDatabaseObjects(req, cb) {
        return this.request("DescribeDatabaseObjects", req, cb);
    }
    /**
     * 本接口（ModifyBackupTime）用于设置云数据库实例的备份时间。后台系统将根据此配置定期进行实例备份。
     */
    async ModifyBackupTime(req, cb) {
        return this.request("ModifyBackupTime", req, cb);
    }
    /**
     * 本接口（ModifyInstanceVport）用于修改实例VPORT
     */
    async ModifyInstanceVport(req, cb) {
        return this.request("ModifyInstanceVport", req, cb);
    }
    /**
     * 本接口(DescribeSaleInfo)用于查询云数据库可售卖的地域和可用区信息。
     */
    async DescribeSaleInfo(req, cb) {
        return this.request("DescribeSaleInfo", req, cb);
    }
    /**
     * 本接口（ModifyAccountDescription）用于修改云数据库账号备注。
注意：相同用户名，不同Host是不同的账号。
     */
    async ModifyAccountDescription(req, cb) {
        return this.request("ModifyAccountDescription", req, cb);
    }
    /**
     * 本接口(DestroyDBInstance)用于销毁已隔离的包年包月实例。
     */
    async DestroyDBInstance(req, cb) {
        return this.request("DestroyDBInstance", req, cb);
    }
    /**
     * 本接口（SwitchDBInstanceHA）用于发起实例主备切换。
     */
    async SwitchDBInstanceHA(req, cb) {
        return this.request("SwitchDBInstanceHA", req, cb);
    }
    /**
     * 本接口(DescribeFileDownloadUrl)用于获取数据库指定备份或日志文件的下载连接。
     */
    async DescribeFileDownloadUrl(req, cb) {
        return this.request("DescribeFileDownloadUrl", req, cb);
    }
    /**
     * 本接口（DescribeBackupTime）用于获取云数据库的备份时间。后台系统将根据此配置定期进行实例备份。
     */
    async DescribeBackupTime(req, cb) {
        return this.request("DescribeBackupTime", req, cb);
    }
    /**
     * 解隔离MariaDB按量计费实例
     */
    async ActivateHourDBInstance(req, cb) {
        return this.request("ActivateHourDBInstance", req, cb);
    }
    /**
     * 本接口（ResetAccountPassword）用于重置云数据库账号的密码。
注意：相同用户名，不同Host是不同的账号。
     */
    async ResetAccountPassword(req, cb) {
        return this.request("ResetAccountPassword", req, cb);
    }
    /**
     * 本接口(ModifyDBParameters)用于修改数据库参数。
     */
    async ModifyDBParameters(req, cb) {
        return this.request("ModifyDBParameters", req, cb);
    }
    /**
     * 本接口（KillSession）用于杀死指定会话。
     */
    async KillSession(req, cb) {
        return this.request("KillSession", req, cb);
    }
    /**
     * 本接口(DescribeDBSlowLogs)用于查询慢查询日志列表。
     */
    async DescribeDBSlowLogs(req, cb) {
        return this.request("DescribeDBSlowLogs", req, cb);
    }
    /**
     * 本接口（DescribeFlow）用于查询流程状态。
     */
    async DescribeFlow(req, cb) {
        return this.request("DescribeFlow", req, cb);
    }
    /**
     * 创建Mariadb独享集群实例
     */
    async CreateDedicatedClusterDBInstance(req, cb) {
        return this.request("CreateDedicatedClusterDBInstance", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceName）用于修改云数据库实例的名称。
     */
    async ModifyDBInstanceName(req, cb) {
        return this.request("ModifyDBInstanceName", req, cb);
    }
    /**
     * 本接口（IsolateDedicatedDBInstance）用于隔离独享云数据库实例。
     */
    async IsolateDedicatedDBInstance(req, cb) {
        return this.request("IsolateDedicatedDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeOrders）用于查询云数据库订单信息。传入订单ID来查询订单关联的云数据库实例，和对应的任务流程ID。
     */
    async DescribeOrders(req, cb) {
        return this.request("DescribeOrders", req, cb);
    }
    /**
     * 本接口 (ModifySyncTaskAttribute) 用于修改同步任务的属性（目前只支持修改任务名称）
     */
    async ModifySyncTaskAttribute(req, cb) {
        return this.request("ModifySyncTaskAttribute", req, cb);
    }
    /**
     * 本接口（DeleteAccount）用于删除云数据库账号。用户名+host唯一确定一个账号。
     */
    async DeleteAccount(req, cb) {
        return this.request("DeleteAccount", req, cb);
    }
    /**
     * 本接口(DescribeDBParameters)用于获取数据库的当前参数设置。
     */
    async DescribeDBParameters(req, cb) {
        return this.request("DescribeDBParameters", req, cb);
    }
    /**
     * 本接口（ModifyDBInstancesProject）用于修改云数据库实例所属项目。
     */
    async ModifyDBInstancesProject(req, cb) {
        return this.request("ModifyDBInstancesProject", req, cb);
    }
    /**
     * 本接口（RestartDBInstances）用于重启数据库实例
     */
    async RestartDBInstances(req, cb) {
        return this.request("RestartDBInstances", req, cb);
    }
    /**
     * 本接口（ModifyInstanceVip）用于修改实例VIP
     */
    async ModifyInstanceVip(req, cb) {
        return this.request("ModifyInstanceVip", req, cb);
    }
    /**
     * 本接口(IsolateDBInstance)用于隔离云数据库MariaDB实例（包年包月），隔离后不能通过IP和端口访问数据库。隔离的实例可在回收站中进行开机。若为欠费隔离，请尽快进行充值。
     */
    async IsolateDBInstance(req, cb) {
        return this.request("IsolateDBInstance", req, cb);
    }
    /**
     * 本接口(DescribeDBLogFiles)用于获取数据库的各种日志列表，包括冷备、binlog、errlog和slowlog。
     */
    async DescribeDBLogFiles(req, cb) {
        return this.request("DescribeDBLogFiles", req, cb);
    }
    /**
     * 本接口(ModifyRealServerAccessStrategy)用于修改云数据库的VPCGW到RS的访问策略。

**注意**
- 修改策略后只对新建立的连接生效，老连接不受影响
- 就近访问只针对实例是跨可用区部署有用，单可用区部署实例就近与否并无作用
- DB每个Node对应一个proxy，如果开启就近访问，将会把连接集中到对应可用区的proxy上，可能造成热点问题，这种情况下如果是线上业务，请务必根据自己的业务请求量测试符合预期后再进行就近策略变更
     */
    async ModifyRealServerAccessStrategy(req, cb) {
        return this.request("ModifyRealServerAccessStrategy", req, cb);
    }
    /**
     * 本接口（ModifyInstanceNetwork）用于修改实例所属网络
     */
    async ModifyInstanceNetwork(req, cb) {
        return this.request("ModifyInstanceNetwork", req, cb);
    }
    /**
     * 本接口（DestroyHourDBInstance）用于销毁MariaDB按量计费实例。
     */
    async DestroyHourDBInstance(req, cb) {
        return this.request("DestroyHourDBInstance", req, cb);
    }
    /**
     * 本接口(DescribeDBInstanceSpecs)用于查询可创建的云数据库可售卖的规格配置。
     */
    async DescribeDBInstanceSpecs(req, cb) {
        return this.request("DescribeDBInstanceSpecs", req, cb);
    }
    /**
     * 本接口（DescribeDBInstances）用于查询云数据库实例列表，支持通过项目ID、实例ID、内网地址、实例名称等来筛选实例。
如果不指定任何筛选条件，则默认返回20条实例记录，单次请求最多支持返回100条实例记录。
     */
    async DescribeDBInstances(req, cb) {
        return this.request("DescribeDBInstances", req, cb);
    }
    /**
     * 本接口（RenewDBInstance）用于续费云数据库实例。
     */
    async RenewDBInstance(req, cb) {
        return this.request("RenewDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeUpgradePrice）用于在扩容云数据库实例时，查询变配的价格。
     */
    async DescribeUpgradePrice(req, cb) {
        return this.request("DescribeUpgradePrice", req, cb);
    }
    /**
     * 本接口（DescribeProjectSecurityGroups）用于查询项目安全组信息
     */
    async DescribeProjectSecurityGroups(req, cb) {
        return this.request("DescribeProjectSecurityGroups", req, cb);
    }
    /**
     * 本接口 (AssociateSecurityGroups) 用于安全组批量绑定云资源。
     */
    async AssociateSecurityGroups(req, cb) {
        return this.request("AssociateSecurityGroups", req, cb);
    }
    /**
     * 本接口（CreateAccount）用于创建云数据库账号。一个实例可以创建多个不同的账号，相同的用户名+不同的host是不同的账号。
     */
    async CreateAccount(req, cb) {
        return this.request("CreateAccount", req, cb);
    }
    /**
     * 本接口（OpenDBExtranetAccess）用于开通云数据库实例的外网访问。开通外网访问后，您可通过外网域名和端口访问实例，可使用查询实例列表接口获取外网域名和端口信息。
     */
    async OpenDBExtranetAccess(req, cb) {
        return this.request("OpenDBExtranetAccess", req, cb);
    }
    /**
     * 本接口(InitDBInstances)用于初始化云数据库实例，包括设置默认字符集、表名大小写敏感等。
     */
    async InitDBInstances(req, cb) {
        return this.request("InitDBInstances", req, cb);
    }
    /**
     * 本接口(UpgradeDedicatedDBInstance)用于扩容独享云数据库实例。
     */
    async UpgradeDedicatedDBInstance(req, cb) {
        return this.request("UpgradeDedicatedDBInstance", req, cb);
    }
    /**
     * 本接口（CreateDBInstance）用于创建包年包月的MariaDB云数据库实例，可通过传入实例规格、数据库版本号、购买时长和数量等信息创建云数据库实例。
     */
    async CreateDBInstance(req, cb) {
        return this.request("CreateDBInstance", req, cb);
    }
    /**
     * 本接口(ModifyAccountPrivileges)用于修改云数据库的账户的权限信息。

**注意**
- 系统保留库："mysql"，只开放["SELECT"]权限
- 只读账号授予读写权限会报错
- 不传权限参数表示保留现有权限，如需清除，请在复杂类型Privileges字段传空数组
     */
    async ModifyAccountPrivileges(req, cb) {
        return this.request("ModifyAccountPrivileges", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceSecurityGroups）用于修改云数据库安全组
     */
    async ModifyDBInstanceSecurityGroups(req, cb) {
        return this.request("ModifyDBInstanceSecurityGroups", req, cb);
    }
    /**
     * 本接口（ModifyDBSyncMode）用于修改云数据库实例的同步模式。
     */
    async ModifyDBSyncMode(req, cb) {
        return this.request("ModifyDBSyncMode", req, cb);
    }
    /**
     * 本接口(CloseDBExtranetAccess)用于关闭云数据库实例的外网访问。关闭外网访问后，外网地址将不可访问，查询实例列表接口将不返回对应实例的外网域名和端口信息。
     */
    async CloseDBExtranetAccess(req, cb) {
        return this.request("CloseDBExtranetAccess", req, cb);
    }
    /**
     * 本接口（CreateTmpInstances）用于创建临时实例。
     */
    async CreateTmpInstances(req, cb) {
        return this.request("CreateTmpInstances", req, cb);
    }
    /**
     * 本接口(DescribeBackupFiles)用于查看备份文件列表。
     */
    async DescribeBackupFiles(req, cb) {
        return this.request("DescribeBackupFiles", req, cb);
    }
    /**
     * 本接口(ModifyDBEncryptAttributes)用于修改实例数据加密。
     */
    async ModifyDBEncryptAttributes(req, cb) {
        return this.request("ModifyDBEncryptAttributes", req, cb);
    }
    /**
     * 本接口（DescribeAccounts）用于查询指定云数据库实例的账号列表。
     */
    async DescribeAccounts(req, cb) {
        return this.request("DescribeAccounts", req, cb);
    }
    /**
     * 获取实例灾备详情
     */
    async DescribeDcnDetail(req, cb) {
        return this.request("DescribeDcnDetail", req, cb);
    }
    /**
     * 相当于在mysqld中执行flush logs，完成切分的binlog将展示在实例控制台binlog列表里。
     */
    async FlushBinlog(req, cb) {
        return this.request("FlushBinlog", req, cb);
    }
    /**
     * 本接口（GrantAccountPrivileges）用于给云数据库账号赋权。
注意：相同用户名，不同Host是不同的账号。
     */
    async GrantAccountPrivileges(req, cb) {
        return this.request("GrantAccountPrivileges", req, cb);
    }
    /**
     * 本接口（CopyAccountPrivileges）用于复制云数据库账号的权限。
注意：相同用户名，不同Host是不同的账号，Readonly属性相同的账号之间才能复制权限。
     */
    async CopyAccountPrivileges(req, cb) {
        return this.request("CopyAccountPrivileges", req, cb);
    }
    /**
     * 本接口（DescribeDBTmpInstances）用于获取实例回档生成的临时实例
     */
    async DescribeDBTmpInstances(req, cb) {
        return this.request("DescribeDBTmpInstances", req, cb);
    }
    /**
     * 本接口（DescribeDBSyncMode）用于查询云数据库实例的同步模式。
     */
    async DescribeDBSyncMode(req, cb) {
        return this.request("DescribeDBSyncMode", req, cb);
    }
    /**
     * 本接口（DescribeDatabases）用于查询云数据库实例的数据库列表。
     */
    async DescribeDatabases(req, cb) {
        return this.request("DescribeDatabases", req, cb);
    }
    /**
     * 本接口（DescribePrice）用于在购买实例前，查询实例的价格。
     */
    async DescribePrice(req, cb) {
        return this.request("DescribePrice", req, cb);
    }
    /**
     * 本接口（DescribeBinlogTime）用于查询可回档时间范围。
     */
    async DescribeBinlogTime(req, cb) {
        return this.request("DescribeBinlogTime", req, cb);
    }
    /**
     * 本接口（TerminateDedicatedDBInstance）用于销毁已隔离的独享云数据库实例。
     */
    async TerminateDedicatedDBInstance(req, cb) {
        return this.request("TerminateDedicatedDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeDBSecurityGroups）用于查询实例安全组信息
     */
    async DescribeDBSecurityGroups(req, cb) {
        return this.request("DescribeDBSecurityGroups", req, cb);
    }
    /**
     * 升级MariaDB按量计费实例
     */
    async UpgradeHourDBInstance(req, cb) {
        return this.request("UpgradeHourDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeDatabaseTable）用于查询云数据库实例的表信息。
     */
    async DescribeDatabaseTable(req, cb) {
        return this.request("DescribeDatabaseTable", req, cb);
    }
    /**
     * 本接口（CancelDcnJob）用于取消DCN同步
     */
    async CancelDcnJob(req, cb) {
        return this.request("CancelDcnJob", req, cb);
    }
    /**
     * 本接口(DescribeBackupConfigs)用于查询数据库备份配置信息。
     */
    async DescribeBackupConfigs(req, cb) {
        return this.request("DescribeBackupConfigs", req, cb);
    }
    /**
     * 本接口（CloneAccount）用于克隆实例账户。
     */
    async CloneAccount(req, cb) {
        return this.request("CloneAccount", req, cb);
    }
    /**
     * 隔离MariaDB按量计费实例
     */
    async IsolateHourDBInstance(req, cb) {
        return this.request("IsolateHourDBInstance", req, cb);
    }
    /**
     * 本接口(UpgradeDBInstance)用于扩容云数据库实例。本接口完成下单和支付两个动作，如果发生支付失败的错误，调用用户账户相关接口中的支付订单接口（PayDeals）重新支付即可。
     */
    async UpgradeDBInstance(req, cb) {
        return this.request("UpgradeDBInstance", req, cb);
    }
    /**
     * 本接口(ModifyBackupConfigs)用于修改数据库备份配置信息。

1. 修改数据库超期备份配置，目前按年、按月、按日只支持一种，存在互斥关系，如当前策略按年备份，如果传入按月备份策略将会覆盖当前的按年备份策略，务必注意。
     */
    async ModifyBackupConfigs(req, cb) {
        return this.request("ModifyBackupConfigs", req, cb);
    }
    /**
     * 本接口(DescribeDBInstanceDetail)用于查询指定实例的详细信息。
     */
    async DescribeDBInstanceDetail(req, cb) {
        return this.request("DescribeDBInstanceDetail", req, cb);
    }
    /**
     * 本接口(DescribeLogFileRetentionPeriod)用于查看数据库备份日志的备份天数的设置情况。
     */
    async DescribeLogFileRetentionPeriod(req, cb) {
        return this.request("DescribeLogFileRetentionPeriod", req, cb);
    }
    /**
     * 本接口(DisassociateSecurityGroups)用于安全组批量解绑实例。
     */
    async DisassociateSecurityGroups(req, cb) {
        return this.request("DisassociateSecurityGroups", req, cb);
    }
    /**
     * 本接口(DescribeDBEncryptAttributes)用于查询实例数据加密状态。
     */
    async DescribeDBEncryptAttributes(req, cb) {
        return this.request("DescribeDBEncryptAttributes", req, cb);
    }
    /**
     * 本接口(ModifyLogFileRetentionPeriod)用于修改数据库备份日志保存天数。
     */
    async ModifyLogFileRetentionPeriod(req, cb) {
        return this.request("ModifyLogFileRetentionPeriod", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249209, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.market = void 0;
const v20191010_1 = require("./v20191010");
exports.market = {
    v20191010: v20191010_1.v20191010,
};

}, function(modId) { var map = {"./v20191010":1738984249210}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249210, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20191010 = void 0;
const Models = require("./market_models");
const market_client_1 = require("./market_client");
exports.v20191010 = {
    Client: market_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./market_models":1738984249211,"./market_client":1738984249212}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249211, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249212, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * market client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("market.tencentcloudapi.com", "2019-10-10", clientConfig);
    }
    /**
     * 该接口可以根据InstanceId查询实例的api的使用情况。
     */
    async GetUsagePlanUsageAmount(req, cb) {
        return this.request("GetUsagePlanUsageAmount", req, cb);
    }
    /**
     * 计量商品用量提醒，用于服务商调用云服务，云服务向客户发送提醒信息
     */
    async FlowProductRemind(req, cb) {
        return this.request("FlowProductRemind", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249213, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.memcached = void 0;
const v20190318_1 = require("./v20190318");
exports.memcached = {
    v20190318: v20190318_1.v20190318,
};

}, function(modId) { var map = {"./v20190318":1738984249214}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249214, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190318 = void 0;
const Models = require("./memcached_models");
const memcached_client_1 = require("./memcached_client");
exports.v20190318 = {
    Client: memcached_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./memcached_models":1738984249215,"./memcached_client":1738984249216}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249215, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249216, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * memcached client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("memcached.tencentcloudapi.com", "2019-03-18", clientConfig);
    }
    /**
     * 获取Cmem实例列表
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249217, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.mgobe = void 0;
const v20201014_1 = require("./v20201014");
const v20190929_1 = require("./v20190929");
exports.mgobe = {
    v20201014: v20201014_1.v20201014,
    v20190929: v20190929_1.v20190929,
};

}, function(modId) { var map = {"./v20201014":1738984249218,"./v20190929":1738984249221}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249218, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201014 = void 0;
const Models = require("./mgobe_models");
const mgobe_client_1 = require("./mgobe_client");
exports.v20201014 = {
    Client: mgobe_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./mgobe_models":1738984249219,"./mgobe_client":1738984249220}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249219, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249220, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * mgobe client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("mgobe.tencentcloudapi.com", "2020-10-14", clientConfig);
    }
    /**
     * 此接口无法使用，游戏联机对战引擎MGOBE已于6.1正式下架，感谢您的支持

该接口用于查询玩家信息。支持两种用法，当OpenId不传的时候，PlayerId必传，传入PlayerId可以查询当前PlayerId的玩家信息，当OpenId传入的时候，PlayerId可不传，按照OpenId查询玩家信息。
     */
    async DescribePlayer(req, cb) {
        return this.request("DescribePlayer", req, cb);
    }
    /**
     * 此接口无法使用，游戏联机对战引擎MGOBE已于6.1正式下架，感谢您的支持

修改玩家自定义状态
     */
    async ChangeRoomPlayerStatus(req, cb) {
        return this.request("ChangeRoomPlayerStatus", req, cb);
    }
    /**
     * 此接口无法使用，游戏联机对战引擎MGOBE已于6.1正式下架，感谢您的支持

修改房间
     */
    async ModifyRoom(req, cb) {
        return this.request("ModifyRoom", req, cb);
    }
    /**
     * 此接口无法使用，游戏联机对战引擎MGOBE已于6.1正式下架，感谢您的支持

踢出房间玩家
     */
    async RemoveRoomPlayer(req, cb) {
        return this.request("RemoveRoomPlayer", req, cb);
    }
    /**
     * 此接口无法使用，游戏联机对战引擎MGOBE已于6.1正式下架，感谢您的支持

该接口用于查询房间信息。支持两种用法，当房间Id不传的时候，玩家Id必传，传入玩家Id可以查询当前玩家所在的房间信息，当房间Id传入的时候，玩家Id可不传，按照房间Id查询房间信息。
     */
    async DescribeRoom(req, cb) {
        return this.request("DescribeRoom", req, cb);
    }
    /**
     * 此接口无法使用，游戏联机对战引擎MGOBE已于6.1正式下架，感谢您的支持

修改房间玩家自定义属性
     */
    async ChangeRoomPlayerProfile(req, cb) {
        return this.request("ChangeRoomPlayerProfile", req, cb);
    }
    /**
     * 此接口无法使用，游戏联机对战引擎MGOBE已于6.1正式下架，感谢您的支持

通过game_id、room_id解散房间
     */
    async DismissRoom(req, cb) {
        return this.request("DismissRoom", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249221, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190929 = void 0;
const Models = require("./mgobe_models");
const mgobe_client_1 = require("./mgobe_client");
exports.v20190929 = {
    Client: mgobe_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./mgobe_models":1738984249222,"./mgobe_client":1738984249223}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249222, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249223, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * mgobe client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("mgobe.tencentcloudapi.com", "2019-09-29", clientConfig);
    }
    /**
     * 通过game_id、room_id解散房间
     */
    async DismissRoom(req, cb) {
        return this.request("DismissRoom", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249224, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.mmps = void 0;
const v20200710_1 = require("./v20200710");
exports.mmps = {
    v20200710: v20200710_1.v20200710,
};

}, function(modId) { var map = {"./v20200710":1738984249225}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249225, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200710 = void 0;
const Models = require("./mmps_models");
const mmps_client_1 = require("./mmps_client");
exports.v20200710 = {
    Client: mmps_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./mmps_models":1738984249226,"./mmps_client":1738984249227}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249226, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249227, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * mmps client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("mmps.tencentcloudapi.com", "2020-07-10", clientConfig);
    }
    /**
     * 创建小程序隐私合规诊断任务
     */
    async CreateAppScanTask(req, cb) {
        return this.request("CreateAppScanTask", req, cb);
    }
    /**
     * 创建小程序安全深度诊断任务
     */
    async CreateFlySecMiniAppProfessionalScanTask(req, cb) {
        return this.request("CreateFlySecMiniAppProfessionalScanTask", req, cb);
    }
    /**
     * 查询指定小程序版本的翼扬诊断安全得分
     */
    async DescribeFlySecMiniAppScanReportList(req, cb) {
        return this.request("DescribeFlySecMiniAppScanReportList", req, cb);
    }
    /**
     * 获取翼扬诊断任务报告链接地址
     */
    async DescribeFlySecMiniAppReportUrl(req, cb) {
        return this.request("DescribeFlySecMiniAppReportUrl", req, cb);
    }
    /**
     * 查询翼扬安全诊断任务状态
     */
    async DescribeFlySecMiniAppScanTaskStatus(req, cb) {
        return this.request("DescribeFlySecMiniAppScanTaskStatus", req, cb);
    }
    /**
     * 查询翼扬安全资源使用情况
     */
    async DescribeResourceUsageInfo(req, cb) {
        return this.request("DescribeResourceUsageInfo", req, cb);
    }
    /**
     * 创建小程序翼扬安全的基础或深度诊断任务
     */
    async CreateFlySecMiniAppScanTask(req, cb) {
        return this.request("CreateFlySecMiniAppScanTask", req, cb);
    }
    /**
     * 重新提交基础诊断任务
     */
    async CreateFlySecMiniAppScanTaskRepeat(req, cb) {
        return this.request("CreateFlySecMiniAppScanTaskRepeat", req, cb);
    }
    /**
     * 获取小程序合规诊断任务报告url
     */
    async DescribeScanTaskReportUrl(req, cb) {
        return this.request("DescribeScanTaskReportUrl", req, cb);
    }
    /**
     * 获取小程序隐私合规诊断任务列表
     */
    async DescribeScanTaskList(req, cb) {
        return this.request("DescribeScanTaskList", req, cb);
    }
    /**
     * 获取翼扬安全诊断任务列表
     */
    async DescribeFlySecMiniAppScanTaskList(req, cb) {
        return this.request("DescribeFlySecMiniAppScanTaskList", req, cb);
    }
    /**
     * 查询小程序隐私合规诊断任务状态
     */
    async DescribeScanTaskStatus(req, cb) {
        return this.request("DescribeScanTaskStatus", req, cb);
    }
    /**
     * 查询翼扬安全基础诊断资源使用情况
     */
    async DescribeBasicDiagnosisResourceUsageInfo(req, cb) {
        return this.request("DescribeBasicDiagnosisResourceUsageInfo", req, cb);
    }
    /**
     * 小程序隐私合规诊断重试任务
     */
    async CreateAppScanTaskRepeat(req, cb) {
        return this.request("CreateAppScanTaskRepeat", req, cb);
    }
    /**
     * 获取用户提交的基础诊断任务参数信息
     */
    async DescribeFlySecMiniAppScanTaskParam(req, cb) {
        return this.request("DescribeFlySecMiniAppScanTaskParam", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249228, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.mna = void 0;
const v20210119_1 = require("./v20210119");
exports.mna = {
    v20210119: v20210119_1.v20210119,
};

}, function(modId) { var map = {"./v20210119":1738984249229}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249229, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210119 = void 0;
const Models = require("./mna_models");
const mna_client_1 = require("./mna_client");
exports.v20210119 = {
    Client: mna_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./mna_models":1738984249230,"./mna_client":1738984249231}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249230, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249231, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * mna client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("mna.tencentcloudapi.com", "2021-01-19", clientConfig);
    }
    /**
     * 设置用户流量告警信息接口，通过该接口设置流量包告警阈值以及告警时回调的url和key
     */
    async SetNotifyUrl(req, cb) {
        return this.request("SetNotifyUrl", req, cb);
    }
    /**
     * 更新硬件信息
     */
    async UpdateHardware(req, cb) {
        return this.request("UpdateHardware", req, cb);
    }
    /**
     * 可开启/关闭流量包自动续费，不影响当前周期正在生效的流量包。
     */
    async ModifyPackageRenewFlag(req, cb) {
        return this.request("ModifyPackageRenewFlag", req, cb);
    }
    /**
     * 获取指定设备Id，指定时间点数据流量使用情况
     */
    async GetFlowStatistic(req, cb) {
        return this.request("GetFlowStatistic", req, cb);
    }
    /**
     * 获取指定分组，指定时间数据流量使用情况
     */
    async GetFlowStatisticByGroup(req, cb) {
        return this.request("GetFlowStatisticByGroup", req, cb);
    }
    /**
     * 批量获取设备流量统计曲线
     */
    async GetMultiFlowStatistic(req, cb) {
        return this.request("GetMultiFlowStatistic", req, cb);
    }
    /**
     * 获取设备信息列表
     */
    async GetDevices(req, cb) {
        return this.request("GetDevices", req, cb);
    }
    /**
     * 获取公钥用于验签
     */
    async GetPublicKey(req, cb) {
        return this.request("GetPublicKey", req, cb);
    }
    /**
     * 向已存在分组中添加设备
     */
    async GroupAddDevice(req, cb) {
        return this.request("GroupAddDevice", req, cb);
    }
    /**
     * 激活硬件设备
     */
    async ActivateHardware(req, cb) {
        return this.request("ActivateHardware", req, cb);
    }
    /**
     * 获取流量包列表
     */
    async GetFlowPackages(req, cb) {
        return this.request("GetFlowPackages", req, cb);
    }
    /**
     * 添加硬件设备，生成未激活的硬件设备，可支持批量添加
     */
    async AddHardware(req, cb) {
        return this.request("AddHardware", req, cb);
    }
    /**
     * 通过指定设备的ID查找设备详细信息
     */
    async GetDevice(req, cb) {
        return this.request("GetDevice", req, cb);
    }
    /**
     * 产品下线

移动网络发起Qos加速过程
     */
    async CreateQos(req, cb) {
        return this.request("CreateQos", req, cb);
    }
    /**
     * 删除互通规则
     */
    async DeleteL3Conn(req, cb) {
        return this.request("DeleteL3Conn", req, cb);
    }
    /**
     * 删除分组
     */
    async DeleteGroup(req, cb) {
        return this.request("DeleteGroup", req, cb);
    }
    /**
     * 产品下线

获取Qos加速状态
     */
    async DescribeQos(req, cb) {
        return this.request("DescribeQos", req, cb);
    }
    /**
     * 删除设备信息
     */
    async DeleteDevice(req, cb) {
        return this.request("DeleteDevice", req, cb);
    }
    /**
     * 更新设备信息
     */
    async UpdateDevice(req, cb) {
        return this.request("UpdateDevice", req, cb);
    }
    /**
     * 购买一次性授权License
     */
    async OrderPerLicense(req, cb) {
        return this.request("OrderPerLicense", req, cb);
    }
    /**
     * 获取单设备的实时流量统计指标
     */
    async GetNetMonitor(req, cb) {
        return this.request("GetNetMonitor", req, cb);
    }
    /**
     * 获取设备付费模式
     */
    async GetDevicePayMode(req, cb) {
        return this.request("GetDevicePayMode", req, cb);
    }
    /**
     * 查看分组详细信息
     */
    async GetGroupDetail(req, cb) {
        return this.request("GetGroupDetail", req, cb);
    }
    /**
     * 更新互通规则CIDR
     */
    async UpdateL3Cidr(req, cb) {
        return this.request("UpdateL3Cidr", req, cb);
    }
    /**
     * 获取厂商硬件设备列表
     */
    async GetVendorHardware(req, cb) {
        return this.request("GetVendorHardware", req, cb);
    }
    /**
     * 新建互通规则
     */
    async AddL3Conn(req, cb) {
        return this.request("AddL3Conn", req, cb);
    }
    /**
     * 通过此接口设置和更新预置密钥
     */
    async CreateEncryptedKey(req, cb) {
        return this.request("CreateEncryptedKey", req, cb);
    }
    /**
     * 产品下线

移动网络停止Qos加速过程
     */
    async DeleteQos(req, cb) {
        return this.request("DeleteQos", req, cb);
    }
    /**
     * 根据AppId查询用户设置的流量告警信息，包括阈值，回调url和key
     */
    async GetFlowAlarmInfo(req, cb) {
        return this.request("GetFlowAlarmInfo", req, cb);
    }
    /**
     * 删除分组中的设备
     */
    async GroupDeleteDevice(req, cb) {
        return this.request("GroupDeleteDevice", req, cb);
    }
    /**
     * 购买预付费流量包
     */
    async OrderFlowPackage(req, cb) {
        return this.request("OrderFlowPackage", req, cb);
    }
    /**
     * 在用量统计页面下载流量数据
     */
    async GetStatisticData(req, cb) {
        return this.request("GetStatisticData", req, cb);
    }
    /**
     * 获取厂商硬件列表
     */
    async GetHardwareList(req, cb) {
        return this.request("GetHardwareList", req, cb);
    }
    /**
     * 更新互通规则开关
     */
    async UpdateL3Switch(req, cb) {
        return this.request("UpdateL3Switch", req, cb);
    }
    /**
     * 新建设备记录
     */
    async AddDevice(req, cb) {
        return this.request("AddDevice", req, cb);
    }
    /**
     * 获取指定区域，指定时间点数据流量使用情况
     */
    async GetFlowStatisticByRegion(req, cb) {
        return this.request("GetFlowStatisticByRegion", req, cb);
    }
    /**
     * 获取分组列表
     */
    async GetGroupList(req, cb) {
        return this.request("GetGroupList", req, cb);
    }
    /**
     * 更新分组备注
     */
    async UpdateGroup(req, cb) {
        return this.request("UpdateGroup", req, cb);
    }
    /**
     * 新建分组
     */
    async AddGroup(req, cb) {
        return this.request("AddGroup", req, cb);
    }
    /**
     * 获取互通规则列表
     */
    async GetL3ConnList(req, cb) {
        return this.request("GetL3ConnList", req, cb);
    }
    /**
     * 更新互通规则备注
     */
    async UpdateL3Conn(req, cb) {
        return this.request("UpdateL3Conn", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249232, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.mongodb = void 0;
const v20190725_1 = require("./v20190725");
const v20180408_1 = require("./v20180408");
exports.mongodb = {
    v20190725: v20190725_1.v20190725,
    v20180408: v20180408_1.v20180408,
};

}, function(modId) { var map = {"./v20190725":1738984249233,"./v20180408":1738984249236}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249233, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190725 = void 0;
const Models = require("./mongodb_models");
const mongodb_client_1 = require("./mongodb_client");
exports.v20190725 = {
    Client: mongodb_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./mongodb_models":1738984249234,"./mongodb_client":1738984249235}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249234, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249235, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * mongodb client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("mongodb.tencentcloudapi.com", "2019-07-25", clientConfig);
    }
    /**
     * 本接口（TerminateDBInstances）可将包年包月实例退还隔离。
     */
    async TerminateDBInstances(req, cb) {
        return this.request("TerminateDBInstances", req, cb);
    }
    /**
     * 本接口用于查询节点的属性，包括节点所在可用区、节点名称、地址、角色、状态、主从延迟、优先级、投票权、标签等属性。
     */
    async DescribeDBInstanceNodeProperty(req, cb) {
        return this.request("DescribeDBInstanceNodeProperty", req, cb);
    }
    /**
     * 本接口(DescribeDBInstanceParamTpl )用于查询当前账号下所有MongoDB数据库参数模板
**说明：DescribeDBInstanceParamTpl  API正在公测中，在此期间，该接口仅对公测用户开放**
     */
    async DescribeDBInstanceParamTpl(req, cb) {
        return this.request("DescribeDBInstanceParamTpl", req, cb);
    }
    /**
     * 本接口（DescribeDBInstanceDeal）用于获取MongoDB购买、续费及变配订单详细。
     */
    async DescribeDBInstanceDeal(req, cb) {
        return this.request("DescribeDBInstanceDeal", req, cb);
    }
    /**
     * 本接口（DescribeCurrentOp）用于查询云数据库实例的当前正在执行的操作。
     */
    async DescribeCurrentOp(req, cb) {
        return this.request("DescribeCurrentOp", req, cb);
    }
    /**
     * 本接口（DescribeClientConnections）用于查询实例客户端连接信息，包括连接 IP 和连接数量。
     */
    async DescribeClientConnections(req, cb) {
        return this.request("DescribeClientConnections", req, cb);
    }
    /**
     * 修改实例用户的密码
     */
    async ResetDBInstancePassword(req, cb) {
        return this.request("ResetDBInstancePassword", req, cb);
    }
    /**
     * 本接口（DescribeSecurityGroup）用于查询实例绑定的安全组。
     */
    async DescribeSecurityGroup(req, cb) {
        return this.request("DescribeSecurityGroup", req, cb);
    }
    /**
     * 本接口（SetAccountUserPrivilege）用于设置实例的账号权限。
     */
    async SetAccountUserPrivilege(req, cb) {
        return this.request("SetAccountUserPrivilege", req, cb);
    }
    /**
     * 在所有mongos上执行FlushRouterConfig命令
     */
    async FlushInstanceRouterConfig(req, cb) {
        return this.request("FlushInstanceRouterConfig", req, cb);
    }
    /**
     * 本接口（DescribeDBBackups）用于查询实例备份列表，目前只支持查询7天内的备份记录。
     */
    async DescribeDBBackups(req, cb) {
        return this.request("DescribeDBBackups", req, cb);
    }
    /**
     * 本接口(IsolateDBInstance)用于隔离MongoDB云数据库按量计费实例。隔离后实例保留在回收站中，不能再写入数据。隔离一定时间后，实例会彻底删除，回收站保存时间请参考按量计费的服务条款。在隔离中的按量计费实例无法恢复，请谨慎操作。
     */
    async IsolateDBInstance(req, cb) {
        return this.request("IsolateDBInstance", req, cb);
    }
    /**
     * 本接口(SetBackupRules)用于设置 MongoDB 云数据库的自动备份规则。
     */
    async SetBackupRules(req, cb) {
        return this.request("SetBackupRules", req, cb);
    }
    /**
     * 本接口 (InquirePriceModifyDBInstanceSpec) 用于查询实例配置变更后的价格。
     */
    async InquirePriceModifyDBInstanceSpec(req, cb) {
        return this.request("InquirePriceModifyDBInstanceSpec", req, cb);
    }
    /**
     * 本接口用于重启数据库节点。
     */
    async RestartNodes(req, cb) {
        return this.request("RestartNodes", req, cb);
    }
    /**
     * 本接口（DescribeBackupRules）用于获取实例自动备份配置信息。
     */
    async DescribeBackupRules(req, cb) {
        return this.request("DescribeBackupRules", req, cb);
    }
    /**
     * 本接口(RenameInstance)用于修改云数据库实例的名称。
     */
    async RenameInstance(req, cb) {
        return this.request("RenameInstance", req, cb);
    }
    /**
     * 本接口（DescribeAsyncRequestInfo）用于查询异步任务状态接口。
     */
    async DescribeAsyncRequestInfo(req, cb) {
        return this.request("DescribeAsyncRequestInfo", req, cb);
    }
    /**
     * 本接口（CreateAccountUser）用于自定义实例访问账号。
     */
    async CreateAccountUser(req, cb) {
        return this.request("CreateAccountUser", req, cb);
    }
    /**
     * 本接口(ModifyDBInstanceParamTpl )用于修改MongoDB云数据库实例的参数模板。
**说明：ModifyDBInstanceParamTpl  API正在公测中，在此期间，该接口仅对公测用户开放**
     */
    async ModifyDBInstanceParamTpl(req, cb) {
        return this.request("ModifyDBInstanceParamTpl", req, cb);
    }
    /**
     * 本接口（CreateDBInstanceHour）用于创建按量计费的MongoDB云数据库实例。
     */
    async CreateDBInstanceHour(req, cb) {
        return this.request("CreateDBInstanceHour", req, cb);
    }
    /**
     * 本接口(CreateDBInstanceParamTpl)用于创建云数据库MongoDB实例的参数模板
**说明：CreateDBInstanceParamTpl API正在公测中，在此期间，该接口仅对公测用户开放**
     */
    async CreateDBInstanceParamTpl(req, cb) {
        return this.request("CreateDBInstanceParamTpl", req, cb);
    }
    /**
     * 本接口(DropDBInstanceParamTpl )用于删除云数据库MongoDB实例的参数模板
**说明：DropDBInstanceParamTpl  API正在公测中，在此期间，该接口仅对公测用户开放**
     */
    async DropDBInstanceParamTpl(req, cb) {
        return this.request("DropDBInstanceParamTpl", req, cb);
    }
    /**
     * 本接口(RenewDBInstance)用于续费云数据库实例，仅支持付费模式为包年包月的实例。按量计费实例不需要续费。
     */
    async RenewDBInstances(req, cb) {
        return this.request("RenewDBInstances", req, cb);
    }
    /**
     * 本接口用来创建某个备份文件的下载任务
     */
    async CreateBackupDownloadTask(req, cb) {
        return this.request("CreateBackupDownloadTask", req, cb);
    }
    /**
     * 该接口用于发起按 Key 闪回任务，依据数据的闪回 Key（默认为 id）对数据进行极速回档，快速恢复业务。
**说明：按 Key 闪回于2023年09月11日正式进行公测，在此期间，该接口仅对公测用户开放。**
     */
    async FlashBackDBInstance(req, cb) {
        return this.request("FlashBackDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeDBInstances）用于查询云数据库实例列表，支持通过项目ID、实例ID、实例状态等过滤条件来筛选主实例、灾备实例和只读实例信息列表。
     */
    async DescribeDBInstances(req, cb) {
        return this.request("DescribeDBInstances", req, cb);
    }
    /**
     * 本接口(OfflineIsolatedDBInstance)用于立即下线隔离状态的云数据库实例。进行操作的实例状态必须为隔离状态。
     */
    async OfflineIsolatedDBInstance(req, cb) {
        return this.request("OfflineIsolatedDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeSlowLogPatterns）用于获取数据库实例慢日志的统计信息。
     */
    async DescribeSlowLogPatterns(req, cb) {
        return this.request("DescribeSlowLogPatterns", req, cb);
    }
    /**
     * 本接口（DescribeSlowLogs）用于获取云数据库慢日志信息。接口只支持查询最近7天内慢日志。
     */
    async DescribeSlowLogs(req, cb) {
        return this.request("DescribeSlowLogs", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceNetworkAddress）用于修改云数据库实例的网络信息，支持基础网络切换为私有网络、私有网络切换私有网络。
     */
    async ModifyDBInstanceNetworkAddress(req, cb) {
        return this.request("ModifyDBInstanceNetworkAddress", req, cb);
    }
    /**
     * 本接口(CreateDBInstance)用于创建包年包月的MongoDB云数据库实例。接口支持的售卖规格，可从查询云数据库的售卖规格（DescribeSpecInfo）获取。
     */
    async CreateDBInstance(req, cb) {
        return this.request("CreateDBInstance", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceSpec）用于调整MongoDB云数据库实例配置。接口支持的售卖规格，可从查询云数据库的售卖规格（DescribeSpecInfo）获取。
     */
    async ModifyDBInstanceSpec(req, cb) {
        return this.request("ModifyDBInstanceSpec", req, cb);
    }
    /**
     * 本接口（DescribeInstanceParams）用于查询当前实例可修改的参数列表。
     */
    async DescribeInstanceParams(req, cb) {
        return this.request("DescribeInstanceParams", req, cb);
    }
    /**
     * 本接口(DescribeSpecInfo)用于查询实例的售卖规格。
     */
    async DescribeSpecInfo(req, cb) {
        return this.request("DescribeSpecInfo", req, cb);
    }
    /**
     * 查询备份下载任务信息
     */
    async DescribeBackupDownloadTask(req, cb) {
        return this.request("DescribeBackupDownloadTask", req, cb);
    }
    /**
     * 本接口（InquirePriceCreateDBInstances）用于创建数据库实例询价。本接口参数中必须传入region参数，否则无法通过校验。本接口仅允许针对购买限制范围内的实例配置进行询价。
     */
    async InquirePriceCreateDBInstances(req, cb) {
        return this.request("InquirePriceCreateDBInstances", req, cb);
    }
    /**
     * 本接口(AssignProject)用于指定云数据库实例的所属项目。
     */
    async AssignProject(req, cb) {
        return this.request("AssignProject", req, cb);
    }
    /**
     * 获取实例透明加密的开启状态
     */
    async DescribeTransparentDataEncryptionStatus(req, cb) {
        return this.request("DescribeTransparentDataEncryptionStatus", req, cb);
    }
    /**
     * 本接口（DescribeAccountUsers）用于获取当前实例的全部账号。
     */
    async DescribeAccountUsers(req, cb) {
        return this.request("DescribeAccountUsers", req, cb);
    }
    /**
     * 本接口（SetInstanceMaintenance ） 用于设置实例维护时间窗。
     */
    async SetInstanceMaintenance(req, cb) {
        return this.request("SetInstanceMaintenance", req, cb);
    }
    /**
     * 本接口（ModifyInstanceParams）用于修改mongoDB实例的参数配置。
     */
    async ModifyInstanceParams(req, cb) {
        return this.request("ModifyInstanceParams", req, cb);
    }
    /**
     * 本接口(DescribeDBInstanceParamTplDetail )用于查询MongoDB云数据库实例的参数模板详情。
**说明：DescribeDBInstanceParamTplDetail  API正在公测中，在此期间，该接口仅对公测用户开放**
     */
    async DescribeDBInstanceParamTplDetail(req, cb) {
        return this.request("DescribeDBInstanceParamTplDetail", req, cb);
    }
    /**
     * 本接口(KillOps)用于终止MongoDB云数据库实例上执行的特定操作。
     */
    async KillOps(req, cb) {
        return this.request("KillOps", req, cb);
    }
    /**
     * 本接口(EnableTransparentDataEncryption)用于开启云数据库 MongoDB 的透明加密能力。
     */
    async EnableTransparentDataEncryption(req, cb) {
        return this.request("EnableTransparentDataEncryption", req, cb);
    }
    /**
     * 本接口（CreateBackupDBInstance）用于备份实例。
     */
    async CreateBackupDBInstance(req, cb) {
        return this.request("CreateBackupDBInstance", req, cb);
    }
    /**
     * 本接口 (InquiryPriceRenewDBInstances) 用于续费包年包月实例询价。
     */
    async InquirePriceRenewDBInstances(req, cb) {
        return this.request("InquirePriceRenewDBInstances", req, cb);
    }
    /**
     * 本接口（DeleteAccountUser）用于删除实例的自定义账号。
     */
    async DeleteAccountUser(req, cb) {
        return this.request("DeleteAccountUser", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceSecurityGroup）用于修改实例绑定的安全组
     */
    async ModifyDBInstanceSecurityGroup(req, cb) {
        return this.request("ModifyDBInstanceSecurityGroup", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249236, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180408 = void 0;
const Models = require("./mongodb_models");
const mongodb_client_1 = require("./mongodb_client");
exports.v20180408 = {
    Client: mongodb_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./mongodb_models":1738984249237,"./mongodb_client":1738984249238}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249237, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249238, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * mongodb client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("mongodb.tencentcloudapi.com", "2018-04-08", clientConfig);
    }
    /**
     * 本接口（AssignProject）用于指定云数据库实例的所属项目。
     */
    async AssignProject(req, cb) {
        return this.request("AssignProject", req, cb);
    }
    /**
     * 本接口(TerminateDBInstance)用于销毁按量计费的MongoDB云数据库实例。
     */
    async TerminateDBInstance(req, cb) {
        return this.request("TerminateDBInstance", req, cb);
    }
    /**
     * 本接口(CreateDBInstance)用于创建包年包月的MongoDB云数据库实例。
     */
    async CreateDBInstance(req, cb) {
        return this.request("CreateDBInstance", req, cb);
    }
    /**
     * 本接口(DescribeClientConnections)用于查询实例客户端连接信息，包括连接IP和连接数量。目前只支持3.2版本的MongoDB实例。
     */
    async DescribeClientConnections(req, cb) {
        return this.request("DescribeClientConnections", req, cb);
    }
    /**
     * 本接口(CreateDBInstanceHour)用于创建按量计费的MongoDB云数据库实例，可通过传入实例规格、实例类型、MongoDB版本、购买时长和数量等信息创建云数据库实例。
     */
    async CreateDBInstanceHour(req, cb) {
        return this.request("CreateDBInstanceHour", req, cb);
    }
    /**
     * 本接口(DescribeSlowLogs)用于获取云数据库实例的慢查询日志。
     */
    async DescribeSlowLog(req, cb) {
        return this.request("DescribeSlowLog", req, cb);
    }
    /**
     * 本接口(RenameInstance)用于修改云数据库实例的名称。
     */
    async RenameInstance(req, cb) {
        return this.request("RenameInstance", req, cb);
    }
    /**
     * 本接口(UpgradeDBInstance)用于升级包年包月的MongoDB云数据库实例，可以扩容内存、存储以及Oplog
     */
    async UpgradeDBInstance(req, cb) {
        return this.request("UpgradeDBInstance", req, cb);
    }
    /**
     * 本接口(SetAutoRenew)用于设置包年包月云数据库实例的续费选项。
     */
    async SetAutoRenew(req, cb) {
        return this.request("SetAutoRenew", req, cb);
    }
    /**
     * 本接口(DescribeSpecInfo)用于查询实例的售卖规格。
     */
    async DescribeSpecInfo(req, cb) {
        return this.request("DescribeSpecInfo", req, cb);
    }
    /**
     * 本接口(SetPassword)用于设置（初始化）MongoDB云数据库实例账户密码。
     */
    async SetPassword(req, cb) {
        return this.request("SetPassword", req, cb);
    }
    /**
     * 本接口(UpgradeDBInstanceHour)用于升级按量计费的MongoDB云数据库实例，可以扩容内存、存储以及oplog
     */
    async UpgradeDBInstanceHour(req, cb) {
        return this.request("UpgradeDBInstanceHour", req, cb);
    }
    /**
     * 本接口(DescribeDBInstances)用于查询云数据库实例列表，支持通过项目ID、实例ID、实例状态等过滤条件来筛选实例。支持查询主实例、灾备实例和只读实例信息列表。
     */
    async DescribeDBInstances(req, cb) {
        return this.request("DescribeDBInstances", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249239, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.monitor = void 0;
const v20180724_1 = require("./v20180724");
exports.monitor = {
    v20180724: v20180724_1.v20180724,
};

}, function(modId) { var map = {"./v20180724":1738984249240}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249240, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180724 = void 0;
const Models = require("./monitor_models");
const monitor_client_1 = require("./monitor_client");
exports.v20180724 = {
    Client: monitor_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./monitor_models":1738984249241,"./monitor_client":1738984249242}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249241, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249242, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * monitor client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("monitor.tencentcloudapi.com", "2018-07-24", clientConfig);
    }
    /**
     * 更新 Grafana 告警通道
     */
    async UpdateGrafanaNotificationChannel(req, cb) {
        return this.request("UpdateGrafanaNotificationChannel", req, cb);
    }
    /**
     * 获取告警短信配额
     */
    async DescribeAlarmSmsQuota(req, cb) {
        return this.request("DescribeAlarmSmsQuota", req, cb);
    }
    /**
     * 创建 Prometheus 告警规则。

请注意，**告警对象和告警消息是 Prometheus Rule Annotations 的特殊字段，需要通过 annotations 来传递，对应的 Key 分别为summary/description**，，请参考 [Prometheus Rule更多配置请参考](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/)。
     */
    async CreateAlertRule(req, cb) {
        return this.request("CreateAlertRule", req, cb);
    }
    /**
     * 解除TMP实例的集群关联
     */
    async DeletePrometheusClusterAgent(req, cb) {
        return this.request("DeletePrometheusClusterAgent", req, cb);
    }
    /**
     * 获取已绑定对象列表
     */
    async DescribeBindingPolicyObjectList(req, cb) {
        return this.request("DescribeBindingPolicyObjectList", req, cb);
    }
    /**
     * 更新 Prometheus 的告警规则。

请注意，**告警对象和告警消息是 Prometheus Rule Annotations 的特殊字段，需要通过 annotations 来传递，对应的 Key 分别为summary/description**，，请参考 [Prometheus Rule更多配置请参考](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/)。
     */
    async UpdateAlertRule(req, cb) {
        return this.request("UpdateAlertRule", req, cb);
    }
    /**
     * 获取资源消耗页概览
     */
    async DescribeMonitorResourceInfo(req, cb) {
        return this.request("DescribeMonitorResourceInfo", req, cb);
    }
    /**
     * 修改2.0实例告警策略
     */
    async ModifyPrometheusAlertPolicy(req, cb) {
        return this.request("ModifyPrometheusAlertPolicy", req, cb);
    }
    /**
     * 查询给定prometheus下的告警分组
     */
    async DescribePrometheusAlertGroups(req, cb) {
        return this.request("DescribePrometheusAlertGroups", req, cb);
    }
    /**
     * 查询Prometheus按量实例用量
     */
    async DescribePrometheusInstanceUsage(req, cb) {
        return this.request("DescribePrometheusInstanceUsage", req, cb);
    }
    /**
     * 修改告警接收人
     */
    async ModifyAlarmReceivers(req, cb) {
        return this.request("ModifyAlarmReceivers", req, cb);
    }
    /**
     * 将告警策略绑定到特定对象
     */
    async BindingPolicyObject(req, cb) {
        return this.request("BindingPolicyObject", req, cb);
    }
    /**
     * 删除Prometheus告警规则分组
     */
    async DeletePrometheusAlertGroups(req, cb) {
        return this.request("DeletePrometheusAlertGroups", req, cb);
    }
    /**
     * 本接口（CreateGrafanaInstance）用于创建 Grafana 包年包月实例，默认基础版、到期自动续费、不可使用代金券。
     */
    async CreateGrafanaInstance(req, cb) {
        return this.request("CreateGrafanaInstance", req, cb);
    }
    /**
     * 创建告警策略
     */
    async CreateAlarmPolicy(req, cb) {
        return this.request("CreateAlarmPolicy", req, cb);
    }
    /**
     * 查询腾讯云可观测平台云产品列表，支持云服务器CVM、云数据库、云消息队列、负载均衡、容器服务、专线等云产品。
     */
    async DescribeProductList(req, cb) {
        return this.request("DescribeProductList", req, cb);
    }
    /**
     * 获取聚合规则列表，包含关联集群内crd资源创建的record rule
     */
    async DescribePrometheusRecordRules(req, cb) {
        return this.request("DescribePrometheusRecordRules", req, cb);
    }
    /**
     * 更新已授权账号的备注、权限信息，会直接覆盖原有的信息，不传则不会更新。
     */
    async UpdateSSOAccount(req, cb) {
        return this.request("UpdateSSOAccount", req, cb);
    }
    /**
     * 获取TMP实例关联集群列表
     */
    async DescribePrometheusClusterAgents(req, cb) {
        return this.request("DescribePrometheusClusterAgents", req, cb);
    }
    /**
     * 列出 Prometheus 服务可用区。
     */
    async DescribePrometheusZones(req, cb) {
        return this.request("DescribePrometheusZones", req, cb);
    }
    /**
     * 列出 Grafana 环境变量
     */
    async DescribeGrafanaEnvironments(req, cb) {
        return this.request("DescribeGrafanaEnvironments", req, cb);
    }
    /**
     * 更新 Prometheus 的预聚合规则
     */
    async UpdateRecordingRule(req, cb) {
        return this.request("UpdateRecordingRule", req, cb);
    }
    /**
     * 删除 Grafana 告警通道
     */
    async DeleteGrafanaNotificationChannel(req, cb) {
        return this.request("DeleteGrafanaNotificationChannel", req, cb);
    }
    /**
     * 根据维度条件查询监控数据
     */
    async DescribeStatisticData(req, cb) {
        return this.request("DescribeStatisticData", req, cb);
    }
    /**
     * 列出 Grafana 的设置，即 grafana.ini 文件内容
     */
    async DescribeGrafanaConfig(req, cb) {
        return this.request("DescribeGrafanaConfig", req, cb);
    }
    /**
     * 告警2.0编辑告警策略基本信息，包括策略名、备注
     */
    async ModifyAlarmPolicyInfo(req, cb) {
        return this.request("ModifyAlarmPolicyInfo", req, cb);
    }
    /**
     * 启停告警策略
     */
    async ModifyAlarmPolicyStatus(req, cb) {
        return this.request("ModifyAlarmPolicyStatus", req, cb);
    }
    /**
     * 删除 Prometheus Agent 抓取任务
     */
    async DeletePrometheusScrapeJobs(req, cb) {
        return this.request("DeletePrometheusScrapeJobs", req, cb);
    }
    /**
     * 设置 Grafana 单点登录，使用腾讯云账号
     */
    async EnableGrafanaSSO(req, cb) {
        return this.request("EnableGrafanaSSO", req, cb);
    }
    /**
     * 批量删除 Prometheus 报警规则
     */
    async DeleteAlertRules(req, cb) {
        return this.request("DeleteAlertRules", req, cb);
    }
    /**
     * 获取基础指标属性
     */
    async DescribeBaseMetrics(req, cb) {
        return this.request("DescribeBaseMetrics", req, cb);
    }
    /**
     * 查询告警事件列表
     */
    async DescribeAlarmEvents(req, cb) {
        return this.request("DescribeAlarmEvents", req, cb);
    }
    /**
     * 查询周期内电话流水总数
     */
    async DescribePhoneAlarmFlowTotalCount(req, cb) {
        return this.request("DescribePhoneAlarmFlowTotalCount", req, cb);
    }
    /**
     * 删除告警通知模板
     */
    async DeleteAlarmNotices(req, cb) {
        return this.request("DeleteAlarmNotices", req, cb);
    }
    /**
     * 编辑告警通知模板
     */
    async ModifyAlarmNotice(req, cb) {
        return this.request("ModifyAlarmNotice", req, cb);
    }
    /**
     * 获取TMP实例详情
     */
    async DescribePrometheusInstanceDetail(req, cb) {
        return this.request("DescribePrometheusInstanceDetail", req, cb);
    }
    /**
     * 创建 Prometheus Agent 抓取任务
     */
    async CreatePrometheusScrapeJob(req, cb) {
        return this.request("CreatePrometheusScrapeJob", req, cb);
    }
    /**
     * 删除策略的关联对象
     */
    async UnBindingPolicyObject(req, cb) {
        return this.request("UnBindingPolicyObject", req, cb);
    }
    /**
     * 获取条件模板列表
     */
    async DescribeConditionsTemplateList(req, cb) {
        return this.request("DescribeConditionsTemplateList", req, cb);
    }
    /**
     * 列出 Prometheus 抓取任务
     */
    async DescribePrometheusScrapeJobs(req, cb) {
        return this.request("DescribePrometheusScrapeJobs", req, cb);
    }
    /**
     * 删除在腾讯云容器服务下创建的 Prometheus 服务发现。
<p>注意：前提条件，已经通过 Prometheus 控制台集成了对应的腾讯云容器服务，具体请参考
<a href="https://cloud.tencent.com/document/product/248/48859" target="_blank">Agent 安装</a>。</p>
     */
    async DeleteServiceDiscovery(req, cb) {
        return this.request("DeleteServiceDiscovery", req, cb);
    }
    /**
     * 与腾讯云可观测融合的2.0实例关联集群
     */
    async CreatePrometheusClusterAgent(req, cb) {
        return this.request("CreatePrometheusClusterAgent", req, cb);
    }
    /**
     * 策略绑定标签
     */
    async BindingPolicyTag(req, cb) {
        return this.request("BindingPolicyTag", req, cb);
    }
    /**
     * 创建告警屏蔽规则
     */
    async CreateAlarmShield(req, cb) {
        return this.request("CreateAlarmShield", req, cb);
    }
    /**
     * 创建按量 Prometheus 实例，根据用量收费实例
     */
    async CreatePrometheusMultiTenantInstancePostPayMode(req, cb) {
        return this.request("CreatePrometheusMultiTenantInstancePostPayMode", req, cb);
    }
    /**
     * 更新 Grafana 环境变量
     */
    async UpdateGrafanaEnvironments(req, cb) {
        return this.request("UpdateGrafanaEnvironments", req, cb);
    }
    /**
     * 获取基础告警策略条件
     */
    async DescribePolicyConditionList(req, cb) {
        return this.request("DescribePolicyConditionList", req, cb);
    }
    /**
     * 修改告警策略触发条件
     */
    async ModifyAlarmPolicyCondition(req, cb) {
        return this.request("ModifyAlarmPolicyCondition", req, cb);
    }
    /**
     * 获取 Prometheus Agent 管理相关的命令行
     */
    async GetPrometheusAgentManagementCommand(req, cb) {
        return this.request("GetPrometheusAgentManagementCommand", req, cb);
    }
    /**
     * 更新 Prometheus Agent 抓取任务
     */
    async UpdatePrometheusScrapeJob(req, cb) {
        return this.request("UpdatePrometheusScrapeJob", req, cb);
    }
    /**
     * 获取2.0实例初始化任务状态
     */
    async DescribePrometheusInstanceInitStatus(req, cb) {
        return this.request("DescribePrometheusInstanceInitStatus", req, cb);
    }
    /**
     * 升级 Grafana 实例
     */
    async UpgradeGrafanaInstance(req, cb) {
        return this.request("UpgradeGrafanaInstance", req, cb);
    }
    /**
     * 列出 Grafana 所有告警通道
     */
    async DescribeGrafanaChannels(req, cb) {
        return this.request("DescribeGrafanaChannels", req, cb);
    }
    /**
     * 删除 Grafana 集成配置
     */
    async DeleteGrafanaIntegration(req, cb) {
        return this.request("DeleteGrafanaIntegration", req, cb);
    }
    /**
     * 绑定 Grafana 可视化服务实例
     */
    async BindPrometheusManagedGrafana(req, cb) {
        return this.request("BindPrometheusManagedGrafana", req, cb);
    }
    /**
     * 删除全部的关联对象
     */
    async UnBindingAllPolicyObject(req, cb) {
        return this.request("UnBindingAllPolicyObject", req, cb);
    }
    /**
     * 删除告警策略组
     */
    async DeletePolicyGroup(req, cb) {
        return this.request("DeletePolicyGroup", req, cb);
    }
    /**
     * 在腾讯云容器服务下更新 Prometheus 服务发现。
<p>注意：前提条件，已经通过 Prometheus 控制台集成了对应的腾讯云容器服务，具体请参考
<a href="https://cloud.tencent.com/document/product/248/48859" target="_blank">Agent 安装</a>。</p>
     */
    async UpdateServiceDiscovery(req, cb) {
        return this.request("UpdateServiceDiscovery", req, cb);
    }
    /**
     * 腾讯云可观测平台支持多种类型的监控，此接口列出支持的所有类型
     */
    async DescribeMonitorTypes(req, cb) {
        return this.request("DescribeMonitorTypes", req, cb);
    }
    /**
     * SSO单点登录时，设置是否cam鉴权
     */
    async EnableSSOCamCheck(req, cb) {
        return this.request("EnableSSOCamCheck", req, cb);
    }
    /**
     * 安装 Grafana Plugin
     */
    async InstallPlugins(req, cb) {
        return this.request("InstallPlugins", req, cb);
    }
    /**
     * 创建集成中心 exporter 集成，因集成较多，建议控制台创建集成。(前提：已授权创建托管 EKS 集群，验证方式：1. 控制台界面确认，未提示授权则表示已授权创建；2. 通过 DescribePrometheusInstanceInitStatus 接口查询集群状态，如果托管集群不存在，可通过 RunPrometheusInstance 接口创建)
     */
    async CreateExporterIntegration(req, cb) {
        return this.request("CreateExporterIntegration", req, cb);
    }
    /**
     * 批量删除 Prometheus 预聚合规则
     */
    async DeleteRecordingRules(req, cb) {
        return this.request("DeleteRecordingRules", req, cb);
    }
    /**
     * 分页获取产品事件的列表
     */
    async DescribeProductEventList(req, cb) {
        return this.request("DescribeProductEventList", req, cb);
    }
    /**
     * 查询告警历史

请注意，**如果使用子用户进行告警历史的查询，只能查询到被授权项目下的告警历史**，或不区分项目的产品的告警历史。如何对子账户授予项目的权限，请参考 [访问管理-项目与标签](https://cloud.tencent.com/document/product/598/32738)。
     */
    async DescribeAlarmHistories(req, cb) {
        return this.request("DescribeAlarmHistories", req, cb);
    }
    /**
     * 创建全局告警通知渠道。集群内创建的告警规则如果未配置告警通知渠道，默认走全局告警通知渠道（建议在控制台创建告警，集群内创建告警不易维护）
     */
    async CreatePrometheusGlobalNotification(req, cb) {
        return this.request("CreatePrometheusGlobalNotification", req, cb);
    }
    /**
     * Grafana可视化服务 删除授权用户
     */
    async DeleteSSOAccount(req, cb) {
        return this.request("DeleteSSOAccount", req, cb);
    }
    /**
     * 获取多写配置详情
     */
    async DescribeRemoteURLs(req, cb) {
        return this.request("DescribeRemoteURLs", req, cb);
    }
    /**
     * 批量更新告警分组状态，将分组中全部告警规则更新为目标状态
     */
    async UpdatePrometheusAlertGroupState(req, cb) {
        return this.request("UpdatePrometheusAlertGroupState", req, cb);
    }
    /**
     * 查询单个通知模板的详情
     */
    async DescribeAlarmNotice(req, cb) {
        return this.request("DescribeAlarmNotice", req, cb);
    }
    /**
     * 创建 Grafana 集成配置，其中 Prometheus 集成不通过该接口创建，可参考 BindPrometheusManagedGrafana 接口
     */
    async CreateGrafanaIntegration(req, cb) {
        return this.request("CreateGrafanaIntegration", req, cb);
    }
    /**
     * 拉取模板列表，默认模板将总是在最前面
     */
    async DescribePrometheusTemp(req, cb) {
        return this.request("DescribePrometheusTemp", req, cb);
    }
    /**
     * 更新 Grafana 白名单
     */
    async UpdateGrafanaWhiteList(req, cb) {
        return this.request("UpdateGrafanaWhiteList", req, cb);
    }
    /**
     * 设置一个策略为该告警策略类型、该项目的默认告警策略。
同一项目下相同的告警策略类型，就会被设置为非默认。
     */
    async SetDefaultAlarmPolicy(req, cb) {
        return this.request("SetDefaultAlarmPolicy", req, cb);
    }
    /**
     * 本接口（DeleteGrafanaInstance）用于 Grafana 包年包月实例的退费，调用后实例处于停服状态，不可使用，7天后自动销毁。
     */
    async DeleteGrafanaInstance(req, cb) {
        return this.request("DeleteGrafanaInstance", req, cb);
    }
    /**
     * 删除Prometheus配置，如果目标不存在，将返回成功
     */
    async DeletePrometheusConfig(req, cb) {
        return this.request("DeletePrometheusConfig", req, cb);
    }
    /**
     * Grafana实例授权其他腾讯云用户
     */
    async CreateSSOAccount(req, cb) {
        return this.request("CreateSSOAccount", req, cb);
    }
    /**
     * 修改告警策略绑定的告警通知模板
     */
    async ModifyAlarmPolicyNotice(req, cb) {
        return this.request("ModifyAlarmPolicyNotice", req, cb);
    }
    /**
     * 设置 Grafana 公网访问
     */
    async EnableGrafanaInternet(req, cb) {
        return this.request("EnableGrafanaInternet", req, cb);
    }
    /**
     * 创建 Grafana 告警通道
     */
    async CreateGrafanaNotificationChannel(req, cb) {
        return this.request("CreateGrafanaNotificationChannel", req, cb);
    }
    /**
     * 修改 Grafana 实例属性
     */
    async ModifyGrafanaInstance(req, cb) {
        return this.request("ModifyGrafanaInstance", req, cb);
    }
    /**
     * 本接口（ResumeGrafanaInstance）用于 Grafana 包年包月实例的停服续费，调用后按原版本续费一个月。仍在运行中的实例无法使用该接口进行续费。
     */
    async ResumeGrafanaInstance(req, cb) {
        return this.request("ResumeGrafanaInstance", req, cb);
    }
    /**
     * 创建一个云原生Prometheus模板
     */
    async CreatePrometheusTemp(req, cb) {
        return this.request("CreatePrometheusTemp", req, cb);
    }
    /**
     * 列出当前grafana实例的所有授权账号
     */
    async DescribeSSOAccount(req, cb) {
        return this.request("DescribeSSOAccount", req, cb);
    }
    /**
     * 获取基础告警列表
     */
    async DescribeBasicAlarmList(req, cb) {
        return this.request("DescribeBasicAlarmList", req, cb);
    }
    /**
     * 创建 Prometheus CVM Agent
     */
    async CreatePrometheusAgent(req, cb) {
        return this.request("CreatePrometheusAgent", req, cb);
    }
    /**
     * 同步模板到实例或者集群，针对V2版本实例
     */
    async SyncPrometheusTemp(req, cb) {
        return this.request("SyncPrometheusTemp", req, cb);
    }
    /**
     * 修改多写配置
     */
    async ModifyRemoteURLs(req, cb) {
        return this.request("ModifyRemoteURLs", req, cb);
    }
    /**
     * 创建通知模板
     */
    async CreateAlarmNotice(req, cb) {
        return this.request("CreateAlarmNotice", req, cb);
    }
    /**
     * 更新 Prometheus 报警策略状态
     */
    async UpdateAlertRuleState(req, cb) {
        return this.request("UpdateAlertRuleState", req, cb);
    }
    /**
     * 修改模板内容
     */
    async ModifyPrometheusTemp(req, cb) {
        return this.request("ModifyPrometheusTemp", req, cb);
    }
    /**
     * 解除实例绑定的 Grafana 可视化实例
     */
    async UnbindPrometheusManagedGrafana(req, cb) {
        return this.request("UnbindPrometheusManagedGrafana", req, cb);
    }
    /**
     * 初始化TMP实例，开启集成中心时调用
     */
    async RunPrometheusInstance(req, cb) {
        return this.request("RunPrometheusInstance", req, cb);
    }
    /**
     * 查询集成中心 exporter 集成列表
     */
    async DescribeExporterIntegrations(req, cb) {
        return this.request("DescribeExporterIntegrations", req, cb);
    }
    /**
     * 列出实例已安装的插件
     */
    async DescribeInstalledPlugins(req, cb) {
        return this.request("DescribeInstalledPlugins", req, cb);
    }
    /**
     * 查询全局告警通知渠道
     */
    async DescribePrometheusGlobalNotification(req, cb) {
        return this.request("DescribePrometheusGlobalNotification", req, cb);
    }
    /**
     * 升级 Grafana Dashboard
     */
    async UpgradeGrafanaDashboard(req, cb) {
        return this.request("UpgradeGrafanaDashboard", req, cb);
    }
    /**
     * 查询通知模板列表
     */
    async DescribeAlarmNotices(req, cb) {
        return this.request("DescribeAlarmNotices", req, cb);
    }
    /**
     * 列出 Grafana DNS 配置
     */
    async DescribeDNSConfig(req, cb) {
        return this.request("DescribeDNSConfig", req, cb);
    }
    /**
     * 创建Prometheus告警规则分组

告警分组中可包含多条告警规则，分组内告警消息通过告警分组的通知模板发送。
支持单个告警分组下分别创建启用/禁用的告警规则。
     */
    async CreatePrometheusAlertGroup(req, cb) {
        return this.request("CreatePrometheusAlertGroup", req, cb);
    }
    /**
     * 修改全局告警通知渠道
     */
    async ModifyPrometheusGlobalNotification(req, cb) {
        return this.request("ModifyPrometheusGlobalNotification", req, cb);
    }
    /**
     * 获取关联目标集群的实例列表
     */
    async DescribePrometheusAgentInstances(req, cb) {
        return this.request("DescribePrometheusAgentInstances", req, cb);
    }
    /**
     * 删除聚合实例
     */
    async DeletePrometheusRecordRuleYaml(req, cb) {
        return this.request("DeletePrometheusRecordRuleYaml", req, cb);
    }
    /**
     * 本接口 (DescribePrometheusInstances) 用于查询一个或多个实例的详细信息。
<ul>
<li>可以根据实例ID、实例名称或者实例状态等信息来查询实例的详细信息</li>
<li>如果参数为空，返回当前用户一定数量（Limit所指定的数量，默认为20）的实例。</li>
</ul>
     */
    async DescribePrometheusInstances(req, cb) {
        return this.request("DescribePrometheusInstances", req, cb);
    }
    /**
     * 列出用户所有的 Grafana 服务
     */
    async DescribeGrafanaInstances(req, cb) {
        return this.request("DescribeGrafanaInstances", req, cb);
    }
    /**
     * 通过yaml的方式修改Prometheus预聚合规则
     */
    async ModifyPrometheusRecordRuleYaml(req, cb) {
        return this.request("ModifyPrometheusRecordRuleYaml", req, cb);
    }
    /**
     * 更新 Grafana 配置
     */
    async UpdateGrafanaConfig(req, cb) {
        return this.request("UpdateGrafanaConfig", req, cb);
    }
    /**
     * 更新Prometheus告警规则分组
     */
    async UpdatePrometheusAlertGroup(req, cb) {
        return this.request("UpdatePrometheusAlertGroup", req, cb);
    }
    /**
     * 列出 Grafana 告警通道
     */
    async DescribeGrafanaNotificationChannels(req, cb) {
        return this.request("DescribeGrafanaNotificationChannels", req, cb);
    }
    /**
     * 修改被关联集群的external labels
     */
    async ModifyPrometheusAgentExternalLabels(req, cb) {
        return this.request("ModifyPrometheusAgentExternalLabels", req, cb);
    }
    /**
     * 更新策略组
     */
    async ModifyPolicyGroup(req, cb) {
        return this.request("ModifyPolicyGroup", req, cb);
    }
    /**
     * 获取平台事件列表
     */
    async DescribeAccidentEventList(req, cb) {
        return this.request("DescribeAccidentEventList", req, cb);
    }
    /**
     * 获取模板关联实例信息，针对V2版本实例
     */
    async DescribePrometheusTempSync(req, cb) {
        return this.request("DescribePrometheusTempSync", req, cb);
    }
    /**
     * 查询告警指标列表
     */
    async DescribeAlarmMetrics(req, cb) {
        return this.request("DescribeAlarmMetrics", req, cb);
    }
    /**
     * 修改告警策略的触发任务，TriggerTasks字段放触发任务列表，TriggerTasks传空数组时，代表解绑该策略的所有触发任务。
     */
    async ModifyAlarmPolicyTasks(req, cb) {
        return this.request("ModifyAlarmPolicyTasks", req, cb);
    }
    /**
     * 删除集成中心 exporter 集成
     */
    async DeleteExporterIntegration(req, cb) {
        return this.request("DeleteExporterIntegration", req, cb);
    }
    /**
     * 删除2.0实例告警策略
     */
    async DeletePrometheusAlertPolicy(req, cb) {
        return this.request("DeletePrometheusAlertPolicy", req, cb);
    }
    /**
     * 更新 Prometheus CVM Agent 状态
     */
    async UpdatePrometheusAgentStatus(req, cb) {
        return this.request("UpdatePrometheusAgentStatus", req, cb);
    }
    /**
     * 创建 Prometheus 的预聚合规则
     */
    async CreateRecordingRule(req, cb) {
        return this.request("CreateRecordingRule", req, cb);
    }
    /**
     * Prometheus 报警规则查询接口
     */
    async DescribeAlertRules(req, cb) {
        return this.request("DescribeAlertRules", req, cb);
    }
    /**
     * 获得实例级别抓取配置
     */
    async DescribePrometheusGlobalConfig(req, cb) {
        return this.request("DescribePrometheusGlobalConfig", req, cb);
    }
    /**
     * 获取基础策略告警组列表
     */
    async DescribePolicyGroupList(req, cb) {
        return this.request("DescribePolicyGroupList", req, cb);
    }
    /**
     * 查询告警策略列表
     */
    async DescribeAlarmPolicies(req, cb) {
        return this.request("DescribeAlarmPolicies", req, cb);
    }
    /**
     * 获取targets信息，在过滤条件中指定job名称时返回targets详情，否则仅返回数量
     */
    async DescribePrometheusTargetsTMP(req, cb) {
        return this.request("DescribePrometheusTargetsTMP", req, cb);
    }
    /**
     * 列出 Prometheus 服务所有可用的地域
     */
    async DescribePrometheusRegions(req, cb) {
        return this.request("DescribePrometheusRegions", req, cb);
    }
    /**
     * 列出 Grafana 白名单
     */
    async DescribeGrafanaWhiteList(req, cb) {
        return this.request("DescribeGrafanaWhiteList", req, cb);
    }
    /**
     * 创建 Prometheus 告警策略(将逐步废弃，建议使用 CreatePrometheusAlertGroup 创建告警策略)
     */
    async CreatePrometheusAlertPolicy(req, cb) {
        return this.request("CreatePrometheusAlertPolicy", req, cb);
    }
    /**
     * 强制销毁 Grafana 实例
     */
    async CleanGrafanaInstance(req, cb) {
        return this.request("CleanGrafanaInstance", req, cb);
    }
    /**
     * 删除 Grafana Dashboard
     */
    async UninstallGrafanaDashboard(req, cb) {
        return this.request("UninstallGrafanaDashboard", req, cb);
    }
    /**
     * 获取2.0实例告警策略列表
     */
    async DescribePrometheusAlertPolicy(req, cb) {
        return this.request("DescribePrometheusAlertPolicy", req, cb);
    }
    /**
     * 列出 Prometheus CVM Agent
     */
    async DescribePrometheusAgents(req, cb) {
        return this.request("DescribePrometheusAgents", req, cb);
    }
    /**
     * 修改 Prometheus 实例相关属性
     */
    async ModifyPrometheusInstanceAttributes(req, cb) {
        return this.request("ModifyPrometheusInstanceAttributes", req, cb);
    }
    /**
     * 删除告警策略
     */
    async DeleteAlarmPolicy(req, cb) {
        return this.request("DeleteAlarmPolicy", req, cb);
    }
    /**
     * 获取云产品的监控数据。此接口不适用于拉取容器服务监控数据，如需拉取容器服务监控数据，请使用[根据维度条件查询监控数据](https://cloud.tencent.com/document/product/248/51845)接口。
传入产品的命名空间、对象维度描述和监控指标即可获得相应的监控数据。
接口调用限制：单请求最多可支持批量拉取10个实例的监控数据，单请求的数据点数限制为1440个。
若您需要调用的指标、对象较多，可能存在因限频出现拉取失败的情况，建议尽量将请求按时间维度均摊。
参数SpecifyStatistics目前可支持返回三种统计方式（avg，max，min），分别为二进制1，2，4。
例子：3:avg+max，5:avg+min，6:max+min，7:avg+max+min
拉取数据的粒度和统计方式的对应关系尽量在接入平台进行配置，如果没有配置，因为更小粒度数据存储时间有限，拉取时间范围也是有限。

>?
>- 2022年9月1日起，腾讯云可观测平台开始对GetMonitorData接口计费。每个主账号每月可获得100万次免费请求额度，超过免费额度后如需继续调用接口需要开通 [API请求按量付费](https://buy.cloud.tencent.com/APIRequestBuy)。计费规则可查看[API计费文档](https://cloud.tencent.com/document/product/248/77914)。
     */
    async GetMonitorData(req, cb) {
        return this.request("GetMonitorData", req, cb);
    }
    /**
     * 更新 Grafana 的 DNS 配置
     */
    async UpdateDNSConfig(req, cb) {
        return this.request("UpdateDNSConfig", req, cb);
    }
    /**
     * 列出在腾讯云容器服务下创建的 Prometheus 服务发现。
<p>注意：前提条件，已经通过 Prometheus 控制台集成了对应的腾讯云容器服务，具体请参考
<a href="https://cloud.tencent.com/document/product/248/48859" target="_blank">Agent 安装</a>。</p>
     */
    async DescribeServiceDiscovery(req, cb) {
        return this.request("DescribeServiceDiscovery", req, cb);
    }
    /**
     * 列出 Grafana 已安装的集成
     */
    async DescribeGrafanaIntegrations(req, cb) {
        return this.request("DescribeGrafanaIntegrations", req, cb);
    }
    /**
     * 拉取Prometheus配置
     */
    async DescribePrometheusConfig(req, cb) {
        return this.request("DescribePrometheusConfig", req, cb);
    }
    /**
     * 获取基础策略组详情
     */
    async DescribePolicyGroupInfo(req, cb) {
        return this.request("DescribePolicyGroupInfo", req, cb);
    }
    /**
     * 更新 exporter 集成配置
     */
    async UpdateExporterIntegration(req, cb) {
        return this.request("UpdateExporterIntegration", req, cb);
    }
    /**
     * 查询所有名字空间
     */
    async DescribeAllNamespaces(req, cb) {
        return this.request("DescribeAllNamespaces", req, cb);
    }
    /**
     * 在腾讯云容器服务下创建 Prometheus 服务发现。
<p>注意：前提条件，已经通过 Prometheus 控制台集成了对应的腾讯云容器服务，具体请参考
<a href="https://cloud.tencent.com/document/product/248/48859" target="_blank">Agent 安装</a>。</p>
     */
    async CreateServiceDiscovery(req, cb) {
        return this.request("CreateServiceDiscovery", req, cb);
    }
    /**
     * 以Yaml的方式创建聚合规则
     */
    async CreatePrometheusRecordRuleYaml(req, cb) {
        return this.request("CreatePrometheusRecordRuleYaml", req, cb);
    }
    /**
     * 删除一个云原生Prometheus配置模板
     */
    async DeletePrometheusTemp(req, cb) {
        return this.request("DeletePrometheusTemp", req, cb);
    }
    /**
     * 获取告警通知模板所有回调URL
     */
    async DescribeAlarmNoticeCallbacks(req, cb) {
        return this.request("DescribeAlarmNoticeCallbacks", req, cb);
    }
    /**
     * 彻底删除 Prometheus 实例相关数据，给定的实例必须先被 Terminate(该接口是异步接口，实例是否释放需要通过 DescribePrometheusInstances 接口返回的状态来判断)。
     */
    async DestroyPrometheusInstance(req, cb) {
        return this.request("DestroyPrometheusInstance", req, cb);
    }
    /**
     * 删除已安装的插件
     */
    async UninstallGrafanaPlugins(req, cb) {
        return this.request("UninstallGrafanaPlugins", req, cb);
    }
    /**
     * 更新 Grafana 集成配置
     */
    async UpdateGrafanaIntegration(req, cb) {
        return this.request("UpdateGrafanaIntegration", req, cb);
    }
    /**
     * 增加策略组
     */
    async CreatePolicyGroup(req, cb) {
        return this.request("CreatePolicyGroup", req, cb);
    }
    /**
     * 销毁按量 Prometheus 实例
     */
    async TerminatePrometheusInstances(req, cb) {
        return this.request("TerminatePrometheusInstances", req, cb);
    }
    /**
     * 获取与 Prometheus 监控融合实例列表
     */
    async DescribePrometheusInstancesOverview(req, cb) {
        return this.request("DescribePrometheusInstancesOverview", req, cb);
    }
    /**
     * 解除模板同步，这将会删除目标中该模板所生产的配置，针对V2版本实例
     */
    async DeletePrometheusTempSync(req, cb) {
        return this.request("DeletePrometheusTempSync", req, cb);
    }
    /**
     * 创建prometheus配置
     */
    async CreatePrometheusConfig(req, cb) {
        return this.request("CreatePrometheusConfig", req, cb);
    }
    /**
     * 列出可安装的所有 Grafana 插件。
     */
    async DescribePluginOverviews(req, cb) {
        return this.request("DescribePluginOverviews", req, cb);
    }
    /**
     * 获取prom实例中集群详细的关联状态
     */
    async DescribeClusterAgentCreatingProgress(req, cb) {
        return this.request("DescribeClusterAgentCreatingProgress", req, cb);
    }
    /**
     * 根据条件查询 Prometheus 预聚合规则
     */
    async DescribeRecordingRules(req, cb) {
        return this.request("DescribeRecordingRules", req, cb);
    }
    /**
     * 修改prometheus采集配置
     */
    async ModifyPrometheusConfig(req, cb) {
        return this.request("ModifyPrometheusConfig", req, cb);
    }
    /**
     * 获取单个告警策略详情
     */
    async DescribeAlarmPolicy(req, cb) {
        return this.request("DescribeAlarmPolicy", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249243, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.mps = void 0;
const v20190612_1 = require("./v20190612");
exports.mps = {
    v20190612: v20190612_1.v20190612,
};

}, function(modId) { var map = {"./v20190612":1738984249244}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249244, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190612 = void 0;
const Models = require("./mps_models");
const mps_client_1 = require("./mps_client");
exports.v20190612 = {
    Client: mps_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./mps_models":1738984249245,"./mps_client":1738984249246}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249245, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249246, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * mps client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("mps.tencentcloudapi.com", "2019-06-12", clientConfig);
    }
    /**
     * 创建用户自定义指定时间点截图模板，数量上限：16。
     */
    async CreateSnapshotByTimeOffsetTemplate(req, cb) {
        return this.request("CreateSnapshotByTimeOffsetTemplate", req, cb);
    }
    /**
     * 实时查询流的当前状态
     */
    async DescribeStreamLinkFlowRealtimeStatus(req, cb) {
        return this.request("DescribeStreamLinkFlowRealtimeStatus", req, cb);
    }
    /**
     * 修改直播录制模板
     */
    async ModifyLiveRecordTemplate(req, cb) {
        return this.request("ModifyLiveRecordTemplate", req, cb);
    }
    /**
     * 对视频进行编辑，生成一个新的视频。编辑的功能包括：
 

一、**剪辑任务**：简单的视频剪辑，如剪辑、拼接等
1. 对一个文件进行剪辑，生成一个新的视频；
2. 对多个文件进行拼接，生成一个新的视频；
3. 对多个文件进行剪辑，然后再拼接，生成一个新的视频。

二、**合成任务**：通过接口描述信息，合成一个新的视频。
1. 多轨道（视频、音频、字幕）、多类型元素（视频、图片、音频、文字、空）
2. 图像级别：贴图、缩放、任意角度旋转、镜像等
3. 音频级别：音量控制、淡入淡出、混音等
4. 视频级别：转场、倍数播放、拼接、剪切、字幕、画中画、音画分离、出入场动效等
     */
    async EditMedia(req, cb) {
        return this.request("EditMedia", req, cb);
    }
    /**
     * 查询媒体传输事件的配置信息。
     */
    async DescribeStreamLinkEvent(req, cb) {
        return this.request("DescribeStreamLinkEvent", req, cb);
    }
    /**
     * 删除用户自定义转动图模板。
     */
    async DeleteAnimatedGraphicsTemplate(req, cb) {
        return this.request("DeleteAnimatedGraphicsTemplate", req, cb);
    }
    /**
     * 根据内容分析模板唯一标识，获取内容分析模板详情列表。返回结果包含符合条件的所有用户自定义内容分析模板及系统预置视频内容分析模板
     */
    async DescribeAIAnalysisTemplates(req, cb) {
        return this.request("DescribeAIAnalysisTemplates", req, cb);
    }
    /**
     * 从 CMQ 获取到消息后，从消息的 msgBody 字段中解析出 MPS 直播流处理事件通知的内容。
该接口不用于发起网络调用，而是用来帮助生成各个语言平台的 SDK，您可以参考 SDK 中的解析实现事件通知的解析。
     */
    async ParseLiveStreamProcessNotification(req, cb) {
        return this.request("ParseLiveStreamProcessNotification", req, cb);
    }
    /**
     * 删除用户自定义转码模板。
     */
    async DeleteTranscodeTemplate(req, cb) {
        return this.request("DeleteTranscodeTemplate", req, cb);
    }
    /**
     * 通过任务 ID 查询任务的执行状态和结果的详细信息（最多可以查询7天之内提交的任务）。
     */
    async DescribeTaskDetail(req, cb) {
        return this.request("DescribeTaskDetail", req, cb);
    }
    /**
     * 该接口用于根据应用场景、关键词、标签，分页查询关键词样本信息。
     */
    async DescribeWordSamples(req, cb) {
        return this.request("DescribeWordSamples", req, cb);
    }
    /**
     * 对 URL视频链接 或 COS 中的媒体文件发起处理任务，功能包括：
1. 视频转码（普通转码、极速高清转码、音视频增强）；
2. 视频转动图；
3. 对视频按指定时间点截图；
4. 对视频采样截图；
5. 对视频截图雪碧图；
6. 对视频转自适应码流；
7. 智能内容审核（鉴黄、敏感信息检测）；
8. 智能内容分析（标签、分类、封面、按帧标签、拆条、集锦、片头片尾、游戏打点）；
9. 智能内容识别（人脸、文本全文、文本关键词、语音全文、语音关键词、语音翻译、物体识别）。
10. 媒体质检（直播流格式诊断、音画内容检测（抖动、模糊、低光照、过曝光、黑边、白边、黑屏、白屏、花屏、噪点、马赛克、二维码等）、无参考打分）
     */
    async ProcessMedia(req, cb) {
        return this.request("ProcessMedia", req, cb);
    }
    /**
     * 修改用户自定义内容分析模板。

注意：模板 ID 10000 以下的为系统预置模板，不允许修改。
     */
    async ModifyAIAnalysisTemplate(req, cb) {
        return this.request("ModifyAIAnalysisTemplate", req, cb);
    }
    /**
     * 删除转自适应码流模板
     */
    async DeleteAdaptiveDynamicStreamingTemplate(req, cb) {
        return this.request("DeleteAdaptiveDynamicStreamingTemplate", req, cb);
    }
    /**
     * 创建转自适应码流模板，数量上限：100。
     */
    async CreateAdaptiveDynamicStreamingTemplate(req, cb) {
        return this.request("CreateAdaptiveDynamicStreamingTemplate", req, cb);
    }
    /**
     * 禁用工作流。
     */
    async DisableWorkflow(req, cb) {
        return this.request("DisableWorkflow", req, cb);
    }
    /**
     * 查询采样截图模板，支持根据条件，分页查询。
     */
    async DescribeSampleSnapshotTemplates(req, cb) {
        return this.request("DescribeSampleSnapshotTemplates", req, cb);
    }
    /**
     * 查询媒体传输流的媒体质量数据。

     */
    async DescribeStreamLinkFlowStatistics(req, cb) {
        return this.request("DescribeStreamLinkFlowStatistics", req, cb);
    }
    /**
     * 批量删除媒体传输流。
     */
    async BatchDeleteStreamLinkFlow(req, cb) {
        return this.request("BatchDeleteStreamLinkFlow", req, cb);
    }
    /**
     * 获取直播录制模板
     */
    async DescribeLiveRecordTemplates(req, cb) {
        return this.request("DescribeLiveRecordTemplates", req, cb);
    }
    /**
     * 删除用户自定义指定时间点截图模板。
     */
    async DeleteSnapshotByTimeOffsetTemplate(req, cb) {
        return this.request("DeleteSnapshotByTimeOffsetTemplate", req, cb);
    }
    /**
     * 启用工作流。
     */
    async EnableWorkflow(req, cb) {
        return this.request("EnableWorkflow", req, cb);
    }
    /**
     * 智能媒体识别，包含表情和动作识别。仅用于智学，其他调用无效。
     */
    async RecognizeMediaForZhiXue(req, cb) {
        return this.request("RecognizeMediaForZhiXue", req, cb);
    }
    /**
     * 修改媒体传输的传输流配置信息。
     */
    async ModifyStreamLinkFlow(req, cb) {
        return this.request("ModifyStreamLinkFlow", req, cb);
    }
    /**
     * * 该接口用于查询任务列表；
* 当列表数据比较多时，单次接口调用无法拉取整个列表，可通过 ScrollToken 参数，分批拉取；
* 只能查询到最近七天（168小时）内的任务。
     */
    async DescribeTasks(req, cb) {
        return this.request("DescribeTasks", req, cb);
    }
    /**
     * 该接口用于批量创建关键词样本，样本用于通过OCR、ASR技术，进行不适宜内容识别、内容识别等视频处理。
     */
    async CreateWordSamples(req, cb) {
        return this.request("CreateWordSamples", req, cb);
    }
    /**
     * 创建用户自定义转码模板，数量上限：1000
     */
    async CreateTranscodeTemplate(req, cb) {
        return this.request("CreateTranscodeTemplate", req, cb);
    }
    /**
     * 创建媒体传输的传输流配置。
     */
    async CreateStreamLinkFlow(req, cb) {
        return this.request("CreateStreamLinkFlow", req, cb);
    }
    /**
     * 本接口仅用于定制开发的特殊场景，除非云媒体处理客服人员主动告知您需要使用本接口，其它情况请勿调用。
     */
    async ExecuteFunction(req, cb) {
        return this.request("ExecuteFunction", req, cb);
    }
    /**
     * 批量查询媒体输入流的配置信息。
     */
    async DescribeStreamLinkFlows(req, cb) {
        return this.request("DescribeStreamLinkFlows", req, cb);
    }
    /**
     * 修改用户自定义转动图模板。
     */
    async ModifyAnimatedGraphicsTemplate(req, cb) {
        return this.request("ModifyAnimatedGraphicsTemplate", req, cb);
    }
    /**
     * 删除媒体传输流的输出配置。
     */
    async DeleteStreamLinkOutput(req, cb) {
        return this.request("DeleteStreamLinkOutput", req, cb);
    }
    /**
     * 创建用户自定义内容审核模板，数量上限：50。
     */
    async CreateContentReviewTemplate(req, cb) {
        return this.request("CreateContentReviewTemplate", req, cb);
    }
    /**
     * 根据安全组反差关联的Flow信息。
     */
    async DescribeGroupAttachFlowsById(req, cb) {
        return this.request("DescribeGroupAttachFlowsById", req, cb);
    }
    /**
     * 创建用户自定义采样截图模板，数量上限：16。
     */
    async CreateSampleSnapshotTemplate(req, cb) {
        return this.request("CreateSampleSnapshotTemplate", req, cb);
    }
    /**
     * 删除用户自定义内容分析模板。

注意：模板 ID 为 10000 以下的为系统预置模板，不允许删除。
     */
    async DeleteAIAnalysisTemplate(req, cb) {
        return this.request("DeleteAIAnalysisTemplate", req, cb);
    }
    /**
     * 修改编排
     */
    async ModifySchedule(req, cb) {
        return this.request("ModifySchedule", req, cb);
    }
    /**
     * 获取媒体的元信息，包括视频画面宽、高、编码格式、时长、帧率等。
     */
    async DescribeMediaMetaData(req, cb) {
        return this.request("DescribeMediaMetaData", req, cb);
    }
    /**
     * 根据任务ID查询视频检索任务的状态。
     */
    async DescribeVideoSearchTaskDetail(req, cb) {
        return this.request("DescribeVideoSearchTaskDetail", req, cb);
    }
    /**
     * 修改用户自定义采样截图模板。
     */
    async ModifySampleSnapshotTemplate(req, cb) {
        return this.request("ModifySampleSnapshotTemplate", req, cb);
    }
    /**
     * 重新设置一个已经存在且处于禁用状态的工作流。
     */
    async ResetWorkflow(req, cb) {
        return this.request("ResetWorkflow", req, cb);
    }
    /**
     * 删除媒体质检模板
     */
    async DeleteQualityControlTemplate(req, cb) {
        return this.request("DeleteQualityControlTemplate", req, cb);
    }
    /**
     * 删除工作流。对于已启用的工作流，需要禁用后才能删除。
     */
    async DeleteWorkflow(req, cb) {
        return this.request("DeleteWorkflow", req, cb);
    }
    /**
     * 创建媒体质检模板，数量上限：50。
     */
    async CreateQualityControlTemplate(req, cb) {
        return this.request("CreateQualityControlTemplate", req, cb);
    }
    /**
     * 修改用户自定义雪碧图模板。
     */
    async ModifyImageSpriteTemplate(req, cb) {
        return this.request("ModifyImageSpriteTemplate", req, cb);
    }
    /**
     * 根据转码模板唯一标识，获取转码模板详情列表。返回结果包含符合条件的所有用户自定义模板及[系统预置转码模板](https://cloud.tencent.com/document/product/266/33476#.E9.A2.84.E7.BD.AE.E8.BD.AC.E7.A0.81.E6.A8.A1.E6.9D.BF)。
     */
    async DescribeTranscodeTemplates(req, cb) {
        return this.request("DescribeTranscodeTemplates", req, cb);
    }
    /**
     * 更新安全组。
     */
    async ModifyStreamLinkSecurityGroup(req, cb) {
        return this.request("ModifyStreamLinkSecurityGroup", req, cb);
    }
    /**
     * 删除媒体传输的传输流配置。
     */
    async DeleteStreamLinkFlow(req, cb) {
        return this.request("DeleteStreamLinkFlow", req, cb);
    }
    /**
     * 启动媒体传输流。
     */
    async StartStreamLinkFlow(req, cb) {
        return this.request("StartStreamLinkFlow", req, cb);
    }
    /**
     * 发起图片处理，功能包括：
1. 格式转换；
2. 图像增强；
     */
    async ProcessImage(req, cb) {
        return this.request("ProcessImage", req, cb);
    }
    /**
     * 修改媒体传输流的输入信息。
     */
    async ModifyStreamLinkInput(req, cb) {
        return this.request("ModifyStreamLinkInput", req, cb);
    }
    /**
     * 查询媒体传输所有地区。
     */
    async DescribeStreamLinkRegions(req, cb) {
        return this.request("DescribeStreamLinkRegions", req, cb);
    }
    /**
     * 查询编排。
     */
    async DescribeSchedules(req, cb) {
        return this.request("DescribeSchedules", req, cb);
    }
    /**
     * 该接口用于根据素材 ID，修改素材样本信息，包括名称、描述的修改，以及五官、标签的添加、删除、重置操作。五官删除操作需保证至少剩余 1 张图片，否则，请使用重置操作。
     */
    async ModifyPersonSample(req, cb) {
        return this.request("ModifyPersonSample", req, cb);
    }
    /**
     * 创建直播录制模板
     */
    async CreateLiveRecordTemplate(req, cb) {
        return this.request("CreateLiveRecordTemplate", req, cb);
    }
    /**
     * 批量查询安全组信息。
     */
    async DescribeStreamLinkSecurityGroups(req, cb) {
        return this.request("DescribeStreamLinkSecurityGroups", req, cb);
    }
    /**
     * 删除安全组。
     */
    async DeleteStreamLinkSecurityGroup(req, cb) {
        return this.request("DeleteStreamLinkSecurityGroup", req, cb);
    }
    /**
     * 创建用户自定义内容分析模板，数量上限：50。
     */
    async CreateAIAnalysisTemplate(req, cb) {
        return this.request("CreateAIAnalysisTemplate", req, cb);
    }
    /**
     * 修改媒体质检模板。
     */
    async ModifyQualityControlTemplate(req, cb) {
        return this.request("ModifyQualityControlTemplate", req, cb);
    }
    /**
     * 停止媒体传输流。
     */
    async StopStreamLinkFlow(req, cb) {
        return this.request("StopStreamLinkFlow", req, cb);
    }
    /**
     * 查询媒体传输事件关联的所有媒体输入流的配置信息。
     */
    async DescribeStreamLinkEventAttachedFlows(req, cb) {
        return this.request("DescribeStreamLinkEventAttachedFlows", req, cb);
    }
    /**
     * 修改媒体传输流的输出配置。
     */
    async ModifyStreamLinkOutputInfo(req, cb) {
        return this.request("ModifyStreamLinkOutputInfo", req, cb);
    }
    /**
     * 查询指定时间点截图模板，支持根据条件，分页查询。
     */
    async DescribeSnapshotByTimeOffsetTemplates(req, cb) {
        return this.request("DescribeSnapshotByTimeOffsetTemplates", req, cb);
    }
    /**
     * 修改用户自定义转码模板信息。
     */
    async ModifyTranscodeTemplate(req, cb) {
        return this.request("ModifyTranscodeTemplate", req, cb);
    }
    /**
     * 根据智能审核模板唯一标识，获取智能审核模板详情列表。返回结果包含符合条件的所有用户自定义模板及系统预置智能审核模板。
     */
    async DescribeContentReviewTemplates(req, cb) {
        return this.request("DescribeContentReviewTemplates", req, cb);
    }
    /**
     * 批量查询媒体传输事件的配置信息。
     */
    async DescribeStreamLinkEvents(req, cb) {
        return this.request("DescribeStreamLinkEvents", req, cb);
    }
    /**
     * 查询媒体传输流的SRT质量数据。
     */
    async DescribeStreamLinkFlowSRTStatistics(req, cb) {
        return this.request("DescribeStreamLinkFlowSRTStatistics", req, cb);
    }
    /**
     * 创建媒体传输流的输出信息。
     */
    async CreateStreamLinkOutputInfo(req, cb) {
        return this.request("CreateStreamLinkOutputInfo", req, cb);
    }
    /**
     * 根据工作流 ID，获取工作流详情列表。
     */
    async DescribeWorkflows(req, cb) {
        return this.request("DescribeWorkflows", req, cb);
    }
    /**
     * 修改用户自定义水印模板，水印类型不允许修改。
     */
    async ModifyWatermarkTemplate(req, cb) {
        return this.request("ModifyWatermarkTemplate", req, cb);
    }
    /**
     * 使用检索值检索库中最接近检索值的若干视频。
     */
    async CreateVideoSearchTask(req, cb) {
        return this.request("CreateVideoSearchTask", req, cb);
    }
    /**
     * 查询媒体传输开通状态。
     */
    async DescribeStreamLinkActivateState(req, cb) {
        return this.request("DescribeStreamLinkActivateState", req, cb);
    }
    /**
     * 创建用户自定义雪碧图模板，数量上限：16。
     */
    async CreateImageSpriteTemplate(req, cb) {
        return this.request("CreateImageSpriteTemplate", req, cb);
    }
    /**
     * 该接口用于查询素材样本信息，支持根据素材 ID、名称、标签，分页查询。
     */
    async DescribePersonSamples(req, cb) {
        return this.request("DescribePersonSamples", req, cb);
    }
    /**
     * 从 CMQ 获取到消息后，从消息的 msgBody 字段中解析出 MPS 事件通知的内容。
该接口不用于发起网络调用，而是用来帮助生成各个语言平台的 SDK，您可以参考 SDK 中的解析函数，实现事件通知的解析。
     */
    async ParseNotification(req, cb) {
        return this.request("ParseNotification", req, cb);
    }
    /**
     * 删除用户自定义内容识别模板。
     */
    async DeleteAIRecognitionTemplate(req, cb) {
        return this.request("DeleteAIRecognitionTemplate", req, cb);
    }
    /**
     * 查询转动图模板列表，支持根据条件，分页查询。
     */
    async DescribeAnimatedGraphicsTemplates(req, cb) {
        return this.request("DescribeAnimatedGraphicsTemplates", req, cb);
    }
    /**
     * 该接口用于批量删除关键词样本。
     */
    async DeleteWordSamples(req, cb) {
        return this.request("DeleteWordSamples", req, cb);
    }
    /**
     * 对已发起的任务进行管理。
     */
    async ManageTask(req, cb) {
        return this.request("ManageTask", req, cb);
    }
    /**
     * 根据任务ID查询视频入库任务的状态。
     */
    async DescribeVideoDatabaseEntryTaskDetail(req, cb) {
        return this.request("DescribeVideoDatabaseEntryTaskDetail", req, cb);
    }
    /**
     * 修改用户自定义指定时间点截图模板。
     */
    async ModifySnapshotByTimeOffsetTemplate(req, cb) {
        return this.request("ModifySnapshotByTimeOffsetTemplate", req, cb);
    }
    /**
     * 批量启动媒体传输流。
     */
    async BatchStartStreamLinkFlow(req, cb) {
        return this.request("BatchStartStreamLinkFlow", req, cb);
    }
    /**
     * 对 COS 中指定 Bucket 的目录下上传的媒体文件，设置处理规则，包括：
1. 视频转码（带水印）；
2. 视频转动图；
3. 对视频按指定时间点截图；
4. 对视频采样截图；
5. 对视频截图雪碧图；
6. 对视频转自适应码流；
7. 智能内容审核（鉴黄、敏感信息检测）；
8. 智能内容分析（标签、分类、封面、按帧标签）；
9. 智能内容识别（人脸、文本全文、文本关键词、语音全文、语音关键词）。

注意：创建工作流成功后是禁用状态，需要手动启用。
     */
    async CreateWorkflow(req, cb) {
        return this.request("CreateWorkflow", req, cb);
    }
    /**
     * 查询转自适应码流模板，支持根据条件，分页查询。
     */
    async DescribeAdaptiveDynamicStreamingTemplates(req, cb) {
        return this.request("DescribeAdaptiveDynamicStreamingTemplates", req, cb);
    }
    /**
     * 对 COS 中指定 Bucket 的目录下上传的媒体文件，设置处理规则，包括：
1. 视频转码（带水印）；
2. 视频转动图；
3. 对视频按指定时间点截图；
4. 对视频采样截图；
5. 对视频截图雪碧图；
6. 对视频转自适应码流；
7. 智能内容审核（鉴黄、敏感信息检测）；
8. 智能内容分析（标签、分类、封面、按帧标签）；
9. 智能内容识别（人脸、文本全文、文本关键词、语音全文、语音关键词）。

注意：创建编排成功后是禁用状态，需要手动启用。
     */
    async CreateSchedule(req, cb) {
        return this.request("CreateSchedule", req, cb);
    }
    /**
     * 该接口用于修改关键词的应用场景、标签，关键词本身不可修改，如需修改，可删除重建。
     */
    async ModifyWordSample(req, cb) {
        return this.request("ModifyWordSample", req, cb);
    }
    /**
     * 查询雪碧图模板，支持根据条件，分页查询。
     */
    async DescribeImageSpriteTemplates(req, cb) {
        return this.request("DescribeImageSpriteTemplates", req, cb);
    }
    /**
     * 查询用户自定义水印模板，支持根据条件，分页查询。
     */
    async DescribeWatermarkTemplates(req, cb) {
        return this.request("DescribeWatermarkTemplates", req, cb);
    }
    /**
     * 创建用户自定义水印模板，数量上限：1000。
     */
    async CreateWatermarkTemplate(req, cb) {
        return this.request("CreateWatermarkTemplate", req, cb);
    }
    /**
     * 修改媒体传输的事件配置信息。
     */
    async ModifyStreamLinkEvent(req, cb) {
        return this.request("ModifyStreamLinkEvent", req, cb);
    }
    /**
     * 根据内容识别模板唯一标识，获取内容识别模板详情列表。返回结果包含符合条件的所有用户自定义内容识别模板及系统预置视频内容识别模板
     */
    async DescribeAIRecognitionTemplates(req, cb) {
        return this.request("DescribeAIRecognitionTemplates", req, cb);
    }
    /**
     * 提取视频中的盲水印。
     */
    async WithdrawsWatermark(req, cb) {
        return this.request("WithdrawsWatermark", req, cb);
    }
    /**
     * 查询媒体输入流的配置信息。
     */
    async DescribeStreamLinkFlow(req, cb) {
        return this.request("DescribeStreamLinkFlow", req, cb);
    }
    /**
     * 删除编排
     */
    async DeleteSchedule(req, cb) {
        return this.request("DeleteSchedule", req, cb);
    }
    /**
     * 修改转自适应码流模板
     */
    async ModifyAdaptiveDynamicStreamingTemplate(req, cb) {
        return this.request("ModifyAdaptiveDynamicStreamingTemplate", req, cb);
    }
    /**
     * 删除用户自定义水印模板。
     */
    async DeleteWatermarkTemplate(req, cb) {
        return this.request("DeleteWatermarkTemplate", req, cb);
    }
    /**
     * 该接口用于根据素材 ID，删除素材样本。
     */
    async DeletePersonSample(req, cb) {
        return this.request("DeletePersonSample", req, cb);
    }
    /**
     * 创建用户自定义转动图模板，数量上限：16。
     */
    async CreateAnimatedGraphicsTemplate(req, cb) {
        return this.request("CreateAnimatedGraphicsTemplate", req, cb);
    }
    /**
     * 启用自动化触发编排任务。
     */
    async EnableSchedule(req, cb) {
        return this.request("EnableSchedule", req, cb);
    }
    /**
     * 对URL链接或COS中的视频发起入库任务。
可选在任务完成后向回调方发送任务完成状态信息。
     */
    async CreateVideoDatabaseEntryTask(req, cb) {
        return this.request("CreateVideoDatabaseEntryTask", req, cb);
    }
    /**
     * 对直播流媒体发起处理任务，功能包括：

* 智能内容审核（画面鉴黄、敏感信息检测、声音鉴黄）；
* 智能内容识别（人脸、文本全文、文本关键词、语音全文、语音关键词、语音实时翻译、物体识别、游戏打点）。
* 智能内容分析（新闻实时拆条）。
* 质检（直播流格式诊断、音画内容检测（抖动、模糊、低光照、过曝光、黑边、白边、黑屏、白屏、花屏、噪点、马赛克、二维码等）、无参考打分）。
* 录制

直播流处理事件通知支持HTTP回调，也支持实时写入用户指定的消息队列 CMQ 中，用户从消息队列 CMQ 中获取事件通知结果，同时处理过程中存在输出文件的，会写入用户指定的输出文件的目标存储中。
     */
    async ProcessLiveStream(req, cb) {
        return this.request("ProcessLiveStream", req, cb);
    }
    /**
     * 删除直播录制模板
     */
    async DeleteLiveRecordTemplate(req, cb) {
        return this.request("DeleteLiveRecordTemplate", req, cb);
    }
    /**
     * 删除用户自定义内容审核模板。
     */
    async DeleteContentReviewTemplate(req, cb) {
        return this.request("DeleteContentReviewTemplate", req, cb);
    }
    /**
     * 删除用户自定义采样截图模板。
     */
    async DeleteSampleSnapshotTemplate(req, cb) {
        return this.request("DeleteSampleSnapshotTemplate", req, cb);
    }
    /**
     * 查询媒体传输流的媒体质量数据。

     */
    async DescribeStreamLinkFlowMediaStatistics(req, cb) {
        return this.request("DescribeStreamLinkFlowMediaStatistics", req, cb);
    }
    /**
     * 创建媒体传输的事件Event。
     */
    async CreateStreamLinkEvent(req, cb) {
        return this.request("CreateStreamLinkEvent", req, cb);
    }
    /**
     * 该接口用于创建素材样本，用于通过五官定位等技术，进行内容识别、内容不适宜等视频处理。
     */
    async CreatePersonSample(req, cb) {
        return this.request("CreatePersonSample", req, cb);
    }
    /**
     * 查询用户自定义媒体质检模板，支持根据条件，分页查询。
     */
    async DescribeQualityControlTemplates(req, cb) {
        return this.request("DescribeQualityControlTemplates", req, cb);
    }
    /**
     * 创建安全组，数量限制5个。
     */
    async CreateStreamLinkSecurityGroup(req, cb) {
        return this.request("CreateStreamLinkSecurityGroup", req, cb);
    }
    /**
     * 禁用自动化触发编排任务。
     */
    async DisableSchedule(req, cb) {
        return this.request("DisableSchedule", req, cb);
    }
    /**
     * 创建媒体传输的输入配置。
     */
    async CreateStreamLinkInput(req, cb) {
        return this.request("CreateStreamLinkInput", req, cb);
    }
    /**
     * 批量解绑安全组下面关联的输入输出。
     */
    async DisassociateSecurityGroup(req, cb) {
        return this.request("DisassociateSecurityGroup", req, cb);
    }
    /**
     * 修改用户自定义内容审核模板。
     */
    async ModifyContentReviewTemplate(req, cb) {
        return this.request("ModifyContentReviewTemplate", req, cb);
    }
    /**
     * 创建用户自定义内容识别模板，数量上限：50。
     */
    async CreateAIRecognitionTemplate(req, cb) {
        return this.request("CreateAIRecognitionTemplate", req, cb);
    }
    /**
     * 批量停止媒体传输流。
     */
    async BatchStopStreamLinkFlow(req, cb) {
        return this.request("BatchStopStreamLinkFlow", req, cb);
    }
    /**
     * 修改用户自定义内容识别模板。
     */
    async ModifyAIRecognitionTemplate(req, cb) {
        return this.request("ModifyAIRecognitionTemplate", req, cb);
    }
    /**
     * 删除媒体传输的事件配置。
     */
    async DeleteStreamLinkEvent(req, cb) {
        return this.request("DeleteStreamLinkEvent", req, cb);
    }
    /**
     * 查询媒体传输流的日志信息。
     */
    async DescribeStreamLinkFlowLogs(req, cb) {
        return this.request("DescribeStreamLinkFlowLogs", req, cb);
    }
    /**
     * 删除雪碧图模板。
     */
    async DeleteImageSpriteTemplate(req, cb) {
        return this.request("DeleteImageSpriteTemplate", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249247, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.mqtt = void 0;
const v20240516_1 = require("./v20240516");
exports.mqtt = {
    v20240516: v20240516_1.v20240516,
};

}, function(modId) { var map = {"./v20240516":1738984249248}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249248, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20240516 = void 0;
const Models = require("./mqtt_models");
const mqtt_client_1 = require("./mqtt_client");
exports.v20240516 = {
    Client: mqtt_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./mqtt_models":1738984249249,"./mqtt_client":1738984249250}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249249, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249250, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * mqtt client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("mqtt.tencentcloudapi.com", "2024-05-16", clientConfig);
    }
    /**
     * 修改主题属性
     */
    async ModifyTopic(req, cb) {
        return this.request("ModifyTopic", req, cb);
    }
    /**
     * 失效Ca证书
     */
    async DeactivateDeviceCertificate(req, cb) {
        return this.request("DeactivateDeviceCertificate", req, cb);
    }
    /**
     * 查询mqtt主题详情
     */
    async DescribeTopic(req, cb) {
        return this.request("DescribeTopic", req, cb);
    }
    /**
     * 创建一个jwks的认证
     */
    async CreateJWTAuthenticator(req, cb) {
        return this.request("CreateJWTAuthenticator", req, cb);
    }
    /**
     * 删除设备证书
     */
    async DeleteDeviceCertificate(req, cb) {
        return this.request("DeleteDeviceCertificate", req, cb);
    }
    /**
     * 修改MQTT JWKS 认证器
     */
    async ModifyJWTAuthenticator(req, cb) {
        return this.request("ModifyJWTAuthenticator", req, cb);
    }
    /**
     * 修改MQTT JWKS 认证器
     */
    async ModifyJWKSAuthenticator(req, cb) {
        return this.request("ModifyJWKSAuthenticator", req, cb);
    }
    /**
     * 分页查询设备证书
     */
    async DescribeDeviceCertificates(req, cb) {
        return this.request("DescribeDeviceCertificates", req, cb);
    }
    /**
     * 注册设备证书
     */
    async RegisterDeviceCertificate(req, cb) {
        return this.request("RegisterDeviceCertificate", req, cb);
    }
    /**
     * 创建主题
     */
    async CreateTopic(req, cb) {
        return this.request("CreateTopic", req, cb);
    }
    /**
     * 生效设备证书
     */
    async ActivateDeviceCertificate(req, cb) {
        return this.request("ActivateDeviceCertificate", req, cb);
    }
    /**
     * 查询授权规则
     */
    async DescribeAuthorizationPolicies(req, cb) {
        return this.request("DescribeAuthorizationPolicies", req, cb);
    }
    /**
     * 查询设备证书详情接口
     */
    async DescribeDeviceCertificate(req, cb) {
        return this.request("DescribeDeviceCertificate", req, cb);
    }
    /**
     * 获取实例列表，Filters参数使用说明如下：
1. InstanceName, 名称模糊查询
2. InstanceId，实例ID查询
3. InstanceStatus，实例状态查询，支持多选

当使用TagFilters查询时，Filters参数失效。
     */
    async DescribeInstanceList(req, cb) {
        return this.request("DescribeInstanceList", req, cb);
    }
    /**
     * 吊销设备证书
     */
    async RevokedDeviceCertificate(req, cb) {
        return this.request("RevokedDeviceCertificate", req, cb);
    }
    /**
     * 查询实例信息
     */
    async DescribeInstance(req, cb) {
        return this.request("DescribeInstance", req, cb);
    }
    /**
     * 删除MQTT主题
     */
    async DeleteTopic(req, cb) {
        return this.request("DeleteTopic", req, cb);
    }
    /**
     * 创建一个jwks的认证
     */
    async CreateJWKSAuthenticator(req, cb) {
        return this.request("CreateJWKSAuthenticator", req, cb);
    }
    /**
     * 修改策略规则
     */
    async ModifyAuthorizationPolicy(req, cb) {
        return this.request("ModifyAuthorizationPolicy", req, cb);
    }
    /**
     * 删除策略规则
     */
    async DeleteAuthorizationPolicy(req, cb) {
        return this.request("DeleteAuthorizationPolicy", req, cb);
    }
    /**
     * 根据认证器类型删除一个MQTT认证器
     */
    async DeleteAuthenticator(req, cb) {
        return this.request("DeleteAuthenticator", req, cb);
    }
    /**
     * 查询MQTT认证器
     */
    async DescribeAuthenticator(req, cb) {
        return this.request("DescribeAuthenticator", req, cb);
    }
    /**
     * 修改策略规则优先级
     */
    async UpdateAuthorizationPolicyPriority(req, cb) {
        return this.request("UpdateAuthorizationPolicyPriority", req, cb);
    }
    /**
     * 获取主题列表，Filter参数使用说明如下：

1. TopicName，主题名称模糊搜索
2. TopicType，主题类型查询，支持多选，可选值：Normal,Order,Transaction,DelayScheduled
     */
    async DescribeTopicList(req, cb) {
        return this.request("DescribeTopicList", req, cb);
    }
    /**
     * 创建MQTT实例的性能测试任务
     */
    async CreateAuthorizationPolicy(req, cb) {
        return this.request("CreateAuthorizationPolicy", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249251, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.mrs = void 0;
const v20200910_1 = require("./v20200910");
exports.mrs = {
    v20200910: v20200910_1.v20200910,
};

}, function(modId) { var map = {"./v20200910":1738984249252}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249252, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200910 = void 0;
const Models = require("./mrs_models");
const mrs_client_1 = require("./mrs_client");
exports.v20200910 = {
    Client: mrs_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./mrs_models":1738984249253,"./mrs_client":1738984249254}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249253, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249254, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * mrs client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("mrs.tencentcloudapi.com", "2020-09-10", clientConfig);
    }
    /**
     * 图片分类
     */
    async ImageToClass(req, cb) {
        return this.request("ImageToClass", req, cb);
    }
    /**
     * 药品说明书PDF文件结构化
     */
    async DrugInstructionObject(req, cb) {
        return this.request("DrugInstructionObject", req, cb);
    }
    /**
     * 体检报告PDF文件结构化异步获取结果接口
     */
    async TurnPDFToObjectAsyncGetResult(req, cb) {
        return this.request("TurnPDFToObjectAsyncGetResult", req, cb);
    }
    /**
     * 文本转结构化对象。

适用场景：经过腾讯医疗专用 OCR 从图片识别之后的文本，可以调用此接口。通过其它 OCR 识别的文本可能不适配。医院的 XML 格式文本也不适配，XML 文件需要经过特殊转换才能直接调用此接口。单次调用传入的文本不宜超过 2000 字。
     */
    async TextToObject(req, cb) {
        return this.request("TextToObject", req, cb);
    }
    /**
     * 医疗报告图片脱敏接口
     */
    async ImageMask(req, cb) {
        return this.request("ImageMask", req, cb);
    }
    /**
     * 图片转结构化对象
     */
    async ImageToObject(req, cb) {
        return this.request("ImageToObject", req, cb);
    }
    /**
     * 体检报告PDF文件结构化-异步接口
     */
    async TurnPDFToObjectAsync(req, cb) {
        return this.request("TurnPDFToObjectAsync", req, cb);
    }
    /**
     * 图片脱敏-异步接口
     */
    async ImageMaskAsync(req, cb) {
        return this.request("ImageMaskAsync", req, cb);
    }
    /**
     * 图片脱敏-异步获取结果接口
     */
    async ImageMaskAsyncGetResult(req, cb) {
        return this.request("ImageMaskAsyncGetResult", req, cb);
    }
    /**
     * 将PDF格式的体检报告文件结构化，解析关键信息。
注意：该接口是按照体检报告 PDF 页面数量统计次数，不是按照 PDF 文件数量统计次数。通过该接口传入的报告必须是体检报告，非体检报告可能无法正确解析。
     */
    async TurnPDFToObject(req, cb) {
        return this.request("TurnPDFToObject", req, cb);
    }
    /**
     * 文本分类

适用场景：经过腾讯医疗专用 OCR 从图片识别之后的文本，并且需要加上每个字符的坐标信息，才可以调用此接口。通过其它 OCR 识别的文本可能不适配。医院的 XML 格式文本也不适配，XML 文件需要经过特殊转换才能直接调用此接口。单次调用传入的文本不宜超过 2000 字。如有需要调用此接口，建议先咨询产品团队。
     */
    async TextToClass(req, cb) {
        return this.request("TextToClass", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249255, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ms = void 0;
const v20180408_1 = require("./v20180408");
exports.ms = {
    v20180408: v20180408_1.v20180408,
};

}, function(modId) { var map = {"./v20180408":1738984249256}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249256, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180408 = void 0;
const Models = require("./ms_models");
const ms_client_1 = require("./ms_client");
exports.v20180408 = {
    Client: ms_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ms_models":1738984249257,"./ms_client":1738984249258}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249257, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249258, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ms client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ms.tencentcloudapi.com", "2018-04-08", clientConfig);
    }
    /**
     * client任务请求
     */
    async RequestLocalTask(req, cb) {
        return this.request("RequestLocalTask", req, cb);
    }
    /**
     * 获取某个用户的所有资源信息。（注意：根据国家互联网用户实名制相关要求，使用该产品前，需先完成实名认证。）
     */
    async DescribeResourceInstances(req, cb) {
        return this.request("DescribeResourceInstances", req, cb);
    }
    /**
     * 查询加固策略。（注意：根据国家互联网用户实名制相关要求，使用该产品前，需先完成实名认证。）
     */
    async DescribeShieldPlanInstance(req, cb) {
        return this.request("DescribeShieldPlanInstance", req, cb);
    }
    /**
     * 本接口用于查看app列表。
可以通过指定任务唯一标识ItemId来查询指定app的详细信息，或通过设定过滤器来查询满足过滤条件的app的详细信息。 指定偏移(Offset)和限制(Limit)来选择结果中的一部分，默认返回满足条件的前20个app信息。（注意：根据国家互联网用户实名制相关要求，使用该产品前，需先完成实名认证。）
     */
    async DescribeShieldInstances(req, cb) {
        return this.request("DescribeShieldInstances", req, cb);
    }
    /**
     * 移动安全-网址检测服务
     */
    async DescribeUrlDetectionResult(req, cb) {
        return this.request("DescribeUrlDetectionResult", req, cb);
    }
    /**
     * 该接口供渠道合作应用加固使用，接口调用有白名单用户限制，用于创建加固任务。
     */
    async CreateEncryptInstance(req, cb) {
        return this.request("CreateEncryptInstance", req, cb);
    }
    /**
     * 该接口供渠道合作应用加固使用，接口调用有白名单用户限制。入参中的条件过滤字段均为精准匹配。
     */
    async DescribeEncryptPlan(req, cb) {
        return this.request("DescribeEncryptPlan", req, cb);
    }
    /**
     * 该接口供渠道合作应用加固使用，接口调用有白名单用户限制。 接口返回的结果为：创建订单后，订单审批状态信息，以及与订单关联的资源状态等信息，入参中的条件过滤字段均为精准匹配.
接口功能点：
1.支持多订单分页查询；
2.支持唯一订单号精准匹配查询；
3.支持唯一资源号精准匹配查询；
     */
    async DescribeOrderInstances(req, cb) {
        return this.request("DescribeOrderInstances", req, cb);
    }
    /**
     * 更新本地任务执行结果
     */
    async UpdateLocalTaskResult(req, cb) {
        return this.request("UpdateLocalTaskResult", req, cb);
    }
    /**
     * 对资源进行策略新增。（注意：根据国家互联网用户实名制相关要求，使用该产品前，需先完成实名认证。）
     */
    async CreateShieldPlanInstance(req, cb) {
        return this.request("CreateShieldPlanInstance", req, cb);
    }
    /**
     * 不再使用

用户可以使用该接口自建资源，只支持白名单用户
     */
    async CreateResourceInstances(req, cb) {
        return this.request("CreateResourceInstances", req, cb);
    }
    /**
     * 将应用和资源进行绑定。（注意：根据国家互联网用户实名制相关要求，使用该产品前，需先完成实名认证。）
     */
    async CreateBindInstance(req, cb) {
        return this.request("CreateBindInstance", req, cb);
    }
    /**
     * 用户通过该接口提交应用进行应用加固，加固后需通过DescribeShieldResult接口查询加固结果。（注意：根据国家互联网用户实名制相关要求，使用该产品前，需先完成实名认证。）
     */
    async CreateShieldInstance(req, cb) {
        return this.request("CreateShieldInstance", req, cb);
    }
    /**
     * 删除一个或者多个app加固信息。（注意：根据国家互联网用户实名制相关要求，使用该产品前，需先完成实名认证。）
     */
    async DeleteShieldInstances(req, cb) {
        return this.request("DeleteShieldInstances", req, cb);
    }
    /**
     * 通过唯一标识获取加固的结果。（注意：根据国家互联网用户实名制相关要求，使用该产品前，需先完成实名认证。）
     */
    async DescribeShieldResult(req, cb) {
        return this.request("DescribeShieldResult", req, cb);
    }
    /**
     * 更新client状态，需要白名单
     */
    async UpdateClientState(req, cb) {
        return this.request("UpdateClientState", req, cb);
    }
    /**
     * 渠道合作资源销毁
安卓应用加固-按年收费资源销毁，其他类型暂不支持
     */
    async DestroyResourceInstances(req, cb) {
        return this.request("DestroyResourceInstances", req, cb);
    }
    /**
     * 获取云COS文件存储临时密钥，密钥仅限于临时上传文件，有访问限制和时效性，请保管好临时密钥。
     */
    async CreateCosSecKeyInstance(req, cb) {
        return this.request("CreateCosSecKeyInstance", req, cb);
    }
    /**
     * 该接口供渠道合作应用加固使用，接口调用有白名单用户限制，取消渠道合作加固中的任务
     */
    async CancelEncryptTask(req, cb) {
        return this.request("CancelEncryptTask", req, cb);
    }
    /**
     * 获取用户基础信息
     */
    async DescribeUserBaseInfoInstance(req, cb) {
        return this.request("DescribeUserBaseInfoInstance", req, cb);
    }
    /**
     * 该接口采用同步模式请求腾讯APK云检测服务，即时返回检测数据，需要用户用轮询的方式调用本接口来进行样本送检并获取检测结果(每隔60s发送一次请求，传相同的参数，重试30次)，一般情况下0.5h内会出检测结果，最长时间是3h。当Result为ok并且ResultList数组非空有值时，代表检测完毕，若长时间获取不到检测结果，请联系客服。
     */
    async DescribeApkDetectionResult(req, cb) {
        return this.request("DescribeApkDetectionResult", req, cb);
    }
    /**
     * 该接口供渠道合作应用加固使用，接口调用有白名单用户限制，用于查询加固任务，入参中的条件过滤字段均为精准匹配。支持功能点: 1. 多任务分页查询  2.根据任务Id唯一值查询单记录
     */
    async DescribeEncryptInstances(req, cb) {
        return this.request("DescribeEncryptInstances", req, cb);
    }
    /**
     * 该接口供渠道合作应用加固使用，接口调用有白名单用户限制。
订单类型有：免费试用、按年收费、按次收费。
应用加固支持的平台类型有：android加固 、ios源码混淆 、sdk加固、applet小程序加固
     */
    async CreateOrderInstance(req, cb) {
        return this.request("CreateOrderInstance", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249259, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.msp = void 0;
const v20180319_1 = require("./v20180319");
exports.msp = {
    v20180319: v20180319_1.v20180319,
};

}, function(modId) { var map = {"./v20180319":1738984249260}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249260, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180319 = void 0;
const Models = require("./msp_models");
const msp_client_1 = require("./msp_client");
exports.v20180319 = {
    Client: msp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./msp_models":1738984249261,"./msp_client":1738984249262}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249261, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249262, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * msp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("msp.tencentcloudapi.com", "2018-03-19", clientConfig);
    }
    /**
     * 获取迁移任务列表
     */
    async ListMigrationTask(req, cb) {
        return this.request("ListMigrationTask", req, cb);
    }
    /**
     * 注册迁移任务
     */
    async RegisterMigrationTask(req, cb) {
        return this.request("RegisterMigrationTask", req, cb);
    }
    /**
     * 更新迁移任务状态
     */
    async ModifyMigrationTaskStatus(req, cb) {
        return this.request("ModifyMigrationTaskStatus", req, cb);
    }
    /**
     * 接口已经废弃不再使用

取消注册迁移任务
     */
    async DeregisterMigrationTask(req, cb) {
        return this.request("DeregisterMigrationTask", req, cb);
    }
    /**
     * 获取指定迁移任务详情
     */
    async DescribeMigrationTask(req, cb) {
        return this.request("DescribeMigrationTask", req, cb);
    }
    /**
     * 更改迁移任务所属项目
     */
    async ModifyMigrationTaskBelongToProject(req, cb) {
        return this.request("ModifyMigrationTaskBelongToProject", req, cb);
    }
    /**
     * 获取迁移项目名称列表
     */
    async ListMigrationProject(req, cb) {
        return this.request("ListMigrationProject", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249263, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.mvj = void 0;
const v20190926_1 = require("./v20190926");
exports.mvj = {
    v20190926: v20190926_1.v20190926,
};

}, function(modId) { var map = {"./v20190926":1738984249264}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249264, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190926 = void 0;
const Models = require("./mvj_models");
const mvj_client_1 = require("./mvj_client");
exports.v20190926 = {
    Client: mvj_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./mvj_models":1738984249265,"./mvj_client":1738984249266}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249265, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249266, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * mvj client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("mvj.tencentcloudapi.com", "2019-09-26", clientConfig);
    }
    /**
     * 欢迎使用营销价值判断（Marketing Value Judgement，简称 MVJ）。

营销价值判断（MVJ）是针对零售场景的风控服务，通过识别高价值顾客，以帮助零售商保障营销资金
     */
    async MarketingValueJudgement(req, cb) {
        return this.request("MarketingValueJudgement", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249267, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.nlp = void 0;
const v20190408_1 = require("./v20190408");
exports.nlp = {
    v20190408: v20190408_1.v20190408,
};

}, function(modId) { var map = {"./v20190408":1738984249268}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249268, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190408 = void 0;
const Models = require("./nlp_models");
const nlp_client_1 = require("./nlp_client");
exports.v20190408 = {
    Client: nlp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./nlp_models":1738984249269,"./nlp_client":1738984249270}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249269, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249270, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * nlp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("nlp.tencentcloudapi.com", "2019-04-08", clientConfig);
    }
    /**
     * 运用先进的自然语言处理技术，对原始文本进行优化润色，提升文本的通顺性、表达力和语言质量。
     */
    async TextEmbellish(req, cb) {
        return this.request("TextEmbellish", req, cb);
    }
    /**
     * 文本分类接口能够对用户输入的文章进行自动分类，将其映射到具体的类目上，用户只需要提供待分类的文本，而无需关注具体实现。该功能定义了一套较为完备的[三级分类体系](https://cloud.tencent.com/document/product/271/94286)，积累了数百万的语料，经过多轮迭代优化打造了较先进的深度学习模型，以保证效果不断提升。
     */
    async ClassifyContent(req, cb) {
        return this.request("ClassifyContent", req, cb);
    }
    /**
     * 智能识别并纠正句子中的语法、拼写、用词等错误，确保文本的准确性和可读性。
     */
    async SentenceCorrection(req, cb) {
        return this.request("SentenceCorrection", req, cb);
    }
    /**
     * 诗词生成接口利用现代的自然语言处理和深度学习技术，模仿了古代著名诗人的风格，为用户产生独特的诗词。用户只需输入的命题关键词，接口就能自动生成一首七言律诗或五言律诗。
     */
    async ComposePoetry(req, cb) {
        return this.request("ComposePoetry", req, cb);
    }
    /**
     * 基于大数据和深度学习技术，可以快速地找到与给定词语高度相似的其他词语，有助于提高搜索和推荐的准确性。（目前仅支持中文）
     */
    async RetrieveSimilarWords(req, cb) {
        return this.request("RetrieveSimilarWords", req, cb);
    }
    /**
     * 通过计算句子间的语义相似性，帮助您快速找到文本中重复或相似的句子，用于文本聚类、相似问题检索等应用场景。
     */
    async EvaluateSentenceSimilarity(req, cb) {
        return this.request("EvaluateSentenceSimilarity", req, cb);
    }
    /**
     * 根据提供的关键词，生成简洁明了的关键句子，便于用户快速获取核心观点。
     */
    async GenerateKeywordSentence(req, cb) {
        return this.request("GenerateKeywordSentence", req, cb);
    }
    /**
     * 通过自动补全文本片段，帮助用户快速生成高质量、连贯的完整文本，提高创作效率。
     */
    async TextWriting(req, cb) {
        return this.request("TextWriting", req, cb);
    }
    /**
     * 评估两个词语在语义空间的相似程度，为您的场景应用提供有力支持，如关键词过滤、热门话题挖掘等。（目前仅支持中文）
     */
    async EvaluateWordSimilarity(req, cb) {
        return this.request("EvaluateWordSimilarity", req, cb);
    }
    /**
     * 对联生成接口根据用户输入的命题关键词，智能生成一副完整的春联，包括上联、下联和横批。该接口利用先进的自然语言处理技术，确保生成的春联既符合传统对仗、对韵、对义的要求，又具有新意和创意，为用户提供独特的春节祝福。
     */
    async ComposeCouplet(req, cb) {
        return this.request("ComposeCouplet", req, cb);
    }
    /**
     * 情感分析接口能够对带有情感色彩的主观性文本进行分析、处理、归纳和推理，识别出用户的情感倾向，是积极、中性还是消极，并且提供各自概率。
     */
    async AnalyzeSentiment(req, cb) {
        return this.request("AnalyzeSentiment", req, cb);
    }
    /**
     * 通过精准地对文本进行分词、词性标注、命名实体识别等功能，助您更好地理解文本内容，挖掘出潜在的价值信息。
     */
    async ParseWords(req, cb) {
        return this.request("ParseWords", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249271, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.npp = void 0;
const v20190823_1 = require("./v20190823");
exports.npp = {
    v20190823: v20190823_1.v20190823,
};

}, function(modId) { var map = {"./v20190823":1738984249272}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249272, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190823 = void 0;
const Models = require("./npp_models");
const npp_client_1 = require("./npp_client");
exports.v20190823 = {
    Client: npp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./npp_models":1738984249273,"./npp_client":1738984249274}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249273, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249274, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * npp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("npp.tencentcloudapi.com", "2019-08-23", clientConfig);
    }
    /**
     * 回拨呼叫取消
     */
    async DeleteCallBack(req, cb) {
        return this.request("DeleteCallBack", req, cb);
    }
    /**
     * 回拨拉取主叫显号号码集合
     */
    async DescribeCallerDisplayList(req, cb) {
        return this.request("DescribeCallerDisplayList", req, cb);
    }
    /**
     * 直拨解绑中间号
     */
    async DelVirtualNum(req, cb) {
        return this.request("DelVirtualNum", req, cb);
    }
    /**
     * 直拨获取中间号（App 使用方发起）
     */
    async GetVirtualNum(req, cb) {
        return this.request("GetVirtualNum", req, cb);
    }
    /**
     * 直拨话单获取接口
     */
    async Get400Cdr(req, cb) {
        return this.request("Get400Cdr", req, cb);
    }
    /**
     * 回拨通话状态获取
     */
    async DescribeCallBackStatus(req, cb) {
        return this.request("DescribeCallBackStatus", req, cb);
    }
    /**
     * 回拨呼叫请求
     */
    async CreateCallBack(req, cb) {
        return this.request("CreateCallBack", req, cb);
    }
    /**
     * 回拨话单获取接口
     */
    async DescribeCallBackCdr(req, cb) {
        return this.request("DescribeCallBackCdr", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249275, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.oceanus = void 0;
const v20190422_1 = require("./v20190422");
exports.oceanus = {
    v20190422: v20190422_1.v20190422,
};

}, function(modId) { var map = {"./v20190422":1738984249276}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249276, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190422 = void 0;
const Models = require("./oceanus_models");
const oceanus_client_1 = require("./oceanus_client");
exports.v20190422 = {
    Client: oceanus_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./oceanus_models":1738984249277,"./oceanus_client":1738984249278}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249277, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249278, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * oceanus client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("oceanus.tencentcloudapi.com", "2019-04-22", clientConfig);
    }
    /**
     * 生成树状作业显示结构
     */
    async DescribeTreeJobs(req, cb) {
        return this.request("DescribeTreeJobs", req, cb);
    }
    /**
     * 查询树状结构资源列表
     */
    async DescribeTreeResources(req, cb) {
        return this.request("DescribeTreeResources", req, cb);
    }
    /**
     * 单条和批量复制作业
     */
    async CopyJobs(req, cb) {
        return this.request("CopyJobs", req, cb);
    }
    /**
     * 通过Sql gateway执行satement
     */
    async RunSqlGatewayStatement(req, cb) {
        return this.request("RunSqlGatewayStatement", req, cb);
    }
    /**
     * 删除资源版本
     */
    async DeleteResourceConfigs(req, cb) {
        return this.request("DeleteResourceConfigs", req, cb);
    }
    /**
     * 创建工作空间
     */
    async CreateWorkSpace(req, cb) {
        return this.request("CreateWorkSpace", req, cb);
    }
    /**
     * 创建资源配置接口
     */
    async CreateResourceConfig(req, cb) {
        return this.request("CreateResourceConfig", req, cb);
    }
    /**
     * 删除作业表配置
     */
    async DeleteTableConfig(req, cb) {
        return this.request("DeleteTableConfig", req, cb);
    }
    /**
     * 查询指定文件夹及其相应的子文件夹信息
     */
    async DescribeFolder(req, cb) {
        return this.request("DescribeFolder", req, cb);
    }
    /**
     * 删除工作空间
     */
    async DeleteWorkSpace(req, cb) {
        return this.request("DeleteWorkSpace", req, cb);
    }
    /**
     * 自定义树状结构页面拖拽文件夹
     */
    async ModifyFolder(req, cb) {
        return this.request("ModifyFolder", req, cb);
    }
    /**
     * 查找Savepoint列表
     */
    async DescribeJobSavepoint(req, cb) {
        return this.request("DescribeJobSavepoint", req, cb);
    }
    /**
     * 查询作业实例启动日志
     */
    async DescribeJobSubmissionLog(req, cb) {
        return this.request("DescribeJobSubmissionLog", req, cb);
    }
    /**
     * 描述资源接口
     */
    async DescribeResources(req, cb) {
        return this.request("DescribeResources", req, cb);
    }
    /**
     * 获取作业运行时的信息
     */
    async DescribeJobRuntimeInfo(req, cb) {
        return this.request("DescribeJobRuntimeInfo", req, cb);
    }
    /**
     * 查询Sql Gateway的Statement执行结果
     */
    async FetchSqlGatewayStatementResult(req, cb) {
        return this.request("FetchSqlGatewayStatementResult", req, cb);
    }
    /**
     * 获取指定作业的事件，包括作业启动停止、运行失败、快照失败、作业异常等各种事件类型
     */
    async DescribeJobEvents(req, cb) {
        return this.request("DescribeJobEvents", req, cb);
    }
    /**
     * 描述资源配置接口
     */
    async DescribeResourceConfigs(req, cb) {
        return this.request("DescribeResourceConfigs", req, cb);
    }
    /**
     * 作业列表删除文件夹
     */
    async DeleteFolders(req, cb) {
        return this.request("DeleteFolders", req, cb);
    }
    /**
     * 授权工作空间列表
     */
    async DescribeWorkSpaces(req, cb) {
        return this.request("DescribeWorkSpaces", req, cb);
    }
    /**
     * 新建作业接口，一个 AppId 最多允许创建1000个作业
     */
    async CreateJob(req, cb) {
        return this.request("CreateJob", req, cb);
    }
    /**
     * 触发Savepoint
     */
    async TriggerJobSavepoint(req, cb) {
        return this.request("TriggerJobSavepoint", req, cb);
    }
    /**
     * 批量启动或者恢复作业，批量操作数量上限20
     */
    async RunJobs(req, cb) {
        return this.request("RunJobs", req, cb);
    }
    /**
     * 批量删除作业接口，批量操作数量上限20
     */
    async DeleteJobs(req, cb) {
        return this.request("DeleteJobs", req, cb);
    }
    /**
     * 作业列表页面新建文件夹请求
     */
    async CreateFolder(req, cb) {
        return this.request("CreateFolder", req, cb);
    }
    /**
     * 检查快照是否可用
     */
    async CheckSavepoint(req, cb) {
        return this.request("CheckSavepoint", req, cb);
    }
    /**
     * 创建作业配置，一个作业最多有100个配置版本
     */
    async CreateJobConfig(req, cb) {
        return this.request("CreateJobConfig", req, cb);
    }
    /**
     * 查询集群
     */
    async DescribeClusters(req, cb) {
        return this.request("DescribeClusters", req, cb);
    }
    /**
     * 删除作业配置
     */
    async DeleteJobConfigs(req, cb) {
        return this.request("DeleteJobConfigs", req, cb);
    }
    /**
     * 批量停止作业，批量操作数量上限为20
     */
    async StopJobs(req, cb) {
        return this.request("StopJobs", req, cb);
    }
    /**
     * 获取资源关联作业信息
     */
    async DescribeResourceRelatedJobs(req, cb) {
        return this.request("DescribeResourceRelatedJobs", req, cb);
    }
    /**
     * 修改工作空间
     */
    async ModifyWorkSpace(req, cb) {
        return this.request("ModifyWorkSpace", req, cb);
    }
    /**
     * 删除资源接口
     */
    async DeleteResources(req, cb) {
        return this.request("DeleteResources", req, cb);
    }
    /**
     * 查询作业
     */
    async DescribeJobs(req, cb) {
        return this.request("DescribeJobs", req, cb);
    }
    /**
     * 更新作业属性，仅允许以下3种操作，不支持组合操作：
(1)	更新作业名称
(2)	更新作业备注
(3)	更新作业最大并行度
变更前提：WorkerCuNum<=MaxParallelism
如果MaxParallelism变小，不重启作业，待下一次重启生效
如果MaxParallelism变大，则要求入参RestartAllowed必须为True
假设作业运行状态，则先停止作业，再启动作业，中间状态丢失
假设作业暂停状态，则将作业更改为停止状态，中间状态丢失
     */
    async ModifyJob(req, cb) {
        return this.request("ModifyJob", req, cb);
    }
    /**
     * 创建资源接口
     */
    async CreateResource(req, cb) {
        return this.request("CreateResource", req, cb);
    }
    /**
     * 描述系统资源接口
     */
    async DescribeSystemResources(req, cb) {
        return this.request("DescribeSystemResources", req, cb);
    }
    /**
     * 查询元数据表
     */
    async GetMetaTable(req, cb) {
        return this.request("GetMetaTable", req, cb);
    }
    /**
     * 查询作业配置列表，一次最多查询100个
     */
    async DescribeJobConfigs(req, cb) {
        return this.request("DescribeJobConfigs", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249279, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ocr = void 0;
const v20181119_1 = require("./v20181119");
exports.ocr = {
    v20181119: v20181119_1.v20181119,
};

}, function(modId) { var map = {"./v20181119":1738984249280}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249280, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20181119 = void 0;
const Models = require("./ocr_models");
const ocr_client_1 = require("./ocr_client");
exports.v20181119 = {
    Client: ocr_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ocr_models":1738984249281,"./ocr_client":1738984249282}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249281, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249282, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ocr client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ocr.tencentcloudapi.com", "2018-11-19", clientConfig);
    }
    /**
     * 题目识别是教育的基础OCR识别能力。可支持扫描、拍照场景的单题题目识别。接口支持印刷体文本、手写体文本及公式的OCR识别和坐标返回，此外，接口还可对题目中的配图位置进行检测并返回坐标位置。适用于智能批改等场景的题目内容识别作为检索输入。

默认接口请求频率限制：2次/秒。
     */
    async QuestionOCR(req, cb) {
        return this.request("QuestionOCR", req, cb);
    }
    /**
     * 本接口通过检测图片中的文字信息特征，快速判断图片中有无文字并返回判断结果，帮助用户过滤无文字的图片。

默认接口请求频率限制：5次/秒。
     */
    async TextDetect(req, cb) {
        return this.request("TextDetect", req, cb);
    }
    /**
     * 本接口支持条形码和二维码的识别（包括 DataMatrix 和 PDF417）。

默认接口请求频率限制：5次/秒。
     */
    async QrcodeOCR(req, cb) {
        return this.request("QrcodeOCR", req, cb);
    }
    /**
     * 本接口支持图像整体文字的检测和识别。支持中文、英文、中英文、数字和特殊字符号的识别，并返回文字框位置和文字内容。

适用于文字较多、版式复杂、对识别准召率要求较高的场景，如试卷试题、网络图片、街景店招牌、法律卷宗等场景。

产品优势：与通用印刷体识别接口相比，本接口提供更高精度的通用文字识别服务，在手写体、文字较多、长串数字、小字、模糊字、倾斜文本等困难场景下，高精度版的准确率和召回率更高。

通用文字识别不同版本的差异如下：
<table style="width:715px">
      <thead>
        <tr>
          <th style="width:150px"></th>
          <th >【荐】通用印刷体识别（高精度版）</th>
          <th style="width:200px"><a href="https://cloud.tencent.com/document/product/866/33526">【荐】通用印刷体识别</a></th>
          <th><a href="https://cloud.tencent.com/document/product/866/37831">通用印刷体识别（精简版）</a></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td> 适用场景</td>
          <td>适用于文字较多、长串数字、小字、模糊字、倾斜文本等困难场景</td>
          <td>适用于所有通用场景的印刷体识别</td>
          <td>适用于快速文本识别场景，准召率有一定损失，价格更优惠</td>
        </tr>
        <tr>
          <td>识别准确率</td>
          <td>99%</td>
          <td>96%</td>
          <td>91%</td>
        </tr>
        <tr>
          <td>价格</td>
          <td>高</td>
          <td>中</td>
          <td>低</td>
        </tr>
        <tr>
          <td>支持的语言</td>
          <td>中文、英文、中英文</td>
          <td>中文、英文、中英文、日语、韩语、西班牙语、法语、德语、葡萄牙语、越南语、马来语、俄语、意大利语、荷兰语、瑞典语、芬兰语、丹麦语、挪威语、匈牙利语、泰语</td>
          <td>中文、英文、中英文</td>
        </tr>
        <tr>
          <td>自动语言检测</td>
          <td>支持</td>
          <td>支持</td>
          <td>支持</td>
        </tr>
        <tr>
          <td>返回文本行坐标</td>
          <td>支持</td>
          <td>支持</td>
          <td>支持</td>
        </tr>
        <tr>
          <td>自动旋转纠正</td>
          <td>支持旋转识别，返回角度信息</td>
          <td>支持旋转识别，返回角度信息</td>
          <td>支持旋转识别，返回角度信息</td>
        </tr>
      </tbody>
    </table>

默认接口请求频率限制：10次/秒。
     */
    async GeneralAccurateOCR(req, cb) {
        return this.request("GeneralAccurateOCR", req, cb);
    }
    /**
     * 本接口支持集装箱箱门信息识别，识别字段包括集装箱箱号、类型、总重量、有效承重、容量、自身重量，具备集装箱箱号、类型不完整或者不清晰的告警功能。
默认接口请求频率限制：5次/秒。
     */
    async RecognizeContainerOCR(req, cb) {
        return this.request("RecognizeContainerOCR", req, cb);
    }
    /**
     * 身份证识别（安全加密版）接口实现了数据加密传输，能够有效防止个人身份证隐私信息不被窃取泄露。

本接口支持中国大陆居民二代身份证正反面所有字段的识别，包括姓名、性别、民族、出生日期、住址、公民身份证号、签发机关、有效期限，识别准确度达到99%以上。

另外，本接口还支持多种扩展能力，满足不同场景的需求。如身份证照片、人像照片的裁剪功能，同时具备9种告警功能，如下表所示。

<table style="width:650px">
      <thead>
        <tr>
       <th width="150">扩展能力</th>
          <th width="500">能力项</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td rowspan="2">裁剪功能</td>
          <td>身份证照片裁剪（去掉证件外多余的边缘、自动矫正拍摄角度）</td>
        </tr>
        <tr>
          <td>人像照片裁剪（自动抠取身份证头像区域）</td>
        </tr>
        <tr>
          <td rowspan="9">告警功能</td>
          <td>身份证有效日期不合法，即有效日期不符合5年、10年、20年、长期期限

</td>
        </tr>
        <tr>
          <td>身份证边框不完整告警</td>
        </tr>
        <tr>
          <td>身份证复印件告警</td>
        </tr>
        <tr>
          <td>身份证翻拍告警</td>
        </tr>
          <tr>
          <td>身份证框内遮挡告警</td>
        </tr>
         <tr>
          <td>临时身份证告警</td>
        </tr>
         <tr>
          <td>身份证疑似存在PS痕迹告警</td>
        </tr>
          <tr>
          <td>图片模糊告警（可根据图片质量分数判断）</td>
        </tr>
      </tbody>
    </table>

默认接口请求频率限制：20次/秒。
     */
    async RecognizeEncryptedIDCardOCR(req, cb) {
        return this.request("RecognizeEncryptedIDCardOCR", req, cb);
    }
    /**
     * 本接口用于识别门头照文字识别结果以及对应分类标签信息
默认接口请求频率限制：1次/秒
     */
    async RecognizeStoreName(req, cb) {
        return this.request("RecognizeStoreName", req, cb);
    }
    /**
     * 本接口支持以及其他国家、地区的护照识别。识别字段包括护照ID、姓名、出生日期、性别、有效期、发行国、国籍、国家地区代码，具备护照人像照片的裁剪功能和翻拍、复印件告警功能。
本接口支持地区范围：可机读护照国家。包括中国港澳台地区、新加坡、马来西亚、泰国、美国、韩国、越南、澳大利亚、缅甸、印度尼西亚、日本、加拿大、老挝、巴基斯坦、哈萨克斯坦、法国、英国、德国、菲律宾、新西兰、印度、意大利、蒙古、孟加拉国、尼日利亚、柬埔寨、西班牙、摩洛哥、吉尔吉斯斯坦、埃及、荷兰、塔吉克斯坦、巴西、乌兹别克斯坦、伊拉克、阿尔及利亚、土耳其、南非、墨西哥、尼泊尔、白俄罗斯、叶门、阿富汗、沙特、肯尼亚、波兰、比利时、瑞典、奥地利、坦桑尼亚、委内瑞拉、阿根廷、喀麦隆、斯里兰卡、衣索比亚、约旦、瑞士、加纳、爱尔兰、哥伦比亚、苏丹、匈牙利、罗马尼亚、阿联酋、文莱、希腊、以色列、巴拿马、丹麦、伊朗、乌干达、挪威、秘鲁、葡萄牙、智利、塞尔维亚、芬兰、尚比亚、亚美尼亚、叙利亚、黎巴嫩、斯洛伐克、卡塔尔、古巴、朝鲜。

默认接口请求频率限制：5次/秒。
     */
    async MLIDPassportOCR(req, cb) {
        return this.request("MLIDPassportOCR", req, cb);
    }
    /**
     * 本接口支持火车票全字段的识别，包括编号、出发站、到达站、出发时间、车次、座位号、姓名、票价、席别、身份证号、发票消费类型、序列号、加收票价、手续费、大写金额、售票站、原票价、发票类型、收据号码、是否仅供报销使用等字段的识别。

默认接口请求频率限制：5次/秒。
     */
    async TrainTicketOCR(req, cb) {
        return this.request("TrainTicketOCR", req, cb);
    }
    /**
     * 本接口支持房产证关键字段的识别，包括房地产权利人、共有情况、登记时间、规划用途、房屋性质、房屋坐落等。
目前接口对合肥、成都、佛山三个城市的房产证版式识别较好。

默认接口请求频率限制：5次/秒。
     */
    async PropOwnerCertOCR(req, cb) {
        return this.request("PropOwnerCertOCR", req, cb);
    }
    /**
     * 本接口支持对通用机打发票的发票代码、发票号码、日期、合计金额(小写)、合计金额(大写)、购买方识别号、销售方识别号、校验码、购买方名称、销售方名称、时间、种类、发票消费类型、省、市、是否有公司印章、发票名称、购买方地址、电话、销售方地址、电话、购买方开户行及账号、销售方开户行及账号、经办人取票用户、经办人支付信息、经办人商户号、经办人订单号、货物或应税劳务、服务名称、数量、单价、税率、税额、金额、单位、规格型号、合计税额、合计金额、备注、收款人、复核、开票人、密码区、行业分类等字段的识别。

默认接口请求频率限制：5次/秒。
     */
    async InvoiceGeneralOCR(req, cb) {
        return this.request("InvoiceGeneralOCR", req, cb);
    }
    /**
     * 服务已迁移至 [文档解析](https://cloud.tencent.com/document/product/1759/107504)，请跳转查看接口文档。该接口支持将图片或PDF文件转换成Markdown格式文件，可解析包括表格、公式、图片、标题、段落、页眉、页脚等内容元素，并将内容智能转换成阅读顺序。
     */
    async ReconstructDocument(req, cb) {
        return this.request("ReconstructDocument", req, cb);
    }
    /**
     * 本接口支持中国香港身份证人像面中关键字段的识别，包括中文姓名、英文姓名、姓名电码、出生日期、性别、证件符号、首次签发日期、最近领用日期、身份证号、是否是永久性居民身份证；具备人像照片裁剪等扩展功能。

默认接口请求频率限制：5次/秒。
     */
    async HKIDCardOCR(req, cb) {
        return this.request("HKIDCardOCR", req, cb);
    }
    /**
     * 本接口支持对卡式港澳台通行证的识别，包括签发地点、签发机关、有效期限、性别、出生日期、英文姓名、姓名、证件号等字段。

默认接口请求频率限制：10次/秒。
     */
    async PermitOCR(req, cb) {
        return this.request("PermitOCR", req, cb);
    }
    /**
     * 本接口支持识别公路汽车客票关键字段的识别，包括发票代码、发票号码、日期、票价、始发地、目的地、姓名、时间、发票消费类型、身份证号、省、市、开票日期、乘车地点、检票口、客票类型、车型、座位号、车次等。

默认接口请求频率限制：5次/秒。
     */
    async BusInvoiceOCR(req, cb) {
        return this.request("BusInvoiceOCR", req, cb);
    }
    /**
     * 本接口支持图像英文文字的检测和识别，返回文字框位置与文字内容。支持多场景、任意版面下的英文、字母、数字和常见字符的识别，同时覆盖英文印刷体和英文手写体识别。

默认接口请求频率限制：10次/秒。
     */
    async EnglishOCR(req, cb) {
        return this.request("EnglishOCR", req, cb);
    }
    /**
     * 本接口支持识别并提取各类证照、票据、表单、合同等结构化场景的字段信息。无需任何配置，灵活高效。适用于各类结构化信息录入场景。

默认接口请求频率限制：5次/秒。
     */
    async SmartStructuralOCR(req, cb) {
        return this.request("SmartStructuralOCR", req, cb);
    }
    /**
     * 本接口用于识别门头照分类标签信息
默认接口请求频率限制：1次/秒
     */
    async ClassifyStoreName(req, cb) {
        return this.request("ClassifyStoreName", req, cb);
    }
    /**
     * 本接口支持出租车发票关键字段的识别，包括发票号码、发票代码、金额、日期、上下车时间、里程、车牌号、发票类型及所属地区等字段。

默认接口请求频率限制：5次/秒。
     */
    async TaxiInvoiceOCR(req, cb) {
        return this.request("TaxiInvoiceOCR", req, cb);
    }
    /**
     * 本接口支持网约车驾驶证关键字段的识别，包括姓名、证号、起始日期、截止日期、发证日期。

默认接口请求频率限制：5次/秒。
     */
    async RideHailingDriverLicenseOCR(req, cb) {
        return this.request("RideHailingDriverLicenseOCR", req, cb);
    }
    /**
     * 外国人永久居留身份证识别
     */
    async RecognizeForeignPermanentResidentIdCard(req, cb) {
        return this.request("RecognizeForeignPermanentResidentIdCard", req, cb);
    }
    /**
     * 智能识别并结构化港澳台居民来往内地通行证正面全部字段，包含中文姓名、英文姓名、性别、出生日期、签发机关、有效期限、证件号、签发地点、签发次数、证件类别。

默认接口请求频率限制：20次/秒。
     */
    async MainlandPermitOCR(req, cb) {
        return this.request("MainlandPermitOCR", req, cb);
    }
    /**
     * 本接口支持机票行程单关键字段的识别，包括旅客姓名、有效身份证件号码、电子客票号码、验证码、填开单位、其他税费、燃油附加费、民航发展基金、保险费、销售单位代号、始发地、目的地、航班号、时间、日期、座位等级、承运人、发票消费类型、票价、合计金额、填开日期、国内国际标签、印刷序号、客票级别/类别、客票生效日期、有效期截止日期、免费行李等字段，支持航班信息多行明细输出。

默认接口请求频率限制：5次/秒。
     */
    async FlightInvoiceOCR(req, cb) {
        return this.request("FlightInvoiceOCR", req, cb);
    }
    /**
     * 本接口支持泰国身份证识别，识别字段包括泰文姓名、英文姓名、地址、出生日期、身份证号码、首次领用日期、签发日期等字段。
本接口暂未完全对外开放，如需咨询，请[联系商务](https://cloud.tencent.com/about/connect)

默认接口请求频率限制：10次/秒
     */
    async RecognizeThaiIDCardOCR(req, cb) {
        return this.request("RecognizeThaiIDCardOCR", req, cb);
    }
    /**
     * 本接口支持 PDF多页（最多30页）、一页中单张、多张、类型票据的混合识别，同时支持单选识别某类票据，已支持票种包括：增值税发票（专票、普票、卷票、区块链发票、通行费发票）、全电发票（专票、普票）、非税发票（通用票据、统一缴纳书）、定额发票、通用机打发票、购车发票（机动车销售发票、二手车发票）、火车票、出租车发票、机票行程单、汽车票、轮船票、过路过桥费发票共14种标准报销发票，支持OFD格式的 增值税电子普通发票、增值税电子专用发票、电子发票（普通发票）、电子发票（增值税专用发票）、电子发票（机票行程单）、电子发票（铁路电子客票）的第一页识别，并支持非上述类型的其他发票的智能识别，点击[立即试用](https://cloud.tencent.com/product/ocr)。

默认接口请求频率限制：5次/秒。


支持返回的细项目子票种SubType、子票种中文TypeDescription、以及对应所属大类票种Type 的说明如下列表：
<table style="width:715px">
      <thead>
        <tr>
          <th style="width:200px">SubType 子票种英文</th>
          <th style="width:200px">TypeDescription子票种中文</th>
          <th >Type 所属大类票种</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td> VatSpecialInvoice</td>
          <td> 增值税专用发票 </td>
          <td> 3 </td>
        </tr>
        <tr>
          <td> VatCommonInvoice</td>
          <td> 增值税普通发票 </td>
          <td> 3 </td>
        </tr>
        <tr>
          <td> VatElectronicCommonInvoice </td>
          <td> 增值税电子普通发票 </td>
          <td> 3 </td>
        </tr>
        <tr>
          <td> VatElectronicSpecialInvoice </td>
          <td> 增值税电子专用发票 </td>
          <td> 3 </td>
        </tr>
        <tr>
          <td> VatElectronicInvoiceBlockchain</td>
          <td> 区块链电子发票 </td>
          <td> 3 </td>
        </tr>
        <tr>
          <td> VatElectronicInvoiceToll</td>
          <td> 增值税电子普通发票(通行费)</td>
          <td> 3 </td>
        </tr>
        <tr>
          <td> VatSalesList</td>
          <td> 增值税销货清单</td>
          <td> 3 </td>
        </tr>
        <tr>
          <td> VatElectronicSpecialInvoiceFull</td>
          <td> 电子发票(专用发票)</td>
          <td> 16 </td>
        </tr>
        <tr>
          <td> VatElectronicInvoiceFull</td>
          <td> 电子发票(普通发票) </td>
          <td> 16 </td>
        </tr>
         <tr>
          <td> ElectronicFlightTicketFull</td>
          <td> 电子发票(机票行程单)</td>
          <td> 16 </td>
        </tr>
         <tr>
          <td> ElectronicTrainTicketFull</td>
          <td> 电子发票(铁路电子客票)</td>
          <td> 16 </td>
        </tr>
        <tr>
          <td> MotorVehicleSaleInvoice </td>
          <td> 机动车销售统一发票 </td>
          <td> 12 </td>
        </tr>
        <tr>
          <td> UsedCarPurchaseInvoice </td>
          <td> 二手车销售统一发票 </td>
          <td> 12 </td>
        </tr>
        <tr>
          <td> VatInvoiceRoll </td>
          <td> 增值税普通发票(卷票) </td>
          <td> 11 </td>
        </tr>
        <tr>
          <td> TaxiTicket </td>
          <td> 出租车发票 </td>
          <td> 0 </td>
        </tr>
        <tr>
          <td> QuotaInvoice </td>
          <td> 定额发票 </td>
          <td> 1 </td>
        </tr>
        <tr>
          <td> TrainTicket </td>
          <td> 火车票 </td>
          <td> 2 </td>
        </tr>
        <tr>
          <td> AirTransport </td>
          <td> 机票行程单 </td>
          <td> 5 </td>
        </tr>
        <tr>
          <td> MachinePrintedInvoice </td>
          <td> 通用机打发票 </td>
          <td> 8 </td>
        </tr>
        <tr>
          <td> BusInvoice </td>
          <td> 汽车票 </td>
          <td> 9 </td>
        </tr>
        <tr>
          <td> ShippingInvoice </td>
          <td> 轮船票 </td>
          <td> 10 </td>
        </tr>
        <tr>
          <td> NonTaxIncomeGeneralBill </td>
          <td> 非税收入通用票据 </td>
          <td> 15 </td>
        </tr>
        <tr>
          <td> NonTaxIncomeElectronicBill </td>
          <td> 非税收入一般缴款书(电子) </td>
          <td> 15 </td>
        </tr>
        <tr>
          <td> TollInvoice </td>
          <td> 过路过桥费发票 </td>
          <td> 13 </td>
        </tr>
        <tr>
          <td> MedicalOutpatientInvoice </td>
          <td> 医疗门诊收费票据（电子） </td>
          <td> 17 </td>
        </tr>
        <tr>
          <td> MedicalHospitalizedInvoice </td>
          <td> 医疗住院收费票据（电子） </td>
          <td> 17 </td>
        </tr>
        <tr>
          <td> OtherInvoice </td>
          <td> 其他发票 </td>
          <td> -1 </td>
        </tr>
      </tbody>
    </table>
     */
    async RecognizeGeneralInvoice(req, cb) {
        return this.request("RecognizeGeneralInvoice", req, cb);
    }
    /**
     * 本接口支持病案首页、费用清单、结算单、医疗发票四种保险理赔单据的文本识别和结构化输出。

默认接口请求频率限制：1次/秒。
     */
    async InsuranceBillOCR(req, cb) {
        return this.request("InsuranceBillOCR", req, cb);
    }
    /**
     * 本接口支持增值税发票的准确性核验，您可以通过输入增值税发票的关键字段提供所需的验证信息，接口返回真实的票面相关信息，包括发票代码、发票号码、开票日期、金额、消费类型、购方名称、购方税号、销方名称、销方税号等多个常用字段。支持多种发票类型核验，包括增值税专用发票、增值税普通发票（含电子普通发票、卷式发票、通行费发票）、全电发票、机动车销售统一发票、货物运输业增值税专用发票、二手车销售统一发票、通用机打电子发票（广东和浙江）。

默认接口请求频率限制：20次/秒。
     */
    async VatInvoiceVerifyNew(req, cb) {
        return this.request("VatInvoiceVerifyNew", req, cb);
    }
    /**
     * 本接口支持图片内车辆识别代号（VIN）的检测和识别。
默认接口请求频率限制：10次/秒。
     */
    async VinOCR(req, cb) {
        return this.request("VinOCR", req, cb);
    }
    /**
     * 本接口支持行驶证主页和副页所有字段的自动定位与识别。

行驶证主页：车牌号码、车辆类型、所有人、住址、使用性质、品牌型号、识别代码、发动机号、注册日期、发证日期、发证单位。

行驶证副页：号牌号码、档案编号、核定载人数、总质量、整备质量、核定载质量、外廓尺寸、准牵引总质量、备注、检验记录。

另外，本接口还支持复印件、翻拍告警功能。

默认接口请求频率限制：10次/秒。
     */
    async VehicleLicenseOCR(req, cb) {
        return this.request("VehicleLicenseOCR", req, cb);
    }
    /**
     * 本接口支持快速精准识别营业执照上的字段，包括统一社会信用代码、公司名称、主体类型、法定代表人、注册资本、组成形式、成立日期、营业期限和经营范围等字段。

默认接口请求频率限制：10次/秒。
     */
    async BizLicenseOCR(req, cb) {
        return this.request("BizLicenseOCR", req, cb);
    }
    /**
     * 智慧表单产品已下线，需要下线相关API

支持查询智能表单录入任务的状态。本产品免费公测中，您可以点击demo（超链接：https://ocr.smartform.cloud.tencent.com/）试用，如需购买请与商务团队联系。
     */
    async GetTaskState(req, cb) {
        return this.request("GetTaskState", req, cb);
    }
    /**
     * 本接口支持图像整体文字的检测和识别。可以识别中文、英文、中英文、日语、韩语、西班牙语、法语、德语、葡萄牙语、越南语、马来语、俄语、意大利语、荷兰语、瑞典语、芬兰语、丹麦语、挪威语、匈牙利语、泰语，阿拉伯语20种语言，且各种语言均支持与英文混合的文字识别。

适用于印刷文档识别、网络图片识别、广告图文字识别、街景店招牌识别、菜单识别、视频标题识别、头像文字识别等场景。

产品优势：支持自动识别语言类型，可返回文本框坐标信息，对于倾斜文本支持自动旋转纠正。

通用印刷体识别不同版本的差异如下：
<table style="width:715px">
      <thead>
        <tr>
          <th style="width:150px"></th>
          <th style="width:200px">【荐】通用印刷体识别</th>
          <th ><a href="https://cloud.tencent.com/document/product/866/34937">【荐】通用印刷体识别（高精度版）</a></th>
          <th><a href="https://cloud.tencent.com/document/product/866/37831">通用印刷体识别（精简版）</a></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td> 适用场景</td>
          <td>适用于所有通用场景的印刷体识别</td>
          <td>适用于文字较多、长串数字、小字、模糊字、倾斜文本等困难场景</td>
          <td>适用于快速文本识别场景，准召率有一定损失，价格更优惠</td>
        </tr>
        <tr>
          <td>识别准确率</td>
          <td>96%</td>
          <td>99%</td>
          <td>91%</td>
        </tr>
        <tr>
          <td>价格</td>
          <td>中</td>
          <td>高</td>
          <td>低</td>
        </tr>
        <tr>
          <td>支持的语言</td>
          <td>中文、英文、中英文、日语、韩语、西班牙语、法语、德语、葡萄牙语、越南语、马来语、俄语、意大利语、荷兰语、瑞典语、芬兰语、丹麦语、挪威语、匈牙利语、泰语</td>
          <td>中文、英文、中英文</td>
          <td>中文、英文、中英文</td>
        </tr>
        <tr>
          <td>自动语言检测</td>
          <td>支持</td>
          <td>支持</td>
          <td>支持</td>
        </tr>
        <tr>
          <td>返回文本行坐标</td>
          <td>支持</td>
          <td>支持</td>
          <td>支持</td>
        </tr>
        <tr>
          <td>自动旋转纠正</td>
          <td>支持旋转识别，返回角度信息</td>
          <td>支持旋转识别，返回角度信息</td>
          <td>支持旋转识别，返回角度信息</td>
        </tr>
      </tbody>
    </table>

默认接口请求频率限制：20次/秒。
     */
    async GeneralBasicOCR(req, cb) {
        return this.request("GeneralBasicOCR", req, cb);
    }
    /**
     * 本接口支持 单张、多张、多类型 票据的混合识别，同时支持自选需要识别的票据类型，已支持票种包括：增值税发票（专票、普票、卷票）、全电发票、非税发票、定额发票、通用机打发票、购车发票、火车票、出租车发票、机票行程单、汽车票、轮船票、过路过桥费发票共14种标准报销发票，并支持其他类发票的识别。

默认接口请求频率限制：5次/秒。
     */
    async MixedInvoiceOCR(req, cb) {
        return this.request("MixedInvoiceOCR", req, cb);
    }
    /**
     * <b>此接口为表格识别的旧版本服务，不再进行服务升级，建议您使用识别能力更强、服务性能更优的<a href="https://cloud.tencent.com/document/product/866/49525">新版表格识别</a>。</b>

本接口支持图片内表格文档的检测和识别，返回每个单元格的文字内容，支持将识别结果保存为 Excel 格式。

默认接口请求频率限制：10次/秒。
     */
    async TableOCR(req, cb) {
        return this.request("TableOCR", req, cb);
    }
    /**
     * 本接口支持作业算式题目的自动识别和判分，目前覆盖 K12 学力范围内的 11 种题型，包括加减乘除四则、加减乘除已知结果求运算因子、判断大小、约等于估算、带余数除法、分数四则运算、单位换算、竖式加减法、竖式乘除法、脱式计算和解方程，平均识别精度达到93%以上。

默认接口请求频率限制：10次/秒。
     */
    async ArithmeticOCR(req, cb) {
        return this.request("ArithmeticOCR", req, cb);
    }
    /**
     * 本接口支持不动产权证关键字段的识别，包括使用期限、面积、用途、权利性质、权利类型、坐落、共有情况、权利人、权利其他状况等。

默认接口请求频率限制：5次/秒。
     */
    async EstateCertOCR(req, cb) {
        return this.request("EstateCertOCR", req, cb);
    }
    /**
     * 本接口支持二代身份证、临时身份证、港澳台居住证、外国人永久居留证，字段内容识别功能，包括姓名、性别、民族、出生、出生日期、住址、公民身份号码、签发机关、有效期限、国籍、通行证号码、持证人持有号码；支持返回证件类型；支持翻拍、复印、边框不完整、遮挡、字段级反光和字段级完整性告警；支持卡片主体框裁剪和头像裁剪。

默认接口请求频率限制：20次/秒。
     */
    async RecognizeValidIDCardOCR(req, cb) {
        return this.request("RecognizeValidIDCardOCR", req, cb);
    }
    /**
     * 本接口支持对中国大陆主流银行卡正反面关键字段的检测与识别，包括卡号、卡类型、卡名字、银行信息、有效期。支持竖排异形卡识别、多角度旋转图片识别。支持对复印件、翻拍件、边框遮挡的银行卡进行告警，可应用于各种银行卡信息有效性校验场景，如金融行业身份认证、第三方支付绑卡等场景。

默认接口请求频率限制：10次/秒。
     */
    async BankCardOCR(req, cb) {
        return this.request("BankCardOCR", req, cb);
    }
    /**
     * 已上线VatInvoiceVerifyNew，VatInvoiceVerify需要下线，产品在官网已发通告

本接口支持增值税发票的准确性核验，您可以通过输入增值税发票的关键字段提供所需的验证信息，接口返回真实的票面相关信息，包括发票代码、发票号码、开票日期、金额、消费类型、购方名称、购方税号、销方名称、销方税号等多个常用字段。支持多种发票类型核验，包括增值税专用发票、增值税普通发票（含电子普通发票、卷式发票、通行费发票）、全电发票、机动车销售统一发票、货物运输业增值税专用发票、二手车销售统一发票。

默认接口请求频率限制：20次/秒。
     */
    async VatInvoiceVerify(req, cb) {
        return this.request("VatInvoiceVerify", req, cb);
    }
    /**
     * 获取ocr的token值
     */
    async GetOCRToken(req, cb) {
        return this.request("GetOCRToken", req, cb);
    }
    /**
     * 本接口支持数学试题内容的识别和结构化输出，包括通用文本解析和小学/初中/高中数学公式解析能力（包括91种题型，180种符号），公式返回格式为 Latex 格式文本。

默认接口请求频率限制：5次/秒。
     */
    async EduPaperOCR(req, cb) {
        return this.request("EduPaperOCR", req, cb);
    }
    /**
     * 本接口支持智能化识别各类企业登记证书、许可证书、企业执照、三证合一类证书，结构化输出统一社会信用代码、公司名称、法定代表人、公司地址、注册资金、企业类型、经营范围、成立日期、有效期、开办资金、经费来源、举办单位等关键字段。

默认接口请求频率限制：5次/秒。
     */
    async EnterpriseLicenseOCR(req, cb) {
        return this.request("EnterpriseLicenseOCR", req, cb);
    }
    /**
     * 本接口支持中英文名片各字段的自动定位与识别，包含姓名、电话、手机号、邮箱、公司、部门、职位、网址、地址、QQ、微信、MSN等。

默认接口请求频率限制：10次/秒。
     */
    async BusinessCardOCR(req, cb) {
        return this.request("BusinessCardOCR", req, cb);
    }
    /**
     * 本接口支持中国大陆居民二代身份证正反面所有字段的识别，包括姓名、性别、民族、出生日期、住址、公民身份证号、签发机关、有效期限，识别准确度达到99%以上。

另外，本接口还支持多种扩展能力，满足不同场景的需求。如身份证照片、人像照片的裁剪功能，同时具备8种告警功能，如下表所示。

<table style="width:650px">
      <thead>
        <tr>
       <th width="150">扩展能力</th>
          <th width="500">能力项</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td rowspan="2">裁剪功能</td>
          <td>身份证照片裁剪（去掉证件外多余的边缘、自动矫正拍摄角度）</td>
        </tr>
        <tr>
          <td>人像照片裁剪（自动抠取身份证头像区域）</td>
        </tr>
        <tr>
          <td rowspan="9">告警功能</td>
          <td>身份证有效日期不合法，即有效日期不符合5年、10年、20年、长期期限

</td>
        </tr>
        <tr>
          <td>身份证边框不完整告警</td>
        </tr>
        <tr>
          <td>身份证复印件告警</td>
        </tr>
        <tr>
          <td>身份证翻拍告警</td>
        </tr>
          <tr>
          <td>身份证框内遮挡告警</td>
        </tr>
         <tr>
          <td>临时身份证告警</td>
        </tr>
         <tr>
          <td>身份证疑似存在PS痕迹告警</td>
        </tr>
          <tr>
          <td>图片模糊告警（可根据图片质量分数判断）</td>
        </tr>
      </tbody>
    </table>

默认接口请求频率限制：20次/秒。
     */
    async IDCardOCR(req, cb) {
        return this.request("IDCardOCR", req, cb);
    }
    /**
     * 本接口支持多种类型证件有效性检测告警，包括卡证复印件告警、卡证翻拍告警等功能。可以应用于各种证件信息有效性校验场景，例如银行开户、用户注册等场景。
     */
    async RecognizeGeneralTextImageWarn(req, cb) {
        return this.request("RecognizeGeneralTextImageWarn", req, cb);
    }
    /**
     * 本接口支持事业单位法人证书关键字段识别，包括注册号、有效期、住所、名称、法定代表人等。

默认接口请求频率限制：5次/秒。
     */
    async InstitutionOCR(req, cb) {
        return this.request("InstitutionOCR", req, cb);
    }
    /**
     * 本接口支持智能提取各类证照、票据、表单、合同等结构化场景的key:value字段信息，并支持提取表格信息的key:value组的结构化，灵活高效，适用于各类非标准材料的信息录入场景，点击[立即体验](https://ocrdemo.cloud.tencent.com/)。

默认接口请求频率限制：5次/秒。
     */
    async SmartStructuralOCRV2(req, cb) {
        return this.request("SmartStructuralOCRV2", req, cb);
    }
    /**
     * 本接口支持中英文图片/PDF内常规表格、无线表格、多表格的检测和识别，返回每个单元格的文字内容，支持旋转的表格图片识别，且支持将识别结果保存为 Excel 格式。识别效果比表格识别V2更好，覆盖场景更加广泛，对表格难例场景，如无线表格、嵌套表格（有线表格中包含无线表格）的识别效果均优于表格识别V2。

默认接口请求频率限制：2次/秒。
     */
    async RecognizeTableAccurateOCR(req, cb) {
        return this.request("RecognizeTableAccurateOCR", req, cb);
    }
    /**
     * 本接口支持多张、多类型票据的混合检测和自动分类，返回对应票据类型。目前已支持增值税发票、增值税发票（卷票）、定额发票、通用机打发票、购车发票、火车票、出租车发票、机票行程单、汽车票、轮船票、过路过桥费发票、酒店账单、客运限额发票、购物小票、完税证明共15种票据。
默认接口请求频率限制：5次/秒。
     */
    async MixedInvoiceDetect(req, cb) {
        return this.request("MixedInvoiceDetect", req, cb);
    }
    /**
     * 本接口支持对增值税发票（卷票）关键字段的识别，包括的发票代码、合计金额(小写)、合计金额(大写)、开票日期、发票号码、购买方识别号、销售方识别号、校验码、销售方名称、购买方名称、发票消费类型、省、市、是否有公司印章、单价、金额、数量、服务类型、品名、种类等。

默认接口请求频率限制：5次/秒。
     */
    async VatRollInvoiceOCR(req, cb) {
        return this.request("VatRollInvoiceOCR", req, cb);
    }
    /**
     * 本接口支持定额发票的发票号码、发票代码、金额(大小写)、发票消费类型、地区及是否有公司印章等关键字段的识别。

默认接口请求频率限制：5次/秒。
     */
    async QuotaInvoiceOCR(req, cb) {
        return this.request("QuotaInvoiceOCR", req, cb);
    }
    /**
     * 本接口支持图片内手写体文字的检测和识别，针对手写字体无规则、字迹潦草、模糊等特点进行了识别能力的增强。

默认接口请求频率限制：10次/秒。
     */
    async GeneralHandwritingOCR(req, cb) {
        return this.request("GeneralHandwritingOCR", req, cb);
    }
    /**
     * 本接口支持网约车行程单关键字段的识别，包括行程起止日期、上车时间、起点、终点、里程、金额等字段。

默认接口请求频率限制：20次/秒。
     */
    async RecognizeOnlineTaxiItineraryOCR(req, cb) {
        return this.request("RecognizeOnlineTaxiItineraryOCR", req, cb);
    }
    /**
     * 本接口支持中英文图片/ PDF内常规表格、无线表格、多表格的检测和识别，支持日文有线表格识别，返回每个单元格的文字内容，支持旋转的表格图片识别，且支持将识别结果保存为 Excel 格式。

默认接口请求频率限制：10次/秒。
     */
    async RecognizeTableOCR(req, cb) {
        return this.request("RecognizeTableOCR", req, cb);
    }
    /**
     * 智慧表单产品已下线，需要下线相关API

本接口可创建智能表单录入任务，支持多个识别图片和PDF的URL上传，返回含有识别内容的操作页面URL。

智能表单录入产品提供高准确率的表单识别技术和人工核对工具，支持自定义字段，将识别结果自动填入到自定义条目中，并提供人工操作工具，完成整个表单识别过程。适用性强，可对票据、合同、货单等文件的识别，适用于金融、货代、保险、档案等领域。本产品免费公测中，您可以点击demo（超链接：https://ocr.smartform.cloud.tencent.com/）试用，如需购买请与商务团队联系。
     */
    async CreateAIFormTask(req, cb) {
        return this.request("CreateAIFormTask", req, cb);
    }
    /**
     * 本接口支持市面上主流版式电子运单的识别，包括收件人和寄件人的姓名、电话、地址以及运单号等字段。

默认接口请求频率限制：10次/秒。
     */
    async WaybillOCR(req, cb) {
        return this.request("WaybillOCR", req, cb);
    }
    /**
     * 港澳台居住证OCR支持港澳台居住证正反面全字段内容检测识别功能，包括姓名、性别、出生日期、地址、身份证号、签发机关、有效期限、签发次数、通行证号码关键字段识别。可以应用于港澳台居住证信息识别场景，例如银行开户、用户注册等。

默认接口请求频率限制：20次/秒。
     */
    async HmtResidentPermitOCR(req, cb) {
        return this.request("HmtResidentPermitOCR", req, cb);
    }
    /**
     * 本接口支持过路过桥费发票关键字段的识别，包括发票代码、发票号码、日期、金额、入口、出口、时间、发票消费类型、高速标志等。

默认接口请求频率限制：5次/秒。
     */
    async TollInvoiceOCR(req, cb) {
        return this.request("TollInvoiceOCR", req, cb);
    }
    /**
     * 支持身份证、护照、名片、银行卡、行驶证、驾驶证、港澳台通行证、户口本、港澳台来往内地通行证、港澳台居住证、不动产证、营业执照的智能分类。

默认接口请求频率限制：20次/秒。
     */
    async ClassifyDetectOCR(req, cb) {
        return this.request("ClassifyDetectOCR", req, cb);
    }
    /**
     * 公式识别是教育的基础OCR识别能力，可支持理科（数学、物理、化学、生物）的印刷体和手写体的公式识别。

默认接口请求频率限制：2次/秒。
     */
    async RecognizeFormulaOCR(req, cb) {
        return this.request("RecognizeFormulaOCR", req, cb);
    }
    /**
     * 本接口支持各类印章主体内容、印章其他内容及形状识别，支持单图多印章识别，包括发票章、财务章等，适用于公文票据等场景。

默认接口请求频率限制：5次/秒。
     */
    async SealOCR(req, cb) {
        return this.request("SealOCR", req, cb);
    }
    /**
     * 本接口支持银行回单全字段的识别，包括付款开户行、收款开户行、付款账号、收款账号、回单类型、回单编号、币种、流水号、凭证号码、交易机构、交易金额、手续费、日期等字段信息。

默认接口请求频率限制：10次/秒。
     */
    async BankSlipOCR(req, cb) {
        return this.request("BankSlipOCR", req, cb);
    }
    /**
     * 本接口支持居民户口簿户主页及成员页关键字段的识别，包括姓名、户别、地址、籍贯、身份证号码等。

默认接口请求频率限制：5次/秒。
     */
    async ResidenceBookletOCR(req, cb) {
        return this.request("ResidenceBookletOCR", req, cb);
    }
    /**
     * 本接口支持通信大数据行程卡识别，包括行程卡颜色、更新时间、途经地、存在中高风险地区的城市、电话号码，五个字段的识别结果输出。

默认接口请求频率限制：20次/秒。
     */
    async RecognizeTravelCardOCR(req, cb) {
        return this.request("RecognizeTravelCardOCR", req, cb);
    }
    /**
     * 本接口支持OFD格式的 增值税电子普通发票、增值税电子专用发票、电子发票（普通发票）、电子发票（增值税专用发票）、电子发票（铁路电子客票）、电子发票（航空运输电子客票行程单）识别，返回发票代码、发票号码、开票日期、验证码、机器编号、密码区，购买方和销售方信息，包括名称、纳税人识别号、地址电话、开户行及账号，以及价税合计、开票人、收款人、复核人、税额、不含税金额等字段信息。
     */
    async VerifyOfdVatInvoiceOCR(req, cb) {
        return this.request("VerifyOfdVatInvoiceOCR", req, cb);
    }
    /**
     * 本接口支持驾驶证主页和副页所有字段的自动定位与识别，重点字段的识别准确度达到99%以上。

驾驶证主页：包括证号、姓名、性别、国籍、住址、出生日期、初次领证日期、准驾车型、有效期限、发证单位

驾驶证副页：包括证号、姓名、档案编号、记录。

另外，本接口还支持复印件、翻拍告警功能。同时支持识别交管12123 APP发放的电子驾驶证正页。

电子驾驶证正页：包括证号、姓名、性别、国籍、出生日期、初次领证日期、准驾车型、有效期开始时间、有效期截止时间、档案编号、状态、累积记分。

默认接口请求频率限制：10次/秒。
     */
    async DriverLicenseOCR(req, cb) {
        return this.request("DriverLicenseOCR", req, cb);
    }
    /**
     * 本接口支持常见银行票据的自动分类和识别。整单识别包括支票（含现金支票、普通支票、转账支票），承兑汇票（含银行承兑汇票、商业承兑汇票）以及进账单等，适用于中国人民银行印发的 2010 版银行票据凭证版式（银发[2010]299 号）。

默认接口请求频率限制：5次/秒。
     */
    async FinanBillOCR(req, cb) {
        return this.request("FinanBillOCR", req, cb);
    }
    /**
     * 本接口支持智能提取各类证照、票据、表单、合同等结构化场景的key:value字段信息，并支持提取表格信息的key:value组的结构化，灵活高效，适用于各类非标准材料的信息录入场景，点击[立即体验](https://ocrdemo.cloud.tencent.com/)。

默认接口请求频率限制：5次/秒。
     */
    async SmartStructuralPro(req, cb) {
        return this.request("SmartStructuralPro", req, cb);
    }
    /**
     * 本接口支持北京、上海、广东、江苏、吉林、黑龙江、天津、辽宁、浙江、河南、四川、贵州、山东、安徽、福建、江西、湖北、湖南等省份健康码的识别，包括持码人姓名、持码人身份证号、健康码更新时间、健康码颜色、核酸检测结果、核酸检测间隔时长、核酸检测时间，疫苗接种信息，八个字段的识别结果输出。不同省市健康码显示的字段信息有所不同，上述字段的识别结果可能为空，以图片上具体展示的信息为准。

默认接口请求频率限制：10次/秒。
     */
    async RecognizeHealthCodeOCR(req, cb) {
        return this.request("RecognizeHealthCodeOCR", req, cb);
    }
    /**
     * 文本图像增强是面向文档类图片提供的图像增强处理能力，包括切边增强、图像矫正、阴影去除、摩尔纹去除等；可以有效优化文档类的图片质量，提升文字的清晰度。

默认接口请求频率限制：10次/秒。
     */
    async ImageEnhancement(req, cb) {
        return this.request("ImageEnhancement", req, cb);
    }
    /**
     * 试卷切题识别可将整页练习册、试卷或教辅中的题目进行自动切题，并识别出其中的文字内容和坐标位置。

默认接口请求频率限制：2次/秒。
     */
    async QuestionSplitOCR(req, cb) {
        return this.request("QuestionSplitOCR", req, cb);
    }
    /**
     * 本接口支持马来西亚身份证识别，识别字段包括身份证号、姓名、性别、地址；具备身份证人像照片的裁剪功能和翻拍、复印件告警功能。
本接口暂未完全对外开放，如需咨询，请[联系商务](https://cloud.tencent.com/about/connect)
     */
    async MLIDCardOCR(req, cb) {
        return this.request("MLIDCardOCR", req, cb);
    }
    /**
     * 医疗发票识别目前支持全国统一门诊发票、全国统一住院发票、以及部分地方的门诊和住院发票的识别。

默认接口请求频率限制：5次/秒。
     */
    async RecognizeMedicalInvoiceOCR(req, cb) {
        return this.request("RecognizeMedicalInvoiceOCR", req, cb);
    }
    /**
     * 本接口支持图片中整体文字的检测和识别，返回文字框位置与文字内容。相比通用印刷体识别接口，识别速度更快。

默认接口请求频率限制：10次/秒。
     */
    async GeneralFastOCR(req, cb) {
        return this.request("GeneralFastOCR", req, cb);
    }
    /**
     * 本接口支持增值税专用发票、增值税普通发票、增值税电子专票、增值税电子普票、电子发票（普通发票）、电子发票（增值税专用发票）全字段的内容检测和识别，包括发票代码、发票号码、打印发票代码、打印发票号码、开票日期、合计金额、校验码、税率、合计税额、价税合计、购买方识别号、复核、销售方识别号、开票人、密码区1、密码区2、密码区3、密码区4、发票名称、购买方名称、销售方名称、服务名称、备注、规格型号、数量、单价、金额、税额、收款人等字段，点击[立即试用](https://cloud.tencent.com/product/ocr)。

默认接口请求频率限制：10次/秒。
     */
    async VatInvoiceOCR(req, cb) {
        return this.request("VatInvoiceOCR", req, cb);
    }
    /**
     * 本接口支持对完税证明的税号、纳税人识别号、纳税人名称、金额合计大写、金额合计小写、填发日期、税务机关、填票人等关键字段的识别。

默认接口请求频率限制：5次/秒。
     */
    async DutyPaidProofOCR(req, cb) {
        return this.request("DutyPaidProofOCR", req, cb);
    }
    /**
     * 本接口支持组织机构代码证关键字段的识别，包括代码、有效期、地址、机构名称等。

默认接口请求频率限制：5次/秒。
     */
    async OrgCodeCertOCR(req, cb) {
        return this.request("OrgCodeCertOCR", req, cb);
    }
    /**
     * 本接口支持常见银行票据的自动分类和识别。切片识别包括金融行业常见票据的重要切片字段识别，包括金额、账号、日期、凭证号码等。（金融票据切片：金融票据中待识别字段及其周围局部区域的裁剪图像。）

默认接口请求频率限制：5次/秒。
     */
    async FinanBillSliceOCR(req, cb) {
        return this.request("FinanBillSliceOCR", req, cb);
    }
    /**
     * 本接口支持对中国大陆机动车车牌的自动定位和识别，返回地域编号和车牌号码与车牌颜色信息。

默认接口请求频率限制：10次/秒。
     */
    async LicensePlateOCR(req, cb) {
        return this.request("LicensePlateOCR", req, cb);
    }
    /**
     * 本接口支持图像整体文字的检测和识别。支持中文、英文、中英文、数字和特殊字符号的识别，并返回文字框位置和文字内容。

适用于快速文本识别场景。

产品优势：与通用印刷体识别接口相比，精简版虽然在准确率和召回率上有一定损失，但价格更加优惠。

通用印刷体识别不同版本的差异如下：
<table style="width:715px">
      <thead>
        <tr>
          <th style="width:150px"></th>
          <th >通用印刷体识别（精简版）</th>
          <th style="width:200px"><a href="https://cloud.tencent.com/document/product/866/33526">【荐】通用印刷体识别</a></th>
          <th><a href="https://cloud.tencent.com/document/product/866/34937">【荐】通用印刷体识别（高精度版）</a></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td> 适用场景</td>
          <td>适用于快速文本识别场景，准召率有一定损失，价格更优惠</td>
          <td>适用于所有通用场景的印刷体识别</td>
          <td>适用于文字较多、长串数字、小字、模糊字、倾斜文本等困难场景</td>
        </tr>
        <tr>
          <td>识别准确率</td>
          <td>91%</td>
          <td>96%</td>
          <td>99%</td>
        </tr>
        <tr>
          <td>价格</td>
          <td>低</td>
          <td>中</td>
          <td>高</td>
        </tr>
        <tr>
          <td>支持的语言</td>
          <td>中文、英文、中英文</td>
          <td>中文、英文、中英文、日语、韩语、西班牙语、法语、德语、葡萄牙语、越南语、马来语、俄语、意大利语、荷兰语、瑞典语、芬兰语、丹麦语、挪威语、匈牙利语、泰语</td>
          <td>中文、英文、中英文</td>
        </tr>
        <tr>
          <td>自动语言检测</td>
          <td>支持</td>
          <td>支持</td>
          <td>支持</td>
        </tr>
        <tr>
          <td>返回文本行坐标</td>
          <td>支持</td>
          <td>支持</td>
          <td>支持</td>
        </tr>
        <tr>
          <td>自动旋转纠正</td>
          <td>支持旋转识别，返回角度信息</td>
          <td>支持旋转识别，返回角度信息</td>
          <td>支持旋转识别，返回角度信息</td>
        </tr>
      </tbody>
    </table>

默认接口请求频率限制：10次/秒。
     */
    async GeneralEfficientOCR(req, cb) {
        return this.request("GeneralEfficientOCR", req, cb);
    }
    /**
     * 本接口支持广告商品图片内文字的检测和识别，返回文本框位置与文字内容。

产品优势：针对广告商品图片普遍存在较多繁体字、艺术字的特点，进行了识别能力的增强。支持中英文、横排、竖排以及倾斜场景文字识别。文字识别的召回率和准确率能达到96%以上。

默认接口请求频率限制：20次/秒。
     */
    async AdvertiseOCR(req, cb) {
        return this.request("AdvertiseOCR", req, cb);
    }
    /**
     * 本接口支持国内机动车登记证书主要字段的结构化识别，包括机动车所有人、身份证明名称、号码、车辆型号、车辆识别代号、发动机号、制造厂名称等。

默认接口请求频率限制：5次/秒。
     */
    async VehicleRegCertOCR(req, cb) {
        return this.request("VehicleRegCertOCR", req, cb);
    }
    /**
     * 本接口支持机动车销售统一发票和二手车销售统一发票的识别，包括发票号码、发票代码、合计金额、合计税额等二十多个字段。

默认接口请求频率限制：5次/秒。
     */
    async CarInvoiceOCR(req, cb) {
        return this.request("CarInvoiceOCR", req, cb);
    }
    /**
     * 获取ocr结果
     */
    async GetOCRResult(req, cb) {
        return this.request("GetOCRResult", req, cb);
    }
    /**
     * 本接口支持识别主流初高中数学符号和公式，返回公式的 Latex 格式文本。

默认接口请求频率限制：5次/秒。
     */
    async FormulaOCR(req, cb) {
        return this.request("FormulaOCR", req, cb);
    }
    /**
     * 本接口支持中国大陆地区护照个人资料页多个字段的检测与识别。已支持字段包括英文姓名、中文姓名、国家码、护照号、出生地、出生日期、国籍英文、性别英文、有效期、签发地点英文、签发日期、持证人签名、护照机读码（MRZ码）等。

默认接口请求频率限制：10次/秒。
     */
    async PassportOCR(req, cb) {
        return this.request("PassportOCR", req, cb);
    }
    /**
     * 本接口支持识别轮船票的发票代码、发票号码、日期、姓名、票价、始发地、目的地、姓名、时间、发票消费类型、省、市、币种字段。

默认接口请求频率限制：5次/秒。
     */
    async ShipInvoiceOCR(req, cb) {
        return this.request("ShipInvoiceOCR", req, cb);
    }
    /**
     * 本接口支持网约车运输证关键字段的识别，包括交运管许可字号、车辆所有人、车辆号牌、起始日期、截止日期、发证日期。

默认接口请求频率限制：5次/秒。
     */
    async RideHailingTransportLicenseOCR(req, cb) {
        return this.request("RideHailingTransportLicenseOCR", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249283, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.omics = void 0;
const v20221128_1 = require("./v20221128");
exports.omics = {
    v20221128: v20221128_1.v20221128,
};

}, function(modId) { var map = {"./v20221128":1738984249284}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249284, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20221128 = void 0;
const Models = require("./omics_models");
const omics_client_1 = require("./omics_client");
exports.v20221128 = {
    Client: omics_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./omics_models":1738984249285,"./omics_client":1738984249286}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249285, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249286, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * omics client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("omics.tencentcloudapi.com", "2022-11-28", clientConfig);
    }
    /**
     * 导入表格文件。
     */
    async ImportTableFile(req, cb) {
        return this.request("ImportTableFile", req, cb);
    }
    /**
     * 查询任务批次列表。
     */
    async DescribeRunGroups(req, cb) {
        return this.request("DescribeRunGroups", req, cb);
    }
    /**
     * 查询表格行数据。
     */
    async DescribeTablesRows(req, cb) {
        return this.request("DescribeTablesRows", req, cb);
    }
    /**
     * 删除缓存卷数据。
     */
    async DeleteVolumeData(req, cb) {
        return this.request("DeleteVolumeData", req, cb);
    }
    /**
     * 查询环境列表。
     */
    async DescribeEnvironments(req, cb) {
        return this.request("DescribeEnvironments", req, cb);
    }
    /**
     * 获取任务详情文件。
     */
    async GetRunMetadataFile(req, cb) {
        return this.request("GetRunMetadataFile", req, cb);
    }
    /**
     * 创建缓存卷。
     */
    async CreateVolume(req, cb) {
        return this.request("CreateVolume", req, cb);
    }
    /**
     * 查询缓存卷列表。
     */
    async DescribeVolumes(req, cb) {
        return this.request("DescribeVolumes", req, cb);
    }
    /**
     * 查询任务详情。
     */
    async GetRunStatus(req, cb) {
        return this.request("GetRunStatus", req, cb);
    }
    /**
     * 运行应用。
     */
    async RunApplication(req, cb) {
        return this.request("RunApplication", req, cb);
    }
    /**
     * 运行工作流。
     */
    async RunWorkflow(req, cb) {
        return this.request("RunWorkflow", req, cb);
    }
    /**
     * 创建组学平台计算环境。
     */
    async CreateEnvironment(req, cb) {
        return this.request("CreateEnvironment", req, cb);
    }
    /**
     * 重试任务。
     */
    async RetryRuns(req, cb) {
        return this.request("RetryRuns", req, cb);
    }
    /**
     * 终止任务批次。
     */
    async TerminateRunGroup(req, cb) {
        return this.request("TerminateRunGroup", req, cb);
    }
    /**
     * 查询任务列表。
     */
    async DescribeRuns(req, cb) {
        return this.request("DescribeRuns", req, cb);
    }
    /**
     * 删除缓存卷。
     */
    async DeleteVolume(req, cb) {
        return this.request("DeleteVolume", req, cb);
    }
    /**
     * 修改缓存卷。
     */
    async ModifyVolume(req, cb) {
        return this.request("ModifyVolume", req, cb);
    }
    /**
     * 删除环境。
     */
    async DeleteEnvironment(req, cb) {
        return this.request("DeleteEnvironment", req, cb);
    }
    /**
     * 查询表格。
     */
    async DescribeTables(req, cb) {
        return this.request("DescribeTables", req, cb);
    }
    /**
     * 查询作业详情。
     */
    async GetRunCalls(req, cb) {
        return this.request("GetRunCalls", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249287, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.organization = void 0;
const v20181225_1 = require("./v20181225");
const v20210331_1 = require("./v20210331");
exports.organization = {
    v20181225: v20181225_1.v20181225,
    v20210331: v20210331_1.v20210331,
};

}, function(modId) { var map = {"./v20181225":1738984249288,"./v20210331":1738984249291}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249288, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20181225 = void 0;
const Models = require("./organization_models");
const organization_client_1 = require("./organization_client");
exports.v20181225 = {
    Client: organization_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./organization_models":1738984249289,"./organization_client":1738984249290}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249289, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249290, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * organization client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("organization.tencentcloudapi.com", "2018-12-25", clientConfig);
    }
    /**
     * 拒绝企业组织邀请
     */
    async DenyOrganizationInvitation(req, cb) {
        return this.request("DenyOrganizationInvitation", req, cb);
    }
    /**
     * 获取邀请信息列表
     */
    async ListOrganizationInvitations(req, cb) {
        return this.request("ListOrganizationInvitations", req, cb);
    }
    /**
     * 更新企业组织单元
     */
    async UpdateOrganizationNode(req, cb) {
        return this.request("UpdateOrganizationNode", req, cb);
    }
    /**
     * 接受加入企业组织邀请
     */
    async AcceptOrganizationInvitation(req, cb) {
        return this.request("AcceptOrganizationInvitation", req, cb);
    }
    /**
     * 获取企业组织成员
     */
    async GetOrganizationMember(req, cb) {
        return this.request("GetOrganizationMember", req, cb);
    }
    /**
     * 获取企业组织信息
     */
    async GetOrganization(req, cb) {
        return this.request("GetOrganization", req, cb);
    }
    /**
     * 获取企业组织单元列表
     */
    async ListOrganizationNodes(req, cb) {
        return this.request("ListOrganizationNodes", req, cb);
    }
    /**
     * 更新企业成员信息
     */
    async UpdateOrganizationMember(req, cb) {
        return this.request("UpdateOrganizationMember", req, cb);
    }
    /**
     * 退出企业组织
     */
    async QuitOrganization(req, cb) {
        return this.request("QuitOrganization", req, cb);
    }
    /**
     * 批量删除企业组织单元
     */
    async DeleteOrganizationNodes(req, cb) {
        return this.request("DeleteOrganizationNodes", req, cb);
    }
    /**
     * 获取企业组织成员列表
     */
    async ListOrganizationMembers(req, cb) {
        return this.request("ListOrganizationMembers", req, cb);
    }
    /**
     * 删除企业组织成员
     */
    async DeleteOrganizationMemberFromNode(req, cb) {
        return this.request("DeleteOrganizationMemberFromNode", req, cb);
    }
    /**
     * 添加企业组织单元
     */
    async AddOrganizationNode(req, cb) {
        return this.request("AddOrganizationNode", req, cb);
    }
    /**
     * 发送企业组织邀请
     */
    async SendOrganizationInvitation(req, cb) {
        return this.request("SendOrganizationInvitation", req, cb);
    }
    /**
     * 取消企业组织邀请
     */
    async CancelOrganizationInvitation(req, cb) {
        return this.request("CancelOrganizationInvitation", req, cb);
    }
    /**
     * 删除企业组织
     */
    async DeleteOrganization(req, cb) {
        return this.request("DeleteOrganization", req, cb);
    }
    /**
     * 批量删除企业组织成员
     */
    async DeleteOrganizationMembers(req, cb) {
        return this.request("DeleteOrganizationMembers", req, cb);
    }
    /**
     * 获取企业组织单元成员列表
     */
    async ListOrganizationNodeMembers(req, cb) {
        return this.request("ListOrganizationNodeMembers", req, cb);
    }
    /**
     * 创建企业组织
     */
    async CreateOrganization(req, cb) {
        return this.request("CreateOrganization", req, cb);
    }
    /**
     * 移动成员到指定企业组织单元
     */
    async MoveOrganizationMembersToNode(req, cb) {
        return this.request("MoveOrganizationMembersToNode", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249291, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210331 = void 0;
const Models = require("./organization_models");
const organization_client_1 = require("./organization_client");
exports.v20210331 = {
    Client: organization_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./organization_models":1738984249292,"./organization_client":1738984249293}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249292, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249293, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * organization client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("organization.tencentcloudapi.com", "2021-03-31", clientConfig);
    }
    /**
     * 退出企业组织
     */
    async QuitOrganization(req, cb) {
        return this.request("QuitOrganization", req, cb);
    }
    /**
     * 查询用户组中的用户列表
     */
    async ListGroupMembers(req, cb) {
        return this.request("ListGroupMembers", req, cb);
    }
    /**
     * 获取组织成员访问身份列表
     */
    async ListOrganizationIdentity(req, cb) {
        return this.request("ListOrganizationIdentity", req, cb);
    }
    /**
     * 添加企业组织节点
     */
    async AddOrganizationNode(req, cb) {
        return this.request("AddOrganizationNode", req, cb);
    }
    /**
     * 修改绑定成员邮箱
     */
    async UpdateOrganizationMemberEmailBind(req, cb) {
        return this.request("UpdateOrganizationMemberEmailBind", req, cb);
    }
    /**
     * 为权限配置移除策略
     */
    async RemovePermissionPolicyFromRoleConfiguration(req, cb) {
        return this.request("RemovePermissionPolicyFromRoleConfiguration", req, cb);
    }
    /**
     * 启用/禁用SCIM密钥
     */
    async UpdateSCIMCredentialStatus(req, cb) {
        return this.request("UpdateSCIMCredentialStatus", req, cb);
    }
    /**
     * 修改用户信息
     */
    async UpdateUser(req, cb) {
        return this.request("UpdateUser", req, cb);
    }
    /**
     * 添加集团服务委派管理员
     */
    async CreateOrgServiceAssign(req, cb) {
        return this.request("CreateOrgServiceAssign", req, cb);
    }
    /**
     * 查询目标关联的有效策略
     */
    async DescribeEffectivePolicy(req, cb) {
        return this.request("DescribeEffectivePolicy", req, cb);
    }
    /**
     * 查询用户信息
     */
    async GetUser(req, cb) {
        return this.request("GetUser", req, cb);
    }
    /**
     * 开通身份中心服务（CIC）
     */
    async OpenIdentityCenter(req, cb) {
        return this.request("OpenIdentityCenter", req, cb);
    }
    /**
     * 删除用户
     */
    async DeleteUser(req, cb) {
        return this.request("DeleteUser", req, cb);
    }
    /**
     * 查询权限配置信息
     */
    async GetRoleConfiguration(req, cb) {
        return this.request("GetRoleConfiguration", req, cb);
    }
    /**
     * 创建组织成员
     */
    async CreateOrganizationMember(req, cb) {
        return this.request("CreateOrganizationMember", req, cb);
    }
    /**
     * 查询成员邮箱绑定详细信息
     */
    async DescribeOrganizationMemberEmailBind(req, cb) {
        return this.request("DescribeOrganizationMemberEmailBind", req, cb);
    }
    /**
     * 删除共享单元资源
     */
    async DeleteShareUnitResources(req, cb) {
        return this.request("DeleteShareUnitResources", req, cb);
    }
    /**
     * 查询异步任务列表
     */
    async ListTasks(req, cb) {
        return this.request("ListTasks", req, cb);
    }
    /**
     * 从用户组中移除用户
     */
    async RemoveUserFromGroup(req, cb) {
        return this.request("RemoveUserFromGroup", req, cb);
    }
    /**
     * 以产品维度获取组织财务信息
     */
    async DescribeOrganizationFinancialByProduct(req, cb) {
        return this.request("DescribeOrganizationFinancialByProduct", req, cb);
    }
    /**
     * 获取组织节点列表
     */
    async DescribeOrganizationNodes(req, cb) {
        return this.request("DescribeOrganizationNodes", req, cb);
    }
    /**
     * 创建用户
     */
    async CreateUser(req, cb) {
        return this.request("CreateUser", req, cb);
    }
    /**
     * 查询SAML签名证书列表
     */
    async ListExternalSAMLIdPCertificates(req, cb) {
        return this.request("ListExternalSAMLIdPCertificates", req, cb);
    }
    /**
     * 移除SAML签名证书
     */
    async RemoveExternalSAMLIdPCertificate(req, cb) {
        return this.request("RemoveExternalSAMLIdPCertificate", req, cb);
    }
    /**
     * 成员账号删除检查
     */
    async CheckAccountDelete(req, cb) {
        return this.request("CheckAccountDelete", req, cb);
    }
    /**
     * 获取企业组织成员列表
     */
    async DescribeOrganizationMembers(req, cb) {
        return this.request("DescribeOrganizationMembers", req, cb);
    }
    /**
     * 在成员账号上授权
     */
    async CreateRoleAssignment(req, cb) {
        return this.request("CreateRoleAssignment", req, cb);
    }
    /**
     * 创建权限配置
     */
    async CreateRoleConfiguration(req, cb) {
        return this.request("CreateRoleConfiguration", req, cb);
    }
    /**
     * 接受加入共享单元邀请。
     */
    async AcceptJoinShareUnitInvitation(req, cb) {
        return this.request("AcceptJoinShareUnitInvitation", req, cb);
    }
    /**
     * 查询用户列表
     */
    async ListUsers(req, cb) {
        return this.request("ListUsers", req, cb);
    }
    /**
     * 本接口（DescribePolicy）可用于查询查看策略详情。
     */
    async DescribePolicy(req, cb) {
        return this.request("DescribePolicy", req, cb);
    }
    /**
     * 查询SAML身份提供商配置信息
     */
    async GetExternalSAMLIdentityProvider(req, cb) {
        return this.request("GetExternalSAMLIdentityProvider", req, cb);
    }
    /**
     * 清空SAML身份提供商配置信息
     */
    async ClearExternalSAMLIdentityProvider(req, cb) {
        return this.request("ClearExternalSAMLIdentityProvider", req, cb);
    }
    /**
     * 更新组织身份
     */
    async UpdateOrganizationIdentity(req, cb) {
        return this.request("UpdateOrganizationIdentity", req, cb);
    }
    /**
     * 将权限配置部署到成员账号上
     */
    async ProvisionRoleConfiguration(req, cb) {
        return this.request("ProvisionRoleConfiguration", req, cb);
    }
    /**
     * 取消组织成员和组织管理员子账号的授权关系
     */
    async CancelOrganizationMemberAuthAccount(req, cb) {
        return this.request("CancelOrganizationMemberAuthAccount", req, cb);
    }
    /**
     * 以成员维度获取组织财务信息
     */
    async DescribeOrganizationFinancialByMember(req, cb) {
        return this.request("DescribeOrganizationFinancialByMember", req, cb);
    }
    /**
     * 查询用户组信息
     */
    async GetGroup(req, cb) {
        return this.request("GetGroup", req, cb);
    }
    /**
     * 移除成员账号上的授权
     */
    async DeleteRoleAssignment(req, cb) {
        return this.request("DeleteRoleAssignment", req, cb);
    }
    /**
     * 创建组织成员访问策略
     */
    async CreateOrganizationMembersPolicy(req, cb) {
        return this.request("CreateOrganizationMembersPolicy", req, cb);
    }
    /**
     * 移动成员到指定企业组织节点
     */
    async MoveOrganizationNodeMembers(req, cb) {
        return this.request("MoveOrganizationNodeMembers", req, cb);
    }
    /**
     * 更新用户空间名
     */
    async UpdateZone(req, cb) {
        return this.request("UpdateZone", req, cb);
    }
    /**
     * 添加组织身份
     */
    async CreateOrganizationIdentity(req, cb) {
        return this.request("CreateOrganizationIdentity", req, cb);
    }
    /**
     * 添加组织成员邮箱
     */
    async AddOrganizationMemberEmail(req, cb) {
        return this.request("AddOrganizationMemberEmail", req, cb);
    }
    /**
     * 删除共享单元成员
     */
    async DeleteShareUnitMembers(req, cb) {
        return this.request("DeleteShareUnitMembers", req, cb);
    }
    /**
     * 查询用户加入的用户组
     */
    async ListJoinedGroupsForUser(req, cb) {
        return this.request("ListJoinedGroupsForUser", req, cb);
    }
    /**
     * 获取权限配置中的策略列表
     */
    async ListPermissionPoliciesInRoleConfiguration(req, cb) {
        return this.request("ListPermissionPoliciesInRoleConfiguration", req, cb);
    }
    /**
     * 创建共享单元。
     */
    async AddShareUnit(req, cb) {
        return this.request("AddShareUnit", req, cb);
    }
    /**
     * 获取组织成员被绑定授权关系的子账号列表
     */
    async DescribeOrganizationMemberAuthAccounts(req, cb) {
        return this.request("DescribeOrganizationMemberAuthAccounts", req, cb);
    }
    /**
     * 查询权限配置部署列表
     */
    async ListRoleConfigurationProvisionings(req, cb) {
        return this.request("ListRoleConfigurationProvisionings", req, cb);
    }
    /**
     * 添加共享单元成员
     */
    async AddShareUnitMembers(req, cb) {
        return this.request("AddShareUnitMembers", req, cb);
    }
    /**
     * 本接口（DescribePolicyConfig）可用于查询企业组织策略配置
     */
    async DescribePolicyConfig(req, cb) {
        return this.request("DescribePolicyConfig", req, cb);
    }
    /**
     * 编辑策略
     */
    async UpdatePolicy(req, cb) {
        return this.request("UpdatePolicy", req, cb);
    }
    /**
     * 获取共享单元列表。
     */
    async DescribeShareUnits(req, cb) {
        return this.request("DescribeShareUnits", req, cb);
    }
    /**
     * 查询CAM用户同步列表
     */
    async ListUserSyncProvisionings(req, cb) {
        return this.request("ListUserSyncProvisionings", req, cb);
    }
    /**
     * 修改用户状态
     */
    async UpdateUserStatus(req, cb) {
        return this.request("UpdateUserStatus", req, cb);
    }
    /**
     * 禁用策略类型
     */
    async DisablePolicyType(req, cb) {
        return this.request("DisablePolicyType", req, cb);
    }
    /**
     * 创建子用户同步任务
     */
    async CreateUserSyncProvisioning(req, cb) {
        return this.request("CreateUserSyncProvisioning", req, cb);
    }
    /**
     * 为权限配置添加策略
     */
    async AddPermissionPolicyToRoleConfiguration(req, cb) {
        return this.request("AddPermissionPolicyToRoleConfiguration", req, cb);
    }
    /**
     * 删除组织成员访问策略
     */
    async DeleteOrganizationMembersPolicy(req, cb) {
        return this.request("DeleteOrganizationMembersPolicy", req, cb);
    }
    /**
     * 删除策略
     */
    async DeletePolicy(req, cb) {
        return this.request("DeletePolicy", req, cb);
    }
    /**
     * 创建用户组
     */
    async CreateGroup(req, cb) {
        return this.request("CreateGroup", req, cb);
    }
    /**
     * 获取共享单元成员列表。
     */
    async DescribeShareUnitMembers(req, cb) {
        return this.request("DescribeShareUnitMembers", req, cb);
    }
    /**
     * 解除权限配置在成员账号上的部署
     */
    async DismantleRoleConfiguration(req, cb) {
        return this.request("DismantleRoleConfiguration", req, cb);
    }
    /**
     * 删除共享单元。
     */
    async DeleteShareUnit(req, cb) {
        return this.request("DeleteShareUnit", req, cb);
    }
    /**
     * 从组织中移除成员账号，不会删除账号。
     */
    async DeleteOrganizationMembers(req, cb) {
        return this.request("DeleteOrganizationMembers", req, cb);
    }
    /**
     * 获取集团服务委派管理员列表
     */
    async ListOrgServiceAssignMember(req, cb) {
        return this.request("ListOrgServiceAssignMember", req, cb);
    }
    /**
     * 拒绝加入共享单元邀请。
     */
    async RejectJoinShareUnitInvitation(req, cb) {
        return this.request("RejectJoinShareUnitInvitation", req, cb);
    }
    /**
     * 获取成员标签检测不合规资源列表
     */
    async ListNonCompliantResource(req, cb) {
        return this.request("ListNonCompliantResource", req, cb);
    }
    /**
     * 删除用户组
     */
    async DeleteGroup(req, cb) {
        return this.request("DeleteGroup", req, cb);
    }
    /**
     * 获取SCIM同步状态
     */
    async GetSCIMSynchronizationStatus(req, cb) {
        return this.request("GetSCIMSynchronizationStatus", req, cb);
    }
    /**
     * 配置SAML身份提供商信息
     */
    async SetExternalSAMLIdentityProvider(req, cb) {
        return this.request("SetExternalSAMLIdentityProvider", req, cb);
    }
    /**
     * 删除企业组织
     */
    async DeleteOrganization(req, cb) {
        return this.request("DeleteOrganization", req, cb);
    }
    /**
     * 本接口（ListPoliciesForTarget）查询目标关联的策略列表
     */
    async ListPoliciesForTarget(req, cb) {
        return this.request("ListPoliciesForTarget", req, cb);
    }
    /**
     * 删除SCIM密钥
     */
    async DeleteSCIMCredential(req, cb) {
        return this.request("DeleteSCIMCredential", req, cb);
    }
    /**
     * 创建子用户同步任务
     */
    async UpdateUserSyncProvisioning(req, cb) {
        return this.request("UpdateUserSyncProvisioning", req, cb);
    }
    /**
     * 查询CAM用户同步
     */
    async GetUserSyncProvisioning(req, cb) {
        return this.request("GetUserSyncProvisioning", req, cb);
    }
    /**
     * 获取企业组织信息
     */
    async DescribeOrganization(req, cb) {
        return this.request("DescribeOrganization", req, cb);
    }
    /**
     * 启用/禁用用户SCIM同步
     */
    async UpdateSCIMSynchronizationStatus(req, cb) {
        return this.request("UpdateSCIMSynchronizationStatus", req, cb);
    }
    /**
     * 查询用户组列表
     */
    async ListGroups(req, cb) {
        return this.request("ListGroups", req, cb);
    }
    /**
     * 获取共享单元资源列表。
     */
    async DescribeShareUnitResources(req, cb) {
        return this.request("DescribeShareUnitResources", req, cb);
    }
    /**
     * 绑定组织成员和组织管理员子账号的授权关系
     */
    async BindOrganizationMemberAuthAccount(req, cb) {
        return this.request("BindOrganizationMemberAuthAccount", req, cb);
    }
    /**
     * 修改用户组信息
     */
    async UpdateGroup(req, cb) {
        return this.request("UpdateGroup", req, cb);
    }
    /**
     * 创建一个特殊类型的策略，您可以关联到企业组织Root节点、企业部门节点或者企业的成员账号。
     */
    async CreatePolicy(req, cb) {
        return this.request("CreatePolicy", req, cb);
    }
    /**
     * 查询用户同步异步任务的状态
     */
    async GetProvisioningTaskStatus(req, cb) {
        return this.request("GetProvisioningTaskStatus", req, cb);
    }
    /**
     * 更新企业组织节点
     */
    async UpdateOrganizationNode(req, cb) {
        return this.request("UpdateOrganizationNode", req, cb);
    }
    /**
     * 更新共享单元。
     */
    async UpdateShareUnit(req, cb) {
        return this.request("UpdateShareUnit", req, cb);
    }
    /**
     * 更新组织成员信息
     */
    async UpdateOrganizationMember(req, cb) {
        return this.request("UpdateOrganizationMember", req, cb);
    }
    /**
     * 获取已设置管理员的互信主体关系列表
     */
    async DescribeOrganizationAuthNode(req, cb) {
        return this.request("DescribeOrganizationAuthNode", req, cb);
    }
    /**
     * 获取集团账号身份中心服务信息
     */
    async DescribeIdentityCenter(req, cb) {
        return this.request("DescribeIdentityCenter", req, cb);
    }
    /**
     * 创建SCIM密钥
     */
    async CreateSCIMCredential(req, cb) {
        return this.request("CreateSCIMCredential", req, cb);
    }
    /**
     * 获取组织成员访问授权列表
     */
    async DescribeOrganizationMemberAuthIdentities(req, cb) {
        return this.request("DescribeOrganizationMemberAuthIdentities", req, cb);
    }
    /**
     * 重新发送成员绑定邮箱激活邮件
     */
    async SendOrgMemberAccountBindEmail(req, cb) {
        return this.request("SendOrgMemberAccountBindEmail", req, cb);
    }
    /**
     * 查询空间的统计信息
     */
    async GetZoneStatistics(req, cb) {
        return this.request("GetZoneStatistics", req, cb);
    }
    /**
     * 解绑策略
     */
    async DetachPolicy(req, cb) {
        return this.request("DetachPolicy", req, cb);
    }
    /**
     * 查询用户SCIM密钥列表
     */
    async ListSCIMCredentials(req, cb) {
        return this.request("ListSCIMCredentials", req, cb);
    }
    /**
     * 添加组织成员访问授权
     */
    async CreateOrganizationMemberAuthIdentity(req, cb) {
        return this.request("CreateOrganizationMemberAuthIdentity", req, cb);
    }
    /**
     * 以月维度获取组织财务信息趋势
     */
    async DescribeOrganizationFinancialByMonth(req, cb) {
        return this.request("DescribeOrganizationFinancialByMonth", req, cb);
    }
    /**
     * 删除成员账号
     */
    async DeleteAccount(req, cb) {
        return this.request("DeleteAccount", req, cb);
    }
    /**
     * 批量删除企业组织节点
     */
    async DeleteOrganizationNodes(req, cb) {
        return this.request("DeleteOrganizationNodes", req, cb);
    }
    /**
     * 查询授权列表
     */
    async ListRoleAssignments(req, cb) {
        return this.request("ListRoleAssignments", req, cb);
    }
    /**
     * 获取组织成员的授权策略列表
     */
    async DescribeOrganizationMemberPolicies(req, cb) {
        return this.request("DescribeOrganizationMemberPolicies", req, cb);
    }
    /**
     * 删除子用户同步任务
     */
    async DeleteUserSyncProvisioning(req, cb) {
        return this.request("DeleteUserSyncProvisioning", req, cb);
    }
    /**
     * 修改权限配置信息
     */
    async UpdateRoleConfiguration(req, cb) {
        return this.request("UpdateRoleConfiguration", req, cb);
    }
    /**
     * 查询权限配置列表
     */
    async ListRoleConfigurations(req, cb) {
        return this.request("ListRoleConfigurations", req, cb);
    }
    /**
     * 邀请组织成员
     */
    async InviteOrganizationMember(req, cb) {
        return this.request("InviteOrganizationMember", req, cb);
    }
    /**
     * 添加共享单元资源
     */
    async AddShareUnitResources(req, cb) {
        return this.request("AddShareUnitResources", req, cb);
    }
    /**
     * 绑定策略
     */
    async AttachPolicy(req, cb) {
        return this.request("AttachPolicy", req, cb);
    }
    /**
     * 获取可共享地域列表
     */
    async DescribeShareAreas(req, cb) {
        return this.request("DescribeShareAreas", req, cb);
    }
    /**
     * 为用户组添加用户
     */
    async AddUserToGroup(req, cb) {
        return this.request("AddUserToGroup", req, cb);
    }
    /**
     * 删除权限配置信息
     */
    async DeleteRoleConfiguration(req, cb) {
        return this.request("DeleteRoleConfiguration", req, cb);
    }
    /**
     * 创建企业组织
     */
    async CreateOrganization(req, cb) {
        return this.request("CreateOrganization", req, cb);
    }
    /**
     * 添加SAML签名证书
     */
    async AddExternalSAMLIdPCertificate(req, cb) {
        return this.request("AddExternalSAMLIdPCertificate", req, cb);
    }
    /**
     * 删除集团服务委派管理员
     */
    async DeleteOrgServiceAssign(req, cb) {
        return this.request("DeleteOrgServiceAssign", req, cb);
    }
    /**
     * 删除组织身份
     */
    async DeleteOrganizationIdentity(req, cb) {
        return this.request("DeleteOrganizationIdentity", req, cb);
    }
    /**
     * 启用策略类型
     */
    async EnablePolicyType(req, cb) {
        return this.request("EnablePolicyType", req, cb);
    }
    /**
     * 查询SAML服务提供商配置信息
     */
    async GetZoneSAMLServiceProviderInfo(req, cb) {
        return this.request("GetZoneSAMLServiceProviderInfo", req, cb);
    }
    /**
     * 本接口（ListTargetsForPolicy）查询某个指定策略关联的目标列表
     */
    async ListTargetsForPolicy(req, cb) {
        return this.request("ListTargetsForPolicy", req, cb);
    }
    /**
     * 本接口（ListPolicies）可用于查询查看策略列表数据
     */
    async ListPolicies(req, cb) {
        return this.request("ListPolicies", req, cb);
    }
    /**
     * 查询异步任务的状态
     */
    async GetTaskStatus(req, cb) {
        return this.request("GetTaskStatus", req, cb);
    }
    /**
     * 创建组织成员访问授权策略
     */
    async CreateOrganizationMemberPolicy(req, cb) {
        return this.request("CreateOrganizationMemberPolicy", req, cb);
    }
    /**
     * 获取集团服务设置列表
     */
    async ListOrganizationService(req, cb) {
        return this.request("ListOrganizationService", req, cb);
    }
    /**
     * 为权限配置修改自定义策略
     */
    async UpdateCustomPolicyForRoleConfiguration(req, cb) {
        return this.request("UpdateCustomPolicyForRoleConfiguration", req, cb);
    }
    /**
     * 删除组织成员访问授权
     */
    async DeleteOrganizationMemberAuthIdentity(req, cb) {
        return this.request("DeleteOrganizationMemberAuthIdentity", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249294, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.partners = void 0;
const v20180321_1 = require("./v20180321");
exports.partners = {
    v20180321: v20180321_1.v20180321,
};

}, function(modId) { var map = {"./v20180321":1738984249295}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249295, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180321 = void 0;
const Models = require("./partners_models");
const partners_client_1 = require("./partners_client");
exports.v20180321 = {
    Client: partners_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./partners_models":1738984249296,"./partners_client":1738984249297}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249296, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249297, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * partners client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("partners.tencentcloudapi.com", "2018-03-21", clientConfig);
    }
    /**
     * 为代客or申请中代客分派跟进人（业务员），入参可从以下API获取
- 代客列表获取API： [DescribeAgentAuditedClients](https://cloud.tencent.com/document/product/563/19184)
- 申请中代客列表获取API：[DescribeAgentClients](https://cloud.tencent.com/document/product/563/16046)
- 业务员列表获取API：[DescribeSalesmans](https://cloud.tencent.com/document/product/563/35196) <br><br>
     */
    async AssignClientsToSales(req, cb) {
        return this.request("AssignClientsToSales", req, cb);
    }
    /**
     * 查询代理商名下指定代客的自付订单（预付费）
     */
    async DescribeAgentSelfPayDealsV2(req, cb) {
        return this.request("DescribeAgentSelfPayDealsV2", req, cb);
    }
    /**
     * 代理商名下客户解绑记录查询接口
     */
    async DescribeUnbindClientList(req, cb) {
        return this.request("DescribeUnbindClientList", req, cb);
    }
    /**
     * 代理商可以对名下客户添加备注、修改备注
     */
    async ModifyClientRemark(req, cb) {
        return this.request("ModifyClientRemark", req, cb);
    }
    /**
     * 代理商支付订单接口，支持自付/代付
     */
    async AgentPayDeals(req, cb) {
        return this.request("AgentPayDeals", req, cb);
    }
    /**
     * 代理商可查询自己及名下代客所有业务明细
     */
    async DescribeAgentBills(req, cb) {
        return this.request("DescribeAgentBills", req, cb);
    }
    /**
     * 代理商可查询自己名下全部返佣信息
     */
    async DescribeRebateInfosNew(req, cb) {
        return this.request("DescribeRebateInfosNew", req, cb);
    }
    /**
     * 为合作伙伴提供转账给客户能力。仅支持合作伙伴为自己名下客户转账。
     */
    async AgentTransferMoney(req, cb) {
        return this.request("AgentTransferMoney", req, cb);
    }
    /**
     * 【该接口已下线，请切换使用升级版本DescribeRebateInfosNew】代理商可查询自己名下全部返佣信息
     */
    async DescribeRebateInfos(req, cb) {
        return this.request("DescribeRebateInfos", req, cb);
    }
    /**
     * 代理商查询名下业务员列表信息
     */
    async DescribeSalesmans(req, cb) {
        return this.request("DescribeSalesmans", req, cb);
    }
    /**
     * 合作伙伴为客户消除强代付关系
     */
    async RemovePayRelationForClient(req, cb) {
        return this.request("RemovePayRelationForClient", req, cb);
    }
    /**
     * 为合作伙伴提供查询客户余额能力。调用者必须是合作伙伴，只能查询自己名下客户余额
     */
    async DescribeClientBalanceNew(req, cb) {
        return this.request("DescribeClientBalanceNew", req, cb);
    }
    /**
     * 根据大订单号查询关联申请合并支付的其他订单号
     */
    async DescribeAgentRelateBigDealIds(req, cb) {
        return this.request("DescribeAgentRelateBigDealIds", req, cb);
    }
    /**
     * 代理商可查询自己名下待审核客户列表
     */
    async DescribeAgentClients(req, cb) {
        return this.request("DescribeAgentClients", req, cb);
    }
    /**
     * 传入代客uin，查客户级别，客户审核状态，客户实名认证状态
     */
    async DescribeAgentClientGrade(req, cb) {
        return this.request("DescribeAgentClientGrade", req, cb);
    }
    /**
     * 可以查询代理商代付的预付费订单
     */
    async DescribeAgentPayDealsV2(req, cb) {
        return this.request("DescribeAgentPayDealsV2", req, cb);
    }
    /**
     * 查询已审核客户列表
     */
    async DescribeAgentAuditedClients(req, cb) {
        return this.request("DescribeAgentAuditedClients", req, cb);
    }
    /**
     * 合作伙伴为客户创建强代付关系
     */
    async CreatePayRelationForClient(req, cb) {
        return this.request("CreatePayRelationForClient", req, cb);
    }
    /**
     * 代理商可以审核其名下申请中代客
     */
    async AuditApplyClient(req, cb) {
        return this.request("AuditApplyClient", req, cb);
    }
    /**
     * 供代理商拉取缓存的全量预付费客户订单
     */
    async DescribeAgentDealsByCache(req, cb) {
        return this.request("DescribeAgentDealsByCache", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249298, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.pds = void 0;
const v20210701_1 = require("./v20210701");
exports.pds = {
    v20210701: v20210701_1.v20210701,
};

}, function(modId) { var map = {"./v20210701":1738984249299}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249299, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210701 = void 0;
const Models = require("./pds_models");
const pds_client_1 = require("./pds_client");
exports.v20210701 = {
    Client: pds_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./pds_models":1738984249300,"./pds_client":1738984249301}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249300, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249301, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * pds client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("pds.tencentcloudapi.com", "2021-07-01", clientConfig);
    }
    /**
     * 查询存量判断服务
     */
    async DescribeStockEstimation(req, cb) {
        return this.request("DescribeStockEstimation", req, cb);
    }
    /**
     * 判断新用户信誉值
     */
    async DescribeNewUserAcquisition(req, cb) {
        return this.request("DescribeNewUserAcquisition", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249302, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.postgres = void 0;
const v20170312_1 = require("./v20170312");
exports.postgres = {
    v20170312: v20170312_1.v20170312,
};

}, function(modId) { var map = {"./v20170312":1738984249303}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249303, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20170312 = void 0;
const Models = require("./postgres_models");
const postgres_client_1 = require("./postgres_client");
exports.v20170312 = {
    Client: postgres_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./postgres_models":1738984249304,"./postgres_client":1738984249305}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249304, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249305, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * postgres client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("postgres.tencentcloudapi.com", "2017-03-12", clientConfig);
    }
    /**
     * 本接口 (DescribeBackupDownloadURL) 用于查询指定备份集的下载地址，可包括全量备份集、增量日志备份集。
     */
    async DescribeBackupDownloadURL(req, cb) {
        return this.request("DescribeBackupDownloadURL", req, cb);
    }
    /**
     * 本接口（DescribeDefaultParameters）主要用于查询某个数据库版本和引擎支持的所有参数。
     */
    async DescribeDefaultParameters(req, cb) {
        return this.request("DescribeDefaultParameters", req, cb);
    }
    /**
     * 本接口（DescribeDBErrlogs）用于查询错误日志。
     */
    async DescribeDBErrlogs(req, cb) {
        return this.request("DescribeDBErrlogs", req, cb);
    }
    /**
     * 本接口（DescribeDBInstanceHAConfig）用于查询实例HA配置信息。其中HA配置信息包括：
<li>允许备节点切换为主节点的条件配置
<li>半同步实例使用同步复制或异步复制的条件配置
     */
    async DescribeDBInstanceHAConfig(req, cb) {
        return this.request("DescribeDBInstanceHAConfig", req, cb);
    }
    /**
     * 本接口（DescribeBackupOverview）用于查询用户的备份概览信息。返回用户当前备份个数、备份占用容量、免费容量、收费容量等信息（容量单位为字节）。
     */
    async DescribeBackupOverview(req, cb) {
        return this.request("DescribeBackupOverview", req, cb);
    }
    /**
     * 本接口用于查询数据库对象列表。例如查询test数据库下的模式列表。
     */
    async DescribeDatabaseObjects(req, cb) {
        return this.request("DescribeDatabaseObjects", req, cb);
    }
    /**
     * 本接口（ModifyAccountRemark）用于修改账号备注。
     */
    async ModifyAccountRemark(req, cb) {
        return this.request("ModifyAccountRemark", req, cb);
    }
    /**
     * 本接口（SetAutoRenewFlag）用于设置自动续费。
     */
    async SetAutoRenewFlag(req, cb) {
        return this.request("SetAutoRenewFlag", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceName）用于修改postgresql实例名字。
     */
    async ModifyDBInstanceName(req, cb) {
        return this.request("ModifyDBInstanceName", req, cb);
    }
    /**
     * 本接口 (DescribeMaintainTimeWindow) 用于查询实例的维护时间窗口
     */
    async DescribeMaintainTimeWindow(req, cb) {
        return this.request("DescribeMaintainTimeWindow", req, cb);
    }
    /**
     * 查询专属集群
     */
    async DescribeDedicatedClusters(req, cb) {
        return this.request("DescribeDedicatedClusters", req, cb);
    }
    /**
     * 本接口（DeleteParameterTemplate）主要用于删除某个参数模板。
     */
    async DeleteParameterTemplate(req, cb) {
        return this.request("DeleteParameterTemplate", req, cb);
    }
    /**
     * 本接口（DescribeDBInstanceAttribute）用于查询实例的参数信息。
     */
    async DescribeDBInstanceParameters(req, cb) {
        return this.request("DescribeDBInstanceParameters", req, cb);
    }
    /**
     * 本接口 (DeleteServerlessDBInstance) 用于删除一个ServerlessDB实例。
     */
    async DeleteServerlessDBInstance(req, cb) {
        return this.request("DeleteServerlessDBInstance", req, cb);
    }
    /**
     * 本接口（CreateDBInstanceNetworkAccess）用于创建实例网络。
     */
    async CreateDBInstanceNetworkAccess(req, cb) {
        return this.request("CreateDBInstanceNetworkAccess", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceSpec）用于修改实例规格，包括内存、磁盘。
     */
    async ModifyDBInstanceSpec(req, cb) {
        return this.request("ModifyDBInstanceSpec", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceSecurityGroups）用于修改实例安全组。
     */
    async ModifyDBInstanceSecurityGroups(req, cb) {
        return this.request("ModifyDBInstanceSecurityGroups", req, cb);
    }
    /**
     * 本接口 (ModifyMaintainTimeWindow) 用于实例维护时间窗口的修改。
     */
    async ModifyMaintainTimeWindow(req, cb) {
        return this.request("ModifyMaintainTimeWindow", req, cb);
    }
    /**
     * 本接口（RenewInstance）用于续费实例。
     */
    async RenewInstance(req, cb) {
        return this.request("RenewInstance", req, cb);
    }
    /**
     * 接口（DescribeDatabases）用来查询实例的数据库列表。
     */
    async DescribeDatabases(req, cb) {
        return this.request("DescribeDatabases", req, cb);
    }
    /**
     * 本接口 (DescribeParameterTemplates) 用于查询参数模板列表。
     */
    async DescribeParameterTemplates(req, cb) {
        return this.request("DescribeParameterTemplates", req, cb);
    }
    /**
     * 本接口（DescribeProductConfig）用于查询售卖规格配置。本接口已废弃，推荐使用新接口[DescribeClasses](https://cloud.tencent.com/document/api/409/89019)。
     */
    async DescribeProductConfig(req, cb) {
        return this.request("DescribeProductConfig", req, cb);
    }
    /**
     * 本接口（DescribeDBSlowlogs）用于获取慢查询日志。本接口已于2021.09.01日废弃，后续此接口将不再返回任何数据，推荐使用接口[DescribeSlowQueryList](https://cloud.tencent.com/document/api/409/60540)替代。
     */
    async DescribeDBSlowlogs(req, cb) {
        return this.request("DescribeDBSlowlogs", req, cb);
    }
    /**
     * 查询数据库账号对某数据库对象拥有的权限列表。
     */
    async DescribeAccountPrivileges(req, cb) {
        return this.request("DescribeAccountPrivileges", req, cb);
    }
    /**
     * 可对RO组进行网络的删除操作。
     */
    async DeleteReadOnlyGroupNetworkAccess(req, cb) {
        return this.request("DeleteReadOnlyGroupNetworkAccess", req, cb);
    }
    /**
     * 支持实例的计费类型转换（目前仅支持按量计费转包年包月）
     */
    async ModifyDBInstanceChargeType(req, cb) {
        return this.request("ModifyDBInstanceChargeType", req, cb);
    }
    /**
     * 解除数据库账号的锁定，解锁后账号可以登陆数据库。
     */
    async UnlockAccount(req, cb) {
        return this.request("UnlockAccount", req, cb);
    }
    /**
     * 本接口 (DestroyDBInstance) 用于彻底销毁指定DBInstanceId对应的实例，销毁后实例数据将彻底删除，无法找回，调用前请仔细确认要操作的实例。只能销毁隔离中的实例。
     */
    async DestroyDBInstance(req, cb) {
        return this.request("DestroyDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeDBBackups）用于查询实例备份列表。本接口已废弃，推荐使用接口[DescribeBaseBackups](https://cloud.tencent.com/document/api/409/89022)替代。
     */
    async DescribeDBBackups(req, cb) {
        return this.request("DescribeDBBackups", req, cb);
    }
    /**
     * 此接口（DescribeSlowQueryAnalysis）用于统计指定时间范围内的所有慢查询，根据SQL语句抽象参数后，进行聚合分析，并返回同类SQL列表。
     */
    async DescribeSlowQueryAnalysis(req, cb) {
        return this.request("DescribeSlowQueryAnalysis", req, cb);
    }
    /**
     * 本接口 (InquiryPriceCreateDBInstances) 用于查询购买实例的价格信息。
     */
    async InquiryPriceCreateDBInstances(req, cb) {
        return this.request("InquiryPriceCreateDBInstances", req, cb);
    }
    /**
     * 本接口（DescribeDBInstanceSecurityGroups）用于查询实例安全组。
     */
    async DescribeDBInstanceSecurityGroups(req, cb) {
        return this.request("DescribeDBInstanceSecurityGroups", req, cb);
    }
    /**
     * 本接口（CreateBaseBackup）用于创建实例的数据备份。
     */
    async CreateBaseBackup(req, cb) {
        return this.request("CreateBaseBackup", req, cb);
    }
    /**
     * 本接口（DescribeParameterTemplateAttributes）用于查询某个参数模板的具体内容，包括基本信息和参数信息。
     */
    async DescribeParameterTemplateAttributes(req, cb) {
        return this.request("DescribeParameterTemplateAttributes", req, cb);
    }
    /**
     * 根据备份集或恢复目标时间，在原实例上恢复数据库相关对象，例如数据库、表。
     */
    async RestoreDBInstanceObjects(req, cb) {
        return this.request("RestoreDBInstanceObjects", req, cb);
    }
    /**
     * 本接口（CloseServerlessDBExtranetAccess）用于关闭serverlessDB实例公网地址
     */
    async CloseServerlessDBExtranetAccess(req, cb) {
        return this.request("CloseServerlessDBExtranetAccess", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceDeployment）用于修改节点可用区部署方式，仅支持主实例。
     */
    async ModifyDBInstanceDeployment(req, cb) {
        return this.request("ModifyDBInstanceDeployment", req, cb);
    }
    /**
     * 本接口 (CreateServerlessDBInstance) 用于创建一个ServerlessDB实例，创建成功返回实例ID。
     */
    async CreateServerlessDBInstance(req, cb) {
        return this.request("CreateServerlessDBInstance", req, cb);
    }
    /**
     * 此接口用于创建数据库，需指定数据库名及所有者。
     */
    async CreateDatabase(req, cb) {
        return this.request("CreateDatabase", req, cb);
    }
    /**
     * 此接口用于创建数据账号，返回的Oid为账号唯一标识。与数据库系统表pg_roles中记录的oid一致。
     */
    async CreateAccount(req, cb) {
        return this.request("CreateAccount", req, cb);
    }
    /**
     * 本接口 (ModifyDBInstanceParameters) 用于修改实例参数。
     */
    async ModifyDBInstanceParameters(req, cb) {
        return this.request("ModifyDBInstanceParameters", req, cb);
    }
    /**
     * 本接口（DescribeBaseBackups）用于查询数据备份列表。
     */
    async DescribeBaseBackups(req, cb) {
        return this.request("DescribeBaseBackups", req, cb);
    }
    /**
     * 本接口（DescribeAvailableRecoveryTime）用于查询实例可恢复的时间范围。
     */
    async DescribeAvailableRecoveryTime(req, cb) {
        return this.request("DescribeAvailableRecoveryTime", req, cb);
    }
    /**
     * 本接口 (DescribeRegions) 用于查询售卖地域信息。
     */
    async DescribeRegions(req, cb) {
        return this.request("DescribeRegions", req, cb);
    }
    /**
     * 本接口（OpenServerlessDBExtranetAccess）用于开通serverlessDB实例公网地址。
     */
    async OpenServerlessDBExtranetAccess(req, cb) {
        return this.request("OpenServerlessDBExtranetAccess", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceReadOnlyGroup）用于修改实例所属的只读组
     */
    async ModifyDBInstanceReadOnlyGroup(req, cb) {
        return this.request("ModifyDBInstanceReadOnlyGroup", req, cb);
    }
    /**
     * 用于克隆实例，支持指定备份集、指定时间点进行克隆。
     */
    async CloneDBInstance(req, cb) {
        return this.request("CloneDBInstance", req, cb);
    }
    /**
     * 本接口（DisIsolateDBInstances）用于解隔离实例
     */
    async DisIsolateDBInstances(req, cb) {
        return this.request("DisIsolateDBInstances", req, cb);
    }
    /**
     * 用于查询一个或多个serverlessDB实例的详细信息
     */
    async DescribeServerlessDBInstances(req, cb) {
        return this.request("DescribeServerlessDBInstances", req, cb);
    }
    /**
     * 本接口（DescribeDBVersions）用于查询支持的数据库版本。
     */
    async DescribeDBVersions(req, cb) {
        return this.request("DescribeDBVersions", req, cb);
    }
    /**
     * 本接口（ModifyParameterTemplate）主要用于修改参数模板名称，描述等配置，也可用于管理参数模板中的参数列表。
     */
    async ModifyParameterTemplate(req, cb) {
        return this.request("ModifyParameterTemplate", req, cb);
    }
    /**
     * 本接口 (CreateParameterTemplate) 用于创建参数模板。
     */
    async CreateParameterTemplate(req, cb) {
        return this.request("CreateParameterTemplate", req, cb);
    }
    /**
     * 本接口(CreateReadOnlyDBInstance)用于创建只读实例
     */
    async CreateReadOnlyDBInstance(req, cb) {
        return this.request("CreateReadOnlyDBInstance", req, cb);
    }
    /**
     * 本接口(DescribeBackupSummaries)用于查询实例备份的统计信息，返回以实例为维度的备份个数、占用容量等信息（容量单位为字节）。
     */
    async DescribeBackupSummaries(req, cb) {
        return this.request("DescribeBackupSummaries", req, cb);
    }
    /**
     * 本接口（UpgradeDBInstanceMajorVersion）用于升级实例内核大版本，例如从PostgreSQL 12升级到PostgreSQL 15。
     */
    async UpgradeDBInstanceMajorVersion(req, cb) {
        return this.request("UpgradeDBInstanceMajorVersion", req, cb);
    }
    /**
     * 本接口(RebalanceReadOnlyGroup)用于重新均衡 RO 组内实例的负载。注意，RO 组内 RO 实例会有一次数据库连接瞬断，请确保应用程序能重连数据库，谨慎操作。
     */
    async RebalanceReadOnlyGroup(req, cb) {
        return this.request("RebalanceReadOnlyGroup", req, cb);
    }
    /**
     * 本接口（CreateReadOnlyGroupNetworkAccess）用于创建RO组的网络。
     */
    async CreateReadOnlyGroupNetworkAccess(req, cb) {
        return this.request("CreateReadOnlyGroupNetworkAccess", req, cb);
    }
    /**
     * 本接口 （DescribeEncryptionKeys） 用于查询实例的密钥信息列表。
     */
    async DescribeEncryptionKeys(req, cb) {
        return this.request("DescribeEncryptionKeys", req, cb);
    }
    /**
     * 本接口(DeleteReadOnlyGroup)用于删除指定的只读组
     */
    async DeleteReadOnlyGroup(req, cb) {
        return this.request("DeleteReadOnlyGroup", req, cb);
    }
    /**
     * 本接口（UpgradeDBInstanceKernelVersion）用于升级实例的内核版本号。
     */
    async UpgradeDBInstanceKernelVersion(req, cb) {
        return this.request("UpgradeDBInstanceKernelVersion", req, cb);
    }
    /**
     * 本接口（ResetAccountPassword）用于重置实例的账户密码。
     */
    async ResetAccountPassword(req, cb) {
        return this.request("ResetAccountPassword", req, cb);
    }
    /**
     * 本接口（RestartDBInstance）用于重启实例。
     */
    async RestartDBInstance(req, cb) {
        return this.request("RestartDBInstance", req, cb);
    }
    /**
     * 可对实例进行网络的删除操作。
     */
    async DeleteDBInstanceNetworkAccess(req, cb) {
        return this.request("DeleteDBInstanceNetworkAccess", req, cb);
    }
    /**
     * 本接口（ModifyDBInstancesProject）用于修改实例所属项目。
     */
    async ModifyDBInstancesProject(req, cb) {
        return this.request("ModifyDBInstancesProject", req, cb);
    }
    /**
     * 本接口（DescribeDBXlogs）用于获取实例Xlog列表。本接口已废弃，推荐使用接口[DescribeLogBackups](https://cloud.tencent.com/document/api/409/89021)替代。
     */
    async DescribeDBXlogs(req, cb) {
        return this.request("DescribeDBXlogs", req, cb);
    }
    /**
     * 本接口 (DescribeDBInstanceAttribute) 用于查询某个实例的详情信息。
     */
    async DescribeDBInstanceAttribute(req, cb) {
        return this.request("DescribeDBInstanceAttribute", req, cb);
    }
    /**
     * 本接口（CreateDBInstances）用于创建一个或者多个PostgreSQL实例,仅发货实例不会进行初始化。本接口已废弃，推荐使用接口[CreateInstances](https://cloud.tencent.com/document/api/409/56107)替代。
     */
    async CreateDBInstances(req, cb) {
        return this.request("CreateDBInstances", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceHAConfig）用于修改实例HA配置信息。其中HA配置信息包括：
<li>允许备节点切换为主节点的条件配置
<li>半同步实例使用同步复制或异步复制的条件配置
     */
    async ModifyDBInstanceHAConfig(req, cb) {
        return this.request("ModifyDBInstanceHAConfig", req, cb);
    }
    /**
     * 本接口（DeleteLogBackup）用于删除实例指定日志备份。
     */
    async DeleteLogBackup(req, cb) {
        return this.request("DeleteLogBackup", req, cb);
    }
    /**
     * 本接口（IsolateDBInstances）用于隔离实例。
     */
    async IsolateDBInstances(req, cb) {
        return this.request("IsolateDBInstances", req, cb);
    }
    /**
     * 本接口（ModifyBaseBackupExpireTime）用于修改实例指定数据备份的过期时间。
     */
    async ModifyBaseBackupExpireTime(req, cb) {
        return this.request("ModifyBaseBackupExpireTime", req, cb);
    }
    /**
     * 修改某账号对某数据库对象的权限、修改账号类型。
     */
    async ModifyAccountPrivileges(req, cb) {
        return this.request("ModifyAccountPrivileges", req, cb);
    }
    /**
     * 此接口（DescribeSlowQueryList）用于查询指定时间范围内的所有慢查询。
     */
    async DescribeSlowQueryList(req, cb) {
        return this.request("DescribeSlowQueryList", req, cb);
    }
    /**
     * 本接口（DescribeLogBackups）用于查询日志备份列表。
     */
    async DescribeLogBackups(req, cb) {
        return this.request("DescribeLogBackups", req, cb);
    }
    /**
     * 本接口（CloseDBExtranetAccess）用于关闭实例公网地址。
     */
    async CloseDBExtranetAccess(req, cb) {
        return this.request("CloseDBExtranetAccess", req, cb);
    }
    /**
     * 本接口（AddDBInstanceToReadOnlyGroup）用于添加只读实例到只读组
     */
    async AddDBInstanceToReadOnlyGroup(req, cb) {
        return this.request("AddDBInstanceToReadOnlyGroup", req, cb);
    }
    /**
     * 本接口（DescribeAccounts）用于查询实例的数据库账号列表。
     */
    async DescribeAccounts(req, cb) {
        return this.request("DescribeAccounts", req, cb);
    }
    /**
     * 本接口（DescribeCloneDBInstanceSpec）用于查询克隆实例可选择的最小规格，包括SpecCode和磁盘。
     */
    async DescribeCloneDBInstanceSpec(req, cb) {
        return this.request("DescribeCloneDBInstanceSpec", req, cb);
    }
    /**
     * 本接口 (DescribeDBInstances) 用于查询一个或多个实例的详细信息。
     */
    async DescribeDBInstances(req, cb) {
        return this.request("DescribeDBInstances", req, cb);
    }
    /**
     * 本接口（DescribeBackupDownloadRestriction）用于查询备份文件下载限制。
     */
    async DescribeBackupDownloadRestriction(req, cb) {
        return this.request("DescribeBackupDownloadRestriction", req, cb);
    }
    /**
     * 本接口(ModifyReadOnlyGroupConfig)用于更新只读组配置信息
     */
    async ModifyReadOnlyGroupConfig(req, cb) {
        return this.request("ModifyReadOnlyGroupConfig", req, cb);
    }
    /**
     * 本接口（RemoveDBInstanceFromReadOnlyGroup）用户将只读实例从只读组中移除
     */
    async RemoveDBInstanceFromReadOnlyGroup(req, cb) {
        return this.request("RemoveDBInstanceFromReadOnlyGroup", req, cb);
    }
    /**
     * 本接口（DescribeParamsEvent）用于查询参数修改事件。
     */
    async DescribeParamsEvent(req, cb) {
        return this.request("DescribeParamsEvent", req, cb);
    }
    /**
     * 本接口（DescribeClasses）用于查询实例售卖规格。
     */
    async DescribeClasses(req, cb) {
        return this.request("DescribeClasses", req, cb);
    }
    /**
     * 本接口（DescribeOrders）用于查询订单信息。
     */
    async DescribeOrders(req, cb) {
        return this.request("DescribeOrders", req, cb);
    }
    /**
     * 本接口（SwitchDBInstancePrimary）用于切换实例主备关系。
<li>通过主动发起切换，可以验证业务能否正确处理实例主备切换的场景
<li>通过使用强制切换，可以在备节点延迟不满足切换条件时，强制发起主从切换
<li>只有主实例可以执行该操作
     */
    async SwitchDBInstancePrimary(req, cb) {
        return this.request("SwitchDBInstancePrimary", req, cb);
    }
    /**
     * 本接口 (DescribeBackupPlans) 用于实例所有的备份计划查询
     */
    async DescribeBackupPlans(req, cb) {
        return this.request("DescribeBackupPlans", req, cb);
    }
    /**
     * 当升级完成后，对处于等待切换状态下的实例，强制实例立即切换。
     */
    async ModifySwitchTimePeriod(req, cb) {
        return this.request("ModifySwitchTimePeriod", req, cb);
    }
    /**
     * 本接口（OpenDBExtranetAccess）用于开通实例公网地址。
     */
    async OpenDBExtranetAccess(req, cb) {
        return this.request("OpenDBExtranetAccess", req, cb);
    }
    /**
     * 修改数据库所有者
     */
    async ModifyDatabaseOwner(req, cb) {
        return this.request("ModifyDatabaseOwner", req, cb);
    }
    /**
     * 此接口用于删除数据库账号，需要同时输入Oid与UserName，避免误删。
     */
    async DeleteAccount(req, cb) {
        return this.request("DeleteAccount", req, cb);
    }
    /**
     * 本接口 (ModifyBackupPlan) 用于实例备份计划的修改，默认是在每天的凌晨开始全量备份，备份保留时长是7天。可以根据此接口指定时间进行实例的备份。
     */
    async ModifyBackupPlan(req, cb) {
        return this.request("ModifyBackupPlan", req, cb);
    }
    /**
     * 本接口（InitDBInstances）用于初始化云数据库PostgreSQL实例。本接口已废弃，推荐使用接口[CreateInstances](https://cloud.tencent.com/document/api/409/56107)替代。
     */
    async InitDBInstances(req, cb) {
        return this.request("InitDBInstances", req, cb);
    }
    /**
     * 本接口 (DescribeZones) 用于查询支持的可用区信息。
     */
    async DescribeZones(req, cb) {
        return this.request("DescribeZones", req, cb);
    }
    /**
     * 本接口（InquiryPriceUpgradeDBInstance）用于查询升级实例的价格。只支持按量计费实例。
     */
    async InquiryPriceUpgradeDBInstance(req, cb) {
        return this.request("InquiryPriceUpgradeDBInstance", req, cb);
    }
    /**
     * 本接口（CreateReadOnlyGroup）用于创建只读组
     */
    async CreateReadOnlyGroup(req, cb) {
        return this.request("CreateReadOnlyGroup", req, cb);
    }
    /**
     * 本接口（InquiryPriceRenewDBInstance）用于查询续费实例的价格。
     */
    async InquiryPriceRenewDBInstance(req, cb) {
        return this.request("InquiryPriceRenewDBInstance", req, cb);
    }
    /**
     * 本接口（ModifyBackupDownloadRestriction）用于修改备份文件下载限制。
     */
    async ModifyBackupDownloadRestriction(req, cb) {
        return this.request("ModifyBackupDownloadRestriction", req, cb);
    }
    /**
     * 本接口（DeleteBaseBackup）用于删除实例指定数据备份。
     */
    async DeleteBaseBackup(req, cb) {
        return this.request("DeleteBaseBackup", req, cb);
    }
    /**
     * 此接口用于锁定数据库账号，锁定后账号当前连接会断开，并且无法建立新连接。
     */
    async LockAccount(req, cb) {
        return this.request("LockAccount", req, cb);
    }
    /**
     * 本接口（DescribeReadOnlyGroups）用于查询只读组列表
     */
    async DescribeReadOnlyGroups(req, cb) {
        return this.request("DescribeReadOnlyGroups", req, cb);
    }
    /**
     * 本接口（UpgradeDBInstance）用于升级实例配置。本接口已废弃，推荐使用接口[ModifyDBInstanceSpec](https://cloud.tencent.com/document/api/409/63689)替代。
     */
    async UpgradeDBInstance(req, cb) {
        return this.request("UpgradeDBInstance", req, cb);
    }
    /**
     * 本接口 (CreateInstances) 用于创建一个或者多个PostgreSQL实例，通过此接口创建的实例无需进行初始化，可直接使用。
<li>实例创建成功后将自动开机启动，实例状态变为“运行中”。</li>
<li>预付费实例的购买会预先扣除本次实例购买所需金额，按小时后付费实例购买会预先冻结本次实例购买一小时内所需金额，在调用本接口前请确保账户余额充足。</li>
     */
    async CreateInstances(req, cb) {
        return this.request("CreateInstances", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249306, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.privatedns = void 0;
const v20201028_1 = require("./v20201028");
exports.privatedns = {
    v20201028: v20201028_1.v20201028,
};

}, function(modId) { var map = {"./v20201028":1738984249307}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249307, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201028 = void 0;
const Models = require("./privatedns_models");
const privatedns_client_1 = require("./privatedns_client");
exports.v20201028 = {
    Client: privatedns_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./privatedns_models":1738984249308,"./privatedns_client":1738984249309}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249308, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249309, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * privatedns client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("privatedns.tencentcloudapi.com", "2020-10-28", clientConfig);
    }
    /**
     * 跨账号关联VPC时绑定其他账号
     */
    async CreatePrivateDNSAccount(req, cb) {
        return this.request("CreatePrivateDNSAccount", req, cb);
    }
    /**
     * 获取私有域信息
     */
    async DescribePrivateZone(req, cb) {
        return this.request("DescribePrivateZone", req, cb);
    }
    /**
     * 获取私有域记录列表
     */
    async DescribePrivateZoneRecordList(req, cb) {
        return this.request("DescribePrivateZoneRecordList", req, cb);
    }
    /**
     * 查询额度使用情况
     */
    async DescribeQuotaUsage(req, cb) {
        return this.request("DescribeQuotaUsage", req, cb);
    }
    /**
     * 获取操作日志列表
     */
    async DescribeAuditLog(req, cb) {
        return this.request("DescribeAuditLog", req, cb);
    }
    /**
     * 添加私有域解析记录
     */
    async CreatePrivateZoneRecord(req, cb) {
        return this.request("CreatePrivateZoneRecord", req, cb);
    }
    /**
     * 创建私有域
     */
    async CreatePrivateZone(req, cb) {
        return this.request("CreatePrivateZone", req, cb);
    }
    /**
     * 获取私有域列表
     */
    async DescribePrivateZoneList(req, cb) {
        return this.request("DescribePrivateZoneList", req, cb);
    }
    /**
     * 追加与私有域关联的VPC
     */
    async AddSpecifyPrivateZoneVpc(req, cb) {
        return this.request("AddSpecifyPrivateZoneVpc", req, cb);
    }
    /**
     * 查询异步绑定vpc操作状态
     */
    async QueryAsyncBindVpcStatus(req, cb) {
        return this.request("QueryAsyncBindVpcStatus", req, cb);
    }
    /**
     * 修改私有域信息
     */
    async ModifyPrivateZone(req, cb) {
        return this.request("ModifyPrivateZone", req, cb);
    }
    /**
     * 修改私有域解析记录
     */
    async ModifyPrivateZoneRecord(req, cb) {
        return this.request("ModifyPrivateZoneRecord", req, cb);
    }
    /**
     * 删除私有域解析账号
     */
    async DeletePrivateDNSAccount(req, cb) {
        return this.request("DeletePrivateDNSAccount", req, cb);
    }
    /**
     * 开通私有域解析
     */
    async SubscribePrivateZoneService(req, cb) {
        return this.request("SubscribePrivateZoneService", req, cb);
    }
    /**
     * 获取私有域解析概览
     */
    async DescribeDashboard(req, cb) {
        return this.request("DescribeDashboard", req, cb);
    }
    /**
     * 修改私有域关联的VPC
     */
    async ModifyPrivateZoneVpc(req, cb) {
        return this.request("ModifyPrivateZoneVpc", req, cb);
    }
    /**
     * 删除私有域并停止解析
     */
    async DeletePrivateZone(req, cb) {
        return this.request("DeletePrivateZone", req, cb);
    }
    /**
     * 获取私有域解析账号的VPC列表
     */
    async DescribeAccountVpcList(req, cb) {
        return this.request("DescribeAccountVpcList", req, cb);
    }
    /**
     * 修改解析记录状态
     */
    async ModifyRecordsStatus(req, cb) {
        return this.request("ModifyRecordsStatus", req, cb);
    }
    /**
     * 删除与私有域关联的VPC
     */
    async DeleteSpecifyPrivateZoneVpc(req, cb) {
        return this.request("DeleteSpecifyPrivateZoneVpc", req, cb);
    }
    /**
     * 查询私有域解析开通状态
     */
    async DescribePrivateZoneService(req, cb) {
        return this.request("DescribePrivateZoneService", req, cb);
    }
    /**
     * 删除私有域解析记录
     */
    async DeletePrivateZoneRecord(req, cb) {
        return this.request("DeletePrivateZoneRecord", req, cb);
    }
    /**
     * 获取私有域解析请求量
     */
    async DescribeRequestData(req, cb) {
        return this.request("DescribeRequestData", req, cb);
    }
    /**
     * 获取私有域解析账号列表
     */
    async DescribePrivateDNSAccountList(req, cb) {
        return this.request("DescribePrivateDNSAccountList", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249310, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.pts = void 0;
const v20210728_1 = require("./v20210728");
exports.pts = {
    v20210728: v20210728_1.v20210728,
};

}, function(modId) { var map = {"./v20210728":1738984249311}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249311, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210728 = void 0;
const Models = require("./pts_models");
const pts_client_1 = require("./pts_client");
exports.v20210728 = {
    Client: pts_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./pts_models":1738984249312,"./pts_client":1738984249313}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249312, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249313, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * pts client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("pts.tencentcloudapi.com", "2021-07-28", clientConfig);
    }
    /**
     * 查询场景配置并附带已经执行的任务内容
     */
    async DescribeScenarioWithJobs(req, cb) {
        return this.request("DescribeScenarioWithJobs", req, cb);
    }
    /**
     * 删除环境
     */
    async DeleteEnvironments(req, cb) {
        return this.request("DeleteEnvironments", req, cb);
    }
    /**
     * 更新任务
     */
    async UpdateJob(req, cb) {
        return this.request("UpdateJob", req, cb);
    }
    /**
     * 更新定时任务
     */
    async UpdateCronJob(req, cb) {
        return this.request("UpdateCronJob", req, cb);
    }
    /**
     * 创建并启动任务
     */
    async StartJob(req, cb) {
        return this.request("StartJob", req, cb);
    }
    /**
     * 更新场景
     */
    async UpdateScenario(req, cb) {
        return this.request("UpdateScenario", req, cb);
    }
    /**
     * 查询文件列表
     */
    async DescribeFiles(req, cb) {
        return this.request("DescribeFiles", req, cb);
    }
    /**
     * 删除项目
     */
    async DeleteProjects(req, cb) {
        return this.request("DeleteProjects", req, cb);
    }
    /**
     * 查询指标，返回固定时间点指标内容
     */
    async DescribeSampleQuery(req, cb) {
        return this.request("DescribeSampleQuery", req, cb);
    }
    /**
     * 查询任务列表
     */
    async DescribeJobs(req, cb) {
        return this.request("DescribeJobs", req, cb);
    }
    /**
     * 创建场景
     */
    async CreateScenario(req, cb) {
        return this.request("CreateScenario", req, cb);
    }
    /**
     * 删除文件
     */
    async DeleteFiles(req, cb) {
        return this.request("DeleteFiles", req, cb);
    }
    /**
     * 查询地域列表
     */
    async DescribeRegions(req, cb) {
        return this.request("DescribeRegions", req, cb);
    }
    /**
     * 查询检查点汇总信息
     */
    async DescribeCheckSummary(req, cb) {
        return this.request("DescribeCheckSummary", req, cb);
    }
    /**
     * 批量查询指标矩阵
     */
    async DescribeSampleMatrixBatchQuery(req, cb) {
        return this.request("DescribeSampleMatrixBatchQuery", req, cb);
    }
    /**
     * 查询指标矩阵
     */
    async DescribeSampleMatrixQuery(req, cb) {
        return this.request("DescribeSampleMatrixQuery", req, cb);
    }
    /**
     * 查询请求汇总信息
     */
    async DescribeRequestSummary(req, cb) {
        return this.request("DescribeRequestSummary", req, cb);
    }
    /**
     * 删除场景
     */
    async DeleteScenarios(req, cb) {
        return this.request("DeleteScenarios", req, cb);
    }
    /**
     * 查询项目列表
     */
    async DescribeProjects(req, cb) {
        return this.request("DescribeProjects", req, cb);
    }
    /**
     * 返回告警历史项的列表
     */
    async DescribeAlertRecords(req, cb) {
        return this.request("DescribeAlertRecords", req, cb);
    }
    /**
     * 批量查询指标，返回固定时间点指标内容
     */
    async DescribeSampleBatchQuery(req, cb) {
        return this.request("DescribeSampleBatchQuery", req, cb);
    }
    /**
     * 查询告警通知接收组
     */
    async DescribeAlertChannels(req, cb) {
        return this.request("DescribeAlertChannels", req, cb);
    }
    /**
     * 查询系统支持的指标
     */
    async DescribeAvailableMetrics(req, cb) {
        return this.request("DescribeAvailableMetrics", req, cb);
    }
    /**
     * 查询标签内容
     */
    async DescribeLabelValues(req, cb) {
        return this.request("DescribeLabelValues", req, cb);
    }
    /**
     * 停止定时任务
     */
    async AbortCronJobs(req, cb) {
        return this.request("AbortCronJobs", req, cb);
    }
    /**
     * 更新关联文件场景
     */
    async UpdateFileScenarioRelation(req, cb) {
        return this.request("UpdateFileScenarioRelation", req, cb);
    }
    /**
     * 重启状态为已中止的定时任务
     */
    async RestartCronJobs(req, cb) {
        return this.request("RestartCronJobs", req, cb);
    }
    /**
     * 更新环境
     */
    async UpdateEnvironment(req, cb) {
        return this.request("UpdateEnvironment", req, cb);
    }
    /**
     * 创建告警通知接收组
     */
    async CreateAlertChannel(req, cb) {
        return this.request("CreateAlertChannel", req, cb);
    }
    /**
     * 查看环境列表
     */
    async DescribeEnvironments(req, cb) {
        return this.request("DescribeEnvironments", req, cb);
    }
    /**
     * 删除任务
     */
    async DeleteJobs(req, cb) {
        return this.request("DeleteJobs", req, cb);
    }
    /**
     * 查询错误详情汇总信息
     */
    async DescribeErrorSummary(req, cb) {
        return this.request("DescribeErrorSummary", req, cb);
    }
    /**
     * 压测过程日志包括引擎输出日志及用户输出日志
     */
    async DescribeNormalLogs(req, cb) {
        return this.request("DescribeNormalLogs", req, cb);
    }
    /**
     * 复制场景
     */
    async CopyScenario(req, cb) {
        return this.request("CopyScenario", req, cb);
    }
    /**
     * 查询采样日志
     */
    async DescribeSampleLogs(req, cb) {
        return this.request("DescribeSampleLogs", req, cb);
    }
    /**
     * 创建环境
     */
    async CreateEnvironment(req, cb) {
        return this.request("CreateEnvironment", req, cb);
    }
    /**
     * 查询场景列表
     */
    async DescribeScenarios(req, cb) {
        return this.request("DescribeScenarios", req, cb);
    }
    /**
     * 删除定时任务
     */
    async DeleteCronJobs(req, cb) {
        return this.request("DeleteCronJobs", req, cb);
    }
    /**
     * 列出定时任务，非必填数组为空就默认全选
     */
    async DescribeCronJobs(req, cb) {
        return this.request("DescribeCronJobs", req, cb);
    }
    /**
     * 删除告警通知接收组
     */
    async DeleteAlertChannel(req, cb) {
        return this.request("DeleteAlertChannel", req, cb);
    }
    /**
     * 创建文件
     */
    async CreateFile(req, cb) {
        return this.request("CreateFile", req, cb);
    }
    /**
     * 调整任务的目标RPS
     */
    async AdjustJobSpeed(req, cb) {
        return this.request("AdjustJobSpeed", req, cb);
    }
    /**
     * 创建项目
     */
    async CreateProject(req, cb) {
        return this.request("CreateProject", req, cb);
    }
    /**
     * 停止任务
     */
    async AbortJob(req, cb) {
        return this.request("AbortJob", req, cb);
    }
    /**
     * 更新项目
     */
    async UpdateProject(req, cb) {
        return this.request("UpdateProject", req, cb);
    }
    /**
     * 生成临时COS凭证
     */
    async GenerateTmpKey(req, cb) {
        return this.request("GenerateTmpKey", req, cb);
    }
    /**
     * 查询指标所有的label及values值
     */
    async DescribeMetricLabelWithValues(req, cb) {
        return this.request("DescribeMetricLabelWithValues", req, cb);
    }
    /**
     * 创建定时任务
     */
    async CreateCronJob(req, cb) {
        return this.request("CreateCronJob", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249314, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.rce = void 0;
const v20201103_1 = require("./v20201103");
exports.rce = {
    v20201103: v20201103_1.v20201103,
};

}, function(modId) { var map = {"./v20201103":1738984249315}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249315, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201103 = void 0;
const Models = require("./rce_models");
const rce_client_1 = require("./rce_client");
exports.v20201103 = {
    Client: rce_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./rce_models":1738984249316,"./rce_client":1738984249317}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249316, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249317, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * rce client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("rce.tencentcloudapi.com", "2020-11-03", clientConfig);
    }
    /**
     * 修改黑白名单列表详情 详情内容 开始和结束时间 状态 备注等
     */
    async ModifyNameListData(req, cb) {
        return this.request("ModifyNameListData", req, cb);
    }
    /**
     * 删除黑白名单数据
     */
    async DeleteNameListData(req, cb) {
        return this.request("DeleteNameListData", req, cb);
    }
    /**
     * 黑白名单详情数据展示 名单id 客户appid uin 数据内容 开始时间和结束时间 状态 描述
     */
    async DescribeNameListDataList(req, cb) {
        return this.request("DescribeNameListDataList", req, cb);
    }
    /**
     * 查询黑白名单列表详情
     */
    async DescribeNameListDetail(req, cb) {
        return this.request("DescribeNameListDetail", req, cb);
    }
    /**
     * 全栈式风控引擎（RiskControlEngine，RCE）是基于人工智能技术和腾讯20年风控实战沉淀，依托腾讯海量业务构建的风控引擎，以轻量级的 SaaS 服务方式接入，帮助您快速解决注册、登录、营销活动等关键场景遇到的欺诈问题，实时防御黑灰产作恶。
     */
    async ManageMarketingRisk(req, cb) {
        return this.request("ManageMarketingRisk", req, cb);
    }
    /**
     * 修改列表数据 列表名称 列表类型 数据类型 状态 备注
     */
    async ModifyNameList(req, cb) {
        return this.request("ModifyNameList", req, cb);
    }
    /**
     * 创建黑白名单，黑白名单数量上限为100
     */
    async CreateNameList(req, cb) {
        return this.request("CreateNameList", req, cb);
    }
    /**
     * 修改黑白名单状态 关闭 开启 删除
     */
    async DeleteNameList(req, cb) {
        return this.request("DeleteNameList", req, cb);
    }
    /**
     * RCE控制台预付费和后付费次数展示
     */
    async DescribeUserUsageCnt(req, cb) {
        return this.request("DescribeUserUsageCnt", req, cb);
    }
    /**
     * 新增黑白名单数据，所有黑白名单数据总量上限为10000
     */
    async ImportNameListData(req, cb) {
        return this.request("ImportNameListData", req, cb);
    }
    /**
     * 列表展示黑白名单列表数据, 包含列表名称, 名单类型, 数据类型, 数据来源, 描述, 状态等
     */
    async DescribeNameList(req, cb) {
        return this.request("DescribeNameList", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249318, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.redis = void 0;
const v20180412_1 = require("./v20180412");
exports.redis = {
    v20180412: v20180412_1.v20180412,
};

}, function(modId) { var map = {"./v20180412":1738984249319}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249319, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180412 = void 0;
const Models = require("./redis_models");
const redis_client_1 = require("./redis_client");
exports.v20180412 = {
    Client: redis_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./redis_models":1738984249320,"./redis_client":1738984249321}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249320, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249321, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * redis client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("redis.tencentcloudapi.com", "2018-04-12", clientConfig);
    }
    /**
     * 本接口（ModifyInstanceReadOnly）用于设置实例输入模式。
     */
    async ModifyInstanceReadOnly(req, cb) {
        return this.request("ModifyInstanceReadOnly", req, cb);
    }
    /**
     * 腾讯云数据库 Redis 已经于2022年10月31日下线查询实例大 Key 接口。具体公告，请参见 [查询实例大 Key 接口下线公告](https://cloud.tencent.com/document/product/239/81005)。
     */
    async DescribeInstanceMonitorBigKeySizeDist(req, cb) {
        return this.request("DescribeInstanceMonitorBigKeySizeDist", req, cb);
    }
    /**
     * 本接口（DescribeTaskList）用于查询指定实例的任务列表信息。

- 可查询近30天内任务列表数据。
     */
    async DescribeTaskList(req, cb) {
        return this.request("DescribeTaskList", req, cb);
    }
    /**
     * 本接口（DeleteReplicationInstance）移除复制组成员。注：该接口下线中，请使用 [RemoveReplicationInstance](https://cloud.tencent.com/document/product/239/90099)。
     */
    async DeleteReplicationInstance(req, cb) {
        return this.request("DeleteReplicationInstance", req, cb);
    }
    /**
     * 本接口（CleanUpInstance）用于立即下线回收站的实例。
     */
    async CleanUpInstance(req, cb) {
        return this.request("CleanUpInstance", req, cb);
    }
    /**
     * 本接口（DescribeInstanceAccount）用于查看实例子账号信息。
     */
    async DescribeInstanceAccount(req, cb) {
        return this.request("DescribeInstanceAccount", req, cb);
    }
    /**
     * 本接口（SwitchAccessNewInstance）针对处于时间窗口中待切换操作的实例，用户可主动发起该操作。
     */
    async SwitchAccessNewInstance(req, cb) {
        return this.request("SwitchAccessNewInstance", req, cb);
    }
    /**
     * 本接口（ChangeReplicaToMaster）适用于实例副本组提主或副本提主。
     */
    async ChangeReplicaToMaster(req, cb) {
        return this.request("ChangeReplicaToMaster", req, cb);
    }
    /**
     * 本接口（DescribeInstanceMonitorTopNCmd）用于查询实例访问命令。
     */
    async DescribeInstanceMonitorTopNCmd(req, cb) {
        return this.request("DescribeInstanceMonitorTopNCmd", req, cb);
    }
    /**
     * 本接口（UpgradeInstanceVersion）用于将当前实例升级到更高版本，或者将当前标准架构升级至集群架构。
     */
    async UpgradeInstanceVersion(req, cb) {
        return this.request("UpgradeInstanceVersion", req, cb);
    }
    /**
     * 本接口（DescribeProductInfo）用于查询全地域 Redis 的售卖规格。
     */
    async DescribeProductInfo(req, cb) {
        return this.request("DescribeProductInfo", req, cb);
    }
    /**
     * 本接口（DescribeTaskInfo）用于获取指定任务的执行情况。
     */
    async DescribeTaskInfo(req, cb) {
        return this.request("DescribeTaskInfo", req, cb);
    }
    /**
     * 修改实例的备份模式
     */
    async ModifyInstanceBackupMode(req, cb) {
        return this.request("ModifyInstanceBackupMode", req, cb);
    }
    /**
     * 本接口（ModifyBackupDownloadRestriction）用于修改备份文件下载的网络信息与地址。
     */
    async ModifyBackupDownloadRestriction(req, cb) {
        return this.request("ModifyBackupDownloadRestriction", req, cb);
    }
    /**
     * 本接口（ModifyInstanceAccount）用于修改实例子账号。
     */
    async ModifyInstanceAccount(req, cb) {
        return this.request("ModifyInstanceAccount", req, cb);
    }
    /**
     * 本接口（DescribeInstanceSecurityGroup）用于查询实例安全组信息。
     */
    async DescribeInstanceSecurityGroup(req, cb) {
        return this.request("DescribeInstanceSecurityGroup", req, cb);
    }
    /**
     * 本接口（DescribeBackupDetail）用于查询实例的备份信息详情。
     */
    async DescribeBackupDetail(req, cb) {
        return this.request("DescribeBackupDetail", req, cb);
    }
    /**
     * 本接口（UpgradeVersionToMultiAvailabilityZones）用于升级实例支持多AZ。
     */
    async UpgradeVersionToMultiAvailabilityZones(req, cb) {
        return this.request("UpgradeVersionToMultiAvailabilityZones", req, cb);
    }
    /**
     * 本接口（DescribeGlobalReplicationArea）用于查询全球复制支持地域信息。
     */
    async DescribeGlobalReplicationArea(req, cb) {
        return this.request("DescribeGlobalReplicationArea", req, cb);
    }
    /**
     * 本接口（ModifyInstanceParams）用于修改 Redis 实例的参数配置。
     */
    async ModifyInstanceParams(req, cb) {
        return this.request("ModifyInstanceParams", req, cb);
    }
    /**
     * 本接口（ClearInstance）用于清空实例数据。
     */
    async ClearInstance(req, cb) {
        return this.request("ClearInstance", req, cb);
    }
    /**
     * 本接口（DescribeBackupUrl）用于查询备份 Rdb 文件的下载地址。
     */
    async DescribeBackupUrl(req, cb) {
        return this.request("DescribeBackupUrl", req, cb);
    }
    /**
     * 查询实例秒级备份信息
     */
    async DescribeSecondLevelBackupInfo(req, cb) {
        return this.request("DescribeSecondLevelBackupInfo", req, cb);
    }
    /**
     * 本接口（ModifyConnectionConfig）用于修改实例的连接配置，包括带宽和最大连接数。
     */
    async ModifyConnectionConfig(req, cb) {
        return this.request("ModifyConnectionConfig", req, cb);
    }
    /**
     * 本接口（DescribeInstanceLogDelivery）用于查询实例的日志投递配置。
     */
    async DescribeInstanceLogDelivery(req, cb) {
        return this.request("DescribeInstanceLogDelivery", req, cb);
    }
    /**
     * 本接口（ModifyInstance）用于修改实例相关信息。
     */
    async ModifyInstance(req, cb) {
        return this.request("ModifyInstance", req, cb);
    }
    /**
     * 本接口（ChangeInstanceRole）用于更换复制组内实例的角色。
     */
    async ChangeInstanceRole(req, cb) {
        return this.request("ChangeInstanceRole", req, cb);
    }
    /**
     * 本接口（DescribeInstanceNodeInfo）用于查询实例节点信息。
     */
    async DescribeInstanceNodeInfo(req, cb) {
        return this.request("DescribeInstanceNodeInfo", req, cb);
    }
    /**
     * 本接口（CreateInstanceAccount）用于自定义访问实例的账号。
     */
    async CreateInstanceAccount(req, cb) {
        return this.request("CreateInstanceAccount", req, cb);
    }
    /**
     * 本接口（ModifyInstanceEvent）用于修改实例的运维事件的执行计划。
     */
    async ModifyInstanceEvent(req, cb) {
        return this.request("ModifyInstanceEvent", req, cb);
    }
    /**
     * 本接口（UpgradeProxyVersion）用于升级实例 Proxy 版本。
     */
    async UpgradeProxyVersion(req, cb) {
        return this.request("UpgradeProxyVersion", req, cb);
    }
    /**
     * 本接口（DescribeInstanceMonitorTopNCmdTook）用于查询实例 CPU 耗时。
     */
    async DescribeInstanceMonitorTopNCmdTook(req, cb) {
        return this.request("DescribeInstanceMonitorTopNCmdTook", req, cb);
    }
    /**
     * 本接口（ModifyAutoBackupConfig）用于设置自动备份的配置。
     */
    async ModifyAutoBackupConfig(req, cb) {
        return this.request("ModifyAutoBackupConfig", req, cb);
    }
    /**
     * 本接口（DeleteParamTemplate）用于删除参数模板。
     */
    async DeleteParamTemplate(req, cb) {
        return this.request("DeleteParamTemplate", req, cb);
    }
    /**
     * 本接口（AddReplicationInstance）用于为全球复制组添加实例成员。
     */
    async AddReplicationInstance(req, cb) {
        return this.request("AddReplicationInstance", req, cb);
    }
    /**
     * 本接口（CloneInstances）用于基于当前实例的备份文件克隆一个完整的新实例。
     */
    async CloneInstances(req, cb) {
        return this.request("CloneInstances", req, cb);
    }
    /**
     * 该接口（CreateParamTemplate）用于创建参数模板。
     */
    async CreateParamTemplate(req, cb) {
        return this.request("CreateParamTemplate", req, cb);
    }
    /**
     * 本接口（DisableReplicaReadonly）用于禁用读写分离功能。
     */
    async DisableReplicaReadonly(req, cb) {
        return this.request("DisableReplicaReadonly", req, cb);
    }
    /**
     * 本接口（DescribeInstanceDTSInfo）用于查询实例 DTS 信息。
     */
    async DescribeInstanceDTSInfo(req, cb) {
        return this.request("DescribeInstanceDTSInfo", req, cb);
    }
    /**
     * 本接口（InquiryPriceUpgradeInstance）用于查询实例扩容价格。
     */
    async InquiryPriceUpgradeInstance(req, cb) {
        return this.request("InquiryPriceUpgradeInstance", req, cb);
    }
    /**
     * 本接口（RenewInstance）可用于为实例续费。
     */
    async RenewInstance(req, cb) {
        return this.request("RenewInstance", req, cb);
    }
    /**
     * 本接口（ModifyInstanceLogDelivery）用于开启或关闭投递实例日志到CLS。
     */
    async ModifyInstanceLogDelivery(req, cb) {
        return this.request("ModifyInstanceLogDelivery", req, cb);
    }
    /**
     * 本接口（AllocateWanAddress）用于开通实例外网访问。
     */
    async AllocateWanAddress(req, cb) {
        return this.request("AllocateWanAddress", req, cb);
    }
    /**
     * 本接口（DescribeProjectSecurityGroups）用于查询项目的安全组详情。
     */
    async DescribeProjectSecurityGroups(req, cb) {
        return this.request("DescribeProjectSecurityGroups", req, cb);
    }
    /**
     * 本接口（DescribeTendisSlowLog）用于查询 Tendis 实例慢查询。
     */
    async DescribeTendisSlowLog(req, cb) {
        return this.request("DescribeTendisSlowLog", req, cb);
    }
    /**
     * 本接口（ModifyParamTemplate）用于修改参数模板。
     */
    async ModifyParamTemplate(req, cb) {
        return this.request("ModifyParamTemplate", req, cb);
    }
    /**
     * 本接口（InquiryPriceCreateInstance）用于查询新购实例价格。
     */
    async InquiryPriceCreateInstance(req, cb) {
        return this.request("InquiryPriceCreateInstance", req, cb);
    }
    /**
     * 本接口（ModifyReplicationGroup）用于修改复制组信息。
     */
    async ModifyReplicationGroup(req, cb) {
        return this.request("ModifyReplicationGroup", req, cb);
    }
    /**
     * 本接口（DescribeInstanceSupportFeature）用于查询实例支持的功能特性。
     */
    async DescribeInstanceSupportFeature(req, cb) {
        return this.request("DescribeInstanceSupportFeature", req, cb);
    }
    /**
     * 本接口（DescribeInstanceParams）用于查询实例参数列表。
     */
    async DescribeInstanceParams(req, cb) {
        return this.request("DescribeInstanceParams", req, cb);
    }
    /**
     * 腾讯云数据库 Redis 已经于2022年10月31日下线查询实例大 Key 接口。具体公告，请参见 [查询实例大 Key 接口下线公告](https://cloud.tencent.com/document/product/239/81005)。
     */
    async DescribeInstanceMonitorBigKeyTypeDist(req, cb) {
        return this.request("DescribeInstanceMonitorBigKeyTypeDist", req, cb);
    }
    /**
     * 本接口（ReleaseWanAddress）用于关闭外网访问。
     */
    async ReleaseWanAddress(req, cb) {
        return this.request("ReleaseWanAddress", req, cb);
    }
    /**
     * 本接口（DisassociateSecurityGroups）用于安全组批量解绑实例。
     */
    async DisassociateSecurityGroups(req, cb) {
        return this.request("DisassociateSecurityGroups", req, cb);
    }
    /**
     * 本接口（ManualBackupInstance）用于手动备份Redis实例。
     */
    async ManualBackupInstance(req, cb) {
        return this.request("ManualBackupInstance", req, cb);
    }
    /**
     * 本接口（DescribeInstanceSpecBandwidth）用于查询或计算带宽规格。
     */
    async DescribeInstanceSpecBandwidth(req, cb) {
        return this.request("DescribeInstanceSpecBandwidth", req, cb);
    }
    /**
     * 本接口（DeleteInstanceAccount）用于删除实例子账号。
     */
    async DeleteInstanceAccount(req, cb) {
        return this.request("DeleteInstanceAccount", req, cb);
    }
    /**
     * 本接口（SwitchProxy）为 Proxy 模拟故障接口。
     */
    async SwitchProxy(req, cb) {
        return this.request("SwitchProxy", req, cb);
    }
    /**
     * 本接口（DestroyPrepaidInstance）用于退还包年包月计费的 Redis 实例。
     */
    async DestroyPrepaidInstance(req, cb) {
        return this.request("DestroyPrepaidInstance", req, cb);
    }
    /**
     * 本接口（DescribeInstanceParamRecords）用于查询参数修改历史列表。
     */
    async DescribeInstanceParamRecords(req, cb) {
        return this.request("DescribeInstanceParamRecords", req, cb);
    }
    /**
     * 本接口（DescribeParamTemplateInfo）用于查询参数模板详情。
     */
    async DescribeParamTemplateInfo(req, cb) {
        return this.request("DescribeParamTemplateInfo", req, cb);
    }
    /**
     * 本接口（DestroyPostpaidInstance）用于销毁按量计费实例。
     */
    async DestroyPostpaidInstance(req, cb) {
        return this.request("DestroyPostpaidInstance", req, cb);
    }
    /**
     * 本接口（StartupInstance）用于实例解隔离。
     */
    async StartupInstance(req, cb) {
        return this.request("StartupInstance", req, cb);
    }
    /**
     * 本接口（DescribeInstanceMonitorTookDist）用于查询实例访问的耗时分布。
     */
    async DescribeInstanceMonitorTookDist(req, cb) {
        return this.request("DescribeInstanceMonitorTookDist", req, cb);
    }
    /**
     * 本接口（DescribeParamTemplates）用于查询参数模板列表。
     */
    async DescribeParamTemplates(req, cb) {
        return this.request("DescribeParamTemplates", req, cb);
    }
    /**
     * 本接口（DescribeInstanceBackups）用于查询实例备份列表。
     */
    async DescribeInstanceBackups(req, cb) {
        return this.request("DescribeInstanceBackups", req, cb);
    }
    /**
     * 本接口（ResetPassword）用于重置实例访问密码。
     */
    async ResetPassword(req, cb) {
        return this.request("ResetPassword", req, cb);
    }
    /**
     * 本接口（RemoveReplicationInstance）用于移除复制组中的实例。
     */
    async RemoveReplicationInstance(req, cb) {
        return this.request("RemoveReplicationInstance", req, cb);
    }
    /**
     * 本接口（UpgradeSmallVersion）用于实例小版本升级。
     */
    async UpgradeSmallVersion(req, cb) {
        return this.request("UpgradeSmallVersion", req, cb);
    }
    /**
     * 本接口（ModifyInstancePassword）用于修改实例访问密码。
     */
    async ModifyInstancePassword(req, cb) {
        return this.request("ModifyInstancePassword", req, cb);
    }
    /**
     * 本接口（CreateReplicationGroup）用于创建复制组。
     */
    async CreateReplicationGroup(req, cb) {
        return this.request("CreateReplicationGroup", req, cb);
    }
    /**
     * 该接口已下线，请使用数据库智能管家 DBbrain 接口 [DescribeProxyProcessStatistics](https://cloud.tencent.com/document/product/1130/84544) 获取实例访问来源。
     */
    async DescribeInstanceMonitorSIP(req, cb) {
        return this.request("DescribeInstanceMonitorSIP", req, cb);
    }
    /**
     * 本接口（DescribeProjectSecurityGroup）用于查询项目安全组信息。
     */
    async DescribeProjectSecurityGroup(req, cb) {
        return this.request("DescribeProjectSecurityGroup", req, cb);
    }
    /**
     * 本接口（DescribeInstanceMonitorHotKey）用于查询实例热Key。
     */
    async DescribeInstanceMonitorHotKey(req, cb) {
        return this.request("DescribeInstanceMonitorHotKey", req, cb);
    }
    /**
     * 本接口（ModfiyInstancePassword）用于修改实例访问密码。鉴于该接口名存在拼写错误，现已更正为（[ModifyInstancePassword](https://cloud.tencent.com/document/product/239/111555)）接口，推荐使用更正后的接口。
     */
    async ModfiyInstancePassword(req, cb) {
        return this.request("ModfiyInstancePassword", req, cb);
    }
    /**
     * 本接口（EnableReplicaReadonly）用于启用读写分离功能。
     */
    async EnableReplicaReadonly(req, cb) {
        return this.request("EnableReplicaReadonly", req, cb);
    }
    /**
     * 本接口 (AssociateSecurityGroups) 用于将一个安全组绑定于一个或多个数据库实例。创建实例时，未配置安全组，建议通过该接口，绑定安全组。
     */
    async AssociateSecurityGroups(req, cb) {
        return this.request("AssociateSecurityGroups", req, cb);
    }
    /**
     * 本接口（DescribeSSLStatus）用于查询实例 SSL 认证相关信息，包括开启状态、配置状态、证书地址等。
     */
    async DescribeSSLStatus(req, cb) {
        return this.request("DescribeSSLStatus", req, cb);
    }
    /**
     * 腾讯云数据库 Redis 已经于2022年10月31日下线查询实例大 Key 接口。具体公告，请参见[查询实例大 Key 接口下线公告](https://cloud.tencent.com/document/product/239/81005)。
     */
    async DescribeInstanceMonitorBigKey(req, cb) {
        return this.request("DescribeInstanceMonitorBigKey", req, cb);
    }
    /**
     * 本接口（DescribeRedisClusters）用于查询Redis独享集群列表。
     */
    async DescribeRedisClusters(req, cb) {
        return this.request("DescribeRedisClusters", req, cb);
    }
    /**
     * 本接口（KillMasterGroup）用于模拟故障。
     */
    async KillMasterGroup(req, cb) {
        return this.request("KillMasterGroup", req, cb);
    }
    /**
     * 本接口（DescribeCommonDBInstances）用于查询Redis实例列表信息。当前该接口已废弃。
     */
    async DescribeCommonDBInstances(req, cb) {
        return this.request("DescribeCommonDBInstances", req, cb);
    }
    /**
     * 本接口（DescribeSlowLog）查询实例慢查询记录。
     */
    async DescribeSlowLog(req, cb) {
        return this.request("DescribeSlowLog", req, cb);
    }
    /**
     * 本接口（DescribeBackupDownloadRestriction）用于查询当前地域数据库备份文件的下载地址。
     */
    async DescribeBackupDownloadRestriction(req, cb) {
        return this.request("DescribeBackupDownloadRestriction", req, cb);
    }
    /**
     * 本接口（DescribeInstanceZoneInfo）用于查询 Redis 节点详细信息。
     */
    async DescribeInstanceZoneInfo(req, cb) {
        return this.request("DescribeInstanceZoneInfo", req, cb);
    }
    /**
     * 本接口（DescribeInstanceEvents）用于查询 Redis 实例事件信息。
     */
    async DescribeInstanceEvents(req, cb) {
        return this.request("DescribeInstanceEvents", req, cb);
    }
    /**
     * 在通过 DTS 支持跨可用区灾备的场景中，通过该接口（SwitchInstanceVip）交换实例 VIP 完成实例灾备切换。交换 VIP 后目标实例可写，源和目标实例VIP互换，同时源与目标实例间 DTS 同步任务断开。
     */
    async SwitchInstanceVip(req, cb) {
        return this.request("SwitchInstanceVip", req, cb);
    }
    /**
     * 本接口（DescribeDBSecurityGroups）用于查询实例的安全组详情。
     */
    async DescribeDBSecurityGroups(req, cb) {
        return this.request("DescribeDBSecurityGroups", req, cb);
    }
    /**
     * 本接口（DescribeReplicationGroup）用于查询复制组。
     */
    async DescribeReplicationGroup(req, cb) {
        return this.request("DescribeReplicationGroup", req, cb);
    }
    /**
     * 本接口（InquiryPriceRenewInstance）用于查询包年包月计费实例的续费价格。
     */
    async InquiryPriceRenewInstance(req, cb) {
        return this.request("InquiryPriceRenewInstance", req, cb);
    }
    /**
     * 本接口（ModifyMaintenanceWindow）用于修改实例维护时间窗时间，需要进行版本升级或者架构升级的实例，会在维护时间窗内进行时间切换。注意：已经发起版本升级或者架构升级的实例，无法修改维护时间窗。
     */
    async ModifyMaintenanceWindow(req, cb) {
        return this.request("ModifyMaintenanceWindow", req, cb);
    }
    /**
     * 本接口（ModifyNetworkConfig）用于修改实例网络配置。
     */
    async ModifyNetworkConfig(req, cb) {
        return this.request("ModifyNetworkConfig", req, cb);
    }
    /**
     * 本接口（DescribeInstanceShards）用于获取集群架构实例的分片信息。
     */
    async DescribeInstanceShards(req, cb) {
        return this.request("DescribeInstanceShards", req, cb);
    }
    /**
     * 本接口（RestoreInstance）用于恢复实例。
     */
    async RestoreInstance(req, cb) {
        return this.request("RestoreInstance", req, cb);
    }
    /**
     * 本接口（DescribeInstances）用于查询Redis实例列表。
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 本接口（OpenSSL）用于开启 SSL 加密认证功能。
     */
    async OpenSSL(req, cb) {
        return this.request("OpenSSL", req, cb);
    }
    /**
     * 本接口（DescribeAutoBackupConfig）用于获取自动备份配置规则。
     */
    async DescribeAutoBackupConfig(req, cb) {
        return this.request("DescribeAutoBackupConfig", req, cb);
    }
    /**
     * 本接口（DescribeBandwidthRange）用于查询实例带宽信息。
     */
    async DescribeBandwidthRange(req, cb) {
        return this.request("DescribeBandwidthRange", req, cb);
    }
    /**
     * 本接口（DescribeReplicationGroupInstance）用于查询复制组信息。
     */
    async DescribeReplicationGroupInstance(req, cb) {
        return this.request("DescribeReplicationGroupInstance", req, cb);
    }
    /**
     * 本接口（DescribeProxySlowLog）用于查询代理慢查询。
     */
    async DescribeProxySlowLog(req, cb) {
        return this.request("DescribeProxySlowLog", req, cb);
    }
    /**
     * 本接口（ModifyInstanceAvailabilityZones）用于变更实例可用区
     */
    async ModifyInstanceAvailabilityZones(req, cb) {
        return this.request("ModifyInstanceAvailabilityZones", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceSecurityGroups）用于对实例原有的安全组列表进行修改。
     */
    async ModifyDBInstanceSecurityGroups(req, cb) {
        return this.request("ModifyDBInstanceSecurityGroups", req, cb);
    }
    /**
     * 该接口（ChangeMasterInstance）用于将复制组内只读实例设置为主实例。
     */
    async ChangeMasterInstance(req, cb) {
        return this.request("ChangeMasterInstance", req, cb);
    }
    /**
     * 本接口（UpgradeInstance）用于变更实例的配置规格。
     */
    async UpgradeInstance(req, cb) {
        return this.request("UpgradeInstance", req, cb);
    }
    /**
     * 本接口（DescribeRedisClusterOverview）用于查询 Redis 独享集群概览信息。
     */
    async DescribeRedisClusterOverview(req, cb) {
        return this.request("DescribeRedisClusterOverview", req, cb);
    }
    /**
     * 本接口（ApplyParamsTemplate）用于应用参数模板到实例。
     */
    async ApplyParamsTemplate(req, cb) {
        return this.request("ApplyParamsTemplate", req, cb);
    }
    /**
     * 本接口（DescribeMaintenanceWindow）用于查询实例维护时间窗。在实例需要进行版本升级或者架构升级的时候，会在维护时间窗时间内进行切换
     */
    async DescribeMaintenanceWindow(req, cb) {
        return this.request("DescribeMaintenanceWindow", req, cb);
    }
    /**
     * 本接口（CreateInstances）用于创建 Redis 实例。
     */
    async CreateInstances(req, cb) {
        return this.request("CreateInstances", req, cb);
    }
    /**
     * 本接口（DescribeInstanceDealDetail）用于查询订单信息。
     */
    async DescribeInstanceDealDetail(req, cb) {
        return this.request("DescribeInstanceDealDetail", req, cb);
    }
    /**
     * 本接口（CloseSSL）用于关闭SSL加密认证。
     */
    async CloseSSL(req, cb) {
        return this.request("CloseSSL", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249322, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.region = void 0;
const v20220627_1 = require("./v20220627");
exports.region = {
    v20220627: v20220627_1.v20220627,
};

}, function(modId) { var map = {"./v20220627":1738984249323}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249323, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220627 = void 0;
const Models = require("./region_models");
const region_client_1 = require("./region_client");
exports.v20220627 = {
    Client: region_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./region_models":1738984249324,"./region_client":1738984249325}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249324, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249325, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * region client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("region.tencentcloudapi.com", "2022-06-27", clientConfig);
    }
    /**
     * 本接口(DescribeProducts)用于查询各个支持地域列表查询的产品信息。
     */
    async DescribeProducts(req, cb) {
        return this.request("DescribeProducts", req, cb);
    }
    /**
     * 本接口(DescribeRegions)用于查询各个产品支持地域信息。
     */
    async DescribeRegions(req, cb) {
        return this.request("DescribeRegions", req, cb);
    }
    /**
     * 本接口(DescribeZones)用于查询产品可用区信息。
     */
    async DescribeZones(req, cb) {
        return this.request("DescribeZones", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249326, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.rkp = void 0;
const v20191209_1 = require("./v20191209");
exports.rkp = {
    v20191209: v20191209_1.v20191209,
};

}, function(modId) { var map = {"./v20191209":1738984249327}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249327, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20191209 = void 0;
const Models = require("./rkp_models");
const rkp_client_1 = require("./rkp_client");
exports.v20191209 = {
    Client: rkp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./rkp_models":1738984249328,"./rkp_client":1738984249329}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249328, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249329, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * rkp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("rkp.tencentcloudapi.com", "2019-12-09", clientConfig);
    }
    /**
     * 产品侧确认风险探针已停售，无收入，并且已经停服。目前服务使用自建redis，不符合规范需要整改下线。

根据DevicceToken查询OpenID。
     */
    async GetOpenId(req, cb) {
        return this.request("GetOpenId", req, cb);
    }
    /**
     * 产品侧确认风险探针已停售，无收入，并且已经停服。目前服务使用自建redis，不符合规范需要整改下线。

获取token接口。
     */
    async GetToken(req, cb) {
        return this.request("GetToken", req, cb);
    }
    /**
     * 产品侧确认风险探针已停售，无收入，并且已经停服。目前服务使用自建redis，不符合规范需要整改下线。

腾讯天御设备风险查询接口，输入由客户应用自主采集的设备信息， 通过腾讯大数据风控能力，可以准确根据输入设备信息，还原设备库中的设备ID，并且识别设备的风险，解决客户业务过程中的设备风险，降低企业损失。
     */
    async QueryDevAndRisk(req, cb) {
        return this.request("QueryDevAndRisk", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249330, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.rp = void 0;
const v20200224_1 = require("./v20200224");
exports.rp = {
    v20200224: v20200224_1.v20200224,
};

}, function(modId) { var map = {"./v20200224":1738984249331}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249331, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200224 = void 0;
const Models = require("./rp_models");
const rp_client_1 = require("./rp_client");
exports.v20200224 = {
    Client: rp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./rp_models":1738984249332,"./rp_client":1738984249333}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249332, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249333, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * rp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("rp.tencentcloudapi.com", "2020-02-24", clientConfig);
    }
    /**
     * 注册保护服务（RegisterProtection，RP）针对网站、APP 的线上注册场景，遇到 “恶意注册” 、“小号注册” 、“注册器注册” 等恶意行为，提供基于天御 DNA 算法的恶意防护引擎，从账号、设备、行为三个维度有效识别 “恶意注册”，从“源头”上防范业务风险。
     */
    async QueryRegisterProtection(req, cb) {
        return this.request("QueryRegisterProtection", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249334, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.rum = void 0;
const v20210622_1 = require("./v20210622");
exports.rum = {
    v20210622: v20210622_1.v20210622,
};

}, function(modId) { var map = {"./v20210622":1738984249335}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249335, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210622 = void 0;
const Models = require("./rum_models");
const rum_client_1 = require("./rum_client");
exports.v20210622 = {
    Client: rum_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./rum_models":1738984249336,"./rum_client":1738984249337}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249336, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249337, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * rum client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("rum.tencentcloudapi.com", "2021-06-22", clientConfig);
    }
    /**
     * 查询片区信息
     */
    async DescribeTawAreas(req, cb) {
        return this.request("DescribeTawAreas", req, cb);
    }
    /**
     * 获取项目下的日志列表，分钟级
     */
    async DescribeRumStatsLogList(req, cb) {
        return this.request("DescribeRumStatsLogList", req, cb);
    }
    /**
     * 创建对应项目的文件记录
     */
    async CreateReleaseFile(req, cb) {
        return this.request("CreateReleaseFile", req, cb);
    }
    /**
     * 获取首页分数列表
     */
    async DescribeScores(req, cb) {
        return this.request("DescribeScores", req, cb);
    }
    /**
     * 获取项目下的日志列表（实例创建的项目下的日志列表）
     */
    async DescribeRumLogList(req, cb) {
        return this.request("DescribeRumLogList", req, cb);
    }
    /**
     * 查询实例信息
     */
    async DescribeTawInstances(req, cb) {
        return this.request("DescribeTawInstances", req, cb);
    }
    /**
     * 获取PerformancePage信息
     */
    async DescribeDataPerformancePage(req, cb) {
        return this.request("DescribeDataPerformancePage", req, cb);
    }
    /**
     * 获取LogUrlStatistics信息
     */
    async DescribeDataLogUrlStatistics(req, cb) {
        return this.request("DescribeDataLogUrlStatistics", req, cb);
    }
    /**
     * 获取DescribeDataFetchProject信息。已下线，请使用DescribeDataFetchUrl
     */
    async DescribeDataFetchProject(req, cb) {
        return this.request("DescribeDataFetchProject", req, cb);
    }
    /**
     * 删除实例，谨慎操作，不可恢复
     */
    async DeleteInstance(req, cb) {
        return this.request("DeleteInstance", req, cb);
    }
    /**
     * 获取项目下的日志列表（实例创建的项目下的日志列表）
     */
    async DescribeRumLogExport(req, cb) {
        return this.request("DescribeRumLogExport", req, cb);
    }
    /**
     * 获取项目下的日志导出列表
     */
    async DescribeRumLogExports(req, cb) {
        return this.request("DescribeRumLogExports", req, cb);
    }
    /**
     * 删除用户名下的星标项目
     */
    async DeleteStarProject(req, cb) {
        return this.request("DeleteStarProject", req, cb);
    }
    /**
     * 恢复 RUM 业务系统，恢复后，用户可以正常使用和上报数据
     */
    async ResumeInstance(req, cb) {
        return this.request("ResumeInstance", req, cb);
    }
    /**
     * 获取首页错误信息
     */
    async DescribeError(req, cb) {
        return this.request("DescribeError", req, cb);
    }
    /**
     * 获取项目下的日志聚合信息
     */
    async DescribeRumGroupLog(req, cb) {
        return this.request("DescribeRumGroupLog", req, cb);
    }
    /**
     * 停止项目使用与上报数据
     */
    async StopProject(req, cb) {
        return this.request("StopProject", req, cb);
    }
    /**
     * 查询 app 监控个例聚合列表
     */
    async DescribeAppSingleCaseList(req, cb) {
        return this.request("DescribeAppSingleCaseList", req, cb);
    }
    /**
     * 获取项目下的PV列表
     */
    async DescribePvList(req, cb) {
        return this.request("DescribePvList", req, cb);
    }
    /**
     * 获取DescribeDataWebVitalsPage信息，用户核心活动信息
页面加载性能之Web Vitals。性能关键点
     */
    async DescribeDataWebVitalsPage(req, cb) {
        return this.request("DescribeDataWebVitalsPage", req, cb);
    }
    /**
     * 获取DescribeDataStaticUrl信息
     */
    async DescribeDataStaticUrl(req, cb) {
        return this.request("DescribeDataStaticUrl", req, cb);
    }
    /**
     * 新增修改限流
     */
    async ModifyProjectLimit(req, cb) {
        return this.request("ModifyProjectLimit", req, cb);
    }
    /**
     * 获取DescribeDataPvUrlStatistics信息
     */
    async DescribeDataPvUrlStatistics(req, cb) {
        return this.request("DescribeDataPvUrlStatistics", req, cb);
    }
    /**
     * 查询 app 监控个例样本详情列表
     */
    async DescribeAppSingleCaseDetailList(req, cb) {
        return this.request("DescribeAppSingleCaseDetailList", req, cb);
    }
    /**
     * 获取 app 监控指标数据
     */
    async DescribeAppMetricsData(req, cb) {
        return this.request("DescribeAppMetricsData", req, cb);
    }
    /**
     * 获取DescribeDataSetUrlStatistics信息
     */
    async DescribeDataSetUrlStatistics(req, cb) {
        return this.request("DescribeDataSetUrlStatistics", req, cb);
    }
    /**
     * 修改 RUM 业务系统
     */
    async ModifyInstance(req, cb) {
        return this.request("ModifyInstance", req, cb);
    }
    /**
     * 获取DescribeDataStaticResource信息
     */
    async DescribeDataStaticResource(req, cb) {
        return this.request("DescribeDataStaticResource", req, cb);
    }
    /**
     * 获取应用上报抽样信息
     */
    async DescribeProjectLimits(req, cb) {
        return this.request("DescribeProjectLimits", req, cb);
    }
    /**
     * 用于查询 app 监控多维分析数据
     */
    async DescribeAppDimensionMetrics(req, cb) {
        return this.request("DescribeAppDimensionMetrics", req, cb);
    }
    /**
     * 获取DescribeDataCustomUrl信息
     */
    async DescribeDataCustomUrl(req, cb) {
        return this.request("DescribeDataCustomUrl", req, cb);
    }
    /**
     * 创建白名单
     */
    async CreateWhitelist(req, cb) {
        return this.request("CreateWhitelist", req, cb);
    }
    /**
     * 获取项目列表（实例创建的团队下的项目列表）
     */
    async DescribeProjects(req, cb) {
        return this.request("DescribeProjects", req, cb);
    }
    /**
     * 恢复应用使用与上报数据
     */
    async ResumeProject(req, cb) {
        return this.request("ResumeProject", req, cb);
    }
    /**
     * 个人用户添加星标项目
     */
    async CreateStarProject(req, cb) {
        return this.request("CreateStarProject", req, cb);
    }
    /**
     * 删除白名单
     */
    async DeleteWhitelist(req, cb) {
        return this.request("DeleteWhitelist", req, cb);
    }
    /**
     * 获取DescribeDataFetchUrlInfo信息
     */
    async DescribeDataFetchUrlInfo(req, cb) {
        return this.request("DescribeDataFetchUrlInfo", req, cb);
    }
    /**
     * 停止实例
     */
    async StopInstance(req, cb) {
        return this.request("StopInstance", req, cb);
    }
    /**
     * 修改 RUM 应用信息
     */
    async ModifyProject(req, cb) {
        return this.request("ModifyProject", req, cb);
    }
    /**
     * 获取应用对应sourcemap文件列表
     */
    async DescribeReleaseFiles(req, cb) {
        return this.request("DescribeReleaseFiles", req, cb);
    }
    /**
     * 获取白名单列表
     */
    async DescribeWhitelists(req, cb) {
        return this.request("DescribeWhitelists", req, cb);
    }
    /**
     * 获取DescribeDataEventUrl信息
     */
    async DescribeDataEventUrl(req, cb) {
        return this.request("DescribeDataEventUrl", req, cb);
    }
    /**
     * 获取上传文件存储的临时密钥
     */
    async DescribeReleaseFileSign(req, cb) {
        return this.request("DescribeReleaseFileSign", req, cb);
    }
    /**
     * 获取loginfo信息
     */
    async DescribeDataLogUrlInfo(req, cb) {
        return this.request("DescribeDataLogUrlInfo", req, cb);
    }
    /**
     * 获取项目下的UV列表
     */
    async DescribeUvList(req, cb) {
        return this.request("DescribeUvList", req, cb);
    }
    /**
     * 创建 RUM 应用（归属于某个团队）
     */
    async CreateProject(req, cb) {
        return this.request("CreateProject", req, cb);
    }
    /**
     * 获取DescribeDataStaticProject信息
     */
    async DescribeDataStaticProject(req, cb) {
        return this.request("DescribeDataStaticProject", req, cb);
    }
    /**
     * 获取PvUrlInfo信息
     */
    async DescribeDataPvUrlInfo(req, cb) {
        return this.request("DescribeDataPvUrlInfo", req, cb);
    }
    /**
     * 删除给定的 rum 的项目
     */
    async DeleteProject(req, cb) {
        return this.request("DeleteProject", req, cb);
    }
    /**
     * 创建 RUM 业务系统
     */
    async CreateTawInstance(req, cb) {
        return this.request("CreateTawInstance", req, cb);
    }
    /**
     * 获取DescribeDataFetchUrl信息
     */
    async DescribeDataFetchUrl(req, cb) {
        return this.request("DescribeDataFetchUrl", req, cb);
    }
    /**
     * 将对应 sourcemap 文件删除
     */
    async DeleteReleaseFile(req, cb) {
        return this.request("DeleteReleaseFile", req, cb);
    }
    /**
     * 获取项目上报量
     */
    async DescribeDataReportCount(req, cb) {
        return this.request("DescribeDataReportCount", req, cb);
    }
    /**
     * 转发monitor查询
     */
    async DescribeData(req, cb) {
        return this.request("DescribeData", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249338, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.scf = void 0;
const v20180416_1 = require("./v20180416");
exports.scf = {
    v20180416: v20180416_1.v20180416,
};

}, function(modId) { var map = {"./v20180416":1738984249339}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249339, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180416 = void 0;
const Models = require("./scf_models");
const scf_client_1 = require("./scf_client");
exports.v20180416 = {
    Client: scf_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./scf_models":1738984249340,"./scf_client":1738984249341}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249340, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249341, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * scf client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("scf.tencentcloudapi.com", "2018-04-16", clientConfig);
    }
    /**
     * 更新别名的配置
     */
    async UpdateAlias(req, cb) {
        return this.request("UpdateAlias", req, cb);
    }
    /**
     * 更新命名空间
     */
    async UpdateNamespace(req, cb) {
        return this.request("UpdateNamespace", req, cb);
    }
    /**
     * SCF同步调用函数接口。
     */
    async InvokeFunction(req, cb) {
        return this.request("InvokeFunction", req, cb);
    }
    /**
     * 该接口根据传入参数删除函数。
     */
    async DeleteFunction(req, cb) {
        return this.request("DeleteFunction", req, cb);
    }
    /**
     * 终止正在运行中的函数异步事件
     */
    async TerminateAsyncEvent(req, cb) {
        return this.request("TerminateAsyncEvent", req, cb);
    }
    /**
     * 获取函数触发器列表
     */
    async ListTriggers(req, cb) {
        return this.request("ListTriggers", req, cb);
    }
    /**
     * 该接口根据传入的参数查询函数的版本。
     */
    async ListVersionByFunction(req, cb) {
        return this.request("ListVersionByFunction", req, cb);
    }
    /**
     * 获取层版本详细信息，包括用于下载层中文件的链接。
     */
    async GetLayerVersion(req, cb) {
        return this.request("GetLayerVersion", req, cb);
    }
    /**
     * 该接口根据参数输入设置新的触发方式。
     */
    async CreateTrigger(req, cb) {
        return this.request("CreateTrigger", req, cb);
    }
    /**
     * 该接口根据传入的参数创建命名空间。
     */
    async CreateNamespace(req, cb) {
        return this.request("CreateNamespace", req, cb);
    }
    /**
     * 复制一个函数，您可以选择将复制出的新函数放置在特定的Region和Namespace。
注：本接口**不会**复制函数的以下对象或属性：
1. 函数的触发器
2. 除了$LATEST以外的其它版本
3. 函数配置的日志投递到的CLS目标。

如有需要，您可以在复制后手动配置新函数。
     */
    async CopyFunction(req, cb) {
        return this.request("CopyFunction", req, cb);
    }
    /**
     * 该接口根据参数传入删除已有的触发方式。
     */
    async DeleteTrigger(req, cb) {
        return this.request("DeleteTrigger", req, cb);
    }
    /**
     * 返回一个函数下的全部别名，可以根据特定函数版本过滤。
     */
    async ListAliases(req, cb) {
        return this.request("ListAliases", req, cb);
    }
    /**
     * 该接口根据传入的参数删除命名空间。
     */
    async DeleteNamespace(req, cb) {
        return this.request("DeleteNamespace", req, cb);
    }
    /**
     * 获取函数或函数某一版本的预置并发详情。
     */
    async GetProvisionedConcurrencyConfig(req, cb) {
        return this.request("GetProvisionedConcurrencyConfig", req, cb);
    }
    /**
     * 使用给定的zip文件或cos对象创建一个层的新版本，每次使用相同的层的名称调用本接口，都会生成一个新版本。
     */
    async PublishLayerVersion(req, cb) {
        return this.request("PublishLayerVersion", req, cb);
    }
    /**
     * 遍历域名列表信息
     */
    async ListCustomDomains(req, cb) {
        return this.request("ListCustomDomains", req, cb);
    }
    /**
     * 删除函数版本的预置并发配置。
     */
    async DeleteProvisionedConcurrencyConfig(req, cb) {
        return this.request("DeleteProvisionedConcurrencyConfig", req, cb);
    }
    /**
     * 该接口用于用户发布新版本函数。
     */
    async PublishVersion(req, cb) {
        return this.request("PublishVersion", req, cb);
    }
    /**
     * 删除指定层的指定版本，被删除的版本无法再关联到函数上，但不会影响正在引用这个层的函数。
     */
    async DeleteLayerVersion(req, cb) {
        return this.request("DeleteLayerVersion", req, cb);
    }
    /**
     * 该接口获取某个函数的详细信息，包括名称、代码、处理方法、关联触发器和超时时间等字段。
     */
    async GetFunction(req, cb) {
        return this.request("GetFunction", req, cb);
    }
    /**
     * 删除一个函数版本的别名
     */
    async DeleteAlias(req, cb) {
        return this.request("DeleteAlias", req, cb);
    }
    /**
     * 获取函数异步执行事件状态，事件状态保留 3 * 24 小时（从事件完成开始计时）。
     */
    async GetAsyncEventStatus(req, cb) {
        return this.request("GetAsyncEventStatus", req, cb);
    }
    /**
     * 修改账号并发限制配额
     */
    async PutTotalConcurrencyConfig(req, cb) {
        return this.request("PutTotalConcurrencyConfig", req, cb);
    }
    /**
     * 更新触发器状态的值
     */
    async UpdateTriggerStatus(req, cb) {
        return this.request("UpdateTriggerStatus", req, cb);
    }
    /**
     * 该接口根据传入参数删除函数的指定版本。
     */
    async DeleteFunctionVersion(req, cb) {
        return this.request("DeleteFunctionVersion", req, cb);
    }
    /**
     * 该接口根据指定的日志查询条件返回函数运行日志。该接口已下线，查询函数请求运行的返回信息，请使用 [GetRequestStatus](https://cloud.tencent.com/document/product/583/65348)。查询函数运行日志，请参考[日志检索教程](https://cloud.tencent.com/document/product/583/52637)。
     */
    async GetFunctionLogs(req, cb) {
        return this.request("GetFunctionLogs", req, cb);
    }
    /**
     * 为某个函数版本创建一个别名，您可以使用别名来标记特定的函数版本，如DEV/RELEASE版本，也可以随时修改别名指向的版本。
一个别名必须指向一个主版本，此外还可以同时指向一个附加版本。调用函数时指定特定的别名，则请求会被发送到别名指向的版本上，您可以配置请求发送到主版本和附加版本的比例。
     */
    async CreateAlias(req, cb) {
        return this.request("CreateAlias", req, cb);
    }
    /**
     * 设置函数某一非$LATEST版本的预置并发。
     */
    async PutProvisionedConcurrencyConfig(req, cb) {
        return this.request("PutProvisionedConcurrencyConfig", req, cb);
    }
    /**
     * 删除自定义域名
     */
    async DeleteCustomDomain(req, cb) {
        return this.request("DeleteCustomDomain", req, cb);
    }
    /**
     * 更新函数的异步重试配置，包括重试次数和消息保留时间
     */
    async UpdateFunctionEventInvokeConfig(req, cb) {
        return this.request("UpdateFunctionEventInvokeConfig", req, cb);
    }
    /**
     * 获取函数异步重试配置，包括重试次数和消息保留时间
     */
    async GetFunctionEventInvokeConfig(req, cb) {
        return this.request("GetFunctionEventInvokeConfig", req, cb);
    }
    /**
     * 返回全部层的列表，其中包含了每个层最新版本的信息，可以通过适配运行时进行过滤。
     */
    async ListLayers(req, cb) {
        return this.request("ListLayers", req, cb);
    }
    /**
     * 拉取函数异步事件列表
     */
    async ListAsyncEvents(req, cb) {
        return this.request("ListAsyncEvents", req, cb);
    }
    /**
     * 返回指定层的全部版本的信息
     */
    async ListLayerVersions(req, cb) {
        return this.request("ListLayerVersions", req, cb);
    }
    /**
     * 支持触发器配置更新。
默认接口请求频率限制：20次/秒

注意：目前只支持timer触发器和ckafka触发器更新！

timer触发器和ckafka触发器支持更新字段有：Enable、TriggerDesc、Description、CustomArgument。

timer触发器TriggerDesc支持5段式和7段式的更新。

ckafka触发器TriggerDesc支持Retry、MaxMsgNum、TimeOut参数更新，不传值表示原值不变，传值不能为空。

Enable 触发器开启或关闭，传参为OPEN为开启，CLOSE为关闭。不传值表示原值不变，传值不能为空。

Description 触发器描述，不传值保持原值不变，传值为空则为空。

CustomArgument 触发器用户附加信息（注意：只有timer触发器展示），不传值保持原值不变，传值为空则为空。
     */
    async UpdateTrigger(req, cb) {
        return this.request("UpdateTrigger", req, cb);
    }
    /**
     * 创建自定义域名
     */
    async CreateCustomDomain(req, cb) {
        return this.request("CreateCustomDomain", req, cb);
    }
    /**
     * 该接口根据传入的查询参数返回相关函数信息。
     */
    async ListFunctions(req, cb) {
        return this.request("ListFunctions", req, cb);
    }
    /**
     * 该接口根据传入参数更新函数配置。
     */
    async UpdateFunctionConfiguration(req, cb) {
        return this.request("UpdateFunctionConfiguration", req, cb);
    }
    /**
     * 设置函数最大独占配额
     */
    async PutReservedConcurrencyConfig(req, cb) {
        return this.request("PutReservedConcurrencyConfig", req, cb);
    }
    /**
     * 获取账户信息
     */
    async GetAccount(req, cb) {
        return this.request("GetAccount", req, cb);
    }
    /**
     * 删除函数的最大独占配额配置。
     */
    async DeleteReservedConcurrencyConfig(req, cb) {
        return this.request("DeleteReservedConcurrencyConfig", req, cb);
    }
    /**
     * 该接口用于运行函数。
     */
    async Invoke(req, cb) {
        return this.request("Invoke", req, cb);
    }
    /**
     * 该接口用于获取函数代码包的下载地址。
     */
    async GetFunctionAddress(req, cb) {
        return this.request("GetFunctionAddress", req, cb);
    }
    /**
     * 获取别名的详细信息，包括名称、描述、版本、路由信息等。
     */
    async GetAlias(req, cb) {
        return this.request("GetAlias", req, cb);
    }
    /**
     * 获取函数的最大独占配额详情。
     */
    async GetReservedConcurrencyConfig(req, cb) {
        return this.request("GetReservedConcurrencyConfig", req, cb);
    }
    /**
     * 查看云函数自定义域名详情
     */
    async GetCustomDomain(req, cb) {
        return this.request("GetCustomDomain", req, cb);
    }
    /**
     * 更新自定义域名相关配置
     */
    async UpdateCustomDomain(req, cb) {
        return this.request("UpdateCustomDomain", req, cb);
    }
    /**
     * 该接口根据传入参数创建新的函数。
     */
    async CreateFunction(req, cb) {
        return this.request("CreateFunction", req, cb);
    }
    /**
     * 列出命名空间列表
     */
    async ListNamespaces(req, cb) {
        return this.request("ListNamespaces", req, cb);
    }
    /**
     * 该接口根据传入参数更新函数代码。
     */
    async UpdateFunctionCode(req, cb) {
        return this.request("UpdateFunctionCode", req, cb);
    }
    /**
     * 该接口根据指定的查询条件返回函数单个请求运行状态。
     */
    async GetRequestStatus(req, cb) {
        return this.request("GetRequestStatus", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249342, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ses = void 0;
const v20201002_1 = require("./v20201002");
exports.ses = {
    v20201002: v20201002_1.v20201002,
};

}, function(modId) { var map = {"./v20201002":1738984249343}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249343, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201002 = void 0;
const Models = require("./ses_models");
const ses_client_1 = require("./ses_client");
exports.v20201002 = {
    Client: ses_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ses_models":1738984249344,"./ses_client":1738984249345}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249344, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249345, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ses client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ses.tencentcloudapi.com", "2020-10-02", clientConfig);
    }
    /**
     * 获取当前发信域名列表，包含已验证通过与未验证的域名
     */
    async ListEmailIdentities(req, cb) {
        return this.request("ListEmailIdentities", req, cb);
    }
    /**
     * 在验证了发信域名之后，您需要一个发信地址来发送邮件。例如发信域名是mail.qcloud.com，那么发信地址可以为 service@mail.qcloud.com。如果您想要收件人在收件箱列表中显示您的别名，例如"腾讯云邮件通知"。那么发信地址为： 别名 空格 尖括号 邮箱地址。请注意中间需要有空格
     */
    async CreateEmailAddress(req, cb) {
        return this.request("CreateEmailAddress", req, cb);
    }
    /**
     * 添加收件人地址附带模板参数，使用本接口在添加收件人地址的同时传入模板参数，使每一个收件人地址在发信的时候使用的模板变量取值不同。用户首先调用创建收件人列表接口-CreateReceiver后，然后调用本接口传入收件人地址和发信时的模板参数，最后使用批量发送邮件接口-BatchSendEmail，即可完成批量发信。需要注意的是在使用本接口后BatchSendEmail接口中的Template参数不需再传。用户也可以在控制台上邮件发送-收件人列表菜单中，通过导入文件的方式，导入收件人地址和模板变量和参数值。本接口一次请求的收件人地址数量限制为2W条，本接口同时也可以用来向已经上传完成的收件人列表追加收件人地址，但收件人列表中收件人地址的总量不能超过一定的数量，目前是限制5万条。本接口不支持去除重复的收件人地址，用户需要自己保证上传和追加地址不重复，不与之前上传的地址重复。
     */
    async CreateReceiverDetailWithData(req, cb) {
        return this.request("CreateReceiverDetailWithData", req, cb);
    }
    /**
     * 获取邮件发送状态。仅支持查询30天之内的数据
     */
    async GetSendEmailStatus(req, cb) {
        return this.request("GetSendEmailStatus", req, cb);
    }
    /**
     * 根据收件人列表id查询收件人列表中的所有收件人邮箱地址，分页查询，可以根据收件邮箱地址来过滤查询
     */
    async ListReceiverDetails(req, cb) {
        return this.request("ListReceiverDetails", req, cb);
    }
    /**
     * 创建收件人列表，收件人列表是发送批量邮件的目标邮件地址列表。创建列表后，需要上传收件人邮箱地址。之后创建发送任务，关联列表，便可以实现批量发送邮件的功能
     */
    async CreateReceiver(req, cb) {
        return this.request("CreateReceiver", req, cb);
    }
    /**
     * 获取某个发信域名的配置详情
     */
    async GetEmailIdentity(req, cb) {
        return this.request("GetEmailIdentity", req, cb);
    }
    /**
     * 根据模板ID获取模板详情
     */
    async GetEmailTemplate(req, cb) {
        return this.request("GetEmailTemplate", req, cb);
    }
    /**
     * 更新自定义黑名单
     */
    async UpdateCustomBlackList(req, cb) {
        return this.request("UpdateCustomBlackList", req, cb);
    }
    /**
     * 腾讯云发送的邮件一旦被收件方判断为硬退(Hard Bounce)，腾讯云会拉黑该地址，并不允许所有用户向该地址发送邮件。成为邮箱黑名单。如果业务方确认是误判，可以从黑名单中删除。
     */
    async ListBlackEmailAddress(req, cb) {
        return this.request("ListBlackEmailAddress", req, cb);
    }
    /**
     * 更新邮件模板，更新后需再次审核
     */
    async UpdateEmailTemplate(req, cb) {
        return this.request("UpdateEmailTemplate", req, cb);
    }
    /**
     * 您已经成功配置好了您的DNS，接下来请求腾讯云验证您的DNS配置是否正确
     */
    async UpdateEmailIdentity(req, cb) {
        return this.request("UpdateEmailIdentity", req, cb);
    }
    /**
     * 删除发信域名，删除后，将不可再使用该域名进行发信
     */
    async DeleteEmailIdentity(req, cb) {
        return this.request("DeleteEmailIdentity", req, cb);
    }
    /**
     * 获取发信地址列表
     */
    async ListEmailAddress(req, cb) {
        return this.request("ListEmailAddress", req, cb);
    }
    /**
     * 根据收件id删除收件人列表,同时删除列表中的所有收件邮箱
     */
    async DeleteReceiver(req, cb) {
        return this.request("DeleteReceiver", req, cb);
    }
    /**
     * 创建模板，该模板可以是TXT或者HTML，请注意如果HTML不要包含外部文件的CSS。模板中的变量使用 {{变量名}} 表示。
注意：模板需要审核通过才可以使用。
     */
    async CreateEmailTemplate(req, cb) {
        return this.request("CreateEmailTemplate", req, cb);
    }
    /**
     * 您可以通过此API批量发送TEXT或者HTML邮件，适用于营销类、通知类邮件。默认仅支持使用模板发送邮件。批量发送之前，需先创建收件人列表，和收件人地址，并通过收件人列表id来进行发送。批量发送任务支持定时发送和周期重复发送，定时发送需传TimedParam，周期重复发送需传CycleParam
     */
    async BatchSendEmail(req, cb) {
        return this.request("BatchSendEmail", req, cb);
    }
    /**
     * 设置邮箱的smtp密码。若要通过smtp发送邮件，必须为邮箱设置smtp密码。初始时，邮箱没有设置smtp密码，不能使用smtp的方式发送邮件。设置smtp密码后，可以修改密码。
     */
    async UpdateEmailSmtpPassWord(req, cb) {
        return this.request("UpdateEmailSmtpPassWord", req, cb);
    }
    /**
     * 添加自定义黑名单
     */
    async CreateCustomBlacklist(req, cb) {
        return this.request("CreateCustomBlacklist", req, cb);
    }
    /**
     * 删除发信模板
     */
    async DeleteEmailTemplate(req, cb) {
        return this.request("DeleteEmailTemplate", req, cb);
    }
    /**
     * 获取当前邮件模板列表
     */
    async ListEmailTemplates(req, cb) {
        return this.request("ListEmailTemplates", req, cb);
    }
    /**
     * 分页查询批量发送邮件任务，包含即时发送任务，定时发送任务，周期重复发送任务，查询发送情况，包括请求数量，已发数量，缓存数量，任务状态等信息
     */
    async ListSendTasks(req, cb) {
        return this.request("ListSendTasks", req, cb);
    }
    /**
     * 在使用身份发送电子邮件之前，您需要有一个电子邮件域名，该域名可以是您的网站或者移动应用的域名。您首先必须进行验证，证明自己是该域名的所有者，并且授权给腾讯云SES发送许可，才可以从该域名发送电子邮件。
     */
    async CreateEmailIdentity(req, cb) {
        return this.request("CreateEmailIdentity", req, cb);
    }
    /**
     * 删除自定义黑名单邮箱地址
     */
    async DeleteCustomBlackList(req, cb) {
        return this.request("DeleteCustomBlackList", req, cb);
    }
    /**
     * 邮箱被拉黑之后，用户如果确认收件邮箱有效或者已经处于激活状态，可以从腾讯云地址库中删除该黑名单之后继续投递。
     */
    async DeleteBlackList(req, cb) {
        return this.request("DeleteBlackList", req, cb);
    }
    /**
     * 您可以通过此API发送HTML或者TEXT邮件，适用于触发类邮件（验证码、交易类）。默认仅支持使用模板发送邮件。
     */
    async SendEmail(req, cb) {
        return this.request("SendEmail", req, cb);
    }
    /**
     * 获取自定义黑名单列表
     */
    async ListCustomBlacklist(req, cb) {
        return this.request("ListCustomBlacklist", req, cb);
    }
    /**
     * 获取近期发送的统计情况，包含发送量、送达率、打开率、退信率等一系列数据。
     */
    async GetStatisticsReport(req, cb) {
        return this.request("GetStatisticsReport", req, cb);
    }
    /**
     * 在创建完收件人列表后，向这个收件人列表中批量增加收件人邮箱地址，一次最大支持2万，异步完成处理。数据量比较大的时候，上传可能需要一点时间，可以通过查询收件人列表了解上传状态和上传数量。本接口与接口CreateReceiverDetailWithData的功能特性基本一致，只是不支持上传发信时的模板参数。用户首先调用创建收件人列表接口-CreateReceiver后，然后调用本接口传入收件人地址，最后使用批量发送邮件接口-BatchSendEmail，即可完成批量发信。本接口也支持追加收件人地址，也不支持去重，需要用户自己保证收件人地址不重复。本接口一次请求的收件人地址数量限制为2W条，但收件人列表中收件人地址的总量不能超过一定的数量，目前是限制5万条。
     */
    async CreateReceiverDetail(req, cb) {
        return this.request("CreateReceiverDetail", req, cb);
    }
    /**
     * 根据条件查询收件人列表，支持分页，模糊查询，状态查询
     */
    async ListReceivers(req, cb) {
        return this.request("ListReceivers", req, cb);
    }
    /**
     * 删除发信人地址
     */
    async DeleteEmailAddress(req, cb) {
        return this.request("DeleteEmailAddress", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249346, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.smh = void 0;
const v20210712_1 = require("./v20210712");
exports.smh = {
    v20210712: v20210712_1.v20210712,
};

}, function(modId) { var map = {"./v20210712":1738984249347}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249347, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210712 = void 0;
const Models = require("./smh_models");
const smh_client_1 = require("./smh_client");
exports.v20210712 = {
    Client: smh_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./smh_models":1738984249348,"./smh_client":1738984249349}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249348, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249349, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * smh client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("smh.tencentcloudapi.com", "2021-07-12", clientConfig);
    }
    /**
     * 更新用户信息。
     */
    async ModifyUser(req, cb) {
        return this.request("ModifyUser", req, cb);
    }
    /**
     * 一次删除多个用户。
     */
    async DeleteUser(req, cb) {
        return this.request("DeleteUser", req, cb);
    }
    /**
     * 验证短信验证码以换绑官方云盘实例的超级管理员账号
     */
    async VerifySmsCode(req, cb) {
        return this.request("VerifySmsCode", req, cb);
    }
    /**
     * 查询官方云盘实例
     */
    async DescribeOfficialInstances(req, cb) {
        return this.request("DescribeOfficialInstances", req, cb);
    }
    /**
     * 创建 PaaS 服务媒体库
     */
    async CreateLibrary(req, cb) {
        return this.request("CreateLibrary", req, cb);
    }
    /**
     * 发送用于换绑官方云盘实例的超级管理员账号的短信验证码
     */
    async SendSmsCode(req, cb) {
        return this.request("SendSmsCode", req, cb);
    }
    /**
     * 新建用户。
     */
    async CreateUser(req, cb) {
        return this.request("CreateUser", req, cb);
    }
    /**
     * 设置用户生命周期。如果指定的用户已经设置了生命周期，重复调用此接口将覆盖已有的设置。也可用于清除指定用户的生命周期。
     */
    async CreateUserLifecycle(req, cb) {
        return this.request("CreateUserLifecycle", req, cb);
    }
    /**
     * 查询 PaaS 服务媒体库列表
     */
    async DescribeLibraries(req, cb) {
        return this.request("DescribeLibraries", req, cb);
    }
    /**
     * 修改 PaaS 服务媒体库配置项
     */
    async ModifyLibrary(req, cb) {
        return this.request("ModifyLibrary", req, cb);
    }
    /**
     * 查询官方云盘实例概览数据
     */
    async DescribeOfficialOverview(req, cb) {
        return this.request("DescribeOfficialOverview", req, cb);
    }
    /**
     * 查询流量资源包
     */
    async DescribeTrafficPackages(req, cb) {
        return this.request("DescribeTrafficPackages", req, cb);
    }
    /**
     * 删除 PaaS 服务媒体库
     */
    async DeleteLibrary(req, cb) {
        return this.request("DeleteLibrary", req, cb);
    }
    /**
     * 查询用户生命周期。
     */
    async DescribeUserLifecycle(req, cb) {
        return this.request("DescribeUserLifecycle", req, cb);
    }
    /**
     * 查询 PaaS 服务媒体库密钥
     */
    async DescribeLibrarySecret(req, cb) {
        return this.request("DescribeLibrarySecret", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249350, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.smop = void 0;
const v20201203_1 = require("./v20201203");
exports.smop = {
    v20201203: v20201203_1.v20201203,
};

}, function(modId) { var map = {"./v20201203":1738984249351}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249351, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201203 = void 0;
const Models = require("./smop_models");
const smop_client_1 = require("./smop_client");
exports.v20201203 = {
    Client: smop_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./smop_models":1738984249352,"./smop_client":1738984249353}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249352, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249353, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * smop client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("smop.tencentcloudapi.com", "2020-12-03", clientConfig);
    }
    /**
     * 提交任务事件接口
     */
    async SubmitTaskEvent(req, cb) {
        return this.request("SubmitTaskEvent", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249354, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.smpn = void 0;
const v20190822_1 = require("./v20190822");
exports.smpn = {
    v20190822: v20190822_1.v20190822,
};

}, function(modId) { var map = {"./v20190822":1738984249355}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249355, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190822 = void 0;
const Models = require("./smpn_models");
const smpn_client_1 = require("./smpn_client");
exports.v20190822 = {
    Client: smpn_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./smpn_models":1738984249356,"./smpn_client":1738984249357}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249356, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249357, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * smpn client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("smpn.tencentcloudapi.com", "2019-08-22", clientConfig);
    }
    /**
     * 不在使用的API

虚假号码识别
     */
    async DescribeSmpnFnr(req, cb) {
        return this.request("DescribeSmpnFnr", req, cb);
    }
    /**
     * 不在使用的API

查询号码的标记和标记次数
     */
    async DescribeSmpnChp(req, cb) {
        return this.request("DescribeSmpnChp", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249358, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.sms = void 0;
const v20190711_1 = require("./v20190711");
const v20210111_1 = require("./v20210111");
exports.sms = {
    v20190711: v20190711_1.v20190711,
    v20210111: v20210111_1.v20210111,
};

}, function(modId) { var map = {"./v20190711":1738984249359,"./v20210111":1738984249362}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249359, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190711 = void 0;
const Models = require("./sms_models");
const sms_client_1 = require("./sms_client");
exports.v20190711 = {
    Client: sms_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./sms_models":1738984249360,"./sms_client":1738984249361}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249360, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249361, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * sms client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("sms.tencentcloudapi.com", "2019-07-11", clientConfig);
    }
    /**
     * 本接口 (ModifySmsSign) 用于修改短信签名。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>修改短信签名前，请先认真参阅 <a href="https://cloud.tencent.com/document/product/382/39022">腾讯云短信签名审核标准。</a></li><li>个人认证用户不支持使用 API 修改短信签名，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 修改短信签名。</li><li>修改短信签名，仅当签名为<b>待审核</b>或<b>已拒绝</b>状态时，才能进行修改，<b>已审核通过</b>的签名不支持修改。</li></ul></blockquote>
     */
    async ModifySmsSign(req, cb) {
        return this.request("ModifySmsSign", req, cb);
    }
    /**
     * 本接口 (AddSmsSign) 用于添加短信签名。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>添加短信签名前，请先认真参阅 <a href="https://cloud.tencent.com/document/product/382/39022">腾讯云短信签名审核标准。</a></li><li>个人认证用户不支持使用 API 申请短信签名，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 申请短信签名。</li></ul></blockquote>
     */
    async AddSmsSign(req, cb) {
        return this.request("AddSmsSign", req, cb);
    }
    /**
     * 本接口 (PullSmsSendStatus) 用于拉取短信下发状态。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>此接口需要联系  <a href="https://cloud.tencent.com/document/product/382/3773#.E6.8A.80.E6.9C.AF.E4.BA.A4.E6.B5.81">腾讯云短信小助手</a> 开通。</li><li>下发状态也支持 <a href="https://cloud.tencent.com/document/product/382/37809#.E7.9F.AD.E4.BF.A1.E7.8A.B6.E6.80.81.E5.9B.9E.E8.B0.83.E9.85.8D.E7.BD.AE">配置回调</a> 的方式获取。</li></ul></blockquote>
     */
    async PullSmsSendStatus(req, cb) {
        return this.request("PullSmsSendStatus", req, cb);
    }
    /**
     * 本接口 (SendSms) 用于发送验证码、通知类短信和营销短信。支持国内短信与国际/港澳台短信。
     */
    async SendSms(req, cb) {
        return this.request("SendSms", req, cb);
    }
    /**
     * 本接口 (DeleteSmsTemplate) 用于删除短信模板。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>个人认证用户不支持使用 API 删除短信正文模板，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 删除短信正文模板。</li></ul></blockquote>
     */
    async DeleteSmsTemplate(req, cb) {
        return this.request("DeleteSmsTemplate", req, cb);
    }
    /**
     * 本接口 (SmsPackagesStatistics) 用于统计用户套餐包数据。
     */
    async SmsPackagesStatistics(req, cb) {
        return this.request("SmsPackagesStatistics", req, cb);
    }
    /**
     * 本接口 (SendStatusStatistics) 用于统计用户发送短信的数据。
     */
    async SendStatusStatistics(req, cb) {
        return this.request("SendStatusStatistics", req, cb);
    }
    /**
     * 本接口 (CallbackStatusStatistics) 用于统计用户回执的数据。
     */
    async CallbackStatusStatistics(req, cb) {
        return this.request("CallbackStatusStatistics", req, cb);
    }
    /**
     * 本接口 (DescribeSmsTemplateList) 用于查询短信模板状态。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>个人认证用户不支持使用 API 查询短信正文模板，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 查询短信正文模板。</li></ul></blockquote>
     */
    async DescribeSmsTemplateList(req, cb) {
        return this.request("DescribeSmsTemplateList", req, cb);
    }
    /**
     * 本接口 (PullSmsReplyStatus) 用于拉取短信回复状态。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>此接口需要联系  <a href="https://cloud.tencent.com/document/product/382/3773#.E6.8A.80.E6.9C.AF.E4.BA.A4.E6.B5.81">腾讯云短信小助手</a> 开通。</li><li>上行回复也支持 <a href="https://cloud.tencent.com/document/product/382/42907">配置回复回调</a> 的方式获取。</li></ul></blockquote>
     */
    async PullSmsReplyStatus(req, cb) {
        return this.request("PullSmsReplyStatus", req, cb);
    }
    /**
     * 本接口 (DescribeSmsSignList) 用于查询短信签名状态。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>个人认证用户不支持使用 API 查询短信签名，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 查询短信签名。</li></ul></blockquote>
     */
    async DescribeSmsSignList(req, cb) {
        return this.request("DescribeSmsSignList", req, cb);
    }
    /**
     * 本接口 (PullSmsSendStatusByPhoneNumber) 用于拉取单个号码短信下发状态。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>下发状态也支持 <a href="https://cloud.tencent.com/document/product/382/37809#.E7.9F.AD.E4.BF.A1.E7.8A.B6.E6.80.81.E5.9B.9E.E8.B0.83.E9.85.8D.E7.BD.AE">配置回调</a> 的方式获取。</li></ul></blockquote>
     */
    async PullSmsSendStatusByPhoneNumber(req, cb) {
        return this.request("PullSmsSendStatusByPhoneNumber", req, cb);
    }
    /**
     * 本接口 (ModifySmsTemplate) 用于修改短信模板。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>修改短信正文模板前，请先认真参阅 <a href="https://cloud.tencent.com/document/product/382/39023">腾讯云短信正文模板审核标准。</a></li><li>个人认证用户不支持使用 API 修改短信正文模板，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 修改短信正文模板。</li><li>修改短信模板，仅当正文模板为<b>待审核</b>或<b>已拒绝</b>状态时，才能进行修改，<b>已审核通过</b>的正文模板不支持修改。</li></ul></blockquote>
     */
    async ModifySmsTemplate(req, cb) {
        return this.request("ModifySmsTemplate", req, cb);
    }
    /**
     * 本接口 (PullSmsReplyStatusByPhoneNumber) 用于拉取单个号码短信回复状态。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>上行回复也支持 <a href="https://cloud.tencent.com/document/product/382/42907">配置回复回调</a> 的方式获取。</li></ul></blockquote>
     */
    async PullSmsReplyStatusByPhoneNumber(req, cb) {
        return this.request("PullSmsReplyStatusByPhoneNumber", req, cb);
    }
    /**
     * 本接口 (DeleteSmsSign) 用于删除短信签名。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>个人认证用户不支持使用 API 删除短信签名，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 删除短信签名。</li></ul></blockquote>
     */
    async DeleteSmsSign(req, cb) {
        return this.request("DeleteSmsSign", req, cb);
    }
    /**
     * 本接口 (AddSmsTemplate) 用于创建短信模板。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>申请短信模板前，请先认真参阅 <a href="https://cloud.tencent.com/document/product/382/39023">腾讯云短信正文模板审核标准。</a></li><li>个人认证用户不支持使用 API 申请短信正文模板，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 申请短信正文模板。</li></ul></blockquote>
     */
    async AddSmsTemplate(req, cb) {
        return this.request("AddSmsTemplate", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249362, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210111 = void 0;
const Models = require("./sms_models");
const sms_client_1 = require("./sms_client");
exports.v20210111 = {
    Client: sms_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./sms_models":1738984249363,"./sms_client":1738984249364}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249363, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249364, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * sms client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("sms.tencentcloudapi.com", "2021-01-11", clientConfig);
    }
    /**
     * 本接口 (ModifySmsSign) 用于修改短信签名。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>修改短信签名前，请先认真参阅 <a href="https://cloud.tencent.com/document/product/382/39022">腾讯云短信签名审核标准。</a></li><li>个人认证用户不支持使用 API 修改短信签名，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 修改短信签名。</li><li>修改短信签名，仅当签名为<b>待审核</b>或<b>已拒绝</b>状态时，才能进行修改，<b>已审核通过</b>的签名不支持修改。</li></ul></blockquote>
     */
    async ModifySmsSign(req, cb) {
        return this.request("ModifySmsSign", req, cb);
    }
    /**
     * 本接口 (AddSmsSign) 用于添加短信签名。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>添加短信签名前，请先认真参阅 <a href="https://cloud.tencent.com/document/product/382/39022">腾讯云短信签名审核标准。</a></li><li>个人认证用户不支持使用 API 申请短信签名，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 申请短信签名。</li></ul></blockquote>
     */
    async AddSmsSign(req, cb) {
        return this.request("AddSmsSign", req, cb);
    }
    /**
     * 本接口 (PullSmsSendStatus) 用于拉取短信下发状态。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>此接口需要联系  <a href="https://cloud.tencent.com/document/product/382/3773#.E6.8A.80.E6.9C.AF.E4.BA.A4.E6.B5.81">腾讯云短信小助手</a> 开通。</li><li>下发状态也支持 <a href="https://cloud.tencent.com/document/product/382/37809#.E7.9F.AD.E4.BF.A1.E7.8A.B6.E6.80.81.E5.9B.9E.E8.B0.83.E9.85.8D.E7.BD.AE">配置回调</a> 的方式获取。</li></ul></blockquote>
     */
    async PullSmsSendStatus(req, cb) {
        return this.request("PullSmsSendStatus", req, cb);
    }
    /**
     * 本接口 (SendSms) 用于发送验证码、通知类短信和营销短信。支持国内短信与国际/港澳台短信。
- 当前接口属于 2021-01-11 版本，如果您仍在使用 [2019-07-11 版本](https://cloud.tencent.com/document/product/382/38778)，建议您使用当前最新版本的接口，版本差异可参考[版本描述](https://cloud.tencent.com/document/product/382/63195#.E7.89.88.E6.9C.AC.E6.8F.8F.E8.BF.B0)。
     */
    async SendSms(req, cb) {
        return this.request("SendSms", req, cb);
    }
    /**
     * 本接口 (DeleteSmsTemplate) 用于删除短信模板。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>个人认证用户不支持使用 API 删除短信正文模板，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 删除短信正文模板。</li></ul></blockquote>
     */
    async DeleteSmsTemplate(req, cb) {
        return this.request("DeleteSmsTemplate", req, cb);
    }
    /**
     * 本接口 (SmsPackagesStatistics) 用于统计用户套餐包数据。
     */
    async SmsPackagesStatistics(req, cb) {
        return this.request("SmsPackagesStatistics", req, cb);
    }
    /**
     * 本接口 (SendStatusStatistics) 用于统计用户发送短信的数据。
     */
    async SendStatusStatistics(req, cb) {
        return this.request("SendStatusStatistics", req, cb);
    }
    /**
     * 本接口 (CallbackStatusStatistics) 用于统计用户回执的数据。
     */
    async CallbackStatusStatistics(req, cb) {
        return this.request("CallbackStatusStatistics", req, cb);
    }
    /**
     * 本接口 (DescribeSmsTemplateList) 用于查询短信模板状态。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>个人认证用户不支持使用 API 查询短信正文模板，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 查询短信正文模板。</li></ul></blockquote>
     */
    async DescribeSmsTemplateList(req, cb) {
        return this.request("DescribeSmsTemplateList", req, cb);
    }
    /**
     * 本接口 (PullSmsReplyStatus) 用于拉取短信回复状态。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>此接口需要联系  <a href="https://cloud.tencent.com/document/product/382/3773#.E6.8A.80.E6.9C.AF.E4.BA.A4.E6.B5.81">腾讯云短信小助手</a> 开通。</li><li>上行回复也支持 <a href="https://cloud.tencent.com/document/product/382/42907">配置回复回调</a> 的方式获取。</li></ul></blockquote>
     */
    async PullSmsReplyStatus(req, cb) {
        return this.request("PullSmsReplyStatus", req, cb);
    }
    /**
     * 本接口 (DescribeSmsSignList) 用于查询短信签名状态。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>个人认证用户不支持使用 API 查询短信签名，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 查询短信签名。</li></ul></blockquote>
     */
    async DescribeSmsSignList(req, cb) {
        return this.request("DescribeSmsSignList", req, cb);
    }
    /**
     * 本接口 (PullSmsSendStatusByPhoneNumber) 用于拉取单个号码短信下发状态。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>下发状态也支持 <a href="https://cloud.tencent.com/document/product/382/37809#.E7.9F.AD.E4.BF.A1.E7.8A.B6.E6.80.81.E5.9B.9E.E8.B0.83.E9.85.8D.E7.BD.AE">配置回调</a> 的方式获取。</li></ul></blockquote>
     */
    async PullSmsSendStatusByPhoneNumber(req, cb) {
        return this.request("PullSmsSendStatusByPhoneNumber", req, cb);
    }
    /**
     * 本接口 (ReportConversion) 用于短信转化率上报。将已接收到短信的流水号上报到腾讯云短信服务。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>该接口当前以白名单方式对外开放，如有需要请联系  <a href="https://cloud.tencent.com/document/product/382/3773#.E6.8A.80.E6.9C.AF.E4.BA.A4.E6.B5.81">腾讯云短信小助手</a> 开通。</li></ul></blockquote>
     */
    async ReportConversion(req, cb) {
        return this.request("ReportConversion", req, cb);
    }
    /**
     * 本接口 (ModifySmsTemplate) 用于修改短信模板。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>修改短信正文模板前，请先认真参阅 <a href="https://cloud.tencent.com/document/product/382/39023">腾讯云短信正文模板审核标准。</a></li><li>个人认证用户不支持使用 API 修改短信正文模板，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 修改短信正文模板。</li><li>修改短信模板，仅当正文模板为<b>待审核</b>或<b>已拒绝</b>状态时，才能进行修改，<b>已审核通过</b>的正文模板不支持修改。</li></ul></blockquote>
     */
    async ModifySmsTemplate(req, cb) {
        return this.request("ModifySmsTemplate", req, cb);
    }
    /**
     * 本接口 (PullSmsReplyStatusByPhoneNumber) 用于拉取单个号码短信回复状态。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>上行回复也支持 <a href="https://cloud.tencent.com/document/product/382/42907">配置回复回调</a> 的方式获取。</li></ul></blockquote>
     */
    async PullSmsReplyStatusByPhoneNumber(req, cb) {
        return this.request("PullSmsReplyStatusByPhoneNumber", req, cb);
    }
    /**
     * 本接口 (DescribePhoneNumberInfo) 用于提供电话号码的信息查询，包括国家（或地区）码、规范的 E.164 格式号码等。
- 例如：查询号码 +86018501234444，可以得到国家码 86、规范的 E.164 号码 +8618501234444 等信息。
     */
    async DescribePhoneNumberInfo(req, cb) {
        return this.request("DescribePhoneNumberInfo", req, cb);
    }
    /**
     * 本接口 (DeleteSmsSign) 用于删除短信签名。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>个人认证用户不支持使用 API 删除短信签名，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 删除短信签名。</li></ul></blockquote>
     */
    async DeleteSmsSign(req, cb) {
        return this.request("DeleteSmsSign", req, cb);
    }
    /**
     * 本接口 (AddSmsTemplate) 用于创建短信模板。
<blockquote class="d-mod-explain"><div class="d-mod-title d-explain-title" style="line-height: normal;"><i class="d-icon-explain"></i>说明：</div><p></p><ul><li>申请短信模板前，请先认真参阅 <a href="https://cloud.tencent.com/document/product/382/39023">腾讯云短信正文模板审核标准。</a></li><li>个人认证用户不支持使用 API 申请短信正文模板，请参阅了解 <a href="https://cloud.tencent.com/document/product/378/3629">实名认证基本介绍</a>，如果为个人认证请登录 <a href="https://console.cloud.tencent.com/smsv2">控制台</a> 申请短信正文模板。</li></ul></blockquote>
     */
    async AddSmsTemplate(req, cb) {
        return this.request("AddSmsTemplate", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249365, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.soe = void 0;
const v20180724_1 = require("./v20180724");
exports.soe = {
    v20180724: v20180724_1.v20180724,
};

}, function(modId) { var map = {"./v20180724":1738984249366}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249366, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180724 = void 0;
const Models = require("./soe_models");
const soe_client_1 = require("./soe_client");
exports.v20180724 = {
    Client: soe_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./soe_models":1738984249367,"./soe_client":1738984249368}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249367, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249368, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * soe client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("soe.tencentcloudapi.com", "2018-07-24", clientConfig);
    }
    /**
     * 初始化发音评估过程，每一轮评估前进行调用。语音输入模式分为流式模式和非流式模式，流式模式支持数据分片传输，可以加快评估响应速度。评估模式分为词模式和句子模式，词模式会标注每个音节的详细信息；句子模式会有完整度和流利度的评估。
     */
    async InitOralProcess(req, cb) {
        return this.request("InitOralProcess", req, cb);
    }
    /**
     * 指定主题关键词词汇评估，分析语音与关键词的切合程度，可指定多个关键词，支持中文英文同时评测。分片传输时，尽量保证纯异步调用，即不等待上一个分片的传输结果边录边传，这样可以尽可能早的提供音频数据。音频源目前仅支持16k采样率16bit单声道编码方式，如有不一致可能导致评估不准确或失败。
     */
    async KeywordEvaluate(req, cb) {
        return this.request("KeywordEvaluate", req, cb);
    }
    /**
     * 本接口可用于中英文发音评测数据传输。在使用本接口时需要注意：传输音频数据，必须在完成发音评估初始化接口之后调用，且SessonId要与初始化接口保持一致。分片传输时，尽量保证SeqId顺序传输（请确认SeqId由1开始）。音频源目前仅支持16k采样率16bit单声道编码方式，如有不一致可能导致评估不准确或失败。
     */
    async TransmitOralProcess(req, cb) {
        return this.request("TransmitOralProcess", req, cb);
    }
    /**
     * 本接口可用于中英文发音评测。在使用本接口时需要注意：初始化并传输音频数据，分片传输时，尽量保证SeqId顺序传输（请确认SeqId由1开始）。音频源目前仅支持16k采样率16bit单声道编码方式，如有不一致可能导致评估不准确或失败。
     */
    async TransmitOralProcessWithInit(req, cb) {
        return this.request("TransmitOralProcessWithInit", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249369, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.solar = void 0;
const v20181011_1 = require("./v20181011");
exports.solar = {
    v20181011: v20181011_1.v20181011,
};

}, function(modId) { var map = {"./v20181011":1738984249370}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249370, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20181011 = void 0;
const Models = require("./solar_models");
const solar_client_1 = require("./solar_client");
exports.v20181011 = {
    Client: solar_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./solar_models":1738984249371,"./solar_client":1738984249372}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249371, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249372, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * solar client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("solar.tencentcloudapi.com", "2018-10-11", clientConfig);
    }
    /**
     * 子项目详情
     */
    async DescribeSubProject(req, cb) {
        return this.request("DescribeSubProject", req, cb);
    }
    /**
     * 项目库存详情
     */
    async DescribeProjectStock(req, cb) {
        return this.request("DescribeProjectStock", req, cb);
    }
    /**
     * 项目详情展示
     */
    async DescribeProject(req, cb) {
        return this.request("DescribeProject", req, cb);
    }
    /**
     * 素材查询服务号模板的列表（样例）
     */
    async DescribeResourceTemplateHeaders(req, cb) {
        return this.request("DescribeResourceTemplateHeaders", req, cb);
    }
    /**
     * 查询客户档案列表
     */
    async DescribeCustomers(req, cb) {
        return this.request("DescribeCustomers", req, cb);
    }
    /**
     * 发送企业微信触达任务
     */
    async SendWxTouchTask(req, cb) {
        return this.request("SendWxTouchTask", req, cb);
    }
    /**
     * 创建项目
     */
    async CreateProject(req, cb) {
        return this.request("CreateProject", req, cb);
    }
    /**
     * 补充子项目库存
     */
    async ReplenishProjectStock(req, cb) {
        return this.request("ReplenishProjectStock", req, cb);
    }
    /**
     * 项目列表展示
     */
    async DescribeProjects(req, cb) {
        return this.request("DescribeProjects", req, cb);
    }
    /**
     * 下线项目
     */
    async OffLineProject(req, cb) {
        return this.request("OffLineProject", req, cb);
    }
    /**
     * 把审批中的工单置为已失效
     */
    async ExpireFlow(req, cb) {
        return this.request("ExpireFlow", req, cb);
    }
    /**
     * 删除项目
     */
    async DeleteProject(req, cb) {
        return this.request("DeleteProject", req, cb);
    }
    /**
     * 员工渠道更改员工状态
     */
    async CheckStaffChUser(req, cb) {
        return this.request("CheckStaffChUser", req, cb);
    }
    /**
     * 客户档案查询客户详情
     */
    async DescribeCustomer(req, cb) {
        return this.request("DescribeCustomer", req, cb);
    }
    /**
     * 修改项目
     */
    async ModifyProject(req, cb) {
        return this.request("ModifyProject", req, cb);
    }
    /**
     * 创建子项目
     */
    async CreateSubProject(req, cb) {
        return this.request("CreateSubProject", req, cb);
    }
    /**
     * 复制活动渠道的策略
     */
    async CopyActivityChannel(req, cb) {
        return this.request("CopyActivityChannel", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249373, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.sqlserver = void 0;
const v20180328_1 = require("./v20180328");
exports.sqlserver = {
    v20180328: v20180328_1.v20180328,
};

}, function(modId) { var map = {"./v20180328":1738984249374}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249374, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180328 = void 0;
const Models = require("./sqlserver_models");
const sqlserver_client_1 = require("./sqlserver_client");
exports.v20180328 = {
    Client: sqlserver_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./sqlserver_models":1738984249375,"./sqlserver_client":1738984249376}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249375, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249376, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * sqlserver client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("sqlserver.tencentcloudapi.com", "2018-03-28", clientConfig);
    }
    /**
     * 本接口（ModifyAccountPrivilege）用于修改实例账户权限。
     */
    async ModifyAccountPrivilege(req, cb) {
        return this.request("ModifyAccountPrivilege", req, cb);
    }
    /**
     * 本接口（RecycleReadOnlyGroup）立即回收只读组的资源，只读组占用的vip等资源将立即释放且不可找回。
     */
    async RecycleReadOnlyGroup(req, cb) {
        return this.request("RecycleReadOnlyGroup", req, cb);
    }
    /**
     * 本接口(ModifyBackupName)用于修改备份任务名称。
     */
    async ModifyBackupName(req, cb) {
        return this.request("ModifyBackupName", req, cb);
    }
    /**
     * 本接口（DescribeSpecSellStatus）用于查询售卖规格状态信息，其中包括售卖状态，参考价格等(实际价格以询价接口为准)。
     */
    async DescribeSpecSellStatus(req, cb) {
        return this.request("DescribeSpecSellStatus", req, cb);
    }
    /**
     * 本接口（StartIncrementalMigration）用于启动增量备份导入任务。
     */
    async StartIncrementalMigration(req, cb) {
        return this.request("StartIncrementalMigration", req, cb);
    }
    /**
     * 本接口（QueryMigrationCheckProcess）的作用是查询迁移检查任务的进度，适用于迁移源的类型为TencentDB for SQLServer 的迁移方式
     */
    async QueryMigrationCheckProcess(req, cb) {
        return this.request("QueryMigrationCheckProcess", req, cb);
    }
    /**
     * 本接口（ModifyAccountRemark）用于修改账户备注。
     */
    async ModifyAccountRemark(req, cb) {
        return this.request("ModifyAccountRemark", req, cb);
    }
    /**
     * 本接口（ModifyPublishSubscribe）用于修改实例的发布订阅关系。
     */
    async ModifyPublishSubscribe(req, cb) {
        return this.request("ModifyPublishSubscribe", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceName）用于修改实例名字。
     */
    async ModifyDBInstanceName(req, cb) {
        return this.request("ModifyDBInstanceName", req, cb);
    }
    /**
     * 本接口（DescribeUploadIncrementalInfo）用于查询增量备份上传权限。
     */
    async DescribeUploadIncrementalInfo(req, cb) {
        return this.request("DescribeUploadIncrementalInfo", req, cb);
    }
    /**
     * 本接口(ModifyDatabaseMdf)用于收缩数据库mdf(Shrink mdf)。**本接口已废弃，请使用接口ModifyDatabaseShrinkMDF**。
     */
    async ModifyDatabaseMdf(req, cb) {
        return this.request("ModifyDatabaseMdf", req, cb);
    }
    /**
     * 本接口（ModifyDBRemark）用于修改数据库备注。
     */
    async ModifyDBRemark(req, cb) {
        return this.request("ModifyDBRemark", req, cb);
    }
    /**
     * 本接口（DeleteIncrementalMigration）用于删除增量备份导入任务。
     */
    async DeleteIncrementalMigration(req, cb) {
        return this.request("DeleteIncrementalMigration", req, cb);
    }
    /**
     * 本接口（RunMigration）用于启动迁移任务，开始迁移
     */
    async RunMigration(req, cb) {
        return this.request("RunMigration", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceNetwork）用于修改运行中实例的网络，仅支持从VPC网络到VPC网络的转换
     */
    async ModifyDBInstanceNetwork(req, cb) {
        return this.request("ModifyDBInstanceNetwork", req, cb);
    }
    /**
     * 本接口（CreateCloudReadOnlyDBInstances）用于创建只读实例 (云盘)。
     */
    async CreateCloudReadOnlyDBInstances(req, cb) {
        return this.request("CreateCloudReadOnlyDBInstances", req, cb);
    }
    /**
     * 本接口(ModifyDBInstanceSecurityGroups)用于修改实例绑定的安全组。
     */
    async ModifyDBInstanceSecurityGroups(req, cb) {
        return this.request("ModifyDBInstanceSecurityGroups", req, cb);
    }
    /**
     * 本接口（ModifyMaintenanceSpan）用于修改实例的可维护时间窗
     */
    async ModifyMaintenanceSpan(req, cb) {
        return this.request("ModifyMaintenanceSpan", req, cb);
    }
    /**
     * 本接口（DescribeMaintenanceSpan）根据实例ID查询该实例的可维护时间窗。
     */
    async DescribeMaintenanceSpan(req, cb) {
        return this.request("DescribeMaintenanceSpan", req, cb);
    }
    /**
     * 本接口（DescribeReadOnlyGroupDetails）用于查询只读组详情。
     */
    async DescribeReadOnlyGroupDetails(req, cb) {
        return this.request("DescribeReadOnlyGroupDetails", req, cb);
    }
    /**
     * 本接口（CreatePublishSubscribe）用于创建两个数据库之间的发布订阅关系。作为订阅者，不能再充当发布者，作为发布者可以有多个订阅者实例。
     */
    async CreatePublishSubscribe(req, cb) {
        return this.request("CreatePublishSubscribe", req, cb);
    }
    /**
     * 本接口（DescribeBackupFiles）用于查询单库备份明细。
     */
    async DescribeBackupFiles(req, cb) {
        return this.request("DescribeBackupFiles", req, cb);
    }
    /**
     * 本接口（DescribeRegularBackupPlan）用于查询实例定期备份保留计划
     */
    async DescribeRegularBackupPlan(req, cb) {
        return this.request("DescribeRegularBackupPlan", req, cb);
    }
    /**
     * 本接口（DescribePublishSubscribe）用于查询发布订阅关系列表。
     */
    async DescribePublishSubscribe(req, cb) {
        return this.request("DescribePublishSubscribe", req, cb);
    }
    /**
     * 本接口（DescribeDatabases）用于查询数据库列表。
     */
    async DescribeDatabases(req, cb) {
        return this.request("DescribeDatabases", req, cb);
    }
    /**
     * 本接口（CutXEvents）用于手动切割阻塞日志和死锁日志。
     */
    async CutXEvents(req, cb) {
        return this.request("CutXEvents", req, cb);
    }
    /**
     * 本接口（DescribeReadOnlyGroupList）用于查询只读组列表。
     */
    async DescribeReadOnlyGroupList(req, cb) {
        return this.request("DescribeReadOnlyGroupList", req, cb);
    }
    /**
     * 本接口（DescribeMigrationDetail）用于查询迁移任务的详细情况
     */
    async DescribeMigrationDetail(req, cb) {
        return this.request("DescribeMigrationDetail", req, cb);
    }
    /**
     * 本接口 (DescribeZones) 用于查询当前可售卖的可用区信息。
     */
    async DescribeZones(req, cb) {
        return this.request("DescribeZones", req, cb);
    }
    /**
     * 本接口（DescribeUploadBackupInfo）用于查询备份上传权限。
     */
    async DescribeUploadBackupInfo(req, cb) {
        return this.request("DescribeUploadBackupInfo", req, cb);
    }
    /**
     * 本接口 (DescribeProductConfig) 用于查询售卖规格配置。
     */
    async DescribeProductConfig(req, cb) {
        return this.request("DescribeProductConfig", req, cb);
    }
    /**
     * 本接口（DescribeUpgradeInstanceCheck）用于在实例变配前，预检查实例变配的影响情况等。
     */
    async DescribeUpgradeInstanceCheck(req, cb) {
        return this.request("DescribeUpgradeInstanceCheck", req, cb);
    }
    /**
     * 本接口(DisassociateSecurityGroups)用于安全组批量解绑实例。
     */
    async DisassociateSecurityGroups(req, cb) {
        return this.request("DisassociateSecurityGroups", req, cb);
    }
    /**
     * 本接口(TerminateDBInstance)用于主动隔离实例，使得实例进入回收站。
     */
    async TerminateDBInstance(req, cb) {
        return this.request("TerminateDBInstance", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceNote）用于修改实例备注信息。
     */
    async ModifyDBInstanceNote(req, cb) {
        return this.request("ModifyDBInstanceNote", req, cb);
    }
    /**
     * 本接口（DeleteDBInstance）用于释放回收站中的SQL server实例(立即下线)。释放后的实例将保存一段时间后物理销毁。其发布订阅将自动解除，其ro副本将自动释放。
     */
    async DeleteDBInstance(req, cb) {
        return this.request("DeleteDBInstance", req, cb);
    }
    /**
     * 本接口（CreateBusinessDBInstances）用于创建商业智能服务实例 (云盘)。
     */
    async CreateBusinessDBInstances(req, cb) {
        return this.request("CreateBusinessDBInstances", req, cb);
    }
    /**
     * 本接口（ModifyDBName）用于更新数据库名。
     */
    async ModifyDBName(req, cb) {
        return this.request("ModifyDBName", req, cb);
    }
    /**
     * 本接口（InquiryPriceCreateDBInstances）用于查询申请实例价格。
     */
    async InquiryPriceCreateDBInstances(req, cb) {
        return this.request("InquiryPriceCreateDBInstances", req, cb);
    }
    /**
     * 本接口(DescribeCrossRegionZone)根据主实例查询备机的容灾地域和可用区。
     */
    async DescribeCrossRegionZone(req, cb) {
        return this.request("DescribeCrossRegionZone", req, cb);
    }
    /**
     * 本接口(ModifyDatabaseCT)用于启用、禁用数据库数据变更跟踪(CT)
     */
    async ModifyDatabaseCT(req, cb) {
        return this.request("ModifyDatabaseCT", req, cb);
    }
    /**
     * 本接口(DescribeBackups)用于查询备份列表。
     */
    async DescribeBackups(req, cb) {
        return this.request("DescribeBackups", req, cb);
    }
    /**
     * 本接口（ModifyPublishSubscribeName）修改发布订阅的名称。
     */
    async ModifyPublishSubscribeName(req, cb) {
        return this.request("ModifyPublishSubscribeName", req, cb);
    }
    /**
     * 本接口（RenewPostpaidDBInstance）用于将通过接口TerminateDBInstance手动隔离的按量计费实例从回收站中恢复。
     */
    async RenewPostpaidDBInstance(req, cb) {
        return this.request("RenewPostpaidDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeIncrementalMigration）用于查询增量备份导入任务。
     */
    async DescribeIncrementalMigration(req, cb) {
        return this.request("DescribeIncrementalMigration", req, cb);
    }
    /**
     * 本接口(CreateBackup)用于创建备份。
     */
    async CreateBackup(req, cb) {
        return this.request("CreateBackup", req, cb);
    }
    /**
     * 本接口（DescribeDBRestoreTime）用于查询可回档的数据库
     */
    async DescribeDBRestoreTime(req, cb) {
        return this.request("DescribeDBRestoreTime", req, cb);
    }
    /**
     * 本接口（DescribeBackupMigration）用于创建增量备份导入任务。
     */
    async DescribeBackupMigration(req, cb) {
        return this.request("DescribeBackupMigration", req, cb);
    }
    /**
     * 本接口（BalanceReadOnlyGroup）用于根据预定义的权重平衡每个只读实例的路由权重。预定义权重可根据接口DescribeReadOnlyGroupAutoWeight查询。
     */
    async BalanceReadOnlyGroup(req, cb) {
        return this.request("BalanceReadOnlyGroup", req, cb);
    }
    /**
     * 本接口(ModifyDatabaseCDC)用于开启、关闭数据库数据变更捕获(CDC)
     */
    async ModifyDatabaseCDC(req, cb) {
        return this.request("ModifyDatabaseCDC", req, cb);
    }
    /**
     * 本接口(DeleteRestoreTask)用于删除回档任务记录。
     */
    async DeleteRestoreTask(req, cb) {
        return this.request("DeleteRestoreTask", req, cb);
    }
    /**
     * 本接口（CompleteMigration）作用是完成一个迁移任务
     */
    async CompleteMigration(req, cb) {
        return this.request("CompleteMigration", req, cb);
    }
    /**
     * 本接口(DescribeProjectSecurityGroups)用于查询项目的安全组详情。
     */
    async DescribeProjectSecurityGroups(req, cb) {
        return this.request("DescribeProjectSecurityGroups", req, cb);
    }
    /**
     * 本接口（CreateAccount）用于创建实例账号
     */
    async CreateAccount(req, cb) {
        return this.request("CreateAccount", req, cb);
    }
    /**
     * 本接口（StopMigration）作用是中止一个迁移任务
     */
    async StopMigration(req, cb) {
        return this.request("StopMigration", req, cb);
    }
    /**
     * 本接口 (DescribeRegions) 用于查询售卖地域信息。
     */
    async DescribeRegions(req, cb) {
        return this.request("DescribeRegions", req, cb);
    }
    /**
     * 本接口（DescribeRestoreTask）用于查询回档任务列表。
     */
    async DescribeRestoreTask(req, cb) {
        return this.request("DescribeRestoreTask", req, cb);
    }
    /**
     * 该接口（DescribeInstanceParams）用于查询实例的参数列表。
     */
    async DescribeInstanceParams(req, cb) {
        return this.request("DescribeInstanceParams", req, cb);
    }
    /**
     * 本接口（ModifyDatabasePrivilege）用于修改实例数据库权限。
     */
    async ModifyDatabasePrivilege(req, cb) {
        return this.request("ModifyDatabasePrivilege", req, cb);
    }
    /**
     * 本接口(ModifyCloseWanIp)用于关闭实例外网。
     */
    async ModifyCloseWanIp(req, cb) {
        return this.request("ModifyCloseWanIp", req, cb);
    }
    /**
     * 本接口（CompleteExpansion）在实例发起扩容后，实例状态处于“升级待切换”时，可立即完成实例升级切换操作，无需等待可维护时间窗。本接口需要在实例低峰时调用，在完全切换成功前，存在部分库不可访问的风险。
     */
    async CompleteExpansion(req, cb) {
        return this.request("CompleteExpansion", req, cb);
    }
    /**
     * 本接口(DescribeBackupStatistical)用于查询备份实时统计列表。
     */
    async DescribeBackupStatistical(req, cb) {
        return this.request("DescribeBackupStatistical", req, cb);
    }
    /**
     * 本接口（CreateDB）用于创建数据库。
     */
    async CreateDB(req, cb) {
        return this.request("CreateDB", req, cb);
    }
    /**
     * 本接口（CreateCloudDBInstances）用于创建高可用实例 (云盘)。
     */
    async CreateCloudDBInstances(req, cb) {
        return this.request("CreateCloudDBInstances", req, cb);
    }
    /**
     * 本接口(DescribeCollationTimeZone)用于查询实例支持的字符集和时区。
     */
    async DescribeCollationTimeZone(req, cb) {
        return this.request("DescribeCollationTimeZone", req, cb);
    }
    /**
     * 该接口（DescribeInstanceParamRecords）用于查询实例参数修改历史。
     */
    async DescribeInstanceParamRecords(req, cb) {
        return this.request("DescribeInstanceParamRecords", req, cb);
    }
    /**
     * 本接口（CreateBusinessIntelligenceFile）用于添加商业智能服务文件。
     */
    async CreateBusinessIntelligenceFile(req, cb) {
        return this.request("CreateBusinessIntelligenceFile", req, cb);
    }
    /**
     * 本接口（DescribeInstanceTasks）用于查询实例相关的异步任务列表。
     */
    async DescribeInstanceTasks(req, cb) {
        return this.request("DescribeInstanceTasks", req, cb);
    }
    /**
     * 本接口(DescribeHASwitchLog)用于手动主备切换。
     */
    async DescribeHASwitchLog(req, cb) {
        return this.request("DescribeHASwitchLog", req, cb);
    }
    /**
     * 本接口（StartMigrationCheck）的作用是启动一个迁移前的校验任务，适用于迁移源的类型为TencentDB for SQLServer 的迁移方式
     */
    async StartMigrationCheck(req, cb) {
        return this.request("StartMigrationCheck", req, cb);
    }
    /**
     * 本接口（DescribeDBCharsets）用于查询实例支持的数据库字符集。
     */
    async DescribeDBCharsets(req, cb) {
        return this.request("DescribeDBCharsets", req, cb);
    }
    /**
     * 本接口（DeletePublishSubscribe）用于删除两个数据库间的发布订阅关系。
     */
    async DeletePublishSubscribe(req, cb) {
        return this.request("DeletePublishSubscribe", req, cb);
    }
    /**
     * 本接口(ModifyDatabaseShrinkDMF)用于收缩数据库mdf(Shrink mdf)。
     */
    async ModifyDatabaseShrinkMDF(req, cb) {
        return this.request("ModifyDatabaseShrinkMDF", req, cb);
    }
    /**
     * 本接口（ResetAccountPassword）用于重置实例的账号密码。
     */
    async ResetAccountPassword(req, cb) {
        return this.request("ResetAccountPassword", req, cb);
    }
    /**
     * 本接口(ModifyInstanceParam)用于修改云数据库实例的参数。
<b>注意</b>：如果修改的参数是需要<b>重启实例</b>的，那么实例将会按照WaitSwitch参数的设置(可能是立即执行也可能在可维护时间窗内自动执行)在执行参数修改时<b>重启实例</b>。
您可以通过DescribeInstanceParams接口查询修改参数时是否会重启实例，以免导致您的实例不符合预期重启。
     */
    async ModifyInstanceParam(req, cb) {
        return this.request("ModifyInstanceParam", req, cb);
    }
    /**
     * 本接口(DescribeRestoreTimeRange)用于查询按照时间点可回档的时间范围。
     */
    async DescribeRestoreTimeRange(req, cb) {
        return this.request("DescribeRestoreTimeRange", req, cb);
    }
    /**
     * 本接口（DescribeSlowlogs）用于获取慢查询日志文件信息
     */
    async DescribeSlowlogs(req, cb) {
        return this.request("DescribeSlowlogs", req, cb);
    }
    /**
     * 本接口(ModifyCrossBackupStrategy)用于开启、关闭地域备份策略。
     */
    async ModifyCrossBackupStrategy(req, cb) {
        return this.request("ModifyCrossBackupStrategy", req, cb);
    }
    /**
     * 本接口(DeleteDB)用于删除数据库。
     */
    async DeleteDB(req, cb) {
        return this.request("DeleteDB", req, cb);
    }
    /**
     * 本接口(DescribeFlowStatus)用于查询流程状态。
     */
    async DescribeFlowStatus(req, cb) {
        return this.request("DescribeFlowStatus", req, cb);
    }
    /**
     * 本接口（CreateBasicDBInstances）用于创建基础版实例 (云盘)。
     */
    async CreateBasicDBInstances(req, cb) {
        return this.request("CreateBasicDBInstances", req, cb);
    }
    /**
     * 本接口（RestartDBInstance）用于重启数据库实例。
     */
    async RestartDBInstance(req, cb) {
        return this.request("RestartDBInstance", req, cb);
    }
    /**
     * 本接口（CreateDBInstances）用于创建高可用实例 (本地盘)
     */
    async CreateDBInstances(req, cb) {
        return this.request("CreateDBInstances", req, cb);
    }
    /**
     * 本接口（CreateMigration）作用是创建一个迁移任务
     */
    async CreateMigration(req, cb) {
        return this.request("CreateMigration", req, cb);
    }
    /**
     * 本接口（DeleteBusinessIntelligenceFile）用于删除商业智能文件。
     */
    async DeleteBusinessIntelligenceFile(req, cb) {
        return this.request("DeleteBusinessIntelligenceFile", req, cb);
    }
    /**
     * 本接口（CreateBackupMigration）用于创建备份导入任务。
     */
    async CreateBackupMigration(req, cb) {
        return this.request("CreateBackupMigration", req, cb);
    }
    /**
     * 本接口(DescribeDBInstances)用于查询实例列表。
     */
    async DescribeDBInstances(req, cb) {
        return this.request("DescribeDBInstances", req, cb);
    }
    /**
     * 本接口（DescribeBusinessIntelligenceFile）用于查询商业智能服务需要的文件。
     */
    async DescribeBusinessIntelligenceFile(req, cb) {
        return this.request("DescribeBusinessIntelligenceFile", req, cb);
    }
    /**
     * 本接口（StartBackupMigration）用于启动备份导入任务。
     */
    async StartBackupMigration(req, cb) {
        return this.request("StartBackupMigration", req, cb);
    }
    /**
     * 本接口(AssociateSecurityGroups)用于安全组批量绑定实例。
     */
    async AssociateSecurityGroups(req, cb) {
        return this.request("AssociateSecurityGroups", req, cb);
    }
    /**
     * 本接口（OpenInterCommunication）用于打开实例的互通，实例互通可以实现商业智能服务相互联通。
     */
    async OpenInterCommunication(req, cb) {
        return this.request("OpenInterCommunication", req, cb);
    }
    /**
     * 本接口（CreateIncrementalMigration）用于创建增量备份导入任务。
     */
    async CreateIncrementalMigration(req, cb) {
        return this.request("CreateIncrementalMigration", req, cb);
    }
    /**
     * 本接口（DescribeBackupUploadSize）用于查询上传的备份文件大小。在备份上传类型是COS_UPLOAD(备份放在业务的对象存储上)时有效。
     */
    async DescribeBackupUploadSize(req, cb) {
        return this.request("DescribeBackupUploadSize", req, cb);
    }
    /**
     * 本接口（StartInstanceXEvent）用于开启、关闭扩展事件。
     */
    async StartInstanceXEvent(req, cb) {
        return this.request("StartInstanceXEvent", req, cb);
    }
    /**
     * 本接口（DeleteMigration）用于删除迁移任务
     */
    async DeleteMigration(req, cb) {
        return this.request("DeleteMigration", req, cb);
    }
    /**
     * 本接口（ModifyInstanceEncryptAttributes）用于开通实例的TDE加密功能。
     */
    async ModifyInstanceEncryptAttributes(req, cb) {
        return this.request("ModifyInstanceEncryptAttributes", req, cb);
    }
    /**
     * 本接口（DescribeDatabaseNames）查询账户关联的数据库名称。
     */
    async DescribeDatabaseNames(req, cb) {
        return this.request("DescribeDatabaseNames", req, cb);
    }
    /**
     * 本接口（DescribeInstanceByOrders）用于根据订单号查询资源ID
     */
    async DescribeInstanceByOrders(req, cb) {
        return this.request("DescribeInstanceByOrders", req, cb);
    }
    /**
     * 本接口（DescribeAccounts）用于拉取实例账户列表。
     */
    async DescribeAccounts(req, cb) {
        return this.request("DescribeAccounts", req, cb);
    }
    /**
     * 本接口（ModifyIncrementalMigration）用于修改增量备份导入任务。
     */
    async ModifyIncrementalMigration(req, cb) {
        return this.request("ModifyIncrementalMigration", req, cb);
    }
    /**
     * 本接口（ModifyDBEncryptAttributes）用于开启、关闭数据库的TDE加密功能。
     */
    async ModifyDBEncryptAttributes(req, cb) {
        return this.request("ModifyDBEncryptAttributes", req, cb);
    }
    /**
     * 本接口(DescribeCrossRegions)用于查询跨地域备份的目标地域。
     */
    async DescribeCrossRegions(req, cb) {
        return this.request("DescribeCrossRegions", req, cb);
    }
    /**
     * 本接口（ModifyDReadable）用于开通或者关闭备机只读
     */
    async ModifyDReadable(req, cb) {
        return this.request("ModifyDReadable", req, cb);
    }
    /**
     * 本接口（RemoveBackups）可以删除用户手动创建的备份文件。待删除的备份策略可以是实例备份，也可以是多库备份。
     */
    async RemoveBackups(req, cb) {
        return this.request("RemoveBackups", req, cb);
    }
    /**
     * 本接口（DescribeMigrationDatabases）的作用是查询待迁移数据库列表
     */
    async DescribeMigrationDatabases(req, cb) {
        return this.request("DescribeMigrationDatabases", req, cb);
    }
    /**
     * 本接口（DescribeDBInstanceInter）用于查询互通实例的信息。
     */
    async DescribeDBInstanceInter(req, cb) {
        return this.request("DescribeDBInstanceInter", req, cb);
    }
    /**
     * 本接口（RecycleDBInstance）用于主动回收已下线的SQLSERVER实例
     */
    async RecycleDBInstance(req, cb) {
        return this.request("RecycleDBInstance", req, cb);
    }
    /**
     * 本接口（CreateReadOnlyDBInstances）用于创建只读实例 (本地盘)。
     */
    async CreateReadOnlyDBInstances(req, cb) {
        return this.request("CreateReadOnlyDBInstances", req, cb);
    }
    /**
     * 本接口(SwitchCloudInstanceHA)用于手动主备切换。
     */
    async SwitchCloudInstanceHA(req, cb) {
        return this.request("SwitchCloudInstanceHA", req, cb);
    }
    /**
     * 本接口（DescribeInquiryPriceParameter）用于查询实例询价计费参数。当前接口查询实例新购的计费参数。内部接口用于活动页售卖场景。
     */
    async DescribeInquiryPriceParameter(req, cb) {
        return this.request("DescribeInquiryPriceParameter", req, cb);
    }
    /**
     * 本接口（CloseInterCommunication）用于关闭实例互通。
     */
    async CloseInterCommunication(req, cb) {
        return this.request("CloseInterCommunication", req, cb);
    }
    /**
     * 本接口(DescribeBackupSummary)用于查询数据库备份概览信息。
     */
    async DescribeBackupSummary(req, cb) {
        return this.request("DescribeBackupSummary", req, cb);
    }
    /**
     * 本接口（ModifyMigration）可以修改已有的迁移任务信息
     */
    async ModifyMigration(req, cb) {
        return this.request("ModifyMigration", req, cb);
    }
    /**
     * 本接口（DescribeOrders）用于查询订单信息
     */
    async DescribeOrders(req, cb) {
        return this.request("DescribeOrders", req, cb);
    }
    /**
     * 本接口（DescribeInstanceTradeParameter）用于查询实例的计费参数
     */
    async DescribeInstanceTradeParameter(req, cb) {
        return this.request("DescribeInstanceTradeParameter", req, cb);
    }
    /**
     * 本接口(DescribeBackupMonitor)用于查询备份空间使用详情。
     */
    async DescribeBackupMonitor(req, cb) {
        return this.request("DescribeBackupMonitor", req, cb);
    }
    /**
     * 本接口（CloneDB）用于克隆数据库，只支持克隆到本实例，克隆时必须指定新库名称。
     */
    async CloneDB(req, cb) {
        return this.request("CloneDB", req, cb);
    }
    /**
     * 本接口（RestoreInstance）用于按照备份集回档数据库。
     */
    async RestoreInstance(req, cb) {
        return this.request("RestoreInstance", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceProject）用于修改数据库实例所属项目。
     */
    async ModifyDBInstanceProject(req, cb) {
        return this.request("ModifyDBInstanceProject", req, cb);
    }
    /**
     * 本接口(DescribeCrossBackupStatistical)用于查询跨地域备份实时统计列表。
     */
    async DescribeCrossBackupStatistical(req, cb) {
        return this.request("DescribeCrossBackupStatistical", req, cb);
    }
    /**
     * 本接口（DeleteAccount）用于删除实例账号。
     */
    async DeleteAccount(req, cb) {
        return this.request("DeleteAccount", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceSSL）用于开启\关闭\更新SSL加密
     */
    async ModifyDBInstanceSSL(req, cb) {
        return this.request("ModifyDBInstanceSSL", req, cb);
    }
    /**
     * 本接口（ModifyBackupStrategy）用于修改备份策略
     */
    async ModifyBackupStrategy(req, cb) {
        return this.request("ModifyBackupStrategy", req, cb);
    }
    /**
     * 本接口(DescribeDBsNormal)用于查询数据库配置信息，此接口不包含数据库的关联账号。**此接口已废弃，请使用DescribeDatabasesNormal。**
     */
    async DescribeDBsNormal(req, cb) {
        return this.request("DescribeDBsNormal", req, cb);
    }
    /**
     * 本接口(ModifyOpenWanIp)用于开通实例外网。
     */
    async ModifyOpenWanIp(req, cb) {
        return this.request("ModifyOpenWanIp", req, cb);
    }
    /**
     * 本接口（DescribeMigrations）根据输入的限定条件，查询符合条件的迁移任务列表
     */
    async DescribeMigrations(req, cb) {
        return this.request("DescribeMigrations", req, cb);
    }
    /**
     * 本接口(DescribeDBsNormal)用于查询数据库配置信息，此接口不包含数据库的关联账号
     */
    async DescribeDatabasesNormal(req, cb) {
        return this.request("DescribeDatabasesNormal", req, cb);
    }
    /**
     * 本接口（RollbackInstance）用于按照时间点回档实例
     */
    async RollbackInstance(req, cb) {
        return this.request("RollbackInstance", req, cb);
    }
    /**
     * 本接口（DescribeDBs）用于查询数据库列表。**已废弃，请使用接口DescribeDatabases**
     */
    async DescribeDBs(req, cb) {
        return this.request("DescribeDBs", req, cb);
    }
    /**
     * 本接口（DescribeBackupCommand）用于查询以规范的格式创建备份的命令。
     */
    async DescribeBackupCommand(req, cb) {
        return this.request("DescribeBackupCommand", req, cb);
    }
    /**
     * 本接口（RenewDBInstance）用于续费实例。当被续费实例是按量计费实例时，则按量计费实例转为包年包月计费方式。
按量计费实例转包年包月询价可通过(InquiryPriceRenewDBInstance)接口获得。
     */
    async RenewDBInstance(req, cb) {
        return this.request("RenewDBInstance", req, cb);
    }
    /**
     * 本接口（InquiryPriceUpgradeDBInstance）用于查询包年包月实例升级变配的价格。
     */
    async InquiryPriceUpgradeDBInstance(req, cb) {
        return this.request("InquiryPriceUpgradeDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeReadOnlyGroupAutoWeight）用于查询只读组的自动权重分配结果，在接口BalanceReadOnlyGroup接口中按照自动权重分配结果进行路由权重分配。
     */
    async DescribeReadOnlyGroupAutoWeight(req, cb) {
        return this.request("DescribeReadOnlyGroupAutoWeight", req, cb);
    }
    /**
     * 本接口（InquiryPriceRenewDBInstance）用于查询包年包月实例的续费价格。
     */
    async InquiryPriceRenewDBInstance(req, cb) {
        return this.request("InquiryPriceRenewDBInstance", req, cb);
    }
    /**
     * 本接口（DescribeXEvents）用于查询扩展事件列表。
     */
    async DescribeXEvents(req, cb) {
        return this.request("DescribeXEvents", req, cb);
    }
    /**
     * 本接口（ModifyBackupMigration）用于修改备份导入任务。
     */
    async ModifyBackupMigration(req, cb) {
        return this.request("ModifyBackupMigration", req, cb);
    }
    /**
     * 本接口(DescribeDBPrivilegeByAccount)用于查询账号关联的数据库和权限信息
     */
    async DescribeDBPrivilegeByAccount(req, cb) {
        return this.request("DescribeDBPrivilegeByAccount", req, cb);
    }
    /**
     * 本接口(DescribeAccountPrivilegeByDB)用于查询数据库关联的账号和权限信息
     */
    async DescribeAccountPrivilegeByDB(req, cb) {
        return this.request("DescribeAccountPrivilegeByDB", req, cb);
    }
    /**
     * 本接口 (DescribeProductSpec) 用于查询全地域售卖规格配置（内部前端使用不公开）
     */
    async DescribeProductSpec(req, cb) {
        return this.request("DescribeProductSpec", req, cb);
    }
    /**
     * 本接口(DescribeBackupByFlowId)用于通过备份创建流程的ID查询创建的备份详情，流程ID可从接口CreateBackup中获得。
     */
    async DescribeBackupByFlowId(req, cb) {
        return this.request("DescribeBackupByFlowId", req, cb);
    }
    /**
     * 本接口（DescribeRollbackTime）用于查询实例可回档时间范围
     */
    async DescribeRollbackTime(req, cb) {
        return this.request("DescribeRollbackTime", req, cb);
    }
    /**
     * 本接口(DescribeDBSecurityGroups)用于查询实例的安全组详情。
     */
    async DescribeDBSecurityGroups(req, cb) {
        return this.request("DescribeDBSecurityGroups", req, cb);
    }
    /**
     * 本接口（ModifyReadOnlyGroupDetails）用于修改只读组详情。
     */
    async ModifyReadOnlyGroupDetails(req, cb) {
        return this.request("ModifyReadOnlyGroupDetails", req, cb);
    }
    /**
     * 本接口（DeleteBackupMigration）用于删除备份导入任务。
     */
    async DeleteBackupMigration(req, cb) {
        return this.request("DeleteBackupMigration", req, cb);
    }
    /**
     * 本接口（DescribeDBInstancesAttribute）用于查询实例附属属性
     */
    async DescribeDBInstancesAttribute(req, cb) {
        return this.request("DescribeDBInstancesAttribute", req, cb);
    }
    /**
     * 本接口（UpgradeDBInstance）用于升级实例
     */
    async UpgradeDBInstance(req, cb) {
        return this.request("UpgradeDBInstance", req, cb);
    }
    /**
     * 本接口（ModifyDBInstanceRenewFlag）用于修改实例续费标记
     */
    async ModifyDBInstanceRenewFlag(req, cb) {
        return this.request("ModifyDBInstanceRenewFlag", req, cb);
    }
    /**
     * 本接口（DescribeReadOnlyGroupByReadOnlyInstance）用于通过只读副本实例ID查询其所在的只读组。
     */
    async DescribeReadOnlyGroupByReadOnlyInstance(req, cb) {
        return this.request("DescribeReadOnlyGroupByReadOnlyInstance", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249377, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ssa = void 0;
const v20180608_1 = require("./v20180608");
exports.ssa = {
    v20180608: v20180608_1.v20180608,
};

}, function(modId) { var map = {"./v20180608":1738984249378}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249378, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180608 = void 0;
const Models = require("./ssa_models");
const ssa_client_1 = require("./ssa_client");
exports.v20180608 = {
    Client: ssa_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ssa_models":1738984249379,"./ssa_client":1738984249380}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249379, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249380, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ssa client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ssa.tencentcloudapi.com", "2018-06-08", clientConfig);
    }
    /**
     * 资产条件查询
     */
    async DescribeAssetDetailList(req, cb) {
        return this.request("DescribeAssetDetailList", req, cb);
    }
    /**
     * 云配置检查项总览页检查项列表
     */
    async DescribeConfigList(req, cb) {
        return this.request("DescribeConfigList", req, cb);
    }
    /**
     * 获取泄露列表
     */
    async DescribeLeakDetectionList(req, cb) {
        return this.request("DescribeLeakDetectionList", req, cb);
    }
    /**
     * 获取测绘列表
     */
    async DescribeMappingResults(req, cb) {
        return this.request("DescribeMappingResults", req, cb);
    }
    /**
     * 获取安全事件详情
     */
    async DescribeEventDetail(req, cb) {
        return this.request("DescribeEventDetail", req, cb);
    }
    /**
     * 合规管理-资产列表
     */
    async DescribeComplianceAssetList(req, cb) {
        return this.request("DescribeComplianceAssetList", req, cb);
    }
    /**
     * 域名列表信息
     */
    async DescribeDomainList(req, cb) {
        return this.request("DescribeDomainList", req, cb);
    }
    /**
     * 云安全配置检查项列表
     */
    async DescribeSocCheckItemList(req, cb) {
        return this.request("DescribeSocCheckItemList", req, cb);
    }
    /**
     * 资产安全页资产详情
     */
    async DescribeAssetDetail(req, cb) {
        return this.request("DescribeAssetDetail", req, cb);
    }
    /**
     * 安全事件通用字段
     */
    async SaEventPub(req, cb) {
        return this.request("SaEventPub", req, cb);
    }
    /**
     * SaDivulgeScanRuleMutate
     */
    async SaDivulgeScanRuleMutate(req, cb) {
        return this.request("SaDivulgeScanRuleMutate", req, cb);
    }
    /**
     * 合规管理总览页检查项列表
     */
    async DescribeComplianceList(req, cb) {
        return this.request("DescribeComplianceList", req, cb);
    }
    /**
     * 资产安全资产列表
     */
    async DescribeAssetList(req, cb) {
        return this.request("DescribeAssetList", req, cb);
    }
    /**
     * 云安全配置管理资产组列表
     */
    async DescribeCheckConfigAssetList(req, cb) {
        return this.request("DescribeCheckConfigAssetList", req, cb);
    }
    /**
     * 漏洞管理页，获取漏洞列表
     */
    async DescribeVulList(req, cb) {
        return this.request("DescribeVulList", req, cb);
    }
    /**
     * 云安全配置检查项结果列表
     */
    async DescribeSocCheckResultList(req, cb) {
        return this.request("DescribeSocCheckResultList", req, cb);
    }
    /**
     * 返回告警详情
     */
    async DescribeSocAlertDetails(req, cb) {
        return this.request("DescribeSocAlertDetails", req, cb);
    }
    /**
     * 安全大屏-用户威胁告警信息
     */
    async DescribeAlarmStat(req, cb) {
        return this.request("DescribeAlarmStat", req, cb);
    }
    /**
     * 合规详情项
     */
    async DescribeSocCspmCompliance(req, cb) {
        return this.request("DescribeSocCspmCompliance", req, cb);
    }
    /**
     * 拉取告警列表
     */
    async DescribeSocAlertList(req, cb) {
        return this.request("DescribeSocAlertList", req, cb);
    }
    /**
     * 云安全配置检查项详情
     */
    async DescribeCheckConfigDetail(req, cb) {
        return this.request("DescribeCheckConfigDetail", req, cb);
    }
    /**
     * 合规管理检查项详情
     */
    async DescribeComplianceDetail(req, cb) {
        return this.request("DescribeComplianceDetail", req, cb);
    }
    /**
     * 漏洞列表页，获取漏洞详情信息
     */
    async DescribeVulDetail(req, cb) {
        return this.request("DescribeVulDetail", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249381, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ssl = void 0;
const v20191205_1 = require("./v20191205");
exports.ssl = {
    v20191205: v20191205_1.v20191205,
};

}, function(modId) { var map = {"./v20191205":1738984249382}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249382, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20191205 = void 0;
const Models = require("./ssl_models");
const ssl_client_1 = require("./ssl_client");
exports.v20191205 = {
    Client: ssl_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ssl_models":1738984249383,"./ssl_client":1738984249384}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249383, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249384, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ssl client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ssl.tencentcloudapi.com", "2019-12-05", clientConfig);
    }
    /**
     * 查询证书cos云资源部署实例列表
     */
    async DescribeHostCosInstanceList(req, cb) {
        return this.request("DescribeHostCosInstanceList", req, cb);
    }
    /**
     * 本接口（DescribeCertificates）用于获取证书列表。
     */
    async DescribeCertificates(req, cb) {
        return this.request("DescribeCertificates", req, cb);
    }
    /**
     * 查询证书cdn云资源部署实例列表
     */
    async DescribeHostCdnInstanceList(req, cb) {
        return this.request("DescribeHostCdnInstanceList", req, cb);
    }
    /**
     * 检查证书域名验证
     */
    async CheckCertificateDomainVerification(req, cb) {
        return this.request("CheckCertificateDomainVerification", req, cb);
    }
    /**
     * 查询证书tke云资源部署实例列表
     */
    async DescribeHostTkeInstanceList(req, cb) {
        return this.request("DescribeHostTkeInstanceList", req, cb);
    }
    /**
     * 查询证书云资源更新记录列表
     */
    async DescribeHostUpdateRecord(req, cb) {
        return this.request("DescribeHostUpdateRecord", req, cb);
    }
    /**
     * 查询证书云资源部署记录列表
     */
    async DescribeHostDeployRecord(req, cb) {
        return this.request("DescribeHostDeployRecord", req, cb);
    }
    /**
     * 删除管理人
     */
    async DeleteManager(req, cb) {
        return this.request("DeleteManager", req, cb);
    }
    /**
     * 获取下载证书链接
     */
    async DescribeDownloadCertificateUrl(req, cb) {
        return this.request("DescribeDownloadCertificateUrl", req, cb);
    }
    /**
     * 证书部署到云资源实例列表，本接口只会创建部署任务， 部署任务结果可通过DescribeHostDeployRecordDetail查询。本接口创建部署任务时，会校验证书和部署实例的匹配关系，存在不匹配的则会创建部署任务失败。以下为匹配关系校验规则：
- 若待部署的证书和传入实例域名的当前绑定的证书一致， 则不会创建成功
- 若待部署的证书和传入域名不匹配， 则不会创建成功
- 若部署clb实例时， 7层监听器下无规则，则不会创建成功
- 若部署clb实例时， 7层监听器未开启SNI，该监听器下存在任一域名和证书不匹配， 则不会创建成功
- 若部署clb实例时，监听器规则为正则表示式， 则不会创建成功

<dx-alert infotype="explain" title="">一个证书ID，相同的资源类型，只能创建一个部署任务，必须等部署任务执行完成，才能创建新的部署任务</dx-alert>
     */
    async DeployCertificateInstance(req, cb) {
        return this.request("DeployCertificateInstance", req, cb);
    }
    /**
     * 重新提交审核管理人
     */
    async SubmitAuditManager(req, cb) {
        return this.request("SubmitAuditManager", req, cb);
    }
    /**
     * 获得权益包列表
     */
    async DescribePackages(req, cb) {
        return this.request("DescribePackages", req, cb);
    }
    /**
     * 提交证书资料。输入参数信息可以分多次提交，但提交的证书资料应最低限度保持完整。
     */
    async SubmitCertificateInformation(req, cb) {
        return this.request("SubmitCertificateInformation", req, cb);
    }
    /**
     * 云资源更新一键回滚
     */
    async UpdateCertificateRecordRollback(req, cb) {
        return this.request("UpdateCertificateRecordRollback", req, cb);
    }
    /**
     * 云资源更新重试部署记录
     */
    async UpdateCertificateRecordRetry(req, cb) {
        return this.request("UpdateCertificateRecordRetry", req, cb);
    }
    /**
     * 查询证书ddos云资源部署实例列表
     */
    async DescribeHostDdosInstanceList(req, cb) {
        return this.request("DescribeHostDdosInstanceList", req, cb);
    }
    /**
     * 重新核验管理人
     */
    async VerifyManager(req, cb) {
        return this.request("VerifyManager", req, cb);
    }
    /**
     * 查询证书clb云资源部署实例列表
     */
    async DescribeHostClbInstanceList(req, cb) {
        return this.request("DescribeHostClbInstanceList", req, cb);
    }
    /**
     * 查询证书EdgeOne云资源部署实例列表
     */
    async DescribeHostTeoInstanceList(req, cb) {
        return this.request("DescribeHostTeoInstanceList", req, cb);
    }
    /**
     * 取消证书订单。
     */
    async CancelCertificateOrder(req, cb) {
        return this.request("CancelCertificateOrder", req, cb);
    }
    /**
     * 本接口（DownloadCertificate）用于下载证书。
     */
    async DownloadCertificate(req, cb) {
        return this.request("DownloadCertificate", req, cb);
    }
    /**
     * 本接口（DeleteCertificate）用于删除证书。
     */
    async DeleteCertificate(req, cb) {
        return this.request("DeleteCertificate", req, cb);
    }
    /**
     * 本接口（CompleteCertificate）用于主动触发证书验证。DNSPod和Wotrus品牌的证书不支持使用此接口。
     */
    async CompleteCertificate(req, cb) {
        return this.request("CompleteCertificate", req, cb);
    }
    /**
     * 一键更新旧证书资源，本接口为异步接口， 调用之后DeployRecordId为0表示任务进行中， 重复请求这个接口， 当返回DeployRecordId大于0则表示任务创建成功。 未创建成功则会抛出异常
     */
    async UpdateCertificateInstance(req, cb) {
        return this.request("UpdateCertificateInstance", req, cb);
    }
    /**
     * 本接口（UploadCertificate）用于上传证书。
     */
    async UploadCertificate(req, cb) {
        return this.request("UploadCertificate", req, cb);
    }
    /**
     * 本接口（CheckCertificateChain）用于检查证书链是否完整。
     */
    async CheckCertificateChain(req, cb) {
        return this.request("CheckCertificateChain", req, cb);
    }
    /**
     * 用户传入证书id和备注来修改证书备注。
     */
    async ModifyCertificateAlias(req, cb) {
        return this.request("ModifyCertificateAlias", req, cb);
    }
    /**
     * 查询公司列表
     */
    async DescribeCompanies(req, cb) {
        return this.request("DescribeCompanies", req, cb);
    }
    /**
     * 获取证书详情。
     */
    async DescribeCertificateDetail(req, cb) {
        return this.request("DescribeCertificateDetail", req, cb);
    }
    /**
     * 查询证书Vod云资源部署实例列表
     */
    async DescribeHostVodInstanceList(req, cb) {
        return this.request("DescribeHostVodInstanceList", req, cb);
    }
    /**
     * 查询证书live云资源部署实例列表
     */
    async DescribeHostLiveInstanceList(req, cb) {
        return this.request("DescribeHostLiveInstanceList", req, cb);
    }
    /**
     * 查询证书waf云资源部署实例列表
     */
    async DescribeHostWafInstanceList(req, cb) {
        return this.request("DescribeHostWafInstanceList", req, cb);
    }
    /**
     * 查询管理人详情
     */
    async DescribeManagerDetail(req, cb) {
        return this.request("DescribeManagerDetail", req, cb);
    }
    /**
     * 本接口（UploadRevokeLetter）用于上传证书吊销确认函。
     */
    async UploadRevokeLetter(req, cb) {
        return this.request("UploadRevokeLetter", req, cb);
    }
    /**
     * 查询证书云资源部署记录详情列表
     */
    async DescribeHostDeployRecordDetail(req, cb) {
        return this.request("DescribeHostDeployRecordDetail", req, cb);
    }
    /**
     * 云资源部署一键回滚
     */
    async DeployCertificateRecordRollback(req, cb) {
        return this.request("DeployCertificateRecordRollback", req, cb);
    }
    /**
     * 云资源部署重试部署记录
     */
    async DeployCertificateRecordRetry(req, cb) {
        return this.request("DeployCertificateRecordRetry", req, cb);
    }
    /**
     * 查询CreateCertificateBindResourceSyncTask任务结果， 返回证书关联云资源异步任务结果， 支持以下云资源：clb、cdn、waf、live、vod、ddos、tke、apigateway、tcb、teo（edgeOne）、cos
     */
    async DescribeCertificateBindResourceTaskResult(req, cb) {
        return this.request("DescribeCertificateBindResourceTaskResult", req, cb);
    }
    /**
     * 取消证书审核
     */
    async CancelAuditCertificate(req, cb) {
        return this.request("CancelAuditCertificate", req, cb);
    }
    /**
     * 根据证书内容检测当前账号下是否存在一致的证书， 存在则返回证书ID， 不存在则返回空
     */
    async CheckCertificateExist(req, cb) {
        return this.request("CheckCertificateExist", req, cb);
    }
    /**
     * 批量删除证书，删除证书前支持查询证书是否关联了腾讯云云资源 （需自定义配置参数，参数名称：IsSync）
     */
    async DeleteCertificates(req, cb) {
        return this.request("DeleteCertificates", req, cb);
    }
    /**
     * 本接口（RevokeCertificate）用于吊销证书。
     */
    async RevokeCertificate(req, cb) {
        return this.request("RevokeCertificate", req, cb);
    }
    /**
     * 批量修改证书所属项目。
     */
    async ModifyCertificateProject(req, cb) {
        return this.request("ModifyCertificateProject", req, cb);
    }
    /**
     * 本接口（DescribeCertificate）用于获取证书信息。
     */
    async DescribeCertificate(req, cb) {
        return this.request("DescribeCertificate", req, cb);
    }
    /**
     * 证书查询关联资源， 最新查询接口请使用CreateCertificateBindResourceSyncTask， 可以查询更多支持的云资源
     */
    async DescribeDeployedResources(req, cb) {
        return this.request("DescribeDeployedResources", req, cb);
    }
    /**
     * 使用权益点创建证书
     */
    async CreateCertificateByPackage(req, cb) {
        return this.request("CreateCertificateByPackage", req, cb);
    }
    /**
     * 本接口（UploadConfirmLetter）用于上传证书确认函。
     */
    async UploadConfirmLetter(req, cb) {
        return this.request("UploadConfirmLetter", req, cb);
    }
    /**
     * 查询证书Lighthouse云资源部署实例列表
     */
    async DescribeHostLighthouseInstanceList(req, cb) {
        return this.request("DescribeHostLighthouseInstanceList", req, cb);
    }
    /**
     * 查询证书云资源更新记录详情列表
     */
    async DescribeHostUpdateRecordDetail(req, cb) {
        return this.request("DescribeHostUpdateRecordDetail", req, cb);
    }
    /**
     * 提交证书订单到CA机构。
     */
    async CommitCertificateInformation(req, cb) {
        return this.request("CommitCertificateInformation", req, cb);
    }
    /**
     * 获取用户账号下有关证书的操作日志。
     */
    async DescribeCertificateOperateLogs(req, cb) {
        return this.request("DescribeCertificateOperateLogs", req, cb);
    }
    /**
     * 查询证书apiGateway云资源部署实例列表
     */
    async DescribeHostApiGatewayInstanceList(req, cb) {
        return this.request("DescribeHostApiGatewayInstanceList", req, cb);
    }
    /**
     * 本接口（CreateCertificate）用于创建付费证书。
     */
    async CreateCertificate(req, cb) {
        return this.request("CreateCertificate", req, cb);
    }
    /**
     * 创建证书绑定关联云资源异步任务， 该接口用于查询证书关联云资源。 若证书ID已存在查询云资源任务，则结果返回该任务ID。关联云资源类型，支持以下云资源：clb、cdn、waf、live、vod、ddos、tke、apigateway、tcb、teo（edgeOne）、cos。查询关联云资源结果使用DescribeCertificateBindResourceTaskResult接口
     */
    async CreateCertificateBindResourceSyncTask(req, cb) {
        return this.request("CreateCertificateBindResourceSyncTask", req, cb);
    }
    /**
     * 修改忽略证书到期通知。打开或关闭证书到期通知。
     */
    async ModifyCertificatesExpiringNotificationSwitch(req, cb) {
        return this.request("ModifyCertificatesExpiringNotificationSwitch", req, cb);
    }
    /**
     * 本接口（ReplaceCertificate）用于重颁发证书。已申请的免费证书仅支持 RSA 算法、密钥对参数为2048的证书重颁发，并且目前仅支持1次重颁发。
     */
    async ReplaceCertificate(req, cb) {
        return this.request("ReplaceCertificate", req, cb);
    }
    /**
     * 本接口（ApplyCertificate）用于免费证书申请。
     */
    async ApplyCertificate(req, cb) {
        return this.request("ApplyCertificate", req, cb);
    }
    /**
     * 查询批量删除任务结果
     */
    async DescribeDeleteCertificatesTaskResult(req, cb) {
        return this.request("DescribeDeleteCertificatesTaskResult", req, cb);
    }
    /**
     * 查询管理人列表
     */
    async DescribeManagers(req, cb) {
        return this.request("DescribeManagers", req, cb);
    }
    /**
     * 查询CreateCertificateBindResourceSyncTask任务结果， 返回证书关联云资源异步任务结果， 支持以下云资源：clb、cdn、waf、live、vod、ddos、tke、apigateway、tcb、teo（edgeOne）、cos
     */
    async DescribeCertificateBindResourceTaskDetail(req, cb) {
        return this.request("DescribeCertificateBindResourceTaskDetail", req, cb);
    }
    /**
     * 针对审核失败或审核取消的付费证书，重新发起审核
     */
    async ModifyCertificateResubmit(req, cb) {
        return this.request("ModifyCertificateResubmit", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249385, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.sslpod = void 0;
const v20190605_1 = require("./v20190605");
exports.sslpod = {
    v20190605: v20190605_1.v20190605,
};

}, function(modId) { var map = {"./v20190605":1738984249386}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249386, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190605 = void 0;
const Models = require("./sslpod_models");
const sslpod_client_1 = require("./sslpod_client");
exports.v20190605 = {
    Client: sslpod_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./sslpod_models":1738984249387,"./sslpod_client":1738984249388}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249387, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249388, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * sslpod client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("sslpod.tencentcloudapi.com", "2019-06-05", clientConfig);
    }
    /**
     * 获取通知额度信息
     */
    async DescribeNoticeInfo(req, cb) {
        return this.request("DescribeNoticeInfo", req, cb);
    }
    /**
     * 强制重新检测域名
     */
    async RefreshDomain(req, cb) {
        return this.request("RefreshDomain", req, cb);
    }
    /**
     * 修改域名tag
     */
    async ModifyDomainTags(req, cb) {
        return this.request("ModifyDomainTags", req, cb);
    }
    /**
     * 获取账号下所有tag
     */
    async DescribeDomainTags(req, cb) {
        return this.request("DescribeDomainTags", req, cb);
    }
    /**
     * 获取域名关联证书
     */
    async DescribeDomainCerts(req, cb) {
        return this.request("DescribeDomainCerts", req, cb);
    }
    /**
     * 获取仪表盘数据
     */
    async DescribeDashboard(req, cb) {
        return this.request("DescribeDashboard", req, cb);
    }
    /**
     * 通过searchType搜索已经添加的域名
     */
    async DescribeDomains(req, cb) {
        return this.request("DescribeDomains", req, cb);
    }
    /**
     * 通过域名ID删除监控的域名
     */
    async DeleteDomain(req, cb) {
        return this.request("DeleteDomain", req, cb);
    }
    /**
     * 通过域名端口添加监控
     */
    async CreateDomain(req, cb) {
        return this.request("CreateDomain", req, cb);
    }
    /**
     * 解析域名获得多个IP地址
     */
    async ResolveDomain(req, cb) {
        return this.request("ResolveDomain", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249389, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ssm = void 0;
const v20190923_1 = require("./v20190923");
exports.ssm = {
    v20190923: v20190923_1.v20190923,
};

}, function(modId) { var map = {"./v20190923":1738984249390}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249390, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190923 = void 0;
const Models = require("./ssm_models");
const ssm_client_1 = require("./ssm_client");
exports.v20190923 = {
    Client: ssm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ssm_models":1738984249391,"./ssm_client":1738984249392}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249391, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249392, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ssm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ssm.tencentcloudapi.com", "2019-09-23", clientConfig);
    }
    /**
     * 查询凭据轮转历史版本。
本接口仅适用于云产品凭据。
     */
    async DescribeRotationHistory(req, cb) {
        return this.request("DescribeRotationHistory", req, cb);
    }
    /**
     * 轮转云产品凭据或云API密钥对凭据。
该接口仅适用于处于Enabled状态的云产品凭据或处于Enable状态的云API密钥对凭据，对于其他状态的云产品凭据或云API密钥对凭据或用户自定义凭据不适用。
     */
    async RotateProductSecret(req, cb) {
        return this.request("RotateProductSecret", req, cb);
    }
    /**
     * 删除指定的凭据信息，可以通过RecoveryWindowInDays参数设置立即删除或者计划删除。对于计划删除的凭据，在删除日期到达之前状态为 PendingDelete，并可以通过RestoreSecret 进行恢复，超出指定删除日期之后会被彻底删除。您必须先通过 DisableSecret 停用凭据后才可以进行（计划）删除操作。
     */
    async DeleteSecret(req, cb) {
        return this.request("DeleteSecret", req, cb);
    }
    /**
     * 该接口用于更新指定凭据名称和版本号的内容，调用该接口会对新的凭据内容加密后覆盖旧的内容。仅允许更新Enabled 和 Disabled 状态的凭据。
本接口仅适用于用户自定义凭据，不能对云产品凭据操作。
     */
    async UpdateSecret(req, cb) {
        return this.request("UpdateSecret", req, cb);
    }
    /**
     * 该接口用于获取所有凭据的详细列表，可以指定过滤字段、排序方式等。
     */
    async ListSecrets(req, cb) {
        return this.request("ListSecrets", req, cb);
    }
    /**
     * 创建用于托管SSH密钥对的凭据
     */
    async CreateSSHKeyPairSecret(req, cb) {
        return this.request("CreateSSHKeyPairSecret", req, cb);
    }
    /**
     * 设置云产品凭据轮转策略，可以设置：
是否开启轮转
轮转周期
轮转开始时间
     */
    async UpdateRotationStatus(req, cb) {
        return this.request("UpdateRotationStatus", req, cb);
    }
    /**
     * 查询支持的云产品列表
     */
    async DescribeSupportedProducts(req, cb) {
        return this.request("DescribeSupportedProducts", req, cb);
    }
    /**
     * 对于用户自定义凭据，通过指定凭据名称和版本来获取凭据的明文信息；
对于云产品凭据如Mysql凭据，通过指定凭据名称和历史版本号来获取历史轮转凭据的明文信息，如果要获取当前正在使用的凭据版本的明文，需要将版本号指定为：SSM_Current。
     */
    async GetSecretValue(req, cb) {
        return this.request("GetSecretValue", req, cb);
    }
    /**
     * 查询异步任务的执行结果
     */
    async DescribeAsyncRequestInfo(req, cb) {
        return this.request("DescribeAsyncRequestInfo", req, cb);
    }
    /**
     * 创建云产品凭据
     */
    async CreateProductSecret(req, cb) {
        return this.request("CreateProductSecret", req, cb);
    }
    /**
     * 该接口用于直接删除指定凭据下的单个版本凭据，删除操作立即生效，对所有状态下的凭据版本都可以删除。
本接口仅适用于用户自定义凭据，本接口不能对云产品凭据进行操作。
     */
    async DeleteSecretVersion(req, cb) {
        return this.request("DeleteSecretVersion", req, cb);
    }
    /**
     * 该接口用于修改指定凭据的描述信息，仅能修改Enabled 和 Disabled 状态的凭据。
     */
    async UpdateDescription(req, cb) {
        return this.request("UpdateDescription", req, cb);
    }
    /**
     * 该接口在指定名称的凭据下增加新版本的凭据内容，一个凭据下最多可以支持10个版本。只能对处于Enabled 和 Disabled 状态的凭据添加新的版本。
本接口仅适用于用户自定义凭据，对云产品凭据不能操作。
     */
    async PutSecretValue(req, cb) {
        return this.request("PutSecretValue", req, cb);
    }
    /**
     * 获取凭据的详细属性信息。
     */
    async DescribeSecret(req, cb) {
        return this.request("DescribeSecret", req, cb);
    }
    /**
     * 查询凭据轮转策略详情。
本接口只适用于云产品凭据。
     */
    async DescribeRotationDetail(req, cb) {
        return this.request("DescribeRotationDetail", req, cb);
    }
    /**
     * 获取SSH密钥对凭据明文信息。
     */
    async GetSSHKeyPairValue(req, cb) {
        return this.request("GetSSHKeyPairValue", req, cb);
    }
    /**
     * 该接口用于获取指定凭据下的版本列表信息
     */
    async ListSecretVersionIds(req, cb) {
        return this.request("ListSecretVersionIds", req, cb);
    }
    /**
     * 创建新的凭据信息，通过KMS进行加密保护。每个Region最多可创建存储1000个凭据信息。
     */
    async CreateSecret(req, cb) {
        return this.request("CreateSecret", req, cb);
    }
    /**
     * 该接口用于开启凭据，状态为Enabled。可以通过 GetSecretValue 接口获取凭据明文。处于PendingDelete状态的凭据不能直接开启，需要通过RestoreSecret 恢复后再开启使用。
     */
    async EnableSecret(req, cb) {
        return this.request("EnableSecret", req, cb);
    }
    /**
     * 该接口用于恢复计划删除（PendingDelete状态）中的凭据，取消计划删除。取消计划删除的凭据将处于Disabled 状态，如需恢复使用，通过EnableSecret 接口开启凭据。
     */
    async RestoreSecret(req, cb) {
        return this.request("RestoreSecret", req, cb);
    }
    /**
     * 该接口用户获取用户SecretsManager服务开通状态。
     */
    async GetServiceStatus(req, cb) {
        return this.request("GetServiceStatus", req, cb);
    }
    /**
     * 获取控制台展示region列表
     */
    async GetRegions(req, cb) {
        return this.request("GetRegions", req, cb);
    }
    /**
     * 停用指定的凭据，停用后状态为 Disabled，无法通过接口获取该凭据的明文。
     */
    async DisableSecret(req, cb) {
        return this.request("DisableSecret", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249393, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.sts = void 0;
const v20180813_1 = require("./v20180813");
exports.sts = {
    v20180813: v20180813_1.v20180813,
};

}, function(modId) { var map = {"./v20180813":1738984249394}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249394, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180813 = void 0;
const Models = require("./sts_models");
const sts_client_1 = require("./sts_client");
exports.v20180813 = {
    Client: sts_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./sts_models":1738984249395,"./sts_client":1738984249396}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249395, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249396, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * sts client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("sts.tencentcloudapi.com", "2018-08-13", clientConfig);
    }
    /**
     * **使用说明**

返回一组临时访问凭证，典型的应用场景是代理应用程序集中申请临时访问凭证，下发给企业网络内其他分布式终端应用，比如终端应用上传文件到COS场景，本接口仅支持永久密钥调用。

**最佳实践**

1. 临时访问凭据在有效期内都可以使用，建议在有效期内重复使用，以避免业务请求速率上升后被限频
2. 授予临时访问凭证权限的CAM策略，建议按权限最小化原则
3. 调用接口的永久密钥，建议不要使用主账号
     */
    async GetFederationToken(req, cb) {
        return this.request("GetFederationToken", req, cb);
    }
    /**
     * 拉取API密钥列表
     */
    async QueryApiKey(req, cb) {
        return this.request("QueryApiKey", req, cb);
    }
    /**
     * 申请扮演角色临时访问凭证。

1、角色策略组成

（1）角色信任策略：指定谁可以扮演该角色；

（2）角色权限策略：指定扮演角色后可以执行哪些操作。


2、角色可扮演条件

（1）给用户绑定允许调用AssumeRole的策略 ；

（2）将用户添加为角色信任策略中的主体。
     */
    async AssumeRole(req, cb) {
        return this.request("AssumeRole", req, cb);
    }
    /**
     * 申请OIDC角色临时访问凭证。

注意：当使用签名方法 V3 调用本接口时，请求头无须传入 X-TC-Token, 但 Authorization 需要传入值 SKIP。
     */
    async AssumeRoleWithWebIdentity(req, cb) {
        return this.request("AssumeRoleWithWebIdentity", req, cb);
    }
    /**
     * 获取当前调用者的身份信息。

接口支持主账号，子账号长期密钥以及AssumeRole，GetFederationToken生成的临时访问凭证身份获取。
     */
    async GetCallerIdentity(req, cb) {
        return this.request("GetCallerIdentity", req, cb);
    }
    /**
     * 本接口（AssumeRoleWithSAML）用于根据 SAML 断言申请角色临时访问凭证。

注意：当使用签名方法 V3 调用本接口时，请求头无须传入 X-TC-Token, 但 Authorization 需要传入值 SKIP。
     */
    async AssumeRoleWithSAML(req, cb) {
        return this.request("AssumeRoleWithSAML", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249397, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.svp = void 0;
const v20240125_1 = require("./v20240125");
exports.svp = {
    v20240125: v20240125_1.v20240125,
};

}, function(modId) { var map = {"./v20240125":1738984249398}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249398, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20240125 = void 0;
const Models = require("./svp_models");
const svp_client_1 = require("./svp_client");
exports.v20240125 = {
    Client: svp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./svp_models":1738984249399,"./svp_client":1738984249400}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249399, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249400, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * svp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("svp.tencentcloudapi.com", "2024-01-25", clientConfig);
    }
    /**
     * 查用当前用户明细节省计划查询时段内的使用情况
     */
    async DescribeSavingPlanUsage(req, cb) {
        return this.request("DescribeSavingPlanUsage", req, cb);
    }
    /**
     * 查用当前用户明细节省计划总览查询时段内的使用情况
     */
    async DescribeSavingPlanOverview(req, cb) {
        return this.request("DescribeSavingPlanOverview", req, cb);
    }
    /**
     * 创建节省计划订单
     */
    async CreateSavingPlanOrder(req, cb) {
        return this.request("CreateSavingPlanOrder", req, cb);
    }
    /**
     * 查询节省计划抵扣明细
     */
    async DescribeSavingPlanDeduct(req, cb) {
        return this.request("DescribeSavingPlanDeduct", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249401, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.taf = void 0;
const v20200210_1 = require("./v20200210");
exports.taf = {
    v20200210: v20200210_1.v20200210,
};

}, function(modId) { var map = {"./v20200210":1738984249402}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249402, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200210 = void 0;
const Models = require("./taf_models");
const taf_client_1 = require("./taf_client");
exports.v20200210 = {
    Client: taf_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./taf_models":1738984249403,"./taf_client":1738984249404}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249403, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249404, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * taf client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("taf.tencentcloudapi.com", "2020-02-10", clientConfig);
    }
    /**
     * 流量反欺诈-流量验准定制版
     */
    async RecognizeCustomizedAudience(req, cb) {
        return this.request("RecognizeCustomizedAudience", req, cb);
    }
    /**
     * 虚假流量识别
     */
    async ManagePortraitRisk(req, cb) {
        return this.request("ManagePortraitRisk", req, cb);
    }
    /**
     * 流量反欺诈-流量验准高级版
     */
    async RecognizePreciseTargetAudience(req, cb) {
        return this.request("RecognizePreciseTargetAudience", req, cb);
    }
    /**
     * 流量反欺诈-流量验准
     */
    async RecognizeTargetAudience(req, cb) {
        return this.request("RecognizeTargetAudience", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249405, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tag = void 0;
const v20180813_1 = require("./v20180813");
exports.tag = {
    v20180813: v20180813_1.v20180813,
};

}, function(modId) { var map = {"./v20180813":1738984249406}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249406, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180813 = void 0;
const Models = require("./tag_models");
const tag_client_1 = require("./tag_client");
exports.v20180813 = {
    Client: tag_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tag_models":1738984249407,"./tag_client":1738984249408}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249407, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249408, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tag client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tag.tencentcloudapi.com", "2018-08-13", clientConfig);
    }
    /**
     * 本接口用于批量删除标签键和标签值。
     */
    async DeleteTags(req, cb) {
        return this.request("DeleteTags", req, cb);
    }
    /**
     * 根据标签键获取资源标签
     */
    async DescribeResourceTagsByTagKeys(req, cb) {
        return this.request("DescribeResourceTagsByTagKeys", req, cb);
    }
    /**
     * 用于查询已建立的标签列表中的标签值。
     */
    async GetTagValues(req, cb) {
        return this.request("GetTagValues", req, cb);
    }
    /**
     * 用于批量查询已有资源关联的标签键值对
     */
    async DescribeResourceTagsByResourceIds(req, cb) {
        return this.request("DescribeResourceTagsByResourceIds", req, cb);
    }
    /**
     * 本接口用于修改资源已关联的标签值（标签键不变）
     */
    async UpdateResourceTagValue(req, cb) {
        return this.request("UpdateResourceTagValue", req, cb);
    }
    /**
     * 按顺序查看资源关联的标签
     */
    async DescribeResourceTagsByResourceIdsSeq(req, cb) {
        return this.request("DescribeResourceTagsByResourceIdsSeq", req, cb);
    }
    /**
     * 用于获取已建立的标签列表。
     */
    async GetTags(req, cb) {
        return this.request("GetTags", req, cb);
    }
    /**
     * 修改多个资源关联的某个标签键对应的标签值
     */
    async ModifyResourcesTagValue(req, cb) {
        return this.request("ModifyResourcesTagValue", req, cb);
    }
    /**
     * 通过标签查询资源列表
     */
    async DescribeResourcesByTags(req, cb) {
        return this.request("DescribeResourcesByTags", req, cb);
    }
    /**
     * 本接口用于删除一对标签键和标签值
     */
    async DeleteTag(req, cb) {
        return this.request("DeleteTag", req, cb);
    }
    /**
     * 查询绑定了标签的资源列表。
     */
    async GetResources(req, cb) {
        return this.request("GetResources", req, cb);
    }
    /**
     * 查询资源关联标签
     */
    async DescribeResourceTags(req, cb) {
        return this.request("DescribeResourceTags", req, cb);
    }
    /**
     * 创建项目
     */
    async AddProject(req, cb) {
        return this.request("AddProject", req, cb);
    }
    /**
     * 用于查询已建立的标签列表。
     */
    async DescribeTagsSeq(req, cb) {
        return this.request("DescribeTagsSeq", req, cb);
    }
    /**
     * 本接口用于给标签关联资源
     */
    async AddResourceTag(req, cb) {
        return this.request("AddResourceTag", req, cb);
    }
    /**
     * 给多个资源关联某个标签
     */
    async AttachResourcesTag(req, cb) {
        return this.request("AttachResourcesTag", req, cb);
    }
    /**
     * 本接口用于创建一对标签键和标签值
     */
    async CreateTag(req, cb) {
        return this.request("CreateTag", req, cb);
    }
    /**
     * 解绑多个资源关联的某个标签
     */
    async DetachResourcesTag(req, cb) {
        return this.request("DetachResourcesTag", req, cb);
    }
    /**
     * 用于查询已建立的标签列表中的标签值。
     */
    async DescribeTagValues(req, cb) {
        return this.request("DescribeTagValues", req, cb);
    }
    /**
     * 为指定的多个云产品的多个云资源统一创建并绑定标签。
     */
    async TagResources(req, cb) {
        return this.request("TagResources", req, cb);
    }
    /**
     * 本接口用于解除标签和资源的关联关系
     */
    async DeleteResourceTag(req, cb) {
        return this.request("DeleteResourceTag", req, cb);
    }
    /**
     * 用于查询已建立的标签列表。
     */
    async DescribeTags(req, cb) {
        return this.request("DescribeTags", req, cb);
    }
    /**
     * 获取项目列表
     */
    async DescribeProjects(req, cb) {
        return this.request("DescribeProjects", req, cb);
    }
    /**
     * 用于查询已建立的标签列表中的标签键。
     */
    async DescribeTagKeys(req, cb) {
        return this.request("DescribeTagKeys", req, cb);
    }
    /**
     * 指定的多个云产品的多个云资源统一解绑标签。
     */
    async UnTagResources(req, cb) {
        return this.request("UnTagResources", req, cb);
    }
    /**
     * 用于查询已建立的标签列表中的标签值。
     */
    async DescribeTagValuesSeq(req, cb) {
        return this.request("DescribeTagValuesSeq", req, cb);
    }
    /**
     * 本接口用于创建多对标签键和标签值
     */
    async CreateTags(req, cb) {
        return this.request("CreateTags", req, cb);
    }
    /**
     * 通过标签查询资源列表并集
     */
    async DescribeResourcesByTagsUnion(req, cb) {
        return this.request("DescribeResourcesByTagsUnion", req, cb);
    }
    /**
     * 修改项目
     */
    async UpdateProject(req, cb) {
        return this.request("UpdateProject", req, cb);
    }
    /**
     * 本接口用于修改资源关联的所有标签
     */
    async ModifyResourceTags(req, cb) {
        return this.request("ModifyResourceTags", req, cb);
    }
    /**
     * 查询标签键列表。
     */
    async GetTagKeys(req, cb) {
        return this.request("GetTagKeys", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249409, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tan = void 0;
const v20220420_1 = require("./v20220420");
exports.tan = {
    v20220420: v20220420_1.v20220420,
};

}, function(modId) { var map = {"./v20220420":1738984249410}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249410, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220420 = void 0;
const Models = require("./tan_models");
const tan_client_1 = require("./tan_client");
exports.v20220420 = {
    Client: tan_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tan_models":1738984249411,"./tan_client":1738984249412}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249411, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249412, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tan client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tan.tencentcloudapi.com", "2022-04-20", clientConfig);
    }
    /**
     * 推送节点数据
     */
    async CreateBlockNodeRecords(req, cb) {
        return this.request("CreateBlockNodeRecords", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249413, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tat = void 0;
const v20201028_1 = require("./v20201028");
exports.tat = {
    v20201028: v20201028_1.v20201028,
};

}, function(modId) { var map = {"./v20201028":1738984249414}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249414, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201028 = void 0;
const Models = require("./tat_models");
const tat_client_1 = require("./tat_client");
exports.v20201028 = {
    Client: tat_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tat_models":1738984249415,"./tat_client":1738984249416}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249415, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249416, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tat client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tat.tencentcloudapi.com", "2020-10-28", clientConfig);
    }
    /**
     * 取消一台或多台CVM实例执行的命令

* 如果命令还未下发到agent，任务状态处于处于PENDING、DELIVERING、DELIVER_DELAYED，取消后任务状态是CANCELLED
* 如果命令已下发到agent，任务状态处于RUNNING， 取消后任务状态是TERMINATED
     */
    async CancelInvocation(req, cb) {
        return this.request("CancelInvocation", req, cb);
    }
    /**
     * 接口用于修改托管实例信息。
     */
    async ModifyRegisterInstance(req, cb) {
        return this.request("ModifyRegisterInstance", req, cb);
    }
    /**
     * 此接口用于创建执行器。
     */
    async CreateInvoker(req, cb) {
        return this.request("CreateInvoker", req, cb);
    }
    /**
     * 此接口用于删除命令。
如果命令与执行器关联，则无法被删除。
     */
    async DeleteCommand(req, cb) {
        return this.request("DeleteCommand", req, cb);
    }
    /**
     * 接口用于创建注册码。
     */
    async CreateRegisterCode(req, cb) {
        return this.request("CreateRegisterCode", req, cb);
    }
    /**
     * 此接口用于启用执行器。
     */
    async EnableInvoker(req, cb) {
        return this.request("EnableInvoker", req, cb);
    }
    /**
     * 此接口用于删除执行器。
     */
    async DeleteInvoker(req, cb) {
        return this.request("DeleteInvoker", req, cb);
    }
    /**
     * 此接口用于查询命令详情。
     */
    async DescribeCommands(req, cb) {
        return this.request("DescribeCommands", req, cb);
    }
    /**
     * 此接口用于查询执行活动详情。
     */
    async DescribeInvocations(req, cb) {
        return this.request("DescribeInvocations", req, cb);
    }
    /**
     * 此接口用于查询执行任务详情。
     */
    async DescribeInvocationTasks(req, cb) {
        return this.request("DescribeInvocationTasks", req, cb);
    }
    /**
     * 此接口用于预览自定义参数替换后的命令内容。不会触发真实执行。
     */
    async PreviewReplacedCommandContent(req, cb) {
        return this.request("PreviewReplacedCommandContent", req, cb);
    }
    /**
     * 此接口用于停止执行器。
     */
    async DisableInvoker(req, cb) {
        return this.request("DisableInvoker", req, cb);
    }
    /**
     * 接口用于删除托管实例。
     */
    async DeleteRegisterInstance(req, cb) {
        return this.request("DeleteRegisterInstance", req, cb);
    }
    /**
     * 此接口用于修改命令。
     */
    async ModifyCommand(req, cb) {
        return this.request("ModifyCommand", req, cb);
    }
    /**
     * 在指定的实例上触发命令，调用成功返回执行活动ID（inv-xxxxxxxx），每个执行活动内部有一个或多个执行任务（invt-xxxxxxxx），每个执行任务代表命令在一台 CVM 或一台 Lighthouse 上的执行记录。

* 如果指定实例未安装 agent，或 agent 不在线，返回失败
* 如果命令类型与 agent 运行环境不符，返回失败
* 指定的实例需要处于 VPC 网络
* 指定的实例需要处于 RUNNING 状态
* 不可同时指定 CVM 和 Lighthouse
     */
    async InvokeCommand(req, cb) {
        return this.request("InvokeCommand", req, cb);
    }
    /**
     * 批量删除命令接口
     */
    async DeleteCommands(req, cb) {
        return this.request("DeleteCommands", req, cb);
    }
    /**
     * 接口用于查询被托管的实例信息。
     */
    async DescribeRegisterInstances(req, cb) {
        return this.request("DescribeRegisterInstances", req, cb);
    }
    /**
     * 此接口用于查询 TAT 产品后台地域列表。
RegionState 为 AVAILABLE，代表该地域的 TAT 后台服务已经可用；未返回，代表该地域的 TAT 后台服务尚不可用。
     */
    async DescribeRegions(req, cb) {
        return this.request("DescribeRegions", req, cb);
    }
    /**
     * 此接口用于创建命令。
     */
    async CreateCommand(req, cb) {
        return this.request("CreateCommand", req, cb);
    }
    /**
     * 此接口用于批量删除注册码。
     */
    async DeleteRegisterCodes(req, cb) {
        return this.request("DeleteRegisterCodes", req, cb);
    }
    /**
     * 接口用于查询注册码信息。
     */
    async DescribeRegisterCodes(req, cb) {
        return this.request("DescribeRegisterCodes", req, cb);
    }
    /**
     * 此接口用于查询自动化助手客户端的状态。
     */
    async DescribeAutomationAgentStatus(req, cb) {
        return this.request("DescribeAutomationAgentStatus", req, cb);
    }
    /**
     * 此接口用于获取配额信息
     */
    async DescribeQuotas(req, cb) {
        return this.request("DescribeQuotas", req, cb);
    }
    /**
     * 此接口用于批量禁用注册码。
     */
    async DisableRegisterCodes(req, cb) {
        return this.request("DisableRegisterCodes", req, cb);
    }
    /**
     * 此接口用于查询场景详情。
     */
    async DescribeScenes(req, cb) {
        return this.request("DescribeScenes", req, cb);
    }
    /**
     * 此接口用于查询执行器的执行记录。
     */
    async DescribeInvokerRecords(req, cb) {
        return this.request("DescribeInvokerRecords", req, cb);
    }
    /**
     * 此接口用于修改执行器。
     */
    async ModifyInvoker(req, cb) {
        return this.request("ModifyInvoker", req, cb);
    }
    /**
     * 此接口用于查询执行器信息。
     */
    async DescribeInvokers(req, cb) {
        return this.request("DescribeInvokers", req, cb);
    }
    /**
     * 执行命令，调用成功返回执行活动ID（inv-xxxxxxxx），每个执行活动内部有一个或多个执行任务（invt-xxxxxxxx），每个执行任务代表命令在一台 CVM 或一台 Lighthouse 上的执行记录。

* 如果指定实例未安装 agent，或 agent 不在线，返回失败
* 如果命令类型与 agent 运行环境不符，返回失败
* 指定的实例需要处于 VPC 网络
* 指定的实例需要处于 `RUNNING` 状态
* 不可同时指定 CVM 和 Lighthouse
     */
    async RunCommand(req, cb) {
        return this.request("RunCommand", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249417, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tav = void 0;
const v20190118_1 = require("./v20190118");
exports.tav = {
    v20190118: v20190118_1.v20190118,
};

}, function(modId) { var map = {"./v20190118":1738984249418}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249418, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190118 = void 0;
const Models = require("./tav_models");
const tav_client_1 = require("./tav_client");
exports.v20190118 = {
    Client: tav_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tav_models":1738984249419,"./tav_client":1738984249420}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249419, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249420, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tav client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tav.tencentcloudapi.com", "2019-01-18", clientConfig);
    }
    /**
     * tav文件上传扫描结果查询
     */
    async GetScanResult(req, cb) {
        return this.request("GetScanResult", req, cb);
    }
    /**
     * 通过文件哈希值获取文件黑白属性
     */
    async ScanFileHash(req, cb) {
        return this.request("ScanFileHash", req, cb);
    }
    /**
     * 获取TAV本地引擎
     */
    async GetLocalEngine(req, cb) {
        return this.request("GetLocalEngine", req, cb);
    }
    /**
     * tav文件上传扫描
     */
    async ScanFile(req, cb) {
        return this.request("ScanFile", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249421, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tbaas = void 0;
const v20180416_1 = require("./v20180416");
exports.tbaas = {
    v20180416: v20180416_1.v20180416,
};

}, function(modId) { var map = {"./v20180416":1738984249422}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249422, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180416 = void 0;
const Models = require("./tbaas_models");
const tbaas_client_1 = require("./tbaas_client");
exports.v20180416 = {
    Client: tbaas_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tbaas_models":1738984249423,"./tbaas_client":1738984249424}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249423, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249424, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tbaas client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tbaas.tencentcloudapi.com", "2018-04-16", clientConfig);
    }
    /**
     * 通过交易ID查询长安链交易
     */
    async QueryChainMakerTransaction(req, cb) {
        return this.request("QueryChainMakerTransaction", req, cb);
    }
    /**
     * 批量申请长安链用户签名证书
     */
    async ApplyChainMakerBatchUserCert(req, cb) {
        return this.request("ApplyChainMakerBatchUserCert", req, cb);
    }
    /**
     * 通过交易ID查询长安链体验网络交易
     */
    async QueryChainMakerDemoTransaction(req, cb) {
        return this.request("QueryChainMakerDemoTransaction", req, cb);
    }
    /**
     * 调用长安链合约查询
     */
    async QueryChainMakerContract(req, cb) {
        return this.request("QueryChainMakerContract", req, cb);
    }
    /**
     * 查询长安链体验网络指定高度区块的交易
     */
    async QueryChainMakerDemoBlockTransaction(req, cb) {
        return this.request("QueryChainMakerDemoBlockTransaction", req, cb);
    }
    /**
     * 获取Fabric某区块的详细信息
     */
    async DescribeFabricBlock(req, cb) {
        return this.request("DescribeFabricBlock", req, cb);
    }
    /**
     * 新增交易
     */
    async Invoke(req, cb) {
        return this.request("Invoke", req, cb);
    }
    /**
     * 获取区块链网络概要
     */
    async GetClusterSummary(req, cb) {
        return this.request("GetClusterSummary", req, cb);
    }
    /**
     * 获取fabric最新交易列表
     */
    async GetLatestTransactionList(req, cb) {
        return this.request("GetLatestTransactionList", req, cb);
    }
    /**
     * 下载用户证书
     */
    async DownloadUserCert(req, cb) {
        return this.request("DownloadUserCert", req, cb);
    }
    /**
     * 获取最新交易列表（已废弃）
     */
    async GetLatesdTransactionList(req, cb) {
        return this.request("GetLatesdTransactionList", req, cb);
    }
    /**
     * 申请用户证书
     */
    async ApplyUserCert(req, cb) {
        return this.request("ApplyUserCert", req, cb);
    }
    /**
     * 调用长安链合约执行交易
     */
    async InvokeChainMakerContract(req, cb) {
        return this.request("InvokeChainMakerContract", req, cb);
    }
    /**
     * Invoke异步调用结果查询
     */
    async GetInvokeTx(req, cb) {
        return this.request("GetInvokeTx", req, cb);
    }
    /**
     * 查询长安链指定高度区块的交易
     */
    async QueryChainMakerBlockTransaction(req, cb) {
        return this.request("QueryChainMakerBlockTransaction", req, cb);
    }
    /**
     * 调用长安链体验网络合约查询
     */
    async QueryChainMakerDemoContract(req, cb) {
        return this.request("QueryChainMakerDemoContract", req, cb);
    }
    /**
     * 获取交易的详情
     */
    async GetTransactionDetailForUser(req, cb) {
        return this.request("GetTransactionDetailForUser", req, cb);
    }
    /**
     * 调用Fabric用户合约查询
     */
    async QueryFabricChaincode(req, cb) {
        return this.request("QueryFabricChaincode", req, cb);
    }
    /**
     * trustsql服务统一接口
     */
    async SrvInvoke(req, cb) {
        return this.request("SrvInvoke", req, cb);
    }
    /**
     * 获取Fabric交易的详细信息
     */
    async DescribeFabricTransaction(req, cb) {
        return this.request("DescribeFabricTransaction", req, cb);
    }
    /**
     * 调用长安链体验网络合约执行交易
     */
    async InvokeChainMakerDemoContract(req, cb) {
        return this.request("InvokeChainMakerDemoContract", req, cb);
    }
    /**
     * 获取区块内交易列表
     */
    async GetBlockTransactionListForUser(req, cb) {
        return this.request("GetBlockTransactionListForUser", req, cb);
    }
    /**
     * 查看当前网络下的所有区块列表，分页展示
     */
    async GetBlockList(req, cb) {
        return this.request("GetBlockList", req, cb);
    }
    /**
     * 调用Fabric用户合约执行交易
     */
    async InvokeFabricChaincode(req, cb) {
        return this.request("InvokeFabricChaincode", req, cb);
    }
    /**
     * 查询交易
     */
    async Query(req, cb) {
        return this.request("Query", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249425, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tbm = void 0;
const v20180129_1 = require("./v20180129");
exports.tbm = {
    v20180129: v20180129_1.v20180129,
};

}, function(modId) { var map = {"./v20180129":1738984249426}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249426, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180129 = void 0;
const Models = require("./tbm_models");
const tbm_client_1 = require("./tbm_client");
exports.v20180129 = {
    Client: tbm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tbm_models":1738984249427,"./tbm_client":1738984249428}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249427, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249428, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tbm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tbm.tencentcloudapi.com", "2018-01-29", clientConfig);
    }
    /**
     * 通过分析洞察参与过品牌媒体互动的用户，比如公开发表品牌的新闻评论、在公开社交渠道发表过对品牌的评价观点等用户，返回用户的画像属性分布，例如性别、年龄、地域、喜爱的明星、喜爱的影视。
     */
    async DescribeUserPortrait(req, cb) {
        return this.request("DescribeUserPortrait", req, cb);
    }
    /**
     * 通过分析用户在评价品牌时用词的正负面情绪评分，返回品牌热门好评观点列表。
     */
    async DescribeBrandPosComments(req, cb) {
        return this.request("DescribeBrandPosComments", req, cb);
    }
    /**
     * 根据客户定制的行业关键词，监测关键词出现在媒体网站（新闻媒体、网络门户、政府网站、微信公众号、天天快报等）发布资讯标题和正文中的报道数，以及文章列表、来源渠道、作者、发布时间等。
     */
    async DescribeIndustryNews(req, cb) {
        return this.request("DescribeIndustryNews", req, cb);
    }
    /**
     * 监测品牌关键词出现在媒体网站（新闻媒体、网络门户、政府网站、微信公众号、天天快报等）发布资讯标题和正文中的报道数。按天输出结果。
     */
    async DescribeBrandMediaReport(req, cb) {
        return this.request("DescribeBrandMediaReport", req, cb);
    }
    /**
     * 通过分析用户在评价品牌时用词的正负面情绪评分，返回品牌热门差评观点列表。
     */
    async DescribeBrandNegComments(req, cb) {
        return this.request("DescribeBrandNegComments", req, cb);
    }
    /**
     * 监测品牌关键词出现在微博、QQ兴趣部落、论坛、博客等个人公开贡献资讯中的条数。按天输出数据结果。
     */
    async DescribeBrandSocialReport(req, cb) {
        return this.request("DescribeBrandSocialReport", req, cb);
    }
    /**
     * 检测品牌关键词出现在微博、QQ兴趣部落、论坛、博客等个人公开贡献资讯中的内容，每天聚合近30天热度最高的观点列表。
     */
    async DescribeBrandSocialOpinion(req, cb) {
        return this.request("DescribeBrandSocialOpinion", req, cb);
    }
    /**
     * 通过分析用户在评价品牌时用词的正负面情绪评分，返回品牌好评与差评评价条数，按天输出结果。
     */
    async DescribeBrandCommentCount(req, cb) {
        return this.request("DescribeBrandCommentCount", req, cb);
    }
    /**
     * 监测品牌关键词命中文章标题或全文的文章篇数，按天输出数据。
     */
    async DescribeBrandExposure(req, cb) {
        return this.request("DescribeBrandExposure", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249429, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tbp = void 0;
const v20190627_1 = require("./v20190627");
const v20190311_1 = require("./v20190311");
exports.tbp = {
    v20190627: v20190627_1.v20190627,
    v20190311: v20190311_1.v20190311,
};

}, function(modId) { var map = {"./v20190627":1738984249430,"./v20190311":1738984249433}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249430, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190627 = void 0;
const Models = require("./tbp_models");
const tbp_client_1 = require("./tbp_client");
exports.v20190627 = {
    Client: tbp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tbp_models":1738984249431,"./tbp_client":1738984249432}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249431, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249432, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tbp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tbp.tencentcloudapi.com", "2019-06-27", clientConfig);
    }
    /**
     * 会话重置接口。
     */
    async TextReset(req, cb) {
        return this.request("TextReset", req, cb);
    }
    /**
     * 接收调用侧的文本输入，返回应答文本。
     */
    async TextProcess(req, cb) {
        return this.request("TextProcess", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249433, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190311 = void 0;
const Models = require("./tbp_models");
const tbp_client_1 = require("./tbp_client");
exports.v20190311 = {
    Client: tbp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tbp_models":1738984249434,"./tbp_client":1738984249435}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249434, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249435, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tbp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tbp.tencentcloudapi.com", "2019-03-11", clientConfig);
    }
    /**
     * 对当前机器人的会话状态进行复位
     */
    async Reset(req, cb) {
        return this.request("Reset", req, cb);
    }
    /**
     * 创建机器人
     */
    async CreateBot(req, cb) {
        return this.request("CreateBot", req, cb);
    }
    /**
     * 会话重置接口。已废弃，推荐使用最新版TextReset接口。
     */
    async TextReset(req, cb) {
        return this.request("TextReset", req, cb);
    }
    /**
     * 接收调用侧的文本输入，返回应答文本。已废弃，推荐使用最新版TextProcess接口。
     */
    async TextProcess(req, cb) {
        return this.request("TextProcess", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249436, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tcaplusdb = void 0;
const v20190823_1 = require("./v20190823");
exports.tcaplusdb = {
    v20190823: v20190823_1.v20190823,
};

}, function(modId) { var map = {"./v20190823":1738984249437}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249437, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190823 = void 0;
const Models = require("./tcaplusdb_models");
const tcaplusdb_client_1 = require("./tcaplusdb_client");
exports.v20190823 = {
    Client: tcaplusdb_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tcaplusdb_models":1738984249438,"./tcaplusdb_client":1738984249439}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249438, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249439, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tcaplusdb client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tcaplusdb.tencentcloudapi.com", "2019-08-23", clientConfig);
    }
    /**
     * 删除表格的分布式索引
     */
    async DeleteTableIndex(req, cb) {
        return this.request("DeleteTableIndex", req, cb);
    }
    /**
     * 获取表格标签
     */
    async DescribeTableTags(req, cb) {
        return this.request("DescribeTableTags", req, cb);
    }
    /**
     * 更新申请单状态
     */
    async UpdateApply(req, cb) {
        return this.request("UpdateApply", req, cb);
    }
    /**
     * 修改表格标签
     */
    async ModifyTableTags(req, cb) {
        return this.request("ModifyTableTags", req, cb);
    }
    /**
     * 本接口用于创建TcaplusDB集群
     */
    async CreateCluster(req, cb) {
        return this.request("CreateCluster", req, cb);
    }
    /**
     * 查询独占集群可以申请的剩余机器
     */
    async DescribeMachine(req, cb) {
        return this.request("DescribeMachine", req, cb);
    }
    /**
     * 合并指定表格
     */
    async MergeTablesData(req, cb) {
        return this.request("MergeTablesData", req, cb);
    }
    /**
     * 查询本用户是否在白名单中，控制是否能创建TDR类型的APP或表
     */
    async DescribeUinInWhitelist(req, cb) {
        return this.request("DescribeUinInWhitelist", req, cb);
    }
    /**
     * 查询回收站中的表详情
     */
    async DescribeTablesInRecycle(req, cb) {
        return this.request("DescribeTablesInRecycle", req, cb);
    }
    /**
     * 修改指定的集群名称
     */
    async ModifyClusterName(req, cb) {
        return this.request("ModifyClusterName", req, cb);
    }
    /**
     * 当restful api为关闭状态时，可以通过此接口关闭restful api
     */
    async DisableRestProxy(req, cb) {
        return this.request("DisableRestProxy", req, cb);
    }
    /**
     * 表格数据回档
     */
    async RollbackTables(req, cb) {
        return this.request("RollbackTables", req, cb);
    }
    /**
     * 删除手工备份
     */
    async DeleteBackupRecords(req, cb) {
        return this.request("DeleteBackupRecords", req, cb);
    }
    /**
     * 新增、修改表格数据订阅
     */
    async SetTableDataFlow(req, cb) {
        return this.request("SetTableDataFlow", req, cb);
    }
    /**
     * 删除TcaplusDB集群，必须在集群所属所有资源（包括表格组，表）都已经释放的情况下才会成功。
     */
    async DeleteCluster(req, cb) {
        return this.request("DeleteCluster", req, cb);
    }
    /**
     * 修改指定集群的密码，后台将在旧密码失效之前同时支持TcaplusDB SDK使用旧密码和新密码访问数据库。在旧密码失效之前不能提交新的密码修改请求，在旧密码失效之后不能提交修改旧密码过期时间的请求。
     */
    async ModifyClusterPassword(req, cb) {
        return this.request("ModifyClusterPassword", req, cb);
    }
    /**
     * 设置表格分布式索引
     */
    async SetTableIndex(req, cb) {
        return this.request("SetTableIndex", req, cb);
    }
    /**
     * 指定集群ID和待删除IDL文件的信息，删除目标文件，如果文件正在被表关联则删除失败。
     */
    async DeleteIdlFiles(req, cb) {
        return this.request("DeleteIdlFiles", req, cb);
    }
    /**
     * 构造表格过去时间点的快照
     */
    async CreateSnapshots(req, cb) {
        return this.request("CreateSnapshots", req, cb);
    }
    /**
     * 当restful api为关闭状态时，可以通过此接口开启restful api。
     */
    async EnableRestProxy(req, cb) {
        return this.request("EnableRestProxy", req, cb);
    }
    /**
     * 新增、删除、修改备份过期策略， ClusterId必须为具体的集群Id（appid）
     */
    async SetBackupExpireRule(req, cb) {
        return this.request("SetBackupExpireRule", req, cb);
    }
    /**
     * 用户创建备份任务
     */
    async CreateBackup(req, cb) {
        return this.request("CreateBackup", req, cb);
    }
    /**
     * 修改集群审批状态
     */
    async ModifyCensorship(req, cb) {
        return this.request("ModifyCensorship", req, cb);
    }
    /**
     * 根据选择的IDL文件列表，批量创建表格
     */
    async CreateTables(req, cb) {
        return this.request("CreateTables", req, cb);
    }
    /**
     * 表格扩缩容
     */
    async ModifyTableQuotas(req, cb) {
        return this.request("ModifyTableQuotas", req, cb);
    }
    /**
     * 查询TcaplusDB集群列表，包含集群详细信息。
     */
    async DescribeClusters(req, cb) {
        return this.request("DescribeClusters", req, cb);
    }
    /**
     * 修改独占集群机器
     */
    async ModifyClusterMachine(req, cb) {
        return this.request("ModifyClusterMachine", req, cb);
    }
    /**
     * 删除表格组
     */
    async DeleteTableGroup(req, cb) {
        return this.request("DeleteTableGroup", req, cb);
    }
    /**
     * 修改TcaplusDB表格组名称
     */
    async ModifyTableGroupName(req, cb) {
        return this.request("ModifyTableGroupName", req, cb);
    }
    /**
     * 删除表格的快照
     */
    async DeleteSnapshots(req, cb) {
        return this.request("DeleteSnapshots", req, cb);
    }
    /**
     * 在TcaplusDB集群下创建表格组
     */
    async CreateTableGroup(req, cb) {
        return this.request("CreateTableGroup", req, cb);
    }
    /**
     * 恢复回收站中，用户自行删除的表。对欠费待释放的表无效。
     */
    async RecoverRecycleTables(req, cb) {
        return this.request("RecoverRecycleTables", req, cb);
    }
    /**
     * 查询TcaplusDB服务支持的地域列表
     */
    async DescribeRegions(req, cb) {
        return this.request("DescribeRegions", req, cb);
    }
    /**
     * 查询任务列表
     */
    async DescribeTasks(req, cb) {
        return this.request("DescribeTasks", req, cb);
    }
    /**
     * 查询快照列表
     */
    async DescribeSnapshots(req, cb) {
        return this.request("DescribeSnapshots", req, cb);
    }
    /**
     * 查询备份记录

查询集群级别时， 将TableGroupId设置为"-1", 将TableName设置为"-1"
查询集群+表格组级别时， 将TableName设置为"-1"
查询集群+表格组+表格级别时， 都不能设置为“-1”
     */
    async DescribeBackupRecords(req, cb) {
        return this.request("DescribeBackupRecords", req, cb);
    }
    /**
     * 修改集群标签
     */
    async ModifyClusterTags(req, cb) {
        return this.request("ModifyClusterTags", req, cb);
    }
    /**
     * 修改表格组标签
     */
    async ModifyTableGroupTags(req, cb) {
        return this.request("ModifyTableGroupTags", req, cb);
    }
    /**
     * 获取审批管理的申请单
     */
    async DescribeApplications(req, cb) {
        return this.request("DescribeApplications", req, cb);
    }
    /**
     * 获取表格组关联的标签列表
     */
    async DescribeTableGroupTags(req, cb) {
        return this.request("DescribeTableGroupTags", req, cb);
    }
    /**
     * 将快照数据导入到新表或当前表
     */
    async ImportSnapshots(req, cb) {
        return this.request("ImportSnapshots", req, cb);
    }
    /**
     * 查询表格组列表
     */
    async DescribeTableGroups(req, cb) {
        return this.request("DescribeTableGroups", req, cb);
    }
    /**
     * 选中目标表格，上传并校验改表文件，返回是否允许修改表格结构的结果。
     */
    async CompareIdlFiles(req, cb) {
        return this.request("CompareIdlFiles", req, cb);
    }
    /**
     * 查询表描述文件详情
     */
    async DescribeIdlFileInfos(req, cb) {
        return this.request("DescribeIdlFileInfos", req, cb);
    }
    /**
     * 删除指定的表,第一次调用此接口代表将表移动至回收站，再次调用代表将此表格从回收站中彻底删除。
     */
    async DeleteTables(req, cb) {
        return this.request("DeleteTables", req, cb);
    }
    /**
     * 修改表备注信息
     */
    async ModifyTableMemos(req, cb) {
        return this.request("ModifyTableMemos", req, cb);
    }
    /**
     * 修改表格快照的过期时间
     */
    async ModifySnapshots(req, cb) {
        return this.request("ModifySnapshots", req, cb);
    }
    /**
     * 上传并校验创建表格文件，返回校验合法的表格定义
     */
    async VerifyIdlFiles(req, cb) {
        return this.request("VerifyIdlFiles", req, cb);
    }
    /**
     * 根据给定的表信息，清除表数据。
     */
    async ClearTables(req, cb) {
        return this.request("ClearTables", req, cb);
    }
    /**
     * 删除表格的数据订阅
     */
    async DeleteTableDataFlow(req, cb) {
        return this.request("DeleteTableDataFlow", req, cb);
    }
    /**
     * 根据用户选定的表定义IDL文件，批量修改指定的表
     */
    async ModifyTables(req, cb) {
        return this.request("ModifyTables", req, cb);
    }
    /**
     * 查询表详情
     */
    async DescribeTables(req, cb) {
        return this.request("DescribeTables", req, cb);
    }
    /**
     * 获取集群关联的标签列表
     */
    async DescribeClusterTags(req, cb) {
        return this.request("DescribeClusterTags", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249440, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tcb = void 0;
const v20180608_1 = require("./v20180608");
exports.tcb = {
    v20180608: v20180608_1.v20180608,
};

}, function(modId) { var map = {"./v20180608":1738984249441}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249441, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180608 = void 0;
const Models = require("./tcb_models");
const tcb_client_1 = require("./tcb_client");
exports.v20180608 = {
    Client: tcb_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tcb_models":1738984249442,"./tcb_client":1738984249443}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249442, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249443, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tcb client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tcb.tencentcloudapi.com", "2018-06-08", clientConfig);
    }
    /**
     * 查询微信云托管子网
     */
    async DescribeWxCloudBaseRunSubNets(req, cb) {
        return this.request("DescribeWxCloudBaseRunSubNets", req, cb);
    }
    /**
     * 查询环境下所有的vpc列表
     */
    async DescribeCloudBaseRunAllVpcs(req, cb) {
        return this.request("DescribeCloudBaseRunAllVpcs", req, cb);
    }
    /**
     * 查询后付费短信资源量
1 有免费包的返回SmsFreeQuota结构所有字段
2 没有免费包，有付费包，付费返回复用SmsFreeQuota结构，其中只有 TodayUsedQuota 字段有效
3 都没有返回为空数组
     */
    async DescribeSmsQuotas(req, cb) {
        return this.request("DescribeSmsQuotas", req, cb);
    }
    /**
     * 查询微信云托管服务域名
     */
    async DescribeCloudBaseRunServerDomainName(req, cb) {
        return this.request("DescribeCloudBaseRunServerDomainName", req, cb);
    }
    /**
     * 创建微信云托管
     */
    async CreateWxCloudBaseRunEnv(req, cb) {
        return this.request("CreateWxCloudBaseRunEnv", req, cb);
    }
    /**
     * 本接口（TurnOffStandaloneGateway）用于关闭小租户网关。
     */
    async TurnOffStandaloneGateway(req, cb) {
        return this.request("TurnOffStandaloneGateway", req, cb);
    }
    /**
     * 本接口（TurnOnStandaloneGateway）用于开启小租户网关。
     */
    async TurnOnStandaloneGateway(req, cb) {
        return this.request("TurnOnStandaloneGateway", req, cb);
    }
    /**
     * 开通后付费资源
     */
    async CreatePostpayPackage(req, cb) {
        return this.request("CreatePostpayPackage", req, cb);
    }
    /**
     * 获取新套餐列表，含详情，如果传了PackageId，则只获取指定套餐详情
     */
    async DescribeBaasPackageList(req, cb) {
        return this.request("DescribeBaasPackageList", req, cb);
    }
    /**
     * 云项目部署列表
     */
    async DescribeCloudBaseProjectVersionList(req, cb) {
        return this.request("DescribeCloudBaseProjectVersionList", req, cb);
    }
    /**
     * 获取云开发项目列表
     */
    async DescribeCloudBaseProjectLatestVersionList(req, cb) {
        return this.request("DescribeCloudBaseProjectLatestVersionList", req, cb);
    }
    /**
     * 独立网关中拉取云托管服务对应的配置信息
     */
    async DescribeCloudBaseRunConfForGateWay(req, cb) {
        return this.request("DescribeCloudBaseRunConfForGateWay", req, cb);
    }
    /**
     * 创建云应用服务
     */
    async EstablishCloudBaseRunServer(req, cb) {
        return this.request("EstablishCloudBaseRunServer", req, cb);
    }
    /**
     * 创建云开发项目
     */
    async CreateAndDeployCloudBaseProject(req, cb) {
        return this.request("CreateAndDeployCloudBaseProject", req, cb);
    }
    /**
     * 检查是否开通Tcb服务
     */
    async CheckTcbService(req, cb) {
        return this.request("CheckTcbService", req, cb);
    }
    /**
     * 删除终端用户
     */
    async DeleteEndUser(req, cb) {
        return this.request("DeleteEndUser", req, cb);
    }
    /**
     * 创建或修改安全网关路由
     */
    async EstablishWxGatewayRoute(req, cb) {
        return this.request("EstablishWxGatewayRoute", req, cb);
    }
    /**
     * 查询用户活动信息
     */
    async DescribeUserActivityInfo(req, cb) {
        return this.request("DescribeUserActivityInfo", req, cb);
    }
    /**
     * 删除云项目
     */
    async DeleteCloudBaseProjectLatestVersion(req, cb) {
        return this.request("DeleteCloudBaseProjectLatestVersion", req, cb);
    }
    /**
     * 获取终端用户总量与平台分布情况
     */
    async DescribeEndUserStatistic(req, cb) {
        return this.request("DescribeEndUserStatistic", req, cb);
    }
    /**
     * 批量冻结
     */
    async FreezeCloudBaseRunServers(req, cb) {
        return this.request("FreezeCloudBaseRunServers", req, cb);
    }
    /**
     * 获取云托管代码上传url
     */
    async DescribeCloudBaseBuildService(req, cb) {
        return this.request("DescribeCloudBaseBuildService", req, cb);
    }
    /**
     * 获取终端用户列表
     */
    async DescribeEndUsers(req, cb) {
        return this.request("DescribeEndUsers", req, cb);
    }
    /**
     * 创建静态托管资源，包括COS和CDN，异步任务创建，查看创建结果需要根据DescribeStaticStore接口来查看
     */
    async CreateStaticStore(req, cb) {
        return this.request("CreateStaticStore", req, cb);
    }
    /**
     * 查询环境1分钱抵扣信息
     */
    async DescribeSpecialCostItems(req, cb) {
        return this.request("DescribeSpecialCostItems", req, cb);
    }
    /**
     * 删除网关某版本
     */
    async DeleteGatewayVersion(req, cb) {
        return this.request("DeleteGatewayVersion", req, cb);
    }
    /**
     * 修改日志主题
     */
    async ModifyClsTopic(req, cb) {
        return this.request("ModifyClsTopic", req, cb);
    }
    /**
     * 查询静态托管域名任务状态
     */
    async DescribeHostingDomainTask(req, cb) {
        return this.request("DescribeHostingDomainTask", req, cb);
    }
    /**
     * 删除安全网关路由
     */
    async DeleteWxGatewayRoute(req, cb) {
        return this.request("DeleteWxGatewayRoute", req, cb);
    }
    /**
     * 开通微信云托管MySQL数据库服务
     */
    async CreateWxCloudBaseRunServerDBCluster(req, cb) {
        return this.request("CreateWxCloudBaseRunServerDBCluster", req, cb);
    }
    /**
     * 设置网关版本的流量比例
     */
    async ModifyGatewayVersionTraffic(req, cb) {
        return this.request("ModifyGatewayVersionTraffic", req, cb);
    }
    /**
     * 增加安全域名
     */
    async CreateAuthDomain(req, cb) {
        return this.request("CreateAuthDomain", req, cb);
    }
    /**
     * 获取环境列表，含环境下的各个资源信息。尤其是各资源的唯一标识，是请求各资源的关键参数
     */
    async DescribeEnvs(req, cb) {
        return this.request("DescribeEnvs", req, cb);
    }
    /**
     * 查看容器托管的集群状态
     */
    async DescribeCloudBaseRunResource(req, cb) {
        return this.request("DescribeCloudBaseRunResource", req, cb);
    }
    /**
     * 查看安全网关路由
     */
    async DescribeWxGatewayRoutes(req, cb) {
        return this.request("DescribeWxGatewayRoutes", req, cb);
    }
    /**
     * 管理终端用户
     */
    async ModifyEndUser(req, cb) {
        return this.request("ModifyEndUser", req, cb);
    }
    /**
     * 获取环境下单地域
     */
    async DescribeEnvDealRegion(req, cb) {
        return this.request("DescribeEnvDealRegion", req, cb);
    }
    /**
     * 查询网关监控数据
     */
    async DescribeGatewayCurveData(req, cb) {
        return this.request("DescribeGatewayCurveData", req, cb);
    }
    /**
     * 描述扩展上传文件信息
     */
    async DescribeExtensionUploadInfo(req, cb) {
        return this.request("DescribeExtensionUploadInfo", req, cb);
    }
    /**
     * 删除服务版本
     */
    async DeleteCloudBaseRunServerVersion(req, cb) {
        return this.request("DeleteCloudBaseRunServerVersion", req, cb);
    }
    /**
     * 开通容器托管的资源，包括集群创建，VPC配置，异步任务创建，镜像托管，Coding等，查看创建结果需要根据DescribeCloudBaseRunResource接口来查看
     */
    async CreateCloudBaseRunResource(req, cb) {
        return this.request("CreateCloudBaseRunResource", req, cb);
    }
    /**
     * 获取增值包计费相关信息
     */
    async DescribeExtraPkgBillingInfo(req, cb) {
        return this.request("DescribeExtraPkgBillingInfo", req, cb);
    }
    /**
     * 查询版本历史
     */
    async DescribeCloudBaseRunVersionSnapshot(req, cb) {
        return this.request("DescribeCloudBaseRunVersionSnapshot", req, cb);
    }
    /**
     * 根据用户传入的指标, 拉取一段时间内的监控数据。
     */
    async DescribeCurveData(req, cb) {
        return this.request("DescribeCurveData", req, cb);
    }
    /**
     * 修改数据库权限
     */
    async ModifyDatabaseACL(req, cb) {
        return this.request("ModifyDatabaseACL", req, cb);
    }
    /**
     * 查看安全网关
     */
    async DescribeWxGateways(req, cb) {
        return this.request("DescribeWxGateways", req, cb);
    }
    /**
     * TCB云API统一入口
     */
    async CommonServiceAPI(req, cb) {
        return this.request("CommonServiceAPI", req, cb);
    }
    /**
     * 查询环境个数上限
     */
    async DescribeEnvLimit(req, cb) {
        return this.request("DescribeEnvLimit", req, cb);
    }
    /**
     * 销毁静态托管资源，该接口创建异步销毁任务，资源最终状态可从DestroyStaticStore接口查看
     */
    async DestroyStaticStore(req, cb) {
        return this.request("DestroyStaticStore", req, cb);
    }
    /**
     * 查询后付费免费配额信息
     */
    async DescribeEnvFreeQuota(req, cb) {
        return this.request("DescribeEnvFreeQuota", req, cb);
    }
    /**
     * 本接口（DestroyStandaloneGateway）用于销毁小租户网关。
     */
    async DestroyStandaloneGateway(req, cb) {
        return this.request("DestroyStandaloneGateway", req, cb);
    }
    /**
     * 创建托管域名
     */
    async CreateHostingDomain(req, cb) {
        return this.request("CreateHostingDomain", req, cb);
    }
    /**
     * 绑定另外一个环境下的网关，callContainer请求可以访问到该网关
     */
    async BindEnvGateway(req, cb) {
        return this.request("BindEnvGateway", req, cb);
    }
    /**
     * 创建服务版本
     */
    async CreateCloudBaseRunServerVersion(req, cb) {
        return this.request("CreateCloudBaseRunServerVersion", req, cb);
    }
    /**
     * 查询服务版本的详情，CPU和MEM  请使用CPUSize和MemSize
     */
    async DescribeCloudBaseRunServerVersion(req, cb) {
        return this.request("DescribeCloudBaseRunServerVersion", req, cb);
    }
    /**
     * 查询指定指标的配额使用量
     */
    async DescribeQuotaData(req, cb) {
        return this.request("DescribeQuotaData", req, cb);
    }
    /**
     * 查询单个服务的详情，版本以及详情
     */
    async DescribeCloudBaseRunServer(req, cb) {
        return this.request("DescribeCloudBaseRunServer", req, cb);
    }
    /**
     * 本接口（DescribeStandaloneGateway）查询小租户网关套餐信息。
     */
    async DescribeStandaloneGateway(req, cb) {
        return this.request("DescribeStandaloneGateway", req, cb);
    }
    /**
     * 查看容器托管的集群状态扩展使用
     */
    async DescribeCloudBaseRunResourceForExtend(req, cb) {
        return this.request("DescribeCloudBaseRunResourceForExtend", req, cb);
    }
    /**
     * 获取后付费免费额度
     */
    async DescribePostpayPackageFreeQuotas(req, cb) {
        return this.request("DescribePostpayPackageFreeQuotas", req, cb);
    }
    /**
     * 更新活动详情
     */
    async ReplaceActivityRecord(req, cb) {
        return this.request("ReplaceActivityRecord", req, cb);
    }
    /**
     * 获取环境终端用户新增与登录信息
     */
    async DescribeEndUserLoginStatistic(req, cb) {
        return this.request("DescribeEndUserLoginStatistic", req, cb);
    }
    /**
     * 查询服务、版本和操作类型
     */
    async DescribeCloudBaseRunOperationTypes(req, cb) {
        return this.request("DescribeCloudBaseRunOperationTypes", req, cb);
    }
    /**
     * 销毁环境
     */
    async DestroyEnv(req, cb) {
        return this.request("DestroyEnv", req, cb);
    }
    /**
     * 查询活动信息
     */
    async DescribeActivityInfo(req, cb) {
        return this.request("DescribeActivityInfo", req, cb);
    }
    /**
     * 查询一键部署任务 （特定接口：外部查询使用）
     */
    async DescribeCloudBaseRunOneClickTaskExternal(req, cb) {
        return this.request("DescribeCloudBaseRunOneClickTaskExternal", req, cb);
    }
    /**
     * DescribeCloudBaseRunVersionRsByCondition 获取云托管详情
     */
    async DescribeCloudBaseRunVersionRsByCondition(req, cb) {
        return this.request("DescribeCloudBaseRunVersionRsByCondition", req, cb);
    }
    /**
     * 查询后付费资源免费量
     */
    async DescribePostpayFreeQuotas(req, cb) {
        return this.request("DescribePostpayFreeQuotas", req, cb);
    }
    /**
     * 查询网关版本信息
暂不鉴权
     */
    async DescribeGatewayVersions(req, cb) {
        return this.request("DescribeGatewayVersions", req, cb);
    }
    /**
     * 查询微信云托管环境信息
     */
    async DescribeWxCloudBaseRunEnvs(req, cb) {
        return this.request("DescribeWxCloudBaseRunEnvs", req, cb);
    }
    /**
     * 查询服务版本的详情
     */
    async DescribeCbrServerVersion(req, cb) {
        return this.request("DescribeCbrServerVersion", req, cb);
    }
    /**
     * 针对特定的版本，进行滚动更新
     */
    async RollUpdateCloudBaseRunServerVersion(req, cb) {
        return this.request("RollUpdateCloudBaseRunServerVersion", req, cb);
    }
    /**
     * 查询环境后付费计费详情
     */
    async DescribeEnvPostpaidDeduct(req, cb) {
        return this.request("DescribeEnvPostpaidDeduct", req, cb);
    }
    /**
     * 获取下载文件信息
     */
    async DescribeDownloadFile(req, cb) {
        return this.request("DescribeDownloadFile", req, cb);
    }
    /**
     * 本接口（CreateStandaloneGateway）用于创建独立网关。
     */
    async CreateStandaloneGateway(req, cb) {
        return this.request("CreateStandaloneGateway", req, cb);
    }
    /**
     * 获取安全域名列表
     */
    async DescribeAuthDomains(req, cb) {
        return this.request("DescribeAuthDomains", req, cb);
    }
    /**
     * 批量解冻服务
     */
    async UnfreezeCloudBaseRunServers(req, cb) {
        return this.request("UnfreezeCloudBaseRunServers", req, cb);
    }
    /**
     * 获取计费相关信息
     */
    async DescribeBillingInfo(req, cb) {
        return this.request("DescribeBillingInfo", req, cb);
    }
    /**
     * 针对已隔离的免费环境，可以通过本接口将其恢复访问。
     */
    async ReinstateEnv(req, cb) {
        return this.request("ReinstateEnv", req, cb);
    }
    /**
     * 获取数据库权限
     */
    async DescribeDatabaseACL(req, cb) {
        return this.request("DescribeDatabaseACL", req, cb);
    }
    /**
     * 修改容器内的版本流量配置
     */
    async ModifyCloudBaseRunServerFlowConf(req, cb) {
        return this.request("ModifyCloudBaseRunServerFlowConf", req, cb);
    }
    /**
     * 根据用户传入的指标, 拉取一段时间内的监控数据。
     */
    async DescribeGraphData(req, cb) {
        return this.request("DescribeGraphData", req, cb);
    }
    /**
     * 查询活动记录信息
     */
    async DescribeActivityRecord(req, cb) {
        return this.request("DescribeActivityRecord", req, cb);
    }
    /**
     * 搜索CLS日志，TCB角色密钥访问
     */
    async SearchClsLog(req, cb) {
        return this.request("SearchClsLog", req, cb);
    }
    /**
     * 本接口（DescribeStandaloneGatewayPackage）用于查询小租户网关套餐信息。
     */
    async DescribeStandaloneGatewayPackage(req, cb) {
        return this.request("DescribeStandaloneGatewayPackage", req, cb);
    }
    /**
     * 更新环境信息
     */
    async ModifyEnv(req, cb) {
        return this.request("ModifyEnv", req, cb);
    }
    /**
     * 修改服务版本的副本数，环境变量
     */
    async ModifyCloudBaseRunServerVersion(req, cb) {
        return this.request("ModifyCloudBaseRunServerVersion", req, cb);
    }
    /**
     * 查询服务版本详情(新)
     */
    async DescribeCloudBaseRunVersion(req, cb) {
        return this.request("DescribeCloudBaseRunVersion", req, cb);
    }
    /**
     * 查询云托管服务版本容器列表
     */
    async DescribeCloudBaseRunPodList(req, cb) {
        return this.request("DescribeCloudBaseRunPodList", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249444, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tcbr = void 0;
const v20220217_1 = require("./v20220217");
exports.tcbr = {
    v20220217: v20220217_1.v20220217,
};

}, function(modId) { var map = {"./v20220217":1738984249445}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249445, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220217 = void 0;
const Models = require("./tcbr_models");
const tcbr_client_1 = require("./tcbr_client");
exports.v20220217 = {
    Client: tcbr_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tcbr_models":1738984249446,"./tcbr_client":1738984249447}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249446, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249447, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tcbr client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tcbr.tencentcloudapi.com", "2022-02-17", clientConfig);
    }
    /**
     * 创建云托管服务接口
     */
    async CreateCloudRunServer(req, cb) {
        return this.request("CreateCloudRunServer", req, cb);
    }
    /**
     * 查询服务管理任务信息
     */
    async DescribeServerManageTask(req, cb) {
        return this.request("DescribeServerManageTask", req, cb);
    }
    /**
     * 查询环境基础信息
     */
    async DescribeEnvBaseInfo(req, cb) {
        return this.request("DescribeEnvBaseInfo", req, cb);
    }
    /**
     * 查询云托管服务列表接口
     */
    async DescribeCloudRunServers(req, cb) {
        return this.request("DescribeCloudRunServers", req, cb);
    }
    /**
     * 灰度发布
     */
    async ReleaseGray(req, cb) {
        return this.request("ReleaseGray", req, cb);
    }
    /**
     * 更新云托管服务
     */
    async UpdateCloudRunServer(req, cb) {
        return this.request("UpdateCloudRunServer", req, cb);
    }
    /**
     * 创建云托管环境，并开通资源。
     */
    async CreateCloudRunEnv(req, cb) {
        return this.request("CreateCloudRunEnv", req, cb);
    }
    /**
     * 获取环境列表，含环境下的各个资源信息。尤其是各资源的唯一标识，是请求各资源的关键参数
     */
    async DescribeCloudRunEnvs(req, cb) {
        return this.request("DescribeCloudRunEnvs", req, cb);
    }
    /**
     * 操作发布单
     */
    async OperateServerManage(req, cb) {
        return this.request("OperateServerManage", req, cb);
    }
    /**
     * 查询云托管服务详情
     */
    async DescribeCloudRunServerDetail(req, cb) {
        return this.request("DescribeCloudRunServerDetail", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249448, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tccatalog = void 0;
const v20241024_1 = require("./v20241024");
exports.tccatalog = {
    v20241024: v20241024_1.v20241024,
};

}, function(modId) { var map = {"./v20241024":1738984249449}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249449, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20241024 = void 0;
const Models = require("./tccatalog_models");
const tccatalog_client_1 = require("./tccatalog_client");
exports.v20241024 = {
    Client: tccatalog_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tccatalog_models":1738984249450,"./tccatalog_client":1738984249451}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249450, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249451, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tccatalog client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tccatalog.tencentcloudapi.com", "2024-10-24", clientConfig);
    }
    /**
     * 获取Tcc数据目录列表
     */
    async DescribeTccCatalogs(req, cb) {
        return this.request("DescribeTccCatalogs", req, cb);
    }
    /**
     * 获取Tcc数据目录详情
     */
    async DescribeTccCatalog(req, cb) {
        return this.request("DescribeTccCatalog", req, cb);
    }
    /**
     * 绑定终端节点服务白名单用户
     */
    async BindTccVpcEndPointServiceWhiteList(req, cb) {
        return this.request("BindTccVpcEndPointServiceWhiteList", req, cb);
    }
    /**
     * 接受终端节点连接
     */
    async AcceptTccVpcEndPointConnect(req, cb) {
        return this.request("AcceptTccVpcEndPointConnect", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249452, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tcex = void 0;
const v20200727_1 = require("./v20200727");
exports.tcex = {
    v20200727: v20200727_1.v20200727,
};

}, function(modId) { var map = {"./v20200727":1738984249453}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249453, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200727 = void 0;
const Models = require("./tcex_models");
const tcex_client_1 = require("./tcex_client");
exports.v20200727 = {
    Client: tcex_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tcex_models":1738984249454,"./tcex_client":1738984249455}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249454, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249455, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tcex client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tcex.tencentcloudapi.com", "2020-07-27", clientConfig);
    }
    /**
     * 产品控制台已经下线

获取服务调用结果。和InvokeService接口配置合适，其InvokeId参数为InvokeService接口返回的RequestId。
     */
    async DescribeInvocationResult(req, cb) {
        return this.request("DescribeInvocationResult", req, cb);
    }
    /**
     * 产品控制台已经下线

通过传入文档url，测试服务算法。此接口需要和DescribeInvocationResult接口配置使用，该接口使用InvokeService返回的RequestId作为InvokeId参数，用于查询调用结果。
     */
    async InvokeService(req, cb) {
        return this.request("InvokeService", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249456, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tchd = void 0;
const v20230306_1 = require("./v20230306");
exports.tchd = {
    v20230306: v20230306_1.v20230306,
};

}, function(modId) { var map = {"./v20230306":1738984249457}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249457, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20230306 = void 0;
const Models = require("./tchd_models");
const tchd_client_1 = require("./tchd_client");
exports.v20230306 = {
    Client: tchd_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tchd_models":1738984249458,"./tchd_client":1738984249459}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249458, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249459, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tchd client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tchd.tencentcloudapi.com", "2023-03-06", clientConfig);
    }
    /**
     * 本接口用于查询腾讯云健康看板的可用性事件信息，可以通过产品列表、地域列表和事件发生日期进行过滤查询。
当查询的产品对应时间内无事件时将返回空结果。
可以参考健康看板历史事件页面来获取查询案例（链接：https://status.cloud.tencent.com/history）。
     */
    async DescribeEvents(req, cb) {
        return this.request("DescribeEvents", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249460, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tci = void 0;
const v20190318_1 = require("./v20190318");
exports.tci = {
    v20190318: v20190318_1.v20190318,
};

}, function(modId) { var map = {"./v20190318":1738984249461}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249461, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190318 = void 0;
const Models = require("./tci_models");
const tci_client_1 = require("./tci_client");
exports.v20190318 = {
    Client: tci_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tci_models":1738984249462,"./tci_client":1738984249463}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249462, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249463, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tci client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tci.tencentcloudapi.com", "2019-03-18", clientConfig);
    }
    /**
     * **提交线下小班（无课桌）课任务**
线下小班课是指有学生无课桌的课堂，满座15人以下，全局画面且背景不动，能清晰看到。
  
**提供的功能接口有：**学生人脸识别、学生表情识别、学生肢体动作识别。  可分析的指标维度包括：身份识别、正脸、侧脸、抬头、低头、高兴、中性、高兴、中性、惊讶、厌恶、恐惧、愤怒、蔑视、悲伤、站立、举手、坐着等。
  
**对场景的要求为：**真实常规教室，满座15人以下，全局画面且背景不动；人脸上下角度在20度以内，左右角度在15度以内，歪头角度在15度以内；光照均匀，无遮挡，人脸清晰可见；像素最好在 100X100 像素以上但是图像整体质量不能超过1080p。
    
**结果查询方式：**图像任务直接返回结果，点播及直播任务通过DescribeAITaskResult查询结果。
     */
    async SubmitOpenClassTask(req, cb) {
        return this.request("SubmitOpenClassTask", req, cb);
    }
    /**
     * 支持多路视频流，提交高级人员考勤任务
     */
    async SubmitCheckAttendanceTaskPlus(req, cb) {
        return this.request("SubmitCheckAttendanceTaskPlus", req, cb);
    }
    /**
     * 创建人员库
     */
    async CreateLibrary(req, cb) {
        return this.request("CreateLibrary", req, cb);
    }
    /**
     * 音频任务提交接口
     */
    async SubmitAudioTask(req, cb) {
        return this.request("SubmitAudioTask", req, cb);
    }
    /**
     * 创建人脸
     */
    async CreateFace(req, cb) {
        return this.request("CreateFace", req, cb);
    }
    /**
     * 修改人员信息
     */
    async ModifyPerson(req, cb) {
        return this.request("ModifyPerson", req, cb);
    }
    /**
     * 获取图像任务统计信息
     */
    async DescribeImageTaskStatistic(req, cb) {
        return this.request("DescribeImageTaskStatistic", req, cb);
    }
    /**
     * 提供 AI 助教基础版本功能接口
     */
    async AIAssistant(req, cb) {
        return this.request("AIAssistant", req, cb);
    }
    /**
     * 修改人员库信息
     */
    async ModifyLibrary(req, cb) {
        return this.request("ModifyLibrary", req, cb);
    }
    /**
     * 发起双路视频生成精彩集锦接口。该接口可以通过客户传入的学生音视频及老师视频两路Url，自动生成一堂课程的精彩集锦。需要通过DescribeHighlightResult
接口获取生成结果。
     */
    async SubmitDoubleVideoHighlights(req, cb) {
        return this.request("SubmitDoubleVideoHighlights", req, cb);
    }
    /**
     * 拉取人员列表
     */
    async DescribePersons(req, cb) {
        return this.request("DescribePersons", req, cb);
    }
    /**
     * 对话任务分析接口
     */
    async SubmitConversationTask(req, cb) {
        return this.request("SubmitConversationTask", req, cb);
    }
    /**
     * 视频精彩集锦结果查询接口，异步查询客户提交的请求的结果。
     */
    async DescribeHighlightResult(req, cb) {
        return this.request("DescribeHighlightResult", req, cb);
    }
    /**
     * **提交线下传统面授大班课（含课桌）任务。**
传统教室课堂是指有学生课堂有课桌的课堂，满座20-50人，全局画面且背景不动。
  
**提供的功能接口有：**学生人脸识别、学生表情识别、学生肢体动作识别。可分析的指标维度包括：学生身份识别、正脸、侧脸、抬头、低头、高兴、中性、高兴、中性、惊讶、厌恶、恐惧、愤怒、蔑视、悲伤、举手、站立、坐着、趴桌子、玩手机等
  
**对场景的要求为：**传统的学生上课教室，满座20-50人，全局画面且背景不动；人脸上下角度在20度以内，左右角度在15度以内，歪头角度在15度以内；光照均匀，无遮挡，人脸清晰可见；像素最好在 100X100 像素以上，但是图像整体质量不能超过1080p。
    
**结果查询方式：**图像任务直接返回结果，点播及直播任务通过DescribeAITaskResult查询结果。
  
     */
    async SubmitTraditionalClassTask(req, cb) {
        return this.request("SubmitTraditionalClassTask", req, cb);
    }
    /**
     * 获取标准化接口任务结果
     */
    async DescribeAITaskResult(req, cb) {
        return this.request("DescribeAITaskResult", req, cb);
    }
    /**
     * 删除人员
     */
    async DeletePerson(req, cb) {
        return this.request("DeletePerson", req, cb);
    }
    /**
     * 获取人员库列表
     */
    async DescribeLibraries(req, cb) {
        return this.request("DescribeLibraries", req, cb);
    }
    /**
     * 用于取消已经提交的任务，目前只支持图像任务。
     */
    async CancelTask(req, cb) {
        return this.request("CancelTask", req, cb);
    }
    /**
     * 发起视频生成精彩集锦接口。该接口可以通过客户传入的课程音频数据及相关策略（如微笑抽取，专注抽取等），自动生成一堂课程的精彩集锦。需要通过QueryHighlightResult接口获取生成结果。
     */
    async SubmitHighlights(req, cb) {
        return this.request("SubmitHighlights", req, cb);
    }
    /**
     * 查询词汇库
     */
    async DescribeVocabLib(req, cb) {
        return this.request("DescribeVocabLib", req, cb);
    }
    /**
     * 创建词汇
     */
    async CreateVocab(req, cb) {
        return this.request("CreateVocab", req, cb);
    }
    /**
     * **提交在线1对1课堂任务**
对于在线1对1课堂，老师通过视频向学生授课，并且学生人数为1人。通过上传学生端的图像信息，可以获取学生的听课情况分析。 具体指一路全局画面且背景不动，有1位学生的头像或上半身的画面，要求画面稳定清晰。
  
**提供的功能接口有：**学生人脸识别、学生表情识别、语音识别。可分析的指标维度包括：学生身份识别、正脸、侧脸、抬头、低头、人脸坐标、人脸尺寸、高兴、中性、高兴、中性、惊讶、厌恶、恐惧、愤怒、蔑视、悲伤、语音转文字、发音时长、非发音时长、音量、语速等。
  
**对场景的要求为：**真实常规1v1授课场景，学生2人以下，全局画面且背景不动；人脸上下角度在20度以内，左右角度在15度以内，歪头角度在15度以内；光照均匀，无遮挡，人脸清晰可见；像素最好在 100X100 像素以上，但是图像整体质量不能超过1080p。
    
**结果查询方式：**图像任务直接返回结果，点播及直播任务通过DescribeAITaskResult查询结果。
     */
    async SubmitOneByOneClassTask(req, cb) {
        return this.request("SubmitOneByOneClassTask", req, cb);
    }
    /**
     * **在线小班课任务**：此场景是在线授课场景，老师一般为坐着授课，摄像头可以拍摄到老师的头部及上半身。拍摄视频为一路全局画面，且背景不动，要求画面稳定清晰。通过此接口可分析老师授课的行为及语音，以支持AI评教。
  
**提供的功能接口有：**老师人脸识别、老师表情识别、老师手势识别、光线识别、语音识别。 可分析的指标维度包括：身份识别、正脸、侧脸、人脸坐标、人脸尺寸、高兴、中性、高兴、中性、惊讶、厌恶、恐惧、愤怒、蔑视、悲伤、点赞手势、听你说手势、听我说手势、拿教具行为、语音转文字、发音时长、非发音时长、音量、语速、指定关键词的使用等
  
**对场景的要求为：**在线常规授课场景，全局画面且背景不动；人脸上下角度在20度以内，左右角度在15度以内，歪头角度在15度以内；光照均匀，无遮挡，人脸清晰可见；像素最好在 100X100 像素以上，但是图像整体质量不能超过1080p。
    
**结果查询方式：**图像任务直接返回结果，点播及直播任务通过DescribeAITaskResult查询结果。
     */
    async SubmitPartialBodyClassTask(req, cb) {
        return this.request("SubmitPartialBodyClassTask", req, cb);
    }
    /**
     * 提交人员考勤任务，支持包括点播和直播资源；支持通过DescribeAttendanceResult查询结果，也支持通过NoticeUrl设置考勤回调结果，回调结果结构如下：
##### 回调事件结构
 | 参数名称 | 类型 | 描述 |
 | ----  | ---  | ------  |
 | jobid | Integer | 任务ID |
 | person_info | array of PersonInfo | 识别到的人员列表 |
#####子结构PersonInfo
 | 参数名称 | 类型 | 描述 |
 | ----  | ---  | ------  |
 | traceid | String | 可用于区分同一路视频流下的不同陌生人 |
 | personid | String | 识别到的人员ID，如果是陌生人则返回空串 |
 | libid | String | 识别到的人员所在的库ID，如果是陌生人则返回空串 |
 | timestamp | uint64 | 识别到人脸的绝对时间戳，单位ms |
 | image_url | string | 识别到人脸的事件抓图的下载地址，不长期保存，需要请及时下载 |
     */
    async SubmitCheckAttendanceTask(req, cb) {
        return this.request("SubmitCheckAttendanceTask", req, cb);
    }
    /**
     * 创建人员
     */
    async CreatePerson(req, cb) {
        return this.request("CreatePerson", req, cb);
    }
    /**
     * 音频对话任务评估任务信息查询接口，异步查询客户提交的请求的结果。
     */
    async DescribeConversationTask(req, cb) {
        return this.request("DescribeConversationTask", req, cb);
    }
    /**
     * 删除人员库
     */
    async DeleteLibrary(req, cb) {
        return this.request("DeleteLibrary", req, cb);
    }
    /**
     * 拉取任务详情
     */
    async DescribeImageTask(req, cb) {
        return this.request("DescribeImageTask", req, cb);
    }
    /**
     * 提交图像分析任务
     */
    async SubmitImageTask(req, cb) {
        return this.request("SubmitImageTask", req, cb);
    }
    /**
     * 人脸考勤查询结果
     */
    async DescribeAttendanceResult(req, cb) {
        return this.request("DescribeAttendanceResult", req, cb);
    }
    /**
     * 高级图像分析任务，开放了图像任务里的所有开关，可以根据场景深度定制图像分析任务。支持的图像类别有，图片链接、图片二进制数据、点播链接和直播链接。
     */
    async SubmitImageTaskPlus(req, cb) {
        return this.request("SubmitImageTaskPlus", req, cb);
    }
    /**
     * 建立词汇库
     */
    async CreateVocabLib(req, cb) {
        return this.request("CreateVocabLib", req, cb);
    }
    /**
     * 删除词汇
     */
    async DeleteVocab(req, cb) {
        return this.request("DeleteVocab", req, cb);
    }
    /**
     * **传统课堂授课任务**：在此场景中，老师为站立授课，有白板或投影供老师展示课程内容，摄像头可以拍摄到老师的半身或者全身。拍摄视频为一路全局画面，且背景不动，要求画面稳定清晰。通过此接口可分析老师授课的行为及语音，以支持AI评教。
  
**提供的功能接口有：**老师人脸识别、老师表情识别、老师肢体动作识别、语音识别。  可分析的指标维度包括：身份识别、正脸、侧脸、人脸坐标、人脸尺寸、高兴、中性、高兴、中性、惊讶、厌恶、恐惧、愤怒、蔑视、悲伤、正面讲解、写板书、指黑板、语音转文字、发音时长、非发音时长、音量、语速、指定关键词的使用等
  
**对场景的要求为：**真实场景老师1人出现在画面中，全局画面且背景不动；人脸上下角度在20度以内，左右角度在15度以内，歪头角度在15度以内；光照均匀，无遮挡，人脸清晰可见；像素最好在 100X100 像素以上，但是图像整体质量不能超过1080p。
    
**结果查询方式：**图像任务直接返回结果，点播及直播任务通过DescribeAITaskResult查询结果。
     */
    async SubmitFullBodyClassTask(req, cb) {
        return this.request("SubmitFullBodyClassTask", req, cb);
    }
    /**
     * 检查人脸图片是否合法
     */
    async CheckFacePhoto(req, cb) {
        return this.request("CheckFacePhoto", req, cb);
    }
    /**
     * 查询词汇
     */
    async DescribeVocab(req, cb) {
        return this.request("DescribeVocab", req, cb);
    }
    /**
     * 删除词汇库
     */
    async DeleteVocabLib(req, cb) {
        return this.request("DeleteVocabLib", req, cb);
    }
    /**
     * 获取人员详情
     */
    async DescribePerson(req, cb) {
        return this.request("DescribePerson", req, cb);
    }
    /**
     * 删除人脸
     */
    async DeleteFace(req, cb) {
        return this.request("DeleteFace", req, cb);
    }
    /**
     * 音频评估任务信息查询接口，异步查询客户提交的请求的结果。
     */
    async DescribeAudioTask(req, cb) {
        return this.request("DescribeAudioTask", req, cb);
    }
    /**
     * 分析音频信息
     */
    async TransmitAudioStream(req, cb) {
        return this.request("TransmitAudioStream", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249464, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tcm = void 0;
const v20210413_1 = require("./v20210413");
exports.tcm = {
    v20210413: v20210413_1.v20210413,
};

}, function(modId) { var map = {"./v20210413":1738984249465}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249465, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210413 = void 0;
const Models = require("./tcm_models");
const tcm_client_1 = require("./tcm_client");
exports.v20210413 = {
    Client: tcm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tcm_models":1738984249466,"./tcm_client":1738984249467}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249466, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249467, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tcm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tcm.tencentcloudapi.com", "2021-04-13", clientConfig);
    }
    /**
     * 删除网格
     */
    async DeleteMesh(req, cb) {
        return this.request("DeleteMesh", req, cb);
    }
    /**
     * 获取AccessLog配置
     */
    async DescribeAccessLogConfig(req, cb) {
        return this.request("DescribeAccessLogConfig", req, cb);
    }
    /**
     * 关联集群
     */
    async LinkClusterList(req, cb) {
        return this.request("LinkClusterList", req, cb);
    }
    /**
     * 关联Prometheus
     */
    async LinkPrometheus(req, cb) {
        return this.request("LinkPrometheus", req, cb);
    }
    /**
     * 查询网格列表
     */
    async DescribeMeshList(req, cb) {
        return this.request("DescribeMeshList", req, cb);
    }
    /**
     * 修改网格
     */
    async ModifyMesh(req, cb) {
        return this.request("ModifyMesh", req, cb);
    }
    /**
     * 解关联集群
     */
    async UnlinkCluster(req, cb) {
        return this.request("UnlinkCluster", req, cb);
    }
    /**
     * 修改 Tracing 配置
     */
    async ModifyTracingConfig(req, cb) {
        return this.request("ModifyTracingConfig", req, cb);
    }
    /**
     * 修改访问日志配置
     */
    async ModifyAccessLogConfig(req, cb) {
        return this.request("ModifyAccessLogConfig", req, cb);
    }
    /**
     * 创建网格
     */
    async CreateMesh(req, cb) {
        return this.request("CreateMesh", req, cb);
    }
    /**
     * 查询网格详情
     */
    async DescribeMesh(req, cb) {
        return this.request("DescribeMesh", req, cb);
    }
    /**
     * 解除关联Prometheus
     */
    async UnlinkPrometheus(req, cb) {
        return this.request("UnlinkPrometheus", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249468, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tcr = void 0;
const v20190924_1 = require("./v20190924");
exports.tcr = {
    v20190924: v20190924_1.v20190924,
};

}, function(modId) { var map = {"./v20190924":1738984249469}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249469, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190924 = void 0;
const Models = require("./tcr_models");
const tcr_client_1 = require("./tcr_client");
exports.v20190924 = {
    Client: tcr_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tcr_models":1738984249470,"./tcr_client":1738984249471}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249470, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249471, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tcr client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tcr.tencentcloudapi.com", "2019-09-24", clientConfig);
    }
    /**
     * 用于获取个人版全局镜像版本自动清理策略
     */
    async DescribeImageLifecycleGlobalPersonal(req, cb) {
        return this.request("DescribeImageLifecycleGlobalPersonal", req, cb);
    }
    /**
     * 查询从实例列表
     */
    async DescribeReplicationInstances(req, cb) {
        return this.request("DescribeReplicationInstances", req, cb);
    }
    /**
     * 删除实例公网访问白名单策略

注意：当PolicyIndex和CidrBlock同时存在时，CidrBlock优先级更高
     */
    async DeleteSecurityPolicy(req, cb) {
        return this.request("DeleteSecurityPolicy", req, cb);
    }
    /**
     * 用于获取个人版镜像仓库tag列表
     */
    async DescribeImagePersonal(req, cb) {
        return this.request("DescribeImagePersonal", req, cb);
    }
    /**
     * 删除从实例
     */
    async DeleteReplicationInstance(req, cb) {
        return this.request("DeleteReplicationInstance", req, cb);
    }
    /**
     * 用于在企业版中创建命名空间
     */
    async CreateNamespace(req, cb) {
        return this.request("CreateNamespace", req, cb);
    }
    /**
     * 查询镜像仓库列表或指定镜像仓库信息
     */
    async DescribeRepositories(req, cb) {
        return this.request("DescribeRepositories", req, cb);
    }
    /**
     * 管理实例同步
     */
    async ManageReplication(req, cb) {
        return this.request("ManageReplication", req, cb);
    }
    /**
     * 获取触发器日志
     */
    async DescribeWebhookTriggerLog(req, cb) {
        return this.request("DescribeWebhookTriggerLog", req, cb);
    }
    /**
     * 查询容器镜像Manifest信息
     */
    async DescribeImageManifests(req, cb) {
        return this.request("DescribeImageManifests", req, cb);
    }
    /**
     * 用于设置个人版全局镜像版本自动清理策略
     */
    async ManageImageLifecycleGlobalPersonal(req, cb) {
        return this.request("ManageImageLifecycleGlobalPersonal", req, cb);
    }
    /**
     * 创建自定义域名
     */
    async CreateInstanceCustomizedDomain(req, cb) {
        return this.request("CreateInstanceCustomizedDomain", req, cb);
    }
    /**
     *  删除镜像不可变规则
     */
    async DeleteImmutableTagRules(req, cb) {
        return this.request("DeleteImmutableTagRules", req, cb);
    }
    /**
     * 用于在个人版中删除tag
     */
    async DeleteImagePersonal(req, cb) {
        return this.request("DeleteImagePersonal", req, cb);
    }
    /**
     * 创建镜像加速服务
     */
    async CreateImageAccelerationService(req, cb) {
        return this.request("CreateImageAccelerationService", req, cb);
    }
    /**
     * 更新触发器
     */
    async ModifyWebhookTrigger(req, cb) {
        return this.request("ModifyWebhookTrigger", req, cb);
    }
    /**
     * 用于个人版镜像仓库中批量删除镜像仓库
     */
    async BatchDeleteRepositoryPersonal(req, cb) {
        return this.request("BatchDeleteRepositoryPersonal", req, cb);
    }
    /**
     * 删除触发器
     */
    async DeleteWebhookTrigger(req, cb) {
        return this.request("DeleteWebhookTrigger", req, cb);
    }
    /**
     * 查询创建从实例任务状态
     */
    async DescribeReplicationInstanceCreateTasks(req, cb) {
        return this.request("DescribeReplicationInstanceCreateTasks", req, cb);
    }
    /**
     * 删除镜像加速服务
     */
    async DeleteImageAccelerateService(req, cb) {
        return this.request("DeleteImageAccelerateService", req, cb);
    }
    /**
     * 查询个人收藏仓库
     */
    async DescribeFavorRepositoryPersonal(req, cb) {
        return this.request("DescribeFavorRepositoryPersonal", req, cb);
    }
    /**
     * 用于在TCR实例中，创建多个白名单策略
     */
    async CreateMultipleSecurityPolicy(req, cb) {
        return this.request("CreateMultipleSecurityPolicy", req, cb);
    }
    /**
     * 删除服务级账号
     */
    async DeleteServiceAccount(req, cb) {
        return this.request("DeleteServiceAccount", req, cb);
    }
    /**
     * 查询镜像版本保留规则
     */
    async DescribeTagRetentionRules(req, cb) {
        return this.request("DescribeTagRetentionRules", req, cb);
    }
    /**
     * 用于在个人版镜像仓库中复制镜像版本
     */
    async DuplicateImagePersonal(req, cb) {
        return this.request("DuplicateImagePersonal", req, cb);
    }
    /**
     * 创建版本保留规则
     */
    async CreateTagRetentionRule(req, cb) {
        return this.request("CreateTagRetentionRule", req, cb);
    }
    /**
     * 用于删除个人版全局镜像版本自动清理策略
     */
    async DeleteImageLifecycleGlobalPersonal(req, cb) {
        return this.request("DeleteImageLifecycleGlobalPersonal", req, cb);
    }
    /**
     * 查询从实例同步状态
     */
    async DescribeReplicationInstanceSyncStatus(req, cb) {
        return this.request("DescribeReplicationInstanceSyncStatus", req, cb);
    }
    /**
     * 删除共享版命名空间
     */
    async DeleteNamespacePersonal(req, cb) {
        return this.request("DeleteNamespacePersonal", req, cb);
    }
    /**
     * 用于更新个人版镜像仓库的访问属性
     */
    async ModifyRepositoryAccessPersonal(req, cb) {
        return this.request("ModifyRepositoryAccessPersonal", req, cb);
    }
    /**
     * 更新实例信息
     */
    async ModifyInstance(req, cb) {
        return this.request("ModifyInstance", req, cb);
    }
    /**
     * 用于查询应用更新触发器
     */
    async DescribeApplicationTriggerPersonal(req, cb) {
        return this.request("DescribeApplicationTriggerPersonal", req, cb);
    }
    /**
     * 更新服务级账号密码
     */
    async ModifyServiceAccountPassword(req, cb) {
        return this.request("ModifyServiceAccountPassword", req, cb);
    }
    /**
     * 查询版本保留执行记录
     */
    async DescribeTagRetentionExecution(req, cb) {
        return this.request("DescribeTagRetentionExecution", req, cb);
    }
    /**
     * 删除自定义域名
     */
    async DeleteInstanceCustomizedDomain(req, cb) {
        return this.request("DeleteInstanceCustomizedDomain", req, cb);
    }
    /**
     * GC 最近10条历史
     */
    async DescribeGCJobs(req, cb) {
        return this.request("DescribeGCJobs", req, cb);
    }
    /**
     * 查询镜像加速服务状态
     */
    async DescribeImageAccelerateService(req, cb) {
        return this.request("DescribeImageAccelerateService", req, cb);
    }
    /**
     * 用于在个人版镜像仓库中更新容器镜像描述
     */
    async ModifyRepositoryInfoPersonal(req, cb) {
        return this.request("ModifyRepositoryInfoPersonal", req, cb);
    }
    /**
     * 手动执行版本保留
     */
    async CreateTagRetentionExecution(req, cb) {
        return this.request("CreateTagRetentionExecution", req, cb);
    }
    /**
     * 检查待创建的实例名称是否符合规范
     */
    async CheckInstanceName(req, cb) {
        return this.request("CheckInstanceName", req, cb);
    }
    /**
     * 用于校验企业版实例信息
     */
    async CheckInstance(req, cb) {
        return this.request("CheckInstance", req, cb);
    }
    /**
     * 查询个人版命名空间信息
     */
    async DescribeNamespacePersonal(req, cb) {
        return this.request("DescribeNamespacePersonal", req, cb);
    }
    /**
     * 查询所有有实例命名空间列表
     */
    async DescribeInstanceAllNamespaces(req, cb) {
        return this.request("DescribeInstanceAllNamespaces", req, cb);
    }
    /**
     * 查询个人版仓库信息
     */
    async DescribeRepositoryPersonal(req, cb) {
        return this.request("DescribeRepositoryPersonal", req, cb);
    }
    /**
     * 预付费实例续费，同时支持按量计费转包年包月
     */
    async RenewInstance(req, cb) {
        return this.request("RenewInstance", req, cb);
    }
    /**
     * 创建实例
     */
    async CreateInstance(req, cb) {
        return this.request("CreateInstance", req, cb);
    }
    /**
     * 用于在TCR中获取可用区域
     */
    async DescribeRegions(req, cb) {
        return this.request("DescribeRegions", req, cb);
    }
    /**
     * 查询实例公网访问白名单策略
     */
    async DescribeSecurityPolicies(req, cb) {
        return this.request("DescribeSecurityPolicies", req, cb);
    }
    /**
     * 用于在个人版镜像仓库中批量删除Tag
     */
    async BatchDeleteImagePersonal(req, cb) {
        return this.request("BatchDeleteImagePersonal", req, cb);
    }
    /**
     * 创建从实例
     */
    async CreateReplicationInstance(req, cb) {
        return this.request("CreateReplicationInstance", req, cb);
    }
    /**
     * 用于企业版创建镜像仓库
     */
    async CreateRepository(req, cb) {
        return this.request("CreateRepository", req, cb);
    }
    /**
     * 管理实例公网访问
     */
    async ManageExternalEndpoint(req, cb) {
        return this.request("ManageExternalEndpoint", req, cb);
    }
    /**
     * 更新实例公网访问白名单
     */
    async ModifySecurityPolicy(req, cb) {
        return this.request("ModifySecurityPolicy", req, cb);
    }
    /**
     * 查询版本保留执行任务
     */
    async DescribeTagRetentionExecutionTask(req, cb) {
        return this.request("DescribeTagRetentionExecutionTask", req, cb);
    }
    /**
     * 用于删除实例多个公网访问白名单策略
     */
    async DeleteMultipleSecurityPolicy(req, cb) {
        return this.request("DeleteMultipleSecurityPolicy", req, cb);
    }
    /**
     * 用于获取个人版仓库中自动清理策略
     */
    async DescribeImageLifecyclePersonal(req, cb) {
        return this.request("DescribeImageLifecyclePersonal", req, cb);
    }
    /**
     * 用于在个人版镜像仓库中，获取满足输入搜索条件的用户镜像仓库
     */
    async DescribeRepositoryFilterPersonal(req, cb) {
        return this.request("DescribeRepositoryFilterPersonal", req, cb);
    }
    /**
     * 创建个人用户
     */
    async CreateUserPersonal(req, cb) {
        return this.request("CreateUserPersonal", req, cb);
    }
    /**
     * 查询实例自定义域名列表
     */
    async DescribeInstanceCustomizedDomain(req, cb) {
        return this.request("DescribeInstanceCustomizedDomain", req, cb);
    }
    /**
     * 更新命名空间信息
     */
    async ModifyNamespace(req, cb) {
        return this.request("ModifyNamespace", req, cb);
    }
    /**
     * 列出镜像不可变规则
     */
    async DescribeImmutableTagRules(req, cb) {
        return this.request("DescribeImmutableTagRules", req, cb);
    }
    /**
     * 创建实例公网访问白名单策略
     */
    async CreateSecurityPolicy(req, cb) {
        return this.request("CreateSecurityPolicy", req, cb);
    }
    /**
     * 创建镜像签名策略
     */
    async CreateSignaturePolicy(req, cb) {
        return this.request("CreateSignaturePolicy", req, cb);
    }
    /**
     * 删除镜像仓库企业版实例
     */
    async DeleteInstance(req, cb) {
        return this.request("DeleteInstance", req, cb);
    }
    /**
     * 更新镜像仓库信息，可修改仓库描述信息
     */
    async ModifyRepository(req, cb) {
        return this.request("ModifyRepository", req, cb);
    }
    /**
     * 用于在企业版中返回Chart的下载信息
     */
    async DescribeChartDownloadInfo(req, cb) {
        return this.request("DescribeChartDownloadInfo", req, cb);
    }
    /**
     * 更新服务级账号
     */
    async ModifyServiceAccount(req, cb) {
        return this.request("ModifyServiceAccount", req, cb);
    }
    /**
     * 查询个人用户配额
     */
    async DescribeUserQuotaPersonal(req, cb) {
        return this.request("DescribeUserQuotaPersonal", req, cb);
    }
    /**
     * 创建镜像不可变规则
     */
    async CreateImmutableTagRules(req, cb) {
        return this.request("CreateImmutableTagRules", req, cb);
    }
    /**
     * 用于企业版批量删除Repository Tag
     */
    async DeleteRepositoryTags(req, cb) {
        return this.request("DeleteRepositoryTags", req, cb);
    }
    /**
     * 查询长期访问凭证信息
     */
    async DescribeInstanceToken(req, cb) {
        return this.request("DescribeInstanceToken", req, cb);
    }
    /**
     * 用于在TCR中下载helm chart
     */
    async DownloadHelmChart(req, cb) {
        return this.request("DownloadHelmChart", req, cb);
    }
    /**
     * 更新镜像不可变规则
     */
    async ModifyImmutableTagRules(req, cb) {
        return this.request("ModifyImmutableTagRules", req, cb);
    }
    /**
     * 用于删除应用更新触发器
     */
    async DeleteApplicationTriggerPersonal(req, cb) {
        return this.request("DeleteApplicationTriggerPersonal", req, cb);
    }
    /**
     * 创建tcr内网私有域名解析
     */
    async CreateInternalEndpointDns(req, cb) {
        return this.request("CreateInternalEndpointDns", req, cb);
    }
    /**
     * 更新实例内指定长期访问凭证的启用状态
     */
    async ModifyInstanceToken(req, cb) {
        return this.request("ModifyInstanceToken", req, cb);
    }
    /**
     * 创建触发器
     */
    async CreateWebhookTrigger(req, cb) {
        return this.request("CreateWebhookTrigger", req, cb);
    }
    /**
     * 用于创建应用更新触发器
     */
    async CreateApplicationTriggerPersonal(req, cb) {
        return this.request("CreateApplicationTriggerPersonal", req, cb);
    }
    /**
     * 用于判断个人版仓库是否存在
     */
    async ValidateRepositoryExistPersonal(req, cb) {
        return this.request("ValidateRepositoryExistPersonal", req, cb);
    }
    /**
     * 用于修改应用更新触发器
     */
    async ModifyApplicationTriggerPersonal(req, cb) {
        return this.request("ModifyApplicationTriggerPersonal", req, cb);
    }
    /**
     * 查询命名空间列表或指定命名空间信息
     */
    async DescribeNamespaces(req, cb) {
        return this.request("DescribeNamespaces", req, cb);
    }
    /**
     * 查询服务级账号
     */
    async DescribeServiceAccounts(req, cb) {
        return this.request("DescribeServiceAccounts", req, cb);
    }
    /**
     * 为一个镜像版本创建签名
     */
    async CreateSignature(req, cb) {
        return this.request("CreateSignature", req, cb);
    }
    /**
     * 删除tcr内网私有域名解析
     */
    async DeleteInternalEndpointDns(req, cb) {
        return this.request("DeleteInternalEndpointDns", req, cb);
    }
    /**
     * 更新版本保留规则
     */
    async ModifyTagRetentionRule(req, cb) {
        return this.request("ModifyTagRetentionRule", req, cb);
    }
    /**
     * 用于在个人版中查询与指定tag镜像内容相同的tag列表
     */
    async DescribeImageFilterPersonal(req, cb) {
        return this.request("DescribeImageFilterPersonal", req, cb);
    }
    /**
     * 删除镜像仓库
     */
    async DeleteRepository(req, cb) {
        return this.request("DeleteRepository", req, cb);
    }
    /**
     * 用于在个人版中获取用户全部的镜像仓库列表
     */
    async DescribeRepositoryOwnerPersonal(req, cb) {
        return this.request("DescribeRepositoryOwnerPersonal", req, cb);
    }
    /**
     * 查询镜像版本列表或指定容器镜像信息
     */
    async DescribeImages(req, cb) {
        return this.request("DescribeImages", req, cb);
    }
    /**
     * 删除版本保留规则
     */
    async DeleteTagRetentionRule(req, cb) {
        return this.request("DeleteTagRetentionRule", req, cb);
    }
    /**
     * 删除命名空间
     */
    async DeleteNamespace(req, cb) {
        return this.request("DeleteNamespace", req, cb);
    }
    /**
     * 删除命名空间加签策略
     */
    async DeleteSignaturePolicy(req, cb) {
        return this.request("DeleteSignaturePolicy", req, cb);
    }
    /**
     * 创建服务级账户
     */
    async CreateServiceAccount(req, cb) {
        return this.request("CreateServiceAccount", req, cb);
    }
    /**
     * 查询实例信息
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 用于个人版镜像仓库中删除
     */
    async DeleteRepositoryPersonal(req, cb) {
        return this.request("DeleteRepositoryPersonal", req, cb);
    }
    /**
     * 用于查询应用更新触发器触发日志
     */
    async DescribeApplicationTriggerLogPersonal(req, cb) {
        return this.request("DescribeApplicationTriggerLogPersonal", req, cb);
    }
    /**
     * 删除长期访问凭证
     */
    async DeleteInstanceToken(req, cb) {
        return this.request("DeleteInstanceToken", req, cb);
    }
    /**
     * 修改个人用户登录密码
     */
    async ModifyUserPasswordPersonal(req, cb) {
        return this.request("ModifyUserPasswordPersonal", req, cb);
    }
    /**
     * 查询触发器
     */
    async DescribeWebhookTrigger(req, cb) {
        return this.request("DescribeWebhookTrigger", req, cb);
    }
    /**
     * 管理实例内网访问VPC链接
     */
    async ManageInternalEndpoint(req, cb) {
        return this.request("ManageInternalEndpoint", req, cb);
    }
    /**
     * 用于在企业版镜像仓库中复制镜像版本
     */
    async DuplicateImage(req, cb) {
        return this.request("DuplicateImage", req, cb);
    }
    /**
     * 查询实例当前状态以及过程信息
     */
    async DescribeInstanceStatus(req, cb) {
        return this.request("DescribeInstanceStatus", req, cb);
    }
    /**
     * 用于在个人版仓库中创建镜像仓库
     */
    async CreateRepositoryPersonal(req, cb) {
        return this.request("CreateRepositoryPersonal", req, cb);
    }
    /**
     * 删除指定镜像
     */
    async DeleteImage(req, cb) {
        return this.request("DeleteImage", req, cb);
    }
    /**
     * 查询个人版用户命名空间是否存在
     */
    async ValidateNamespaceExistPersonal(req, cb) {
        return this.request("ValidateNamespaceExistPersonal", req, cb);
    }
    /**
     * 创建个人版镜像仓库命名空间，此命名空间全局唯一
     */
    async CreateNamespacePersonal(req, cb) {
        return this.request("CreateNamespacePersonal", req, cb);
    }
    /**
     * 查询实例公网访问入口状态
     */
    async DescribeExternalEndpointStatus(req, cb) {
        return this.request("DescribeExternalEndpointStatus", req, cb);
    }
    /**
     * 查询实例内网访问VPC链接
     */
    async DescribeInternalEndpoints(req, cb) {
        return this.request("DescribeInternalEndpoints", req, cb);
    }
    /**
     * 批量查询vpc是否已经添加私有域名解析
     */
    async DescribeInternalEndpointDnsStatus(req, cb) {
        return this.request("DescribeInternalEndpointDnsStatus", req, cb);
    }
    /**
     * 创建实例的临时或长期访问凭证
     */
    async CreateInstanceToken(req, cb) {
        return this.request("CreateInstanceToken", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249472, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tcss = void 0;
const v20201101_1 = require("./v20201101");
exports.tcss = {
    v20201101: v20201101_1.v20201101,
};

}, function(modId) { var map = {"./v20201101":1738984249473}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249473, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201101 = void 0;
const Models = require("./tcss_models");
const tcss_client_1 = require("./tcss_client");
exports.v20201101 = {
    Client: tcss_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tcss_models":1738984249474,"./tcss_client":1738984249475}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249474, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249475, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tcss client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tcss.tencentcloudapi.com", "2020-11-01", clientConfig);
    }
    /**
     * DescribeImageAuthorizedInfo  查询镜像授权信息
     */
    async DescribeImageAuthorizedInfo(req, cb) {
        return this.request("DescribeImageAuthorizedInfo", req, cb);
    }
    /**
     * 创建k8s api异常事件导出任务
     */
    async CreateK8sApiAbnormalEventExportJob(req, cb) {
        return this.request("CreateK8sApiAbnormalEventExportJob", req, cb);
    }
    /**
     * 更新安全日志-日志投递cls配置
     */
    async ModifySecLogDeliveryClsSetting(req, cb) {
        return this.request("ModifySecLogDeliveryClsSetting", req, cb);
    }
    /**
     * 接口已废弃

查询运行时异常进程事件列表信息导出
     */
    async DescribeAbnormalProcessEventsExport(req, cb) {
        return this.request("DescribeAbnormalProcessEventsExport", req, cb);
    }
    /**
     * 运行时文件扫描超时设置查询
     */
    async DescribeVirusScanTimeoutSetting(req, cb) {
        return this.request("DescribeVirusScanTimeoutSetting", req, cb);
    }
    /**
     * 运行时查询木马概览信息
     */
    async DescribeVirusSummary(req, cb) {
        return this.request("DescribeVirusSummary", req, cb);
    }
    /**
     * 编辑漏洞防御设置
     */
    async ModifyVulDefenceSetting(req, cb) {
        return this.request("ModifyVulDefenceSetting", req, cb);
    }
    /**
     * 创建异常进程规则导出任务
     */
    async CreateAbnormalProcessRulesExportJob(req, cb) {
        return this.request("CreateAbnormalProcessRulesExportJob", req, cb);
    }
    /**
     * 容器安全搜索查询主机列表
     */
    async DescribeAssetHostList(req, cb) {
        return this.request("DescribeAssetHostList", req, cb);
    }
    /**
     * 重新检测选定的检测失败的资产下的所有失败的检测项，返回创建的合规检查任务的ID。
     */
    async ScanComplianceScanFailedAssets(req, cb) {
        return this.request("ScanComplianceScanFailedAssets", req, cb);
    }
    /**
     * 获取索引列表
     */
    async DescribeIndexList(req, cb) {
        return this.request("DescribeIndexList", req, cb);
    }
    /**
     * 获取公钥
     */
    async DescribePublicKey(req, cb) {
        return this.request("DescribePublicKey", req, cb);
    }
    /**
     * 查询运行时访问控制事件的详细信息
     */
    async DescribeAccessControlDetail(req, cb) {
        return this.request("DescribeAccessControlDetail", req, cb);
    }
    /**
     * 查询木马自动隔离样本详情
     */
    async DescribeVirusAutoIsolateSampleDetail(req, cb) {
        return this.request("DescribeVirusAutoIsolateSampleDetail", req, cb);
    }
    /**
     * 接口已废弃

查询运行时异常进程策略列表信息导出
     */
    async DescribeAbnormalProcessRulesExport(req, cb) {
        return this.request("DescribeAbnormalProcessRulesExport", req, cb);
    }
    /**
     * 容器网络查询网络策略策略执行状态
     */
    async DescribeNetworkFirewallPolicyStatus(req, cb) {
        return this.request("DescribeNetworkFirewallPolicyStatus", req, cb);
    }
    /**
     * 查询k8sapi异常事件统计
     */
    async DescribeK8sApiAbnormalSummary(req, cb) {
        return this.request("DescribeK8sApiAbnormalSummary", req, cb);
    }
    /**
     * 创建漏洞防御导出任务
     */
    async CreateVulDefenceEventExportJob(req, cb) {
        return this.request("CreateVulDefenceEventExportJob", req, cb);
    }
    /**
     * 容器安全查询app服务列表
     */
    async DescribeAssetAppServiceList(req, cb) {
        return this.request("DescribeAssetAppServiceList", req, cb);
    }
    /**
     * 删除检索模板
     */
    async DeleteSearchTemplate(req, cb) {
        return this.request("DeleteSearchTemplate", req, cb);
    }
    /**
     * 创建受漏洞影响的镜像导出任务
     */
    async CreateVulImageExportJob(req, cb) {
        return this.request("CreateVulImageExportJob", req, cb);
    }
    /**
     * 统计漏洞扫描页已授权和未扫描镜像数
     */
    async DescribeVulScanAuthorizedImageSummary(req, cb) {
        return this.request("DescribeVulScanAuthorizedImageSummary", req, cb);
    }
    /**
     * 删除单个镜像仓库详细信息
     */
    async RemoveAssetImageRegistryRegistryDetail(req, cb) {
        return this.request("RemoveAssetImageRegistryRegistryDetail", req, cb);
    }
    /**
     * 下发刷新任务，会刷新资产信息
     */
    async CreateRefreshTask(req, cb) {
        return this.request("CreateRefreshTask", req, cb);
    }
    /**
     * 导出ES查询文档列表
     */
    async DescribeSearchExportList(req, cb) {
        return this.request("DescribeSearchExportList", req, cb);
    }
    /**
     * 修改安全日志kafkaUIN
     */
    async ModifySecLogKafkaUIN(req, cb) {
        return this.request("ModifySecLogKafkaUIN", req, cb);
    }
    /**
     * 镜像仓库停止镜像一键扫描任务
     */
    async ModifyAssetImageRegistryScanStopOneKey(req, cb) {
        return this.request("ModifyAssetImageRegistryScanStopOneKey", req, cb);
    }
    /**
     * 查询运行时运行时反弹shell白名单列表信息
     */
    async DescribeReverseShellWhiteLists(req, cb) {
        return this.request("DescribeReverseShellWhiteLists", req, cb);
    }
    /**
     * 查询本地镜像组件列表导出
     */
    async CreateComponentExportJob(req, cb) {
        return this.request("CreateComponentExportJob", req, cb);
    }
    /**
     * 查询木马自动隔离样本下载链接
     */
    async DescribeVirusAutoIsolateSampleDownloadURL(req, cb) {
        return this.request("DescribeVirusAutoIsolateSampleDownloadURL", req, cb);
    }
    /**
     * 查询用户镜像仓库下的命令空间列表
     */
    async DescribeImageRegistryNamespaceList(req, cb) {
        return this.request("DescribeImageRegistryNamespaceList", req, cb);
    }
    /**
     * 查询扫描忽略的漏洞列表
     */
    async DescribeScanIgnoreVulList(req, cb) {
        return this.request("DescribeScanIgnoreVulList", req, cb);
    }
    /**
     * 查询安全日志接入对象列表
     */
    async DescribeSecLogJoinObjectList(req, cb) {
        return this.request("DescribeSecLogJoinObjectList", req, cb);
    }
    /**
     * 容器安全搜索查询容器组件列表
     */
    async DescribeAssetComponentList(req, cb) {
        return this.request("DescribeAssetComponentList", req, cb);
    }
    /**
     * 容器安全查询镜像扫描状态
     */
    async DescribeAssetImageScanStatus(req, cb) {
        return this.request("DescribeAssetImageScanStatus", req, cb);
    }
    /**
     * 查询平行容器安装命令
     */
    async DescribeAgentDaemonSetCmd(req, cb) {
        return this.request("DescribeAgentDaemonSetCmd", req, cb);
    }
    /**
     * 创建k8sApi异常规则导出任务
     */
    async CreateK8sApiAbnormalRuleExportJob(req, cb) {
        return this.request("CreateK8sApiAbnormalRuleExportJob", req, cb);
    }
    /**
     * 容器网络集群网络策略创建自动发现任务
     */
    async CreateNetworkFirewallPolicyDiscover(req, cb) {
        return this.request("CreateNetworkFirewallPolicyDiscover", req, cb);
    }
    /**
     * 创建集群检查任务，用户检查用户的集群相关风险项
     */
    async CreateClusterCheckTask(req, cb) {
        return this.request("CreateClusterCheckTask", req, cb);
    }
    /**
     * 查询运行时访问控制事件列表
     */
    async DescribeAccessControlEvents(req, cb) {
        return this.request("DescribeAccessControlEvents", req, cb);
    }
    /**
     * 查询恶意请求事件列表
     */
    async DescribeRiskDnsList(req, cb) {
        return this.request("DescribeRiskDnsList", req, cb);
    }
    /**
     * 运行时更新文件查杀设置
     */
    async ModifyVirusScanSetting(req, cb) {
        return this.request("ModifyVirusScanSetting", req, cb);
    }
    /**
     * 查询安全日志投递kafka可选项
     */
    async DescribeSecLogDeliveryKafkaOptions(req, cb) {
        return this.request("DescribeSecLogDeliveryKafkaOptions", req, cb);
    }
    /**
     * 镜像仓库木马信息列表导出
     */
    async DescribeAssetImageRegistryVirusListExport(req, cb) {
        return this.request("DescribeAssetImageRegistryVirusListExport", req, cb);
    }
    /**
     * 容器网络创建网络策略确认任务
     */
    async ConfirmNetworkFirewallPolicy(req, cb) {
        return this.request("ConfirmNetworkFirewallPolicy", req, cb);
    }
    /**
     * 移除安全合规忽略(资产+检测项)列表，不显示指定的检查项包含的资产内容
参考的AddCompliancePolicyAssetSetToWhitelist，除输入字段外，其它应该是一致的，如果有不同可能是定义的不对
     */
    async DeleteComplianceAssetPolicySetFromWhitelist(req, cb) {
        return this.request("DeleteComplianceAssetPolicySetFromWhitelist", req, cb);
    }
    /**
     * 查询本地镜像组件列表
     */
    async DescribeImageComponentList(req, cb) {
        return this.request("DescribeImageComponentList", req, cb);
    }
    /**
     * 镜像仓库查询镜像统计信息
     */
    async DescribeAssetImageRegistrySummary(req, cb) {
        return this.request("DescribeAssetImageRegistrySummary", req, cb);
    }
    /**
     * 容器网络创建网络策略更新任务
     */
    async UpdateNetworkFirewallPolicyDetail(req, cb) {
        return this.request("UpdateNetworkFirewallPolicyDetail", req, cb);
    }
    /**
     * 查看镜像仓库资产更新进度状态
     */
    async DescribeAssetImageRegistryAssetStatus(req, cb) {
        return this.request("DescribeAssetImageRegistryAssetStatus", req, cb);
    }
    /**
     * 镜像仓库仓库列表
     */
    async DescribeAssetImageRegistryRegistryList(req, cb) {
        return this.request("DescribeAssetImageRegistryRegistryList", req, cb);
    }
    /**
     * 运行时文件查杀事件列表导出
     */
    async ExportVirusList(req, cb) {
        return this.request("ExportVirusList", req, cb);
    }
    /**
     * 查询单个集群的详细信息
     */
    async DescribeClusterDetail(req, cb) {
        return this.request("DescribeClusterDetail", req, cb);
    }
    /**
     * 镜像仓库查询木马病毒列表
     */
    async DescribeAssetImageRegistryVirusList(req, cb) {
        return this.request("DescribeAssetImageRegistryVirusList", req, cb);
    }
    /**
     * 镜像仓库更新定时任务
     */
    async UpdateImageRegistryTimingScanTask(req, cb) {
        return this.request("UpdateImageRegistryTimingScanTask", req, cb);
    }
    /**
     * 镜像仓库创建镜像一键扫描任务
     */
    async CreateAssetImageRegistryScanTaskOneKey(req, cb) {
        return this.request("CreateAssetImageRegistryScanTaskOneKey", req, cb);
    }
    /**
     * 修改运行时访问控制策略的状态，启用或者禁用
     */
    async ModifyAccessControlRuleStatus(req, cb) {
        return this.request("ModifyAccessControlRuleStatus", req, cb);
    }
    /**
     * 容器网络集群查看Yaml网络策略详情
     */
    async DescribeNetworkFirewallPolicyYamlDetail(req, cb) {
        return this.request("DescribeNetworkFirewallPolicyYamlDetail", req, cb);
    }
    /**
     * 接口已废弃

DescribeEscapeEventsExport  查询容器逃逸事件列表导出
     */
    async DescribeEscapeEventsExport(req, cb) {
        return this.request("DescribeEscapeEventsExport", req, cb);
    }
    /**
     * 容器网络创建检查Yaml网络策略任务
     */
    async CheckNetworkFirewallPolicyYaml(req, cb) {
        return this.request("CheckNetworkFirewallPolicyYaml", req, cb);
    }
    /**
     * 容器网络更新Yaml网络策略任务
     */
    async UpdateNetworkFirewallPolicyYamlDetail(req, cb) {
        return this.request("UpdateNetworkFirewallPolicyYamlDetail", req, cb);
    }
    /**
     * 查询集群网络空间列表
     */
    async DescribeNetworkFirewallNamespaceList(req, cb) {
        return this.request("DescribeNetworkFirewallNamespaceList", req, cb);
    }
    /**
     * 接口已废弃

容器安全搜索查询镜像列表导出
     */
    async DescribeAssetImageListExport(req, cb) {
        return this.request("DescribeAssetImageListExport", req, cb);
    }
    /**
     * 获取镜像扫描设置信息
     */
    async DescribeAssetImageScanSetting(req, cb) {
        return this.request("DescribeAssetImageScanSetting", req, cb);
    }
    /**
     * 安装检查组件，创建防护容器
     */
    async CreateCheckComponent(req, cb) {
        return this.request("CreateCheckComponent", req, cb);
    }
    /**
     * 设置检测模式和自动检查
     */
    async SetCheckMode(req, cb) {
        return this.request("SetCheckMode", req, cb);
    }
    /**
     * 查询最新披露漏洞列表
     */
    async DescribeNewestVul(req, cb) {
        return this.request("DescribeNewestVul", req, cb);
    }
    /**
     * 查询运行时高危系统调用系统名称列表
     */
    async DescribeRiskSyscallNames(req, cb) {
        return this.request("DescribeRiskSyscallNames", req, cb);
    }
    /**
     * 修改k8sapi异常规则信息
     */
    async ModifyK8sApiAbnormalRuleInfo(req, cb) {
        return this.request("ModifyK8sApiAbnormalRuleInfo", req, cb);
    }
    /**
     * 查询合规检测的定时任务列表
     */
    async DescribeCompliancePeriodTaskList(req, cb) {
        return this.request("DescribeCompliancePeriodTaskList", req, cb);
    }
    /**
     * 删除运行访问控制策略
     */
    async DeleteAccessControlRules(req, cb) {
        return this.request("DeleteAccessControlRules", req, cb);
    }
    /**
     * 创建漏洞防御主机导出任务
     */
    async CreateVulDefenceHostExportJob(req, cb) {
        return this.request("CreateVulDefenceHostExportJob", req, cb);
    }
    /**
     * ModifyEscapeEventStatus  修改容器逃逸扫描事件状态
     */
    async ModifyEscapeEventStatus(req, cb) {
        return this.request("ModifyEscapeEventStatus", req, cb);
    }
    /**
     * 统计异常进程各威胁等级待处理事件数
     */
    async DescribeAbnormalProcessLevelSummary(req, cb) {
        return this.request("DescribeAbnormalProcessLevelSummary", req, cb);
    }
    /**
     * DescribePurchaseStateInfo 查询容器安全服务已购买信息
     */
    async DescribePurchaseStateInfo(req, cb) {
        return this.request("DescribePurchaseStateInfo", req, cb);
    }
    /**
     * 查询运行时高危系统调用白名单详细信息
     */
    async DescribeRiskSyscallWhiteListDetail(req, cb) {
        return this.request("DescribeRiskSyscallWhiteListDetail", req, cb);
    }
    /**
     * 镜像仓库镜像仓库列表详情
     */
    async DescribeAssetImageRegistryDetail(req, cb) {
        return this.request("DescribeAssetImageRegistryDetail", req, cb);
    }
    /**
     * 修改逃逸白名单
     */
    async ModifyEscapeWhiteList(req, cb) {
        return this.request("ModifyEscapeWhiteList", req, cb);
    }
    /**
     * 查询木马一键检测预估超时时间
     */
    async DescribeVirusManualScanEstimateTimeout(req, cb) {
        return this.request("DescribeVirusManualScanEstimateTimeout", req, cb);
    }
    /**
     * 运行时高危系统调用列表导出
     */
    async DescribeRiskSyscallEventsExport(req, cb) {
        return this.request("DescribeRiskSyscallEventsExport", req, cb);
    }
    /**
     * 查询本地镜像自动授权规则
     */
    async DescribeImageAutoAuthorizedRule(req, cb) {
        return this.request("DescribeImageAutoAuthorizedRule", req, cb);
    }
    /**
     * 查询运行时异常策略详细信息
     */
    async DescribeAbnormalProcessRuleDetail(req, cb) {
        return this.request("DescribeAbnormalProcessRuleDetail", req, cb);
    }
    /**
     * 创建支持防御的漏洞导出任务
     */
    async CreateDefenceVulExportJob(req, cb) {
        return this.request("CreateDefenceVulExportJob", req, cb);
    }
    /**
     * DescribeValueAddedSrvInfo查询增值服务需购买信息
     */
    async DescribeValueAddedSrvInfo(req, cb) {
        return this.request("DescribeValueAddedSrvInfo", req, cb);
    }
    /**
     * 运行时更新木马文件事件状态
     */
    async ModifyVirusFileStatus(req, cb) {
        return this.request("ModifyVirusFileStatus", req, cb);
    }
    /**
     * 添加编辑运行时反弹shell白名单
     */
    async AddEditReverseShellWhiteList(req, cb) {
        return this.request("AddEditReverseShellWhiteList", req, cb);
    }
    /**
     * 查询运行时反弹shell事件详细信息
     */
    async DescribeReverseShellDetail(req, cb) {
        return this.request("DescribeReverseShellDetail", req, cb);
    }
    /**
     * 获取ES字段聚合结果
     */
    async DescribeESAggregations(req, cb) {
        return this.request("DescribeESAggregations", req, cb);
    }
    /**
     * 镜像绑定规则列表信息，包含运行时访问控制和异常进程公用
     */
    async DescribeAssetImageBindRuleInfo(req, cb) {
        return this.request("DescribeAssetImageBindRuleInfo", req, cb);
    }
    /**
     * 取消漏洞扫描忽略漏洞
     */
    async DeleteIgnoreVul(req, cb) {
        return this.request("DeleteIgnoreVul", req, cb);
    }
    /**
     * 创建本地镜像木马列表导出任务
     */
    async CreateAssetImageVirusExportJob(req, cb) {
        return this.request("CreateAssetImageVirusExportJob", req, cb);
    }
    /**
     * 容器网络查询网络策略自动发现任务进度
     */
    async DescribeNetworkFirewallPolicyDiscover(req, cb) {
        return this.request("DescribeNetworkFirewallPolicyDiscover", req, cb);
    }
    /**
     * 查询安全日志投递cls可选项
     */
    async DescribeSecLogDeliveryClsOptions(req, cb) {
        return this.request("DescribeSecLogDeliveryClsOptions", req, cb);
    }
    /**
     * 查询当天未授权核数趋势
     */
    async DescribeUnauthorizedCoresTendency(req, cb) {
        return this.request("DescribeUnauthorizedCoresTendency", req, cb);
    }
    /**
     * 查询检查结果总览，返回受影响的节点数量，返回7天的数据，总共7个
     */
    async DescribeTaskResultSummary(req, cb) {
        return this.request("DescribeTaskResultSummary", req, cb);
    }
    /**
     * 查询容器详细信息
     */
    async DescribeAssetContainerDetail(req, cb) {
        return this.request("DescribeAssetContainerDetail", req, cb);
    }
    /**
     * 镜像仓库查询镜像高危行为列表
     */
    async DescribeAssetImageRegistryRiskInfoList(req, cb) {
        return this.request("DescribeAssetImageRegistryRiskInfoList", req, cb);
    }
    /**
     * ModifyEscapeRule  修改容器逃逸扫描规则信息
     */
    async ModifyEscapeRule(req, cb) {
        return this.request("ModifyEscapeRule", req, cb);
    }
    /**
     * 按照 检测项 → 资产 的两级层次展开的第一层级：检测项层级。
     */
    async DescribeCompliancePolicyItemAffectedSummary(req, cb) {
        return this.request("DescribeCompliancePolicyItemAffectedSummary", req, cb);
    }
    /**
     * 查询刷新任务
     */
    async DescribeRefreshTask(req, cb) {
        return this.request("DescribeRefreshTask", req, cb);
    }
    /**
     * 容器网络集群下发刷新任务
     */
    async CreateNetworkFirewallClusterRefresh(req, cb) {
        return this.request("CreateNetworkFirewallClusterRefresh", req, cb);
    }
    /**
     * 查询运行时运行时高危系统调用列表信息
     */
    async DescribeRiskSyscallEvents(req, cb) {
        return this.request("DescribeRiskSyscallEvents", req, cb);
    }
    /**
     * 新增安全合规忽略(资产+检测项列表)列表，不显示指定的检查项包含的资产内容
参考的AddCompliancePolicyItemToWhitelist，除输入字段外，其它应该是一致的，如果有不同可能是定义的不对
     */
    async AddComplianceAssetPolicySetToWhitelist(req, cb) {
        return this.request("AddComplianceAssetPolicySetToWhitelist", req, cb);
    }
    /**
     * 修改安全日志接入对象
     */
    async ModifySecLogJoinObjects(req, cb) {
        return this.request("ModifySecLogJoinObjects", req, cb);
    }
    /**
     * 查询容器资产概览信息
     */
    async DescribeContainerAssetSummary(req, cb) {
        return this.request("DescribeContainerAssetSummary", req, cb);
    }
    /**
     * 查询超级节点列表
     */
    async DescribeAssetSuperNodeList(req, cb) {
        return this.request("DescribeAssetSuperNodeList", req, cb);
    }
    /**
     * 镜像仓库查看定时任务
     */
    async DescribeImageRegistryTimingScanTask(req, cb) {
        return this.request("DescribeImageRegistryTimingScanTask", req, cb);
    }
    /**
     * 查询运行时反弹shell事件列表信息导出
     */
    async DescribeReverseShellEventsExport(req, cb) {
        return this.request("DescribeReverseShellEventsExport", req, cb);
    }
    /**
     * 容器安全查询db服务列表
     */
    async DescribeAssetDBServiceList(req, cb) {
        return this.request("DescribeAssetDBServiceList", req, cb);
    }
    /**
     * 查询漏洞影响的镜像列表
     */
    async DescribeVulImageList(req, cb) {
        return this.request("DescribeVulImageList", req, cb);
    }
    /**
     * 修改运行时异常进程策略的开启关闭状态
     */
    async ModifyAbnormalProcessRuleStatus(req, cb) {
        return this.request("ModifyAbnormalProcessRuleStatus", req, cb);
    }
    /**
     * 查询漏洞防御事件列表
     */
    async DescribeVulDefenceEvent(req, cb) {
        return this.request("DescribeVulDefenceEvent", req, cb);
    }
    /**
     * 查询漏洞扫描忽略的仓库镜像列表
     */
    async DescribeVulIgnoreRegistryImageList(req, cb) {
        return this.request("DescribeVulIgnoreRegistryImageList", req, cb);
    }
    /**
     * 查询漏洞扫描任务信息
     */
    async DescribeVulScanInfo(req, cb) {
        return this.request("DescribeVulScanInfo", req, cb);
    }
    /**
     * 查询漏洞镜像统计
     */
    async DescribeVulImageSummary(req, cb) {
        return this.request("DescribeVulImageSummary", req, cb);
    }
    /**
     * 创建web漏洞导出任务
     */
    async CreateWebVulExportJob(req, cb) {
        return this.request("CreateWebVulExportJob", req, cb);
    }
    /**
     * 容器网络创建网络策略更新并发布任务
     */
    async UpdateAndPublishNetworkFirewallPolicyDetail(req, cb) {
        return this.request("UpdateAndPublishNetworkFirewallPolicyDetail", req, cb);
    }
    /**
     * 隔离容器网络状态
     */
    async ModifyContainerNetStatus(req, cb) {
        return this.request("ModifyContainerNetStatus", req, cb);
    }
    /**
     * 查询容器安全本地镜像风险趋势
     */
    async DescribeImageRiskTendency(req, cb) {
        return this.request("DescribeImageRiskTendency", req, cb);
    }
    /**
     * 查询agent安装命令
     */
    async DescribeAgentInstallCommand(req, cb) {
        return this.request("DescribeAgentInstallCommand", req, cb);
    }
    /**
     * 查询导出接口进度
     */
    async DescribeExportJobResult(req, cb) {
        return this.request("DescribeExportJobResult", req, cb);
    }
    /**
     * 容器安全创建镜像扫描任务
     */
    async CreateAssetImageScanTask(req, cb) {
        return this.request("CreateAssetImageScanTask", req, cb);
    }
    /**
     * 创建应急漏洞导出任务
     */
    async CreateEmergencyVulExportJob(req, cb) {
        return this.request("CreateEmergencyVulExportJob", req, cb);
    }
    /**
     * 查询正在一键扫描的镜像扫描taskid
     */
    async DescribeAssetImageScanTask(req, cb) {
        return this.request("DescribeAssetImageScanTask", req, cb);
    }
    /**
     * 镜像仓库镜像列表导出
     */
    async DescribeAssetImageRegistryListExport(req, cb) {
        return this.request("DescribeAssetImageRegistryListExport", req, cb);
    }
    /**
     * 查询漏洞防御插件列表
     */
    async DescribeVulDefencePlugin(req, cb) {
        return this.request("DescribeVulDefencePlugin", req, cb);
    }
    /**
     * 查询k8s api异常事件列表
     */
    async DescribeK8sApiAbnormalEventList(req, cb) {
        return this.request("DescribeK8sApiAbnormalEventList", req, cb);
    }
    /**
     * 查询上次任务的资产通过率汇总信息
     */
    async DescribeComplianceTaskAssetSummary(req, cb) {
        return this.request("DescribeComplianceTaskAssetSummary", req, cb);
    }
    /**
     * 运行时更新文件查杀实时监控设置
     */
    async ModifyVirusMonitorSetting(req, cb) {
        return this.request("ModifyVirusMonitorSetting", req, cb);
    }
    /**
     * 查询运行访问控制策略列表信息
     */
    async DescribeAccessControlRules(req, cb) {
        return this.request("DescribeAccessControlRules", req, cb);
    }
    /**
     * 容器安全搜索查询镜像木马列表导出
     */
    async DescribeAssetImageVirusListExport(req, cb) {
        return this.request("DescribeAssetImageVirusListExport", req, cb);
    }
    /**
     * 搜索查询容器列表
     */
    async DescribeAssetContainerList(req, cb) {
        return this.request("DescribeAssetContainerList", req, cb);
    }
    /**
     * 添加检索模板
     */
    async CreateSearchTemplate(req, cb) {
        return this.request("CreateSearchTemplate", req, cb);
    }
    /**
     * DescribePostPayDetail  查询后付费详情
     */
    async DescribePostPayDetail(req, cb) {
        return this.request("DescribePostPayDetail", req, cb);
    }
    /**
     * 查询超级节点pod列表
     */
    async DescribeSuperNodePodList(req, cb) {
        return this.request("DescribeSuperNodePodList", req, cb);
    }
    /**
     * 容器网络创建Yaml网络策略添加任务
     */
    async AddNetworkFirewallPolicyYamlDetail(req, cb) {
        return this.request("AddNetworkFirewallPolicyYamlDetail", req, cb);
    }
    /**
     * 删除运行时反弹shell事件
     */
    async DeleteReverseShellEvents(req, cb) {
        return this.request("DeleteReverseShellEvents", req, cb);
    }
    /**
     * 查看单个镜像仓库详细信息
     */
    async DescribeAssetImageRegistryRegistryDetail(req, cb) {
        return this.request("DescribeAssetImageRegistryRegistryDetail", req, cb);
    }
    /**
     * 新增逃逸白名单
     */
    async AddEscapeWhiteList(req, cb) {
        return this.request("AddEscapeWhiteList", req, cb);
    }
    /**
     * 创建镜像导出任务
     */
    async CreateImageExportJob(req, cb) {
        return this.request("CreateImageExportJob", req, cb);
    }
    /**
     * 查询安全日志投递Cls配置
     */
    async DescribeSecLogDeliveryClsSetting(req, cb) {
        return this.request("DescribeSecLogDeliveryClsSetting", req, cb);
    }
    /**
     * 查询运行时文件查杀事件列表
     */
    async DescribeVirusList(req, cb) {
        return this.request("DescribeVirusList", req, cb);
    }
    /**
     * 容器安全停止镜像扫描
     */
    async ModifyAssetImageScanStop(req, cb) {
        return this.request("ModifyAssetImageScanStop", req, cb);
    }
    /**
     * 重新检测选定的资产
     */
    async ScanComplianceAssets(req, cb) {
        return this.request("ScanComplianceAssets", req, cb);
    }
    /**
     * 修改k8sapi异常事件状态
     */
    async ModifyK8sApiAbnormalEventStatus(req, cb) {
        return this.request("ModifyK8sApiAbnormalEventStatus", req, cb);
    }
    /**
     * 新增漏洞扫描忽略漏洞
     */
    async AddIgnoreVul(req, cb) {
        return this.request("AddIgnoreVul", req, cb);
    }
    /**
     * 查询所有检查项接口，返回总数和检查项列表
     */
    async DescribeCheckItemList(req, cb) {
        return this.request("DescribeCheckItemList", req, cb);
    }
    /**
     * 创建系统漏洞导出任务
     */
    async CreateSystemVulExportJob(req, cb) {
        return this.request("CreateSystemVulExportJob", req, cb);
    }
    /**
     * 运行时查询木马文件信息
     */
    async DescribeVirusDetail(req, cb) {
        return this.request("DescribeVirusDetail", req, cb);
    }
    /**
     * 查询本地镜像漏洞列表导出
     */
    async CreateVulExportJob(req, cb) {
        return this.request("CreateVulExportJob", req, cb);
    }
    /**
     * 查询白名单列表
     */
    async DescribeComplianceWhitelistItemList(req, cb) {
        return this.request("DescribeComplianceWhitelistItemList", req, cb);
    }
    /**
     * 查询集群网络策略列表
     */
    async DescribeNetworkFirewallPolicyList(req, cb) {
        return this.request("DescribeNetworkFirewallPolicyList", req, cb);
    }
    /**
     * 镜像仓库资产刷新
     */
    async SyncAssetImageRegistryAsset(req, cb) {
        return this.request("SyncAssetImageRegistryAsset", req, cb);
    }
    /**
     * 创建合规检查任务，在资产级别触发重新检测时使用。
     */
    async CreateComplianceTask(req, cb) {
        return this.request("CreateComplianceTask", req, cb);
    }
    /**
     * 按照 资产 → 检测项 二层结构展示的信息。这里查询第一层 资产的通过率汇总信息。
     */
    async DescribeComplianceScanFailedAssetList(req, cb) {
        return this.request("DescribeComplianceScanFailedAssetList", req, cb);
    }
    /**
     * 查询k8sapi 异常规则中范围列表
     */
    async DescribeK8sApiAbnormalRuleScopeList(req, cb) {
        return this.request("DescribeK8sApiAbnormalRuleScopeList", req, cb);
    }
    /**
     * 查询集群列表
     */
    async DescribeAssetClusterList(req, cb) {
        return this.request("DescribeAssetClusterList", req, cb);
    }
    /**
     * 查询支持防御的漏洞列表
     */
    async DescribeSupportDefenceVul(req, cb) {
        return this.request("DescribeSupportDefenceVul", req, cb);
    }
    /**
     * 删除运行时高危系统调用事件
     */
    async DeleteRiskSyscallEvents(req, cb) {
        return this.request("DeleteRiskSyscallEvents", req, cb);
    }
    /**
     * 查询workload类型的影响范围，返回workload列表
     */
    async DescribeAffectedWorkloadList(req, cb) {
        return this.request("DescribeAffectedWorkloadList", req, cb);
    }
    /**
     * 新增安全合规忽略(检测项+资产)列表，不显示指定的检查项包含的资产内容
参考的AddCompliancePolicyItemToWhitelist，除输入字段外，其它应该是一致的，如果有不同可能是定义的不对
     */
    async AddCompliancePolicyAssetSetToWhitelist(req, cb) {
        return this.request("AddCompliancePolicyAssetSetToWhitelist", req, cb);
    }
    /**
     * 删除运行异常进程策略
     */
    async DeleteAbnormalProcessRules(req, cb) {
        return this.request("DeleteAbnormalProcessRules", req, cb);
    }
    /**
     * 查询漏洞详情
     */
    async DescribeVulDetail(req, cb) {
        return this.request("DescribeVulDetail", req, cb);
    }
    /**
     * 查询导出任务管理列表
     */
    async DescribeExportJobManageList(req, cb) {
        return this.request("DescribeExportJobManageList", req, cb);
    }
    /**
     * 创建漏洞扫描任务
     */
    async CreateVulScanTask(req, cb) {
        return this.request("CreateVulScanTask", req, cb);
    }
    /**
     * 查询集群策略列表
     */
    async DescribeNetworkFirewallClusterList(req, cb) {
        return this.request("DescribeNetworkFirewallClusterList", req, cb);
    }
    /**
     * 停止漏洞扫描任务
     */
    async StopVulScanTask(req, cb) {
        return this.request("StopVulScanTask", req, cb);
    }
    /**
     * 镜像仓库敏感信息列表导出
     */
    async DescribeAssetImageRegistryRiskListExport(req, cb) {
        return this.request("DescribeAssetImageRegistryRiskListExport", req, cb);
    }
    /**
     * 运行时文件扫描超时设置
     */
    async ModifyVirusScanTimeoutSetting(req, cb) {
        return this.request("ModifyVirusScanTimeoutSetting", req, cb);
    }
    /**
     * 运行时文件查杀一键扫描
     */
    async CreateVirusScanTask(req, cb) {
        return this.request("CreateVirusScanTask", req, cb);
    }
    /**
     * 查询漏洞防御的主机列表
     */
    async DescribeVulDefenceHost(req, cb) {
        return this.request("DescribeVulDefenceHost", req, cb);
    }
    /**
     * 查询漏洞扫描忽略的本地镜像列表
     */
    async DescribeVulIgnoreLocalImageList(req, cb) {
        return this.request("DescribeVulIgnoreLocalImageList", req, cb);
    }
    /**
     * DescribeEscapeEventDetail  查询容器逃逸事件详情
     */
    async DescribeEscapeEventDetail(req, cb) {
        return this.request("DescribeEscapeEventDetail", req, cb);
    }
    /**
     * 修改高危系统调用事件的状态信息
     */
    async ModifyRiskSyscallStatus(req, cb) {
        return this.request("ModifyRiskSyscallStatus", req, cb);
    }
    /**
     * 创建恶意请求事件导出任务
     */
    async CreateRiskDnsEventExportJob(req, cb) {
        return this.request("CreateRiskDnsEventExportJob", req, cb);
    }
    /**
     * 查询漏洞防御攻击事件趋势
     */
    async DescribeVulDefenceEventTendency(req, cb) {
        return this.request("DescribeVulDefenceEventTendency", req, cb);
    }
    /**
     * 查询逃逸白名单
     */
    async DescribeEscapeWhiteList(req, cb) {
        return this.request("DescribeEscapeWhiteList", req, cb);
    }
    /**
     * 重新检测选的检测项下的所有资产，返回创建的合规检查任务的ID。
     */
    async ScanCompliancePolicyItems(req, cb) {
        return this.request("ScanCompliancePolicyItems", req, cb);
    }
    /**
     * 删除运行时反弹shell白名单
     */
    async DeleteReverseShellWhiteLists(req, cb) {
        return this.request("DeleteReverseShellWhiteLists", req, cb);
    }
    /**
     * 查询某个资产的详情
     */
    async DescribeComplianceAssetDetailInfo(req, cb) {
        return this.request("DescribeComplianceAssetDetailInfo", req, cb);
    }
    /**
     * 查询运行时访问控制策略详细信息
     */
    async DescribeAccessControlRuleDetail(req, cb) {
        return this.request("DescribeAccessControlRuleDetail", req, cb);
    }
    /**
     * 容器网络更新Yaml网络策略并发布任务
     */
    async UpdateAndPublishNetworkFirewallPolicyYamlDetail(req, cb) {
        return this.request("UpdateAndPublishNetworkFirewallPolicyYamlDetail", req, cb);
    }
    /**
     * 批量授权镜像扫描V2.0
     */
    async ModifyImageAuthorized(req, cb) {
        return this.request("ModifyImageAuthorized", req, cb);
    }
    /**
     * 修改异常进程事件的状态信息
     */
    async ModifyAbnormalProcessStatus(req, cb) {
        return this.request("ModifyAbnormalProcessStatus", req, cb);
    }
    /**
     * 创建一个导出安全合规信息的任务
     */
    async CreateExportComplianceStatusListJob(req, cb) {
        return this.request("CreateExportComplianceStatusListJob", req, cb);
    }
    /**
     * 容器安全搜索查询镜像简略信息列表
     */
    async DescribeAssetImageSimpleList(req, cb) {
        return this.request("DescribeAssetImageSimpleList", req, cb);
    }
    /**
     * DescribeImageSimpleList 查询全部镜像列表
     */
    async DescribeImageSimpleList(req, cb) {
        return this.request("DescribeImageSimpleList", req, cb);
    }
    /**
     * 修改运行时访问控制事件状态信息
     */
    async ModifyAccessControlStatus(req, cb) {
        return this.request("ModifyAccessControlStatus", req, cb);
    }
    /**
     * 创建逃逸白名单导出任务
     */
    async CreateEscapeWhiteListExportJob(req, cb) {
        return this.request("CreateEscapeWhiteListExportJob", req, cb);
    }
    /**
     * DescribeEscapeRuleInfo 查询容器逃逸扫描规则信息
     */
    async DescribeEscapeRuleInfo(req, cb) {
        return this.request("DescribeEscapeRuleInfo", req, cb);
    }
    /**
     * 容器安全查询镜像风险列表
     */
    async DescribeAssetImageRiskList(req, cb) {
        return this.request("DescribeAssetImageRiskList", req, cb);
    }
    /**
     * 容器安全查询镜像关联主机
     */
    async DescribeAssetImageHostList(req, cb) {
        return this.request("DescribeAssetImageHostList", req, cb);
    }
    /**
     * 查询用户集群资产总览
     */
    async DescribeClusterSummary(req, cb) {
        return this.request("DescribeClusterSummary", req, cb);
    }
    /**
     * 查询漏洞防御事件详情
     */
    async DescribeVulDefenceEventDetail(req, cb) {
        return this.request("DescribeVulDefenceEventDetail", req, cb);
    }
    /**
     * DescribeEscapeSafeState 查询容器逃逸安全状态
     */
    async DescribeEscapeSafeState(req, cb) {
        return this.request("DescribeEscapeSafeState", req, cb);
    }
    /**
     * 运行时查询文件查杀任务列表
     */
    async DescribeVirusTaskList(req, cb) {
        return this.request("DescribeVirusTaskList", req, cb);
    }
    /**
     * 获取历史搜索记录
     */
    async DescribeSearchLogs(req, cb) {
        return this.request("DescribeSearchLogs", req, cb);
    }
    /**
     * 新增单个镜像仓库详细信息
     */
    async AddAssetImageRegistryRegistryDetail(req, cb) {
        return this.request("AddAssetImageRegistryRegistryDetail", req, cb);
    }
    /**
     * 容器安全搜索查询端口占用列表
     */
    async DescribeAssetPortList(req, cb) {
        return this.request("DescribeAssetPortList", req, cb);
    }
    /**
     * 新增或编辑本地镜像自动授权规则
     */
    async AddEditImageAutoAuthorizedRule(req, cb) {
        return this.request("AddEditImageAutoAuthorizedRule", req, cb);
    }
    /**
     * 查询容器安全概览信息
     */
    async DescribeTcssSummary(req, cb) {
        return this.request("DescribeTcssSummary", req, cb);
    }
    /**
     * 查询本地镜像风险概览
     */
    async DescribeImageRiskSummary(req, cb) {
        return this.request("DescribeImageRiskSummary", req, cb);
    }
    /**
     * 查询漏洞影响的仓库镜像列表
     */
    async DescribeVulRegistryImageList(req, cb) {
        return this.request("DescribeVulRegistryImageList", req, cb);
    }
    /**
     * 查询应急漏洞列表
     */
    async DescribeEmergencyVulList(req, cb) {
        return this.request("DescribeEmergencyVulList", req, cb);
    }
    /**
     * 查询漏洞各威胁等级统计数
     */
    async DescribeVulLevelSummary(req, cb) {
        return this.request("DescribeVulLevelSummary", req, cb);
    }
    /**
     * 查询集群网络空间标签列表
     */
    async DescribeNetworkFirewallNamespaceLabelList(req, cb) {
        return this.request("DescribeNetworkFirewallNamespaceLabelList", req, cb);
    }
    /**
     * 修改木马自动隔离样本开关
     */
    async ModifyVirusAutoIsolateExampleSwitch(req, cb) {
        return this.request("ModifyVirusAutoIsolateExampleSwitch", req, cb);
    }
    /**
     * 容器网络查询资产任务进度
     */
    async DescribeNetworkFirewallClusterRefreshStatus(req, cb) {
        return this.request("DescribeNetworkFirewallClusterRefreshStatus", req, cb);
    }
    /**
     * 运行时查询文件查杀实时监控设置
     */
    async DescribeVirusMonitorSetting(req, cb) {
        return this.request("DescribeVirusMonitorSetting", req, cb);
    }
    /**
     * 查询木马自动隔离设置
     */
    async DescribeVirusAutoIsolateSetting(req, cb) {
        return this.request("DescribeVirusAutoIsolateSetting", req, cb);
    }
    /**
     * 查询待处理逃逸事件趋势
     */
    async DescribeEscapeEventTendency(req, cb) {
        return this.request("DescribeEscapeEventTendency", req, cb);
    }
    /**
     * 修改定时任务的设置，包括检测周期、开启/禁用合规基准。
     */
    async ModifyCompliancePeriodTask(req, cb) {
        return this.request("ModifyCompliancePeriodTask", req, cb);
    }
    /**
     * 查询安全日志清理设置详情
     */
    async DescribeSecLogCleanSettingInfo(req, cb) {
        return this.request("DescribeSecLogCleanSettingInfo", req, cb);
    }
    /**
     * 查询系统漏洞列表
     */
    async DescribeSystemVulList(req, cb) {
        return this.request("DescribeSystemVulList", req, cb);
    }
    /**
     * 查询漏洞扫描任务的本地镜像列表
     */
    async DescribeVulScanLocalImageList(req, cb) {
        return this.request("DescribeVulScanLocalImageList", req, cb);
    }
    /**
     * 运行时停止木马查杀任务
     */
    async StopVirusScanTask(req, cb) {
        return this.request("StopVirusScanTask", req, cb);
    }
    /**
     * 添加编辑运行时异常进程策略
     */
    async AddEditAbnormalProcessRule(req, cb) {
        return this.request("AddEditAbnormalProcessRule", req, cb);
    }
    /**
     * 修改漏洞防御事件状态
     */
    async ModifyVulDefenceEventStatus(req, cb) {
        return this.request("ModifyVulDefenceEventStatus", req, cb);
    }
    /**
     * 重置安全日志主题设置
     */
    async ResetSecLogTopicConfig(req, cb) {
        return this.request("ResetSecLogTopicConfig", req, cb);
    }
    /**
     * 运行时文件查杀重新检测
     */
    async CreateVirusScanAgain(req, cb) {
        return this.request("CreateVirusScanAgain", req, cb);
    }
    /**
     * 查询集群策略审计列表
     */
    async DescribeNetworkFirewallAuditRecord(req, cb) {
        return this.request("DescribeNetworkFirewallAuditRecord", req, cb);
    }
    /**
     * 修改安全日志接入状态
     */
    async ModifySecLogJoinState(req, cb) {
        return this.request("ModifySecLogJoinState", req, cb);
    }
    /**
     * 查询容器安全未处理事件信息
     */
    async DescribeContainerSecEventSummary(req, cb) {
        return this.request("DescribeContainerSecEventSummary", req, cb);
    }
    /**
     * 查询镜像自动授权任务列表
     */
    async DescribeImageAutoAuthorizedTaskList(req, cb) {
        return this.request("DescribeImageAutoAuthorizedTaskList", req, cb);
    }
    /**
     * 查询最近一次任务发现的检测项的汇总信息列表，按照 检测项 → 资产 的两级层次展开。
     */
    async DescribeComplianceTaskPolicyItemSummaryList(req, cb) {
        return this.request("DescribeComplianceTaskPolicyItemSummaryList", req, cb);
    }
    /**
     * 容器安全搜索查询镜像列表
     */
    async DescribeAssetImageList(req, cb) {
        return this.request("DescribeAssetImageList", req, cb);
    }
    /**
     * 删除k8sapi异常事件规则
     */
    async DeleteK8sApiAbnormalRule(req, cb) {
        return this.request("DeleteK8sApiAbnormalRule", req, cb);
    }
    /**
     * 查询运行时反弹shell事件列表信息
     */
    async DescribeReverseShellEvents(req, cb) {
        return this.request("DescribeReverseShellEvents", req, cb);
    }
    /**
     * 创建异常进程事件导出异步任务
     */
    async CreateProcessEventsExportJob(req, cb) {
        return this.request("CreateProcessEventsExportJob", req, cb);
    }
    /**
     * 容器网络集群查看策略详情
     */
    async DescribeNetworkFirewallPolicyDetail(req, cb) {
        return this.request("DescribeNetworkFirewallPolicyDetail", req, cb);
    }
    /**
     * 镜像仓库创建镜像扫描任务
     */
    async CreateAssetImageRegistryScanTask(req, cb) {
        return this.request("CreateAssetImageRegistryScanTask", req, cb);
    }
    /**
     * 查询安全日志告警信息
     */
    async DescribeSecLogAlertMsg(req, cb) {
        return this.request("DescribeSecLogAlertMsg", req, cb);
    }
    /**
     * 查询未完成的刷新资产任务信息
     */
    async DescribeUnfinishRefreshTask(req, cb) {
        return this.request("DescribeUnfinishRefreshTask", req, cb);
    }
    /**
     * 添加编辑运行时高危系统调用白名单
     */
    async AddEditRiskSyscallWhiteList(req, cb) {
        return this.request("AddEditRiskSyscallWhiteList", req, cb);
    }
    /**
     * 镜像仓库查询一键镜像扫描状态
     */
    async DescribeAssetImageRegistryScanStatusOneKey(req, cb) {
        return this.request("DescribeAssetImageRegistryScanStatusOneKey", req, cb);
    }
    /**
     * 容器网络创建网络策略添加并发布任务
     */
    async AddAndPublishNetworkFirewallPolicyDetail(req, cb) {
        return this.request("AddAndPublishNetworkFirewallPolicyDetail", req, cb);
    }
    /**
     * 容器安全搜索查询镜像漏洞列表导出
     */
    async DescribeAssetImageVulListExport(req, cb) {
        return this.request("DescribeAssetImageVulListExport", req, cb);
    }
    /**
     * 镜像仓库镜像仓库列表
     */
    async DescribeAssetImageRegistryList(req, cb) {
        return this.request("DescribeAssetImageRegistryList", req, cb);
    }
    /**
     * 容器安全搜索查询进程列表
     */
    async DescribeAssetProcessList(req, cb) {
        return this.request("DescribeAssetProcessList", req, cb);
    }
    /**
     * 查询集群网络pod标签
     */
    async DescribeNetworkFirewallPodLabelsList(req, cb) {
        return this.request("DescribeNetworkFirewallPodLabelsList", req, cb);
    }
    /**
     * 查询k8sapi异常事件趋势
     */
    async DescribeK8sApiAbnormalTendency(req, cb) {
        return this.request("DescribeK8sApiAbnormalTendency", req, cb);
    }
    /**
     * 查询运行时异常进程事件列表信息
     */
    async DescribeAbnormalProcessEvents(req, cb) {
        return this.request("DescribeAbnormalProcessEvents", req, cb);
    }
    /**
     * 更新单个镜像仓库详细信息
     */
    async UpdateAssetImageRegistryRegistryDetail(req, cb) {
        return this.request("UpdateAssetImageRegistryRegistryDetail", req, cb);
    }
    /**
     * DescribeProVersionInfo  查询专业版需购买信息
     */
    async DescribeProVersionInfo(req, cb) {
        return this.request("DescribeProVersionInfo", req, cb);
    }
    /**
     * 查询某资产下的检测项列表
     */
    async DescribeComplianceAssetPolicyItemList(req, cb) {
        return this.request("DescribeComplianceAssetPolicyItemList", req, cb);
    }
    /**
     * 查询集群节点信息
     */
    async DescribeClusterNodes(req, cb) {
        return this.request("DescribeClusterNodes", req, cb);
    }
    /**
     * 获取ES查询文档列表
     */
    async DescribeESHits(req, cb) {
        return this.request("DescribeESHits", req, cb);
    }
    /**
     * 查询漏洞防御设置信息
     */
    async DescribeVulDefenceSetting(req, cb) {
        return this.request("DescribeVulDefenceSetting", req, cb);
    }
    /**
     * 查询资产同步最近时间
     */
    async DescribeAssetSyncLastTime(req, cb) {
        return this.request("DescribeAssetSyncLastTime", req, cb);
    }
    /**
     * 查询k8sapi异常请求规则详情
     */
    async DescribeK8sApiAbnormalRuleInfo(req, cb) {
        return this.request("DescribeK8sApiAbnormalRuleInfo", req, cb);
    }
    /**
     * 查询恶意请求事件详情
     */
    async DescribeRiskDnsEventDetail(req, cb) {
        return this.request("DescribeRiskDnsEventDetail", req, cb);
    }
    /**
     * 产品重构优化，这几个接口已经没有调用了

从白名单中删除将指定的检测项。
     */
    async DeleteCompliancePolicyItemFromWhitelist(req, cb) {
        return this.request("DeleteCompliancePolicyItemFromWhitelist", req, cb);
    }
    /**
     * 运行时查询文件查杀设置
     */
    async DescribeVirusScanSetting(req, cb) {
        return this.request("DescribeVirusScanSetting", req, cb);
    }
    /**
     * 查询促销活动
     */
    async DescribePromotionActivity(req, cb) {
        return this.request("DescribePromotionActivity", req, cb);
    }
    /**
     * 查询某类资产的列表
     */
    async DescribeComplianceAssetList(req, cb) {
        return this.request("DescribeComplianceAssetList", req, cb);
    }
    /**
     * 按照 检测项 → 资产 的两级层次展开的第二层级：资产层级。
     */
    async DescribeCompliancePolicyItemAffectedAssetList(req, cb) {
        return this.request("DescribeCompliancePolicyItemAffectedAssetList", req, cb);
    }
    /**
     * 获取日志检索容量使用统计
     */
    async DescribeLogStorageStatistic(req, cb) {
        return this.request("DescribeLogStorageStatistic", req, cb);
    }
    /**
     * 容器安全主机资产刷新
     */
    async ModifyAsset(req, cb) {
        return this.request("ModifyAsset", req, cb);
    }
    /**
     * CreateOrModifyPostPayCores  创建或者编辑弹性计费上限
     */
    async CreateOrModifyPostPayCores(req, cb) {
        return this.request("CreateOrModifyPostPayCores", req, cb);
    }
    /**
     * 修改木马自动隔离设置
     */
    async ModifyVirusAutoIsolateSetting(req, cb) {
        return this.request("ModifyVirusAutoIsolateSetting", req, cb);
    }
    /**
     * 查询安全日志KafkaUIN
     */
    async DescribeSecLogKafkaUIN(req, cb) {
        return this.request("DescribeSecLogKafkaUIN", req, cb);
    }
    /**
     * 编辑本地镜像自动授权开关
     */
    async SwitchImageAutoAuthorizedRule(req, cb) {
        return this.request("SwitchImageAutoAuthorizedRule", req, cb);
    }
    /**
     * 查询运行时异常进程事件详细信息
     */
    async DescribeAbnormalProcessDetail(req, cb) {
        return this.request("DescribeAbnormalProcessDetail", req, cb);
    }
    /**
     * RenewImageAuthorizeState   授权镜像扫描
     */
    async RenewImageAuthorizeState(req, cb) {
        return this.request("RenewImageAuthorizeState", req, cb);
    }
    /**
     * 获取受影响的集群数量，返回数量
     */
    async DescribeAffectedClusterCount(req, cb) {
        return this.request("DescribeAffectedClusterCount", req, cb);
    }
    /**
     * 创建受漏洞影响的容器导出任务
     */
    async CreateVulContainerExportJob(req, cb) {
        return this.request("CreateVulContainerExportJob", req, cb);
    }
    /**
     * 查询节点类型的影响范围，返回节点列表
     */
    async DescribeAffectedNodeList(req, cb) {
        return this.request("DescribeAffectedNodeList", req, cb);
    }
    /**
     * 查询运行时访问控制事件列表导出
     */
    async DescribeAccessControlEventsExport(req, cb) {
        return this.request("DescribeAccessControlEventsExport", req, cb);
    }
    /**
     * 查询木马事件趋势
     */
    async DescribeVirusEventTendency(req, cb) {
        return this.request("DescribeVirusEventTendency", req, cb);
    }
    /**
     * 查询镜像自动授权结果列表
     */
    async DescribeImageAutoAuthorizedLogList(req, cb) {
        return this.request("DescribeImageAutoAuthorizedLogList", req, cb);
    }
    /**
     * 查询应急漏洞各威胁等级统计镜像数
     */
    async DescribeVulLevelImageSummary(req, cb) {
        return this.request("DescribeVulLevelImageSummary", req, cb);
    }
    /**
     * 修改反弹shell事件的状态信息
     */
    async ModifyReverseShellStatus(req, cb) {
        return this.request("ModifyReverseShellStatus", req, cb);
    }
    /**
     * 查询安全日志接入列表
     */
    async DescribeSecLogJoinTypeList(req, cb) {
        return this.request("DescribeSecLogJoinTypeList", req, cb);
    }
    /**
     * 添加编辑告警策略
     */
    async AddEditWarningRules(req, cb) {
        return this.request("AddEditWarningRules", req, cb);
    }
    /**
     * 获取用户当前灰度配置
     */
    async DescribeABTestConfig(req, cb) {
        return this.request("DescribeABTestConfig", req, cb);
    }
    /**
     * 容器安全搜索查询镜像风险列表导出
     */
    async DescribeAssetImageRiskListExport(req, cb) {
        return this.request("DescribeAssetImageRiskListExport", req, cb);
    }
    /**
     * 修改安全日志清理设置信息
     */
    async ModifySecLogCleanSettingInfo(req, cb) {
        return this.request("ModifySecLogCleanSettingInfo", req, cb);
    }
    /**
     * 查询导出任务下载URL
     */
    async DescribeExportJobDownloadURL(req, cb) {
        return this.request("DescribeExportJobDownloadURL", req, cb);
    }
    /**
     * 镜像仓库查询镜像漏洞列表
     */
    async DescribeAssetImageRegistryVulList(req, cb) {
        return this.request("DescribeAssetImageRegistryVulList", req, cb);
    }
    /**
     * 查询最近一次任务发现的风险项的信息列表，支持根据特殊字段进行过滤
     */
    async DescribeRiskList(req, cb) {
        return this.request("DescribeRiskList", req, cb);
    }
    /**
     * DescribeEscapeEventInfo 查询容器逃逸事件列表
     */
    async DescribeEscapeEventInfo(req, cb) {
        return this.request("DescribeEscapeEventInfo", req, cb);
    }
    /**
     * 查询漏洞风险统计概览
     */
    async DescribeVulSummary(req, cb) {
        return this.request("DescribeVulSummary", req, cb);
    }
    /**
     * 查询自动授权规则授权范围主机信息
     */
    async DescribeAutoAuthorizedRuleHost(req, cb) {
        return this.request("DescribeAutoAuthorizedRuleHost", req, cb);
    }
    /**
     * 容器网络创建Yaml网络策略并发布任务
     */
    async AddAndPublishNetworkFirewallPolicyYamlDetail(req, cb) {
        return this.request("AddAndPublishNetworkFirewallPolicyYamlDetail", req, cb);
    }
    /**
     * 统计容器逃逸各事件类型和待处理事件数
     */
    async DescribeEscapeEventTypeSummary(req, cb) {
        return this.request("DescribeEscapeEventTypeSummary", req, cb);
    }
    /**
     * 创建逃逸事件导出异步任务
     */
    async CreateEscapeEventsExportJob(req, cb) {
        return this.request("CreateEscapeEventsExportJob", req, cb);
    }
    /**
     * 容器安全查询镜像漏洞列表
     */
    async DescribeAssetImageVulList(req, cb) {
        return this.request("DescribeAssetImageVulList", req, cb);
    }
    /**
     * 查询漏洞Top排名列表
     */
    async DescribeVulTopRanking(req, cb) {
        return this.request("DescribeVulTopRanking", req, cb);
    }
    /**
     * 获取告警策略列表
     */
    async DescribeWarningRules(req, cb) {
        return this.request("DescribeWarningRules", req, cb);
    }
    /**
     * 获取快速检索列表
     */
    async DescribeSearchTemplates(req, cb) {
        return this.request("DescribeSearchTemplates", req, cb);
    }
    /**
     * 将指定的检测项添加到白名单中，不显示未通过结果。
     */
    async AddCompliancePolicyItemToWhitelist(req, cb) {
        return this.request("AddCompliancePolicyItemToWhitelist", req, cb);
    }
    /**
     * 为客户初始化合规基线的使用环境，创建必要的数据和选项。
     */
    async InitializeUserComplianceEnvironment(req, cb) {
        return this.request("InitializeUserComplianceEnvironment", req, cb);
    }
    /**
     * 安全概览和集群安全页进入调用该接口，查询用户集群相关信息。
     */
    async DescribeUserCluster(req, cb) {
        return this.request("DescribeUserCluster", req, cb);
    }
    /**
     * 卸载Agent客户端
     */
    async DeleteMachine(req, cb) {
        return this.request("DeleteMachine", req, cb);
    }
    /**
     * 创建主机列表导出任务
     */
    async CreateHostExportJob(req, cb) {
        return this.request("CreateHostExportJob", req, cb);
    }
    /**
     * 开通容器安全服务试用
     */
    async OpenTcssTrial(req, cb) {
        return this.request("OpenTcssTrial", req, cb);
    }
    /**
     * 查询运行时异常进程策略列表信息
     */
    async DescribeAbnormalProcessRules(req, cb) {
        return this.request("DescribeAbnormalProcessRules", req, cb);
    }
    /**
     * 查询检查报告
     */
    async DescribeInspectionReport(req, cb) {
        return this.request("DescribeInspectionReport", req, cb);
    }
    /**
     * 用指定的检测项重新检测选定的资产，返回创建的合规检查任务的ID。
     */
    async ScanComplianceAssetsByPolicyItem(req, cb) {
        return this.request("ScanComplianceAssetsByPolicyItem", req, cb);
    }
    /**
     * 删除逃逸白名单
     */
    async DeleteEscapeWhiteList(req, cb) {
        return this.request("DeleteEscapeWhiteList", req, cb);
    }
    /**
     * 容器网络创建网络策略发布任务
     */
    async CreateNetworkFirewallPublish(req, cb) {
        return this.request("CreateNetworkFirewallPublish", req, cb);
    }
    /**
     * 容器网络创建网络策略撤销任务
     */
    async CreateNetworkFirewallUndoPublish(req, cb) {
        return this.request("CreateNetworkFirewallUndoPublish", req, cb);
    }
    /**
     * 删除运行时高危系统调用白名单
     */
    async DeleteRiskSyscallWhiteLists(req, cb) {
        return this.request("DeleteRiskSyscallWhiteLists", req, cb);
    }
    /**
     * 添加编辑运行时访问控制策略
     */
    async AddEditAccessControlRule(req, cb) {
        return this.request("AddEditAccessControlRule", req, cb);
    }
    /**
     * 查询本地镜像、仓库镜像中严重&高危的漏洞趋势
     */
    async DescribeVulTendency(req, cb) {
        return this.request("DescribeVulTendency", req, cb);
    }
    /**
     * 查询运行时反弹shell白名单详细信息
     */
    async DescribeReverseShellWhiteListDetail(req, cb) {
        return this.request("DescribeReverseShellWhiteListDetail", req, cb);
    }
    /**
     * 添加容器安全镜像扫描设置
     */
    async CreateAssetImageScanSetting(req, cb) {
        return this.request("CreateAssetImageScanSetting", req, cb);
    }
    /**
     * 容器安全查询镜像病毒列表
     */
    async DescribeAssetImageVirusList(req, cb) {
        return this.request("DescribeAssetImageVirusList", req, cb);
    }
    /**
     * 创建k8sapi异常事件规则
     */
    async CreateK8sApiAbnormalRuleInfo(req, cb) {
        return this.request("CreateK8sApiAbnormalRuleInfo", req, cb);
    }
    /**
     * 查询账户容器、镜像等统计信息
     */
    async DescribeAssetSummary(req, cb) {
        return this.request("DescribeAssetSummary", req, cb);
    }
    /**
     * 查询安全日志投递kafka配置
     */
    async DescribeSecLogDeliveryKafkaSetting(req, cb) {
        return this.request("DescribeSecLogDeliveryKafkaSetting", req, cb);
    }
    /**
     * DescribeRiskContainerImageList查询风险容器镜像列表
     */
    async DescribeEventEscapeImageList(req, cb) {
        return this.request("DescribeEventEscapeImageList", req, cb);
    }
    /**
     * 容器网络创建网络策略删除任务
     */
    async DeleteNetworkFirewallPolicyDetail(req, cb) {
        return this.request("DeleteNetworkFirewallPolicyDetail", req, cb);
    }
    /**
     * 容器安全查询web服务列表
     */
    async DescribeAssetWebServiceList(req, cb) {
        return this.request("DescribeAssetWebServiceList", req, cb);
    }
    /**
     * 检查单个镜像仓库名是否重复
     */
    async CheckRepeatAssetImageRegistry(req, cb) {
        return this.request("CheckRepeatAssetImageRegistry", req, cb);
    }
    /**
     * 容器网络创建网络策略添加任务
     */
    async AddNetworkFirewallPolicyDetail(req, cb) {
        return this.request("AddNetworkFirewallPolicyDetail", req, cb);
    }
    /**
     * 查询k8s api 异常事件详情
     */
    async DescribeK8sApiAbnormalEventInfo(req, cb) {
        return this.request("DescribeK8sApiAbnormalEventInfo", req, cb);
    }
    /**
     * 查询待处理异常进程事件趋势
     */
    async DescribeAbnormalProcessEventTendency(req, cb) {
        return this.request("DescribeAbnormalProcessEventTendency", req, cb);
    }
    /**
     * 查询受漏洞的容器列表
     */
    async DescribeVulContainerList(req, cb) {
        return this.request("DescribeVulContainerList", req, cb);
    }
    /**
     * 镜像仓库停止镜像扫描任务
     */
    async ModifyAssetImageRegistryScanStop(req, cb) {
        return this.request("ModifyAssetImageRegistryScanStop", req, cb);
    }
    /**
     * 查询安全日志商品信息
     */
    async DescribeSecLogVasInfo(req, cb) {
        return this.request("DescribeSecLogVasInfo", req, cb);
    }
    /**
     * 获取用户的pod列表
     */
    async DescribeUserPodList(req, cb) {
        return this.request("DescribeUserPodList", req, cb);
    }
    /**
     * 查询木马样本下载url
     */
    async DescribeVirusSampleDownloadUrl(req, cb) {
        return this.request("DescribeVirusSampleDownloadUrl", req, cb);
    }
    /**
     * 查询主机详细信息
     */
    async DescribeAssetHostDetail(req, cb) {
        return this.request("DescribeAssetHostDetail", req, cb);
    }
    /**
     * 镜像仓库漏洞列表导出
     */
    async DescribeAssetImageRegistryVulListExport(req, cb) {
        return this.request("DescribeAssetImageRegistryVulListExport", req, cb);
    }
    /**
     * 查询web应用漏洞列表
     */
    async DescribeWebVulList(req, cb) {
        return this.request("DescribeWebVulList", req, cb);
    }
    /**
     * 查询运行时高危系统调用白名单列表信息
     */
    async DescribeRiskSyscallWhiteLists(req, cb) {
        return this.request("DescribeRiskSyscallWhiteLists", req, cb);
    }
    /**
     * 接口已废弃

查询运行时访问控制策略列表导出
     */
    async DescribeAccessControlRulesExport(req, cb) {
        return this.request("DescribeAccessControlRulesExport", req, cb);
    }
    /**
     * 查询高危系统调用事件详细信息
     */
    async DescribeRiskSyscallDetail(req, cb) {
        return this.request("DescribeRiskSyscallDetail", req, cb);
    }
    /**
     * 查询木马自动隔离样本列表
     */
    async DescribeVirusAutoIsolateSampleList(req, cb) {
        return this.request("DescribeVirusAutoIsolateSampleList", req, cb);
    }
    /**
     * 运行时查询文件查杀任务状态
     */
    async DescribeVirusScanTaskStatus(req, cb) {
        return this.request("DescribeVirusScanTaskStatus", req, cb);
    }
    /**
     * 修改k8sapi异常事件规则状态
     */
    async ModifyK8sApiAbnormalRuleStatus(req, cb) {
        return this.request("ModifyK8sApiAbnormalRuleStatus", req, cb);
    }
    /**
     * 查询容器运行时安全事件趋势
     */
    async DescribeSecEventsTendency(req, cb) {
        return this.request("DescribeSecEventsTendency", req, cb);
    }
    /**
     * 查询镜像详细信息
     */
    async DescribeAssetImageDetail(req, cb) {
        return this.request("DescribeAssetImageDetail", req, cb);
    }
    /**
     * 更新安全日志投递kafka设置
     */
    async ModifySecLogDeliveryKafkaSetting(req, cb) {
        return this.request("ModifySecLogDeliveryKafkaSetting", req, cb);
    }
    /**
     * 创建文件篡改规则导出任务
     */
    async CreateAccessControlsRuleExportJob(req, cb) {
        return this.request("CreateAccessControlsRuleExportJob", req, cb);
    }
    /**
     * 新增安全合规忽略(检测项+资产)列表，不显示指定的检查项包含的资产内容
     */
    async DeleteCompliancePolicyAssetSetFromWhitelist(req, cb) {
        return this.request("DeleteCompliancePolicyAssetSetFromWhitelist", req, cb);
    }
    /**
     * 查询k8sapi异常请求规则列表
     */
    async DescribeK8sApiAbnormalRuleList(req, cb) {
        return this.request("DescribeK8sApiAbnormalRuleList", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249476, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tdcpg = void 0;
const v20211118_1 = require("./v20211118");
exports.tdcpg = {
    v20211118: v20211118_1.v20211118,
};

}, function(modId) { var map = {"./v20211118":1738984249477}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249477, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20211118 = void 0;
const Models = require("./tdcpg_models");
const tdcpg_client_1 = require("./tdcpg_client");
exports.v20211118 = {
    Client: tdcpg_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tdcpg_models":1738984249478,"./tdcpg_client":1738984249479}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249478, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249479, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tdcpg client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tdcpg.tencentcloudapi.com", "2021-11-18", clientConfig);
    }
    /**
     * 修改实例规格，此接口只针对状态为running(运行中)的实例生效
     */
    async ModifyClusterInstancesSpec(req, cb) {
        return this.request("ModifyClusterInstancesSpec", req, cb);
    }
    /**
     * 创建集群
     */
    async CreateCluster(req, cb) {
        return this.request("CreateCluster", req, cb);
    }
    /**
     * 修改数据库账号描述
     */
    async ModifyAccountDescription(req, cb) {
        return this.request("ModifyAccountDescription", req, cb);
    }
    /**
     * 修改集群名字
     */
    async ModifyClusterName(req, cb) {
        return this.request("ModifyClusterName", req, cb);
    }
    /**
     * 转换集群付费模式，目前只支持从 后付费 转换成 与预付费。
     */
    async TransformClusterPayMode(req, cb) {
        return this.request("TransformClusterPayMode", req, cb);
    }
    /**
     * 修改集群自动续费，只对预付费集群生效。
     */
    async ModifyClustersAutoRenewFlag(req, cb) {
        return this.request("ModifyClustersAutoRenewFlag", req, cb);
    }
    /**
     * 重置数据库账号密码
     */
    async ResetAccountPassword(req, cb) {
        return this.request("ResetAccountPassword", req, cb);
    }
    /**
     * 在集群中新建实例
     */
    async CreateClusterInstances(req, cb) {
        return this.request("CreateClusterInstances", req, cb);
    }
    /**
     * 删除集群，集群中的实例和数据都将被删除，且无法恢复。只有当集群状态处于isolated(已隔离)时才生效。
     */
    async DeleteCluster(req, cb) {
        return this.request("DeleteCluster", req, cb);
    }
    /**
     * 查询实例
     */
    async DescribeClusterInstances(req, cb) {
        return this.request("DescribeClusterInstances", req, cb);
    }
    /**
     * 查询集群可回档时间范围
     */
    async DescribeClusterRecoveryTimeRange(req, cb) {
        return this.request("DescribeClusterRecoveryTimeRange", req, cb);
    }
    /**
     * 隔离集群，集群的接入点网络将会断掉无法连接使用数据库。只有当集群状态处于running(运行中)时才生效。
     */
    async IsolateCluster(req, cb) {
        return this.request("IsolateCluster", req, cb);
    }
    /**
     * 查询集群
     */
    async DescribeClusters(req, cb) {
        return this.request("DescribeClusters", req, cb);
    }
    /**
     * 重启实例，此接口只针对状态为running(运行中)的实例生效。
     */
    async RestartClusterInstances(req, cb) {
        return this.request("RestartClusterInstances", req, cb);
    }
    /**
     * 恢复实例。此接口的使用场景包括：
 - 读写实例状态为running(运行中)时，批量恢复状态为isolated(已隔离)的只读实例
 - 读写实例状态为isolated(已隔离)时，恢复读写实例
 - 读写实例状态为isolated(已隔离)时，批量恢复读写实例以及状态为isolated(已隔离)的只读实例
     */
    async RecoverClusterInstances(req, cb) {
        return this.request("RecoverClusterInstances", req, cb);
    }
    /**
     * 开启或者关闭接入点外网
     */
    async ModifyClusterEndpointWanStatus(req, cb) {
        return this.request("ModifyClusterEndpointWanStatus", req, cb);
    }
    /**
     * 恢复集群，恢复集群的接入点网络，恢复后继续连接使用数据库。只有当集群状态处于isolated(已隔离)时才生效。
     */
    async RecoverCluster(req, cb) {
        return this.request("RecoverCluster", req, cb);
    }
    /**
     * 使用指定时间点的备份克隆一个新的集群
     */
    async CloneClusterToPointInTime(req, cb) {
        return this.request("CloneClusterToPointInTime", req, cb);
    }
    /**
     * 查询数据库账号信息
     */
    async DescribeAccounts(req, cb) {
        return this.request("DescribeAccounts", req, cb);
    }
    /**
     * 根据订单号获取资源信息
     */
    async DescribeResourcesByDealName(req, cb) {
        return this.request("DescribeResourcesByDealName", req, cb);
    }
    /**
     * 删除实例。只有当实例状态处于isolated(已隔离)时才生效。
     */
    async DeleteClusterInstances(req, cb) {
        return this.request("DeleteClusterInstances", req, cb);
    }
    /**
     * 查询集群接入点信息
     */
    async DescribeClusterEndpoints(req, cb) {
        return this.request("DescribeClusterEndpoints", req, cb);
    }
    /**
     * 查询集群的备份集
     */
    async DescribeClusterBackups(req, cb) {
        return this.request("DescribeClusterBackups", req, cb);
    }
    /**
     * 续费集群
     */
    async RenewCluster(req, cb) {
        return this.request("RenewCluster", req, cb);
    }
    /**
     * 隔离实例。此接口只针对状态为running的实例生效，使用场景包括：
 - 批量隔离集群内所有的实例
 - 在读写实例为running(运行中)时，单个/批量隔离只读实例
 - 集群内所有只读实例为isolated(已隔离)时，单独隔离读写实例
     */
    async IsolateClusterInstances(req, cb) {
        return this.request("IsolateClusterInstances", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249480, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tdid = void 0;
const v20210519_1 = require("./v20210519");
exports.tdid = {
    v20210519: v20210519_1.v20210519,
};

}, function(modId) { var map = {"./v20210519":1738984249481}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249481, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210519 = void 0;
const Models = require("./tdid_models");
const tdid_client_1 = require("./tdid_client");
exports.v20210519 = {
    Client: tdid_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tdid_models":1738984249482,"./tdid_client":1738984249483}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249482, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249483, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tdid client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tdid.tencentcloudapi.com", "2021-05-19", clientConfig);
    }
    /**
     * 获取某个应用关键指标统计数据
     */
    async GetOverSummary(req, cb) {
        return this.request("GetOverSummary", req, cb);
    }
    /**
     * 查询权威机构信息
     */
    async QueryAuthorityInfo(req, cb) {
        return this.request("QueryAuthorityInfo", req, cb);
    }
    /**
     * 验证已签名的可验证凭证
     */
    async VerifyCredentials(req, cb) {
        return this.request("VerifyCredentials", req, cb);
    }
    /**
     * 查询凭证模板内容
     */
    async QueryCPT(req, cb) {
        return this.request("QueryCPT", req, cb);
    }
    /**
     * 创建凭证持有人的可验证表达
     */
    async CreatePresentation(req, cb) {
        return this.request("CreatePresentation", req, cb);
    }
    /**
     * 自动生成公私钥对托管在DID平台，并注册DID标识
     */
    async CreateTDidByHost(req, cb) {
        return this.request("CreateTDidByHost", req, cb);
    }
    /**
     * 通过业务层绑定的对象ID获取DID标识
     */
    async GetTDidByObjectId(req, cb) {
        return this.request("GetTDidByObjectId", req, cb);
    }
    /**
     * 使用导入的公钥文件注册DID标识
     */
    async CreateTDidByPubKey(req, cb) {
        return this.request("CreateTDidByPubKey", req, cb);
    }
    /**
     * 验证可验证表达的内容
     */
    async VerifyPresentation(req, cb) {
        return this.request("VerifyPresentation", req, cb);
    }
    /**
     * 根据披露策略创建选择性披露凭证
     */
    async CreateDisclosedCredential(req, cb) {
        return this.request("CreateDisclosedCredential", req, cb);
    }
    /**
     * 获取某个应用关键指标统计数据
     */
    async GetAppSummary(req, cb) {
        return this.request("GetAppSummary", req, cb);
    }
    /**
     * 获取DID标识的文档
     */
    async GetTDidDocument(req, cb) {
        return this.request("GetTDidDocument", req, cb);
    }
    /**
     * 查询DID标识的认证公钥
     */
    async GetTDidPubKey(req, cb) {
        return this.request("GetTDidPubKey", req, cb);
    }
    /**
     * 设置DID文档的自定义属性
     */
    async SetTDidAttribute(req, cb) {
        return this.request("SetTDidAttribute", req, cb);
    }
    /**
     * 更新凭证的链上状态
     */
    async UpdateCredentialState(req, cb) {
        return this.request("UpdateCredentialState", req, cb);
    }
    /**
     * 更新DID标识的禁用状态
     */
    async DeactivateTDid(req, cb) {
        return this.request("DeactivateTDid", req, cb);
    }
    /**
     * 获取凭证链上状态信息
     */
    async GetCredentialState(req, cb) {
        return this.request("GetCredentialState", req, cb);
    }
    /**
     * 颁发可验证凭证
     */
    async IssueCredential(req, cb) {
        return this.request("IssueCredential", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249484, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tdmq = void 0;
const v20200217_1 = require("./v20200217");
exports.tdmq = {
    v20200217: v20200217_1.v20200217,
};

}, function(modId) { var map = {"./v20200217":1738984249485}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249485, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200217 = void 0;
const Models = require("./tdmq_models");
const tdmq_client_1 = require("./tdmq_client");
exports.v20200217 = {
    Client: tdmq_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tdmq_models":1738984249486,"./tdmq_client":1738984249487}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249486, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249487, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tdmq client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tdmq.tencentcloudapi.com", "2020-02-17", clientConfig);
    }
    /**
     * 批量删除租户下的命名空间
     */
    async DeleteEnvironments(req, cb) {
        return this.request("DeleteEnvironments", req, cb);
    }
    /**
     * 创建用户的集群
     */
    async CreateCluster(req, cb) {
        return this.request("CreateCluster", req, cb);
    }
    /**
     * 获取消费详情列表
     */
    async DescribeRocketMQConsumeStats(req, cb) {
        return this.request("DescribeRocketMQConsumeStats", req, cb);
    }
    /**
     * 删除角色，支持批量。
     */
    async DeleteRoles(req, cb) {
        return this.request("DeleteRoles", req, cb);
    }
    /**
     * 查询RabbitMQ exchange 列表
     */
    async DescribeRabbitMQExchanges(req, cb) {
        return this.request("DescribeRabbitMQExchanges", req, cb);
    }
    /**
     * 历史原因，该接口位于tdmq-manager，目前rabbitmq产品没有使用该接口，当前使用的是ModifyRabbitMQVipInstance。不过从调用链上看，线网还有请求流程，所以走预下线流程。

更新Amqp集群信息
     */
    async ModifyAMQPCluster(req, cb) {
        return this.request("ModifyAMQPCluster", req, cb);
    }
    /**
     * 查询消息轨迹
     */
    async DescribeRocketMQMsgTrace(req, cb) {
        return this.request("DescribeRocketMQMsgTrace", req, cb);
    }
    /**
     * 创建角色
     */
    async CreateRocketMQRole(req, cb) {
        return this.request("CreateRocketMQRole", req, cb);
    }
    /**
     * 创建cmq主题
     */
    async CreateCmqTopic(req, cb) {
        return this.request("CreateCmqTopic", req, cb);
    }
    /**
     * 删除cmq队列
     */
    async DeleteCmqQueue(req, cb) {
        return this.request("DeleteCmqQueue", req, cb);
    }
    /**
     * 修改RabbitMQ的vhost
     */
    async ModifyRabbitMQVirtualHost(req, cb) {
        return this.request("ModifyRabbitMQVirtualHost", req, cb);
    }
    /**
     * 枚举cmq全量主题
     */
    async DescribeCmqTopics(req, cb) {
        return this.request("DescribeCmqTopics", req, cb);
    }
    /**
     * 批量删除topics
     */
    async DeleteTopics(req, cb) {
        return this.request("DeleteTopics", req, cb);
    }
    /**
     * 删除RocketMQ消费组
     */
    async DeleteRocketMQGroup(req, cb) {
        return this.request("DeleteRocketMQGroup", req, cb);
    }
    /**
     * 删除专业集群——预付费，仅通过API 调用
     */
    async DeleteProCluster(req, cb) {
        return this.request("DeleteProCluster", req, cb);
    }
    /**
     * 删除角色，支持批量。
     */
    async DeleteRocketMQRoles(req, cb) {
        return this.request("DeleteRocketMQRoles", req, cb);
    }
    /**
     * 获取指定消费组下当前客户端的连接情况
     */
    async DescribeRocketMQConsumerConnections(req, cb) {
        return this.request("DescribeRocketMQConsumerConnections", req, cb);
    }
    /**
     * 创建RabbitMQ的用户
     */
    async CreateRabbitMQUser(req, cb) {
        return this.request("CreateRabbitMQUser", req, cb);
    }
    /**
     * 查询用户已购的RabbitMQ专享实例列表
     */
    async DescribeRabbitMQVipInstances(req, cb) {
        return this.request("DescribeRabbitMQVipInstances", req, cb);
    }
    /**
     * 回溯cmq队列
     */
    async RewindCmqQueue(req, cb) {
        return this.request("RewindCmqQueue", req, cb);
    }
    /**
     * 获取Topic生产详情列表
     */
    async DescribeRocketMQTopicStats(req, cb) {
        return this.request("DescribeRocketMQTopicStats", req, cb);
    }
    /**
     * 新增指定分区、类型的消息主题
     */
    async CreateTopic(req, cb) {
        return this.request("CreateTopic", req, cb);
    }
    /**
     * 获取RocketMQ命名空间列表
     */
    async DescribeRocketMQNamespaces(req, cb) {
        return this.request("DescribeRocketMQNamespaces", req, cb);
    }
    /**
     * 查询cmq全量队列
     */
    async DescribeCmqQueues(req, cb) {
        return this.request("DescribeCmqQueues", req, cb);
    }
    /**
     * 获取租户下命名空间列表
     */
    async DescribeEnvironments(req, cb) {
        return this.request("DescribeEnvironments", req, cb);
    }
    /**
     * 获取集群的详细信息
     */
    async DescribeClusterDetail(req, cb) {
        return this.request("DescribeClusterDetail", req, cb);
    }
    /**
     * 创建RocketMQ消费组
     */
    async CreateRocketMQGroup(req, cb) {
        return this.request("CreateRocketMQGroup", req, cb);
    }
    /**
     * 根据提供的 MessageID 确认指定 topic 中的消息
     */
    async AcknowledgeMessage(req, cb) {
        return this.request("AcknowledgeMessage", req, cb);
    }
    /**
     * 用于在用户账户下创建消息队列 Tdmq 命名空间
     */
    async CreateEnvironment(req, cb) {
        return this.request("CreateEnvironment", req, cb);
    }
    /**
     * 查询RabbitMQ权限列表
     */
    async DescribeRabbitMQPermission(req, cb) {
        return this.request("DescribeRabbitMQPermission", req, cb);
    }
    /**
     * 修改pulsar专业版公网安全策略
     */
    async ModifyPublicNetworkSecurityPolicy(req, cb) {
        return this.request("ModifyPublicNetworkSecurityPolicy", req, cb);
    }
    /**
     * 修改环境角色授权。
     */
    async ModifyRocketMQEnvironmentRole(req, cb) {
        return this.request("ModifyRocketMQEnvironmentRole", req, cb);
    }
    /**
     * 更新RocketMQ主题信息
     */
    async ModifyRocketMQTopic(req, cb) {
        return this.request("ModifyRocketMQTopic", req, cb);
    }
    /**
     * rocketmq 消息查询
     */
    async DescribeRocketMQTopicMsgs(req, cb) {
        return this.request("DescribeRocketMQTopicMsgs", req, cb);
    }
    /**
     * 获取指定命名空间的属性
     */
    async DescribeEnvironmentAttributes(req, cb) {
        return this.request("DescribeEnvironmentAttributes", req, cb);
    }
    /**
     * 创建cmq订阅接口
     */
    async CreateCmqSubscribe(req, cb) {
        return this.request("CreateCmqSubscribe", req, cb);
    }
    /**
     * 获取消息生产概览信息
     */
    async DescribePublisherSummary(req, cb) {
        return this.request("DescribePublisherSummary", req, cb);
    }
    /**
     * 删除RocketMQ命名空间
     */
    async DeleteRocketMQNamespace(req, cb) {
        return this.request("DeleteRocketMQNamespace", req, cb);
    }
    /**
     * 创建RabbitMQ的vhost
     */
    async CreateRabbitMQVirtualHost(req, cb) {
        return this.request("CreateRabbitMQVirtualHost", req, cb);
    }
    /**
     * 删除cmq主题
     */
    async DeleteCmqTopic(req, cb) {
        return this.request("DeleteCmqTopic", req, cb);
    }
    /**
     * RabbitMQ专享版修改公网管控台，vpc15672开关
     */
    async ModifyPublicNetworkAccessPoint(req, cb) {
        return this.request("ModifyPublicNetworkAccessPoint", req, cb);
    }
    /**
     * 修改RocketMQ专享实例
     */
    async ModifyRocketMQInstance(req, cb) {
        return this.request("ModifyRocketMQInstance", req, cb);
    }
    /**
     * 创建cmq队列接口
     */
    async CreateCmqQueue(req, cb) {
        return this.request("CreateCmqQueue", req, cb);
    }
    /**
     * 更新RocketMQ消费组信息
     */
    async ModifyRocketMQGroup(req, cb) {
        return this.request("ModifyRocketMQGroup", req, cb);
    }
    /**
     * 修改cmq主题属性
     */
    async ModifyCmqTopicAttribute(req, cb) {
        return this.request("ModifyCmqTopicAttribute", req, cb);
    }
    /**
     * 查询Topic迁移状态列表，源集群和目标集群客户端数量信息需要配合DescribeRocketMQSmoothMigrationTaskTopicInsNum接口查询
     */
    async DescribeRocketMQMigratingTopicList(req, cb) {
        return this.request("DescribeRocketMQMigratingTopicList", req, cb);
    }
    /**
     * 查询cmq订阅详情
     */
    async DescribeCmqSubscriptionDetail(req, cb) {
        return this.request("DescribeCmqSubscriptionDetail", req, cb);
    }
    /**
     * 获取环境下主题列表
     */
    async GetTopicList(req, cb) {
        return this.request("GetTopicList", req, cb);
    }
    /**
     * 删除集群
     */
    async DeleteCluster(req, cb) {
        return this.request("DeleteCluster", req, cb);
    }
    /**
     * 重置指定Group的消费位点到指定时间戳
     */
    async ResetRocketMQConsumerOffSet(req, cb) {
        return this.request("ResetRocketMQConsumerOffSet", req, cb);
    }
    /**
     * 获取集群列表
     */
    async DescribeClusters(req, cb) {
        return this.request("DescribeClusters", req, cb);
    }
    /**
     * 删除RabbitMQ的权限
     */
    async DeleteRabbitMQPermission(req, cb) {
        return this.request("DeleteRabbitMQPermission", req, cb);
    }
    /**
     * 平滑迁移过程获取源集群topic列表接口
     */
    async DescribeRocketMQSourceClusterTopicList(req, cb) {
        return this.request("DescribeRocketMQSourceClusterTopicList", req, cb);
    }
    /**
     * 创建环境角色授权
     */
    async CreateRocketMQEnvironmentRole(req, cb) {
        return this.request("CreateRocketMQEnvironmentRole", req, cb);
    }
    /**
     * 获取在线消费端详情
     */
    async DescribeRocketMQConsumerConnectionDetail(req, cb) {
        return this.request("DescribeRocketMQConsumerConnectionDetail", req, cb);
    }
    /**
     * 获取单个RabbitMQ专享实例信息
     */
    async DescribeRabbitMQVipInstance(req, cb) {
        return this.request("DescribeRabbitMQVipInstance", req, cb);
    }
    /**
     * 获取指定消费组下订阅的主题列表
     */
    async DescribeRocketMQTopicsByGroup(req, cb) {
        return this.request("DescribeRocketMQTopicsByGroup", req, cb);
    }
    /**
     * 从腾讯云可观测平台拉取公网指标监控数据，目前仅支持客户端到 LB 的入带宽和出宽带指标。
     */
    async DescribeRocketMQPublicAccessMonitorData(req, cb) {
        return this.request("DescribeRocketMQPublicAccessMonitorData", req, cb);
    }
    /**
     * 导入topic列表
     */
    async ImportRocketMQTopics(req, cb) {
        return this.request("ImportRocketMQTopics", req, cb);
    }
    /**
     * 该接口用于开启关闭公网访问、设置安全访问策略
     */
    async SetRocketMQPublicAccessPoint(req, cb) {
        return this.request("SetRocketMQPublicAccessPoint", req, cb);
    }
    /**
     * 查询指定环境和主题下的订阅者列表
     */
    async DescribeSubscriptions(req, cb) {
        return this.request("DescribeSubscriptions", req, cb);
    }
    /**
     * 查询cmq主题详情
     */
    async DescribeCmqTopicDetail(req, cb) {
        return this.request("DescribeCmqTopicDetail", req, cb);
    }
    /**
     * 获取单个RocketMQ专享集群信息
     */
    async DescribeRocketMQVipInstanceDetail(req, cb) {
        return this.request("DescribeRocketMQVipInstanceDetail", req, cb);
    }
    /**
     * 获取角色列表
     */
    async DescribeRocketMQRoles(req, cb) {
        return this.request("DescribeRocketMQRoles", req, cb);
    }
    /**
     * 查询RabbitMQ用户列表
     */
    async DescribeRabbitMQUser(req, cb) {
        return this.request("DescribeRabbitMQUser", req, cb);
    }
    /**
     * 更新RocketMQ集群信息
     */
    async ModifyRocketMQCluster(req, cb) {
        return this.request("ModifyRocketMQCluster", req, cb);
    }
    /**
     * 更新集群信息
     */
    async ModifyCluster(req, cb) {
        return this.request("ModifyCluster", req, cb);
    }
    /**
     * 获取Pulsar专业版集群实例信息
     */
    async DescribePulsarProInstanceDetail(req, cb) {
        return this.request("DescribePulsarProInstanceDetail", req, cb);
    }
    /**
     * 修改cmq订阅属性
     */
    async ModifyCmqSubscriptionAttribute(req, cb) {
        return this.request("ModifyCmqSubscriptionAttribute", req, cb);
    }
    /**
     * 用于获取RocketMQ消费组订阅关系数据
     */
    async DescribeRocketMQSubscriptions(req, cb) {
        return this.request("DescribeRocketMQSubscriptions", req, cb);
    }
    /**
     * 创建一个主题的订阅关系
     */
    async CreateSubscription(req, cb) {
        return this.request("CreateSubscription", req, cb);
    }
    /**
     * 获取单个RocketMQ集群信息
     */
    async DescribeRocketMQCluster(req, cb) {
        return this.request("DescribeRocketMQCluster", req, cb);
    }
    /**
     * 删除环境角色授权。
     */
    async DeleteEnvironmentRoles(req, cb) {
        return this.request("DeleteEnvironmentRoles", req, cb);
    }
    /**
     * 根据时间戳进行消息回溯，精确到毫秒
     */
    async ResetMsgSubOffsetByTimestamp(req, cb) {
        return this.request("ResetMsgSubOffsetByTimestamp", req, cb);
    }
    /**
     * 创建RabbitMQ路由关系
     */
    async CreateRabbitMQBinding(req, cb) {
        return this.request("CreateRabbitMQBinding", req, cb);
    }
    /**
     * 查询消息轨迹
     */
    async DescribeMsgTrace(req, cb) {
        return this.request("DescribeMsgTrace", req, cb);
    }
    /**
     * 角色修改
     */
    async ModifyRocketMQRole(req, cb) {
        return this.request("ModifyRocketMQRole", req, cb);
    }
    /**
     * RabbitMQ专享版查询节点列表
     */
    async DescribeRabbitMQNodeList(req, cb) {
        return this.request("DescribeRabbitMQNodeList", req, cb);
    }
    /**
     * 获取租户VPC绑定关系
     */
    async DescribeBindVpcs(req, cb) {
        return this.request("DescribeBindVpcs", req, cb);
    }
    /**
     * 删除RocketMQ主题
     */
    async DeleteRocketMQTopic(req, cb) {
        return this.request("DeleteRocketMQTopic", req, cb);
    }
    /**
     * 重发RocketMQ死信消息
     */
    async RetryRocketMQDlqMessage(req, cb) {
        return this.request("RetryRocketMQDlqMessage", req, cb);
    }
    /**
     * 用于查询RocketMQ平滑迁移任务列表
     */
    async DescribeRocketMQSmoothMigrationTaskList(req, cb) {
        return this.request("DescribeRocketMQSmoothMigrationTaskList", req, cb);
    }
    /**
     * 导出RocketMQ消息详情
     */
    async ExportRocketMQMessageDetail(req, cb) {
        return this.request("ExportRocketMQMessageDetail", req, cb);
    }
    /**
     * 查询RabbitMQ队列列表
     */
    async DescribeRabbitMQQueues(req, cb) {
        return this.request("DescribeRabbitMQQueues", req, cb);
    }
    /**
     * 修改cmq队列属性
     */
    async ModifyCmqQueueAttribute(req, cb) {
        return this.request("ModifyCmqQueueAttribute", req, cb);
    }
    /**
     * 本API用于修改RocketMQ专享实例配置，可以支持实例规格、节点数和存储的升配和实例规格的降配。本API发起订单并成功支付后进入实例配置变更的流程，可通过DescribeRocketMQVipInstances查询实例是否已变更完成。
     */
    async ModifyRocketMQInstanceSpec(req, cb) {
        return this.request("ModifyRocketMQInstanceSpec", req, cb);
    }
    /**
     * 输入迁移任务id和要导入的Group，导入后台
     */
    async ImportRocketMQConsumerGroups(req, cb) {
        return this.request("ImportRocketMQConsumerGroups", req, cb);
    }
    /**
     * 查询用户已购的RocketMQ专享实例列表
     */
    async DescribeRocketMQVipInstances(req, cb) {
        return this.request("DescribeRocketMQVipInstances", req, cb);
    }
    /**
     * Rocketmq消费验证
     */
    async VerifyRocketMQConsume(req, cb) {
        return this.request("VerifyRocketMQConsume", req, cb);
    }
    /**
     * 修改RabbitMQ的权限
     */
    async ModifyRabbitMQPermission(req, cb) {
        return this.request("ModifyRabbitMQPermission", req, cb);
    }
    /**
     * 历史原因，该接口位于tdmq-manager，目前rabbitmq产品没有使用该接口，当前使用的是DescribeRabbitMQVipInstances。不过从调用链上看，线网还有请求流程，所以走预下线流程。

获取amqp集群列表
     */
    async DescribeAMQPClusters(req, cb) {
        return this.request("DescribeAMQPClusters", req, cb);
    }
    /**
     * 创建RabbitMQ专享版实例
     */
    async CreateRabbitMQVipInstance(req, cb) {
        return this.request("CreateRabbitMQVipInstance", req, cb);
    }
    /**
     * 查询消息轨迹
     */
    async DescribeMqMsgTrace(req, cb) {
        return this.request("DescribeMqMsgTrace", req, cb);
    }
    /**
     * 获取RocketMQ消费组列表
     */
    async DescribeRocketMQGroups(req, cb) {
        return this.request("DescribeRocketMQGroups", req, cb);
    }
    /**
     * 创建RocketMQ主题
     */
    async CreateRocketMQTopic(req, cb) {
        return this.request("CreateRocketMQTopic", req, cb);
    }
    /**
     * 获取命名空间角色列表
     */
    async DescribeRocketMQEnvironmentRoles(req, cb) {
        return this.request("DescribeRocketMQEnvironmentRoles", req, cb);
    }
    /**
     * 删除RocketMQ集群
     */
    async DeleteRocketMQCluster(req, cb) {
        return this.request("DeleteRocketMQCluster", req, cb);
    }
    /**
     * 删除RabbitMQ的用户
     */
    async DeleteRabbitMQUser(req, cb) {
        return this.request("DeleteRabbitMQUser", req, cb);
    }
    /**
     * 创建专业集群——预付费，仅通过api调用
     */
    async CreateProCluster(req, cb) {
        return this.request("CreateProCluster", req, cb);
    }
    /**
     * 查询RabbitMQ vhost列表
     */
    async DescribeRabbitMQVirtualHost(req, cb) {
        return this.request("DescribeRabbitMQVirtualHost", req, cb);
    }
    /**
     * 当前 ReceiveMessage 接口只支持 Partitioned 类型的 Topic。该接口用于接收发送到指定 Partitioned Topic 中的消息，当 Partitioned Topic 中没有消息但还去尝试调用该接口时，会抛出 ReceiveTimeout 的异常。

如何使用 BatchReceivePolicy：

BatchReceive 接口提供了如下三个参数：

● MaxNumMessages: 即每次使用 BatchReceive 的时候，最多一次Receive接口返回多少条消息。
● MaxNumBytes：即每次使用 BatchReceive 的时候，最多一次Receive接口返回多大内容的消息，单位是：bytes。
● Timeout：即每次使用 BatchReceive 的时候，最多一次 Receive 接口的超时时间是多久，单位是：MS。

默认如果上述三个参数都不指定，即关闭 BatchReceive 的特性。如果三个参数中的任意一个参数指定的数值大于 0，即开启 BatchReceive。BatchReceive 的结束条件为到达上述三个参数中任意一个指定的阈值。

注意：MaxNumMessages 和 MaxNumBytes 每一次接收的最大消息同时受限于 ReceiveQueueSize 的大小，如果 ReceiveQueueSize 的大小设置为 5，MaxNumMessages 设置为10，那么一次 BatchReceive 接收的最多的消息是 5条，而不是10条。



BatchReceivePolicy 的接口会一次性返回多条消息：

1. 多条消息的内容之间使用特殊字符 '###' 来进行分割，业务侧接收到消息之后，可以利用不同语言提供的 Split 工具分割不同的消息。
2. 多条消息的 MessageID 之间使用特殊字符 '###' 来进行分割，业务侧接收到消息之后，可以利用不同语言提供的 Split 工具分割不同的消息。（用于在调用 AcknowledgeMessage 接口中填入所需要的 MessageID 字段信息）
     */
    async ReceiveMessage(req, cb) {
        return this.request("ReceiveMessage", req, cb);
    }
    /**
     * 删除RabbitMQ的vhost
     */
    async DeleteRabbitMQVirtualHost(req, cb) {
        return this.request("DeleteRabbitMQVirtualHost", req, cb);
    }
    /**
     * 发送cmq消息
     */
    async SendCmqMsg(req, cb) {
        return this.request("SendCmqMsg", req, cb);
    }
    /**
     * 用于获取RocketMQ平滑迁移任务详情
     */
    async DescribeRocketMQSmoothMigrationTask(req, cb) {
        return this.request("DescribeRocketMQSmoothMigrationTask", req, cb);
    }
    /**
     * 修改指定命名空间的属性值
     */
    async ModifyEnvironmentAttributes(req, cb) {
        return this.request("ModifyEnvironmentAttributes", req, cb);
    }
    /**
     * 获取角色列表
     */
    async DescribeRoles(req, cb) {
        return this.request("DescribeRoles", req, cb);
    }
    /**
     * 解绑cmq死信队列
     */
    async UnbindCmqDeadLetter(req, cb) {
        return this.request("UnbindCmqDeadLetter", req, cb);
    }
    /**
     * 修改RabbitMQ的用户
     */
    async ModifyRabbitMQUser(req, cb) {
        return this.request("ModifyRabbitMQUser", req, cb);
    }
    /**
     * 创建RocketMQ命名空间
     */
    async CreateRocketMQNamespace(req, cb) {
        return this.request("CreateRocketMQNamespace", req, cb);
    }
    /**
     * 消息详情
     */
    async DescribeMsg(req, cb) {
        return this.request("DescribeMsg", req, cb);
    }
    /**
     * 批量发送消息

注意：TDMQ 批量发送消息的接口是在 TDMQ-HTTP 的服务侧将消息打包为一个 Batch，然后将该 Batch 在服务内部当作一次 TCP 请求发送出去。所以在使用过程中，用户还是按照单条消息发送的逻辑，每一条消息是一个独立的 HTTP 的请求，在 TDMQ-HTTP 的服务内部，会将多个 HTTP 的请求聚合为一个 Batch 发送到服务端。即，批量发送消息在使用上与发送单条消息是一致的，batch 的聚合是在 TDMQ-HTTP 的服务内部完成的。
     */
    async SendBatchMessages(req, cb) {
        return this.request("SendBatchMessages", req, cb);
    }
    /**
     * 修改RabbitMQ专享版实例
     */
    async ModifyRabbitMQVipInstance(req, cb) {
        return this.request("ModifyRabbitMQVipInstance", req, cb);
    }
    /**
     * 创建环境角色授权
     */
    async CreateEnvironmentRole(req, cb) {
        return this.request("CreateEnvironmentRole", req, cb);
    }
    /**
     * 获取RocketMQ主题列表
     */
    async DescribeRocketMQTopics(req, cb) {
        return this.request("DescribeRocketMQTopics", req, cb);
    }
    /**
     * 修改环境角色授权。
     */
    async ModifyEnvironmentRole(req, cb) {
        return this.request("ModifyEnvironmentRole", req, cb);
    }
    /**
     * 消息队列TDMQ RabbitMQ 有一个存量旧接口没下线，目前实际上已经不在产品中使用：DescribeRabbitMQVirtualHostList，这个接口很久前已经被 DescribeRabbitMQVirtualHost 替换掉。已无用户在调用。

RabbitMQ专享版查询虚拟主机列表
     */
    async DescribeRabbitMQVirtualHostList(req, cb) {
        return this.request("DescribeRabbitMQVirtualHostList", req, cb);
    }
    /**
     * 获取RocketMQ集群列表
     */
    async DescribeRocketMQClusters(req, cb) {
        return this.request("DescribeRocketMQClusters", req, cb);
    }
    /**
     * 发送单条消息
不支持持久topic
     */
    async SendMessages(req, cb) {
        return this.request("SendMessages", req, cb);
    }
    /**
     * 修改主题备注和分区数
     */
    async ModifyTopic(req, cb) {
        return this.request("ModifyTopic", req, cb);
    }
    /**
     * 查询RabbitMQ路由关系列表
     */
    async DescribeRabbitMQBindings(req, cb) {
        return this.request("DescribeRabbitMQBindings", req, cb);
    }
    /**
     * 运营端获节点健康状态
     */
    async DescribeNodeHealthOpt(req, cb) {
        return this.request("DescribeNodeHealthOpt", req, cb);
    }
    /**
     * 创建角色
     */
    async CreateRole(req, cb) {
        return this.request("CreateRole", req, cb);
    }
    /**
     * 更新RocketMQ命名空间
     */
    async ModifyRocketMQNamespace(req, cb) {
        return this.request("ModifyRocketMQNamespace", req, cb);
    }
    /**
     * 消息查询
     */
    async DescribeTopicMsgs(req, cb) {
        return this.request("DescribeTopicMsgs", req, cb);
    }
    /**
     * 清空cmq消息队列中的消息
     */
    async ClearCmqQueue(req, cb) {
        return this.request("ClearCmqQueue", req, cb);
    }
    /**
     * 查询用户已购的Pulsar专业版实例列表
     */
    async DescribePulsarProInstances(req, cb) {
        return this.request("DescribePulsarProInstances", req, cb);
    }
    /**
     * 获取生产者信息列表
     */
    async DescribePublishers(req, cb) {
        return this.request("DescribePublishers", req, cb);
    }
    /**
     * 此接口用于创建一个RocketMQ集群
     */
    async CreateRocketMQCluster(req, cb) {
        return this.request("CreateRocketMQCluster", req, cb);
    }
    /**
     * 查询RabbitMQ队列详情
     */
    async DescribeRabbitMQQueueDetail(req, cb) {
        return this.request("DescribeRabbitMQQueueDetail", req, cb);
    }
    /**
     * rocketmq消息详情
     */
    async DescribeRocketMQMsg(req, cb) {
        return this.request("DescribeRocketMQMsg", req, cb);
    }
    /**
     * 获取环境下主题列表
     */
    async DescribeTopics(req, cb) {
        return this.request("DescribeTopics", req, cb);
    }
    /**
     * 获取命名空间角色列表
     */
    async DescribeEnvironmentRoles(req, cb) {
        return this.request("DescribeEnvironmentRoles", req, cb);
    }
    /**
     * 删除RabbitMQ专享版实例
     */
    async DeleteRabbitMQVipInstance(req, cb) {
        return this.request("DeleteRabbitMQVipInstance", req, cb);
    }
    /**
     * 发送cmq主题消息
     */
    async PublishCmqMsg(req, cb) {
        return this.request("PublishCmqMsg", req, cb);
    }
    /**
     * 获取用户绑定的专享集群列表
     */
    async DescribeBindClusters(req, cb) {
        return this.request("DescribeBindClusters", req, cb);
    }
    /**
     * 查询cmq队列详情
     */
    async DescribeCmqQueueDetail(req, cb) {
        return this.request("DescribeCmqQueueDetail", req, cb);
    }
    /**
     * 平滑迁移过程获取源集群group列表接口
     */
    async DescribeRocketMQSourceClusterGroupList(req, cb) {
        return this.request("DescribeRocketMQSourceClusterGroupList", req, cb);
    }
    /**
     * 此接口仅用于测试发生消息，不能作为现网正式生产使用
     */
    async SendMsg(req, cb) {
        return this.request("SendMsg", req, cb);
    }
    /**
     * 删除RocketMQ专享实例
     */
    async DeleteRocketMQVipInstance(req, cb) {
        return this.request("DeleteRocketMQVipInstance", req, cb);
    }
    /**
     * 发送RocketMQ消息
     */
    async SendRocketMQMessage(req, cb) {
        return this.request("SendRocketMQMessage", req, cb);
    }
    /**
     * 清空订阅者消息标签
     */
    async ClearCmqSubscriptionFilterTags(req, cb) {
        return this.request("ClearCmqSubscriptionFilterTags", req, cb);
    }
    /**
     * 删除cmq订阅
     */
    async DeleteCmqSubscribe(req, cb) {
        return this.request("DeleteCmqSubscribe", req, cb);
    }
    /**
     * 接口用于查询RocketMQ实例的公网接入信息
     */
    async DescribeRocketMQPublicAccessPoint(req, cb) {
        return this.request("DescribeRocketMQPublicAccessPoint", req, cb);
    }
    /**
     * 解绑RabbitMQ路由关系
     */
    async DeleteRabbitMQBinding(req, cb) {
        return this.request("DeleteRabbitMQBinding", req, cb);
    }
    /**
     * 角色修改
     */
    async ModifyRole(req, cb) {
        return this.request("ModifyRole", req, cb);
    }
    /**
     * 创建RocketMQ专享实例
     */
    async CreateRocketMQVipInstance(req, cb) {
        return this.request("CreateRocketMQVipInstance", req, cb);
    }
    /**
     * 删除环境角色授权。
     */
    async DeleteRocketMQEnvironmentRoles(req, cb) {
        return this.request("DeleteRocketMQEnvironmentRoles", req, cb);
    }
    /**
     * 获取某个租户的虚拟集群列表
     */
    async DescribeAllTenants(req, cb) {
        return this.request("DescribeAllTenants", req, cb);
    }
    /**
     * 运营端获取命名空间bundle列表
     */
    async DescribeNamespaceBundlesOpt(req, cb) {
        return this.request("DescribeNamespaceBundlesOpt", req, cb);
    }
    /**
     * 删除订阅关系
     */
    async DeleteSubscriptions(req, cb) {
        return this.request("DeleteSubscriptions", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249488, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tds = void 0;
const v20220801_1 = require("./v20220801");
exports.tds = {
    v20220801: v20220801_1.v20220801,
};

}, function(modId) { var map = {"./v20220801":1738984249489}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249489, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220801 = void 0;
const Models = require("./tds_models");
const tds_client_1 = require("./tds_client");
exports.v20220801 = {
    Client: tds_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tds_models":1738984249490,"./tds_client":1738984249491}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249490, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249491, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tds client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tds.tencentcloudapi.com", "2022-08-01", clientConfig);
    }
    /**
     * 查询设备风险
     */
    async DescribeFraudBase(req, cb) {
        return this.request("DescribeFraudBase", req, cb);
    }
    /**
     * 查询设备标识
     */
    async DescribeTrustedID(req, cb) {
        return this.request("DescribeTrustedID", req, cb);
    }
    /**
     * 查询设备标识及风险
     */
    async DescribeFraudPremium(req, cb) {
        return this.request("DescribeFraudPremium", req, cb);
    }
    /**
     * 查询设备标识及风险（旗舰版）
     */
    async DescribeFraudUltimate(req, cb) {
        return this.request("DescribeFraudUltimate", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249492, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tem = void 0;
const v20201221_1 = require("./v20201221");
const v20210701_1 = require("./v20210701");
exports.tem = {
    v20201221: v20201221_1.v20201221,
    v20210701: v20210701_1.v20210701,
};

}, function(modId) { var map = {"./v20201221":1738984249493,"./v20210701":1738984249496}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249493, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201221 = void 0;
const Models = require("./tem_models");
const tem_client_1 = require("./tem_client");
exports.v20201221 = {
    Client: tem_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tem_models":1738984249494,"./tem_client":1738984249495}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249494, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249495, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tem client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tem.tencentcloudapi.com", "2020-12-21", clientConfig);
    }
    /**
     * 编辑环境
     */
    async ModifyNamespace(req, cb) {
        return this.request("ModifyNamespace", req, cb);
    }
    /**
     * 创建环境
     */
    async CreateNamespace(req, cb) {
        return this.request("CreateNamespace", req, cb);
    }
    /**
     * 创建或者更新 Ingress 规则
     */
    async ModifyIngress(req, cb) {
        return this.request("ModifyIngress", req, cb);
    }
    /**
     * 生成包预签名下载链接
     */
    async GenerateDownloadUrl(req, cb) {
        return this.request("GenerateDownloadUrl", req, cb);
    }
    /**
     * 生成Cos临时秘钥
     */
    async CreateCosToken(req, cb) {
        return this.request("CreateCosToken", req, cb);
    }
    /**
     * 查询 Ingress 规则
     */
    async DescribeIngress(req, cb) {
        return this.request("DescribeIngress", req, cb);
    }
    /**
     * 生成Cos临时秘钥
     */
    async CreateCosTokenV2(req, cb) {
        return this.request("CreateCosTokenV2", req, cb);
    }
    /**
     * 服务部署
     */
    async DeployServiceV2(req, cb) {
        return this.request("DeployServiceV2", req, cb);
    }
    /**
     * 创建服务
     */
    async CreateServiceV2(req, cb) {
        return this.request("CreateServiceV2", req, cb);
    }
    /**
     * 查询服务关联的 Ingress 规则列表
     */
    async DescribeRelatedIngresses(req, cb) {
        return this.request("DescribeRelatedIngresses", req, cb);
    }
    /**
     * 修改服务基本信息
     */
    async ModifyServiceInfo(req, cb) {
        return this.request("ModifyServiceInfo", req, cb);
    }
    /**
     * 重启实例
     */
    async RestartServiceRunPod(req, cb) {
        return this.request("RestartServiceRunPod", req, cb);
    }
    /**
     * 绑定云资源
     */
    async CreateResource(req, cb) {
        return this.request("CreateResource", req, cb);
    }
    /**
     * 获取服务下面运行pod列表
     */
    async DescribeServiceRunPodListV2(req, cb) {
        return this.request("DescribeServiceRunPodListV2", req, cb);
    }
    /**
     * 查询 Ingress 规则列表
     */
    async DescribeIngresses(req, cb) {
        return this.request("DescribeIngresses", req, cb);
    }
    /**
     * 获取租户环境列表
     */
    async DescribeNamespaces(req, cb) {
        return this.request("DescribeNamespaces", req, cb);
    }
    /**
     * 删除 Ingress 规则
     */
    async DeleteIngress(req, cb) {
        return this.request("DeleteIngress", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249496, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210701 = void 0;
const Models = require("./tem_models");
const tem_client_1 = require("./tem_client");
exports.v20210701 = {
    Client: tem_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tem_models":1738984249497,"./tem_client":1738984249498}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249497, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249498, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tem client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tem.tencentcloudapi.com", "2021-07-01", clientConfig);
    }
    /**
     * 编辑配置
     */
    async ModifyConfigData(req, cb) {
        return this.request("ModifyConfigData", req, cb);
    }
    /**
     * 单环境下所有应用状态查看
     */
    async DescribeApplicationsStatus(req, cb) {
        return this.request("DescribeApplicationsStatus", req, cb);
    }
    /**
     * 查询应用访问方式列表
     */
    async DescribeApplicationServiceList(req, cb) {
        return this.request("DescribeApplicationServiceList", req, cb);
    }
    /**
     * 查询分页的日志收集配置列表
     */
    async DescribePagedLogConfigList(req, cb) {
        return this.request("DescribePagedLogConfigList", req, cb);
    }
    /**
     * 此接口没有被使用了

创建或者更新 Ingress 规则
     */
    async ModifyIngress(req, cb) {
        return this.request("ModifyIngress", req, cb);
    }
    /**
     * 启用应用弹性策略组合
     */
    async EnableApplicationAutoscaler(req, cb) {
        return this.request("EnableApplicationAutoscaler", req, cb);
    }
    /**
     * 修改应用实例数量
     */
    async ModifyApplicationReplicas(req, cb) {
        return this.request("ModifyApplicationReplicas", req, cb);
    }
    /**
     * 创建弹性伸缩策略组合
     */
    async CreateApplicationAutoscaler(req, cb) {
        return this.request("CreateApplicationAutoscaler", req, cb);
    }
    /**
     * 重启应用实例
     */
    async RestartApplicationPod(req, cb) {
        return this.request("RestartApplicationPod", req, cb);
    }
    /**
     * 编辑日志收集配置
     */
    async ModifyLogConfig(req, cb) {
        return this.request("ModifyLogConfig", req, cb);
    }
    /**
     * 服务删除
  - 停止当前运行服务
  - 删除服务相关资源
  - 删除服务
     */
    async DeleteApplication(req, cb) {
        return this.request("DeleteApplication", req, cb);
    }
    /**
     * 获取环境状态
     */
    async DescribeEnvironmentStatus(req, cb) {
        return this.request("DescribeEnvironmentStatus", req, cb);
    }
    /**
     * 开始下一批次发布
     */
    async ResumeDeployApplication(req, cb) {
        return this.request("ResumeDeployApplication", req, cb);
    }
    /**
     * 删除 Ingress 规则
     */
    async DeleteIngress(req, cb) {
        return this.request("DeleteIngress", req, cb);
    }
    /**
     * 应用部署
     */
    async DeployApplication(req, cb) {
        return this.request("DeployApplication", req, cb);
    }
    /**
     * 修改弹性伸缩策略组合
     */
    async ModifyApplicationAutoscaler(req, cb) {
        return this.request("ModifyApplicationAutoscaler", req, cb);
    }
    /**
     * 获取分批发布详情
     */
    async DescribeDeployApplicationDetail(req, cb) {
        return this.request("DescribeDeployApplicationDetail", req, cb);
    }
    /**
     * 修改服务访问方式列表
     */
    async ModifyApplicationService(req, cb) {
        return this.request("ModifyApplicationService", req, cb);
    }
    /**
     * 编辑环境
     */
    async ModifyEnvironment(req, cb) {
        return this.request("ModifyEnvironment", req, cb);
    }
    /**
     * 获取环境基础信息
     */
    async DescribeEnvironment(req, cb) {
        return this.request("DescribeEnvironment", req, cb);
    }
    /**
     * 查询日志收集配置详情
     */
    async DescribeLogConfig(req, cb) {
        return this.request("DescribeLogConfig", req, cb);
    }
    /**
     * 服务停止
     */
    async StopApplication(req, cb) {
        return this.request("StopApplication", req, cb);
    }
    /**
     * 创建日志收集配置
     */
    async CreateLogConfig(req, cb) {
        return this.request("CreateLogConfig", req, cb);
    }
    /**
     * 新增访问方式
     */
    async CreateApplicationService(req, cb) {
        return this.request("CreateApplicationService", req, cb);
    }
    /**
     * 服务基本信息查看
     */
    async DescribeApplicationInfo(req, cb) {
        return this.request("DescribeApplicationInfo", req, cb);
    }
    /**
     * 创建配置
     */
    async CreateConfigData(req, cb) {
        return this.request("CreateConfigData", req, cb);
    }
    /**
     * 获取应用实例列表
     */
    async DescribeApplicationPods(req, cb) {
        return this.request("DescribeApplicationPods", req, cb);
    }
    /**
     * 删除应用弹性策略组合
     */
    async DeleteApplicationAutoscaler(req, cb) {
        return this.request("DeleteApplicationAutoscaler", req, cb);
    }
    /**
     * 修改应用基本信息
     */
    async ModifyApplicationInfo(req, cb) {
        return this.request("ModifyApplicationInfo", req, cb);
    }
    /**
     * 销毁配置
     */
    async DestroyConfigData(req, cb) {
        return this.request("DestroyConfigData", req, cb);
    }
    /**
     * 获取环境列表
     */
    async DescribeEnvironments(req, cb) {
        return this.request("DescribeEnvironments", req, cb);
    }
    /**
     * 生成Cos临时密钥
     */
    async CreateCosToken(req, cb) {
        return this.request("CreateCosToken", req, cb);
    }
    /**
     * 查询 Ingress 规则
     */
    async DescribeIngress(req, cb) {
        return this.request("DescribeIngress", req, cb);
    }
    /**
     * 删除一条访问方式
     */
    async DeleteApplicationService(req, cb) {
        return this.request("DeleteApplicationService", req, cb);
    }
    /**
     * 生成应用程序包预签名下载链接
     */
    async GenerateApplicationPackageDownloadUrl(req, cb) {
        return this.request("GenerateApplicationPackageDownloadUrl", req, cb);
    }
    /**
     * 创建环境
     */
    async CreateEnvironment(req, cb) {
        return this.request("CreateEnvironment", req, cb);
    }
    /**
     * 关闭应用弹性策略组合
     */
    async DisableApplicationAutoscaler(req, cb) {
        return this.request("DisableApplicationAutoscaler", req, cb);
    }
    /**
     * 查询 Ingress 规则列表
     */
    async DescribeIngresses(req, cb) {
        return this.request("DescribeIngresses", req, cb);
    }
    /**
     * 创建应用
     */
    async CreateApplication(req, cb) {
        return this.request("CreateApplication", req, cb);
    }
    /**
     * 服务重启
     */
    async RestartApplication(req, cb) {
        return this.request("RestartApplication", req, cb);
    }
    /**
     * 更新应用部署版本
     */
    async RollingUpdateApplicationByVersion(req, cb) {
        return this.request("RollingUpdateApplicationByVersion", req, cb);
    }
    /**
     * 获取运行服务列表
     */
    async DescribeApplications(req, cb) {
        return this.request("DescribeApplications", req, cb);
    }
    /**
     * 回滚分批发布
     */
    async RevertDeployApplication(req, cb) {
        return this.request("RevertDeployApplication", req, cb);
    }
    /**
     * 销毁日志收集配置
     */
    async DestroyLogConfig(req, cb) {
        return this.request("DestroyLogConfig", req, cb);
    }
    /**
     * 查询应用关联的 Ingress 规则列表
     */
    async DescribeRelatedIngresses(req, cb) {
        return this.request("DescribeRelatedIngresses", req, cb);
    }
    /**
     * 查询配置详情
     */
    async DescribeConfigData(req, cb) {
        return this.request("DescribeConfigData", req, cb);
    }
    /**
     * 绑定云资源
     */
    async CreateResource(req, cb) {
        return this.request("CreateResource", req, cb);
    }
    /**
     * 获取应用弹性策略组合
     */
    async DescribeApplicationAutoscalerList(req, cb) {
        return this.request("DescribeApplicationAutoscalerList", req, cb);
    }
    /**
     * 销毁环境
     */
    async DestroyEnvironment(req, cb) {
        return this.request("DestroyEnvironment", req, cb);
    }
    /**
     * 查询配置列表
     */
    async DescribeConfigDataList(req, cb) {
        return this.request("DescribeConfigDataList", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249499, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.teo = void 0;
const v20220901_1 = require("./v20220901");
const v20220106_1 = require("./v20220106");
exports.teo = {
    v20220901: v20220901_1.v20220901,
    v20220106: v20220106_1.v20220106,
};

}, function(modId) { var map = {"./v20220901":1738984249500,"./v20220106":1738984249503}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249500, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220901 = void 0;
const Models = require("./teo_models");
const teo_client_1 = require("./teo_client");
exports.v20220901 = {
    Client: teo_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./teo_models":1738984249501,"./teo_client":1738984249502}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249501, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249502, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * teo client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("teo.tencentcloudapi.com", "2022-09-01", clientConfig);
    }
    /**
     * 当您需要停止 Edgeone 套餐的计费，可以通过该接口销毁计费套餐。
> 销毁计费套餐需要满足以下条件：
    1.套餐已过期（企业版套餐除外）；
    2.套餐下所有站点均已关闭或删除。

> 站点状态可以通过 [查询站点列表](https://cloud.tencent.com/document/product/1552/80713) 接口进行查询
停用站点可以通过 [切换站点状态](https://cloud.tencent.com/document/product/1552/80707) 接口将站点切换至关闭状态
删除站点可以通过 [删除站点](https://cloud.tencent.com/document/product/1552/80717) 接口将站点删除
     */
    async DestroyPlan(req, cb) {
        return this.request("DestroyPlan", req, cb);
    }
    /**
     * 在创建完站点后，并且站点为 NS 模式接入时，您可以通过本接口创建 DNS 记录。
     */
    async CreateDnsRecord(req, cb) {
        return this.request("CreateDnsRecord", req, cb);
    }
    /**
     * 导出站点配置接口，本接口支持用户根据需要的配置项进行配置导出，导出的配置用于导入站点配置接口（ImportZoneConfig）进行配置导入。该功能仅支持标准版和企业版套餐站点使用。
     */
    async ExportZoneConfig(req, cb) {
        return this.request("ExportZoneConfig", req, cb);
    }
    /**
     * 批量查询内容标识符，可以根据 ID、描述、状态或者标签过滤。按照状态查询被删除的内容标识符仅保留三个月。该功能仅白名单开放。
     */
    async DescribeContentIdentifiers(req, cb) {
        return this.request("DescribeContentIdentifiers", req, cb);
    }
    /**
     * 删除边缘函数，删除后函数无法恢复，关联的触发规则会一并删除。
     */
    async DeleteFunction(req, cb) {
        return this.request("DeleteFunction", req, cb);
    }
    /**
     * 当源站资源更新，但节点缓存 TTL 未过期时，用户仍会访问到旧的资源，此时可以通过该接口实现节点资源更新。触发更新的方法有以下两种：<li>直接删除：不做任何校验，直接删除节点缓存，用户请求时触发回源拉取；</li><li>标记过期：将节点资源置为过期，用户请求时触发回源校验，即发送带有 If-None-Match 和 If-Modified-Since 头部的 HTTP 条件请求。若源站响应 200，则节点会回源拉取新的资源并更新缓存；若源站响应 304，则节点不会更新缓存；</li>

清除缓存任务详情请查看[清除缓存](https://cloud.tencent.com/document/product/1552/70759)。
     */
    async CreatePurgeTask(req, cb) {
        return this.request("CreatePurgeTask", req, cb);
    }
    /**
     * 本接口（DownloadL4Logs）用于下载四层离线日志。
     */
    async DownloadL4Logs(req, cb) {
        return this.request("DownloadL4Logs", req, cb);
    }
    /**
     * DescribePrefetchTasks 用于查询预热任务提交历史记录及执行进度，通过 CreatePrefetchTasks 接口提交的任务可通过此接口进行查询。
     */
    async DescribePrefetchTasks(req, cb) {
        return this.request("DescribePrefetchTasks", req, cb);
    }
    /**
     * 查询内容管理接口配额
     */
    async DescribeContentQuota(req, cb) {
        return this.request("DescribeContentQuota", req, cb);
    }
    /**
     * 查询站点的验证信息。
     */
    async DescribeIdentifications(req, cb) {
        return this.request("DescribeIdentifications", req, cb);
    }
    /**
     * 通过本接口查询实时日志投递任务列表。
     */
    async DescribeRealtimeLogDeliveryTasks(req, cb) {
        return this.request("DescribeRealtimeLogDeliveryTasks", req, cb);
    }
    /**
     * 在 CNAME 接入模式下，您需要对站点或者域名的归属权进行验证，可以通过本接口触发验证。若站点通过归属权验证后，后续添加域名无需再验证。详情参考 [站点/域名归属权验证](https://cloud.tencent.com/document/product/1552/70789)。

在 NS 接入模式下，您也可以通过本接口来查询 NS 服务器是否切换成功，详情参考 [修改 DNS 服务器](https://cloud.tencent.com/document/product/1552/90452)。
     */
    async VerifyOwnership(req, cb) {
        return this.request("VerifyOwnership", req, cb);
    }
    /**
     * 创建边缘函数的触发规则。
     */
    async CreateFunctionRule(req, cb) {
        return this.request("CreateFunctionRule", req, cb);
    }
    /**
     * 删除边缘函数触发规则。
     */
    async DeleteFunctionRules(req, cb) {
        return this.request("DeleteFunctionRules", req, cb);
    }
    /**
     * 用于验证站点所有权。
     */
    async IdentifyZone(req, cb) {
        return this.request("IdentifyZone", req, cb);
    }
    /**
     * 查询默认证书列表
     */
    async DescribeDefaultCertificates(req, cb) {
        return this.request("DescribeDefaultCertificates", req, cb);
    }
    /**
     * 本接口用于修改[规则引擎](https://cloud.tencent.com/document/product/1552/70901)中的规则，单次仅支持修改单条规则。
     */
    async ModifyL7AccRule(req, cb) {
        return this.request("ModifyL7AccRule", req, cb);
    }
    /**
     * 您可以通过本接口查看站点下的域名信息，包括加速域名、源站以及域名状态等信息。您可以查看站点下全部域名的信息，也可以指定过滤条件查询对应的域名信息。
     */
    async DescribeAccelerationDomains(req, cb) {
        return this.request("DescribeAccelerationDomains", req, cb);
    }
    /**
     * 查询边缘函数运行环境，包括环境变量。
     */
    async DescribeFunctionRuntimeEnvironment(req, cb) {
        return this.request("DescribeFunctionRuntimeEnvironment", req, cb);
    }
    /**
     * 修改源站组配置，新提交的源站记录将会覆盖原有源站组中的源站记录。
     */
    async ModifyOriginGroup(req, cb) {
        return this.request("ModifyOriginGroup", req, cb);
    }
    /**
     * 本接口为旧版，如需调用请尽快迁移至新版，详情请参考 [删除四层代理实例
](https://cloud.tencent.com/document/product/1552/103415) 。
     */
    async DeleteApplicationProxy(req, cb) {
        return this.request("DeleteApplicationProxy", req, cb);
    }
    /**
     * 本接口用于修改[站点加速](https://cloud.tencent.com/document/product/1552/96193)全局配置。
     */
    async ModifyL7AccSetting(req, cb) {
        return this.request("ModifyL7AccSetting", req, cb);
    }
    /**
     * 用于启用/停用四层代理实例。
     */
    async ModifyL4ProxyStatus(req, cb) {
        return this.request("ModifyL4ProxyStatus", req, cb);
    }
    /**
     * 本接口（DownloadL7Logs）下载七层离线日志。
     */
    async DownloadL7Logs(req, cb) {
        return this.request("DownloadL7Logs", req, cb);
    }
    /**
     * 在版本管理模式下，用于查询环境信息，可获取环境 ID、类型、当前生效版本等。版本管理功能内测中，当前仅白名单开放。
     */
    async DescribeEnvironments(req, cb) {
        return this.request("DescribeEnvironments", req, cb);
    }
    /**
     * 当您的套餐绑定的站点数，或配置的 Web 防护 - 自定义规则 - 精准匹配策略的规则数，或 Web 防护 - 速率限制 - 精准速率限制模块的规则数达到套餐允许的配额上限，可以通过该接口增购对应配额。
> 该接口该仅支持企业版套餐。
     */
    async IncreasePlanQuota(req, cb) {
        return this.request("IncreasePlanQuota", req, cb);
    }
    /**
     * 本接口为旧版，如需调用请尽快迁移至新版，详情请参考 [删除四层代理转发规则](https://cloud.tencent.com/document/product/1552/103414) 。
     */
    async DeleteApplicationProxyRule(req, cb) {
        return this.request("DeleteApplicationProxyRule", req, cb);
    }
    /**
     * 校验域名 CNAME 状态
     */
    async CheckCnameStatus(req, cb) {
        return this.request("CheckCnameStatus", req, cb);
    }
    /**
     * 修改站点信息。
     */
    async ModifyZone(req, cb) {
        return this.request("ModifyZone", req, cb);
    }
    /**
     * 创建预热任务
     */
    async CreatePrefetchTask(req, cb) {
        return this.request("CreatePrefetchTask", req, cb);
    }
    /**
     * 删除别称域名。
     */
    async DeleteAliasDomain(req, cb) {
        return this.request("DeleteAliasDomain", req, cb);
    }
    /**
     * 本接口（DescribeOverviewL7Data）用于查询七层监控类时序流量数据。此接口待废弃，请使用 <a href="https://cloud.tencent.com/document/product/1552/80648">DescribeTimingL7AnalysisData</a> 接口。
     */
    async DescribeOverviewL7Data(req, cb) {
        return this.request("DescribeOverviewL7Data", req, cb);
    }
    /**
     * 在创建完站点之后，您可以通过本接口创建加速域名。

CNAME 模式接入时，若您未完成站点归属权校验，本接口将为您返回域名归属权验证信息，您可以单独对域名进行归属权验证，详情参考 [站点/域名归属权验证](https://cloud.tencent.com/document/product/1552/70789)。
     */
    async CreateAccelerationDomain(req, cb) {
        return this.request("CreateAccelerationDomain", req, cb);
    }
    /**
     * 在版本管理模式下，用于获取版本的详细信息，包括版本 ID、描述、状态、创建时间、所属配置组信息以及版本配置文件的内容。版本管理功能内测中，当前仅白名单开放。
     */
    async DescribeConfigGroupVersionDetail(req, cb) {
        return this.request("DescribeConfigGroupVersionDetail", req, cb);
    }
    /**
     * 本接口用于查询[规则引擎](https://cloud.tencent.com/document/product/1552/70901)的规则列表。
     */
    async DescribeL7AccRules(req, cb) {
        return this.request("DescribeL7AccRules", req, cb);
    }
    /**
     * 操作安全策略模板，支持将域名绑定或换绑到指定的策略模板，或者从指定的策略模板解绑。
     */
    async BindSecurityTemplateToEntity(req, cb) {
        return this.request("BindSecurityTemplateToEntity", req, cb);
    }
    /**
     * 本接口为旧版，如需调用请尽快迁移至新版，详情请参考 [修改四层代理转发规则状态
](https://cloud.tencent.com/document/product/1552/103409) 。
     */
    async ModifyApplicationProxyRuleStatus(req, cb) {
        return this.request("ModifyApplicationProxyRuleStatus", req, cb);
    }
    /**
     * 为未购买套餐的站点购买套餐
     */
    async CreatePlanForZone(req, cb) {
        return this.request("CreatePlanForZone", req, cb);
    }
    /**
     * 删除源站组，若源站组仍然被服务（例如：四层代理，域名服务，负载均衡，规则引起）引用，将不允许删除。
     */
    async DeleteOriginGroup(req, cb) {
        return this.request("DeleteOriginGroup", req, cb);
    }
    /**
     * 查询负载均衡实例列表。负载均衡功能内测中，如您需要使用请 [联系我们](https://cloud.tencent.com/online-service)。
     */
    async DescribeLoadBalancerList(req, cb) {
        return this.request("DescribeLoadBalancerList", req, cb);
    }
    /**
     * 创建安全 IP 组
     */
    async CreateSecurityIPGroup(req, cb) {
        return this.request("CreateSecurityIPGroup", req, cb);
    }
    /**
     * 该接口可用于查询 IP 是否为 EdgeOne IP。
     */
    async DescribeIPRegion(req, cb) {
        return this.request("DescribeIPRegion", req, cb);
    }
    /**
     * 修改负载均衡实例配置。负载均衡功能内测中，如您需要使用请 [联系我们](https://cloud.tencent.com/online-service)。
     */
    async ModifyLoadBalancer(req, cb) {
        return this.request("ModifyLoadBalancer", req, cb);
    }
    /**
     * 批量删除加速域名
     */
    async DeleteAccelerationDomains(req, cb) {
        return this.request("DeleteAccelerationDomains", req, cb);
    }
    /**
     * 通过本接口创建实时日志投递任务。本接口有如下限制：
同一个实体（七层域名或者四层代理实例）在同种数据投递类型（LogType）和数据投递区域（Area）的组合下，只能被添加到一个实时日志投递任务中。建议先通过 [DescribeRealtimeLogDeliveryTasks](https://cloud.tencent.com/document/product/1552/104110)  接口根据实体查询实时日志投递任务列表，检查实体是否已经被添加到另一实时日志投递任务中。
     */
    async CreateRealtimeLogDeliveryTask(req, cb) {
        return this.request("CreateRealtimeLogDeliveryTask", req, cb);
    }
    /**
     * 用于修改四层代理实例的配置。
     */
    async ModifyL4Proxy(req, cb) {
        return this.request("ModifyL4Proxy", req, cb);
    }
    /**
     * 用于修改四层代理转发规则，支持单条或者批量修改。
     */
    async ModifyL4ProxyRules(req, cb) {
        return this.request("ModifyL4ProxyRules", req, cb);
    }
    /**
     * 您可以通过本接口批量修改 DNS 记录。
     */
    async ModifyDnsRecords(req, cb) {
        return this.request("ModifyDnsRecords", req, cb);
    }
    /**
     * 本接口用于查询七层缓存分析时序类流量数据。此接口待废弃，请使用 <a href="https://cloud.tencent.com/document/product/1552/80648">DescribeTimingL7AnalysisData</a> 接口。
     */
    async DescribeTimingL7CacheData(req, cb) {
        return this.request("DescribeTimingL7CacheData", req, cb);
    }
    /**
     * 在版本管理模式下，用于查询指定配置组的版本列表。版本管理功能内测中，当前仅白名单开放。
     */
    async DescribeConfigGroupVersions(req, cb) {
        return this.request("DescribeConfigGroupVersions", req, cb);
    }
    /**
     * 本接口为旧版，EdgeOne 已对规则引擎相关接口全面升级，详情请参考 [ModifyL7AccSetting](https://cloud.tencent.com/document/product/1552/115817)。
     */
    async ModifyZoneSetting(req, cb) {
        return this.request("ModifyZoneSetting", req, cb);
    }
    /**
     * 创建别称域名。
     */
    async CreateAliasDomain(req, cb) {
        return this.request("CreateAliasDomain", req, cb);
    }
    /**
     * 修改别称域名状态。
     */
    async ModifyAliasDomainStatus(req, cb) {
        return this.request("ModifyAliasDomainStatus", req, cb);
    }
    /**
     * 查询安全 IP 组的配置信息，包括安全 IP 组的 ID、名称和内容。
     */
    async DescribeSecurityIPGroup(req, cb) {
        return this.request("DescribeSecurityIPGroup", req, cb);
    }
    /**
     * 用于创建四层代理实例规则，支持单条或者批量创建。
     */
    async CreateL4ProxyRules(req, cb) {
        return this.request("CreateL4ProxyRules", req, cb);
    }
    /**
     * 本接口（DescribeTimingL4Data）用于查询四层时序流量数据列表。
     */
    async DescribeTimingL4Data(req, cb) {
        return this.request("DescribeTimingL4Data", req, cb);
    }
    /**
     * 本接口用于查询七层缓存分析 topN 数据。此接口待废弃，请使用 <a href="https://cloud.tencent.com/document/product/1552/80646"> DescribeTopL7AnalysisData</a> 接口。
     */
    async DescribeTopL7CacheData(req, cb) {
        return this.request("DescribeTopL7CacheData", req, cb);
    }
    /**
     * 本接口为旧版，EdgeOne 已对规则引擎相关接口全面升级，详情请参考 [ModifyL7AccRule](https://cloud.tencent.com/document/product/1552/115818)。
     */
    async ModifyRule(req, cb) {
        return this.request("ModifyRule", req, cb);
    }
    /**
     * 本接口用于查询七层域名业务按照指定维度的 topN 数据。请注意本接口查询数据有 10 分钟左右延迟，建议拉取当前时间 10 分钟以前的数据。
     */
    async DescribeTopL7AnalysisData(req, cb) {
        return this.request("DescribeTopL7AnalysisData", req, cb);
    }
    /**
     * 您可以用本接口批量删除 DNS 记录。
     */
    async DeleteDnsRecords(req, cb) {
        return this.request("DeleteDnsRecords", req, cb);
    }
    /**
     * 修改Web&Bot安全配置。
     */
    async ModifySecurityPolicy(req, cb) {
        return this.request("ModifySecurityPolicy", req, cb);
    }
    /**
     * 修改套餐配置。目前仅支持修改预付费套餐的自动续费开关。
     */
    async ModifyPlan(req, cb) {
        return this.request("ModifyPlan", req, cb);
    }
    /**
     * 本接口用于删除[规则引擎](https://cloud.tencent.com/document/product/1552/70901)的规则，支持批量删除。
     */
    async DeleteL7AccRules(req, cb) {
        return this.request("DeleteL7AccRules", req, cb);
    }
    /**
     * 将未绑定套餐的站点绑定到已有套餐
     */
    async BindZoneToPlan(req, cb) {
        return this.request("BindZoneToPlan", req, cb);
    }
    /**
     * 查询负载均衡实例下源站组健康状态。负载均衡功能内测中，如您需要使用请 [联系我们](https://cloud.tencent.com/online-service)。
     */
    async DescribeOriginGroupHealthStatus(req, cb) {
        return this.request("DescribeOriginGroupHealthStatus", req, cb);
    }
    /**
     * 用于删除四层代理转发规则，支持单条或者批量操作。
     */
    async DeleteL4ProxyRules(req, cb) {
        return this.request("DeleteL4ProxyRules", req, cb);
    }
    /**
     * 创建自定义错误页面。
     */
    async CreateCustomizeErrorPage(req, cb) {
        return this.request("CreateCustomizeErrorPage", req, cb);
    }
    /**
     * 修改加速域名信息
     */
    async ModifyAccelerationDomain(req, cb) {
        return this.request("ModifyAccelerationDomain", req, cb);
    }
    /**
     * 用于创建四层代理实例。
     */
    async CreateL4Proxy(req, cb) {
        return this.request("CreateL4Proxy", req, cb);
    }
    /**
     * 本接口为旧版，如需调用请尽快迁移至新版，详情请参考 [修改四层代理实例状态](https://cloud.tencent.com/document/product/1552/103408) 。
     */
    async ModifyApplicationProxyStatus(req, cb) {
        return this.request("ModifyApplicationProxyStatus", req, cb);
    }
    /**
     * 若您需要使用 Edgeone 产品，您需要通过此接口创建计费套餐。
> 创建套餐后，您需要通过 [CreateZone](https://cloud.tencent.com/document/product/1552/80719) 完成创建站点，绑定套餐的流程，Edgeone 才能正常提供服务。
     */
    async CreatePlan(req, cb) {
        return this.request("CreatePlan", req, cb);
    }
    /**
     * 本接口查询七层域名业务的时序数据。请注意本接口查询数据有 10 分钟左右延迟，建议拉取当前时间 10 分钟以前的数据。
     */
    async DescribeTimingL7AnalysisData(req, cb) {
        return this.request("DescribeTimingL7AnalysisData", req, cb);
    }
    /**
     * 创建并部署边缘函数至 EdgeOne 的边缘节点。
     */
    async CreateFunction(req, cb) {
        return this.request("CreateFunction", req, cb);
    }
    /**
     * 本接口为旧版，如需调用请尽快迁移至新版，新版接口中将四层代理实例列表的查询和四层转发规则的查询拆分成两个接口，详情请参考 [查询四层代理实例列表](https://cloud.tencent.com/document/product/1552/103413) 和 [查询四层代理转发规则列表](https://cloud.tencent.com/document/product/1552/103412)。
     */
    async DescribeApplicationProxies(req, cb) {
        return this.request("DescribeApplicationProxies", req, cb);
    }
    /**
     * 用于创建共享 CNAME，该功能白名单内测中。
     */
    async CreateSharedCNAME(req, cb) {
        return this.request("CreateSharedCNAME", req, cb);
    }
    /**
     * 本接口为旧版，EdgeOne 已对规则引擎相关接口全面升级，详情请参考 [CreateL7AccRules](https://cloud.tencent.com/document/product/1552/115822)。
     */
    async CreateRule(req, cb) {
        return this.request("CreateRule", req, cb);
    }
    /**
     * 在版本管理模式下，用于创建指定配置组的新版本。版本管理功能内测中，当前仅白名单开放。
     */
    async CreateConfigGroupVersion(req, cb) {
        return this.request("CreateConfigGroupVersion", req, cb);
    }
    /**
     * 您可以通过本接口批量修改 DNS 记录的状态，批量对记录进行开启和停用。
     */
    async ModifyDnsRecordsStatus(req, cb) {
        return this.request("ModifyDnsRecordsStatus", req, cb);
    }
    /**
     * 修改边缘函数，支持修改函数的内容及描述信息，修改且重新部署后，函数立刻生效。
     */
    async ModifyFunction(req, cb) {
        return this.request("ModifyFunction", req, cb);
    }
    /**
     * 本接口为旧版，如需调用请尽快迁移至新版，详情请参考 [修改四层代理实例
](https://cloud.tencent.com/document/product/1552/103411) 。
     */
    async ModifyApplicationProxy(req, cb) {
        return this.request("ModifyApplicationProxy", req, cb);
    }
    /**
     * EdgeOne 为您提供 CNAME、NS 和无域名接入三种接入方式，您需要先通过此接口完成站点创建。CNAME 和 NS 接入站点的场景可参考 [从零开始快速接入 EdgeOne](https://cloud.tencent.com/document/product/1552/87601); 无域名接入的场景可参考 [快速启用四层代理服务](https://cloud.tencent.com/document/product/1552/96051)。

> 建议您在账号下已存在套餐时调用本接口创建站点，请在入参时传入 PlanId ，直接将站点绑定至该套餐；不传入 PlanId 时，创建出来的站点会处于未激活状态，无法正常服务，您需要通过 [BindZoneToPlan](https://cloud.tencent.com/document/product/1552/83042) 完成套餐绑定之后，站点才可正常提供服务 。若您当前没有可绑定的套餐时，请前往控制台购买套餐完成站点创建。
     */
    async CreateZone(req, cb) {
        return this.request("CreateZone", req, cb);
    }
    /**
     * 修改边缘函数触发规则，支持修改规则条件、执行函数以及描述信息。
     */
    async ModifyFunctionRule(req, cb) {
        return this.request("ModifyFunctionRule", req, cb);
    }
    /**
     * 查询当前账户可用套餐信息列表
     */
    async DescribeAvailablePlans(req, cb) {
        return this.request("DescribeAvailablePlans", req, cb);
    }
    /**
     * 查询自定义错误页列表。
     */
    async DescribeCustomErrorPages(req, cb) {
        return this.request("DescribeCustomErrorPages", req, cb);
    }
    /**
     * 删除负载均衡实例，若负载均衡示例被其他服务（例如：四层代理等）引用的时候，示例无法被删除，需要先解除引用关系。负载均衡功能内测中，如您需要使用请 [联系我们](https://cloud.tencent.com/online-service)。
     */
    async DeleteLoadBalancer(req, cb) {
        return this.request("DeleteLoadBalancer", req, cb);
    }
    /**
     * 删除指定的内容标识符。该功能仅白名单开放。
     */
    async DeleteContentIdentifier(req, cb) {
        return this.request("DeleteContentIdentifier", req, cb);
    }
    /**
     * 本接口为旧版，EdgeOne 已对规则引擎相关接口全面升级，详情请参考 [RuleEngineAction](https://cloud.tencent.com/document/product/1552/80721#RuleEngineAction)。
     */
    async DescribeRulesSetting(req, cb) {
        return this.request("DescribeRulesSetting", req, cb);
    }
    /**
     * 批量修改加速域名状态
     */
    async ModifyAccelerationDomainStatuses(req, cb) {
        return this.request("ModifyAccelerationDomainStatuses", req, cb);
    }
    /**
     * 查询边缘函数触发规则列表，支持按照规则 ID、函数 ID、规则描述等条件进行过滤。
     */
    async DescribeFunctionRules(req, cb) {
        return this.request("DescribeFunctionRules", req, cb);
    }
    /**
     * 通过本接口删除实时日志投递任务。
     */
    async DeleteRealtimeLogDeliveryTask(req, cb) {
        return this.request("DeleteRealtimeLogDeliveryTask", req, cb);
    }
    /**
     * 本接口（DescribeDDoSAttackTopData）用于查询DDoS攻击Top数据。
     */
    async DescribeDDoSAttackTopData(req, cb) {
        return this.request("DescribeDDoSAttackTopData", req, cb);
    }
    /**
     * 用于开启，关闭站点。
     */
    async ModifyZoneStatus(req, cb) {
        return this.request("ModifyZoneStatus", req, cb);
    }
    /**
     * 本接口用于在[规则引擎](https://cloud.tencent.com/document/product/1552/70901)中创建规则，支持批量创建。
     */
    async CreateL7AccRules(req, cb) {
        return this.request("CreateL7AccRules", req, cb);
    }
    /**
     * DescribePurgeTasks 用于查询提交的 URL 刷新、目录刷新记录及执行进度，通过 CreatePurgeTasks 接口提交的任务均可通过此接口进行查询。
     */
    async DescribePurgeTasks(req, cb) {
        return this.request("DescribePurgeTasks", req, cb);
    }
    /**
     * 本接口为旧版，EdgeOne 已对规则引擎相关接口全面升级，详情请参考 [DeleteL7AccRules](https://cloud.tencent.com/document/product/1552/115821)。
     */
    async DeleteRules(req, cb) {
        return this.request("DeleteRules", req, cb);
    }
    /**
     * 查询四层代理实例下的转发规则列表。
     */
    async DescribeL4ProxyRules(req, cb) {
        return this.request("DescribeL4ProxyRules", req, cb);
    }
    /**
     * 删除自定义错误页面。
     */
    async DeleteCustomErrorPage(req, cb) {
        return this.request("DeleteCustomErrorPage", req, cb);
    }
    /**
     * 操作边缘函数运行环境，支持环境变量的相关设置。
设置环境变量后，可在函数代码中使用，具体参考 [边缘函数引入环境变量](https://cloud.tencent.com/document/product/1552/109151#0151fd9a-8b0e-407b-ae37-54553a60ded6)。
     */
    async HandleFunctionRuntimeEnvironment(req, cb) {
        return this.request("HandleFunctionRuntimeEnvironment", req, cb);
    }
    /**
     * 本接口（DescribeDDoSAttackEvent）用于查询DDoS攻击事件列表。
     */
    async DescribeDDoSAttackEvent(req, cb) {
        return this.request("DescribeDDoSAttackEvent", req, cb);
    }
    /**
     * 修改内容标识符，仅支持修改描述。该功能仅白名单开放。
     */
    async ModifyContentIdentifier(req, cb) {
        return this.request("ModifyContentIdentifier", req, cb);
    }
    /**
     * 当您需要使用高等级套餐才拥有的功能，可以通过本接口升级套餐，仅支持个人版，基础版套餐进行升级。
> 不同类型 Edgeone 计费套餐区别参考 [Edgeone计费套餐选型对比](https://cloud.tencent.com/document/product/1552/94165)
计费套餐升级规则以及资费详情参考 [Edgeone计费套餐升配说明](https://cloud.tencent.com/document/product/1552/95291)
如果需要将套餐升级至企业版，请 [联系我们](https://cloud.tencent.com/online-service)
     */
    async UpgradePlan(req, cb) {
        return this.request("UpgradePlan", req, cb);
    }
    /**
     * 修改边缘函数触发规则的优先级。
     */
    async ModifyFunctionRulePriority(req, cb) {
        return this.request("ModifyFunctionRulePriority", req, cb);
    }
    /**
     * 修改安全 IP 组。
     */
    async ModifySecurityIPGroup(req, cb) {
        return this.request("ModifySecurityIPGroup", req, cb);
    }
    /**
     * 本接口为旧版，EdgeOne 已对规则引擎相关接口全面升级，详情请参考 [DescribeL7AccRules](https://cloud.tencent.com/document/product/1552/115820)。
     */
    async DescribeRules(req, cb) {
        return this.request("DescribeRules", req, cb);
    }
    /**
     * 针对指定实时日志投递任务（task-id），在对应的腾讯云 CLS 日志主题中创建投递日志字段对应的键值索引。如果您在腾讯云 CLS 已经创建索引，本接口将采用合并的方式追加索引。
     */
    async CreateCLSIndex(req, cb) {
        return this.request("CreateCLSIndex", req, cb);
    }
    /**
     * 本接口为旧版，如需调用请尽快迁移至新版 [创建四层代理实例](https://cloud.tencent.com/document/product/1552/103417) 。
     */
    async CreateApplicationProxy(req, cb) {
        return this.request("CreateApplicationProxy", req, cb);
    }
    /**
     * 获取源站组列表
     */
    async DescribeOriginGroup(req, cb) {
        return this.request("DescribeOriginGroup", req, cb);
    }
    /**
     * 修改别称域名。
     */
    async ModifyAliasDomain(req, cb) {
        return this.request("ModifyAliasDomain", req, cb);
    }
    /**
     * 创建负载均衡实例。详情请参考 [快速创建负载均衡实例](https://cloud.tencent.com/document/product/1552/104223)。负载均衡功能内测中，如您需要使用请 [联系我们](https://cloud.tencent.com/online-service)。
     */
    async CreateLoadBalancer(req, cb) {
        return this.request("CreateLoadBalancer", req, cb);
    }
    /**
     * 本接口为旧版，如需调用请尽快迁移至新版，详情请参考 [修改四层代理转发规则
](https://cloud.tencent.com/document/product/1552/103410) 。
     */
    async ModifyApplicationProxyRule(req, cb) {
        return this.request("ModifyApplicationProxyRule", req, cb);
    }
    /**
     * 本接口用于查询[站点加速](https://cloud.tencent.com/document/product/1552/96193)全局配置。
     */
    async DescribeL7AccSetting(req, cb) {
        return this.request("DescribeL7AccSetting", req, cb);
    }
    /**
     * 创建源站组，以源站组的方式管理业务源站。此处配置的源站组可于**添加加速域名**和**四层代理**等功能中引用。
     */
    async CreateOriginGroup(req, cb) {
        return this.request("CreateOriginGroup", req, cb);
    }
    /**
     * 完成域名创建之后，您可以为域名配置自有证书，也可以使用 EdgeOne 为您提供的 [免费证书](https://cloud.tencent.com/document/product/1552/90437)。
如果您需要配置自有证书，请先将证书上传至 [SSL证书控制台](https://console.cloud.tencent.com/certoverview)，然后在本接口中传入对应的证书 ID。详情参考 [部署自有证书至 EdgeOne 域名
](https://cloud.tencent.com/document/product/1552/88874)。
     */
    async ModifyHostsCertificate(req, cb) {
        return this.request("ModifyHostsCertificate", req, cb);
    }
    /**
     * 在版本管理模式下，用于查询生产/测试环境的版本发布历史。版本管理功能内测中，当前仅白名单开放。
     */
    async DescribeDeployHistory(req, cb) {
        return this.request("DescribeDeployHistory", req, cb);
    }
    /**
     * 在版本管理模式下，用于版本发布，可通过 EnvId 将版本发布至测试环境或生产环境。版本管理功能内测中，当前仅白名单开放。
     */
    async DeployConfigGroupVersion(req, cb) {
        return this.request("DeployConfigGroupVersion", req, cb);
    }
    /**
     * 本接口为旧版，EdgeOne 已对规则引擎相关接口全面升级，可通过 [DescribeL7AccSetting](https://cloud.tencent.com/document/product/1552/115819) 和 [DescribeL7AccRules](https://cloud.tencent.com/document/product/1552/115820) 来获取域名的详细配置。
     */
    async DescribeHostsSetting(req, cb) {
        return this.request("DescribeHostsSetting", req, cb);
    }
    /**
     * 查询指定策略模板的绑定关系列表。
     */
    async DescribeSecurityTemplateBindings(req, cb) {
        return this.request("DescribeSecurityTemplateBindings", req, cb);
    }
    /**
     * 用于删除四层代理实例。
     */
    async DeleteL4Proxy(req, cb) {
        return this.request("DeleteL4Proxy", req, cb);
    }
    /**
     * 用于加速域名绑定或解绑共享 CNAME，该功能白名单内测中。
     */
    async BindSharedCNAME(req, cb) {
        return this.request("BindSharedCNAME", req, cb);
    }
    /**
     * 通过本接口修改实时日志投递任务配置。本接口有如下限制：<li>不支持修改实时日志投递任务目的地类型（TaskType）；</li><li>不支持修改数据投递类型（LogType）</li><li>不支持修改数据投递区域（Area）</li><li>当原实时日志投递任务的目的地为腾讯云 CLS 时，不支持修改目的地详细配置，如日志集、日志主题。</li>
     */
    async ModifyRealtimeLogDeliveryTask(req, cb) {
        return this.request("ModifyRealtimeLogDeliveryTask", req, cb);
    }
    /**
     * 查询源站防护信息
     */
    async DescribeOriginProtection(req, cb) {
        return this.request("DescribeOriginProtection", req, cb);
    }
    /**
     * 用于启用/停用四层代理转发规则状态，支持单条或者批量操作。
     */
    async ModifyL4ProxyRulesStatus(req, cb) {
        return this.request("ModifyL4ProxyRulesStatus", req, cb);
    }
    /**
     * 当您的套餐需要延长有效期，可以通过该接口进行续费。套餐续费仅支持个人版，基础版，标准版套餐。
> 费用详情可参考 [套餐费用](https://cloud.tencent.com/document/product/1552/94158)
     */
    async RenewPlan(req, cb) {
        return this.request("RenewPlan", req, cb);
    }
    /**
     * 本接口为旧版，EdgeOne 已对规则引擎相关接口全面升级，详情请参考 [DescribeL7AccSetting](https://cloud.tencent.com/document/product/1552/115819)。
     */
    async DescribeZoneSetting(req, cb) {
        return this.request("DescribeZoneSetting", req, cb);
    }
    /**
     * 查询站点配置项导入结果接口，本接口用于站点配置导入接口（ImportZoneConfig）的结果查询。该功能仅支持标准版或企业版套餐的站点使用。
     */
    async DescribeZoneConfigImportResult(req, cb) {
        return this.request("DescribeZoneConfigImportResult", req, cb);
    }
    /**
     * 创建内容标识符，可以设置描述、标签等信息，同时需要绑定企业版套餐用于统计计费数据；一个内容标识符只能绑定一个计费套餐，一个计费套餐可以绑定多个内容标识符。该功能仅限白名单开放。
     */
    async CreateContentIdentifier(req, cb) {
        return this.request("CreateContentIdentifier", req, cb);
    }
    /**
     * 删除指定 IP 组，如果有规则引用了 IP 组情况，则不允许删除。
     */
    async DeleteSecurityIPGroup(req, cb) {
        return this.request("DeleteSecurityIPGroup", req, cb);
    }
    /**
     * 本接口为旧版，如需调用请尽快迁移至新版，详情请参考 [创建四层代理转发规则
](https://cloud.tencent.com/document/product/1552/103416) 。
     */
    async CreateApplicationProxyRule(req, cb) {
        return this.request("CreateApplicationProxyRule", req, cb);
    }
    /**
     * 该接口用于查询您有权限的站点信息。可根据不同查询条件筛选站点。
     */
    async DescribeZones(req, cb) {
        return this.request("DescribeZones", req, cb);
    }
    /**
     * 查询边缘函数列表，支持函数 ID、函数名称、描述等条件的过滤。
     */
    async DescribeFunctions(req, cb) {
        return this.request("DescribeFunctions", req, cb);
    }
    /**
     * 删除站点。
     */
    async DeleteZone(req, cb) {
        return this.request("DeleteZone", req, cb);
    }
    /**
     * 接口已废弃，将于 2024 年 6 月 30 日停止服务。请使用 [查询安全 IP 组
](https://cloud.tencent.com/document/product/1552/105866) 接口。

查询 IP 组的配置信息，包括 IP 组名称、 IP 组内容、 IP 组归属站点。
     */
    async DescribeSecurityIPGroupInfo(req, cb) {
        return this.request("DescribeSecurityIPGroupInfo", req, cb);
    }
    /**
     * 您可以用过本接口查看站点下的 DNS 记录信息，包括 DNS 记录名、记录类型以及记录内容等信息，支持指定过滤条件查询对应的 DNS 记录信息。
     */
    async DescribeDnsRecords(req, cb) {
        return this.request("DescribeDnsRecords", req, cb);
    }
    /**
     * 导入站点配置接口，本接口支持站点配置文件的快速导入，发起导入后接口会返回对应的任务 ID（TaskId），用户需通过查询站点配置导入结果接口（DescribeZoneConfigImportResult）获取本次导入任务执行的结果。该功能仅支持标准版和企业版套餐站点使用。
     */
    async ImportZoneConfig(req, cb) {
        return this.request("ImportZoneConfig", req, cb);
    }
    /**
     * 修改自定义错误页面。
     */
    async ModifyCustomErrorPage(req, cb) {
        return this.request("ModifyCustomErrorPage", req, cb);
    }
    /**
     * 本接口（DescribeDDoSAttackData）用于查询DDoS攻击时序数据。
     */
    async DescribeDDoSAttackData(req, cb) {
        return this.request("DescribeDDoSAttackData", req, cb);
    }
    /**
     * 用于删除共享 CNAME，该功能白名单内测中。
     */
    async DeleteSharedCNAME(req, cb) {
        return this.request("DeleteSharedCNAME", req, cb);
    }
    /**
     * 查询别称域名信息列表。
     */
    async DescribeAliasDomains(req, cb) {
        return this.request("DescribeAliasDomains", req, cb);
    }
    /**
     * 用于查询四层代理实例列表。
     */
    async DescribeL4Proxy(req, cb) {
        return this.request("DescribeL4Proxy", req, cb);
    }
    /**
     * 通过本接口查询计费数据。
     */
    async DescribeBillingData(req, cb) {
        return this.request("DescribeBillingData", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249503, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220106 = void 0;
const Models = require("./teo_models");
const teo_client_1 = require("./teo_client");
exports.v20220106 = {
    Client: teo_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./teo_models":1738984249504,"./teo_client":1738984249505}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249504, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249505, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * teo client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("teo.tencentcloudapi.com", "2022-01-06", clientConfig);
    }
    /**
     * 创建清除缓存任务
     */
    async CreatePurgeTask(req, cb) {
        return this.request("CreatePurgeTask", req, cb);
    }
    /**
     * 查询清除缓存历史记录
     */
    async DescribePurgeTasks(req, cb) {
        return this.request("DescribePurgeTasks", req, cb);
    }
    /**
     * 创建预热任务
     */
    async CreatePrefetchTask(req, cb) {
        return this.request("CreatePrefetchTask", req, cb);
    }
    /**
     * 查询预热任务状态
     */
    async DescribePrefetchTasks(req, cb) {
        return this.request("DescribePrefetchTasks", req, cb);
    }
    /**
     * 用户查询用户站点信息列表，支持分页
     */
    async DescribeZones(req, cb) {
        return this.request("DescribeZones", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249506, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.thpc = void 0;
const v20211109_1 = require("./v20211109");
const v20220401_1 = require("./v20220401");
const v20230321_1 = require("./v20230321");
exports.thpc = {
    v20211109: v20211109_1.v20211109,
    v20220401: v20220401_1.v20220401,
    v20230321: v20230321_1.v20230321,
};

}, function(modId) { var map = {"./v20211109":1738984249507,"./v20220401":1738984249510,"./v20230321":1738984249513}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249507, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20211109 = void 0;
const Models = require("./thpc_models");
const thpc_client_1 = require("./thpc_client");
exports.v20211109 = {
    Client: thpc_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./thpc_models":1738984249508,"./thpc_client":1738984249509}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249508, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249509, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * thpc client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("thpc.tencentcloudapi.com", "2021-11-09", clientConfig);
    }
    /**
     * 本接口（DeleteCluster）用于删除一个指定的集群。
     */
    async DeleteCluster(req, cb) {
        return this.request("DeleteCluster", req, cb);
    }
    /**
     * 本接口（DescribeClusters）用于查询集群列表。
     */
    async DescribeClusters(req, cb) {
        return this.request("DescribeClusters", req, cb);
    }
    /**
     * 本接口(BindAutoScalingGroup)用于为集群队列绑定弹性伸缩组
     */
    async BindAutoScalingGroup(req, cb) {
        return this.request("BindAutoScalingGroup", req, cb);
    }
    /**
     * 本接口 (CreateCluster) 用于创建并启动集群。
     */
    async CreateCluster(req, cb) {
        return this.request("CreateCluster", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249510, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220401 = void 0;
const Models = require("./thpc_models");
const thpc_client_1 = require("./thpc_client");
exports.v20220401 = {
    Client: thpc_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./thpc_models":1738984249511,"./thpc_client":1738984249512}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249511, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249512, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * thpc client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("thpc.tencentcloudapi.com", "2022-04-01", clientConfig);
    }
    /**
     * 本接口 (DescribeClusterStorageOption) 用于查询集群存储选项信息。
     */
    async DescribeClusterStorageOption(req, cb) {
        return this.request("DescribeClusterStorageOption", req, cb);
    }
    /**
     * 本接口(DeleteNodes)用于删除指定集群中一个或者多个计算节点或者登录节点。
     */
    async DeleteNodes(req, cb) {
        return this.request("DeleteNodes", req, cb);
    }
    /**
     * 本接口(BindAutoScalingGroup)用于为集群队列绑定弹性伸缩组
     */
    async BindAutoScalingGroup(req, cb) {
        return this.request("BindAutoScalingGroup", req, cb);
    }
    /**
     * 本接口 (CreateCluster) 用于创建并启动集群。

* 本接口为异步接口， 当创建集群请求下发成功后会返回一个集群`ID`和一个`RequestId`，此时创建集群操作并未立即完成。在此期间集群的状态将会处于“PENDING”或者“INITING”，集群创建结果可以通过调用 [DescribeClusters](https://cloud.tencent.com/document/product/1527/72100)  接口查询，如果集群状态(ClusterStatus)变为“RUNNING(运行中)”，则代表集群创建成功，“ INIT_FAILED”代表集群创建失败。
     */
    async CreateCluster(req, cb) {
        return this.request("CreateCluster", req, cb);
    }
    /**
     * 本接口（DeleteCluster）用于删除一个指定的集群。
     */
    async DeleteCluster(req, cb) {
        return this.request("DeleteCluster", req, cb);
    }
    /**
     * 本接口(SetAutoScalingConfiguration)用于为集群设置集群弹性伸缩配置信息。
     */
    async SetAutoScalingConfiguration(req, cb) {
        return this.request("SetAutoScalingConfiguration", req, cb);
    }
    /**
     * 本接口(AddQueue)用于添加队列到指定集群。
* 本接口为目前只支持SchedulerType为SLURM的集群。
* 单个集群中队列数量上限为10个。
     */
    async AddQueue(req, cb) {
        return this.request("AddQueue", req, cb);
    }
    /**
     * 本接口 (DescribeNodes) 用于查询指定集群节点概览信息列表。
     */
    async DescribeNodes(req, cb) {
        return this.request("DescribeNodes", req, cb);
    }
    /**
     * 本接口(DeleteQueue)用于从指定集群删除队列。
* 本接口为目前只支持SchedulerType为SLURM的集群。

* 删除队列时，需要保证队列内不存在节点。
     */
    async DeleteQueue(req, cb) {
        return this.request("DeleteQueue", req, cb);
    }
    /**
     * 本接口 (DeleteClusterStorageOption) 用于删除集群存储选项信息。
     */
    async DeleteClusterStorageOption(req, cb) {
        return this.request("DeleteClusterStorageOption", req, cb);
    }
    /**
     * 本接口(AddNodes)用于添加一个或者多个计算节点或者登录节点到指定集群。
     */
    async AddNodes(req, cb) {
        return this.request("AddNodes", req, cb);
    }
    /**
     * 本接口(DescribeAutoScalingConfiguration)用于查询集群弹性伸缩配置信息。本接口仅适用于弹性伸缩类型为THPC_AS的集群。
     */
    async DescribeAutoScalingConfiguration(req, cb) {
        return this.request("DescribeAutoScalingConfiguration", req, cb);
    }
    /**
     * 本接口（DescribeClusters）用于查询集群列表。
     */
    async DescribeClusters(req, cb) {
        return this.request("DescribeClusters", req, cb);
    }
    /**
     * 本接口（AddClusterStorageOption）用于添加集群存储选项信息。
     */
    async AddClusterStorageOption(req, cb) {
        return this.request("AddClusterStorageOption", req, cb);
    }
    /**
     * 本接口（DescribeClusterActivities）用于查询集群活动历史记录列表。
     */
    async DescribeClusterActivities(req, cb) {
        return this.request("DescribeClusterActivities", req, cb);
    }
    /**
     * 本接口(DescribeQueues)用于查询指定集群队列概览信息列表。
     */
    async DescribeQueues(req, cb) {
        return this.request("DescribeQueues", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249513, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20230321 = void 0;
const Models = require("./thpc_models");
const thpc_client_1 = require("./thpc_client");
exports.v20230321 = {
    Client: thpc_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./thpc_models":1738984249514,"./thpc_client":1738984249515}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249514, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249515, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * thpc client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("thpc.tencentcloudapi.com", "2023-03-21", clientConfig);
    }
    /**
     * 本接口(DeleteNodes)用于删除指定集群中一个或者多个计算节点或者登录节点。
     */
    async DeleteNodes(req, cb) {
        return this.request("DeleteNodes", req, cb);
    }
    /**
     * 本接口 (TerminateWorkspaces) 用于主动退还工作空间。
     */
    async TerminateWorkspaces(req, cb) {
        return this.request("TerminateWorkspaces", req, cb);
    }
    /**
     * 本接口 (ModifyWorkspacesAttribute) 用于修改工作空间的属性（目前只支持修改工作空间的名称）。
     */
    async ModifyWorkspacesAttribute(req, cb) {
        return this.request("ModifyWorkspacesAttribute", req, cb);
    }
    /**
     * 本接口 (CreateCluster) 用于创建并启动集群。

* 本接口为异步接口， 当创建集群请求下发成功后会返回一个集群`ID`和一个`RequestId`，此时创建集群操作并未立即完成。在此期间集群的状态将会处于“PENDING”或者“INITING”，集群创建结果可以通过调用 [DescribeClusters](https://cloud.tencent.com/document/product/1527/72100)  接口查询，如果集群状态(ClusterStatus)变为“RUNNING(运行中)”，则代表集群创建成功，“ INIT_FAILED”代表集群创建失败。
     */
    async CreateCluster(req, cb) {
        return this.request("CreateCluster", req, cb);
    }
    /**
     * 本接口 (CreateWorkspaces) 用于创建工作空间。
     */
    async CreateWorkspaces(req, cb) {
        return this.request("CreateWorkspaces", req, cb);
    }
    /**
     * 本接口(DescribeQueues)用于查询指定集群队列概览信息列表。
     */
    async DescribeQueues(req, cb) {
        return this.request("DescribeQueues", req, cb);
    }
    /**
     * 本接口(AddNodes)用于添加一个或者多个计算节点或者登录节点到指定集群。
     */
    async AddNodes(req, cb) {
        return this.request("AddNodes", req, cb);
    }
    /**
     * 本接口 (DetachNodes) 用于将一个或者多个计算节点从集群中移除，但是不销毁指定计算资源。
     */
    async DetachNodes(req, cb) {
        return this.request("DetachNodes", req, cb);
    }
    /**
     * 本接口（DeleteCluster）用于删除一个指定的集群。
     */
    async DeleteCluster(req, cb) {
        return this.request("DeleteCluster", req, cb);
    }
    /**
     * 本接口 (DeleteClusterStorageOption) 用于删除集群存储选项信息。
     */
    async DeleteClusterStorageOption(req, cb) {
        return this.request("DeleteClusterStorageOption", req, cb);
    }
    /**
     * 本接口（DescribeWorkspaces）用于查询工作空间列表。
     */
    async DescribeWorkspaces(req, cb) {
        return this.request("DescribeWorkspaces", req, cb);
    }
    /**
     * 本接口 (DescribeNodes) 用于查询指定集群节点概览信息列表。
     */
    async DescribeNodes(req, cb) {
        return this.request("DescribeNodes", req, cb);
    }
    /**
     * 本接口（DescribeClusters）用于查询集群列表。
     */
    async DescribeClusters(req, cb) {
        return this.request("DescribeClusters", req, cb);
    }
    /**
     * 本接口(SetAutoScalingConfiguration)用于为集群设置集群弹性伸缩配置信息。
     */
    async SetAutoScalingConfiguration(req, cb) {
        return this.request("SetAutoScalingConfiguration", req, cb);
    }
    /**
     * 本接口(AddQueue)用于添加队列到指定集群。
* 本接口为目前只支持SchedulerType为SLURM的集群。
* 单个集群中队列数量上限为10个。
     */
    async AddQueue(req, cb) {
        return this.request("AddQueue", req, cb);
    }
    /**
     * 本接口 (DescribeInitNodeScripts) 用于查询节点初始化脚本列表。
     */
    async DescribeInitNodeScripts(req, cb) {
        return this.request("DescribeInitNodeScripts", req, cb);
    }
    /**
     * 本接口 (AttachNodes) 用于绑定一个或者多个计算节点指定资源到指定集群中。
     */
    async AttachNodes(req, cb) {
        return this.request("AttachNodes", req, cb);
    }
    /**
     * 本接口(DescribeAutoScalingConfiguration)用于查询集群弹性伸缩配置信息。本接口仅适用于弹性伸缩类型为THPC_AS的集群。
     */
    async DescribeAutoScalingConfiguration(req, cb) {
        return this.request("DescribeAutoScalingConfiguration", req, cb);
    }
    /**
     * 本接口（DescribeClusterActivities）用于查询集群活动历史记录列表。
     */
    async DescribeClusterActivities(req, cb) {
        return this.request("DescribeClusterActivities", req, cb);
    }
    /**
     * 本接口 (DescribeClusterStorageOption) 用于查询集群存储选项信息。
     */
    async DescribeClusterStorageOption(req, cb) {
        return this.request("DescribeClusterStorageOption", req, cb);
    }
    /**
     * 本接口 (ModifyInitNodeScripts) 用于修改节点初始化脚本。
     */
    async ModifyInitNodeScripts(req, cb) {
        return this.request("ModifyInitNodeScripts", req, cb);
    }
    /**
     * 本接口（AddClusterStorageOption）用于添加集群存储选项信息。
     */
    async AddClusterStorageOption(req, cb) {
        return this.request("AddClusterStorageOption", req, cb);
    }
    /**
     * 本接口(DeleteQueue)用于从指定集群删除队列。
* 本接口为目前只支持SchedulerType为SLURM的集群。

* 删除队列时，需要保证队列内不存在节点。
     */
    async DeleteQueue(req, cb) {
        return this.request("DeleteQueue", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249516, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tia = void 0;
const v20180226_1 = require("./v20180226");
exports.tia = {
    v20180226: v20180226_1.v20180226,
};

}, function(modId) { var map = {"./v20180226":1738984249517}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249517, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180226 = void 0;
const Models = require("./tia_models");
const tia_client_1 = require("./tia_client");
exports.v20180226 = {
    Client: tia_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tia_models":1738984249518,"./tia_client":1738984249519}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249518, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249519, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tia client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tia.tencentcloudapi.com", "2018-02-26", clientConfig);
    }
    /**
     * 部署模型，用以对外提供服务。有两种部署模式：`无服务器模式` 和 `集群模式`。`无服务器模式` 下，模型文件被部署到无服务器云函数，即 [SCF](https://cloud.tencent.com/product/scf)，用户可以在其控制台上进一步操作。`集群模式` 下，模型文件被部署到 TI-A 的计算集群中。
     */
    async CreateModel(req, cb) {
        return this.request("CreateModel", req, cb);
    }
    /**
     * 列举训练任务
     */
    async ListJobs(req, cb) {
        return this.request("ListJobs", req, cb);
    }
    /**
     * 创建训练任务
     */
    async CreateJob(req, cb) {
        return this.request("CreateJob", req, cb);
    }
    /**
     * 描述已经部署的某个模型。而模型部署有两种模式：`无服务器模式` 和 `集群模式`。`无服务器模式` 下，模型文件被部署到无服务器云函数，即 [SCF](https://cloud.tencent.com/product/scf)，用户可以在其控制台上进一步操作。`集群模式` 下，模型文件被部署到 TI-A 的计算集群中。
     */
    async DescribeModel(req, cb) {
        return this.request("DescribeModel", req, cb);
    }
    /**
     * 查询 TI-A 训练任务的日志
     */
    async QueryLogs(req, cb) {
        return this.request("QueryLogs", req, cb);
    }
    /**
     * 用以列举已经部署的模型。而部署有两种模式：`无服务器模式` 和 `集群模式`。`无服务器模式` 下，模型文件被部署到无服务器云函数，即 [SCF](https://cloud.tencent.com/product/scf)，用户可以在其控制台上进一步操作。`集群模式` 下，模型文件被部署到 TI-A 的计算集群中。不同部署模式下的模型分开列出。
     */
    async ListModels(req, cb) {
        return this.request("ListModels", req, cb);
    }
    /**
     * 删除训练任务
     */
    async DeleteJob(req, cb) {
        return this.request("DeleteJob", req, cb);
    }
    /**
     * 删除指定的部署模型。模型有两种部署模式：`无服务器模式` 和 `集群模式`。`无服务器模式` 下，模型文件被部署到无服务器云函数，即 [SCF](https://cloud.tencent.com/product/scf)，用户可以在其控制台上进一步操作。`集群模式` 下，模型文件被部署到 TI-A 的计算集群中。
     */
    async DeleteModel(req, cb) {
        return this.request("DeleteModel", req, cb);
    }
    /**
     * 获取训练任务详情
     */
    async DescribeJob(req, cb) {
        return this.request("DescribeJob", req, cb);
    }
    /**
     * 安装agent
     */
    async InstallAgent(req, cb) {
        return this.request("InstallAgent", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249520, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tic = void 0;
const v20201117_1 = require("./v20201117");
exports.tic = {
    v20201117: v20201117_1.v20201117,
};

}, function(modId) { var map = {"./v20201117":1738984249521}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249521, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201117 = void 0;
const Models = require("./tic_models");
const tic_client_1 = require("./tic_client");
exports.v20201117 = {
    Client: tic_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tic_models":1738984249522,"./tic_client":1738984249523}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249522, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249523, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tic client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tic.tencentcloudapi.com", "2020-11-17", clientConfig);
    }
    /**
     * 本接口（DescribeStackEvents）用于查看一个或多个事件详细信息。

- 可以根据事件ID过滤感兴趣的事件
- 也可以根据版本ID，资源栈ID，事件类型，事件状态过滤事件，过滤信息详细请见过滤器Filter
- 如果参数为空，返回当前用户一定数量（Limit所指定的数量，默认为20）的事件
     */
    async DescribeStackEvents(req, cb) {
        return this.request("DescribeStackEvents", req, cb);
    }
    /**
     * 本接口（UpdateStack）用于更新资源栈的名称和描述。
     */
    async UpdateStack(req, cb) {
        return this.request("UpdateStack", req, cb);
    }
    /**
     * 本接口（UpdateStackVersion）用于更新一个版本的模版内容，名称或描述，模版仅限COS URL，且为zip格式。
     */
    async UpdateStackVersion(req, cb) {
        return this.request("UpdateStackVersion", req, cb);
    }
    /**
     * 本接口（DestroyStack）用于删除资源栈下的某个版本所创建的资源。
     */
    async DestroyStack(req, cb) {
        return this.request("DestroyStack", req, cb);
    }
    /**
     * 本接口（ApplyStack）用于触发资源栈下某个版本的Apply事件。

- 当版本处于PLAN_IN_PROGRESS或APPLY_IN_PROGRESS状态时，将无法再执行本操作
- 当版本处于APPLY_COMPLETED状态时，本操作无法执行
     */
    async ApplyStack(req, cb) {
        return this.request("ApplyStack", req, cb);
    }
    /**
     * 本接口（CreateStackVersion）用于给资源栈新增一个HCL模版版本，仅限COS链接，且为zip格式。
     */
    async CreateStackVersion(req, cb) {
        return this.request("CreateStackVersion", req, cb);
    }
    /**
     * 本接口（DeleteStack）用于删除一个资源栈（配置、版本、事件信息）。但不会销毁资源管理的云资源。如果需要销毁资源栈管理的云资源，请调用 DestoryStack 接口销毁云资源。
     */
    async DeleteStack(req, cb) {
        return this.request("DeleteStack", req, cb);
    }
    /**
     * 本接口（PlanStack）用于触发资源栈下某个版本的PLAN事件。

- 当版本处于PLAN_IN_PROGRESS或APPLY_IN_PROGRESS状态时，将无法再执行本操作
- 当版本处于APPLY_COMPLETED状态时，本操作无法执行
     */
    async PlanStack(req, cb) {
        return this.request("PlanStack", req, cb);
    }
    /**
     * 本接口（DeleteStackVersion）用于删除一个版本，处于PLAN_IN_PROGRESS和APPLY_IN_PROGRESS状态中的版本无法删除。
     */
    async DeleteStackVersion(req, cb) {
        return this.request("DeleteStackVersion", req, cb);
    }
    /**
     * 本接口（DescribeStackEvent）用于获取单个事件详情，尤其是可以得到事件的详细控制台输出文本。
     */
    async DescribeStackEvent(req, cb) {
        return this.request("DescribeStackEvent", req, cb);
    }
    /**
     * 本接口（DescribeStackVersions）用于查询一个或多个版本的详细信息。

- 可以根据版本ID查询感兴趣的版本
- 可以根据版本名字和状态来过滤版本，详见过滤器Filter
- 如果参数为空，返回当前用户一定数量（Limit所指定的数量，默认为20）的版本
     */
    async DescribeStackVersions(req, cb) {
        return this.request("DescribeStackVersions", req, cb);
    }
    /**
     * 本接口（DescribeStacks）用于查询一个或多个资源栈的详细信息。

- 可以根据资源栈ID来查询感兴趣的资源栈信息
- 若参数为空，返回当前用户一定数量（Limit所指定的数量，默认为20）的资源栈
     */
    async DescribeStacks(req, cb) {
        return this.request("DescribeStacks", req, cb);
    }
    /**
     * 本接口（CreateStack）用于通过传递一个COS的terraform zip模版URL来创建一个资源栈。创建资源栈后仍需要用户调用对应的plan, apply, destory执行对应的事件。
     */
    async CreateStack(req, cb) {
        return this.request("CreateStack", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249524, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ticm = void 0;
const v20181127_1 = require("./v20181127");
exports.ticm = {
    v20181127: v20181127_1.v20181127,
};

}, function(modId) { var map = {"./v20181127":1738984249525}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249525, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20181127 = void 0;
const Models = require("./ticm_models");
const ticm_client_1 = require("./ticm_client");
exports.v20181127 = {
    Client: ticm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ticm_models":1738984249526,"./ticm_client":1738984249527}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249526, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249527, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ticm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ticm.tencentcloudapi.com", "2018-11-27", clientConfig);
    }
    /**
     * 本接口提供多种维度的图像审核能力，支持色情和性感内容识别，政治人物和涉政敏感场景识别，以及暴恐人物、场景、旗帜标识等违禁内容的识别。
     */
    async ImageModeration(req, cb) {
        return this.request("ImageModeration", req, cb);
    }
    /**
     * 本接口提供多种维度的视频审核能力，支持色情和性感内容识别，政治人物和涉政敏感场景识别，以及暴恐人物、场景、旗帜标识等违禁内容的识别。
     */
    async VideoModeration(req, cb) {
        return this.request("VideoModeration", req, cb);
    }
    /**
     * 提交完视频审核任务后，可以通过本接口来获取当前处理的进度和结果
     */
    async DescribeVideoTask(req, cb) {
        return this.request("DescribeVideoTask", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249528, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tics = void 0;
const v20181115_1 = require("./v20181115");
exports.tics = {
    v20181115: v20181115_1.v20181115,
};

}, function(modId) { var map = {"./v20181115":1738984249529}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249529, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20181115 = void 0;
const Models = require("./tics_models");
const tics_client_1 = require("./tics_client");
exports.v20181115 = {
    Client: tics_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tics_models":1738984249530,"./tics_client":1738984249531}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249530, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249531, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tics client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tics.tencentcloudapi.com", "2018-11-15", clientConfig);
    }
    /**
     * 提供文件相关的基础信息以及与攻击事件（团伙、家族）、恶意文件等相关联信息。
     */
    async DescribeFileInfo(req, cb) {
        return this.request("DescribeFileInfo", req, cb);
    }
    /**
     * 提供IP相关的基础信息以及与攻击事件（团伙、家族）、恶意文件等相关联信息。
     */
    async DescribeIpInfo(req, cb) {
        return this.request("DescribeIpInfo", req, cb);
    }
    /**
     * 提供域名相关的基础信息以及与攻击事件（团伙、家族）、恶意文件等相关联信息。
     */
    async DescribeDomainInfo(req, cb) {
        return this.request("DescribeDomainInfo", req, cb);
    }
    /**
     * 提供IP和域名相关威胁情报信息查询，这些信息可以辅助检测失陷主机、帮助SIEM/SOC等系统做研判决策、帮助运营团队对设备报警的编排处理。
     */
    async DescribeThreatInfo(req, cb) {
        return this.request("DescribeThreatInfo", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249532, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tiems = void 0;
const v20190416_1 = require("./v20190416");
exports.tiems = {
    v20190416: v20190416_1.v20190416,
};

}, function(modId) { var map = {"./v20190416":1738984249533}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249533, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190416 = void 0;
const Models = require("./tiems_models");
const tiems_client_1 = require("./tiems_client");
exports.v20190416 = {
    Client: tiems_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tiems_models":1738984249534,"./tiems_client":1738984249535}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249534, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249535, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tiems client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tiems.tencentcloudapi.com", "2019-04-16", clientConfig);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

创建服务
     */
    async CreateService(req, cb) {
        return this.request("CreateService", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

创建服务配置
     */
    async CreateServiceConfig(req, cb) {
        return this.request("CreateServiceConfig", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

创建资源组的伸缩组。当前一个资源组仅允许创建一个伸缩组。
     */
    async CreateRsgAsGroup(req, cb) {
        return this.request("CreateRsgAsGroup", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

删除资源组中的节点。目前仅支持删除已经到期的预付费节点，和按量付费节点。
     */
    async DeleteInstance(req, cb) {
        return this.request("DeleteInstance", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

删除服务
     */
    async DeleteService(req, cb) {
        return this.request("DeleteService", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

创建任务
     */
    async CreateJob(req, cb) {
        return this.request("CreateJob", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

更新资源组的伸缩组
     */
    async UpdateRsgAsGroup(req, cb) {
        return this.request("UpdateRsgAsGroup", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

描述服务
     */
    async DescribeServices(req, cb) {
        return this.request("DescribeServices", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

停用资源组的伸缩组
     */
    async DisableRsgAsGroup(req, cb) {
        return this.request("DisableRsgAsGroup", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

更新服务
     */
    async UpdateService(req, cb) {
        return this.request("UpdateService", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

创建运行环境
     */
    async CreateRuntime(req, cb) {
        return this.request("CreateRuntime", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

删除服务配置
     */
    async DeleteServiceConfig(req, cb) {
        return this.request("DeleteServiceConfig", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

获取节点列表
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

查询伸缩组活动
     */
    async DescribeRsgAsGroupActivities(req, cb) {
        return this.request("DescribeRsgAsGroupActivities", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

描述服务运行环境
     */
    async DescribeRuntimes(req, cb) {
        return this.request("DescribeRuntimes", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

获取资源组列表
     */
    async DescribeResourceGroups(req, cb) {
        return this.request("DescribeResourceGroups", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

更新任务
     */
    async UpdateJob(req, cb) {
        return this.request("UpdateJob", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

伸缩
     */
    async DeleteRsgAsGroup(req, cb) {
        return this.request("DeleteRsgAsGroup", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

删除资源组
     */
    async DeleteResourceGroup(req, cb) {
        return this.request("DeleteResourceGroup", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

删除运行环境
     */
    async DeleteRuntime(req, cb) {
        return this.request("DeleteRuntime", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

暴露服务
     */
    async ExposeService(req, cb) {
        return this.request("ExposeService", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

删除任务
     */
    async DeleteJob(req, cb) {
        return this.request("DeleteJob", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

启用资源组的伸缩组
     */
    async EnableRsgAsGroup(req, cb) {
        return this.request("EnableRsgAsGroup", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

描述服务配置
     */
    async DescribeServiceConfigs(req, cb) {
        return this.request("DescribeServiceConfigs", req, cb);
    }
    /**
     * 因业务策略调整，腾讯云TI平台TI-EMS已经于2022年6月30日下线并停止提供服务。若您有新增的业务需求，可前往TI-ONE(https://cloud.tencent.com/document/product/851)使用。

查询资源组的伸缩组信息
     */
    async DescribeRsgAsGroups(req, cb) {
        return this.request("DescribeRsgAsGroups", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249536, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tiia = void 0;
const v20190529_1 = require("./v20190529");
exports.tiia = {
    v20190529: v20190529_1.v20190529,
};

}, function(modId) { var map = {"./v20190529":1738984249537}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249537, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190529 = void 0;
const Models = require("./tiia_models");
const tiia_client_1 = require("./tiia_client");
exports.v20190529 = {
    Client: tiia_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tiia_models":1738984249538,"./tiia_client":1738984249539}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249538, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249539, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tiia client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tiia.tencentcloudapi.com", "2019-05-29", clientConfig);
    }
    /**
     * 文件封识别可检测图片中是否包含符合文件封（即文件、单据、资料等的袋状包装）特征的物品，覆盖顺丰快递文件封、文件袋、档案袋等多种文件封类型，可应用于物流行业对文件快递的包装审核等场景。

>?
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async DetectEnvelope(req, cb) {
        return this.request("DetectEnvelope", req, cb);
    }
    /**
     * 获取指定图片库中的图片列表。

>
- 可前往 [图像搜索](https://cloud.tencent.com/document/product/1589) 产品文档中查看更多产品信息。
     */
    async DescribeImages(req, cb) {
        return this.request("DescribeImages", req, cb);
    }
    /**
     * 传入一张图片，识别出图片中是否存在宠物
>
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async DetectPet(req, cb) {
        return this.request("DetectPet", req, cb);
    }
    /**
     * 本接口用于创建一个空的图片库，图片库主要用于存储在创建图片时提取的图片特征数据，如果图片库已存在则返回错误。不同的图片库类型对应不同的图像搜索服务类型，根据输入参数GroupType区分。

<table>
    <th>服务类型</th><th>GroupType</th><th>功能描述</th>
    <tr>
        <td>通用图像搜索</td>
        <td>4</td>
        <td>通用图像搜索1.0版。<br>在自建图片库中搜索相同原图或相似图片集，并给出相似度打分，可支持裁剪、翻转、调色、加水印等二次编辑后的图片搜索。适用于图片版权保护、原图查询等场景。</td>
    </tr>
    <tr>
        <td rowspan="3">商品图像搜索</td>
        <td>8</td>
         <td>商品图像搜索3.0升级版（推荐）。<br>
        在自建图库中搜索同款或相似商品，并给出相似度打分。对于服饰类商品可支持识别服饰类别、属性等信息。适用于商品分类、检索、推荐等电商场景。</td>
    </tr>
 <tr>
        <td>7</td>
        <td>商品图像搜索2.0版。<br>
         功能和3.0升级版类似。</td>
    </tr>
     <tr>
        <td>5</td>
        <td>商品图像搜索1.0版。<br>
        功能和3.0升级版类似。</td>
    </tr>
    <tr>
    <td>图案花纹搜索</td><td>6</td><td>图案花纹搜索1.0版。<br>
    在自建图库中搜索相似的图案、logo、纹理等图像元素或主体，并给出相似度打分。</td>
    </tr>
</table>

- 可前往 [图像搜索](https://cloud.tencent.com/document/product/1589) 产品文档中查看更多产品信息。
     */
    async CreateGroup(req, cb) {
        return this.request("CreateGroup", req, cb);
    }
    /**
     * 车辆识别（增强版）在车辆识别的基础上**增加了车牌识别的功能，并升级了车型识别的效果**。可对图片中车辆的车型和车牌进行同时识别，输出车辆的车牌信息，以及车辆品牌（如路虎）、车系（如神行者2）、类型（如中型SUV）、颜色和车辆在图中的坐标等信息，覆盖轿车、SUV、大型客车等市面常见车，支持三千多种车辆型号。如果图片中存在多辆车，会分别输出每辆车的车型、车牌和坐标。

>?
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async RecognizeCarPro(req, cb) {
        return this.request("RecognizeCarPro", req, cb);
    }
    /**
     * 图像标签利用深度学习技术，可以对图片进行智能分类、物体识别等。

目前支持八个大类、六十多个子类、数千个标签，涵盖各种日常场景、动植物、物品、美食等。

图像标签提供四个版本供选择：

• 摄像头版：针对搜索、手机摄像头照片进行优化，涵盖大量卡证、日常物品、二维码条形码。

• 相册版：针对手机相册、网盘进行优化，去除相册和网盘中不常见的标签，针对相册常见图片类型（人像、日常活动、日常物品等）识别效果更好。

• 网络版：针对网络图片进行优化，涵盖标签更多，满足长尾识别需求。

• 新闻版：针对新闻、资讯、广电等行业进行优化，增加定制识别，支持万级图像标签。

为了方便使用、减少图片传输次数，图像标签将不同版本包装成多合一接口，实际上是多个服务，分别计费。建议在接入初期，对四个版本进行对比评估后选择合适的版本使用。

>?
- 图像标签已升级服务，建议使用新版接口[通用图像标签](https://cloud.tencent.com/document/product/865/75196)。
- 图像标签摄像头版、相册版、网络版、新闻版分别按照各自的实际使用次数进行收费，例如一张图片同时使用相册版、摄像头版，则按照两次调用计费。建议测试对比后从中选择一个最合适的版本使用即可。

>
- 可前往 [图像标签](https://cloud.tencent.com/document/product/1588) 产品文档中查看更多产品信息。
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async DetectLabel(req, cb) {
        return this.request("DetectLabel", req, cb);
    }
    /**
     * 可对图片中厨师穿戴进行识别，支持厨师服识别，厨师帽识别，赤膊识别和口罩识别,可应用于明厨亮灶场景。
"被优选过滤"标签值在人体优选开关开启时才会返回。
厨师服：厨师服定义为白色上衣
厨师服识别(酒店版)：厨师服定义为红色，白色，黑色上衣

|序号 | 标签名称 | 标签值 |
| :-----|  :----------   |:-----------------  |
| 1 | 厨师服识别<div style="width: 70pt"/> |无厨师服、有厨师服、被优选过滤|
| 2 | 厨师服识别（酒店版）<div style="width: 70pt"/> |无厨师服、有厨师服、被优选过滤|
| 3 | 厨师帽识别<div style="width: 70pt"/> |无厨师帽、有厨师帽、被优选过滤	|
| 4 | 赤膊识别<div style="width: 70pt"/> |非赤膊、赤膊、被优选过滤|
| 5 | 口罩识别<div style="width: 70pt"/> |无口罩、有口罩、口罩不确定、被优选过滤	|
     */
    async DetectChefDress(req, cb) {
        return this.request("DetectChefDress", req, cb);
    }
    /**
     * 删除图片。

>
- 可前往 [图像搜索](https://cloud.tencent.com/document/product/1589) 产品文档中查看更多产品信息。
     */
    async DeleteImages(req, cb) {
        return this.request("DeleteImages", req, cb);
    }
    /**
     * 根据输入的裁剪比例，智能判断一张图片的最佳裁剪区域，确保原图的主体区域不受影响，以适应不同平台、设备的展示要求，避免简单拉伸带来的变形。

>
- 可前往 [图像处理](https://cloud.tencent.com/document/product/1590) 产品文档中查看更多产品信息。
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async CropImage(req, cb) {
        return this.request("CropImage", req, cb);
    }
    /**
     * 传入一张图片，输出清晰度提升后的图片。

可以消除图片有损压缩导致的噪声，和使用滤镜、拍摄失焦导致的模糊。让图片的边缘和细节更加清晰自然。

>
- 可前往 [图像处理](https://cloud.tencent.com/document/product/1590) 产品文档中查看更多产品信息。
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async EnhanceImage(req, cb) {
        return this.request("EnhanceImage", req, cb);
    }
    /**
     * 创建图片，并添加对应图片的自定义信息。模型将在创建图片时自动提取图像特征并存储到指定的图片库中，每创建一张图片会对应提取和存储一条图片特征数据。

>
- 可前往 [图像搜索](https://cloud.tencent.com/document/product/1589) 产品文档中查看更多产品信息。
     */
    async CreateImage(req, cb) {
        return this.request("CreateImage", req, cb);
    }
    /**
     * 通用图像标签可识别数千种常见物体或场景，覆盖日常物品、场景、动物、植物、食物、饮品、交通工具等多个大类，返回主体的标签名称和所属细分类目等。

>
- 可前往 [图像标签](https://cloud.tencent.com/document/product/1588) 产品文档中查看更多产品信息。
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async DetectLabelPro(req, cb) {
        return this.request("DetectLabelPro", req, cb);
    }
    /**
     * 评估输入图片在视觉上的质量，从多个方面评估，并同时给出综合的、客观的清晰度评分，和主观的美观度评分。

>
- 可前往 [图像处理](https://cloud.tencent.com/document/product/1590) 产品文档中查看更多产品信息。
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async AssessQuality(req, cb) {
        return this.request("AssessQuality", req, cb);
    }
    /**
     * 输入一张图片，返回AI针对一张图片是否是恶心的一系列判断值。

通过恶心图片识别, 可以判断一张图片是否令人恶心, 同时给出它属于的潜在类别, 让您能够过滤掉使人不愉快的图片。
>
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async DetectDisgust(req, cb) {
        return this.request("DetectDisgust", req, cb);
    }
    /**
     * 查询所有的图库信息。

>
- 可前往 [图像搜索](https://cloud.tencent.com/document/product/1589) 产品文档中查看更多产品信息。
     */
    async DescribeGroups(req, cb) {
        return this.request("DescribeGroups", req, cb);
    }
    /**
     * 可以识别输入的图片中是否包含不良行为，例如打架斗殴、赌博、抽烟等，可以应用于广告图、直播截图、短视频截图等审核，减少不良行为对平台内容质量的影响，维护健康向上的互联网环境。
>
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async DetectMisbehavior(req, cb) {
        return this.request("DetectMisbehavior", req, cb);
    }
    /**
     * 本接口支持识别图片中包含的商品，能够输出商品的品类名称、类别，还可以输出商品在图片中的位置。支持一张图片多个商品的识别。
>?
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async DetectProduct(req, cb) {
        return this.request("DetectProduct", req, cb);
    }
    /**
     * 安全属性识别可对图片中人体安全防护属性进行识别，支持识别安全帽，反光衣，护目镜，工服，手套，工地安全带，口罩，抽烟，玩手机等多种属性。
"被优选过滤"标签值在人体优选开关开启时才会返回。

|序号 | 标签名称 | 标签值 |
| :-----|  :----------   |:-----------------  |
| 1 | 安全帽识别<div style="width: 70pt"/> |无安全帽、有安全帽、被优选过滤|
| 2 | 玩手机识别<div style="width: 70pt"/> |没有电话、打电话、玩手机、被优选过滤|
| 3 | 抽烟识别<div style="width: 70pt"/> |没有抽烟、抽烟、被优选过滤	|
| 4 | 口罩识别<div style="width: 70pt"/> |无口罩、有口罩、口罩不确定、被优选过滤|
| 5 | 工地安全带识别<div style="width: 70pt"/> |无工地安全带、工地安全带、被优选过滤	|
| 6 | 手套识别<div style="width: 70pt"/> |无手套、有手套、手套不确定、被优选过滤	|
| 7 | 工服识别<div style="width: 70pt"/> |无工服、有工服、被优选过滤|
| 8 | 护目镜识别<div style="width: 70pt"/> |无护目镜、有护目镜、被优选过滤|
| 9 | 反光衣识别<div style="width: 70pt"/> |无反光衣、有反光衣、被优选过滤|
     */
    async DetectSecurity(req, cb) {
        return this.request("DetectSecurity", req, cb);
    }
    /**
     * 车辆识别可对图片中车辆的车型进行识别，输出车辆的品牌（如路虎）、车系（如神行者2）、类型（如中型SUV）、颜色和车辆在图中的坐标等信息，覆盖轿车、SUV、大型客车等市面常见车，支持三千多种车辆型号。如果图片中存在多辆车，会分别输出每辆车的车型和坐标。

>?
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async RecognizeCar(req, cb) {
        return this.request("RecognizeCar", req, cb);
    }
    /**
     * 图像标签测试接口

>
- 公共参数中的签名方式必须指定为V3版本，即配置SignatureMethod参数为TC3-HMAC-SHA256。
     */
    async DetectLabelBeta(req, cb) {
        return this.request("DetectLabelBeta", req, cb);
    }
    /**
     * 本接口用于对一张图片，在指定图片库中检索出与之相似的图片列表。

>
- 可前往 [图像搜索](https://cloud.tencent.com/document/product/1589) 产品文档中查看更多产品信息。
     */
    async SearchImage(req, cb) {
        return this.request("SearchImage", req, cb);
    }
    /**
     * 本接口支持根据图库ID、物品ID、图片名称来修改图片信息（暂仅支持修改Tags）

>
- 可前往 [图像搜索](https://cloud.tencent.com/document/product/1589) 产品文档中查看更多产品信息。
     */
    async UpdateImage(req, cb) {
        return this.request("UpdateImage", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249540, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tione = void 0;
const v20191022_1 = require("./v20191022");
const v20211111_1 = require("./v20211111");
exports.tione = {
    v20191022: v20191022_1.v20191022,
    v20211111: v20211111_1.v20211111,
};

}, function(modId) { var map = {"./v20191022":1738984249541,"./v20211111":1738984249544}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249541, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20191022 = void 0;
const Models = require("./tione_models");
const tione_client_1 = require("./tione_client");
exports.v20191022 = {
    Client: tione_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tione_models":1738984249542,"./tione_client":1738984249543}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249542, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249543, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tione client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tione.tencentcloudapi.com", "2019-10-22", clientConfig);
    }
    /**
     * 更新Notebook实例
     */
    async UpdateNotebookInstance(req, cb) {
        return this.request("UpdateNotebookInstance", req, cb);
    }
    /**
     * 查看notebook生命周期脚本列表
     */
    async DescribeNotebookLifecycleScripts(req, cb) {
        return this.request("DescribeNotebookLifecycleScripts", req, cb);
    }
    /**
     * 启动Notebook实例
     */
    async StartNotebookInstance(req, cb) {
        return this.request("StartNotebookInstance", req, cb);
    }
    /**
     * 删除notebook实例
     */
    async DeleteNotebookInstance(req, cb) {
        return this.request("DeleteNotebookInstance", req, cb);
    }
    /**
     * 查看notebook生命周期脚本详情
     */
    async DescribeNotebookLifecycleScript(req, cb) {
        return this.request("DescribeNotebookLifecycleScript", req, cb);
    }
    /**
     * 创建Notebook授权Url
     */
    async CreatePresignedNotebookInstanceUrl(req, cb) {
        return this.request("CreatePresignedNotebookInstanceUrl", req, cb);
    }
    /**
     * 创建存储库
     */
    async CreateCodeRepository(req, cb) {
        return this.request("CreateCodeRepository", req, cb);
    }
    /**
     * 查询训练任务
     */
    async DescribeTrainingJob(req, cb) {
        return this.request("DescribeTrainingJob", req, cb);
    }
    /**
     * 停止Notebook实例
     */
    async StopNotebookInstance(req, cb) {
        return this.request("StopNotebookInstance", req, cb);
    }
    /**
     * 创建Notebook实例
     */
    async CreateNotebookInstance(req, cb) {
        return this.request("CreateNotebookInstance", req, cb);
    }
    /**
     * 查询存储库详情
     */
    async DescribeCodeRepository(req, cb) {
        return this.request("DescribeCodeRepository", req, cb);
    }
    /**
     * 查询训练任务列表
     */
    async DescribeTrainingJobs(req, cb) {
        return this.request("DescribeTrainingJobs", req, cb);
    }
    /**
     * 删除存储库
     */
    async DeleteCodeRepository(req, cb) {
        return this.request("DeleteCodeRepository", req, cb);
    }
    /**
     * 查询Notebook概览数据
     */
    async DescribeNotebookSummary(req, cb) {
        return this.request("DescribeNotebookSummary", req, cb);
    }
    /**
     * 创建Notebook生命周期脚本
     */
    async CreateNotebookLifecycleScript(req, cb) {
        return this.request("CreateNotebookLifecycleScript", req, cb);
    }
    /**
     * 删除Notebook生命周期脚本
     */
    async DeleteNotebookLifecycleScript(req, cb) {
        return this.request("DeleteNotebookLifecycleScript", req, cb);
    }
    /**
     * 查询Notebook实例详情
     */
    async DescribeNotebookInstance(req, cb) {
        return this.request("DescribeNotebookInstance", req, cb);
    }
    /**
     * 更新存储库
     */
    async UpdateCodeRepository(req, cb) {
        return this.request("UpdateCodeRepository", req, cb);
    }
    /**
     * 查询Notebook实例列表
     */
    async DescribeNotebookInstances(req, cb) {
        return this.request("DescribeNotebookInstances", req, cb);
    }
    /**
     * 创建训练任务
     */
    async CreateTrainingJob(req, cb) {
        return this.request("CreateTrainingJob", req, cb);
    }
    /**
     * 查询存储库列表
     */
    async DescribeCodeRepositories(req, cb) {
        return this.request("DescribeCodeRepositories", req, cb);
    }
    /**
     * 停止训练任务
     */
    async StopTrainingJob(req, cb) {
        return this.request("StopTrainingJob", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249544, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20211111 = void 0;
const Models = require("./tione_models");
const tione_client_1 = require("./tione_client");
exports.v20211111 = {
    Client: tione_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tione_models":1738984249545,"./tione_client":1738984249546}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249545, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249546, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tione client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tione.tencentcloudapi.com", "2021-11-11", clientConfig);
    }
    /**
     * 查询模型版本
     */
    async DescribeTrainingModelVersion(req, cb) {
        return this.request("DescribeTrainingModelVersion", req, cb);
    }
    /**
     * 查询单个服务
     */
    async DescribeModelService(req, cb) {
        return this.request("DescribeModelService", req, cb);
    }
    /**
     * 本接口(DescribeBillingSpecs) 提供查询计费项列表
     */
    async DescribeBillingSpecs(req, cb) {
        return this.request("DescribeBillingSpecs", req, cb);
    }
    /**
     * 导入模型
     */
    async CreateTrainingModel(req, cb) {
        return this.request("CreateTrainingModel", req, cb);
    }
    /**
     * 本接口(DescribeBillingSpecsPrice)用于查询按量计费计费项价格。
     */
    async DescribeBillingSpecsPrice(req, cb) {
        return this.request("DescribeBillingSpecsPrice", req, cb);
    }
    /**
     * 展示服务的调用信息
     */
    async DescribeModelServiceCallInfo(req, cb) {
        return this.request("DescribeModelServiceCallInfo", req, cb);
    }
    /**
     * 训练任务列表
     */
    async DescribeTrainingTasks(req, cb) {
        return this.request("DescribeTrainingTasks", req, cb);
    }
    /**
     * 获取内置镜像列表
     */
    async DescribeBuildInImages(req, cb) {
        return this.request("DescribeBuildInImages", req, cb);
    }
    /**
     * 启动Notebook
     */
    async StartNotebook(req, cb) {
        return this.request("StartNotebook", req, cb);
    }
    /**
     * 删除数据集
     */
    async DeleteDataset(req, cb) {
        return this.request("DeleteDataset", req, cb);
    }
    /**
     * 删除Notebook
     */
    async DeleteNotebook(req, cb) {
        return this.request("DeleteNotebook", req, cb);
    }
    /**
     * 训练任务详情
     */
    async DescribeTrainingTask(req, cb) {
        return this.request("DescribeTrainingTask", req, cb);
    }
    /**
     * 训练任务pod列表
     */
    async DescribeTrainingTaskPods(req, cb) {
        return this.request("DescribeTrainingTaskPods", req, cb);
    }
    /**
     * 用于查询模型服务能否开启热更新
     */
    async DescribeModelServiceHotUpdated(req, cb) {
        return this.request("DescribeModelServiceHotUpdated", req, cb);
    }
    /**
     * 查询模型优化任务详情
     */
    async DescribeModelAccelerateTask(req, cb) {
        return this.request("DescribeModelAccelerateTask", req, cb);
    }
    /**
     * 该接口支持与自行部署的大模型的聊天。
     */
    async ChatCompletion(req, cb) {
        return this.request("ChatCompletion", req, cb);
    }
    /**
     * 模型加速之后的模型版本列表
     */
    async DescribeModelAccelerateVersions(req, cb) {
        return this.request("DescribeModelAccelerateVersions", req, cb);
    }
    /**
     * 创建数据集
     */
    async CreateDataset(req, cb) {
        return this.request("CreateDataset", req, cb);
    }
    /**
     * 创建Notebook
     */
    async CreateNotebook(req, cb) {
        return this.request("CreateNotebook", req, cb);
    }
    /**
     * 查询单个服务组
     */
    async DescribeModelServiceGroup(req, cb) {
        return this.request("DescribeModelServiceGroup", req, cb);
    }
    /**
     * 根据服务组id删除服务组下所有模型服务
     */
    async DeleteModelServiceGroup(req, cb) {
        return this.request("DeleteModelServiceGroup", req, cb);
    }
    /**
     * 上报训练自定义指标
     */
    async PushTrainingMetrics(req, cb) {
        return this.request("PushTrainingMetrics", req, cb);
    }
    /**
     * 模型版本列表
     */
    async DescribeTrainingModelVersions(req, cb) {
        return this.request("DescribeTrainingModelVersions", req, cb);
    }
    /**
     * 用于创建、发布一个新的模型服务
     */
    async CreateModelService(req, cb) {
        return this.request("CreateModelService", req, cb);
    }
    /**
     * 生成Notebook访问链接
     */
    async CreatePresignedNotebookUrl(req, cb) {
        return this.request("CreatePresignedNotebookUrl", req, cb);
    }
    /**
     * 根据服务id删除模型服务
     */
    async DeleteModelService(req, cb) {
        return this.request("DeleteModelService", req, cb);
    }
    /**
     * 查询数据集列表
     */
    async DescribeDatasets(req, cb) {
        return this.request("DescribeDatasets", req, cb);
    }
    /**
     * 查询资源组节点运行中的任务
     */
    async DescribeBillingResourceInstanceRunningJobs(req, cb) {
        return this.request("DescribeBillingResourceInstanceRunningJobs", req, cb);
    }
    /**
     * 用于更新模型服务
     */
    async ModifyModelService(req, cb) {
        return this.request("ModifyModelService", req, cb);
    }
    /**
     * Notebook列表
     */
    async DescribeNotebooks(req, cb) {
        return this.request("DescribeNotebooks", req, cb);
    }
    /**
     * 删除模型
     */
    async DeleteTrainingModel(req, cb) {
        return this.request("DeleteTrainingModel", req, cb);
    }
    /**
     * 停止模型加速任务
     */
    async StopModelAccelerateTask(req, cb) {
        return this.request("StopModelAccelerateTask", req, cb);
    }
    /**
     * 查询资源组节点列表
     */
    async DescribeBillingResourceGroup(req, cb) {
        return this.request("DescribeBillingResourceGroup", req, cb);
    }
    /**
     * Notebook详情
     */
    async DescribeNotebook(req, cb) {
        return this.request("DescribeNotebook", req, cb);
    }
    /**
     * 删除模型版本
     */
    async DeleteTrainingModelVersion(req, cb) {
        return this.request("DeleteTrainingModelVersion", req, cb);
    }
    /**
     * 查询资源组详情
     */
    async DescribeBillingResourceGroups(req, cb) {
        return this.request("DescribeBillingResourceGroups", req, cb);
    }
    /**
     * 查询推理镜像模板
     */
    async DescribeInferTemplates(req, cb) {
        return this.request("DescribeInferTemplates", req, cb);
    }
    /**
     * 列举在线推理服务组
     */
    async DescribeModelServiceGroups(req, cb) {
        return this.request("DescribeModelServiceGroups", req, cb);
    }
    /**
     * 停止Notebook
     */
    async StopNotebook(req, cb) {
        return this.request("StopNotebook", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249547, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tiw = void 0;
const v20190919_1 = require("./v20190919");
exports.tiw = {
    v20190919: v20190919_1.v20190919,
};

}, function(modId) { var map = {"./v20190919":1738984249548}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249548, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190919 = void 0;
const Models = require("./tiw_models");
const tiw_client_1 = require("./tiw_client");
exports.v20190919 = {
    Client: tiw_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tiw_models":1738984249549,"./tiw_client":1738984249550}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249549, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249550, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tiw client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tiw.tencentcloudapi.com", "2019-09-19", clientConfig);
    }
    /**
     * 查询文档转码，实时录制存储桶的配置
     */
    async DescribeWhiteboardBucketConfig(req, cb) {
        return this.request("DescribeWhiteboardBucketConfig", req, cb);
    }
    /**
     * 设置实时录制回调地址，回调数据格式请参考文档：https://cloud.tencent.com/document/product/1137/40258
     */
    async SetOnlineRecordCallback(req, cb) {
        return this.request("SetOnlineRecordCallback", req, cb);
    }
    /**
     * 查询客户端白板日志
     */
    async DescribeBoardSDKLog(req, cb) {
        return this.request("DescribeBoardSDKLog", req, cb);
    }
    /**
     * 查询白板用户列表
     */
    async DescribeUserList(req, cb) {
        return this.request("DescribeUserList", req, cb);
    }
    /**
     * 设置录制视频生成回调地址
     */
    async SetVideoGenerationTaskCallback(req, cb) {
        return this.request("SetVideoGenerationTaskCallback", req, cb);
    }
    /**
     * 根据房间号搜索实时录制任务
     */
    async DescribeRecordSearch(req, cb) {
        return this.request("DescribeRecordSearch", req, cb);
    }
    /**
     * 检测PPT文件，识别PPT中包含的动态转码任务（Transcode）不支持的元素
     */
    async CreatePPTCheckTask(req, cb) {
        return this.request("CreatePPTCheckTask", req, cb);
    }
    /**
     * 设置实时录制回调鉴权密钥，回调鉴权方式请参考文档：https://cloud.tencent.com/document/product/1137/40257
     */
    async SetOnlineRecordCallbackKey(req, cb) {
        return this.request("SetOnlineRecordCallbackKey", req, cb);
    }
    /**
     * 查询白板应用任务相关的配置，包括存储桶、回调等
     */
    async DescribeWhiteboardApplicationConfig(req, cb) {
        return this.request("DescribeWhiteboardApplicationConfig", req, cb);
    }
    /**
     * 设置文档转码回调地址，回调数据格式请参考文档：https://cloud.tencent.com/document/product/1137/40260
     */
    async SetTranscodeCallback(req, cb) {
        return this.request("SetTranscodeCallback", req, cb);
    }
    /**
     * 恢复实时录制
     */
    async ResumeOnlineRecord(req, cb) {
        return this.request("ResumeOnlineRecord", req, cb);
    }
    /**
     * 申请互动白板试用，默认15天
     */
    async ApplyTiwTrial(req, cb) {
        return this.request("ApplyTiwTrial", req, cb);
    }
    /**
     * 查询PPT检测任务回调地址
     */
    async DescribePPTCheckCallback(req, cb) {
        return this.request("DescribePPTCheckCallback", req, cb);
    }
    /**
     * 查询互动白板房间维度每天计费用量。
1. 单次查询统计区间最多不能超过31天。
2. 由于统计延迟等原因，暂时不支持查询当天数据，建议在次日上午7点以后再来查询前一天的用量，例如在10月27日上午7点后，再来查询到10月26日整天的用量

     */
    async DescribeTIWRoomDailyUsage(req, cb) {
        return this.request("DescribeTIWRoomDailyUsage", req, cb);
    }
    /**
     * 设置文档转码回调鉴权密钥，回调鉴权方式请参考文档：https://cloud.tencent.com/document/product/1137/40257
     */
    async SetTranscodeCallbackKey(req, cb) {
        return this.request("SetTranscodeCallbackKey", req, cb);
    }
    /**
     * 设置PPT检测任务回调密钥，回调鉴权方式请参考文档：https://cloud.tencent.com/document/product/1137/40257
     */
    async SetPPTCheckCallbackKey(req, cb) {
        return this.request("SetPPTCheckCallbackKey", req, cb);
    }
    /**
     * 创建白板板书生成任务, 在任务结束后，如果提供了回调地址，将通过回调地址通知板书生成结果
     */
    async CreateSnapshotTask(req, cb) {
        return this.request("CreateSnapshotTask", req, cb);
    }
    /**
     * 设置PPT检测任务回调地址，回调数据格式请参考文档：https://cloud.tencent.com/document/product/1137/40260#c9cbe05f-fe1a-4410-b4dc-40cc301c7b81
     */
    async SetPPTCheckCallback(req, cb) {
        return this.request("SetPPTCheckCallback", req, cb);
    }
    /**
     * 通过文档URL查询转码任务，返回最近一次的转码任务状态
     */
    async DescribeTranscodeByUrl(req, cb) {
        return this.request("DescribeTranscodeByUrl", req, cb);
    }
    /**
     * 查询录制视频生成回调地址
     */
    async DescribeVideoGenerationTaskCallback(req, cb) {
        return this.request("DescribeVideoGenerationTaskCallback", req, cb);
    }
    /**
     * 修改白板应用
     */
    async ModifyApplication(req, cb) {
        return this.request("ModifyApplication", req, cb);
    }
    /**
     * 修改白板应用任务相关的配置，包括存储桶、回调等
     */
    async ModifyWhiteboardApplicationConfig(req, cb) {
        return this.request("ModifyWhiteboardApplicationConfig", req, cb);
    }
    /**
     * 查询录制任务状态与结果
     */
    async DescribeOnlineRecord(req, cb) {
        return this.request("DescribeOnlineRecord", req, cb);
    }
    /**
     * 设置白板月功能费自动续费
     */
    async ModifyAutoRenewFlag(req, cb) {
        return this.request("ModifyAutoRenewFlag", req, cb);
    }
    /**
     * 查询实时录制回调地址
     */
    async DescribeOnlineRecordCallback(req, cb) {
        return this.request("DescribeOnlineRecordCallback", req, cb);
    }
    /**
     * 查询文档转码回调地址
     */
    async DescribeTranscodeCallback(req, cb) {
        return this.request("DescribeTranscodeCallback", req, cb);
    }
    /**
     * 设置告警回调地址。此功能需要申请白名单使用。
     */
    async SetWarningCallback(req, cb) {
        return this.request("SetWarningCallback", req, cb);
    }
    /**
     * 通过服务角色调用其他云产品API接口获取信息
     */
    async DescribeAPIService(req, cb) {
        return this.request("DescribeAPIService", req, cb);
    }
    /**
     * 查询白板推流回调地址
     */
    async DescribeWhiteboardPushCallback(req, cb) {
        return this.request("DescribeWhiteboardPushCallback", req, cb);
    }
    /**
     * 查询白板应用详情
     */
    async DescribeApplicationInfos(req, cb) {
        return this.request("DescribeApplicationInfos", req, cb);
    }
    /**
     * 发起一个实时录制任务
     */
    async StartOnlineRecord(req, cb) {
        return this.request("StartOnlineRecord", req, cb);
    }
    /**
     * 查询用户后付费用量
     */
    async DescribePostpaidUsage(req, cb) {
        return this.request("DescribePostpaidUsage", req, cb);
    }
    /**
     * 创建一个文档转码任务
     */
    async CreateTranscode(req, cb) {
        return this.request("CreateTranscode", req, cb);
    }
    /**
     * 按文档名称搜索转码任务
     */
    async DescribeTranscodeSearch(req, cb) {
        return this.request("DescribeTranscodeSearch", req, cb);
    }
    /**
     * 查询客户资源列表
     */
    async DescribeUserResources(req, cb) {
        return this.request("DescribeUserResources", req, cb);
    }
    /**
     * 设置白板推流回调地址，回调数据格式请参考文档：https://cloud.tencent.com/document/product/1137/40257
     */
    async SetWhiteboardPushCallback(req, cb) {
        return this.request("SetWhiteboardPushCallback", req, cb);
    }
    /**
     * 查询告警回调地址。此功能需要申请白名单使用。
     */
    async DescribeWarningCallback(req, cb) {
        return this.request("DescribeWarningCallback", req, cb);
    }
    /**
     * 创建视频生成任务
     */
    async CreateVideoGenerationTask(req, cb) {
        return this.request("CreateVideoGenerationTask", req, cb);
    }
    /**
     * 查询文档转码任务的执行进度与转码结果
     */
    async DescribeTranscode(req, cb) {
        return this.request("DescribeTranscode", req, cb);
    }
    /**
     * 停止实时录制
     */
    async StopOnlineRecord(req, cb) {
        return this.request("StopOnlineRecord", req, cb);
    }
    /**
     * 查询指定时间段内子产品的用量汇总
     */
    async DescribeUsageSummary(req, cb) {
        return this.request("DescribeUsageSummary", req, cb);
    }
    /**
     * 设置白板推流回调鉴权密钥，回调鉴权方式请参考文档：https://cloud.tencent.com/document/product/1137/40257
     */
    async SetWhiteboardPushCallbackKey(req, cb) {
        return this.request("SetWhiteboardPushCallbackKey", req, cb);
    }
    /**
     * 根据房间号搜索白板推流任务
     */
    async DescribeWhiteboardPushSearch(req, cb) {
        return this.request("DescribeWhiteboardPushSearch", req, cb);
    }
    /**
     * 查询录制视频生成任务状态与结果
     */
    async DescribeVideoGenerationTask(req, cb) {
        return this.request("DescribeVideoGenerationTask", req, cb);
    }
    /**
     * 创建白板应用
     */
    async CreateApplication(req, cb) {
        return this.request("CreateApplication", req, cb);
    }
    /**
     * 根据指定的任务类型，获取当前正在执行中的任务列表。只能查询最近3天内创建的任务。
     */
    async DescribeRunningTasks(req, cb) {
        return this.request("DescribeRunningTasks", req, cb);
    }
    /**
     * 查询互动白板天维度计费用量。
1. 单次查询统计区间最多不能超过31天。
2. 由于统计延迟等原因，暂时不支持查询当天数据，建议在次日上午7点以后再来查询前一天的用量，例如在10月27日上午7点后，再来查询到10月26日整天的用量

     */
    async DescribeTIWDailyUsage(req, cb) {
        return this.request("DescribeTIWDailyUsage", req, cb);
    }
    /**
     * 停止白板推流任务
     */
    async StopWhiteboardPush(req, cb) {
        return this.request("StopWhiteboardPush", req, cb);
    }
    /**
     * 查询可用于创建白板应用的IM应用列表
     */
    async DescribeIMApplications(req, cb) {
        return this.request("DescribeIMApplications", req, cb);
    }
    /**
     * 查询互动白板质量数据
     */
    async DescribeQualityMetrics(req, cb) {
        return this.request("DescribeQualityMetrics", req, cb);
    }
    /**
     * 发起一个白板推流任务
     */
    async StartWhiteboardPush(req, cb) {
        return this.request("StartWhiteboardPush", req, cb);
    }
    /**
     * 暂停实时录制
     */
    async PauseOnlineRecord(req, cb) {
        return this.request("PauseOnlineRecord", req, cb);
    }
    /**
     * 查询互动白板各个子产品用量
     */
    async DescribeApplicationUsage(req, cb) {
        return this.request("DescribeApplicationUsage", req, cb);
    }
    /**
     * 查询白板房间列表
     */
    async DescribeRoomList(req, cb) {
        return this.request("DescribeRoomList", req, cb);
    }
    /**
     * 设置视频生成回调鉴权密钥
     */
    async SetVideoGenerationTaskCallbackKey(req, cb) {
        return this.request("SetVideoGenerationTaskCallbackKey", req, cb);
    }
    /**
     * 查询推流任务状态与结果
     */
    async DescribeWhiteboardPush(req, cb) {
        return this.request("DescribeWhiteboardPush", req, cb);
    }
    /**
     * 查询互动白板用户详情，包括是否开通了互动白板，当前互动白板服务有效期等信息

     */
    async DescribeUserStatus(req, cb) {
        return this.request("DescribeUserStatus", req, cb);
    }
    /**
     * 查询PPT检测任务的执行进度或结果，支持查询最近半年内的任务结果
     */
    async DescribePPTCheck(req, cb) {
        return this.request("DescribePPTCheck", req, cb);
    }
    /**
     * 获取指定白板板书生成任务信息
     */
    async DescribeSnapshotTask(req, cb) {
        return this.request("DescribeSnapshotTask", req, cb);
    }
    /**
     * 设置文档转码，实时录制存储桶的配置
     */
    async ModifyWhiteboardBucketConfig(req, cb) {
        return this.request("ModifyWhiteboardBucketConfig", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249551, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tke = void 0;
const v20220501_1 = require("./v20220501");
const v20180525_1 = require("./v20180525");
exports.tke = {
    v20220501: v20220501_1.v20220501,
    v20180525: v20180525_1.v20180525,
};

}, function(modId) { var map = {"./v20220501":1738984249552,"./v20180525":1738984249555}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249552, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220501 = void 0;
const Models = require("./tke_models");
const tke_client_1 = require("./tke_client");
exports.v20220501 = {
    Client: tke_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tke_models":1738984249553,"./tke_client":1738984249554}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249553, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249554, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tke client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tke.tencentcloudapi.com", "2022-05-01", clientConfig);
    }
    /**
     * 查询 TKE 节点池列表
     */
    async DescribeNodePools(req, cb) {
        return this.request("DescribeNodePools", req, cb);
    }
    /**
     * 更新 TKE 节点池
     */
    async ModifyNodePool(req, cb) {
        return this.request("ModifyNodePool", req, cb);
    }
    /**
     * 重启原生节点实例
     */
    async RebootMachines(req, cb) {
        return this.request("RebootMachines", req, cb);
    }
    /**
     * 删除健康检测策略
     */
    async DeleteHealthCheckPolicy(req, cb) {
        return this.request("DeleteHealthCheckPolicy", req, cb);
    }
    /**
     * 删除 TKE 节点池
     */
    async DeleteNodePool(req, cb) {
        return this.request("DeleteNodePool", req, cb);
    }
    /**
     * 查询健康检测策略
     */
    async DescribeHealthCheckPolicies(req, cb) {
        return this.request("DescribeHealthCheckPolicies", req, cb);
    }
    /**
     * 修改健康检测策略
     */
    async ModifyHealthCheckPolicy(req, cb) {
        return this.request("ModifyHealthCheckPolicy", req, cb);
    }
    /**
     * 本接口 (StopMachines) 用于关闭一个或多个原生节点实例。

只有状态为 Running 的实例才可以进行此操作。
接口调用成功时，实例会进入 Stopping 状态；关闭实例成功时，实例会进入 Stopped 状态。
支持强制关闭。强制关机的效果等同于关闭物理计算机的电源开关。强制关机可能会导致数据丢失或文件系统损坏，请仅在服务器不能正常关机时使用。
支持批量操作。每次请求批量实例的上限为 100。
本接口为同步接口，关闭实例请求发送成功后会返回一个RequestId，此时操作并未立即完成。实例操作结果可以通过调用 DescribeClusterInstances 接口查询，如果实例的状态为stopped_with_charging，则代表关闭实例操作成功。
     */
    async StopMachines(req, cb) {
        return this.request("StopMachines", req, cb);
    }
    /**
     * 创建 TKE 节点池
     */
    async CreateNodePool(req, cb) {
        return this.request("CreateNodePool", req, cb);
    }
    /**
     * 查询健康检测策略模板
     */
    async DescribeHealthCheckTemplate(req, cb) {
        return this.request("DescribeHealthCheckTemplate", req, cb);
    }
    /**
     * 查询健康检测策略绑定关系
     */
    async DescribeHealthCheckPolicyBindings(req, cb) {
        return this.request("DescribeHealthCheckPolicyBindings", req, cb);
    }
    /**
     * 创建健康检测策略
     */
    async CreateHealthCheckPolicy(req, cb) {
        return this.request("CreateHealthCheckPolicy", req, cb);
    }
    /**
     * 本接口 (StartMachines) 用于启动一个或多个原生节点实例。

只有状态为 Stopped 的实例才可以进行此操作。
接口调用成功后，等待一分钟左右，实例会进入 Running 状态。
支持批量操作。每次请求批量实例的上限为100。
本接口为同步接口，启动实例请求发送成功后会返回一个RequestId，此时操作并未立即完成。实例操作结果可以通过调用 DescribeClusterInstances 接口查询，如果实例的状态为 Running，则代表启动实例操作成功。
     */
    async StartMachines(req, cb) {
        return this.request("StartMachines", req, cb);
    }
    /**
     * 查询集群下节点实例信息
     */
    async DescribeClusterInstances(req, cb) {
        return this.request("DescribeClusterInstances", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249555, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180525 = void 0;
const Models = require("./tke_models");
const tke_client_1 = require("./tke_client");
exports.v20180525 = {
    Client: tke_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tke_models":1738984249556,"./tke_client":1738984249557}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249556, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249557, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tke client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tke.tencentcloudapi.com", "2018-05-25", clientConfig);
    }
    /**
     * 解除TMP实例的集群关联
     */
    async DeletePrometheusClusterAgent(req, cb) {
        return this.request("DeletePrometheusClusterAgent", req, cb);
    }
    /**
     * 创建边缘计算ECM机器
     */
    async CreateECMInstances(req, cb) {
        return this.request("CreateECMInstances", req, cb);
    }
    /**
     * 查看超级节点列表
     */
    async DescribeClusterVirtualNode(req, cb) {
        return this.request("DescribeClusterVirtualNode", req, cb);
    }
    /**
     * 创建集群
     */
    async CreateCluster(req, cb) {
        return this.request("CreateCluster", req, cb);
    }
    /**
     * 根据K8S版本获取可选运行时版本
     */
    async DescribeSupportedRuntime(req, cb) {
        return this.request("DescribeSupportedRuntime", req, cb);
    }
    /**
     * 在tke@edge集群的边缘节点上安装日志采集组件
     */
    async InstallEdgeLogAgent(req, cb) {
        return this.request("InstallEdgeLogAgent", req, cb);
    }
    /**
     * 查询opa策略列表
     */
    async DescribeOpenPolicyList(req, cb) {
        return this.request("DescribeOpenPolicyList", req, cb);
    }
    /**
     * 创建超级节点池
     */
    async CreateClusterVirtualNodePool(req, cb) {
        return this.request("CreateClusterVirtualNodePool", req, cb);
    }
    /**
     * 修改集群弹性伸缩属性
     */
    async ModifyClusterAsGroupOptionAttribute(req, cb) {
        return this.request("ModifyClusterAsGroupOptionAttribute", req, cb);
    }
    /**
     * GR集群可以通过本接口附加vpc-cni容器网络插件，开启vpc-cni容器网络能力
     */
    async EnableVpcCniNetworkType(req, cb) {
        return this.request("EnableVpcCniNetworkType", req, cb);
    }
    /**
     * 删除集群(YUNAPI V3版本)
     */
    async DeleteCluster(req, cb) {
        return this.request("DeleteCluster", req, cb);
    }
    /**
     * 升级边缘集群组件到指定版本，此版本为TKEEdge专用版本。
     */
    async UpdateEdgeClusterVersion(req, cb) {
        return this.request("UpdateEdgeClusterVersion", req, cb);
    }
    /**
     * 从tke@edge集群边缘节点上卸载日志采集组件
     */
    async UninstallEdgeLogAgent(req, cb) {
        return this.request("UninstallEdgeLogAgent", req, cb);
    }
    /**
     * 查看开启第三方节点池配置信息
     */
    async DescribeExternalNodeSupportConfig(req, cb) {
        return this.request("DescribeExternalNodeSupportConfig", req, cb);
    }
    /**
     * 删除边缘计算实例
     */
    async DeleteEdgeClusterInstances(req, cb) {
        return this.request("DeleteEdgeClusterInstances", req, cb);
    }
    /**
     * 包括 Pod 资源统计和绑定的预留券资源统计。
     */
    async DescribePostNodeResources(req, cb) {
        return this.request("DescribePostNodeResources", req, cb);
    }
    /**
     * 仅能设置节点池中处于伸缩组的节点
     */
    async SetNodePoolNodeProtection(req, cb) {
        return this.request("SetNodePoolNodeProtection", req, cb);
    }
    /**
     * 查询容器实例的事件
     */
    async DescribeEKSContainerInstanceEvent(req, cb) {
        return this.request("DescribeEKSContainerInstanceEvent", req, cb);
    }
    /**
     * 查询边缘容器集群可用的自定义参数
     */
    async DescribeEdgeAvailableExtraArgs(req, cb) {
        return this.request("DescribeEdgeAvailableExtraArgs", req, cb);
    }
    /**
     * 获取指定子账户在RBAC授权模式中对应kube-apiserver客户端证书的CommonName字段，如果没有客户端证书，将会签发一个，此接口有最大传入子账户数量上限，当前为50
     */
    async DescribeClusterCommonNames(req, cb) {
        return this.request("DescribeClusterCommonNames", req, cb);
    }
    /**
     * 获取2.0实例初始化任务状态
     */
    async DescribePrometheusInstanceInitStatus(req, cb) {
        return this.request("DescribePrometheusInstanceInitStatus", req, cb);
    }
    /**
     * 开启事件持久化功能
     */
    async EnableEventPersistence(req, cb) {
        return this.request("EnableEventPersistence", req, cb);
    }
    /**
     * 获取告警历史
     */
    async DescribePrometheusAlertHistory(req, cb) {
        return this.request("DescribePrometheusAlertHistory", req, cb);
    }
    /**
     * 获取eniipamd组件信息
     */
    async DescribeIPAMD(req, cb) {
        return this.request("DescribeIPAMD", req, cb);
    }
    /**
     * 创建集群路由表
     */
    async CreateClusterRouteTable(req, cb) {
        return this.request("CreateClusterRouteTable", req, cb);
    }
    /**
     * 获得节点升级当前的进度，若集群未处于节点升级状态，则接口会报错：任务未找到。
     */
    async GetUpgradeInstanceProgress(req, cb) {
        return this.request("GetUpgradeInstanceProgress", req, cb);
    }
    /**
     * 创建一个云原生Prometheus模板实例
     */
    async CreatePrometheusTemplate(req, cb) {
        return this.request("CreatePrometheusTemplate", req, cb);
    }
    /**
     * 查询可以用预留券抵扣的 Pod 信息。
     */
    async DescribePodsBySpec(req, cb) {
        return this.request("DescribePodsBySpec", req, cb);
    }
    /**
     * 查询预留实例列表
     */
    async DescribeReservedInstances(req, cb) {
        return this.request("DescribeReservedInstances", req, cb);
    }
    /**
     * 删除超级节点
     */
    async DeleteClusterVirtualNode(req, cb) {
        return this.request("DeleteClusterVirtualNode", req, cb);
    }
    /**
     * 删除备份仓库
     */
    async DeleteBackupStorageLocation(req, cb) {
        return this.request("DeleteBackupStorageLocation", req, cb);
    }
    /**
     * 边缘计算支持版本和k8s版本
     */
    async DescribeAvailableTKEEdgeVersion(req, cb) {
        return this.request("DescribeAvailableTKEEdgeVersion", req, cb);
    }
    /**
     * 查询边缘集群列表
     */
    async DescribeTKEEdgeClusters(req, cb) {
        return this.request("DescribeTKEEdgeClusters", req, cb);
    }
    /**
     * 从TKE集群中卸载CLS日志采集组件
     */
    async UninstallLogAgent(req, cb) {
        return this.request("UninstallLogAgent", req, cb);
    }
    /**
     * 查询正在运行中Pod的计费信息。可以通过 Namespace 和 Name 来查询某个 Pod 的信息，也可以通过 Pod 的 Uid 批量查询。
     */
    async DescribePodChargeInfo(req, cb) {
        return this.request("DescribePodChargeInfo", req, cb);
    }
    /**
     * 获取集群版本信息
     */
    async DescribeVersions(req, cb) {
        return this.request("DescribeVersions", req, cb);
    }
    /**
     * 操作TKE集群的addon
     */
    async ForwardApplicationRequestV3(req, cb) {
        return this.request("ForwardApplicationRequestV3", req, cb);
    }
    /**
     * 修改被关联集群的external labels
     */
    async ModifyPrometheusAgentExternalLabels(req, cb) {
        return this.request("ModifyPrometheusAgentExternalLabels", req, cb);
    }
    /**
     * 查询边缘集群自定义参数
     */
    async DescribeEdgeClusterExtraArgs(req, cb) {
        return this.request("DescribeEdgeClusterExtraArgs", req, cb);
    }
    /**
     * 删除弹性集群(yunapiv3)
     */
    async DeleteEKSCluster(req, cb) {
        return this.request("DeleteEKSCluster", req, cb);
    }
    /**
     * 获取事件、审计和日志的状态
     */
    async DescribeEdgeLogSwitches(req, cb) {
        return this.request("DescribeEdgeLogSwitches", req, cb);
    }
    /**
     * 修改预留券的抵扣范围，抵扣范围取值：Region、Zone 和 Node。
     */
    async ModifyReservedInstanceScope(req, cb) {
        return this.request("ModifyReservedInstanceScope", req, cb);
    }
    /**
     * 获取边缘计算外部访问的kubeconfig
     */
    async DescribeTKEEdgeExternalKubeconfig(req, cb) {
        return this.request("DescribeTKEEdgeExternalKubeconfig", req, cb);
    }
    /**
     * 修改集群标签
     */
    async ModifyClusterTags(req, cb) {
        return this.request("ModifyClusterTags", req, cb);
    }
    /**
     * 创建日志采集配置
     */
    async CreateCLSLogConfig(req, cb) {
        return this.request("CreateCLSLogConfig", req, cb);
    }
    /**
     * 开启集群审计
     */
    async EnableClusterAudit(req, cb) {
        return this.request("EnableClusterAudit", req, cb);
    }
    /**
     * 创建备份仓库，指定了存储仓库类型（如COS）、COS桶地区、名称等信息，当前最多允许创建100个仓库， 注意此接口当前是全局接口，多个地域的TKE集群如果要备份到相同的备份仓库中，不需要重复创建备份仓库
     */
    async CreateBackupStorageLocation(req, cb) {
        return this.request("CreateBackupStorageLocation", req, cb);
    }
    /**
     * 修改超级节点池
     */
    async ModifyClusterVirtualNodePool(req, cb) {
        return this.request("ModifyClusterVirtualNodePool", req, cb);
    }
    /**
     * 获取集群可以升级的所有版本
     */
    async DescribeAvailableClusterVersion(req, cb) {
        return this.request("DescribeAvailableClusterVersion", req, cb);
    }
    /**
     * 修改集群采集配置
     */
    async ModifyPrometheusConfig(req, cb) {
        return this.request("ModifyPrometheusConfig", req, cb);
    }
    /**
     * 本接口查询当前用户和地域在指定可用区下的机型可支持的最大 TKE VPC-CNI 网络模式的 Pod 数量
     */
    async DescribeVpcCniPodLimits(req, cb) {
        return this.request("DescribeVpcCniPodLimits", req, cb);
    }
    /**
     * 升级集群 Master 组件到指定版本
     */
    async UpdateClusterVersion(req, cb) {
        return this.request("UpdateClusterVersion", req, cb);
    }
    /**
     * 在应用市场中查询正在安装中的应用列表
     */
    async DescribeClusterPendingReleases(req, cb) {
        return this.request("DescribeClusterPendingReleases", req, cb);
    }
    /**
     * 创建聚合规则yaml方式
     */
    async CreatePrometheusRecordRuleYaml(req, cb) {
        return this.request("CreatePrometheusRecordRuleYaml", req, cb);
    }
    /**
     * 批量删除镜像缓存
     */
    async DeleteImageCaches(req, cb) {
        return this.request("DeleteImageCaches", req, cb);
    }
    /**
     * 删除集群路由表
     */
    async DeleteClusterRouteTable(req, cb) {
        return this.request("DeleteClusterRouteTable", req, cb);
    }
    /**
     * 获取边缘脚本链接，此接口用于添加第三方节点，通过下载脚本从而将节点添加到边缘集群。
     */
    async DescribeTKEEdgeScript(req, cb) {
        return this.request("DescribeTKEEdgeScript", req, cb);
    }
    /**
     * 修改2.0实例告警策略
     */
    async ModifyPrometheusAlertPolicy(req, cb) {
        return this.request("ModifyPrometheusAlertPolicy", req, cb);
    }
    /**
     * 更新一个addon的参数和版本
     */
    async UpdateAddon(req, cb) {
        return this.request("UpdateAddon", req, cb);
    }
    /**
     * 查看集群认证配置
     */
    async DescribeClusterAuthenticationOptions(req, cb) {
        return this.request("DescribeClusterAuthenticationOptions", req, cb);
    }
    /**
     * 修改集群伸缩组属性
     */
    async ModifyClusterAsGroupAttribute(req, cb) {
        return this.request("ModifyClusterAsGroupAttribute", req, cb);
    }
    /**
     * 为目标集群安装一个addon
     */
    async InstallAddon(req, cb) {
        return this.request("InstallAddon", req, cb);
    }
    /**
     * 删除ECM实例
     */
    async DeleteECMInstances(req, cb) {
        return this.request("DeleteECMInstances", req, cb);
    }
    /**
     * 查询节点池详情
     */
    async DescribeClusterNodePoolDetail(req, cb) {
        return this.request("DescribeClusterNodePoolDetail", req, cb);
    }
    /**
     * 取消模板同步，这将会删除目标中该模板所生产的配置
     */
    async DeletePrometheusTemplateSync(req, cb) {
        return this.request("DeletePrometheusTemplateSync", req, cb);
    }
    /**
     * 扩展(新建)集群节点
     */
    async CreateClusterInstances(req, cb) {
        return this.request("CreateClusterInstances", req, cb);
    }
    /**
     * 修改集群属性
     */
    async ModifyClusterAttribute(req, cb) {
        return this.request("ModifyClusterAttribute", req, cb);
    }
    /**
     * 删除集群伸缩组
     */
    async DeleteClusterAsGroups(req, cb) {
        return this.request("DeleteClusterAsGroups", req, cb);
    }
    /**
     * 删除集群路由
     */
    async DeleteClusterRoute(req, cb) {
        return this.request("DeleteClusterRoute", req, cb);
    }
    /**
     * 在应用市场中集群删除某个应用
     */
    async UninstallClusterRelease(req, cb) {
        return this.request("UninstallClusterRelease", req, cb);
    }
    /**
     * 针对VPC-CNI模式的集群，增加集群容器网络可使用的子网
     */
    async AddVpcCniSubnets(req, cb) {
        return this.request("AddVpcCniSubnets", req, cb);
    }
    /**
     * 获取镜像信息
     */
    async DescribeImages(req, cb) {
        return this.request("DescribeImages", req, cb);
    }
    /**
     * 查询已经存在的节点，判断是否可以加入集群
     */
    async DescribeExistedInstances(req, cb) {
        return this.request("DescribeExistedInstances", req, cb);
    }
    /**
     * 查询指定集群的巡检结果信息
     */
    async ListClusterInspectionResults(req, cb) {
        return this.request("ListClusterInspectionResults", req, cb);
    }
    /**
     * 查询节点池列表
     */
    async DescribeClusterNodePools(req, cb) {
        return this.request("DescribeClusterNodePools", req, cb);
    }
    /**
     * 获取边缘计算集群的认证信息
     */
    async DescribeTKEEdgeClusterCredential(req, cb) {
        return this.request("DescribeTKEEdgeClusterCredential", req, cb);
    }
    /**
     * 给集群的一批work节点进行升级
     */
    async UpgradeClusterInstances(req, cb) {
        return this.request("UpgradeClusterInstances", req, cb);
    }
    /**
     * 查询集群路由表
     */
    async DescribeClusterRouteTables(req, cb) {
        return this.request("DescribeClusterRouteTables", req, cb);
    }
    /**
     * 删除边缘容器CVM实例
     */
    async DeleteEdgeCVMInstances(req, cb) {
        return this.request("DeleteEdgeCVMInstances", req, cb);
    }
    /**
     * 将集群内节点移入节点池
     */
    async AddNodeToNodePool(req, cb) {
        return this.request("AddNodeToNodePool", req, cb);
    }
    /**
     * 查询集群列表
     */
    async DescribeClusters(req, cb) {
        return this.request("DescribeClusters", req, cb);
    }
    /**
     * 查询集群访问端口状态(独立集群开启内网/外网访问，托管集群支持开启内网访问)
     */
    async DescribeClusterEndpointStatus(req, cb) {
        return this.request("DescribeClusterEndpointStatus", req, cb);
    }
    /**
     * 预留券实例的购买会预先扣除本次实例购买所需金额，在调用本接口前请确保账户余额充足。
     */
    async CreateReservedInstances(req, cb) {
        return this.request("CreateReservedInstances", req, cb);
    }
    /**
     * 更新镜像缓存接口
     */
    async UpdateImageCache(req, cb) {
        return this.request("UpdateImageCache", req, cb);
    }
    /**
     * 查询批量修改标签状态
     */
    async DescribeBatchModifyTagsStatus(req, cb) {
        return this.request("DescribeBatchModifyTagsStatus", req, cb);
    }
    /**
     * 获取容器服务支持的所有地域
     */
    async DescribeRegions(req, cb) {
        return this.request("DescribeRegions", req, cb);
    }
    /**
     * 查询各种规格类型的预留券使用率
     */
    async DescribeReservedInstanceUtilizationRate(req, cb) {
        return this.request("DescribeReservedInstanceUtilizationRate", req, cb);
    }
    /**
     * 添加已经存在的实例到集群
     */
    async AddExistedInstances(req, cb) {
        return this.request("AddExistedInstances", req, cb);
    }
    /**
     * 修改告警规则
     */
    async ModifyPrometheusAlertRule(req, cb) {
        return this.request("ModifyPrometheusAlertRule", req, cb);
    }
    /**
     * 修改托管集群外网端口的安全策略（老的方式，仅支持托管集群外网端口）
     */
    async ModifyClusterEndpointSP(req, cb) {
        return this.request("ModifyClusterEndpointSP", req, cb);
    }
    /**
     * 关闭集群删除保护
     */
    async DisableClusterDeletionProtection(req, cb) {
        return this.request("DisableClusterDeletionProtection", req, cb);
    }
    /**
     * 获取targets信息
     */
    async DescribePrometheusTargets(req, cb) {
        return this.request("DescribePrometheusTargets", req, cb);
    }
    /**
     * 删除容器实例，可批量删除
     */
    async DeleteEKSContainerInstances(req, cb) {
        return this.request("DeleteEKSContainerInstances", req, cb);
    }
    /**
     * 查询集群下节点实例信息
     */
    async DescribeClusterInstances(req, cb) {
        return this.request("DescribeClusterInstances", req, cb);
    }
    /**
     * 获取边缘容器CVM实例相关信息
     */
    async DescribeEdgeCVMInstances(req, cb) {
        return this.request("DescribeEdgeCVMInstances", req, cb);
    }
    /**
     * 用于查询Kubernetes的各个原生控制器是否开启
     */
    async DescribeClusterControllers(req, cb) {
        return this.request("DescribeClusterControllers", req, cb);
    }
    /**
     * 获取一个addon的参数
     */
    async DescribeAddonValues(req, cb) {
        return this.request("DescribeAddonValues", req, cb);
    }
    /**
     * 给GR集群增加可用的ClusterCIDR（开白才能使用此功能，如需要请联系我们）
     */
    async AddClusterCIDR(req, cb) {
        return this.request("AddClusterCIDR", req, cb);
    }
    /**
     * 创建镜像缓存的接口。创建过程中，请勿删除EKSCI实例和云盘，否则镜像缓存将创建失败。
     */
    async CreateImageCache(req, cb) {
        return this.request("CreateImageCache", req, cb);
    }
    /**
     * 删除超级节点池
     */
    async DeleteClusterVirtualNodePool(req, cb) {
        return this.request("DeleteClusterVirtualNodePool", req, cb);
    }
    /**
     * 关闭加密信息保护
     */
    async DisableEncryptionProtection(req, cb) {
        return this.request("DisableEncryptionProtection", req, cb);
    }
    /**
     * 更新容器实例
     */
    async UpdateEKSContainerInstance(req, cb) {
        return this.request("UpdateEKSContainerInstance", req, cb);
    }
    /**
     * 拉取模板列表，默认模板将总是在最前面
     */
    async DescribePrometheusTemp(req, cb) {
        return this.request("DescribePrometheusTemp", req, cb);
    }
    /**
     * 删除一个addon
     */
    async DeleteAddon(req, cb) {
        return this.request("DeleteAddon", req, cb);
    }
    /**
     * 为弹性集群创建日志采集配置
     */
    async CreateEksLogConfig(req, cb) {
        return this.request("CreateEksLogConfig", req, cb);
    }
    /**
     * 驱逐超级节点
     */
    async DrainClusterVirtualNode(req, cb) {
        return this.request("DrainClusterVirtualNode", req, cb);
    }
    /**
     * 重启弹性容器实例，支持批量操作
     */
    async RestartEKSContainerInstances(req, cb) {
        return this.request("RestartEKSContainerInstances", req, cb);
    }
    /**
     * 删除集群采集配置
     */
    async DeletePrometheusConfig(req, cb) {
        return this.request("DeletePrometheusConfig", req, cb);
    }
    /**
     * 修改节点池关联伸缩组的期望实例数
     */
    async ModifyNodePoolDesiredCapacityAboutAsg(req, cb) {
        return this.request("ModifyNodePoolDesiredCapacityAboutAsg", req, cb);
    }
    /**
     * 修改集群认证配置
     */
    async ModifyClusterAuthenticationOptions(req, cb) {
        return this.request("ModifyClusterAuthenticationOptions", req, cb);
    }
    /**
     * 创建弹性集群
     */
    async CreateEKSCluster(req, cb) {
        return this.request("CreateEKSCluster", req, cb);
    }
    /**
     * 查询集群自定义参数
     */
    async DescribeClusterExtraArgs(req, cb) {
        return this.request("DescribeClusterExtraArgs", req, cb);
    }
    /**
     * 对集群的Kubeconfig信息进行更新
     */
    async UpdateClusterKubeconfig(req, cb) {
        return this.request("UpdateClusterKubeconfig", req, cb);
    }
    /**
     * 查看集群状态列表
     */
    async DescribeClusterStatus(req, cb) {
        return this.request("DescribeClusterStatus", req, cb);
    }
    /**
     * 修改节点池的机型配置
     */
    async ModifyNodePoolInstanceTypes(req, cb) {
        return this.request("ModifyNodePoolInstanceTypes", req, cb);
    }
    /**
     * 修改集群镜像
     */
    async ModifyClusterImage(req, cb) {
        return this.request("ModifyClusterImage", req, cb);
    }
    /**
     * 查询日志采集规则
     */
    async DescribeLogConfigs(req, cb) {
        return this.request("DescribeLogConfigs", req, cb);
    }
    /**
     * 创建一个云原生Prometheus模板
     */
    async CreatePrometheusTemp(req, cb) {
        return this.request("CreatePrometheusTemp", req, cb);
    }
    /**
     * 查询集群巡检结果历史列表
     */
    async ListClusterInspectionResultsItems(req, cb) {
        return this.request("ListClusterInspectionResultsItems", req, cb);
    }
    /**
     * 开启加密数据保护，需要先开启KMS能力，完成KMS授权
     */
    async EnableEncryptionProtection(req, cb) {
        return this.request("EnableEncryptionProtection", req, cb);
    }
    /**
     * 获取模板同步信息
     */
    async DescribePrometheusTemplateSync(req, cb) {
        return this.request("DescribePrometheusTemplateSync", req, cb);
    }
    /**
     * 提供给附加了VPC-CNI能力的Global-Route集群关闭VPC-CNI
     */
    async DisableVpcCniNetworkType(req, cb) {
        return this.request("DisableVpcCniNetworkType", req, cb);
    }
    /**
     * 获取实例详细信息
     */
    async DescribePrometheusInstance(req, cb) {
        return this.request("DescribePrometheusInstance", req, cb);
    }
    /**
     * 创建全局告警通知渠道
     */
    async CreatePrometheusGlobalNotification(req, cb) {
        return this.request("CreatePrometheusGlobalNotification", req, cb);
    }
    /**
     * 查询集群开启端口流程状态(仅支持托管集群外网端口)
     */
    async DescribeClusterEndpointVipStatus(req, cb) {
        return this.request("DescribeClusterEndpointVipStatus", req, cb);
    }
    /**
     * 查询容器实例
     */
    async DescribeEKSContainerInstances(req, cb) {
        return this.request("DescribeEKSContainerInstances", req, cb);
    }
    /**
     * 查询集群日志（审计、事件、普通日志）开关列表
     */
    async DescribeLogSwitches(req, cb) {
        return this.request("DescribeLogSwitches", req, cb);
    }
    /**
     * 通过此接口，可以获取集群的tke:admin的ClusterRole，即管理员角色，可以用于CAM侧高权限的用户，通过CAM策略给予子账户此接口权限，进而可以通过此接口直接获取到kubernetes集群内的管理员角色。
     */
    async AcquireClusterAdminRole(req, cb) {
        return this.request("AcquireClusterAdminRole", req, cb);
    }
    /**
     * 创建集群路由
     */
    async CreateClusterRoute(req, cb) {
        return this.request("CreateClusterRoute", req, cb);
    }
    /**
     * 查询集群在应用市场中某个已安装应用的版本历史
     */
    async DescribeClusterReleaseHistory(req, cb) {
        return this.request("DescribeClusterReleaseHistory", req, cb);
    }
    /**
     * 在应用市场中集群回滚应用至某个历史版本
     */
    async RollbackClusterRelease(req, cb) {
        return this.request("RollbackClusterRelease", req, cb);
    }
    /**
     * 编辑节点池
     */
    async ModifyClusterNodePool(req, cb) {
        return this.request("ModifyClusterNodePool", req, cb);
    }
    /**
     * 查询etcd数据是否进行加密
     */
    async DescribeEncryptionStatus(req, cb) {
        return this.request("DescribeEncryptionStatus", req, cb);
    }
    /**
     * 创建容器实例
     */
    async CreateEKSContainerInstances(req, cb) {
        return this.request("CreateEKSContainerInstances", req, cb);
    }
    /**
     * 获取聚合规则列表，包含关联集群内crd资源创建的record rule
     */
    async DescribePrometheusRecordRules(req, cb) {
        return this.request("DescribePrometheusRecordRules", req, cb);
    }
    /**
     * 删除告警规则
     */
    async DeletePrometheusAlertRule(req, cb) {
        return this.request("DeletePrometheusAlertRule", req, cb);
    }
    /**
     * 查询全局告警通知渠道
     */
    async DescribePrometheusGlobalNotification(req, cb) {
        return this.request("DescribePrometheusGlobalNotification", req, cb);
    }
    /**
     * 缩容独立集群master节点，本功能为内测能力，使用之前请先提单联系我们。
     */
    async ScaleInClusterMaster(req, cb) {
        return this.request("ScaleInClusterMaster", req, cb);
    }
    /**
     * 查询集群变配记录
     */
    async DescribeClusterLevelChangeRecords(req, cb) {
        return this.request("DescribeClusterLevelChangeRecords", req, cb);
    }
    /**
     * 创建集群访问端口
     */
    async CreateClusterEndpoint(req, cb) {
        return this.request("CreateClusterEndpoint", req, cb);
    }
    /**
     * 查询各个规格的 Pod 的抵扣率
     */
    async DescribePodDeductionRate(req, cb) {
        return this.request("DescribePodDeductionRate", req, cb);
    }
    /**
     * 修改全局告警通知渠道
     */
    async ModifyPrometheusGlobalNotification(req, cb) {
        return this.request("ModifyPrometheusGlobalNotification", req, cb);
    }
    /**
     * 预留券实例如符合退还规则，可通过本接口主动退还。
     */
    async DeleteReservedInstances(req, cb) {
        return this.request("DeleteReservedInstances", req, cb);
    }
    /**
     * 获取关联目标集群的实例列表
     */
    async DescribePrometheusAgentInstances(req, cb) {
        return this.request("DescribePrometheusAgentInstances", req, cb);
    }
    /**
     * 扩容独立集群master节点
     */
    async ScaleOutClusterMaster(req, cb) {
        return this.request("ScaleOutClusterMaster", req, cb);
    }
    /**
     * 创建告警规则
     */
    async CreatePrometheusAlertRule(req, cb) {
        return this.request("CreatePrometheusAlertRule", req, cb);
    }
    /**
     * 删除聚合规则
     */
    async DeletePrometheusRecordRuleYaml(req, cb) {
        return this.request("DeletePrometheusRecordRuleYaml", req, cb);
    }
    /**
     * 查询备份仓库信息
     */
    async DescribeBackupStorageLocations(req, cb) {
        return this.request("DescribeBackupStorageLocations", req, cb);
    }
    /**
     * 修改模板内容
     */
    async ModifyPrometheusTemp(req, cb) {
        return this.request("ModifyPrometheusTemp", req, cb);
    }
    /**
     * 修改聚合规则yaml方式
     */
    async ModifyPrometheusRecordRuleYaml(req, cb) {
        return this.request("ModifyPrometheusRecordRuleYaml", req, cb);
    }
    /**
     * 获取集群规模
     */
    async DescribeClusterLevelAttribute(req, cb) {
        return this.request("DescribeClusterLevelAttribute", req, cb);
    }
    /**
     * 集群的密钥信息
     */
    async DescribeClusterSecurity(req, cb) {
        return this.request("DescribeClusterSecurity", req, cb);
    }
    /**
     * 续费时请确保账户余额充足。
     */
    async RenewReservedInstances(req, cb) {
        return this.request("RenewReservedInstances", req, cb);
    }
    /**
     * 获取TMP实例关联集群列表
     */
    async DescribePrometheusClusterAgents(req, cb) {
        return this.request("DescribePrometheusClusterAgents", req, cb);
    }
    /**
     * 删除节点池
     */
    async DeleteClusterNodePool(req, cb) {
        return this.request("DeleteClusterNodePool", req, cb);
    }
    /**
     * 创建边缘计算集群
     */
    async CreateTKEEdgeCluster(req, cb) {
        return this.request("CreateTKEEdgeCluster", req, cb);
    }
    /**
     * 获取集群资源使用量
     */
    async DescribeResourceUsage(req, cb) {
        return this.request("DescribeResourceUsage", req, cb);
    }
    /**
     * 获取模板关联实例信息，针对V2版本实例
     */
    async DescribePrometheusTempSync(req, cb) {
        return this.request("DescribePrometheusTempSync", req, cb);
    }
    /**
     * 删除托管集群外网访问端口（老的方式，仅支持托管集群外网端口）
     */
    async DeleteClusterEndpointVip(req, cb) {
        return this.request("DeleteClusterEndpointVip", req, cb);
    }
    /**
     * 获取ECM实例相关信息
     */
    async DescribeECMInstances(req, cb) {
        return this.request("DescribeECMInstances", req, cb);
    }
    /**
     * 删除边缘计算集群
     */
    async DeleteTKEEdgeCluster(req, cb) {
        return this.request("DeleteTKEEdgeCluster", req, cb);
    }
    /**
     * 根据镜像列表，查询匹配的镜像缓存
     */
    async GetMostSuitableImageCache(req, cb) {
        return this.request("GetMostSuitableImageCache", req, cb);
    }
    /**
     * 获取集群的访问地址，包括内网地址，外网地址，外网域名，外网访问安全策略
     */
    async DescribeClusterEndpoints(req, cb) {
        return this.request("DescribeClusterEndpoints", req, cb);
    }
    /**
     * 与云监控融合的2.0实例关联集群
     */
    async CreatePrometheusClusterAgent(req, cb) {
        return this.request("CreatePrometheusClusterAgent", req, cb);
    }
    /**
     * 删除2.0实例告警策略
     */
    async DeletePrometheusAlertPolicy(req, cb) {
        return this.request("DeletePrometheusAlertPolicy", req, cb);
    }
    /**
     * 获取弹性容器集群的接入认证信息
     */
    async DescribeEKSClusterCredential(req, cb) {
        return this.request("DescribeEKSClusterCredential", req, cb);
    }
    /**
     * 查询通过应用市场安装的某个应用详情
     */
    async DescribeClusterReleaseDetails(req, cb) {
        return this.request("DescribeClusterReleaseDetails", req, cb);
    }
    /**
     * 关闭集群审计
     */
    async DisableClusterAudit(req, cb) {
        return this.request("DisableClusterAudit", req, cb);
    }
    /**
     * 创建边缘容器CVM机器
     */
    async CreateEdgeCVMInstances(req, cb) {
        return this.request("CreateEdgeCVMInstances", req, cb);
    }
    /**
     * 查询集群路由
     */
    async DescribeClusterRoutes(req, cb) {
        return this.request("DescribeClusterRoutes", req, cb);
    }
    /**
     * 获得实例级别抓取配置
     */
    async DescribePrometheusGlobalConfig(req, cb) {
        return this.request("DescribePrometheusGlobalConfig", req, cb);
    }
    /**
     * 同步模板到实例或者集群，针对V2版本实例
     */
    async SyncPrometheusTemp(req, cb) {
        return this.request("SyncPrometheusTemp", req, cb);
    }
    /**
     * 批量修改opa策略
     */
    async ModifyOpenPolicyList(req, cb) {
        return this.request("ModifyOpenPolicyList", req, cb);
    }
    /**
     * 查询容器实例中容器日志
     */
    async DescribeEksContainerInstanceLog(req, cb) {
        return this.request("DescribeEksContainerInstanceLog", req, cb);
    }
    /**
     * 检查给定节点列表中哪些是可升级的
     */
    async CheckInstancesUpgradeAble(req, cb) {
        return this.request("CheckInstancesUpgradeAble", req, cb);
    }
    /**
     * 创建grafana监控面板
     */
    async CreatePrometheusDashboard(req, cb) {
        return this.request("CreatePrometheusDashboard", req, cb);
    }
    /**
     * 获取实例列表
     */
    async DescribePrometheusOverviews(req, cb) {
        return this.request("DescribePrometheusOverviews", req, cb);
    }
    /**
     * 移出节点池节点，但保留在集群内
     */
    async RemoveNodeFromNodePool(req, cb) {
        return this.request("RemoveNodeFromNodePool", req, cb);
    }
    /**
     * 获取边缘计算集群的当前状态以及过程信息
     */
    async DescribeTKEEdgeClusterStatus(req, cb) {
        return this.request("DescribeTKEEdgeClusterStatus", req, cb);
    }
    /**
     * 创建告警策略
     */
    async CreatePrometheusAlertPolicy(req, cb) {
        return this.request("CreatePrometheusAlertPolicy", req, cb);
    }
    /**
     * 删除一个云原生Prometheus配置模板
     */
    async DeletePrometheusTemplate(req, cb) {
        return this.request("DeletePrometheusTemplate", req, cb);
    }
    /**
     * 获取2.0实例告警策略列表
     */
    async DescribePrometheusAlertPolicy(req, cb) {
        return this.request("DescribePrometheusAlertPolicy", req, cb);
    }
    /**
     * 获取被关联集群列表
     */
    async DescribePrometheusAgents(req, cb) {
        return this.request("DescribePrometheusAgents", req, cb);
    }
    /**
     * 关闭事件持久化功能
     */
    async DisableEventPersistence(req, cb) {
        return this.request("DisableEventPersistence", req, cb);
    }
    /**
     * 删除集群访问端口
     */
    async DeleteClusterEndpoint(req, cb) {
        return this.request("DeleteClusterEndpoint", req, cb);
    }
    /**
     * 集群创建应用
     */
    async CreateClusterRelease(req, cb) {
        return this.request("CreateClusterRelease", req, cb);
    }
    /**
     * 同步模板到实例或者集群
     */
    async SyncPrometheusTemplate(req, cb) {
        return this.request("SyncPrometheusTemplate", req, cb);
    }
    /**
     * 查看超级节点池列表
     */
    async DescribeClusterVirtualNodePools(req, cb) {
        return this.request("DescribeClusterVirtualNodePools", req, cb);
    }
    /**
     * 获取集群规模价格
     */
    async GetClusterLevelPrice(req, cb) {
        return this.request("GetClusterLevelPrice", req, cb);
    }
    /**
     * 预留实例用量查询
     */
    async DescribeRIUtilizationDetail(req, cb) {
        return this.request("DescribeRIUtilizationDetail", req, cb);
    }
    /**
     * 获取集群的kubeconfig文件，不同子账户获取自己的kubeconfig文件，该文件中有每个子账户自己的kube-apiserver的客户端证书，默认首次调此接口时候创建客户端证书，时效20年，未授予任何权限，如果是集群所有者或者主账户，则默认是cluster-admin权限。
     */
    async DescribeClusterKubeconfig(req, cb) {
        return this.request("DescribeClusterKubeconfig", req, cb);
    }
    /**
     * 可以查询边缘集群升级信息，包含可以升级的组件，当前升级状态和升级错误信息
     */
    async DescribeEdgeClusterUpgradeInfo(req, cb) {
        return this.request("DescribeEdgeClusterUpgradeInfo", req, cb);
    }
    /**
     * 删除集群内采集规则
     */
    async DeleteLogConfigs(req, cb) {
        return this.request("DeleteLogConfigs", req, cb);
    }
    /**
     * 获取集群采集配置
     */
    async DescribePrometheusConfig(req, cb) {
        return this.request("DescribePrometheusConfig", req, cb);
    }
    /**
     * 在应用市场中取消安装失败的应用
     */
    async CancelClusterRelease(req, cb) {
        return this.request("CancelClusterRelease", req, cb);
    }
    /**
     * 查询边缘计算集群的节点信息
     */
    async DescribeEdgeClusterInstances(req, cb) {
        return this.request("DescribeEdgeClusterInstances", req, cb);
    }
    /**
     * 集群弹性伸缩配置
     */
    async DescribeClusterAsGroupOption(req, cb) {
        return this.request("DescribeClusterAsGroupOption", req, cb);
    }
    /**
     * 查询弹性集群列表
     */
    async DescribeEKSClusters(req, cb) {
        return this.request("DescribeEKSClusters", req, cb);
    }
    /**
     * 集群关联的伸缩组列表
     */
    async DescribeClusterAsGroups(req, cb) {
        return this.request("DescribeClusterAsGroups", req, cb);
    }
    /**
     * 创建节点池
     */
    async CreateClusterNodePool(req, cb) {
        return this.request("CreateClusterNodePool", req, cb);
    }
    /**
     * 创建边缘集群日志采集配置
     */
    async CreateEdgeLogConfig(req, cb) {
        return this.request("CreateEdgeLogConfig", req, cb);
    }
    /**
     * 查询用户单个Region下的所有集群巡检结果概览信息
     */
    async DescribeClusterInspectionResultsOverview(req, cb) {
        return this.request("DescribeClusterInspectionResultsOverview", req, cb);
    }
    /**
     * 删除一个云原生Prometheus配置模板
     */
    async DeletePrometheusTemp(req, cb) {
        return this.request("DeletePrometheusTemp", req, cb);
    }
    /**
     * 本接口用于查询开启vpc-cni模式的任务进度
     */
    async DescribeEnableVpcCniProgress(req, cb) {
        return this.request("DescribeEnableVpcCniProgress", req, cb);
    }
    /**
     * 获取告警规则列表
     */
    async DescribePrometheusAlertRule(req, cb) {
        return this.request("DescribePrometheusAlertRule", req, cb);
    }
    /**
     * 启用集群删除保护
     */
    async EnableClusterDeletionProtection(req, cb) {
        return this.request("EnableClusterDeletionProtection", req, cb);
    }
    /**
     * 操作TKEEdge集群的addon
     */
    async ForwardTKEEdgeApplicationRequestV3(req, cb) {
        return this.request("ForwardTKEEdgeApplicationRequestV3", req, cb);
    }
    /**
     * 查询镜像缓存信息接口
     */
    async DescribeImageCaches(req, cb) {
        return this.request("DescribeImageCaches", req, cb);
    }
    /**
     * 查询集群在应用市场中已安装应用列表
     */
    async DescribeClusterReleases(req, cb) {
        return this.request("DescribeClusterReleases", req, cb);
    }
    /**
     * 升级集群中已安装的应用
     */
    async UpgradeClusterRelease(req, cb) {
        return this.request("UpgradeClusterRelease", req, cb);
    }
    /**
     * 查询容器实例支持的地域
     */
    async DescribeEKSContainerInstanceRegions(req, cb) {
        return this.request("DescribeEKSContainerInstanceRegions", req, cb);
    }
    /**
     * 修改边缘计算集群名称等属性
     */
    async UpdateTKEEdgeCluster(req, cb) {
        return this.request("UpdateTKEEdgeCluster", req, cb);
    }
    /**
     * 修改模板内容
     */
    async ModifyPrometheusTemplate(req, cb) {
        return this.request("ModifyPrometheusTemplate", req, cb);
    }
    /**
     * 拉取模板列表，默认模板将总是在最前面
     */
    async DescribePrometheusTemplates(req, cb) {
        return this.request("DescribePrometheusTemplates", req, cb);
    }
    /**
     * 获取addon列表
     */
    async DescribeAddon(req, cb) {
        return this.request("DescribeAddon", req, cb);
    }
    /**
     * 获取与云监控融合实例列表
     */
    async DescribePrometheusInstancesOverview(req, cb) {
        return this.request("DescribePrometheusInstancesOverview", req, cb);
    }
    /**
     * 删除集群中的实例
     */
    async DeleteClusterInstances(req, cb) {
        return this.request("DeleteClusterInstances", req, cb);
    }
    /**
     * 解除模板同步，这将会删除目标中该模板所生产的配置，针对V2版本实例
     */
    async DeletePrometheusTempSync(req, cb) {
        return this.request("DeletePrometheusTempSync", req, cb);
    }
    /**
     * 创建集群采集配置
     */
    async CreatePrometheusConfig(req, cb) {
        return this.request("CreatePrometheusConfig", req, cb);
    }
    /**
     * 初始化TMP实例，开启集成中心时调用
     */
    async RunPrometheusInstance(req, cb) {
        return this.request("RunPrometheusInstance", req, cb);
    }
    /**
     * 修改弹性集群名称等属性
     */
    async UpdateEKSCluster(req, cb) {
        return this.request("UpdateEKSCluster", req, cb);
    }
    /**
     * 获取TKE支持的App列表
     */
    async GetTkeAppChartList(req, cb) {
        return this.request("GetTkeAppChartList", req, cb);
    }
    /**
     * 创建按量计费超级节点
     */
    async CreateClusterVirtualNode(req, cb) {
        return this.request("CreateClusterVirtualNode", req, cb);
    }
    /**
     * 在TKE集群中安装CLS日志采集组件
     */
    async InstallLogAgent(req, cb) {
        return this.request("InstallLogAgent", req, cb);
    }
    /**
     * 检查边缘计算集群的CIDR是否冲突
     */
    async CheckEdgeClusterCIDR(req, cb) {
        return this.request("CheckEdgeClusterCIDR", req, cb);
    }
    /**
     * 创建托管集群外网访问端口（不再维护，准备下线）请使用新接口：CreateClusterEndpoint
     */
    async CreateClusterEndpointVip(req, cb) {
        return this.request("CreateClusterEndpointVip", req, cb);
    }
    /**
     * 修改集群及节点池纬度运行时配置
     */
    async ModifyClusterRuntimeConfig(req, cb) {
        return this.request("ModifyClusterRuntimeConfig", req, cb);
    }
    /**
     * 查询路由表冲突列表
     */
    async DescribeRouteTableConflicts(req, cb) {
        return this.request("DescribeRouteTableConflicts", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249558, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tkgdq = void 0;
const v20190411_1 = require("./v20190411");
exports.tkgdq = {
    v20190411: v20190411_1.v20190411,
};

}, function(modId) { var map = {"./v20190411":1738984249559}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249559, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190411 = void 0;
const Models = require("./tkgdq_models");
const tkgdq_client_1 = require("./tkgdq_client");
exports.v20190411 = {
    Client: tkgdq_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tkgdq_models":1738984249560,"./tkgdq_client":1738984249561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249560, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249561, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tkgdq client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tkgdq.tencentcloudapi.com", "2019-04-11", clientConfig);
    }
    /**
     * 输入实体名称，返回实体相关的信息如实体别名、实体英文名、实体详细信息、相关实体等
     */
    async DescribeEntity(req, cb) {
        return this.request("DescribeEntity", req, cb);
    }
    /**
     * 三元组查询，主要分为两类，SP查询和PO查询。SP查询表示已知主语和谓语查询宾语，PO查询表示已知宾语和谓语查询主语。每一个SP或PO查询都是一个可独立执行的查询，TQL支持SP查询的嵌套查询，即主语可以是一个嵌套的子查询。其他复杂的三元组查询方法，请参考官网API文档示例。
     */
    async DescribeTriple(req, cb) {
        return this.request("DescribeTriple", req, cb);
    }
    /**
     * 输入两个实体，返回两个实体间的关系，例如马化腾与腾讯公司不仅是相关实体，二者还存在隶属关系（马化腾属于腾讯公司）。
     */
    async DescribeRelation(req, cb) {
        return this.request("DescribeRelation", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249562, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tms = void 0;
const v20200713_1 = require("./v20200713");
const v20201229_1 = require("./v20201229");
exports.tms = {
    v20200713: v20200713_1.v20200713,
    v20201229: v20201229_1.v20201229,
};

}, function(modId) { var map = {"./v20200713":1738984249563,"./v20201229":1738984249566}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249563, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200713 = void 0;
const Models = require("./tms_models");
const tms_client_1 = require("./tms_client");
exports.v20200713 = {
    Client: tms_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tms_models":1738984249564,"./tms_client":1738984249565}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249564, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249565, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tms client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tms.tencentcloudapi.com", "2020-07-13", clientConfig);
    }
    /**
     * 控制台识别统计
     */
    async DescribeTextStat(req, cb) {
        return this.request("DescribeTextStat", req, cb);
    }
    /**
     * 举报恶意账号
     */
    async AccountTipoffAccess(req, cb) {
        return this.request("AccountTipoffAccess", req, cb);
    }
    /**
     * 文本内容检测（Text Moderation）服务使用了深度学习技术，识别可能令人反感、不安全或不适宜的文本内容，同时支持用户配置词库黑白名单，打击自定义识别类型的图片。
     */
    async TextModeration(req, cb) {
        return this.request("TextModeration", req, cb);
    }
    /**
     * 控制台获取用户词库列表
     */
    async DescribeTextLib(req, cb) {
        return this.request("DescribeTextLib", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249566, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201229 = void 0;
const Models = require("./tms_models");
const tms_client_1 = require("./tms_client");
exports.v20201229 = {
    Client: tms_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tms_models":1738984249567,"./tms_client":1738984249568}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249567, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249568, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tms client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tms.tencentcloudapi.com", "2020-12-29", clientConfig);
    }
    /**
     * 本接口（Text Moderation）用于提交文本内容进行智能审核任务。使用前请您使用腾讯云主账号登录控制台 [开通文本内容安全服务](https://console.cloud.tencent.com/cms) 并调整好对应的业务配置。

### 接口使用说明
- 前往“[内容安全控制台-文本内容安全](https://console.cloud.tencent.com/cms)”开启使用文本内容安全服务，首次开通服务的用户可免费领用试用套餐包，包含**3000条**文本识别额度，有效期为15天。
- 该接口为收费接口，计费方式敬请参见 [腾讯云文本内容安全定价](https://cloud.tencent.com/product/tms/pricing)。

### 接口功能说明：
- 支持对文本文件进行检测，通过深度学习技术，识别可能令人反感、不安全或不适宜的违规文本内容；
- 支持识别多种违规场景，包括：低俗、谩骂、色情、广告等场景；
- 支持根据不同的业务场景配置自定义的审核策略，可在控制台文本内容安全-策略管理中配置；
- 支持用户自定义配置词库黑白名单，打击自定义识别类型的违规文本（目前仅支持黑名单配置）；
- 支持在审核文本内容时同时关联账号或设备信息，可识别违规风险账号或设备。

### 接口调用说明：
- 文本内容大小支持：文本原文长度不能超过unicode编码长度10000个字符；
- 文本审核语言支持：目前支持中文、英文、阿拉伯数字的检测；
- 默认接口请求频率限制：**1000次/秒**，超过该频率限制则接口会报错。
     */
    async TextModeration(req, cb) {
        return this.request("TextModeration", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249569, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tmt = void 0;
const v20180321_1 = require("./v20180321");
exports.tmt = {
    v20180321: v20180321_1.v20180321,
};

}, function(modId) { var map = {"./v20180321":1738984249570}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249570, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180321 = void 0;
const Models = require("./tmt_models");
const tmt_client_1 = require("./tmt_client");
exports.v20180321 = {
    Client: tmt_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tmt_models":1738984249571,"./tmt_client":1738984249572}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249571, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249572, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tmt client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tmt.tencentcloudapi.com", "2018-03-21", clientConfig);
    }
    /**
     * 可自动识别文本内容的语言种类，轻量高效，无需额外实现判断方式，使面向客户的服务体验更佳。 <br />
提示：对于一般开发者，我们建议优先使用SDK接入简化开发。SDK使用介绍请直接查看 5. 开发者资源 部分。
     */
    async LanguageDetect(req, cb) {
        return this.request("LanguageDetect", req, cb);
    }
    /**
     * 批量翻译文本的接口
     */
    async TextTranslateBatch(req, cb) {
        return this.request("TextTranslateBatch", req, cb);
    }
    /**
     * 提供13种语言的图片翻译服务，可自动识别图片中的文本内容并翻译成目标语言，识别后的文本按行翻译，后续会提供可按段落翻译的版本。<br />
提示：对于一般开发者，我们建议优先使用SDK接入简化开发。SDK使用介绍请直接查看 5. 开发者资源 部分。
     */
    async ImageTranslate(req, cb) {
        return this.request("ImageTranslate", req, cb);
    }
    /**
     * 在调用文档翻译请求接口后，有回调和轮询两种方式获取识别结果。
•当采用回调方式时，翻译完成后会将结果通过 POST 请求的形式通知到用户在请求时填写的回调 URL，具体请参见[文件翻译回调说明](https://cloud.tencent.com/document/product/551/91138)。
• 当采用轮询方式时，需要主动提交任务ID来轮询识别结果，共有任务成功、等待、执行中和失败四种结果，具体信息请参见参数说明。
     */
    async GetFileTranslate(req, cb) {
        return this.request("GetFileTranslate", req, cb);
    }
    /**
     * 腾讯翻译为合作伙伴提供文本翻译、文档翻译、交互翻译、AI同传等多种机器翻译服务，具有toB多行业解决方案。作为WMT世界机器翻译大赛冠军，翻译准确度值得信赖，其中，交互翻译能力是业界领先技术；腾讯同传是AI同传业界标杆。<br />
提示：对于一般开发者，我们建议优先使用SDK接入简化开发。SDK使用介绍请直接查看 5. 开发者资源 部分。
     */
    async TextTranslate(req, cb) {
        return this.request("TextTranslate", req, cb);
    }
    /**
     * 提交文档原文内容，输出任务ID， 支持原文为单一语种文档（如出现多语言文档，仅支持以选定的源语言相关内容翻译）,文件格式有pdf、docx、pptx、xlsx，支持的文本格式有txt、xml、html、markdown、properties。任务翻译数据可保存7天，7天后不再返回任务数据。请注意保存。
     */
    async FileTranslate(req, cb) {
        return this.request("FileTranslate", req, cb);
    }
    /**
     * 本接口提供上传音频，将音频进行语音识别并翻译成文本的服务，目前开放中英互译的语音翻译服务。
待识别和翻译的音频文件可以是 pcm、mp3和speex 格式，其中支持流式传输的只有pcm格式，pcm采样率要求16kHz、位深16bit、单声道，音频内语音清晰。<br/>
如果采用流式传输的方式，要求每个分片时长200ms~500ms；如果采用非流式的传输方式，要求音频时长不超过8s。注意最后一个分片的IsEnd参数设置为1。<br />
提示：对于一般开发者，我们建议优先使用SDK接入简化开发。SDK使用介绍请直接查看 5. 开发者资源部分。
     */
    async SpeechTranslate(req, cb) {
        return this.request("SpeechTranslate", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249573, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tourism = void 0;
const v20230215_1 = require("./v20230215");
exports.tourism = {
    v20230215: v20230215_1.v20230215,
};

}, function(modId) { var map = {"./v20230215":1738984249574}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249574, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20230215 = void 0;
const Models = require("./tourism_models");
const tourism_client_1 = require("./tourism_client");
exports.v20230215 = {
    Client: tourism_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tourism_models":1738984249575,"./tourism_client":1738984249576}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249575, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249576, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tourism client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tourism.tencentcloudapi.com", "2023-02-15", clientConfig);
    }
    /**
     * 依据客户的Uin查询开通的资源列表
     */
    async DescribeDrawResourceList(req, cb) {
        return this.request("DescribeDrawResourceList", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249577, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.trdp = void 0;
const v20220726_1 = require("./v20220726");
exports.trdp = {
    v20220726: v20220726_1.v20220726,
};

}, function(modId) { var map = {"./v20220726":1738984249578}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249578, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220726 = void 0;
const Models = require("./trdp_models");
const trdp_client_1 = require("./trdp_client");
exports.v20220726 = {
    Client: trdp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./trdp_models":1738984249579,"./trdp_client":1738984249580}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249579, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249580, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * trdp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("trdp.tencentcloudapi.com", "2022-07-26", clientConfig);
    }
    /**
     * 用户风险质量接口
     */
    async EvaluateUserRisk(req, cb) {
        return this.request("EvaluateUserRisk", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249581, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.trocket = void 0;
const v20230308_1 = require("./v20230308");
exports.trocket = {
    v20230308: v20230308_1.v20230308,
};

}, function(modId) { var map = {"./v20230308":1738984249582}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249582, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20230308 = void 0;
const Models = require("./trocket_models");
const trocket_client_1 = require("./trocket_client");
exports.v20230308 = {
    Client: trocket_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./trocket_models":1738984249583,"./trocket_client":1738984249584}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249583, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249584, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * trocket client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("trocket.tencentcloudapi.com", "2023-03-08", clientConfig);
    }
    /**
     * 查询消息列表，如查询死信，请设置ConsumerGroup参数
     */
    async DescribeMQTTMessageList(req, cb) {
        return this.request("DescribeMQTTMessageList", req, cb);
    }
    /**
     * 更新MQTT集群绑定证书
参数传空，则为删除证书
     */
    async ModifyMQTTInstanceCertBinding(req, cb) {
        return this.request("ModifyMQTTInstanceCertBinding", req, cb);
    }
    /**
     * 根据消息 ID 查询消息轨迹。
     */
    async DescribeMessageTrace(req, cb) {
        return this.request("DescribeMessageTrace", req, cb);
    }
    /**
     * 修改主题属性
     */
    async ModifyTopic(req, cb) {
        return this.request("ModifyTopic", req, cb);
    }
    /**
     * 根据消费组获取主题列表，Filter参数使用说明如下：

TopicName，主题名称过滤
     */
    async DescribeTopicListByGroup(req, cb) {
        return this.request("DescribeTopicListByGroup", req, cb);
    }
    /**
     * 修改主题属性
     */
    async ModifyMQTTTopic(req, cb) {
        return this.request("ModifyMQTTTopic", req, cb);
    }
    /**
     * 重新发送死信消息
     */
    async ResendDeadLetterMessage(req, cb) {
        return this.request("ResendDeadLetterMessage", req, cb);
    }
    /**
     * 删除MQTT访问用户
     */
    async DeleteMQTTUser(req, cb) {
        return this.request("DeleteMQTTUser", req, cb);
    }
    /**
     * 添加角色
     */
    async CreateRole(req, cb) {
        return this.request("CreateRole", req, cb);
    }
    /**
     * 导入消费者组列表
     */
    async ImportSourceClusterConsumerGroups(req, cb) {
        return this.request("ImportSourceClusterConsumerGroups", req, cb);
    }
    /**
     * 删除 RocketMQ 5.x 集群。
     */
    async DeleteInstance(req, cb) {
        return this.request("DeleteInstance", req, cb);
    }
    /**
     * 创建消费组
     */
    async CreateConsumerGroup(req, cb) {
        return this.request("CreateConsumerGroup", req, cb);
    }
    /**
     * 获取产品售卖规格
     */
    async DescribeMQTTProductSKUList(req, cb) {
        return this.request("DescribeMQTTProductSKUList", req, cb);
    }
    /**
     * 导入topic列表
     */
    async ImportSourceClusterTopics(req, cb) {
        return this.request("ImportSourceClusterTopics", req, cb);
    }
    /**
     * 查询消息详情
     */
    async DescribeMessage(req, cb) {
        return this.request("DescribeMessage", req, cb);
    }
    /**
     * 查询用户列表，Filter参数使用说明如下：

1. Username，用户名称模糊搜索
     */
    async DescribeMQTTUserList(req, cb) {
        return this.request("DescribeMQTTUserList", req, cb);
    }
    /**
     * 删除MQTT实例的公网接入点
     */
    async DeleteMQTTInsPublicEndpoint(req, cb) {
        return this.request("DeleteMQTTInsPublicEndpoint", req, cb);
    }
    /**
     * 查询角色列表，Filter参数使用说明如下：

1. RoleName，角色名称模糊搜索
     */
    async DescribeRoleList(req, cb) {
        return this.request("DescribeRoleList", req, cb);
    }
    /**
     * 修改MQTT角色
     */
    async ModifyMQTTUser(req, cb) {
        return this.request("ModifyMQTTUser", req, cb);
    }
    /**
     * 删除消费组
     */
    async DeleteConsumerGroup(req, cb) {
        return this.request("DeleteConsumerGroup", req, cb);
    }
    /**
     * 查询产品售卖规格，针对 RocketMQ 5.x 集群。
     */
    async DescribeProductSKUs(req, cb) {
        return this.request("DescribeProductSKUs", req, cb);
    }
    /**
     * 修改消费组属性
     */
    async ModifyConsumerGroup(req, cb) {
        return this.request("ModifyConsumerGroup", req, cb);
    }
    /**
     * 查询MQTT实例公网接入点
     */
    async DescribeMQTTInsVPCEndpoints(req, cb) {
        return this.request("DescribeMQTTInsVPCEndpoints", req, cb);
    }
    /**
     * 查询消费者客户端详情
     */
    async DescribeConsumerClient(req, cb) {
        return this.request("DescribeConsumerClient", req, cb);
    }
    /**
     * 删除角色
     */
    async DeleteRole(req, cb) {
        return this.request("DeleteRole", req, cb);
    }
    /**
     * 删除MQTT实例
     */
    async DeleteMQTTInstance(req, cb) {
        return this.request("DeleteMQTTInstance", req, cb);
    }
    /**
     * 查询MQTT消息详情
     */
    async DescribeMQTTMessage(req, cb) {
        return this.request("DescribeMQTTMessage", req, cb);
    }
    /**
     * 查询指定消费组堆积数。
     */
    async DescribeConsumerLag(req, cb) {
        return this.request("DescribeConsumerLag", req, cb);
    }
    /**
     * 查询mqtt主题详情
     */
    async DescribeMQTTTopic(req, cb) {
        return this.request("DescribeMQTTTopic", req, cb);
    }
    /**
     * 更新MQTT实例公网接入点
     */
    async ModifyMQTTInsPublicEndpoint(req, cb) {
        return this.request("ModifyMQTTInsPublicEndpoint", req, cb);
    }
    /**
     * 查询消费组详情
     */
    async DescribeConsumerGroup(req, cb) {
        return this.request("DescribeConsumerGroup", req, cb);
    }
    /**
     * 创建主题
     */
    async CreateTopic(req, cb) {
        return this.request("CreateTopic", req, cb);
    }
    /**
     * 查询消息列表。如果查询死信消息，请设置ConsumerGroup参数。
     */
    async DescribeMessageList(req, cb) {
        return this.request("DescribeMessageList", req, cb);
    }
    /**
     * 获取主题列表，Filter参数使用说明如下：

1. TopicName，主题名称模糊搜索
2. TopicType，主题类型查询，支持多选，可选值：Normal,Order,Transaction,DelayScheduled
     */
    async DescribeMQTTTopicList(req, cb) {
        return this.request("DescribeMQTTTopicList", req, cb);
    }
    /**
     * 查询实例信息
     */
    async DescribeMQTTInstance(req, cb) {
        return this.request("DescribeMQTTInstance", req, cb);
    }
    /**
     * 创建主题
     */
    async CreateMQTTTopic(req, cb) {
        return this.request("CreateMQTTTopic", req, cb);
    }
    /**
     * 创建 RocketMQ 5.x 集群
     */
    async CreateInstance(req, cb) {
        return this.request("CreateInstance", req, cb);
    }
    /**
     * 删除MQTT主题
     */
    async DeleteMQTTTopic(req, cb) {
        return this.request("DeleteMQTTTopic", req, cb);
    }
    /**
     * 查询 RocketMQ 5.x 集群信息。
     */
    async DescribeInstance(req, cb) {
        return this.request("DescribeInstance", req, cb);
    }
    /**
     * 修改 RocketMQ 5.x 集群接入点。
     */
    async ModifyInstanceEndpoint(req, cb) {
        return this.request("ModifyInstanceEndpoint", req, cb);
    }
    /**
     * 获取主题列表，Filter参数使用说明如下：

1. TopicName，主题名称模糊搜索
2. TopicType，主题类型查询，支持多选，可选值：Normal,Order,Transaction,DelayScheduled
     */
    async DescribeTopicList(req, cb) {
        return this.request("DescribeTopicList", req, cb);
    }
    /**
     * 查询MQTT实例公网接入点
     */
    async DescribeMQTTInsPublicEndpoints(req, cb) {
        return this.request("DescribeMQTTInsPublicEndpoints", req, cb);
    }
    /**
     * 查询MQTT集群证书列表
     */
    async DescribeMQTTInstanceCert(req, cb) {
        return this.request("DescribeMQTTInstanceCert", req, cb);
    }
    /**
     * 修改实例属性
     */
    async ModifyMQTTInstance(req, cb) {
        return this.request("ModifyMQTTInstance", req, cb);
    }
    /**
     * 获取实例列表，Filters参数使用说明如下：
1. InstanceName, 名称模糊查询
2. InstanceId，实例ID查询
3. InstanceType, 实例类型查询，支持多选
3. InstanceStatus，实例状态查询，支持多选

当使用TagFilters查询时，Filters参数失效。
     */
    async DescribeMQTTInstanceList(req, cb) {
        return this.request("DescribeMQTTInstanceList", req, cb);
    }
    /**
     * 获取消费组列表，Filter参数使用说明如下：

1. ConsumerGroupName，名称模糊查询
2. ConsumeMessageOrderly，投递顺序性。"true":顺序投递；"false":并发投递
     */
    async DescribeConsumerGroupList(req, cb) {
        return this.request("DescribeConsumerGroupList", req, cb);
    }
    /**
     * 购买新的MQTT实例
     */
    async CreateMQTTInstance(req, cb) {
        return this.request("CreateMQTTInstance", req, cb);
    }
    /**
     * 查询集群列表，仅支持 5.x 集群。Filters参数使用说明如下：
1. InstanceName, 名称模糊查询
2. InstanceId，集群ID查询
3. InstanceType, 集群类型查询，支持多选
3. InstanceStatus，集群状态查询，支持多选

当使用TagFilters查询时，Filters参数失效。
     */
    async DescribeInstanceList(req, cb) {
        return this.request("DescribeInstanceList", req, cb);
    }
    /**
     * 查询集群列表，支持 4.x 和 5.x 集群，其中 Filters 参数使用说明如下：
1. InstanceName, 名称模糊查询
2. InstanceId，集群ID查询
3. InstanceType, 集群类型查询，支持多选
4. Version，集群版本查询
当使用TagFilters查询时，Filters参数失效。
     */
    async DescribeFusionInstanceList(req, cb) {
        return this.request("DescribeFusionInstanceList", req, cb);
    }
    /**
     * 添加mqtt角色
     */
    async CreateMQTTUser(req, cb) {
        return this.request("CreateMQTTUser", req, cb);
    }
    /**
     * 修改角色
     */
    async ModifyRole(req, cb) {
        return this.request("ModifyRole", req, cb);
    }
    /**
     * 查询 MQTT 客户端详情
     */
    async DescribeMQTTClient(req, cb) {
        return this.request("DescribeMQTTClient", req, cb);
    }
    /**
     * 查询主题详情，Offset和Limit参数是指订阅该主题的消费组查询分页参数，Filter参数使用说明如下：

ConsumerGroup，消费组名称过滤
     */
    async DescribeTopic(req, cb) {
        return this.request("DescribeTopic", req, cb);
    }
    /**
     * 修改 RocketMQ 5.x 集群属性。
     */
    async ModifyInstance(req, cb) {
        return this.request("ModifyInstance", req, cb);
    }
    /**
     * 删除主题
     */
    async DeleteTopic(req, cb) {
        return this.request("DeleteTopic", req, cb);
    }
    /**
     * 为MQTT实例创建公网接入点
     */
    async CreateMQTTInsPublicEndpoint(req, cb) {
        return this.request("CreateMQTTInsPublicEndpoint", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249585, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.trp = void 0;
const v20210515_1 = require("./v20210515");
exports.trp = {
    v20210515: v20210515_1.v20210515,
};

}, function(modId) { var map = {"./v20210515":1738984249586}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249586, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210515 = void 0;
const Models = require("./trp_models");
const trp_client_1 = require("./trp_client");
exports.v20210515 = {
    Client: trp_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./trp_models":1738984249587,"./trp_client":1738984249588}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249587, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249588, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * trp client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("trp.tencentcloudapi.com", "2021-05-15", clientConfig);
    }
    /**
     * 查询二维码信息
     */
    async DescribeTraceCodeById(req, cb) {
        return this.request("DescribeTraceCodeById", req, cb);
    }
    /**
     * 查询商品列表
     */
    async DescribeProducts(req, cb) {
        return this.request("DescribeProducts", req, cb);
    }
    /**
     * 查自定义码规则列表
     */
    async DescribeCustomRules(req, cb) {
        return this.request("DescribeCustomRules", req, cb);
    }
    /**
     * 解绑溯源码和批次的关系，让溯源码重置为未关联的状态，以便关联其他批次
注意：溯源码必须属于指定的批次才会解绑
     */
    async ModifyTraceCodeUnlink(req, cb) {
        return this.request("ModifyTraceCodeUnlink", req, cb);
    }
    /**
     * 接收客户侧的用户已授权的号码。
     */
    async AuthorizedTransfer(req, cb) {
        return this.request("AuthorizedTransfer", req, cb);
    }
    /**
     * 查自定义码规则
     */
    async DescribeCustomRuleById(req, cb) {
        return this.request("DescribeCustomRuleById", req, cb);
    }
    /**
     * 支持增量查询扫码日志，通常提供给数据同步使用，调用时需要指定从哪一行开始查询数据
     */
    async DescribeRawScanLogs(req, cb) {
        return this.request("DescribeRawScanLogs", req, cb);
    }
    /**
     * 异步导入激活码包，如果是第三方码包，需要域名跟配置的匹配
     */
    async CreateTraceCodesAsync(req, cb) {
        return this.request("CreateTraceCodesAsync", req, cb);
    }
    /**
     * 查询批次信息
     */
    async DescribeCodeBatchById(req, cb) {
        return this.request("DescribeCodeBatchById", req, cb);
    }
    /**
     * 查询二维码列表
     */
    async DescribeTraceCodes(req, cb) {
        return this.request("DescribeTraceCodes", req, cb);
    }
    /**
     * 查询安心计划二维码列表
     */
    async DescribePlanQRCodes(req, cb) {
        return this.request("DescribePlanQRCodes", req, cb);
    }
    /**
     * 修改溯源信息的排序
     */
    async ModifyTraceDataRanks(req, cb) {
        return this.request("ModifyTraceDataRanks", req, cb);
    }
    /**
     * 查询码包的二维码列表，上限 3 万
     */
    async DescribeCodesByPack(req, cb) {
        return this.request("DescribeCodesByPack", req, cb);
    }
    /**
     * 批量上链接口
     */
    async CreateChainBatch(req, cb) {
        return this.request("CreateChainBatch", req, cb);
    }
    /**
     * 查询商户信息
     */
    async DescribeMerchantById(req, cb) {
        return this.request("DescribeMerchantById", req, cb);
    }
    /**
     * 新建商品
     */
    async CreateProduct(req, cb) {
        return this.request("CreateProduct", req, cb);
    }
    /**
     * 修改自定义码规则
     */
    async ModifyCustomRule(req, cb) {
        return this.request("ModifyCustomRule", req, cb);
    }
    /**
     * 查询渠道企业列表
     */
    async DescribeAgentCorps(req, cb) {
        return this.request("DescribeAgentCorps", req, cb);
    }
    /**
     * 查询渠道商下属企业额度使用情况
     */
    async DescribeCorpQuotas(req, cb) {
        return this.request("DescribeCorpQuotas", req, cb);
    }
    /**
     * 接收离线筛选包回执，用于效果统计和分析。
     */
    async ReportBatchCallbackStatus(req, cb) {
        return this.request("ReportBatchCallbackStatus", req, cb);
    }
    /**
     * 查询安心计划二维码扫码记录
     */
    async DescribePlanQRCodeScanRecords(req, cb) {
        return this.request("DescribePlanQRCodeScanRecords", req, cb);
    }
    /**
     * 修改溯源信息
     */
    async ModifyTraceData(req, cb) {
        return this.request("ModifyTraceData", req, cb);
    }
    /**
     * 查询批次列表
     */
    async DescribeCodeBatches(req, cb) {
        return this.request("DescribeCodeBatches", req, cb);
    }
    /**
     * 编辑商品
     */
    async ModifyProduct(req, cb) {
        return this.request("ModifyProduct", req, cb);
    }
    /**
     * 更新自定义码规则状态
     */
    async ModifyCustomRuleStatus(req, cb) {
        return this.request("ModifyCustomRuleStatus", req, cb);
    }
    /**
     * 查询商品信息
     */
    async DescribeProductById(req, cb) {
        return this.request("DescribeProductById", req, cb);
    }
    /**
     * 查询临时Token，主要用于上传接口
     */
    async DescribeTmpToken(req, cb) {
        return this.request("DescribeTmpToken", req, cb);
    }
    /**
     * 批量绑定指定批次并激活二维码，只支持平台发的码，且只会激活没有使用过的码
     */
    async CreateTraceCodes(req, cb) {
        return this.request("CreateTraceCodes", req, cb);
    }
    /**
     * 删除商品，如果商品被使用，则不可删除
     */
    async DeleteProduct(req, cb) {
        return this.request("DeleteProduct", req, cb);
    }
    /**
     * 上链溯源信息
     */
    async CreateTraceChain(req, cb) {
        return this.request("CreateTraceChain", req, cb);
    }
    /**
     * 生成自定义码包
     */
    async CreateCustomPack(req, cb) {
        return this.request("CreateCustomPack", req, cb);
    }
    /**
     * 查询溯源ID查溯源信息，通常溯源信息跟生产批次绑定，即一个批次的所有溯源信息都是一样的
     */
    async DescribeTraceDataById(req, cb) {
        return this.request("DescribeTraceDataById", req, cb);
    }
    /**
     * 以订单方式新建企业信息/配额信息
     */
    async CreateCorporationOrder(req, cb) {
        return this.request("CreateCorporationOrder", req, cb);
    }
    /**
     * 删除商户
     */
    async DeleteMerchant(req, cb) {
        return this.request("DeleteMerchant", req, cb);
    }
    /**
     * 查询扫码的统计信息列表，支持按照商户ID，产品ID，批次ID，安心码筛选，筛选条件至少有一个
没有被扫过的不会返回
     */
    async DescribeScanStats(req, cb) {
        return this.request("DescribeScanStats", req, cb);
    }
    /**
     * 查询码包状态
     */
    async DescribeCodePackStatus(req, cb) {
        return this.request("DescribeCodePackStatus", req, cb);
    }
    /**
     * 查询批次列表

旧版接口已经弃用，新业务请使用新版的接口 DescribeCodeBatches
     */
    async DescribeCodeBatchs(req, cb) {
        return this.request("DescribeCodeBatchs", req, cb);
    }
    /**
     * 新建自定义码规则
     */
    async CreateCustomRule(req, cb) {
        return this.request("CreateCustomRule", req, cb);
    }
    /**
     * 查询码包地址
     */
    async DescribeCodePackUrl(req, cb) {
        return this.request("DescribeCodePackUrl", req, cb);
    }
    /**
     * 编辑商户
     */
    async ModifyMerchant(req, cb) {
        return this.request("ModifyMerchant", req, cb);
    }
    /**
     * 新增批次
     */
    async CreateCodeBatch(req, cb) {
        return this.request("CreateCodeBatch", req, cb);
    }
    /**
     * 接收客户反馈的各环节数据
     */
    async EffectFeedback(req, cb) {
        return this.request("EffectFeedback", req, cb);
    }
    /**
     * 删除批次
     */
    async DeleteCodeBatch(req, cb) {
        return this.request("DeleteCodeBatch", req, cb);
    }
    /**
     * 删除溯源信息，如果已经上链则不可删除
     */
    async DeleteTraceData(req, cb) {
        return this.request("DeleteTraceData", req, cb);
    }
    /**
     * 新增溯源信息
     */
    async CreateTraceData(req, cb) {
        return this.request("CreateTraceData", req, cb);
    }
    /**
     * 生成普通码包
     */
    async CreateCodePack(req, cb) {
        return this.request("CreateCodePack", req, cb);
    }
    /**
     * 查询溯源信息，通常溯源信息跟生产批次绑定，即一个批次的所有溯源信息都是一样的
     */
    async DescribeTraceDataList(req, cb) {
        return this.request("DescribeTraceDataList", req, cb);
    }
    /**
     * 冻结或者激活二维码，所属的批次的冻结状态优先级大于单个二维码的状态，即如果批次是冻结的，那么该批次下二维码的状态都是冻结的
     */
    async ModifyTraceCode(req, cb) {
        return this.request("ModifyTraceCode", req, cb);
    }
    /**
     * 查询码包列表
     */
    async DescribeCodePacks(req, cb) {
        return this.request("DescribeCodePacks", req, cb);
    }
    /**
     * 查询扫码日志明细
     */
    async DescribeScanLogs(req, cb) {
        return this.request("DescribeScanLogs", req, cb);
    }
    /**
     * 修改批次
     */
    async ModifyCodeBatch(req, cb) {
        return this.request("ModifyCodeBatch", req, cb);
    }
    /**
     * 查询商户列表
     */
    async DescribeMerchants(req, cb) {
        return this.request("DescribeMerchants", req, cb);
    }
    /**
     * 新建商户
     */
    async CreateMerchant(req, cb) {
        return this.request("CreateMerchant", req, cb);
    }
    /**
     * 获取异步任务的输出地址
     */
    async DescribeJobFileUrl(req, cb) {
        return this.request("DescribeJobFileUrl", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249589, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.trro = void 0;
const v20220325_1 = require("./v20220325");
exports.trro = {
    v20220325: v20220325_1.v20220325,
};

}, function(modId) { var map = {"./v20220325":1738984249590}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249590, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220325 = void 0;
const Models = require("./trro_models");
const trro_client_1 = require("./trro_client");
exports.v20220325 = {
    Client: trro_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./trro_models":1738984249591,"./trro_client":1738984249592}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249591, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249592, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * trro client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("trro.tencentcloudapi.com", "2022-03-25", clientConfig);
    }
    /**
     * 用于获取项目信息
     */
    async DescribeProjectInfo(req, cb) {
        return this.request("DescribeProjectInfo", req, cb);
    }
    /**
     * 查询用户设备的授权绑定情况
     */
    async GetDevices(req, cb) {
        return this.request("GetDevices", req, cb);
    }
    /**
     * 用于修改设备信息
     */
    async ModifyDevice(req, cb) {
        return this.request("ModifyDevice", req, cb);
    }
    /**
     * 用于查看权限配置
     */
    async DescribePolicy(req, cb) {
        return this.request("DescribePolicy", req, cb);
    }
    /**
     * 统计license类型数量
     */
    async GetLicenseStat(req, cb) {
        return this.request("GetLicenseStat", req, cb);
    }
    /**
     * 获取各时间段的会话统计值
     */
    async DescribeSessionStatisticsByInterval(req, cb) {
        return this.request("DescribeSessionStatisticsByInterval", req, cb);
    }
    /**
     * 为推流设备绑定license，优先绑定到期时间最近的，到期时间相同优先绑定月包
     */
    async BoundLicenses(req, cb) {
        return this.request("BoundLicenses", req, cb);
    }
    /**
     * 用于批量删除修改权限配置
     */
    async BatchDeletePolicy(req, cb) {
        return this.request("BatchDeletePolicy", req, cb);
    }
    /**
     * 按授权查看license列表
     */
    async GetLicenses(req, cb) {
        return this.request("GetLicenses", req, cb);
    }
    /**
     * 用于获取设备信息列表
     */
    async DescribeDeviceList(req, cb) {
        return this.request("DescribeDeviceList", req, cb);
    }
    /**
     * 用于修改项目信息
     */
    async ModifyProject(req, cb) {
        return this.request("ModifyProject", req, cb);
    }
    /**
     * 获取设备会话数据详单
     */
    async DescribeDeviceSessionDetails(req, cb) {
        return this.request("DescribeDeviceSessionDetails", req, cb);
    }
    /**
     * 用于修改权限配置
     */
    async ModifyPolicy(req, cb) {
        return this.request("ModifyPolicy", req, cb);
    }
    /**
     * 用于创建设备
     */
    async CreateDevice(req, cb) {
        return this.request("CreateDevice", req, cb);
    }
    /**
     * 用于批量删除设备
     */
    async BatchDeleteDevices(req, cb) {
        return this.request("BatchDeleteDevices", req, cb);
    }
    /**
     * 获取会话统计值
     */
    async DescribeSessionStatistics(req, cb) {
        return this.request("DescribeSessionStatistics", req, cb);
    }
    /**
     * 用于获取指定设备信息
     */
    async DescribeDeviceInfo(req, cb) {
        return this.request("DescribeDeviceInfo", req, cb);
    }
    /**
     * 获取设备会话列表
     */
    async DescribeDeviceSessionList(req, cb) {
        return this.request("DescribeDeviceSessionList", req, cb);
    }
    /**
     * 用于创建项目
     */
    async CreateProject(req, cb) {
        return this.request("CreateProject", req, cb);
    }
    /**
     * 获取最新设备会话列表
     */
    async DescribeRecentSessionList(req, cb) {
        return this.request("DescribeRecentSessionList", req, cb);
    }
    /**
     * 获取设备已经绑定的可用授权数量
     */
    async GetDeviceLicense(req, cb) {
        return this.request("GetDeviceLicense", req, cb);
    }
    /**
     * 用于删除项目
     */
    async DeleteProject(req, cb) {
        return this.request("DeleteProject", req, cb);
    }
    /**
     * 用于获取项目列表
     */
    async DescribeProjectList(req, cb) {
        return this.request("DescribeProjectList", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249593, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.trtc = void 0;
const v20190722_1 = require("./v20190722");
exports.trtc = {
    v20190722: v20190722_1.v20190722,
};

}, function(modId) { var map = {"./v20190722":1738984249594}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249594, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190722 = void 0;
const Models = require("./trtc_models");
const trtc_client_1 = require("./trtc_client");
exports.v20190722 = {
    Client: trtc_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./trtc_models":1738984249595,"./trtc_client":1738984249596}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249595, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249596, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * trtc client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("trtc.tencentcloudapi.com", "2019-07-22", clientConfig);
    }
    /**
     * 查询SdkAppId下的房间列表。默认返回10条通话，一次最多返回100条通话。最大可查询14天内的数据。（同老接口DescribeRoomInformation）
**注意**：
1.该接口只用于历史数据统计或核对数据使用，实时类关键业务逻辑不能使用。
2.该接口自2024年4月1日起正式商业化，需订阅套餐解锁调用能力，提供以下两种解锁方式，可任意其一解锁：
方式一：通过订阅[包月套餐](https://cloud.tencent.com/document/product/647/85386)「尊享版」（可查近7天）和「旗舰版」（可查近14天），[前往订阅](https://buy.cloud.tencent.com/trtc?trtcversion=top)。
方式二：通过订阅[监控仪表盘](https://cloud.tencent.com/document/product/647/81331)商业套餐包「基础版」（可查近7天）和「进阶版」（可查近14天），[前往订阅](https://buy.cloud.tencent.com/trtc_monitor)。
     */
    async DescribeRoomInfo(req, cb) {
        return this.request("DescribeRoomInfo", req, cb);
    }
    /**
     * 更新AIConversation参数
     */
    async UpdateAIConversation(req, cb) {
        return this.request("UpdateAIConversation", req, cb);
    }
    /**
     * 获取TRTC音视频互动的用量明细，单位:分钟。
- 查询时间小于等于1天时，返回每5分钟粒度的数据；查询时间大于1天时，返回按天汇总的数据。
- 单次查询统计区间最多不能超过31天。
- 若查询当天用量，由于统计延迟等原因，返回数据可能不够准确。
- 该接口只用于历史用量数据统计或核对数据使用，关键业务逻辑不能使用。
- 默认接口请求频率限制：5次/秒。
     */
    async DescribeTrtcUsage(req, cb) {
        return this.request("DescribeTrtcUsage", req, cb);
    }
    /**
     * 接口说明：
启动终端审核功能，完成房间内的音频审核。
     */
    async CreateBasicModeration(req, cb) {
        return this.request("CreateBasicModeration", req, cb);
    }
    /**
     * 停止AI对话任务
     */
    async StopAIConversation(req, cb) {
        return this.request("StopAIConversation", req, cb);
    }
    /**
     * 查询TRTC监控仪表盘-数据大盘质量指标（包括下列指标）
joinSuccessRate：加入频道成功率。
joinSuccessIn5sRate：5s内加入频道成功率。
audioFreezeRate：音频卡顿率。
videoFreezeRate：视频卡顿率。
networkDelay ：网络延迟率。
注意：
1.调用接口需开通监控仪表盘【基础版】和【进阶版】，监控仪表盘【免费版】不支持调用，监控仪表盘版本功能和计费说明：https://cloud.tencent.com/document/product/647/81331。
2.查询时间范围根据监控仪表盘功能版本而定，【基础版】可查近30天，【进阶版】可查近60天。
     */
    async DescribeTRTCMarketQualityMetricData(req, cb) {
        return this.request("DescribeTRTCMarketQualityMetricData", req, cb);
    }
    /**
     * 查询页面录制任务
     */
    async DescribeWebRecord(req, cb) {
        return this.request("DescribeWebRecord", req, cb);
    }
    /**
     * 接口说明：
启动一个混流转推任务，将  TRTC 房间的多路音视频流混成一路音视频流，编码后推到直播 CDN 或者回推到 TRTC 房间。也支持不转码直接转推 TRTC 房间的单路流。启动成功后，会返回一个 SdkAppid 维度唯一的任务 Id（TaskId）。您需要保存该 TaskId，后续需要依赖此 TaskId 更新和结束任务。可以参考文档： [功能说明](https://cloud.tencent.com/document/product/647/84721#b9a855f4-e38c-4616-9b07-fc44e0e8282a) 和 [常见问题](https://cloud.tencent.com/document/product/647/62620)

注意：
您可以在控制台开通旁路转推回调功能，对转推 CDN 状态的事件进行监控，回调请参考文档：[旁路转推回调说明](https://cloud.tencent.com/document/product/647/88552)
您发起混流转推任务时，可能会产生如下费用：
MCU 混流转码费用，请参考文档：[云端混流转码计费说明](https://cloud.tencent.com/document/product/647/49446)
转推非腾讯云 CDN 费用，请参考文档：[云端转推计费说明](https://cloud.tencent.com/document/product/647/82155)
     */
    async StartPublishCdnStream(req, cb) {
        return this.request("StartPublishCdnStream", req, cb);
    }
    /**
     * 查询指定时间内的用户列表及用户通话质量数据，最大可查询14天内数据。DataType 不为null，查询起止时间不超过1个小时，查询用户不超过6个，支持跨天查询。DataType为null时，查询起止时间不超过4个小时， 默认查询6个用户，同时支持每页查询100以内用户个数（PageSize不超过100）。接口用于查询质量问题，不推荐作为计费使用。（同老接口DescribeCallDetail）
**注意**：
1.该接口只用于历史数据统计或核对数据使用，实时类关键业务逻辑不能使用。
2.该接口自2024年4月1日起正式商业化，需订阅套餐解锁调用能力，提供以下两种解锁方式，可任选其一解锁：
方式一：通过订阅[包月套餐](https://cloud.tencent.com/document/product/647/85386)「尊享版」（可查近7天）和「旗舰版」（可查近14天），[前往订阅](https://buy.cloud.tencent.com/trtc?trtcversion=top)。
方式二：通过订阅[监控仪表盘](https://cloud.tencent.com/document/product/647/81331)商业套餐包「基础版」（可查近7天）和「进阶版」（可查近14天），[前往订阅](https://buy.cloud.tencent.com/trtc_monitor)。
     */
    async DescribeCallDetailInfo(req, cb) {
        return this.request("DescribeCallDetailInfo", req, cb);
    }
    /**
     * 您可以查询输入在线媒体流任务的状态。
     */
    async DescribeStreamIngest(req, cb) {
        return this.request("DescribeStreamIngest", req, cb);
    }
    /**
     * 查询TRTC监控仪表盘-数据大盘规模指标（会返回通话人数，通话房间数，峰值同时在线人数，峰值同时在线频道数）
userCount：通话人数，
roomCount：通话房间数，从有用户加入频道到所有用户离开频道计为一个通话频道。
peakCurrentChannels：峰值同时在线频道数。
peakCurrentUsers：峰值同时在线人数。
注意：
1.调用接口需开通监控仪表盘【基础版】和【进阶版】，监控仪表盘【免费版】不支持调用，监控仪表盘版本功能和计费说明：https://cloud.tencent.com/document/product/647/81331。
2.查询时间范围根据监控仪表盘功能版本而定，【基础版】可查近30天，【进阶版】可查近60天。
     */
    async DescribeTRTCMarketScaleMetricData(req, cb) {
        return this.request("DescribeTRTCMarketScaleMetricData", req, cb);
    }
    /**
     * 启动AI对话任务，AI通道机器人进入TRTC房间，与房间内指定的成员进行AI对话，适用于智能客服，AI口语教师等场景

TRTC AI对话功能内置语音转文本能力，同时提供通道服务，即客户可灵活指定第三方AI模型（LLM）服务和文本转音频（TTS)服务，更多[功能说明](https://cloud.tencent.com/document/product/647/108901)。
     */
    async StartAIConversation(req, cb) {
        return this.request("StartAIConversation", req, cb);
    }
    /**
     * 查询AI对话任务状态。
     */
    async DescribeAIConversation(req, cb) {
        return this.request("DescribeAIConversation", req, cb);
    }
    /**
     * 接口说明：启动云端混流，并指定混流画面中各路画面的布局位置。

TRTC 的一个房间中可能会同时存在多路音视频流，您可以通过此 API 接口，通知腾讯云服务端将多路视频画面合成一路，并指定每一路画面的位置，同时将多路声音进行混音，最终形成一路音视频流，以便用于录制和直播观看。

您可以通过此接口实现如下目标：
- 设置最终直播流的画质和音质，包括视频分辨率、视频码率、视频帧率、以及声音质量等。
- 设置各路画面的位置和布局，您只需要在启动时设置一次，排版引擎会自动完成后续的画面排布。
- 设置录制文件名，用于二次回放。
- 设置 CDN 直播流 ID，用于在 CDN 进行直播观看。

目前已经支持了如下几种布局模板：
- 悬浮模板：第一个进入房间的用户的视频画面会铺满整个屏幕，其他用户的视频画面从左下角依次水平排列，显示为小画面，最多4行，每行4个，小画面悬浮于大画面之上。最多支持1个大画面和15个小画面，如果用户只发送音频，仍然会占用画面位置。
- 九宫格模板：所有用户的视频画面大小一致，平分整个屏幕，人数越多，每个画面的尺寸越小。最多支持16个画面，如果用户只发送音频，仍然会占用画面位置。
- 屏幕分享模板：适合视频会议和在线教育场景的布局，屏幕分享（或者主讲的摄像头）始终占据屏幕左侧的大画面位置，其他用户依次垂直排列于右侧，最多两列，每列最多8个小画面。最多支持1个大画面和15个小画面。若上行分辨率宽高比与画面输出宽高比不一致时，左侧大画面为了保持内容的完整性采用缩放方式处理，右侧小画面采用裁剪方式处理。
- 画中画模板：适用于混合大小两路视频画面和其他用户混音，或者混合一路大画面和其他用户混音的场景。小画面悬浮于大画面之上，可以指定大小画面的用户以及小画面的显示位置。
- 自定义模板：适用于在混流中指定用户的画面位置，或者预设视频画面位置的场景。当预设位置指定用户时，排版引擎会为该用户预留位置；当预设位置未指定用户时，排版引擎会根据进房间顺序自动填充。预设位置填满时，不再混合其他用户的画面和声音。自定义模板启用占位图功能时（LayoutParams中的PlaceHolderMode设置成1），在预设位置的用户没有上行视频时可显示对应的占位图（PlaceImageId）。

注意：
1、**混流转码为收费功能，调用接口将产生云端混流转码费用，详见[云端混流转码计费说明](https://cloud.tencent.com/document/product/647/49446)。**
2、2020年1月9号及以后创建的应用才能直接调用此接口。2020年1月9日之前创建的应用默认使用云直播的云端混流，如需切换至MCU混流，请[提交工单](https://console.cloud.tencent.com/workorder/category)寻求帮助。
3、客户端混流和服务端混流不能混用。
     */
    async StartMCUMixTranscodeByStrRoomId(req, cb) {
        return this.request("StartMCUMixTranscodeByStrRoomId", req, cb);
    }
    /**
     * 将一个在线媒体流推到TRTC房间，更多功能说明见[输入媒体流进房](https://cloud.tencent.com/document/product/647/102957#50940aad-d90f-4473-9f46-d5dd46917653)。
使用输入在线媒体流功能需先订阅 [尊享版或旗舰版套餐包](https://cloud.tencent.com/document/product/647/85386) 解锁能力位。
     */
    async StartStreamIngest(req, cb) {
        return this.request("StartStreamIngest", req, cb);
    }
    /**
     * 更新输入在线媒体流任务的StreamUrl
     */
    async UpdateStreamIngest(req, cb) {
        return this.request("UpdateStreamIngest", req, cb);
    }
    /**
     * 如果您需要在 [云端混流转码](https://cloud.tencent.com/document/product/647/16827) 时频繁删除自定义背景图或水印，可通过此接口删除已上传的图片。无需频繁删除图片的场景，建议直接在 [控制台 > 应用管理 > 素材管理](https://cloud.tencent.com/document/product/647/50769) 中操作。
     */
    async DeletePicture(req, cb) {
        return this.request("DeletePicture", req, cb);
    }
    /**
     * 查询TRTC监控仪表盘-实时监控质量指标（会返回下列指标）
-视频卡顿率
-音频卡顿率
注意：
1.调用接口需开通监控仪表盘【基础版】和【进阶版】，监控仪表盘【免费版】不支持调用，监控仪表盘版本功能和计费说明：https://cloud.tencent.com/document/product/647/81331。
2.查询时间范围根据监控仪表盘功能版本而定，基础版可查近3小时，进阶版可查近12小时。
     */
    async DescribeTRTCRealTimeQualityMetricData(req, cb) {
        return this.request("DescribeTRTCRealTimeQualityMetricData", req, cb);
    }
    /**
     * 如果您需要在 [云端混流转码](https://cloud.tencent.com/document/product/647/16827) 时频繁新增自定义背景图或水印，可通过此接口上传新的图片素材。无需频繁新增图片的场景，建议直接在 [控制台 > 应用管理 > 素材管理](https://cloud.tencent.com/document/product/647/50769) 中操作。
     */
    async CreatePicture(req, cb) {
        return this.request("CreatePicture", req, cb);
    }
    /**
     * 查询TRTC监控仪表盘-实时监控规模指标（会返回下列指标）
-userCount（在线用户数）
-roomCount（在线房间数）
注意：
1.调用接口需开通监控仪表盘【基础版】和【进阶版】，监控仪表盘【免费版】不支持调用，监控仪表盘[版本功能和计费说明](https://cloud.tencent.com/document/product/647/81331)。
2.查询时间范围根据监控仪表盘功能版本而定，基础版可查近3小时，进阶版可查近12小时。
3.除此之外您也可以通过[订阅TRTC包月套餐](https://buy.cloud.tencent.com/trtc)尊享版或旗舰版解锁此接口的调用能力，请在开通包月套餐后，请[提交工单](https://console.cloud.tencent.com/workorder/category)联系售后解锁调用能力
     */
    async DescribeTRTCRealTimeScaleData(req, cb) {
        return this.request("DescribeTRTCRealTimeScaleData", req, cb);
    }
    /**
     * 接口说明：将用户从房间移出，适用于主播/房主/管理员踢人等场景。支持所有平台，Android、iOS、Windows 和 macOS 需升级到 TRTC SDK 6.6及以上版本。
     */
    async RemoveUser(req, cb) {
        return this.request("RemoveUser", req, cb);
    }
    /**
     * 成功开启审核任务后，可以使用此接口来停止任务。
     */
    async DeleteBasicModeration(req, cb) {
        return this.request("DeleteBasicModeration", req, cb);
    }
    /**
     * 成功开启录制后，可以使用此接口来更新录制任务。仅在录制任务进行时有效，录制退出后更新将会返回错误。更新操作是全量覆盖，并不是增量更新的模式，也就是说每次更新都需要携带全量的信息。
     */
    async ModifyCloudRecording(req, cb) {
        return this.request("ModifyCloudRecording", req, cb);
    }
    /**
     * 查询用户某次通话内的进退房，视频开关等详细事件。可查询14天内数据。（同接口DescribeDetailEvent）
     */
    async DescribeUserEvent(req, cb) {
        return this.request("DescribeUserEvent", req, cb);
    }
    /**
     * 通过此接口可以发起 WEB 页面录制任务，在接口参数中指定录制 URL，录制分辨率，录制结果存储等参数。
因为参数或API逻辑问题会立即返回结果。而因为页面问题，如页面无法访问，会在回调中返回结果，请关注。
     */
    async StartWebRecord(req, cb) {
        return this.request("StartWebRecord", req, cb);
    }
    /**
     * 接口说明：启动云端混流，并指定混流画面中各路画面的布局位置。

TRTC 的一个房间中可能会同时存在多路音视频流，您可以通过此 API 接口，通知腾讯云服务端将多路视频画面合成一路，并指定每一路画面的位置，同时将多路声音进行混音，最终形成一路音视频流，以便用于录制和直播观看。房间销毁后混流自动结束。

您可以通过此接口实现如下目标：
- 设置最终直播流的画质和音质，包括视频分辨率、视频码率、视频帧率、以及声音质量等。
- 设置各路画面的位置和布局，您只需要在启动时设置一次，排版引擎会自动完成后续的画面排布。
- 设置录制文件名，用于二次回放。
- 设置 CDN 直播流 ID，用于在 CDN 进行直播观看。

目前已经支持了如下几种布局模板：
- 悬浮模板：第一个进入房间的用户的视频画面会铺满整个屏幕，其他用户的视频画面从左下角依次水平排列，显示为小画面，最多4行，每行4个，小画面悬浮于大画面之上。最多支持1个大画面和15个小画面，如果用户只发送音频，仍然会占用画面位置。
- 九宫格模板：所有用户的视频画面大小一致，平分整个屏幕，人数越多，每个画面的尺寸越小。最多支持16个画面，如果用户只发送音频，仍然会占用画面位置。
- 屏幕分享模板：适合视频会议和在线教育场景的布局，屏幕分享（或者主讲的摄像头）始终占据屏幕左侧的大画面位置，其他用户依次垂直排列于右侧，最多两列，每列最多8个小画面。最多支持1个大画面和15个小画面。若上行分辨率宽高比与画面输出宽高比不一致时，左侧大画面为了保持内容的完整性采用缩放方式处理，右侧小画面采用裁剪方式处理。
- 画中画模板：适用于混合大小两路视频画面和其他用户混音，或者混合一路大画面和其他用户混音的场景。小画面悬浮于大画面之上，可以指定大小画面的用户以及小画面的显示位置，最多支持2个画面。
- 自定义模板：适用于在混流中指定用户的画面位置，或者预设视频画面位置的场景。当预设位置指定用户时，排版引擎会为该用户预留位置；当预设位置未指定用户时，排版引擎会根据进房间顺序自动填充。预设位置填满时，不再混合其他用户的画面和声音。自定义模板启用占位图功能时（LayoutParams中的PlaceHolderMode设置成1），在预设位置的用户没有上行视频时可显示对应的占位图（PlaceImageId）。

注意：
1、**混流转码为收费功能，调用接口将产生云端混流转码费用，详见[云端混流转码计费说明](https://cloud.tencent.com/document/product/647/49446)。**
2、2020年1月9号及以后创建的应用才能直接调用此接口。2020年1月9日之前创建的应用默认使用云直播的云端混流，如需切换至MCU混流，请[提交工单](https://console.cloud.tencent.com/workorder/category)寻求帮助。
3、客户端混流和服务端混流不能混用。
     */
    async StartMCUMixTranscode(req, cb) {
        return this.request("StartMCUMixTranscode", req, cb);
    }
    /**
     * 启动转录机器人，后台会通过机器人拉流进行实时进行语音识别并下发字幕和转录消息。
转录机器人支持两种拉流方式，通过TranscriptionMode字段控制：
- 拉取全房间的流。
- 拉取特定用户的流。

服务端通过TRTC的自定义消息实时下发字幕以及转录消息，CmdId固定是1。客户端只需监听自定义消息的回调即可，比如[c++回调](https://cloud.tencent.com/document/product/647/79637#4cd82f4edb24992a15a25187089e1565)。其他客户端比如安卓、Web等同样可在该链接处找到。
     */
    async StartAITranscription(req, cb) {
        return this.request("StartAITranscription", req, cb);
    }
    /**
     * 查询TRTC监控仪表盘-数据大盘规模指标（会返回通话人数，通话房间数，峰值同时在线人数，峰值同时在线频道数）
userCount：通话人数，
roomCount：通话房间数，从有用户加入频道到所有用户离开频道计为一个通话频道。
peakCurrentChannels：峰值同时在线频道数。
peakCurrentUsers：峰值同时在线人数。
注意：
1.调用接口需开通监控仪表盘【基础版】和【进阶版】，监控仪表盘【免费版】不支持调用，监控仪表盘[版本功能和计费说明](https://cloud.tencent.com/document/product/647/81331)。
2.查询时间范围根据监控仪表盘功能版本而定，【基础版】可查近30天，【进阶版】可查近60天。
     */
    async DescribeTRTCMarketScaleData(req, cb) {
        return this.request("DescribeTRTCMarketScaleData", req, cb);
    }
    /**
     * 停止页面录制任务
     */
    async StopWebRecord(req, cb) {
        return this.request("StopWebRecord", req, cb);
    }
    /**
     * 接口说明：
停止指定的混流转推任务。如果没有调用 Stop 接口停止任务，所有参与混流转推的主播离开 TRTC 房间超过 AgentParams.MaxIdleTime 设置的时间后，任务也会自动停止。
     */
    async StopPublishCdnStream(req, cb) {
        return this.request("StopPublishCdnStream", req, cb);
    }
    /**
     * 接口说明：
启动云端录制功能，完成房间内的音视频录制，并上传到指定的云存储。您可以通过此 API 接口把TRTC 房间中的每一路音视频流做单独的录制又或者多路视频画面合流混成一路。

您可以通过此接口实现如下目标：
* 指定订阅流参数（RecordParams）来指定需要录制的主播的黑名单或者白名单。
* 指定录制存储参数（StorageParams）来指定上传到您希望的云存储，目前支持腾讯云（云点播VOD、对象存储COS）和第三方AWS
* 指定合流模式下的音视频转码详细参数（MixTranscodeParams），包括视频分辨率、视频码率、视频帧率、以及声音质量等
* 指定合流模式各路画面的位置和布局或者也可以指定自动模板的方式来配置。

关键名词：
* 单流录制：分别录制房间的订阅UserId的音频和视频，录制服务会实时将录制文件上传至您指定的云存储。
* 合流录制：将房间内订阅UserId的音视频混录成一个视频文件，并将录制文件上传至您指定的云存储。（录制结束后可前往云点播控制台https://console.cloud.tencent.com/vod/media 或 对象存储COS控制台https://console.cloud.tencent.com/cos/bucket查看文件）。
     */
    async CreateCloudRecording(req, cb) {
        return this.request("CreateCloudRecording", req, cb);
    }
    /**
     * 可查询SdkAppId每天的房间数和用户数，按天统计，可查询最近14天的数据。当天未结束，数据未统计完成，无法查到当天的房间数与用户数。（同老接口DescribeHistoryScale）
     */
    async DescribeScaleInfo(req, cb) {
        return this.request("DescribeScaleInfo", req, cb);
    }
    /**
     * 获取TRTC旁路转推的用量明细。
- 查询时间小于等于1天时，返回每5分钟粒度的数据；查询时间大于1天时，返回按天汇总的数据。
- 单次查询统计区间最多不能超过31天。
- 若查询当天用量，由于统计延迟等原因，返回数据可能不够准确。
- 该接口只用于历史用量数据统计或核对数据使用，关键业务逻辑不能使用。
- 默认接口请求频率限制：5次/秒。
     */
    async DescribeRelayUsage(req, cb) {
        return this.request("DescribeRelayUsage", req, cb);
    }
    /**
     * 查询指定时间内的用户列表，最大可查询14天内数据，查询起止时间不超过4小时。默认每页查询6个用户，支持每页最大查询100个用户PageSize不超过100）。（同老接口DescribeUserInformation）
**注意**：
1.该接口只用于历史数据统计或核对数据使用，实时类关键业务逻辑不能使用。
2.该接口自2024年4月1日起正式商业化，需订阅套餐解锁调用能力，提供以下两种解锁方式，可任选其一解锁：
方式一：通过订阅[包月套餐](https://cloud.tencent.com/document/product/647/85386)「尊享版」（可查近7天）和「旗舰版」（可查近14天），[前往订阅](https://buy.cloud.tencent.com/trtc?trtcversion=top)。
方式二：通过订阅[监控仪表盘](https://cloud.tencent.com/document/product/647/81331)商业套餐包「基础版」（可查近7天）和「进阶版」（可查近14天），[前往订阅](https://buy.cloud.tencent.com/trtc_monitor)。
     */
    async DescribeUserInfo(req, cb) {
        return this.request("DescribeUserInfo", req, cb);
    }
    /**
     * 接口说明：把房间所有用户从房间移出，解散房间。支持所有平台，Android、iOS、Windows 和 macOS 需升级到 TRTC SDK 6.6及以上版本。
     */
    async DismissRoomByStrRoomId(req, cb) {
        return this.request("DismissRoomByStrRoomId", req, cb);
    }
    /**
     * 接口说明：结束云端混流
     */
    async StopMCUMixTranscodeByStrRoomId(req, cb) {
        return this.request("StopMCUMixTranscodeByStrRoomId", req, cb);
    }
    /**
     * 停止一个输入在线媒体流任务。
     */
    async StopStreamIngest(req, cb) {
        return this.request("StopStreamIngest", req, cb);
    }
    /**
     * 获取TRTC录制的用量明细。
- 查询时间小于等于1天时，返回每5分钟粒度的数据；查询时间大于1天时，返回按天汇总的数据。
- 单次查询统计区间最多不能超过31天。
- 若查询当天用量，由于统计延迟等原因，返回数据可能不够准确。
- 该接口只用于历史用量数据统计或核对数据使用，关键业务逻辑不能使用。
- 默认接口请求频率限制：5次/秒。
     */
    async DescribeRecordingUsage(req, cb) {
        return this.request("DescribeRecordingUsage", req, cb);
    }
    /**
     * 接口说明：将用户从房间移出，适用于主播/房主/管理员踢人等场景。支持所有平台，Android、iOS、Windows 和 macOS 需升级到 TRTC SDK 6.6及以上版本。
     */
    async RemoveUserByStrRoomId(req, cb) {
        return this.request("RemoveUserByStrRoomId", req, cb);
    }
    /**
     * 获取TRTC混流转码的用量明细。
- 查询时间小于等于1天时，返回每5分钟粒度的数据；查询时间大于1天时，返回按天汇总的数据。
- 单次查询统计区间最多不能超过31天。
- 若查询当天用量，由于统计延迟等原因，返回数据可能不够准确。
- 该接口只用于历史用量数据统计或核对数据使用，关键业务逻辑不能使用。
- 默认接口请求频率限制：5次/秒。
     */
    async DescribeMixTranscodingUsage(req, cb) {
        return this.request("DescribeMixTranscodingUsage", req, cb);
    }
    /**
     * 接口说明：把房间所有用户从房间移出，解散房间。支持所有平台，Android、iOS、Windows 和 macOS 需升级到 TRTC SDK 6.6及以上版本。
     */
    async DismissRoom(req, cb) {
        return this.request("DismissRoom", req, cb);
    }
    /**
     * 查询TRTC音视频房间维度用量。
- 单次只能查询一天数据，返回查询时间段内的汇总数据；通过多次查询可以查不同天数据。若查询跨天用量，由于统计延迟等原因，返回数据可能不够准确。
- 该接口只用于历史用量数据统计或核对数据使用，关键业务逻辑不能使用，不可用于账单核对，如需对账请使用账号/应用维度用量API：DescribeTrtcUsage。
- 默认接口请求频率限制：1次/15秒。
- 数据最早可查日期为2023年4月1日0点，最大可查范围近3个月。
     */
    async DescribeTrtcRoomUsage(req, cb) {
        return this.request("DescribeTrtcRoomUsage", req, cb);
    }
    /**
     * 查询云端录制计费时长。

- 查询时间小于等于1天时，返回每5分钟粒度的数据；查询时间大于1天时，返回按天汇总的数据。
- 单次查询统计区间最多不能超过31天。
- 若查询当天用量，由于统计延迟等原因，返回数据可能不够准确。
- 日结后付费将于次日上午推送账单，建议次日上午9点以后再来查询前一天的用量。
     */
    async DescribeRecordStatistic(req, cb) {
        return this.request("DescribeRecordStatistic", req, cb);
    }
    /**
     * 查询旁路转码计费时长。
- 查询时间小于等于1天时，返回每5分钟粒度的数据；查询时间大于1天时，返回按天汇总的数据。
- 单次查询统计区间最多不能超过31天。
- 若查询当天用量，由于统计延迟等原因，返回数据可能不够准确。
- 日结后付费将于次日上午推送账单，建议次日上午9点以后再来查询前一天的用量。
     */
    async DescribeTrtcMcuTranscodeTime(req, cb) {
        return this.request("DescribeTrtcMcuTranscodeTime", req, cb);
    }
    /**
     * 成功开启录制后，可以使用此接口来查询录制状态。仅在录制任务进行时有效，录制退出后查询将会返回错误。
录制文件上传到云点播VOD时，StorageFileList中不会返回录制文件信息，请订阅相关录制文件回调事件，获取录制文件信息。
     */
    async DescribeCloudRecording(req, cb) {
        return this.request("DescribeCloudRecording", req, cb);
    }
    /**
     * 如果您需要在 [云端混流转码](https://cloud.tencent.com/document/product/647/16827) 时频繁修改自定义背景图或水印素材，可通过此接口修改已上传的图片。无需频繁修改图片素材的场景，建议直接在 [控制台 > 应用管理 > 素材管理](https://cloud.tencent.com/document/product/647/50769) 中操作。
     */
    async ModifyPicture(req, cb) {
        return this.request("ModifyPicture", req, cb);
    }
    /**
     * 查询AI转录任务状态。
     */
    async DescribeAITranscription(req, cb) {
        return this.request("DescribeAITranscription", req, cb);
    }
    /**
     * 接口说明：
成功发起混流转推后，可以使用此接口来更新任务。仅在任务进行时有效，任务退出后更新将会返回错误。更新操作为增量更新模式。
注意：为了保障推流的稳定性，更新不支持任务在纯音频、音视频、纯视频之间进行切换。
     */
    async UpdatePublishCdnStream(req, cb) {
        return this.request("UpdatePublishCdnStream", req, cb);
    }
    /**
     * 查询TRTC监控仪表盘-实时监控质量指标（会返回下列指标）
-视频卡顿率
-音频卡顿率
注意：
1.调用接口需开通监控仪表盘【基础版】和【进阶版】，监控仪表盘【免费版】不支持调用，监控仪表盘[版本功能和计费说明]（https://cloud.tencent.com/document/product/647/81331）。
2.查询时间范围根据监控仪表盘功能版本而定，基础版可查近3小时，进阶版可查近12小时。
     */
    async DescribeTRTCRealTimeQualityData(req, cb) {
        return this.request("DescribeTRTCRealTimeQualityData", req, cb);
    }
    /**
     * 成功开启录制后，可以使用此接口来停止录制任务。停止录制成功后不代表文件全部传输完成，如果未完成后台将会继续上传文件，成功后通过事件回调通知客户文件全部传输完成状态。
     */
    async DeleteCloudRecording(req, cb) {
        return this.request("DeleteCloudRecording", req, cb);
    }
    /**
     * 如果您需要在 [云端混流转码](https://cloud.tencent.com/document/product/647/16827) 时频繁查找自定义背景图或水印信息，可通过此接口查找已上传的图片信息。无需频繁查找图片信息的场景，建议直接在 [控制台 > 应用管理 > 素材管理](https://cloud.tencent.com/document/product/647/50769) 中查看。
     */
    async DescribePicture(req, cb) {
        return this.request("DescribePicture", req, cb);
    }
    /**
     * 查询TRTC监控仪表盘-数据大盘质量指标（包括下列指标）
joinSuccessRate：加入频道成功率。
joinSuccessIn5sRate：5s内加入频道成功率。
audioFreezeRate：音频卡顿率。
videoFreezeRate：视频卡顿率。
networkDelay ：网络延迟率。
注意：
1.调用接口需开通监控仪表盘【基础版】和【进阶版】，监控仪表盘【免费版】不支持调用，监控仪表盘[版本功能和计费说明](https://cloud.tencent.com/document/product/647/81331)。
2.查询时间范围根据监控仪表盘功能版本而定，【基础版】可查近30天，【进阶版】可查近60天。
     */
    async DescribeTRTCMarketQualityData(req, cb) {
        return this.request("DescribeTRTCMarketQualityData", req, cb);
    }
    /**
     * 提供服务端控制机器人的功能
     */
    async ControlAIConversation(req, cb) {
        return this.request("ControlAIConversation", req, cb);
    }
    /**
     * 停止AI转录任务。
     */
    async StopAITranscription(req, cb) {
        return this.request("StopAITranscription", req, cb);
    }
    /**
     * 查询SdkAppId下任意20条异常体验事件，返回异常体验ID与可能产生异常体验的原因。可查询14天内数据，查询起止时间不超过1个小时。支持跨天查询。（同老接口DescribeAbnormalEvent）
异常体验ID映射见：https://cloud.tencent.com/document/product/647/44916
     */
    async DescribeUnusualEvent(req, cb) {
        return this.request("DescribeUnusualEvent", req, cb);
    }
    /**
     * 查询TRTC监控仪表盘-实时监控规模指标（会返回下列指标）
-userCount（在线用户数）
-roomCount（在线房间数）
注意：
1.调用接口需开通监控仪表盘【基础版】和【进阶版】，监控仪表盘【免费版】不支持调用，监控仪表盘版本功能和计费说明：https://cloud.tencent.com/document/product/647/81331。
2.查询时间范围根据监控仪表盘功能版本而定，基础版可查近3小时，进阶版可查近12小时。
xa0
3.除此之外您也可以通过订阅TRTC包月套餐(https://buy.cloud.tencent.com/trtc)尊享版或旗舰版解锁此接口（DescribeTRTCRealTimeScaleMetricData）的调用能力，请在开通包月套餐后，请提交工单联系售后解锁调用能力https://console.cloud.tencent.com/workorder/category
     */
    async DescribeTRTCRealTimeScaleMetricData(req, cb) {
        return this.request("DescribeTRTCRealTimeScaleMetricData", req, cb);
    }
    /**
     * 接口说明：结束云端混流
     */
    async StopMCUMixTranscode(req, cb) {
        return this.request("StopMCUMixTranscode", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249597, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tse = void 0;
const v20201207_1 = require("./v20201207");
exports.tse = {
    v20201207: v20201207_1.v20201207,
};

}, function(modId) { var map = {"./v20201207":1738984249598}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249598, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201207 = void 0;
const Models = require("./tse_models");
const tse_client_1 = require("./tse_client");
exports.v20201207 = {
    Client: tse_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tse_models":1738984249599,"./tse_client":1738984249600}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249599, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249600, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tse client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tse.tencentcloudapi.com", "2020-12-07", clientConfig);
    }
    /**
     * 获取云原生网关服务详情
     */
    async DescribeOneCloudNativeAPIGatewayService(req, cb) {
        return this.request("DescribeOneCloudNativeAPIGatewayService", req, cb);
    }
    /**
     * 修改引擎公网访问配置
     */
    async UpdateEngineInternetAccess(req, cb) {
        return this.request("UpdateEngineInternetAccess", req, cb);
    }
    /**
     * 查询云原生网关的限流插件(服务)
     */
    async DescribeCloudNativeAPIGatewayServiceRateLimit(req, cb) {
        return this.request("DescribeCloudNativeAPIGatewayServiceRateLimit", req, cb);
    }
    /**
     * 更新云原生网关证书
     */
    async ModifyCloudNativeAPIGatewayCertificate(req, cb) {
        return this.request("ModifyCloudNativeAPIGatewayCertificate", req, cb);
    }
    /**
     * 删除公网网络配置
     */
    async DeleteCloudNativeAPIGatewayPublicNetwork(req, cb) {
        return this.request("DeleteCloudNativeAPIGatewayPublicNetwork", req, cb);
    }
    /**
     * 查询治理中心服务别名列表
     */
    async DescribeGovernanceAliases(req, cb) {
        return this.request("DescribeGovernanceAliases", req, cb);
    }
    /**
     * 删除配置文件分组
     */
    async DeleteConfigFileGroup(req, cb) {
        return this.request("DeleteConfigFileGroup", req, cb);
    }
    /**
     * 创建服务治理中心配置文件组
     */
    async CreateConfigFileGroup(req, cb) {
        return this.request("CreateConfigFileGroup", req, cb);
    }
    /**
     * 删除引擎实例
     */
    async DeleteEngine(req, cb) {
        return this.request("DeleteEngine", req, cb);
    }
    /**
     * 修改治理中心服务
     */
    async ModifyGovernanceServices(req, cb) {
        return this.request("ModifyGovernanceServices", req, cb);
    }
    /**
     * 获取云原生API网关实例列表
     */
    async DescribeCloudNativeAPIGateways(req, cb) {
        return this.request("DescribeCloudNativeAPIGateways", req, cb);
    }
    /**
     * 创建云原生网关证书
     */
    async CreateCloudNativeAPIGatewayCertificate(req, cb) {
        return this.request("CreateCloudNativeAPIGatewayCertificate", req, cb);
    }
    /**
     * 查询云原生网关服务列表
     */
    async DescribeCloudNativeAPIGatewayServices(req, cb) {
        return this.request("DescribeCloudNativeAPIGatewayServices", req, cb);
    }
    /**
     * 修改云原生网关限流插件(路由)
     */
    async ModifyCloudNativeAPIGatewayRouteRateLimit(req, cb) {
        return this.request("ModifyCloudNativeAPIGatewayRouteRateLimit", req, cb);
    }
    /**
     * 删除治理中心服务别名
     */
    async DeleteGovernanceAliases(req, cb) {
        return this.request("DeleteGovernanceAliases", req, cb);
    }
    /**
     * 查询Zookeeper类型注册引擎实例副本信息
     */
    async DescribeZookeeperReplicas(req, cb) {
        return this.request("DescribeZookeeperReplicas", req, cb);
    }
    /**
     * 删除服务实例
     */
    async DeleteGovernanceInstances(req, cb) {
        return this.request("DeleteGovernanceInstances", req, cb);
    }
    /**
     * 创建云原生网关的灰度规则
     */
    async CreateCloudNativeAPIGatewayCanaryRule(req, cb) {
        return this.request("CreateCloudNativeAPIGatewayCanaryRule", req, cb);
    }
    /**
     * 获取 WAF 防护域名
     */
    async DescribeWafDomains(req, cb) {
        return this.request("DescribeWafDomains", req, cb);
    }
    /**
     * 查询云原生网关单个证书详情
     */
    async DescribeCloudNativeAPIGatewayCertificateDetails(req, cb) {
        return this.request("DescribeCloudNativeAPIGatewayCertificateDetails", req, cb);
    }
    /**
     * 查看弹性伸缩策略列表
     */
    async DescribeAutoScalerResourceStrategies(req, cb) {
        return this.request("DescribeAutoScalerResourceStrategies", req, cb);
    }
    /**
     * 修改网关服务来源
     */
    async ModifyNativeGatewayServiceSource(req, cb) {
        return this.request("ModifyNativeGatewayServiceSource", req, cb);
    }
    /**
     * 修改云原生API网关实例网络基本信息，例如带宽以及描述，只支持修改客户端公网/内网的信息。
     */
    async ModifyNetworkBasicInfo(req, cb) {
        return this.request("ModifyNetworkBasicInfo", req, cb);
    }
    /**
     * 删除云原生网关证书
     */
    async DeleteCloudNativeAPIGatewayCertificate(req, cb) {
        return this.request("DeleteCloudNativeAPIGatewayCertificate", req, cb);
    }
    /**
     * 查询服务契约定义列表
     */
    async DescribeGovernanceServiceContracts(req, cb) {
        return this.request("DescribeGovernanceServiceContracts", req, cb);
    }
    /**
     * 修改云原生网关证书信息
     */
    async UpdateCloudNativeAPIGatewayCertificateInfo(req, cb) {
        return this.request("UpdateCloudNativeAPIGatewayCertificateInfo", req, cb);
    }
    /**
     * 获取全量配置文件模板列表
     */
    async DescribeAllConfigFileTemplates(req, cb) {
        return this.request("DescribeAllConfigFileTemplates", req, cb);
    }
    /**
     * 创建云原生网关引擎分组
     */
    async CreateNativeGatewayServerGroup(req, cb) {
        return this.request("CreateNativeGatewayServerGroup", req, cb);
    }
    /**
     * 删除云原生网关的限流插件(服务)
     */
    async DeleteCloudNativeAPIGatewayServiceRateLimit(req, cb) {
        return this.request("DeleteCloudNativeAPIGatewayServiceRateLimit", req, cb);
    }
    /**
     * 查询zookeeper服务接口列表
     */
    async DescribeZookeeperServerInterfaces(req, cb) {
        return this.request("DescribeZookeeperServerInterfaces", req, cb);
    }
    /**
     * 删除配置文件
     */
    async DeleteConfigFiles(req, cb) {
        return this.request("DeleteConfigFiles", req, cb);
    }
    /**
     * 更新弹性伸缩策略
     */
    async ModifyAutoScalerResourceStrategy(req, cb) {
        return this.request("ModifyAutoScalerResourceStrategy", req, cb);
    }
    /**
     * 查看实例的标签信息
     */
    async DescribeInstanceTagInfos(req, cb) {
        return this.request("DescribeInstanceTagInfos", req, cb);
    }
    /**
     * 发布配置文件
     */
    async PublishConfigFiles(req, cb) {
        return this.request("PublishConfigFiles", req, cb);
    }
    /**
     * 删除治理中心服务
     */
    async DeleteGovernanceServices(req, cb) {
        return this.request("DeleteGovernanceServices", req, cb);
    }
    /**
     * 根据命名空间、组、名字查找配置文件
     */
    async DescribeConfigFile(req, cb) {
        return this.request("DescribeConfigFile", req, cb);
    }
    /**
     * 查询配置版本列表
     */
    async DescribeConfigFileReleases(req, cb) {
        return this.request("DescribeConfigFileReleases", req, cb);
    }
    /**
     * 关闭 WAF 防护
     */
    async CloseWafProtection(req, cb) {
        return this.request("CloseWafProtection", req, cb);
    }
    /**
     * 创建云原生API网关实例
     */
    async CreateCloudNativeAPIGateway(req, cb) {
        return this.request("CreateCloudNativeAPIGateway", req, cb);
    }
    /**
     * 查询云原生网关的限流插件(路由)
     */
    async DescribeCloudNativeAPIGatewayRouteRateLimit(req, cb) {
        return this.request("DescribeCloudNativeAPIGatewayRouteRateLimit", req, cb);
    }
    /**
     * 修改云原生网关服务
     */
    async ModifyCloudNativeAPIGatewayService(req, cb) {
        return this.request("ModifyCloudNativeAPIGatewayService", req, cb);
    }
    /**
     * 查看弹性伸缩策略绑定的网关分组
     */
    async DescribeAutoScalerResourceStrategyBindingGroups(req, cb) {
        return this.request("DescribeAutoScalerResourceStrategyBindingGroups", req, cb);
    }
    /**
     * 获取配置文件发布
     */
    async DescribeConfigFileRelease(req, cb) {
        return this.request("DescribeConfigFileRelease", req, cb);
    }
    /**
     * 查询服务治理中心命名空间列表
     */
    async DescribeGovernanceNamespaces(req, cb) {
        return this.request("DescribeGovernanceNamespaces", req, cb);
    }
    /**
     * 删除治理中心服务实例
     */
    async DeleteGovernanceInstancesByHost(req, cb) {
        return this.request("DeleteGovernanceInstancesByHost", req, cb);
    }
    /**
     * 创建云原生网关路由
     */
    async CreateCloudNativeAPIGatewayRoute(req, cb) {
        return this.request("CreateCloudNativeAPIGatewayRoute", req, cb);
    }
    /**
     * 创建服务实例
     */
    async CreateGovernanceInstances(req, cb) {
        return this.request("CreateGovernanceInstances", req, cb);
    }
    /**
     * 删除云原生网关的限流插件(路由)
     */
    async DeleteCloudNativeAPIGatewayRouteRateLimit(req, cb) {
        return this.request("DeleteCloudNativeAPIGatewayRouteRateLimit", req, cb);
    }
    /**
     * 删除配置发布
     */
    async DeleteConfigFileReleases(req, cb) {
        return this.request("DeleteConfigFileReleases", req, cb);
    }
    /**
     * 删除弹性伸缩策略
     */
    async DeleteAutoScalerResourceStrategy(req, cb) {
        return this.request("DeleteAutoScalerResourceStrategy", req, cb);
    }
    /**
     * 修改云原生网关路由
     */
    async ModifyCloudNativeAPIGatewayRoute(req, cb) {
        return this.request("ModifyCloudNativeAPIGatewayRoute", req, cb);
    }
    /**
     * 删除网关实例分组
     */
    async DeleteNativeGatewayServerGroup(req, cb) {
        return this.request("DeleteNativeGatewayServerGroup", req, cb);
    }
    /**
     * 获取云原生API网关实例端口信息
     */
    async DescribeCloudNativeAPIGatewayPorts(req, cb) {
        return this.request("DescribeCloudNativeAPIGatewayPorts", req, cb);
    }
    /**
     * 查询云原生网关灰度规则列表
     */
    async DescribeCloudNativeAPIGatewayCanaryRules(req, cb) {
        return this.request("DescribeCloudNativeAPIGatewayCanaryRules", req, cb);
    }
    /**
     * 查询引擎实例访问地址
     */
    async DescribeSREInstanceAccessAddress(req, cb) {
        return this.request("DescribeSREInstanceAccessAddress", req, cb);
    }
    /**
     * 修改网关实例Konga网络配置
     */
    async ModifyConsoleNetwork(req, cb) {
        return this.request("ModifyConsoleNetwork", req, cb);
    }
    /**
     * 查询Nacos类型引擎实例副本信息
     */
    async DescribeNacosReplicas(req, cb) {
        return this.request("DescribeNacosReplicas", req, cb);
    }
    /**
     * 获取云原生网关服务健康检查配置
     */
    async DescribeUpstreamHealthCheckConfig(req, cb) {
        return this.request("DescribeUpstreamHealthCheckConfig", req, cb);
    }
    /**
     * 查询网关服务来源实例列表
     */
    async DescribeNativeGatewayServiceSources(req, cb) {
        return this.request("DescribeNativeGatewayServiceSources", req, cb);
    }
    /**
     * 根据公网IP查询云原生网关实例信息
     */
    async DescribeCloudNativeAPIGatewayInfoByIp(req, cb) {
        return this.request("DescribeCloudNativeAPIGatewayInfoByIp", req, cb);
    }
    /**
     * 修改云原生API网关实例分组基础信息
     */
    async ModifyNativeGatewayServerGroup(req, cb) {
        return this.request("ModifyNativeGatewayServerGroup", req, cb);
    }
    /**
     * 查询云原生网关证书列表
     */
    async DescribeCloudNativeAPIGatewayCertificates(req, cb) {
        return this.request("DescribeCloudNativeAPIGatewayCertificates", req, cb);
    }
    /**
     * 修改云原生网关限流插件(服务)
     */
    async ModifyCloudNativeAPIGatewayServiceRateLimit(req, cb) {
        return this.request("ModifyCloudNativeAPIGatewayServiceRateLimit", req, cb);
    }
    /**
     * 创建网关服务来源
     */
    async CreateNativeGatewayServiceSource(req, cb) {
        return this.request("CreateNativeGatewayServiceSource", req, cb);
    }
    /**
     * 重启微服务引擎实例
     */
    async RestartSREInstance(req, cb) {
        return this.request("RestartSREInstance", req, cb);
    }
    /**
     * 创建治理中心服务别名
     */
    async CreateGovernanceAlias(req, cb) {
        return this.request("CreateGovernanceAlias", req, cb);
    }
    /**
     * 查询服务实例
     */
    async DescribeGovernanceInstances(req, cb) {
        return this.request("DescribeGovernanceInstances", req, cb);
    }
    /**
     * 查询治理中心服务列表
     */
    async DescribeGovernanceServices(req, cb) {
        return this.request("DescribeGovernanceServices", req, cb);
    }
    /**
     * 删除云原生网关的灰度规则
     */
    async DeleteCloudNativeAPIGatewayCanaryRule(req, cb) {
        return this.request("DeleteCloudNativeAPIGatewayCanaryRule", req, cb);
    }
    /**
     * 获取云原生网关节点列表
     */
    async DescribeCloudNativeAPIGatewayNodes(req, cb) {
        return this.request("DescribeCloudNativeAPIGatewayNodes", req, cb);
    }
    /**
     * 弹性伸缩策略批量解绑网关分组
     */
    async UnbindAutoScalerResourceStrategyFromGroups(req, cb) {
        return this.request("UnbindAutoScalerResourceStrategyFromGroups", req, cb);
    }
    /**
     * 查询某个配置所有版本信息
     */
    async DescribeConfigFileReleaseVersions(req, cb) {
        return this.request("DescribeConfigFileReleaseVersions", req, cb);
    }
    /**
     * 用于查询引擎实例列表
     */
    async DescribeSREInstances(req, cb) {
        return this.request("DescribeSREInstances", req, cb);
    }
    /**
     * 根据group查询配置文件列表
     */
    async DescribeConfigFilesByGroup(req, cb) {
        return this.request("DescribeConfigFilesByGroup", req, cb);
    }
    /**
     * 获取 WAF 防护状态
     */
    async DescribeWafProtection(req, cb) {
        return this.request("DescribeWafProtection", req, cb);
    }
    /**
     * 获取云原生API网关实例网络配置信息
     */
    async DescribeCloudNativeAPIGatewayConfig(req, cb) {
        return this.request("DescribeCloudNativeAPIGatewayConfig", req, cb);
    }
    /**
     * 创建治理中心命名空间
     */
    async CreateGovernanceNamespaces(req, cb) {
        return this.request("CreateGovernanceNamespaces", req, cb);
    }
    /**
     * 查询服务下契约版本列表
     */
    async DescribeGovernanceServiceContractVersions(req, cb) {
        return this.request("DescribeGovernanceServiceContractVersions", req, cb);
    }
    /**
     * 更新网关上游实例列表，仅支持IPList服务类型
     */
    async UpdateUpstreamTargets(req, cb) {
        return this.request("UpdateUpstreamTargets", req, cb);
    }
    /**
     * 开启 WAF 防护
     */
    async OpenWafProtection(req, cb) {
        return this.request("OpenWafProtection", req, cb);
    }
    /**
     * 修改云原生网关的灰度规则
     */
    async ModifyCloudNativeAPIGatewayCanaryRule(req, cb) {
        return this.request("ModifyCloudNativeAPIGatewayCanaryRule", req, cb);
    }
    /**
     * 创建云原生网关服务
     */
    async CreateCloudNativeAPIGatewayService(req, cb) {
        return this.request("CreateCloudNativeAPIGatewayService", req, cb);
    }
    /**
     * 删除云原生API网关实例
     */
    async DeleteCloudNativeAPIGateway(req, cb) {
        return this.request("DeleteCloudNativeAPIGateway", req, cb);
    }
    /**
     * 修改治理中心命名空间
     */
    async ModifyGovernanceNamespaces(req, cb) {
        return this.request("ModifyGovernanceNamespaces", req, cb);
    }
    /**
     * 查询云原生API网关实例公网详情
     */
    async DescribePublicNetwork(req, cb) {
        return this.request("DescribePublicNetwork", req, cb);
    }
    /**
     * 创建弹性伸缩策略
     */
    async CreateAutoScalerResourceStrategy(req, cb) {
        return this.request("CreateAutoScalerResourceStrategy", req, cb);
    }
    /**
     * 创建配置文件
     */
    async CreateConfigFile(req, cb) {
        return this.request("CreateConfigFile", req, cb);
    }
    /**
     * 修改云原生API网关实例Kong访问策略，支持白名单或者黑名单。
     */
    async ModifyNetworkAccessStrategy(req, cb) {
        return this.request("ModifyNetworkAccessStrategy", req, cb);
    }
    /**
     * 获取云原生网关服务详情下的Upstream列表
     */
    async DescribeCloudNativeAPIGatewayUpstream(req, cb) {
        return this.request("DescribeCloudNativeAPIGatewayUpstream", req, cb);
    }
    /**
     * 创建或更新配置文件并发布配置
     */
    async CreateOrUpdateConfigFileAndRelease(req, cb) {
        return this.request("CreateOrUpdateConfigFileAndRelease", req, cb);
    }
    /**
     * 修改治理中心服务别名
     */
    async ModifyGovernanceAlias(req, cb) {
        return this.request("ModifyGovernanceAlias", req, cb);
    }
    /**
     * 新建 WAF 防护域名
     */
    async CreateWafDomains(req, cb) {
        return this.request("CreateWafDomains", req, cb);
    }
    /**
     * 批量修改配置文件组
     */
    async ModifyConfigFileGroup(req, cb) {
        return this.request("ModifyConfigFileGroup", req, cb);
    }
    /**
     * 回滚配置发布
     */
    async RollbackConfigFileReleases(req, cb) {
        return this.request("RollbackConfigFileReleases", req, cb);
    }
    /**
     * 创建引擎实例
     */
    async CreateEngine(req, cb) {
        return this.request("CreateEngine", req, cb);
    }
    /**
     * 修改云原生网关上游实例节点健康状态
     */
    async ModifyUpstreamNodeStatus(req, cb) {
        return this.request("ModifyUpstreamNodeStatus", req, cb);
    }
    /**
     * 弹性伸缩策略批量绑定网关分组
     */
    async BindAutoScalerResourceStrategyToGroups(req, cb) {
        return this.request("BindAutoScalerResourceStrategyToGroups", req, cb);
    }
    /**
     * 创建云原生网关限流插件(路由)
     */
    async CreateCloudNativeAPIGatewayRouteRateLimit(req, cb) {
        return this.request("CreateCloudNativeAPIGatewayRouteRateLimit", req, cb);
    }
    /**
     * 删除 WAF 防护域名
     */
    async DeleteWafDomains(req, cb) {
        return this.request("DeleteWafDomains", req, cb);
    }
    /**
     * 查询公网地址信息
     */
    async DescribePublicAddressConfig(req, cb) {
        return this.request("DescribePublicAddressConfig", req, cb);
    }
    /**
     * 删除云原生网关服务
     */
    async DeleteCloudNativeAPIGatewayService(req, cb) {
        return this.request("DeleteCloudNativeAPIGatewayService", req, cb);
    }
    /**
     * 查询云原生网关路由列表
     */
    async DescribeCloudNativeAPIGatewayRoutes(req, cb) {
        return this.request("DescribeCloudNativeAPIGatewayRoutes", req, cb);
    }
    /**
     * 根据条件分页查询配置文件组
     */
    async DescribeConfigFileGroups(req, cb) {
        return this.request("DescribeConfigFileGroups", req, cb);
    }
    /**
     * 获取云原生API网关实例信息
     */
    async DescribeCloudNativeAPIGateway(req, cb) {
        return this.request("DescribeCloudNativeAPIGateway", req, cb);
    }
    /**
     * 删除云原生网关路由
     */
    async DeleteCloudNativeAPIGatewayRoute(req, cb) {
        return this.request("DeleteCloudNativeAPIGatewayRoute", req, cb);
    }
    /**
     * 创建公网网络配置
     */
    async CreateCloudNativeAPIGatewayPublicNetwork(req, cb) {
        return this.request("CreateCloudNativeAPIGatewayPublicNetwork", req, cb);
    }
    /**
     * 查询nacos服务接口列表
     */
    async DescribeNacosServerInterfaces(req, cb) {
        return this.request("DescribeNacosServerInterfaces", req, cb);
    }
    /**
     * 修改配置文件
     */
    async ModifyConfigFiles(req, cb) {
        return this.request("ModifyConfigFiles", req, cb);
    }
    /**
     * 修改云原生API网关实例的节点规格信息，例如节点扩缩容或者升降配
     */
    async UpdateCloudNativeAPIGatewaySpec(req, cb) {
        return this.request("UpdateCloudNativeAPIGatewaySpec", req, cb);
    }
    /**
     * 创建治理中心服务
     */
    async CreateGovernanceServices(req, cb) {
        return this.request("CreateGovernanceServices", req, cb);
    }
    /**
     * 删除治理中心命名空间
     */
    async DeleteGovernanceNamespaces(req, cb) {
        return this.request("DeleteGovernanceNamespaces", req, cb);
    }
    /**
     * 修改治理中心服务实例
     */
    async ModifyGovernanceInstances(req, cb) {
        return this.request("ModifyGovernanceInstances", req, cb);
    }
    /**
     * 根据命名空间、组名、名称、标签查询配置文件列表
     */
    async DescribeConfigFiles(req, cb) {
        return this.request("DescribeConfigFiles", req, cb);
    }
    /**
     * 修改云原生API网关实例基础信息
     */
    async ModifyCloudNativeAPIGateway(req, cb) {
        return this.request("ModifyCloudNativeAPIGateway", req, cb);
    }
    /**
     * 创建云原生网关限流插件(服务)
     */
    async CreateCloudNativeAPIGatewayServiceRateLimit(req, cb) {
        return this.request("CreateCloudNativeAPIGatewayServiceRateLimit", req, cb);
    }
    /**
     * 删除网关服务来源实例
     */
    async DeleteNativeGatewayServiceSource(req, cb) {
        return this.request("DeleteNativeGatewayServiceSource", req, cb);
    }
    /**
     * 获取配置文件发布历史列表
     */
    async DescribeConfigFileReleaseHistories(req, cb) {
        return this.request("DescribeConfigFileReleaseHistories", req, cb);
    }
    /**
     * 查询云原生网关分组信息
     */
    async DescribeNativeGatewayServerGroups(req, cb) {
        return this.request("DescribeNativeGatewayServerGroups", req, cb);
    }
    /**
     * 更新云原生网关健康检查配置
     */
    async UpdateUpstreamHealthCheckConfig(req, cb) {
        return this.request("UpdateUpstreamHealthCheckConfig", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249601, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tsf = void 0;
const v20180326_1 = require("./v20180326");
exports.tsf = {
    v20180326: v20180326_1.v20180326,
};

}, function(modId) { var map = {"./v20180326":1738984249602}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249602, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180326 = void 0;
const Models = require("./tsf_models");
const tsf_client_1 = require("./tsf_client");
exports.v20180326 = {
    Client: tsf_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tsf_models":1738984249603,"./tsf_client":1738984249604}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249603, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249604, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tsf client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tsf.tencentcloudapi.com", "2018-03-26", clientConfig);
    }
    /**
     * 创建任务
     */
    async CreateTask(req, cb) {
        return this.request("CreateTask", req, cb);
    }
    /**
     * 删除公共配置项
     */
    async DeletePublicConfig(req, cb) {
        return this.request("DeletePublicConfig", req, cb);
    }
    /**
     * 查询配置
     */
    async DescribeConfig(req, cb) {
        return this.request("DescribeConfig", req, cb);
    }
    /**
     * 获取微服务列表
     */
    async DescribeMicroservices(req, cb) {
        return this.request("DescribeMicroservices", req, cb);
    }
    /**
     * 修改容器部署组实例数
     */
    async ModifyContainerReplicas(req, cb) {
        return this.request("ModifyContainerReplicas", req, cb);
    }
    /**
     * 虚拟机部署组下线实例
     */
    async ShrinkInstances(req, cb) {
        return this.request("ShrinkInstances", req, cb);
    }
    /**
     * 禁用单元化规则
     */
    async DisableUnitRule(req, cb) {
        return this.request("DisableUnitRule", req, cb);
    }
    /**
     * 获取部署组实例列表
     */
    async DescribePodInstances(req, cb) {
        return this.request("DescribePodInstances", req, cb);
    }
    /**
     * 创建配置项，返回详细信息
     */
    async CreateConfigWithDetailResp(req, cb) {
        return this.request("CreateConfigWithDetailResp", req, cb);
    }
    /**
     * 创建命名空间
     */
    async CreateNamespace(req, cb) {
        return this.request("CreateNamespace", req, cb);
    }
    /**
     * 添加云主机节点至TSF集群
     */
    async AddClusterInstances(req, cb) {
        return this.request("AddClusterInstances", req, cb);
    }
    /**
     * 删除泳道规则
     */
    async DeleteLaneRule(req, cb) {
        return this.request("DeleteLaneRule", req, cb);
    }
    /**
     * 删除集群
     */
    async DeleteCluster(req, cb) {
        return this.request("DeleteCluster", req, cb);
    }
    /**
     * 重新执行工作流批次
     */
    async RedoTaskFlowBatch(req, cb) {
        return this.request("RedoTaskFlowBatch", req, cb);
    }
    /**
     * 查询公共配置汇总列表
     */
    async DescribePublicConfigSummary(req, cb) {
        return this.request("DescribePublicConfigSummary", req, cb);
    }
    /**
     * 容器部署组列表
     */
    async DescribeContainerGroups(req, cb) {
        return this.request("DescribeContainerGroups", req, cb);
    }
    /**
     * 获取部署组其他属性
     */
    async DescribeGroupAttribute(req, cb) {
        return this.request("DescribeGroupAttribute", req, cb);
    }
    /**
     * 创建文件配置项，返回详细信息
     */
    async CreateFileConfigWithDetailResp(req, cb) {
        return this.request("CreateFileConfigWithDetailResp", req, cb);
    }
    /**
     * 创建参数模板
     */
    async CreateConfigTemplate(req, cb) {
        return this.request("CreateConfigTemplate", req, cb);
    }
    /**
     * 查询服务API列表
     */
    async DescribeMsApiList(req, cb) {
        return this.request("DescribeMsApiList", req, cb);
    }
    /**
     * 撤回已发布的公共配置
     */
    async RevocationPublicConfig(req, cb) {
        return this.request("RevocationPublicConfig", req, cb);
    }
    /**
     * 创建集群
     */
    async CreateCluster(req, cb) {
        return this.request("CreateCluster", req, cb);
    }
    /**
     * 服务调用监控统计概览
     */
    async DescribeOverviewInvocation(req, cb) {
        return this.request("DescribeOverviewInvocation", req, cb);
    }
    /**
     * 停止正在某个节点上执行的任务
     */
    async StopTaskExecute(req, cb) {
        return this.request("StopTaskExecute", req, cb);
    }
    /**
     * 查询任务详情
     */
    async DescribeTaskDetail(req, cb) {
        return this.request("DescribeTaskDetail", req, cb);
    }
    /**
     * 修改集群信息
     */
    async ModifyCluster(req, cb) {
        return this.request("ModifyCluster", req, cb);
    }
    /**
     * 容器部署组详情（已废弃，请使用  DescribeContainerGroupDeployInfo）
     */
    async DescribeContainerGroupDetail(req, cb) {
        return this.request("DescribeContainerGroupDetail", req, cb);
    }
    /**
     * 启用单元化规则
     */
    async EnableUnitRule(req, cb) {
        return this.request("EnableUnitRule", req, cb);
    }
    /**
     * 回滚配置
     */
    async RollbackConfig(req, cb) {
        return this.request("RollbackConfig", req, cb);
    }
    /**
     * 镜像版本列表
     */
    async DescribeImageTags(req, cb) {
        return this.request("DescribeImageTags", req, cb);
    }
    /**
     * 查询文件配置项列表
     */
    async DescribeFileConfigs(req, cb) {
        return this.request("DescribeFileConfigs", req, cb);
    }
    /**
     * 创建参数模板，并返回模板详细信息
     */
    async CreateConfigTemplateWithDetailResp(req, cb) {
        return this.request("CreateConfigTemplateWithDetailResp", req, cb);
    }
    /**
     * 查询简单集群列表
     */
    async DescribeSimpleClusters(req, cb) {
        return this.request("DescribeSimpleClusters", req, cb);
    }
    /**
     * 查询API详情
     */
    async DescribeApiDetail(req, cb) {
        return this.request("DescribeApiDetail", req, cb);
    }
    /**
     * 撤回已发布的文件配置
     */
    async RevokeFileConfig(req, cb) {
        return this.request("RevokeFileConfig", req, cb);
    }
    /**
     * 获取单个投递项配置信息
     */
    async DescribeDeliveryConfig(req, cb) {
        return this.request("DescribeDeliveryConfig", req, cb);
    }
    /**
     * 查询某个插件下绑定或未绑定的API分组
     */
    async DescribeGroupsWithPlugin(req, cb) {
        return this.request("DescribeGroupsWithPlugin", req, cb);
    }
    /**
     * 启用泳道规则
     */
    async EnableLaneRule(req, cb) {
        return this.request("EnableLaneRule", req, cb);
    }
    /**
     * 禁用单元化路由
     */
    async DisableUnitRoute(req, cb) {
        return this.request("DisableUnitRoute", req, cb);
    }
    /**
     * 取消关联业务日志配置项和应用
     */
    async DisassociateBusinessLogConfig(req, cb) {
        return this.request("DisassociateBusinessLogConfig", req, cb);
    }
    /**
     * 创建配置项
     */
    async CreateConfig(req, cb) {
        return this.request("CreateConfig", req, cb);
    }
    /**
     * 新增微服务
     */
    async CreateMicroservice(req, cb) {
        return this.request("CreateMicroservice", req, cb);
    }
    /**
     * 批量删除镜像版本
     */
    async DeleteImageTags(req, cb) {
        return this.request("DeleteImageTags", req, cb);
    }
    /**
     * TSF上传的程序包存放在腾讯云对象存储（COS）中，通过该API可以获取从COS下载程序包需要的信息，包括包所在的桶、存储路径、鉴权信息等，之后使用COS API（或SDK）进行下载。
COS相关文档请查阅：https://cloud.tencent.com/document/product/436
     */
    async DescribeDownloadInfo(req, cb) {
        return this.request("DescribeDownloadInfo", req, cb);
    }
    /**
     * 获取应用列表
     */
    async DescribeApplications(req, cb) {
        return this.request("DescribeApplications", req, cb);
    }
    /**
     * 创建路径重写，并返回路径重写规则信息
     */
    async CreatePathRewritesWithDetailResp(req, cb) {
        return this.request("CreatePathRewritesWithDetailResp", req, cb);
    }
    /**
     * 获取部署组详情
     */
    async DescribeContainerGroupDeployInfo(req, cb) {
        return this.request("DescribeContainerGroupDeployInfo", req, cb);
    }
    /**
     * 查询网关API监控明细数据（仅单元化网关），非单元化网关使用DescribeApiUseDetail
     */
    async DescribeUnitApiUseDetail(req, cb) {
        return this.request("DescribeUnitApiUseDetail", req, cb);
    }
    /**
     * 插件与网关分组/API批量绑定
     */
    async BindPlugin(req, cb) {
        return this.request("BindPlugin", req, cb);
    }
    /**
     * 查询某个API分组已绑定的网关部署组信息列表
     */
    async DescribeGroupBindedGateways(req, cb) {
        return this.request("DescribeGroupBindedGateways", req, cb);
    }
    /**
     * 删除单元化规则
     */
    async DeleteUnitRule(req, cb) {
        return this.request("DeleteUnitRule", req, cb);
    }
    /**
     * 获取应用详情
     */
    async DescribeApplication(req, cb) {
        return this.request("DescribeApplication", req, cb);
    }
    /**
     * 更新单元化规则
     */
    async UpdateUnitRule(req, cb) {
        return this.request("UpdateUnitRule", req, cb);
    }
    /**
     * 创建单元化规则
     */
    async CreateUnitRule(req, cb) {
        return this.request("CreateUnitRule", req, cb);
    }
    /**
     * 更新仓库信息
     */
    async UpdateRepository(req, cb) {
        return this.request("UpdateRepository", req, cb);
    }
    /**
     * 查询可用于被导入的命名空间列表
     */
    async DescribeUsableUnitNamespaces(req, cb) {
        return this.request("DescribeUsableUnitNamespaces", req, cb);
    }
    /**
     * 查询网关分组监控明细数据
     */
    async DescribeGroupUseDetail(req, cb) {
        return this.request("DescribeGroupUseDetail", req, cb);
    }
    /**
     * 查询镜像仓库列表
     */
    async DescribeImageRepository(req, cb) {
        return this.request("DescribeImageRepository", req, cb);
    }
    /**
     * 后端服务已经删除这个接口,  API 接口下线处理

重关联业务日志配置
     */
    async ReassociateBusinessLogConfig(req, cb) {
        return this.request("ReassociateBusinessLogConfig", req, cb);
    }
    /**
     * 批量更新API超时
     */
    async UpdateApiTimeouts(req, cb) {
        return this.request("UpdateApiTimeouts", req, cb);
    }
    /**
     * 批量创建单元化命名空间
     */
    async CreateUnitNamespaces(req, cb) {
        return this.request("CreateUnitNamespaces", req, cb);
    }
    /**
     * 更新健康检查配置
     */
    async UpdateHealthCheckSettings(req, cb) {
        return this.request("UpdateHealthCheckSettings", req, cb);
    }
    /**
     * 翻页查询任务列表
     */
    async DescribeTaskRecords(req, cb) {
        return this.request("DescribeTaskRecords", req, cb);
    }
    /**
     * 手动执行一次任务
     */
    async ExecuteTask(req, cb) {
        return this.request("ExecuteTask", req, cb);
    }
    /**
     * 批量导入API至api分组(也支持新建API到分组)
     */
    async CreateGatewayApi(req, cb) {
        return this.request("CreateGatewayApi", req, cb);
    }
    /**
     * 查询简单命名空间列表
     */
    async DescribeSimpleNamespaces(req, cb) {
        return this.request("DescribeSimpleNamespaces", req, cb);
    }
    /**
     * 创建API限流规则
     */
    async CreateApiRateLimitRule(req, cb) {
        return this.request("CreateApiRateLimitRule", req, cb);
    }
    /**
     * 删除微服务
     */
    async DeleteMicroservice(req, cb) {
        return this.request("DeleteMicroservice", req, cb);
    }
    /**
     * 删除文件配置项
     */
    async DeleteFileConfig(req, cb) {
        return this.request("DeleteFileConfig", req, cb);
    }
    /**
     * 停止容器部署组
     */
    async StopContainerGroup(req, cb) {
        return this.request("StopContainerGroup", req, cb);
    }
    /**
     * 查询分组管理日志配置列表
     */
    async DescribeGroupBusinessLogConfigs(req, cb) {
        return this.request("DescribeGroupBusinessLogConfigs", req, cb);
    }
    /**
     * 查询部署组相关的发布信息
     */
    async DescribeGroupRelease(req, cb) {
        return this.request("DescribeGroupRelease", req, cb);
    }
    /**
     * 查询一键导入API分组任务的状态
     */
    async DescribeCreateGatewayApiStatus(req, cb) {
        return this.request("DescribeCreateGatewayApiStatus", req, cb);
    }
    /**
     * 查询单值指标维度
     */
    async DescribeInvocationMetricDataPoint(req, cb) {
        return this.request("DescribeInvocationMetricDataPoint", req, cb);
    }
    /**
     * 修改任务
     */
    async ModifyTask(req, cb) {
        return this.request("ModifyTask", req, cb);
    }
    /**
     * 更新API限流规则
     */
    async UpdateApiRateLimitRule(req, cb) {
        return this.request("UpdateApiRateLimitRule", req, cb);
    }
    /**
     * 分页查询网关分组/API绑定（或未绑定）的插件列表
     */
    async DescribePluginInstances(req, cb) {
        return this.request("DescribePluginInstances", req, cb);
    }
    /**
     * API分组批量与网关解绑
     */
    async UnbindApiGroup(req, cb) {
        return this.request("UnbindApiGroup", req, cb);
    }
    /**
     * 查询虚拟机部署组云主机列表
     */
    async DescribeGroupInstances(req, cb) {
        return this.request("DescribeGroupInstances", req, cb);
    }
    /**
     * 创建泳道规则
     */
    async CreateLaneRule(req, cb) {
        return this.request("CreateLaneRule", req, cb);
    }
    /**
     * 删除容器部署组
     */
    async DeleteContainerGroup(req, cb) {
        return this.request("DeleteContainerGroup", req, cb);
    }
    /**
     * 查询API 分组信息列表
     */
    async DescribeApiGroups(req, cb) {
        return this.request("DescribeApiGroups", req, cb);
    }
    /**
     * 获取集群列表
     */
    async DescribeClusters(req, cb) {
        return this.request("DescribeClusters", req, cb);
    }
    /**
     * 查询日志配置项列表
     */
    async DescribeBusinessLogConfigs(req, cb) {
        return this.request("DescribeBusinessLogConfigs", req, cb);
    }
    /**
     * 查询单元化规则列表V2
     */
    async DescribeUnitRulesV2(req, cb) {
        return this.request("DescribeUnitRulesV2", req, cb);
    }
    /**
     * 创建公共配置项，并返回配置项详细信息
     */
    async CreatePublicConfigWithDetailResp(req, cb) {
        return this.request("CreatePublicConfigWithDetailResp", req, cb);
    }
    /**
     * 创建单元化规则, 并返回详细信息
     */
    async CreateUnitRuleWithDetailResp(req, cb) {
        return this.request("CreateUnitRuleWithDetailResp", req, cb);
    }
    /**
     * 发布配置
     */
    async ReleaseConfig(req, cb) {
        return this.request("ReleaseConfig", req, cb);
    }
    /**
     * 停止一个工作流批次
     */
    async TerminateTaskFlowBatch(req, cb) {
        return this.request("TerminateTaskFlowBatch", req, cb);
    }
    /**
     * 批量更新API限流规则
     */
    async UpdateApiRateLimitRules(req, cb) {
        return this.request("UpdateApiRateLimitRules", req, cb);
    }
    /**
     * 获取虚拟机部署组列表
     */
    async DescribeGroups(req, cb) {
        return this.request("DescribeGroups", req, cb);
    }
    /**
     * 查询文件配置项发布信息
     */
    async DescribeFileConfigReleases(req, cb) {
        return this.request("DescribeFileConfigReleases", req, cb);
    }
    /**
     * 查询仓库列表
     */
    async DescribeRepositories(req, cb) {
        return this.request("DescribeRepositories", req, cb);
    }
    /**
     * 停用工作流
     */
    async DisableTaskFlow(req, cb) {
        return this.request("DisableTaskFlow", req, cb);
    }
    /**
     * 一键导入API分组
     */
    async CreateAllGatewayApiAsync(req, cb) {
        return this.request("CreateAllGatewayApiAsync", req, cb);
    }
    /**
     * 创建仓库
     */
    async CreateRepository(req, cb) {
        return this.request("CreateRepository", req, cb);
    }
    /**
     * 查询集群实例
     */
    async DescribeClusterInstances(req, cb) {
        return this.request("DescribeClusterInstances", req, cb);
    }
    /**
     * 创建公共配置项
     */
    async CreatePublicConfig(req, cb) {
        return this.request("CreatePublicConfig", req, cb);
    }
    /**
     * 网关与API分组批量绑定
     */
    async BindApiGroup(req, cb) {
        return this.request("BindApiGroup", req, cb);
    }
    /**
     * 废弃
     */
    async DescribeInovcationIndicators(req, cb) {
        return this.request("DescribeInovcationIndicators", req, cb);
    }
    /**
     * 用部署组id获取绑定信息
     */
    async DescribeDeliveryConfigByGroupId(req, cb) {
        return this.request("DescribeDeliveryConfigByGroupId", req, cb);
    }
    /**
     * 查询简单部署组列表
     */
    async DescribeSimpleGroups(req, cb) {
        return this.request("DescribeSimpleGroups", req, cb);
    }
    /**
     * 查询配置项列表
     */
    async DescribeConfigs(req, cb) {
        return this.request("DescribeConfigs", req, cb);
    }
    /**
     * 服务统计页面：接口和服务维度
     */
    async DescribeStatistics(req, cb) {
        return this.request("DescribeStatistics", req, cb);
    }
    /**
     * 删除模板
     */
    async DeleteConfigTemplate(req, cb) {
        return this.request("DeleteConfigTemplate", req, cb);
    }
    /**
     * 发布文件配置
     */
    async ReleaseFileConfig(req, cb) {
        return this.request("ReleaseFileConfig", req, cb);
    }
    /**
     * 删除API限流规则
     */
    async DeleteApiRateLimitRule(req, cb) {
        return this.request("DeleteApiRateLimitRule", req, cb);
    }
    /**
     * 查询某个网关绑定的API 分组信息列表
     */
    async DescribeGroupGateways(req, cb) {
        return this.request("DescribeGroupGateways", req, cb);
    }
    /**
     * 查询单元化命名空间列表
     */
    async DescribeUnitNamespaces(req, cb) {
        return this.request("DescribeUnitNamespaces", req, cb);
    }
    /**
     * 调用该接口和COS的上传接口后，需要调用此接口更新TSF中保存的程序包状态。
调用此接口完成后，才标志上传包流程结束。
     */
    async ModifyUploadInfo(req, cb) {
        return this.request("ModifyUploadInfo", req, cb);
    }
    /**
     * 添加云主机节点至TSF集群
     */
    async AddInstances(req, cb) {
        return this.request("AddInstances", req, cb);
    }
    /**
     * 修改命名空间
     */
    async ModifyNamespace(req, cb) {
        return this.request("ModifyNamespace", req, cb);
    }
    /**
     * 查询配置汇总列表
     */
    async DescribeConfigSummary(req, cb) {
        return this.request("DescribeConfigSummary", req, cb);
    }
    /**
     * 查询调用指标数据散点图
     */
    async DescribeInvocationMetricScatterPlot(req, cb) {
        return this.request("DescribeInvocationMetricScatterPlot", req, cb);
    }
    /**
     * 创建文件配置项
     */
    async CreateFileConfig(req, cb) {
        return this.request("CreateFileConfig", req, cb);
    }
    /**
     * 重新执行任务
     */
    async RedoTask(req, cb) {
        return this.request("RedoTask", req, cb);
    }
    /**
     * 获取部署组其他字段-用于前端并发调用
     */
    async DescribeContainerGroupAttribute(req, cb) {
        return this.request("DescribeContainerGroupAttribute", req, cb);
    }
    /**
     * 无
     */
    async DescribePkgs(req, cb) {
        return this.request("DescribePkgs", req, cb);
    }
    /**
     * 创建API分组
     */
    async CreateApiGroup(req, cb) {
        return this.request("CreateApiGroup", req, cb);
    }
    /**
     * 查询数据集列表
     */
    async DescribePrograms(req, cb) {
        return this.request("DescribePrograms", req, cb);
    }
    /**
     * 查询公共配置（单条）
     */
    async DescribePublicConfig(req, cb) {
        return this.request("DescribePublicConfig", req, cb);
    }
    /**
     * 查询API分组
     */
    async DescribeApiGroup(req, cb) {
        return this.request("DescribeApiGroup", req, cb);
    }
    /**
     * 修改应用
     */
    async ModifyApplication(req, cb) {
        return this.request("ModifyApplication", req, cb);
    }
    /**
     * 删除路径重写
     */
    async DeletePathRewrites(req, cb) {
        return this.request("DeletePathRewrites", req, cb);
    }
    /**
     * 创建虚拟机部署组
     */
    async CreateGroup(req, cb) {
        return this.request("CreateGroup", req, cb);
    }
    /**
     * 查询任务最近一次执行状态
     */
    async DescribeTaskLastStatus(req, cb) {
        return this.request("DescribeTaskLastStatus", req, cb);
    }
    /**
     * 查询业务日志配置项信息
     */
    async DescribeBusinessLogConfig(req, cb) {
        return this.request("DescribeBusinessLogConfig", req, cb);
    }
    /**
     * 查询网关所有分组下Api列表
     */
    async DescribeGatewayAllGroupApis(req, cb) {
        return this.request("DescribeGatewayAllGroupApis", req, cb);
    }
    /**
     * 从软件仓库批量删除程序包。
一次最多支持删除1000个包，数量超过1000，返回UpperDeleteLimit错误。
     */
    async DeletePkgs(req, cb) {
        return this.request("DeletePkgs", req, cb);
    }
    /**
     * 停止执行中的任务批次， 非运行中的任务不可调用。
     */
    async StopTaskBatch(req, cb) {
        return this.request("StopTaskBatch", req, cb);
    }
    /**
     * 查询公共配置项列表
     */
    async DescribePublicConfigs(req, cb) {
        return this.request("DescribePublicConfigs", req, cb);
    }
    /**
     * 导入配置
     */
    async DescribeConfigTemplate(req, cb) {
        return this.request("DescribeConfigTemplate", req, cb);
    }
    /**
     * 取消关联投递信息和部署组
     */
    async DisassociateKafkaConfig(req, cb) {
        return this.request("DisassociateKafkaConfig", req, cb);
    }
    /**
     * 查询调用指标数据变化曲线
     */
    async DescribeInvocationMetricDataCurve(req, cb) {
        return this.request("DescribeInvocationMetricDataCurve", req, cb);
    }
    /**
     * 删除容器部署组
     */
    async DeleteGroup(req, cb) {
        return this.request("DeleteGroup", req, cb);
    }
    /**
     * 从 TSF 集群中批量移除云主机节点
     */
    async RemoveInstances(req, cb) {
        return this.request("RemoveInstances", req, cb);
    }
    /**
     * 绑定解绑tcr仓库
     */
    async OperateApplicationTcrBinding(req, cb) {
        return this.request("OperateApplicationTcrBinding", req, cb);
    }
    /**
     * 虚拟机部署组添加实例
     */
    async ExpandGroup(req, cb) {
        return this.request("ExpandGroup", req, cb);
    }
    /**
     * 删除任务
     */
    async DeleteTask(req, cb) {
        return this.request("DeleteTask", req, cb);
    }
    /**
     * 查询路径重写列表
     */
    async DescribePathRewrites(req, cb) {
        return this.request("DescribePathRewrites", req, cb);
    }
    /**
     * 删除泳道
     */
    async DeleteLane(req, cb) {
        return this.request("DeleteLane", req, cb);
    }
    /**
     * 更新参数模板
     */
    async UpdateConfigTemplate(req, cb) {
        return this.request("UpdateConfigTemplate", req, cb);
    }
    /**
     * 查询配置发布信息
     */
    async DescribeConfigReleases(req, cb) {
        return this.request("DescribeConfigReleases", req, cb);
    }
    /**
     * 创建泳道
     */
    async CreateLane(req, cb) {
        return this.request("CreateLane", req, cb);
    }
    /**
     * 获取容器事件列表
参数限制

- 当类型是 instance 时，GroupId是必填项
     */
    async DescribeContainerEvents(req, cb) {
        return this.request("DescribeContainerEvents", req, cb);
    }
    /**
     * 查询网关监控概览
     */
    async DescribeGatewayMonitorOverview(req, cb) {
        return this.request("DescribeGatewayMonitorOverview", req, cb);
    }
    /**
     * 部署虚拟机部署组应用
     */
    async DeployGroup(req, cb) {
        return this.request("DeployGroup", req, cb);
    }
    /**
     * 获取多个投递项配置
     */
    async DescribeDeliveryConfigs(req, cb) {
        return this.request("DescribeDeliveryConfigs", req, cb);
    }
    /**
     * 更新Api分组
     */
    async UpdateApiGroup(req, cb) {
        return this.request("UpdateApiGroup", req, cb);
    }
    /**
     * 停止虚拟机部署组
     */
    async StopGroup(req, cb) {
        return this.request("StopGroup", req, cb);
    }
    /**
     * 更新泳道信息
     */
    async ModifyLane(req, cb) {
        return this.request("ModifyLane", req, cb);
    }
    /**
     * 启用任务
     */
    async EnableTask(req, cb) {
        return this.request("EnableTask", req, cb);
    }
    /**
     * 新增微服务返回id
     */
    async CreateMicroserviceWithDetailResp(req, cb) {
        return this.request("CreateMicroserviceWithDetailResp", req, cb);
    }
    /**
     * 修改微服务详情
     */
    async ModifyMicroservice(req, cb) {
        return this.request("ModifyMicroservice", req, cb);
    }
    /**
     * 启用工作流
     */
    async EnableTaskFlow(req, cb) {
        return this.request("EnableTaskFlow", req, cb);
    }
    /**
     * 查询单元化规则详情
     */
    async DescribeUnitRule(req, cb) {
        return this.request("DescribeUnitRule", req, cb);
    }
    /**
     * 创建路径重写
     */
    async CreatePathRewrites(req, cb) {
        return this.request("CreatePathRewrites", req, cb);
    }
    /**
     * 删除Api分组
     */
    async DeleteApiGroup(req, cb) {
        return this.request("DeleteApiGroup", req, cb);
    }
    /**
     * 创建应用
     */
    async CreateApplication(req, cb) {
        return this.request("CreateApplication", req, cb);
    }
    /**
     * 修改路径重写
     */
    async ModifyPathRewrite(req, cb) {
        return this.request("ModifyPathRewrite", req, cb);
    }
    /**
     * 重新执行任务批次
     */
    async RedoTaskBatch(req, cb) {
        return this.request("RedoTaskBatch", req, cb);
    }
    /**
     * 发布Api分组
     */
    async ReleaseApiGroup(req, cb) {
        return this.request("ReleaseApiGroup", req, cb);
    }
    /**
     * 关联日志配置项到应用
     */
    async AssociateBusinessLogConfig(req, cb) {
        return this.request("AssociateBusinessLogConfig", req, cb);
    }
    /**
     * 查询公共配置发布历史
     */
    async DescribePublicConfigReleaseLogs(req, cb) {
        return this.request("DescribePublicConfigReleaseLogs", req, cb);
    }
    /**
     * 查询配置发布历史
     */
    async DescribeConfigReleaseLogs(req, cb) {
        return this.request("DescribeConfigReleaseLogs", req, cb);
    }
    /**
     * 查询简单应用列表
     */
    async DescribeSimpleApplications(req, cb) {
        return this.request("DescribeSimpleApplications", req, cb);
    }
    /**
     * 查询路径重写
     */
    async DescribePathRewrite(req, cb) {
        return this.request("DescribePathRewrite", req, cb);
    }
    /**
     * 执行一次工作流
     */
    async ExecuteTaskFlow(req, cb) {
        return this.request("ExecuteTaskFlow", req, cb);
    }
    /**
     * 查询微服务详情
     */
    async DescribeMicroservice(req, cb) {
        return this.request("DescribeMicroservice", req, cb);
    }
    /**
     * serverless 能力已下线。下线对应接口。

删除Serverless部署组
     */
    async DeleteServerlessGroup(req, cb) {
        return this.request("DeleteServerlessGroup", req, cb);
    }
    /**
     * 重新执行在某个节点上执行任务。
     */
    async RedoTaskExecute(req, cb) {
        return this.request("RedoTaskExecute", req, cb);
    }
    /**
     * 查询java实例jvm监控数据,返回数据可选
     */
    async DescribeJvmMonitor(req, cb) {
        return this.request("DescribeJvmMonitor", req, cb);
    }
    /**
     * 查询工作流最新一个批次的状态信息
     */
    async DescribeFlowLastBatchState(req, cb) {
        return this.request("DescribeFlowLastBatchState", req, cb);
    }
    /**
     * 发布配置,并且返回配置 ID
     */
    async ReleaseConfigWithDetailResp(req, cb) {
        return this.request("ReleaseConfigWithDetailResp", req, cb);
    }
    /**
     * 删除仓库
     */
    async DeleteRepository(req, cb) {
        return this.request("DeleteRepository", req, cb);
    }
    /**
     * 停用任务
     */
    async DisableTask(req, cb) {
        return this.request("DisableTask", req, cb);
    }
    /**
     * 启动容器部署组
     */
    async StartContainerGroup(req, cb) {
        return this.request("StartContainerGroup", req, cb);
    }
    /**
     * 业务日志搜索
     */
    async SearchBusinessLog(req, cb) {
        return this.request("SearchBusinessLog", req, cb);
    }
    /**
     * 部署容器应用-更新
     */
    async DeployContainerGroup(req, cb) {
        return this.request("DeployContainerGroup", req, cb);
    }
    /**
     * 更新数据集
     */
    async ModifyProgram(req, cb) {
        return this.request("ModifyProgram", req, cb);
    }
    /**
     * 标准输出日志搜索
     */
    async SearchStdoutLog(req, cb) {
        return this.request("SearchStdoutLog", req, cb);
    }
    /**
     * 批量删除API
     */
    async DeleteGatewayApi(req, cb) {
        return this.request("DeleteGatewayApi", req, cb);
    }
    /**
     * 创建工作流
     */
    async CreateTaskFlow(req, cb) {
        return this.request("CreateTaskFlow", req, cb);
    }
    /**
     * 查询虚拟机部署组详情
     */
    async DescribeGroup(req, cb) {
        return this.request("DescribeGroup", req, cb);
    }
    /**
     * 删除应用
     */
    async DeleteApplication(req, cb) {
        return this.request("DeleteApplication", req, cb);
    }
    /**
     * 查询API限流规则
     */
    async DescribeApiRateLimitRules(req, cb) {
        return this.request("DescribeApiRateLimitRules", req, cb);
    }
    /**
     * 删除命名空间
     */
    async DeleteNamespace(req, cb) {
        return this.request("DeleteNamespace", req, cb);
    }
    /**
     * TSF基本资源信息概览接口
     */
    async DescribeBasicResourceUsage(req, cb) {
        return this.request("DescribeBasicResourceUsage", req, cb);
    }
    /**
     * 删除配置项
     */
    async DeleteConfig(req, cb) {
        return this.request("DeleteConfig", req, cb);
    }
    /**
     * 发布公共配置
     */
    async ReleasePublicConfig(req, cb) {
        return this.request("ReleasePublicConfig", req, cb);
    }
    /**
     * 删除单元化命名空间
     */
    async DeleteUnitNamespaces(req, cb) {
        return this.request("DeleteUnitNamespaces", req, cb);
    }
    /**
     * 无
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 下线Api分组
     */
    async DraftApiGroup(req, cb) {
        return this.request("DraftApiGroup", req, cb);
    }
    /**
     * 禁用泳道规则
     */
    async DisableLaneRule(req, cb) {
        return this.request("DisableLaneRule", req, cb);
    }
    /**
     * 查询API分组下的Api列表信息
     */
    async DescribeGatewayApis(req, cb) {
        return this.request("DescribeGatewayApis", req, cb);
    }
    /**
     * 对执行失败的任务批次执行续跑
     */
    async ContinueRunFailedTaskBatch(req, cb) {
        return this.request("ContinueRunFailedTaskBatch", req, cb);
    }
    /**
     * 查询API 版本
     */
    async DescribeApiVersions(req, cb) {
        return this.request("DescribeApiVersions", req, cb);
    }
    /**
     * 启用或禁用API
     */
    async ChangeApiUsableStatus(req, cb) {
        return this.request("ChangeApiUsableStatus", req, cb);
    }
    /**
     * 更新部署组信息
     */
    async ModifyGroup(req, cb) {
        return this.request("ModifyGroup", req, cb);
    }
    /**
     * （已废弃，请使用 CreateGroup 和 DeployContainerGroup 创建和部署容器部署组）创建容器部署组
     */
    async CreateContainGroup(req, cb) {
        return this.request("CreateContainGroup", req, cb);
    }
    /**
     * 查询生效的单元化规则
     */
    async DescribeEnabledUnitRule(req, cb) {
        return this.request("DescribeEnabledUnitRule", req, cb);
    }
    /**
     * 创建数据集
     */
    async CreateProgram(req, cb) {
        return this.request("CreateProgram", req, cb);
    }
    /**
     * 查询仓库信息
     */
    async DescribeRepository(req, cb) {
        return this.request("DescribeRepository", req, cb);
    }
    /**
     * 查询维度
     */
    async DescribeInvocationMetricDataDimension(req, cb) {
        return this.request("DescribeInvocationMetricDataDimension", req, cb);
    }
    /**
     * 获取应用列表其它字段，如实例数量信息等
     */
    async DescribeApplicationAttribute(req, cb) {
        return this.request("DescribeApplicationAttribute", req, cb);
    }
    /**
     * 撤回已发布的配置
     */
    async RevocationConfig(req, cb) {
        return this.request("RevocationConfig", req, cb);
    }
    /**
     * 查询泳道规则列表
     */
    async DescribeLaneRules(req, cb) {
        return this.request("DescribeLaneRules", req, cb);
    }
    /**
     * 更新泳道规则
     */
    async ModifyLaneRule(req, cb) {
        return this.request("ModifyLaneRule", req, cb);
    }
    /**
     * 查询group发布的配置
     */
    async DescribeReleasedConfig(req, cb) {
        return this.request("DescribeReleasedConfig", req, cb);
    }
    /**
     * 查询公共配置发布信息
     */
    async DescribePublicConfigReleases(req, cb) {
        return this.request("DescribePublicConfigReleases", req, cb);
    }
    /**
     * 关联投递配置到部署组
     */
    async AssociateConfigWithGroup(req, cb) {
        return this.request("AssociateConfigWithGroup", req, cb);
    }
    /**
     * 查询泳道列表
     */
    async DescribeLanes(req, cb) {
        return this.request("DescribeLanes", req, cb);
    }
    /**
     * 查询网关API监控明细数据
     */
    async DescribeApiUseDetail(req, cb) {
        return this.request("DescribeApiUseDetail", req, cb);
    }
    /**
     * TSF会将软件包上传到腾讯云对象存储（COS）。调用此接口获取上传信息，如目标地域，桶，包Id，存储路径，鉴权信息等，之后请使用COS API（或SDK）进行上传。
COS相关文档请查阅：https://cloud.tencent.com/document/product/436
     */
    async DescribeUploadInfo(req, cb) {
        return this.request("DescribeUploadInfo", req, cb);
    }
    /**
     * 启用单元化路由
     */
    async EnableUnitRoute(req, cb) {
        return this.request("EnableUnitRoute", req, cb);
    }
    /**
     * 更新API
     */
    async UpdateGatewayApi(req, cb) {
        return this.request("UpdateGatewayApi", req, cb);
    }
    /**
     * 创建API限流规则,并返回规则信息
     */
    async CreateApiRateLimitRuleWithDetailResp(req, cb) {
        return this.request("CreateApiRateLimitRuleWithDetailResp", req, cb);
    }
    /**
     * 下线部署组所有机器实例
     */
    async ShrinkGroup(req, cb) {
        return this.request("ShrinkGroup", req, cb);
    }
    /**
     * 资源任务的执行状态描述接口
     */
    async DescribeResourceTaskStatus(req, cb) {
        return this.request("DescribeResourceTaskStatus", req, cb);
    }
    /**
     * 启动分组
     */
    async StartGroup(req, cb) {
        return this.request("StartGroup", req, cb);
    }
    /**
     * 修改容器部署组
     */
    async ModifyContainerGroup(req, cb) {
        return this.request("ModifyContainerGroup", req, cb);
    }
    /**
     * 查询单元化规则列表
     */
    async DescribeUnitRules(req, cb) {
        return this.request("DescribeUnitRules", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249605, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tsi = void 0;
const v20210325_1 = require("./v20210325");
exports.tsi = {
    v20210325: v20210325_1.v20210325,
};

}, function(modId) { var map = {"./v20210325":1738984249606}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249606, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210325 = void 0;
const Models = require("./tsi_models");
const tsi_client_1 = require("./tsi_client");
exports.v20210325 = {
    Client: tsi_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tsi_models":1738984249607,"./tsi_client":1738984249608}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249607, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249608, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tsi client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tsi.tencentcloudapi.com", "2021-03-25", clientConfig);
    }
    /**
     * 本接口提供上传音频，将音频进行语音识别并翻译成文本的服务。
该接口需要配合[同传查询结果](https://cloud.tencent.com/document/product/1399/107636)接口使用，建议一个线程进行音频数据上传同时另外一个线程拉取同传结果。
如果需要同步接口，既上传音频的同时拉取同传结果，可以使用[同传上传音频并查询结果](https://cloud.tencent.com/document/product/1399/107634)接口。

-----------
### 接口要求
集成该API时，需按照以下要求：

| 内容| 格式 |
| -------- | ------- |
| 音频格式  | pcm    |
| 音频属性 | <ul><li>采样率：16000Hz</li><li>采样精度：16bits</li><li>声道：单声道（mono）</li></ul> |
| 响应格式    | 统一采用 JSON 格式   |
| 数据发送    | 建议每200ms 发送200ms 时长的数据包，即1:1实时率，对应大小为6400字节。<br/><ol><li>音频发送速率过快超过1:1实时率或者音频数据包之间发送间隔超过6秒，可能导致引擎出错，后台将返回错误；</li><li>每次发送数据的大小不得小于 200ms时长 的数据包，且不得大于 500ms时长 的数据包；小于 200ms时长 的数据包会被丢弃，大于 500ms时长 的数据包会影响引擎的数据处理；</li><li>若最后一个音频数据包不足 200ms，需要使用空数据进行补齐；</li></ol> |
     */
    async TongChuanRecognize(req, cb) {
        return this.request("TongChuanRecognize", req, cb);
    }
    /**
     * 获取同传结果。
     */
    async TongChuanDisplay(req, cb) {
        return this.request("TongChuanDisplay", req, cb);
    }
    /**
     * 本接口提供上传音频，将音频进行语音识别并翻译成文本的服务。

-----------
### 接口要求
集成该API时，需按照以下要求：

| 内容| 格式 |
| -------- | ------- |
| 音频格式  | pcm    |
| 音频属性 | <ul><li>采样率：16000Hz</li><li>采样精度：16bits</li><li>声道：单声道（mono）</li></ul> |
| 响应格式    | 统一采用 JSON 格式   |
| 数据发送    | 建议每200ms 发送200ms 时长的数据包，即1:1实时率，对应大小为6400字节。<br/><ol><li>音频发送速率过快超过1:1实时率或者音频数据包之间发送间隔超过6秒，可能导致引擎出错，后台将返回错误；</li><li>每次发送数据的大小不得小于 200ms时长 的数据包，且不得大于 500ms时长 的数据包；小于 200ms时长 的数据包会被丢弃，大于 500ms时长 的数据包会影响引擎的数据处理；</li><li>若最后一个音频数据包不足 200ms，需要使用空数据进行补齐；</li></ol> |
     */
    async TongChuanSync(req, cb) {
        return this.request("TongChuanSync", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249609, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tsw = void 0;
const v20200924_1 = require("./v20200924");
const v20210412_1 = require("./v20210412");
exports.tsw = {
    v20200924: v20200924_1.v20200924,
    v20210412: v20210412_1.v20210412,
};

}, function(modId) { var map = {"./v20200924":1738984249610,"./v20210412":1738984249613}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249610, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200924 = void 0;
const Models = require("./tsw_models");
const tsw_client_1 = require("./tsw_client");
exports.v20200924 = {
    Client: tsw_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tsw_models":1738984249611,"./tsw_client":1738984249612}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249611, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249612, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tsw client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tsw.tencentcloudapi.com", "2020-09-24", clientConfig);
    }
    /**
     * 获取服务接入信息
     */
    async DescribeAgentShell(req, cb) {
        return this.request("DescribeAgentShell", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249613, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210412 = void 0;
const Models = require("./tsw_models");
const tsw_client_1 = require("./tsw_client");
exports.v20210412 = {
    Client: tsw_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tsw_models":1738984249614,"./tsw_client":1738984249615}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249614, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249615, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tsw client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tsw.tencentcloudapi.com", "2021-04-12", clientConfig);
    }
    /**
     * 查询token
     */
    async DescribeToken(req, cb) {
        return this.request("DescribeToken", req, cb);
    }
    /**
     * 获取告警对象-服务告警表
     */
    async DescribeServiceAlertObject(req, cb) {
        return this.request("DescribeServiceAlertObject", req, cb);
    }
    /**
     * 获取告警对象-组件告警
     */
    async DescribeComponentAlertObject(req, cb) {
        return this.request("DescribeComponentAlertObject", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249616, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.tts = void 0;
const v20190823_1 = require("./v20190823");
exports.tts = {
    v20190823: v20190823_1.v20190823,
};

}, function(modId) { var map = {"./v20190823":1738984249617}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249617, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20190823 = void 0;
const Models = require("./tts_models");
const tts_client_1 = require("./tts_client");
exports.v20190823 = {
    Client: tts_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./tts_models":1738984249618,"./tts_client":1738984249619}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249618, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249619, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * tts client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("tts.tencentcloudapi.com", "2019-08-23", clientConfig);
    }
    /**
     * 本接口服务对10万字符以内的文本进行语音合成，异步返回音频结果。满足一次性合成较长文本的客户需求，如阅读播报、新闻媒体等场景。

<li>支持音频格式：mp3,wav,pcm</li>
<li>支持音频采样率：16000 Hz, 8000 Hz</li>
<li>支持中文普通话、英文、中英文混读、粤语合成</li>
<li>支持语速、音量设置</li>
<li>支持回调或轮询的方式获取结果，结果获取请参考 长文本语音合成结果查询。</li>
<li>提交长文本语音合成请求后，合成结果在3小时内完成，音频文件在服务端可保存24小时</li>

<p></p>

长文本合成支持 SSML，语法详见 [SSML 标记语言](https://cloud.tencent.com/document/product/1073/49575)，使用时需满足如下使用规范：
<li>使用 SSML 标签，需置于 speak 闭合标签内部；</li>
<li>合成文本可包含多组 speak 闭合标签，且无数量限制；</li>
<li>每个 speak 闭合标签内部，字符数不超过 150 字（标签字符本身不计算在内）；</li>
<li>每个 speak 闭合标签内部，使用 break 标签数目最大为 10 个。如需要使用更多，可拆解到多个 speak 标签中；</li>

<p></p>
     */
    async CreateTtsTask(req, cb) {
        return this.request("CreateTtsTask", req, cb);
    }
    /**
     * 在调用长文本语音合成请求接口后，有回调和轮询两种方式获取识别结果。

<li>当采用回调方式时，合成完毕后会将结果通过 POST 请求的形式通知到用户在请求时填写的回调 URL，具体请参见 长文本语音合成结果查询 。</li>
<li>当采用轮询方式时，需要主动提交任务ID来轮询识别结果，共有任务成功、等待、执行中和失败四种结果，具体信息请参见下文说明。</li>
     */
    async DescribeTtsTaskStatus(req, cb) {
        return this.request("DescribeTtsTaskStatus", req, cb);
    }
    /**
     * 腾讯云语音合成技术（TTS）可以将任意文本转化为语音，实现让机器和应用张口说话。
腾讯TTS技术可以应用到很多场景，比如，移动APP语音播报新闻；智能设备语音提醒；依靠网上现有节目或少量录音，快速合成明星语音，降低邀约成本；支持车载导航语音合成的个性化语音播报。
基础合成支持 SSML，语法详见 [SSML 标记语言](https://cloud.tencent.com/document/product/1073/49575)。
默认接口请求频率限制：
精品音色和标准音色：20次/秒
大模型音色：10次/秒
一句话复刻音色：暂不支持
     */
    async TextToVoice(req, cb) {
        return this.request("TextToVoice", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249620, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.ump = void 0;
const v20200918_1 = require("./v20200918");
exports.ump = {
    v20200918: v20200918_1.v20200918,
};

}, function(modId) { var map = {"./v20200918":1738984249621}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249621, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200918 = void 0;
const Models = require("./ump_models");
const ump_client_1 = require("./ump_client");
exports.v20200918 = {
    Client: ump_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./ump_models":1738984249622,"./ump_client":1738984249623}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249622, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249623, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * ump client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("ump.tencentcloudapi.com", "2020-09-18", clientConfig);
    }
    /**
     * 优mall产品启动下线流程

上报服务注册自身的服务地址作为回调地址, 用于信息回传。
     */
    async ReportServiceRegister(req, cb) {
        return this.request("ReportServiceRegister", req, cb);
    }
    /**
     * 优mall产品启动下线流程

集团广场的多经点位配置更新
     */
    async ModifyMultiBizConfig(req, cb) {
        return this.request("ModifyMultiBizConfig", req, cb);
    }
    /**
     * 优mall产品启动下线流程

上报相机移动、遮挡等告警信息


     */
    async CreateCameraAlerts(req, cb) {
        return this.request("CreateCameraAlerts", req, cb);
    }
    /**
     * 优mall产品启动下线流程

获取摄像头配置信息
mac不为空返回指定相机配置
mac为空返回对应GroupCode和MallId全量配置
     */
    async DescribeConfig(req, cb) {
        return this.request("DescribeConfig", req, cb);
    }
    /**
     * 优mall产品启动下线流程

实时获取底图接口
     */
    async DescribeImage(req, cb) {
        return this.request("DescribeImage", req, cb);
    }
    /**
     * 优mall产品启动下线流程

集团广场的多经点位消警
     */
    async DeleteMultiBizAlert(req, cb) {
        return this.request("DeleteMultiBizAlert", req, cb);
    }
    /**
     * 优mall产品启动下线流程

获取集团广场对应的摄像头列表
     */
    async DescribeCameras(req, cb) {
        return this.request("DescribeCameras", req, cb);
    }
    /**
     * 优mall产品启动下线流程

获取集团广场的点位列表
     */
    async DescribeZones(req, cb) {
        return this.request("DescribeZones", req, cb);
    }
    /**
     * 优mall产品启动下线流程

删除集团广场对应的任务
     */
    async DeleteTask(req, cb) {
        return this.request("DeleteTask", req, cb);
    }
    /**
     * 优mall产品启动下线流程

上报所有进程监控信息
     */
    async CreateProgramState(req, cb) {
        return this.request("CreateProgramState", req, cb);
    }
    /**
     * 优mall产品启动下线流程

查询集团广场对应的任务列表
     */
    async DescribeTasks(req, cb) {
        return this.request("DescribeTasks", req, cb);
    }
    /**
     * 优mall产品启动下线流程

集团广场的多经点位告警
     */
    async CreateMultiBizAlert(req, cb) {
        return this.request("CreateMultiBizAlert", req, cb);
    }
    /**
     * 优mall产品启动下线流程

以图搜图
     */
    async SearchImage(req, cb) {
        return this.request("SearchImage", req, cb);
    }
    /**
     * 优mall产品启动下线流程

上报所有服务器硬件监控信息
     */
    async CreateServerState(req, cb) {
        return this.request("CreateServerState", req, cb);
    }
    /**
     * 优mall产品启动下线流程

获取多经点位底图
     */
    async DescribeMultiBizBaseImage(req, cb) {
        return this.request("DescribeMultiBizBaseImage", req, cb);
    }
    /**
     * 优mall产品启动下线流程

上报当前场内所有相机的当前状态
     */
    async CreateCameraState(req, cb) {
        return this.request("CreateCameraState", req, cb);
    }
    /**
     * 优mall产品下线

场内抓拍上报接口
     */
    async CreateCapture(req, cb) {
        return this.request("CreateCapture", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249624, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.vcg = void 0;
const v20240404_1 = require("./v20240404");
exports.vcg = {
    v20240404: v20240404_1.v20240404,
};

}, function(modId) { var map = {"./v20240404":1738984249625}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249625, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20240404 = void 0;
const Models = require("./vcg_models");
const vcg_client_1 = require("./vcg_client");
exports.v20240404 = {
    Client: vcg_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./vcg_models":1738984249626,"./vcg_client":1738984249627}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249626, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249627, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * vcg client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("vcg.tencentcloudapi.com", "2024-04-04", clientConfig);
    }
    /**
     * 用于提交视频风格化任务。支持将输入视频生成特定风格的视频。生成后的视频画面风格多样、流畅自然，能够满足社交娱乐、互动营销、视频素材制作等场景的需求。
     */
    async SubmitVideoStylizationJob(req, cb) {
        return this.request("SubmitVideoStylizationJob", req, cb);
    }
    /**
     * 用于查询视频风格化任务。视频风格化支持将输入视频生成特定风格的视频。生成后的视频画面风格多样、流畅自然，能够满足社交娱乐、互动营销、视频素材制作等场景的需求。
     */
    async DescribeVideoStylizationJob(req, cb) {
        return this.request("DescribeVideoStylizationJob", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249628, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.vclm = void 0;
const v20240523_1 = require("./v20240523");
exports.vclm = {
    v20240523: v20240523_1.v20240523,
};

}, function(modId) { var map = {"./v20240523":1738984249629}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249629, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20240523 = void 0;
const Models = require("./vclm_models");
const vclm_client_1 = require("./vclm_client");
exports.v20240523 = {
    Client: vclm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./vclm_models":1738984249630,"./vclm_client":1738984249631}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249630, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249631, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * vclm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("vclm.tencentcloudapi.com", "2024-05-23", clientConfig);
    }
    /**
     * ### 支持音色种别列表。
每个音色都支持：英语（美国）、阿拉伯语、德语、西班牙语、法语、印尼语、意大利语、日语、韩语、马来语、葡萄牙语、俄语、泰语、土耳其语、越南语。

| 音色名称    | 性别 | 音色ID |
| ----------- | ---- | ------ |
| Seraphina   | 女   | 701002 |
| Ada         | 女   | 701003 |
| Emma        | 女   | 701007 |
| Brian       | 男   | 701008 |
| Amanda      | 女   | 701013 |
| Brandon     | 男   | 701014 |
| Christopher | 男   | 701015 |
| Davis       | 男   | 701017 |
| Derek       | 男   | 701018 |
| Dustin      | 男   | 701019 |
| Evelyn      | 女   | 701020 |
| Lewis       | 男   | 701021 |
| Lola        | 女   | 701022 |
| Samuel      | 男   | 701026 |
| Steffan     | 男   | 701028 |
| Arabella    | 女   | 701029 |
| Isidora     | 女   | 701030 |
| Tristan     | 男   | 701031 |
| Vivienne    | 女   | 701034 |
| Lucien      | 男   | 701035 |
| Alessio     | 男   | 701036 |
| Giuseppe    | 男   | 701037 |
| Isabella    | 女   | 701038 |
| Marcello    | 男   | 701039 |
| Masaru      | 男   | 701040 |
| Macerio     | 男   | 701042 |
| Thalita     | 女   | 701043 |
| 晓晓         | 女   | 701045 |
| 晓宇         | 女   | 701046 |
| 云逸         | 男   | 701047 |
| Yunfan       | 男   | 701048 |
     */
    async SubmitVideoTranslateJob(req, cb) {
        return this.request("SubmitVideoTranslateJob", req, cb);
    }
    /**
     * 查询视频转译任务
     */
    async DescribeVideoTranslateJob(req, cb) {
        return this.request("DescribeVideoTranslateJob", req, cb);
    }
    /**
     * 用于提交视频风格化任务。支持将输入视频生成特定风格的视频。生成后的视频画面风格多样、流畅自然，能够满足社交娱乐、互动营销、视频素材制作等场景的需求。
     */
    async SubmitVideoStylizationJob(req, cb) {
        return this.request("SubmitVideoStylizationJob", req, cb);
    }
    /**
     * 用于提交图片唱演任务。
支持提交音频和图片生成唱演视频，满足社交娱乐、互动营销等场景的需求。
     */
    async SubmitPortraitSingJob(req, cb) {
        return this.request("SubmitPortraitSingJob", req, cb);
    }
    /**
     * 确认视频转译结果
     */
    async ConfirmVideoTranslateJob(req, cb) {
        return this.request("ConfirmVideoTranslateJob", req, cb);
    }
    /**
     * 用于查询图片唱演任务。
支持提交音频和图片生成唱演视频，满足社交娱乐、互动营销等场景的需求。
     */
    async DescribePortraitSingJob(req, cb) {
        return this.request("DescribePortraitSingJob", req, cb);
    }
    /**
     * 用于查询图片跳舞任务。图片跳舞能力支持舞蹈动作结合图片生成跳舞视频，满足社交娱乐、互动营销等场景的需求。
     */
    async DescribeImageAnimateJob(req, cb) {
        return this.request("DescribeImageAnimateJob", req, cb);
    }
    /**
     * 用于提交图片跳舞任务。图片跳舞能力支持舞蹈动作结合图片生成跳舞视频，满足社交娱乐、互动营销等场景的需求。
     */
    async SubmitImageAnimateJob(req, cb) {
        return this.request("SubmitImageAnimateJob", req, cb);
    }
    /**
     * 检查图片跳舞输入图
     */
    async CheckAnimateImageJob(req, cb) {
        return this.request("CheckAnimateImageJob", req, cb);
    }
    /**
     * 用于查询视频风格化任务。视频风格化支持将输入视频生成特定风格的视频。生成后的视频画面风格多样、流畅自然，能够满足社交娱乐、互动营销、视频素材制作等场景的需求。
     */
    async DescribeVideoStylizationJob(req, cb) {
        return this.request("DescribeVideoStylizationJob", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249632, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.vcube = void 0;
const v20220410_1 = require("./v20220410");
exports.vcube = {
    v20220410: v20220410_1.v20220410,
};

}, function(modId) { var map = {"./v20220410":1738984249633}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249633, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220410 = void 0;
const Models = require("./vcube_models");
const vcube_client_1 = require("./vcube_client");
exports.v20220410 = {
    Client: vcube_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./vcube_models":1738984249634,"./vcube_client":1738984249635}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249634, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249635, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * vcube client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("vcube.tencentcloudapi.com", "2022-04-10", clientConfig);
    }
    /**
     * 续期测试license
     */
    async ModifyTrialLicense(req, cb) {
        return this.request("ModifyTrialLicense", req, cb);
    }
    /**
     * 续期测试版优图美视
     */
    async RenewTestXMagic(req, cb) {
        return this.request("RenewTestXMagic", req, cb);
    }
    /**
     * 查询视立方 license 资源，所有的资源包
     */
    async DescribeVcubeResources(req, cb) {
        return this.request("DescribeVcubeResources", req, cb);
    }
    /**
     * 创建应用并绑定license或者XMagic
     */
    async CreateApplicationAndBindLicense(req, cb) {
        return this.request("CreateApplicationAndBindLicense", req, cb);
    }
    /**
     * 创建 web 播放器基础版
     */
    async CreateApplicationAndWebPlayerLicense(req, cb) {
        return this.request("CreateApplicationAndWebPlayerLicense", req, cb);
    }
    /**
     * 用途美视资源包用于开通正式优图美视
     */
    async DescribeXMagicResource(req, cb) {
        return this.request("DescribeXMagicResource", req, cb);
    }
    /**
     * 编辑更改应用
     */
    async ModifyApplication(req, cb) {
        return this.request("ModifyApplication", req, cb);
    }
    /**
     * 修改正式应用的包名称
     */
    async ModifyFormalApplication(req, cb) {
        return this.request("ModifyFormalApplication", req, cb);
    }
    /**
     * 查询用户个性配置
     */
    async DescribeUserConfig(req, cb) {
        return this.request("DescribeUserConfig", req, cb);
    }
    /**
     * 获取临时秘钥，用于图片，特效包上传
     */
    async DescribeSTS(req, cb) {
        return this.request("DescribeSTS", req, cb);
    }
    /**
     * 修改内置应用包名
     */
    async ModifyPresetApplication(req, cb) {
        return this.request("ModifyPresetApplication", req, cb);
    }
    /**
     * 查询视立方 license 资源，包括资源包赠送和直接购买的资源
     */
    async DescribeVcubeResourcesList(req, cb) {
        return this.request("DescribeVcubeResourcesList", req, cb);
    }
    /**
     * 开通测试license
     */
    async CreateTrialLicense(req, cb) {
        return this.request("CreateTrialLicense", req, cb);
    }
    /**
     * 正式license 升降配，点播精简版、基础版
     */
    async ModifyLicense(req, cb) {
        return this.request("ModifyLicense", req, cb);
    }
    /**
     * 查询用户license， 按照应用分类
     */
    async DescribeVcubeApplicationAndLicense(req, cb) {
        return this.request("DescribeVcubeApplicationAndLicense", req, cb);
    }
    /**
     * 将测试xmagic升级到正式版
     */
    async UpdateTestXMagic(req, cb) {
        return this.request("UpdateTestXMagic", req, cb);
    }
    /**
     * 更新优图美视的申请信息 Status 为2，3的时候可用
     */
    async UpdateXMagic(req, cb) {
        return this.request("UpdateXMagic", req, cb);
    }
    /**
     * 测试 license 升级为正式 license
     */
    async UpdateTrialLicense(req, cb) {
        return this.request("UpdateTrialLicense", req, cb);
    }
    /**
     * 查询用户优图license， 按照应用分类
     */
    async DescribeVcubeApplicationAndXMagicList(req, cb) {
        return this.request("DescribeVcubeApplicationAndXMagicList", req, cb);
    }
    /**
     * 查询用户点播直播等license， 按照应用分类,国际站专用
     */
    async DescribeVcubeApplicationAndPlayList(req, cb) {
        return this.request("DescribeVcubeApplicationAndPlayList", req, cb);
    }
    /**
     * 总览页查询临期License列表，和统计数据
     */
    async DescribeLicenseList(req, cb) {
        return this.request("DescribeLicenseList", req, cb);
    }
    /**
     * 创建活动license
     */
    async CreateActivityLicense(req, cb) {
        return this.request("CreateActivityLicense", req, cb);
    }
    /**
     * 绑定license
     */
    async CreateLicense(req, cb) {
        return this.request("CreateLicense", req, cb);
    }
    /**
     * 申请开通测试版优图
     */
    async CreateTestXMagic(req, cb) {
        return this.request("CreateTestXMagic", req, cb);
    }
    /**
     * 续期国际站视频播放功能和中国站web基础版
     */
    async RenewVideo(req, cb) {
        return this.request("RenewVideo", req, cb);
    }
    /**
     * 正式license 续期与变更有效期
     */
    async RenewLicense(req, cb) {
        return this.request("RenewLicense", req, cb);
    }
    /**
     * 创建测试应用并开通测试 license
     */
    async CreateTrialApplicationAndLicense(req, cb) {
        return this.request("CreateTrialApplicationAndLicense", req, cb);
    }
    /**
     * 用于优图美视资源列表展示
     */
    async DescribeXMagicResourceList(req, cb) {
        return this.request("DescribeXMagicResourceList", req, cb);
    }
    /**
     * 查询测试应用可以开通的功能
     */
    async DescribeTrialFeature(req, cb) {
        return this.request("DescribeTrialFeature", req, cb);
    }
    /**
     * x08开通正式版优图美视功能，针对已经有Application的情况
     */
    async CreateXMagic(req, cb) {
        return this.request("CreateXMagic", req, cb);
    }
    /**
     * 创建应用和视频播放license 目前只有国际站可以用
     */
    async CreateApplicationAndVideo(req, cb) {
        return this.request("CreateApplicationAndVideo", req, cb);
    }
    /**
     * 查询功能列表
     */
    async DescribeFeatureList(req, cb) {
        return this.request("DescribeFeatureList", req, cb);
    }
    /**
     * 查询产品动态
     */
    async DescribeNews(req, cb) {
        return this.request("DescribeNews", req, cb);
    }
    /**
     * 使用一个腾讯特效资源，更新现在的腾讯特效license，license功能和到期时间会以新的资源为准，老资源会被替换下来
     */
    async ModifyXMagic(req, cb) {
        return this.request("ModifyXMagic", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249636, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.vdb = void 0;
const v20230616_1 = require("./v20230616");
exports.vdb = {
    v20230616: v20230616_1.v20230616,
};

}, function(modId) { var map = {"./v20230616":1738984249637}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249637, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20230616 = void 0;
const Models = require("./vdb_models");
const vdb_client_1 = require("./vdb_client");
exports.v20230616 = {
    Client: vdb_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./vdb_models":1738984249638,"./vdb_client":1738984249639}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249638, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249639, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * vdb client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("vdb.tencentcloudapi.com", "2023-06-16", clientConfig);
    }
    /**
     * 本接口 (AssociateSecurityGroups) 用于安全组批量绑定多个指定实例。
     */
    async AssociateSecurityGroups(req, cb) {
        return this.request("AssociateSecurityGroups", req, cb);
    }
    /**
     * 查询实例列表
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 本接口(DescribeDBSecurityGroups)用于查询实例的安全组详情。
     */
    async DescribeDBSecurityGroups(req, cb) {
        return this.request("DescribeDBSecurityGroups", req, cb);
    }
    /**
     * 本接口(ModifyDBInstanceSecurityGroups)用于修改实例绑定的安全组。
     */
    async ModifyDBInstanceSecurityGroups(req, cb) {
        return this.request("ModifyDBInstanceSecurityGroups", req, cb);
    }
    /**
     * 实例节点列表
     */
    async DescribeInstanceNodes(req, cb) {
        return this.request("DescribeInstanceNodes", req, cb);
    }
    /**
     * 本接口(DisassociateSecurityGroups)用于安全组批量解绑实例。
     */
    async DisassociateSecurityGroups(req, cb) {
        return this.request("DisassociateSecurityGroups", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249640, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.vm = void 0;
const v20210922_1 = require("./v20210922");
const v20200709_1 = require("./v20200709");
const v20201229_1 = require("./v20201229");
exports.vm = {
    v20210922: v20210922_1.v20210922,
    v20200709: v20200709_1.v20200709,
    v20201229: v20201229_1.v20201229,
};

}, function(modId) { var map = {"./v20210922":1738984249641,"./v20200709":1738984249644,"./v20201229":1738984249647}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249641, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210922 = void 0;
const Models = require("./vm_models");
const vm_client_1 = require("./vm_client");
exports.v20210922 = {
    Client: vm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./vm_models":1738984249642,"./vm_client":1738984249643}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249642, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249643, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * vm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("vm.tencentcloudapi.com", "2021-09-22", clientConfig);
    }
    /**
     * 通过查看任务详情 DescribeTaskDetail 接口，可主动轮询获取检测结果详情。
     */
    async DescribeTaskDetail(req, cb) {
        return this.request("DescribeTaskDetail", req, cb);
    }
    /**
     * 本接口（Video Moderation System，VM）用于提交视频文件或视频流进行智能审核任务。使用前请您使用腾讯云主账号登录控制台[开通视频内容安全服务](https://console.cloud.tencent.com/cms)并调整好对应的业务配置。<br>
### 功能使用说明：

- 前往“[内容安全控制台-视频内容安全](https://console.cloud.tencent.com/cms)”开启使用视频内容安全服务，首次开通服务的用户可免费领用试用套餐包，包含200分钟的处理量（换算1s每帧截图，赠送**12000张图**、**200分钟的音频**处理量），有效期为15天。

- 该接口为收费接口，计费方式敬请参见[腾讯云视频内容安全定价](https://cloud.tencent.com/product/vm/pricing)。

- 默认接口请求频率限制：**20次/秒**，对于异步审核任务（点播视频），超出频率限制的请求会自动排入待审核队列，对于同步审核任务（直播视频），超出频率限制将会报错。
- 默认并发审核路数限制：点播默认10路，异步审核任务（点播视频）数量超过并发审核路数时，将会进入排队；直播默认100路，同步审核任务（直播视频）超过并发审核路数，接口会返回错误。


### 接口功能说明：

- 支持对视频文件或视频流进行自动检测，从 OCR文本识别、物体检测（实体、广告台标、二维码等）、图像识别及音频审核四个维度，通过深度学习技术识别视频中的违规内容；
- 支持设置回调地址 Callback 获取检测结果，或通过接口(查看任务详情)主动轮询获取检测结果详情；对于正常审核中的视频任务，如含有违规内容，则截帧图片最长会在**3s**内回调，音频片段会在用户配置的**切片时长 + 2s**内回调；对于在队列中的待审核任务，回调时间为正常审核回调时间+等待时间；
- 支持通过接口（查看审核任务列表）查询任务队列，用户可根据多种业务信息（业务类型、审核结果、任务状态等）筛选审核任务列表；
- 支持识别多种违规场景，包括：低俗、谩骂、色情、广告等场景；
- 支持根据不同的业务场景配置自定义的审核策略；
- 支持用户自定义配置黑白词库及图片库，打击自定义违规内容（目前仅支持黑名单配置）；
- 支持用户自定义配置审核任务优先级，当有多个任务排队时，可根据用户配置自动调整任务优先级；
- 支持批量提交检测任务，**最多可同时创建10个任务**；

### 视频文件调用说明：

- 视频文件大小支持：**4K视频文件 < 10GB**；**低于4K视频文件 < 5GB**
- 视频文件分辨率支持：**最佳分辨率为1920x1080 (1080p)**，如果视频文件小于300MB，则分辨率可以大于1080p，分辨率最大支持4K，更大视频可以调用[云转码服务](https://cloud.tencent.com/product/mps/details)转码后再送审；
- 视频文件支持格式：flv、mkv 、mp4 、rmvb 、avi 、wmv、3gp、ts、mov、rm、mpeg、wmf等。
- 视频文件支持的访问方式：链接地址（支持HTTP/HTTPS）、腾讯云COS存储；
- 若传入视频文件的访问链接，则需要注意视频**头文件的读取时间限制为3秒**，为保障被检测视频的稳定性和可靠性，建议您使用腾讯云COS存储或者CDN缓存等；
- 支持用户配置是否需要开启音频审核，若不开启则将仅对视频文件图像内容进行审核。

### 视频流调用说明：

- 视频流时长支持：**8小时以内**
- 视频流分辨率支持：支持**1920x1080 (1080p)**，更高分辨率视频可以调用[直播云转码服务](https://cloud.tencent.com/document/product/267/39889)转码后再送审；
- 视频流支持格式：rmtp，flv 等主流视频流编码格式。
- 视频流支持的传输协议：HTTP/HTTPS/RTMP；
- 支持用户配置是否需要开启音频审核，若不开启则将仅对视频流图像内容进行审核。

### 直播断流处理说明：
- 请确认已对接[取消任务](https://cloud.tencent.com/document/product/1265/80018)。
- 如果直播任务取消/结束，则终止直播拉流并退出审核。
- 如果直播任务没有取消/结束，直播视频推流因故中断，产品将在将在10分钟内持续拉流重试。如果10分钟检测到图片截帧/音频切片数据，则恢复正常审核，反之，则终止拉流并退出审核。在拉流终止后，用户如有审核需求，需重新送审。
     */
    async CreateVideoModerationTask(req, cb) {
        return this.request("CreateVideoModerationTask", req, cb);
    }
    /**
     * 通过查看审核任务列表接口，可查询任务队列；您可根据多种业务信息（业务类型、审核结果、任务状态等）筛选审核任务列表。
     */
    async DescribeTasks(req, cb) {
        return this.request("DescribeTasks", req, cb);
    }
    /**
     * 可使用该接口取消审核任务，成功取消后，该接口返回已取消任务的TaskId。
     */
    async CancelTask(req, cb) {
        return this.request("CancelTask", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249644, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200709 = void 0;
const Models = require("./vm_models");
const vm_client_1 = require("./vm_client");
exports.v20200709 = {
    Client: vm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./vm_models":1738984249645,"./vm_client":1738984249646}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249645, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249646, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * vm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("vm.tencentcloudapi.com", "2020-07-09", clientConfig);
    }
    /**
     * 查看任务详情DescribeTaskDetail
     */
    async DescribeTaskDetail(req, cb) {
        return this.request("DescribeTaskDetail", req, cb);
    }
    /**
     * 通过URL或存储桶创建审核任务
     */
    async CreateVideoModerationTask(req, cb) {
        return this.request("CreateVideoModerationTask", req, cb);
    }
    /**
     * 控制台识别统计
     */
    async DescribeVideoStat(req, cb) {
        return this.request("DescribeVideoStat", req, cb);
    }
    /**
     * 创建业务配置，1个账号最多可以创建20个配置，可定义音频审核的场景，如色情、谩骂等，

在创建业务配置之前，你需要以下步骤：
1. 开通COS存储捅功能，新建存储桶，例如 cms_segments，用来存储 视频转换过程中生成对音频和图片。
2. 然后在COS控制台，授权天御内容安全主账号 对 cms_segments 存储桶对读写权限。具体授权操作，参考https://cloud.tencent.com/document/product/436/38648

     */
    async CreateBizConfig(req, cb) {
        return this.request("CreateBizConfig", req, cb);
    }
    /**
     * 取消任务
     */
    async CancelTask(req, cb) {
        return this.request("CancelTask", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249647, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201229 = void 0;
const Models = require("./vm_models");
const vm_client_1 = require("./vm_client");
exports.v20201229 = {
    Client: vm_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./vm_models":1738984249648,"./vm_client":1738984249649}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249648, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249649, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * vm client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("vm.tencentcloudapi.com", "2020-12-29", clientConfig);
    }
    /**
     * 通过查看任务详情 DescribeTaskDetail 接口，可主动轮询获取检测结果详情。
     */
    async DescribeTaskDetail(req, cb) {
        return this.request("DescribeTaskDetail", req, cb);
    }
    /**
     * 本接口（Video Moderation System，VM）用于提交视频文件或视频流进行智能审核任务。使用前请您使用腾讯云主账号登录控制台[开通视频内容安全服务](https://console.cloud.tencent.com/cms)并调整好对应的业务配置。<br>
### 功能使用说明：

- 前往“[内容安全控制台-视频内容安全](https://console.cloud.tencent.com/cms)”开启使用视频内容安全服务，首次开通服务的用户可免费领用试用套餐包，包含200分钟的处理量（换算1s每帧截图，赠送**12000张图**、**200分钟的音频**处理量），有效期为15天。

- 该接口为收费接口，计费方式敬请参见[腾讯云视频内容安全定价](https://cloud.tencent.com/product/vm/pricing)。

- 默认接口请求频率限制：**20次/秒**，对于异步审核任务（点播视频），超出频率限制的请求会自动排入待审核队列，对于同步审核任务（直播视频），超出频率限制将会报错。
- 默认并发审核路数限制：点播默认10路，异步审核任务（点播视频）数量超过并发审核路数时，将会进入排队；直播默认100路，同步审核任务（直播视频）超过并发审核路数，接口会返回错误。


### 接口功能说明：

- 支持对视频文件或视频流进行自动检测，从 OCR文本识别、物体检测（实体、广告台标、二维码等）、图像识别及音频审核四个维度，通过深度学习技术识别视频中的违规内容；
- 支持设置回调地址 Callback 获取检测结果，或通过接口(查看任务详情)主动轮询获取检测结果详情；对于正常审核中的视频任务，如含有违规内容，则截帧图片最长会在**3s**内回调，音频片段会在用户配置的**切片时长 + 2s**内回调；对于在队列中的待审核任务，回调时间为正常审核回调时间+等待时间；
- 支持通过接口（查看审核任务列表）查询任务队列，用户可根据多种业务信息（业务类型、审核结果、任务状态等）筛选审核任务列表；
- 支持识别多种违规场景，包括：低俗、谩骂、色情、广告等场景；
- 支持根据不同的业务场景配置自定义的审核策略；
- 支持用户自定义配置黑白词库及图片库，打击自定义违规内容（目前仅支持黑名单配置）；
- 支持用户自定义配置审核任务优先级，当有多个任务排队时，可根据用户配置自动调整任务优先级；
- 支持批量提交检测任务，**最多可同时创建10个任务**；

### 视频文件调用说明：

- 视频文件大小支持：**4K视频文件 < 10GB**；**低于4K视频文件 < 5GB**
- 视频文件分辨率支持：**最佳分辨率为1920x1080 (1080p)**，如果视频文件小于300MB，则分辨率可以大于1080p，分辨率最大支持4K，更大视频可以调用[云转码服务](https://cloud.tencent.com/product/mps/details)转码后再送审；
- 视频文件支持格式：flv、mkv 、mp4 、rmvb 、avi 、wmv、3gp、ts、mov、rm、mpeg、wmf等。
- 视频文件支持的访问方式：链接地址（支持HTTP/HTTPS）、腾讯云COS存储；
- 若传入视频文件的访问链接，则需要注意视频**头文件的读取时间限制为3秒**，为保障被检测视频的稳定性和可靠性，建议您使用腾讯云COS存储或者CDN缓存等；
- 支持用户配置是否需要开启音频审核，若不开启则将仅对视频文件图像内容进行审核。

### 视频流调用说明：

- 视频流时长支持：**8小时以内**
- 视频流分辨率支持：支持**1920x1080 (1080p)**，更高分辨率视频可以调用[直播云转码服务](https://cloud.tencent.com/document/product/267/39889)转码后再送审；
- 视频流支持格式：rmtp，flv 等主流视频流编码格式。
- 视频文件支持的传输协议：HTTP/HTTPS/RTMP；
- 支持用户配置是否需要开启音频审核，若不开启则将仅对视频流图像内容进行审核。
     */
    async CreateVideoModerationTask(req, cb) {
        return this.request("CreateVideoModerationTask", req, cb);
    }
    /**
     * 通过查看审核任务列表接口，可查询任务队列；您可根据多种业务信息（业务类型、审核结果、任务状态等）筛选审核任务列表。<br>

默认接口请求频率限制：**20次/秒**。
     */
    async DescribeTasks(req, cb) {
        return this.request("DescribeTasks", req, cb);
    }
    /**
     * 可使用该接口取消审核任务，成功取消后，该接口返回已取消任务的TaskId。<br>

默认接口请求频率限制：**20次/秒**。
     */
    async CancelTask(req, cb) {
        return this.request("CancelTask", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249650, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.vms = void 0;
const v20200902_1 = require("./v20200902");
exports.vms = {
    v20200902: v20200902_1.v20200902,
};

}, function(modId) { var map = {"./v20200902":1738984249651}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249651, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200902 = void 0;
const Models = require("./vms_models");
const vms_client_1 = require("./vms_client");
exports.v20200902 = {
    Client: vms_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./vms_models":1738984249652,"./vms_client":1738984249653}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249652, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249653, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * vms client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("vms.tencentcloudapi.com", "2020-09-02", clientConfig);
    }
    /**
     * 给用户发语音验证码（仅支持数字）。
     */
    async SendCodeVoice(req, cb) {
        return this.request("SendCodeVoice", req, cb);
    }
    /**
     * 给用户发送指定模板的语音通知。
     */
    async SendTtsVoice(req, cb) {
        return this.request("SendTtsVoice", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249654, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.vod = void 0;
const v20180717_1 = require("./v20180717");
const v20240718_1 = require("./v20240718");
exports.vod = {
    v20180717: v20180717_1.v20180717,
    v20240718: v20240718_1.v20240718,
};

}, function(modId) { var map = {"./v20180717":1738984249655,"./v20240718":1738984249658}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249655, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180717 = void 0;
const Models = require("./vod_models");
const vod_client_1 = require("./vod_client");
exports.v20180717 = {
    Client: vod_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./vod_models":1738984249656,"./vod_client":1738984249657}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249656, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249657, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * vod client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("vod.tencentcloudapi.com", "2018-07-17", clientConfig);
    }
    /**
     * 创建一个用户自定义的图片处理模板，数量上限：16。最多支持十次操作，例如：裁剪-缩略-裁剪-模糊-缩略-裁剪-缩略-裁剪-模糊-缩略。
     */
    async CreateImageProcessingTemplate(req, cb) {
        return this.request("CreateImageProcessingTemplate", req, cb);
    }
    /**
     * 查询 VOD 创建的 CLS 日志集。
     */
    async DescribeCLSLogsets(req, cb) {
        return this.request("DescribeCLSLogsets", req, cb);
    }
    /**
     * 该接口用于创建轮播播单，数量上限：100。
轮播播单的每个文件可以指定源文件，也可以指定某个转码文件。
指定的文件必须是hls格式，所有的播单文件最好保持相同的码率和分辨率。
     */
    async CreateRoundPlay(req, cb) {
        return this.request("CreateRoundPlay", req, cb);
    }
    /**
     * 该接口用于设置默认的存储地域。上传文件时如果没有指定地域，将上传到默认地域。
     */
    async ModifyDefaultStorageRegion(req, cb) {
        return this.request("ModifyDefaultStorageRegion", req, cb);
    }
    /**
     * 该 API 已经<font color='red'>不再维护</font>。如果有盗录溯源需求，请参考 [幽灵水印](https://cloud.tencent.com/document/product/266/94228)。
     */
    async ExtractTraceWatermark(req, cb) {
        return this.request("ExtractTraceWatermark", req, cb);
    }
    /**
     * 用于异步获取文件属性。
- 当前仅支持获取源文件的 Md5、Sha1。
- 对输入文件为 HLS 或 DASH 的情况，仅获取索引文件的属性。
     */
    async DescribeFileAttributes(req, cb) {
        return this.request("DescribeFileAttributes", req, cb);
    }
    /**
     * 对视频进行编辑（剪辑、拼接等），生成一个新的点播视频。编辑的功能包括：

1. 对点播中的一个文件进行剪辑，生成一个新的视频；
2. 对点播中的多个文件进行拼接，生成一个新的视频；
3. 对点播中的多个文件进行剪辑，然后再拼接，生成一个新的视频；
4. 对点播中的一个流，直接生成一个新的视频；
5. 对点播中的一个流进行剪辑，生成一个新的视频；
6. 对点播中的多个流进行拼接，生成一个新的视频；
7. 对点播中的多个流进行剪辑，然后拼接，生成一个新的视频。

对于生成的新视频，还可以指定生成后的视频是否要执行任务流。

>当对直播流做剪辑、拼接等操作时，请确保流结束后再操作。否则生成的视频可能不完整。

如使用事件通知，事件通知的类型为 [视频编辑完成](https://cloud.tencent.com/document/product/266/33794)。
     */
    async EditMedia(req, cb) {
        return this.request("EditMedia", req, cb);
    }
    /**
     * 修改即时转码模板。
- 注意：即时转码模板创建后，不推荐修改，如需修改参数，推荐使用新增模板。
     */
    async ModifyJustInTimeTranscodeTemplate(req, cb) {
        return this.request("ModifyJustInTimeTranscodeTemplate", req, cb);
    }
    /**
     * 该接口用于查询点播域名信息列表。
     */
    async DescribeVodDomains(req, cb) {
        return this.request("DescribeVodDomains", req, cb);
    }
    /**
     * * 我们强烈建议您使用云点播提供的 [服务端上传 SDK](/document/product/266/9759#1.-.E5.8F.91.E8.B5.B7.E4.B8.8A.E4.BC.A0) 来上传文件。直接调用 API 进行上传的难度和工作量都显著大于使用 SDK。
* 该接口用于申请媒体文件（和封面文件）的上传，获取文件上传到云点播的元信息（包括上传路径、上传签名等），用于后续上传接口。
* 上传流程请参考 [服务端上传综述](/document/product/266/9759)。
     */
    async ApplyUpload(req, cb) {
        return this.request("ApplyUpload", req, cb);
    }
    /**
     * 创建用户自定义指定时间点截图模板，数量上限：16。
     */
    async CreateSnapshotByTimeOffsetTemplate(req, cb) {
        return this.request("CreateSnapshotByTimeOffsetTemplate", req, cb);
    }
    /**
     * 根据音视频内容分析模板唯一标识，获取音视频内容分析模板详情列表。返回结果包含符合条件的所有用户自定义音视频内容分析模板及[系统预置音视频内容分析模板](https://cloud.tencent.com/document/product/266/33476#.E9.A2.84.E7.BD.AE.E8.A7.86.E9.A2.91.E5.86.85.E5.AE.B9.E5.88.86.E6.9E.90.E6.A8.A1.E6.9D.BF)。
     */
    async DescribeAIAnalysisTemplates(req, cb) {
        return this.request("DescribeAIAnalysisTemplates", req, cb);
    }
    /**
     * * 该接口用于业务服务器以 [可靠回调](https://cloud.tencent.com/document/product/266/33779#.E5.8F.AF.E9.9D.A0.E5.9B.9E.E8.B0.83) 的方式获取事件通知；
* 接口为长轮询模式，即：如果服务端存在未消费事件，则立即返回给请求方；如果服务端没有未消费事件，则后台会将请求挂起，直到有新的事件产生为止；
* 请求最多挂起5秒，建议请求方将超时时间设置为10秒；
* 未被拉取的事件通知最多保留4天，超过该时限的事件通知可能会被清除；
* 若该接口有事件返回，调用方必须在<font color="red">30秒</font>内调用 [确认事件通知](https://cloud.tencent.com/document/product/266/33434) 接口，确认事件通知已经处理，否则该事件通知在<font color="red">30秒</font>后会再次被拉取到。
* 当前，API 每次最多可以获取16个事件通知。
     */
    async PullEvents(req, cb) {
        return this.request("PullEvents", req, cb);
    }
    /**
     * 使用任务流模板，对点播中的视频发起处理任务。
有两种方式创建任务流模板：
1. 在控制台上创建和修改任务流模板；
2. 通过任务流模板接口创建任务流模板。

如使用事件通知，除音视频审核任务外的事件通知的类型为 [任务流状态变更](https://cloud.tencent.com/document/product/266/9636)；音视频审核任务事件通知的类型为 [音视频审核完成](https://cloud.tencent.com/document/product/266/81258)。
     */
    async ProcessMediaByProcedure(req, cb) {
        return this.request("ProcessMediaByProcedure", req, cb);
    }
    /**
     * 创建音画质检测模板。
     */
    async CreateQualityInspectTemplate(req, cb) {
        return this.request("CreateQualityInspectTemplate", req, cb);
    }
    /**
     * 该 API 已经<font color=red>不再维护</font>，新版 [音画质重生](https://cloud.tencent.com/document/product/266/102571) 接口使用预置模板，详情请参见 [音画质重生模板](https://cloud.tencent.com/document/product/266/102586#50604b3f-0286-4a10-a3f7-18218116aff7)。
修改视频重生模板。
     */
    async ModifyRebuildMediaTemplate(req, cb) {
        return this.request("ModifyRebuildMediaTemplate", req, cb);
    }
    /**
     * 删除用户自定义转码模板。
     */
    async DeleteTranscodeTemplate(req, cb) {
        return this.request("DeleteTranscodeTemplate", req, cb);
    }
    /**
     * 通过任务 ID 查询任务的执行状态和结果的详细信息（最多可以查询3天之内提交的任务）。
     */
    async DescribeTaskDetail(req, cb) {
        return this.request("DescribeTaskDetail", req, cb);
    }
    /**
     * <b>本接口已不推荐使用，用 [DescribeMediaProcessUsageData](/document/product/266/41464) 替代</b>

该接口返回查询时间范围内每天使用的视频内容智能识别时长数据，单位： 秒。

1. 可以查询最近365天内的视频内容智能识别时长统计数据。
2. 查询时间跨度不超过90天。
     */
    async DescribeReviewDetails(req, cb) {
        return this.request("DescribeReviewDetails", req, cb);
    }
    /**
     * 该接口用于根据应用场景、关键词、标签，分页查询关键词样本信息。
     */
    async DescribeWordSamples(req, cb) {
        return this.request("DescribeWordSamples", req, cb);
    }
    /**
     * 查询存储空间使用情况和文件数量。
     */
    async DescribeStorageData(req, cb) {
        return this.request("DescribeStorageData", req, cb);
    }
    /**
     * 对点播视频进行拆条，生成多个新的点播视频。
     */
    async SplitMedia(req, cb) {
        return this.request("SplitMedia", req, cb);
    }
    /**
     * 获取图片处理模板列表，支持根据条件，分页查询。
     */
    async DescribeImageProcessingTemplates(req, cb) {
        return this.request("DescribeImageProcessingTemplates", req, cb);
    }
    /**
     * 删除用户自定义的任务流模板。
     */
    async DeleteProcedureTemplate(req, cb) {
        return this.request("DeleteProcedureTemplate", req, cb);
    }
    /**
     * 删除转自适应码流模板
     */
    async DeleteAdaptiveDynamicStreamingTemplate(req, cb) {
        return this.request("DeleteAdaptiveDynamicStreamingTemplate", req, cb);
    }
    /**
     * 创建转自适应码流模板，数量上限：100。
     */
    async CreateAdaptiveDynamicStreamingTemplate(req, cb) {
        return this.request("CreateAdaptiveDynamicStreamingTemplate", req, cb);
    }
    /**
     * 本 API 是 [旧版本加密](https://cloud.tencent.com/document/product/266/9638) 中 [DescribeDrmDataKey 的 API 2017 接口](https://cloud.tencent.com/document/product/266/9643) 的升级版本。

如果您是新接入点播加密的用户，不要使用该 API，请参考 [视频加密综述](https://cloud.tencent.com/document/product/266/45552) 使用推荐的加密方式。
     */
    async DescribeDrmDataKey(req, cb) {
        return this.request("DescribeDrmDataKey", req, cb);
    }
    /**
     * 删除用户自定义指定时间点截图模板。
     */
    async DeleteSnapshotByTimeOffsetTemplate(req, cb) {
        return this.request("DeleteSnapshotByTimeOffsetTemplate", req, cb);
    }
    /**
     * 智能去除水印
     */
    async RemoveWatermark(req, cb) {
        return this.request("RemoveWatermark", req, cb);
    }
    /**
     * 该接口用于修改默认分发配置。
* 分发域名和分发协议，即媒体文件分发 URL 中的域名和协议。媒体文件按默认分发配置进行分发。
* 播放密钥，用于计算播放器签名。
     */
    async ModifyDefaultDistributionConfig(req, cb) {
        return this.request("ModifyDefaultDistributionConfig", req, cb);
    }
    /**
     * 查询点播域名的 CDN 访问日志的下载链接。
    1. 可以查询最近30天内的 CDN 日志下载链接。
    2. 默认情况下 CDN 每小时生成一个日志文件，如果某一个小时没有 CDN 访问，不会生成日志文件。
    3. CDN 日志下载链接的有效期为24小时。
     */
    async DescribeCdnLogs(req, cb) {
        return this.request("DescribeCdnLogs", req, cb);
    }
    /**
     * 由 VOD 创建新的日志集。
     */
    async CreateCLSLogset(req, cb) {
        return this.request("CreateCLSLogset", req, cb);
    }
    /**
     * 为点播域名设置投递 CLS 的目标。
     */
    async SetCLSPushTarget(req, cb) {
        return this.request("SetCLSPushTarget", req, cb);
    }
    /**
     * * 该接口用于查询任务列表；
* 当列表数据比较多时，单次接口调用无法拉取整个列表，可通过 ScrollToken 参数，分批拉取；
* 只能查询到最近三天（72 小时）内的任务。
     */
    async DescribeTasks(req, cb) {
        return this.request("DescribeTasks", req, cb);
    }
    /**
     * 该接口用于开通某地域的存储。
  1. 用户开通点播业务时，系统默认为用户开通了部分地域的存储，用户如果需要开通其它地域的存储，可以通过该接口进行开通。
  2. 通过 DescribeStorageRegions 接口可以查询到所有存储地域及已经开通的地域。
     */
    async CreateStorageRegion(req, cb) {
        return this.request("CreateStorageRegion", req, cb);
    }
    /**
     * 删除点播开通的日志主题。
     */
    async DeleteCLSTopic(req, cb) {
        return this.request("DeleteCLSTopic", req, cb);
    }
    /**
     * 重新设置用户自定义任务流模板的内容。
     */
    async ResetProcedureTemplate(req, cb) {
        return this.request("ResetProcedureTemplate", req, cb);
    }
    /**
     * 该接口用于查询点播 CDN 的流量、带宽等统计数据。
   1. 可以查询最近365天内的 CDN 用量数据。
   2. 查询时间跨度不超过90天。
   3. 可以指定用量数据的时间粒度，支持5分钟、1小时、1天的时间粒度。
   4. 流量为查询时间粒度内的总流量，带宽为查询时间粒度内的峰值带宽。
   5. 播放统计仅针对 VOD 域名（即 EdgeOne 域名的分发不计入播放统计）。
     */
    async DescribeCDNUsageData(req, cb) {
        return this.request("DescribeCDNUsageData", req, cb);
    }
    /**
     * 创建用户自定义转码模板，数量上限：100。
     */
    async CreateTranscodeTemplate(req, cb) {
        return this.request("CreateTranscodeTemplate", req, cb);
    }
    /**
     * 该接口用于查询点播域名的 CDN 带宽、流量等统计数据。
* 查询的起始时间和结束时间跨度不超过90天。
* 可以查询不同服务区域的数据。
* 中国境内的数据支持查询指定地区、运营商的统计数据。
* 播放统计仅针对 VOD 域名（即 EdgeOne 域名的分发不计入播放统计）。
     */
    async DescribeCDNStatDetails(req, cb) {
        return this.request("DescribeCDNStatDetails", req, cb);
    }
    /**
     * 该接口用于查询媒体文件按指定时间粒度统计的播放数据
* 可以查询最近一年的播放统计数据。
* 时间粒度为小时，结束时间和起始时间的跨度最大为7天。
* 时间粒度为天，结束时间和起始时间的跨度最大为90天。
* 播放统计仅针对 VOD 域名（即 EdgeOne 域名的分发不计入播放统计）。
     */
    async DescribeMediaPlayStatDetails(req, cb) {
        return this.request("DescribeMediaPlayStatDetails", req, cb);
    }
    /**
     * 修改用户自定义审核模板。
>模板仅适用于 [音视频审核(ReviewAudioVideo)](https://cloud.tencent.com/document/api/266/80283) 和 [图片审核(ReviewImage)](https://cloud.tencent.com/document/api/266/73217) 接口。
     */
    async ModifyReviewTemplate(req, cb) {
        return this.request("ModifyReviewTemplate", req, cb);
    }
    /**
     * 该接口返回查询时间范围内每天 License 请求次数信息。
   1. 可以查询最近365天内的 License 请求次数统计数据。
   2. 查询时间跨度不超过90天。
   3. 查询时间跨度超过1天的，返回以天为粒度的数据，否则，返回以5分钟为粒度的数据。
     */
    async DescribeLicenseUsageData(req, cb) {
        return this.request("DescribeLicenseUsageData", req, cb);
    }
    /**
     * 修改用户自定义雪碧图模板。
     */
    async ModifyImageSpriteTemplate(req, cb) {
        return this.request("ModifyImageSpriteTemplate", req, cb);
    }
    /**
     * * 仅当待删分类无子分类且无媒体关联情况下，可删除分类；
* 否则，请先执行[删除媒体](/document/product/266/31764)及子分类，再删除该分类；
     */
    async DeleteClass(req, cb) {
        return this.request("DeleteClass", req, cb);
    }
    /**
     * 本接口仅用于定制开发的特殊场景，除非云点播客服人员主动告知您需要使用本接口，其它情况请勿调用。
     */
    async ExecuteFunction(req, cb) {
        return this.request("ExecuteFunction", req, cb);
    }
    /**
     * 删除用户自定义审核模板。
>模板仅适用于 [音视频审核(ReviewAudioVideo)](https://cloud.tencent.com/document/api/266/80283) 和 [图片审核(ReviewImage)](https://cloud.tencent.com/document/api/266/73217) 接口。
     */
    async DeleteReviewTemplate(req, cb) {
        return this.request("DeleteReviewTemplate", req, cb);
    }
    /**
     * 该接口返回查询时间范围内每天使用的视频处理用量信息。
   1. 可以查询最近365天内的视频处理统计数据。
   2. 查询时间跨度不超过90天。
     */
    async DescribeMediaProcessUsageData(req, cb) {
        return this.request("DescribeMediaProcessUsageData", req, cb);
    }
    /**
     * 根据转码模板唯一标识，获取转码模板详情列表。返回结果包含符合条件的所有用户自定义模板及[系统预置转码模板](https://cloud.tencent.com/document/product/266/33476#.E9.A2.84.E7.BD.AE.E8.BD.AC.E7.A0.81.E6.A8.A1.E6.9D.BF)。
     */
    async DescribeTranscodeTemplates(req, cb) {
        return this.request("DescribeTranscodeTemplates", req, cb);
    }
    /**
     * 对点播中的音视频媒体发起音画质检测任务。
     */
    async InspectMediaQuality(req, cb) {
        return this.request("InspectMediaQuality", req, cb);
    }
    /**
     * 该接口可以查询用户已经购买的预付费商品的信息，包括：
    1. 商品的类型、生效和失效日期。
    2. 商品中每种资源的额度和剩余额度。
     */
    async DescribePrepaidProducts(req, cb) {
        return this.request("DescribePrepaidProducts", req, cb);
    }
    /**
     * 该接口用于生成一条子域名解析，提示客户添加到域名解析上，用于泛域名及域名取回校验归属权。
     */
    async CreateDomainVerifyRecord(req, cb) {
        return this.request("CreateDomainVerifyRecord", req, cb);
    }
    /**
     * 查询指定时间点截图模板，支持根据条件，分页查询。
     */
    async DescribeSnapshotByTimeOffsetTemplates(req, cb) {
        return this.request("DescribeSnapshotByTimeOffsetTemplates", req, cb);
    }
    /**
     * 该接口用于合成媒体文件，可以达到以下效果：

1. **画面旋转**：对视频、图片的画面旋转一定角度，或按照某个方向翻转。
2. **声音控制**：升高降低视频、音频中声音的音量，或者对视频静音。
3. **画面叠加**：将视频、图片中的画面依序叠加在一起，如实现“画中画”的效果。
4. **声音混合**：将视频、音频中的声音混合在一起（混音）。
5. **声音提取**：将视频中的音频提取出来（不保留画面）。
6. **裁剪**：对视频、音频裁剪出指定时间段。
7. **拼接**：对视频、音频、图片按时间顺序前后拼接。
8. **转场**：将多段视频或图片拼接时，可以在段落之间添加转场效果。

合成后的媒体封装格式可以是 MP4（视频）或 MP3（音频）。如使用事件通知，事件通知的类型为 [视频合成完成](https://cloud.tencent.com/document/product/266/43000)。
     */
    async ComposeMedia(req, cb) {
        return this.request("ComposeMedia", req, cb);
    }
    /**
     * 该 API 已经<font color=red>不再维护</font>，新版审核模板支持音视频审核和图片审核，详细请参考 [创建审核模板](https://cloud.tencent.com/document/api/266/84391)。
创建用户自定义音视频内容审核模板，数量上限：50。
     */
    async CreateContentReviewTemplate(req, cb) {
        return this.request("CreateContentReviewTemplate", req, cb);
    }
    /**
     * 该 API 已经<font color=red>不再维护</font>，请使用新版接口 [音画质重生](https://cloud.tencent.com/document/api/266/102571)。
发起音画质重生
     */
    async RebuildMedia(req, cb) {
        return this.request("RebuildMedia", req, cb);
    }
    /**
     * 创建用户自定义采样截图模板，数量上限：16。
     */
    async CreateSampleSnapshotTemplate(req, cb) {
        return this.request("CreateSampleSnapshotTemplate", req, cb);
    }
    /**
     * 删除用户自定义音视频内容分析模板。

注意：模板 ID 为 10000 以下的为系统预置模板，不允许删除。
     */
    async DeleteAIAnalysisTemplate(req, cb) {
        return this.request("DeleteAIAnalysisTemplate", req, cb);
    }
    /**
     * 查询 DRM 密钥提供商信息。
     */
    async DescribeDrmKeyProviderInfo(req, cb) {
        return this.request("DescribeDrmKeyProviderInfo", req, cb);
    }
    /**
     * 该 API 已经<font color=red>不再维护</font>，新版 [音画质重生](https://cloud.tencent.com/document/product/266/102571) 接口使用预置模板，详情请参见 [音画质重生模板](https://cloud.tencent.com/document/product/266/102586#50604b3f-0286-4a10-a3f7-18218116aff7)。
删除视频重生模板。
     */
    async DeleteRebuildMediaTemplate(req, cb) {
        return this.request("DeleteRebuildMediaTemplate", req, cb);
    }
    /**
     * 直播即时剪辑，是指在直播过程中（即直播尚未结束时），客户可以在过往直播内容中选择一段，实时生成一个新的视频（HLS 格式），开发者可以将其立即分享出去，或者长久保存起来。

腾讯云点播支持两种即时剪辑模式：
- 剪辑固化：将剪辑出来的视频保存成独立的视频，拥有独立 FileId；适用于将精彩片段**长久保存**的场景；
- 剪辑不固化：剪辑得到的视频附属于直播录制文件，没有独立 FileId；适用于将精彩片段**临时分享**的场景。

注意：
- 使用直播即时剪辑功能的前提是：目标直播流开启了[时移回看](https://cloud.tencent.com/document/product/267/32742)功能。
- 直播即时剪辑是基于直播录制生成的 m3u8 文件进行的，故而其最小剪辑精度为一个 ts 切片，无法实现秒级或者更为精确的剪辑精度。
- 由于直播过程中可能存在断流的情况，所以有可能导致剪辑生成的实际视频时长与期望不一致。例如剪辑某个直播流的时间区间为 2018-09-20T10:30:00Z 到 2018-09-20T10:40:00Z ，如果在该时间区间中发生过断流，那么返回的媒资文件的时长将少于 10 分钟，在这种情况下，可以通过输出参数 <a href="#p_segmentset">SegmentSet</a> 感知到。

### 剪辑固化
所谓剪辑固化，是指将剪辑出来的视频是保存成一个独立的视频（拥有独立的 FileId）。其生命周期不受原始直播录制视频影响（即使原始录制视频被删除，剪辑结果也不会受到任何影响）；也可以对其进行转码、微信发布等二次处理。

举例如下：一场完整的足球比赛，直播录制出来的原始视频可能长达 2 个小时，客户出于节省成本的目的可以对这个视频存储 2 个月，但对于直播即时剪辑的「精彩时刻」视频却可以指定存储更长时间，同时可以单独对「精彩时刻」视频进行转码、微信发布等额外的点播操作，这时候可以选择直播即时剪辑并且固化的方案。

剪辑固化的优势在于其生命周期与原始录制视频相互独立，可以独立管理、长久保存。

<font color='red'>注意：</font>如果剪辑时指定进行固化，通过 ModifyEventConfig 接口启用接收剪辑固化事件通知，固化成功后将会收到一个 PersitenceComplete 类型的事件通知。在收到这个事件通知之前，不应该对直播录制视频进行删除、降冷等操作，否则剪辑生成的视频播放可能出现异常。

### 剪辑不固化
所谓剪辑不固化，是指剪辑所得到的结果（m3u8 文件）与直播录制视频共享相同的 ts 分片，新生成的视频不是一个独立完整的视频（没有独立 FileId，只有播放 URL），其有效期与直播录制的完整视频有效期是一致的。一旦直播录制出来的视频被删除，也会导致该片段无法播放。

剪辑不固化，由于其剪辑结果不是一个独立的视频，因而也不会纳入点播媒资视频管理（例如控制台的视频总数不会统计这一片段）中，也无法单独针对这个片段做转码、微信发布等任何视频处理操作。

剪辑不固化的优势在于其剪辑操作十分“轻量化”，不会产生额外的存储开销。但其不足之处在于生命周期与原始录制视频相同，且无法进一步进行转码等视频处理。
     */
    async LiveRealTimeClip(req, cb) {
        return this.request("LiveRealTimeClip", req, cb);
    }
    /**
     * 修改媒体文件的存储类型。
当媒体文件的存储类型为标准存储时，可以修改为以下类型：
<li>低频存储</li>
<li>归档存储</li>
<li>深度归档存储</li>
当媒体文件的当前存储类型为低频存储时，可以修改为以下类型：
<li>标准存储</li>
<li>归档存储</li>
<li>深度归档存储</li>
当媒体文件的当前存储类型为归档存储时，可以修改为以下类型：
<li>标准存储</li>
当媒体文件的当前存储类型为深度归档存储时，可以修改为以下类型：
<li>标准存储</li>
     */
    async ModifyMediaStorageClass(req, cb) {
        return this.request("ModifyMediaStorageClass", req, cb);
    }
    /**
     * 该接口用于将一个网络上的视频拉取到云点播平台。
     */
    async PullUpload(req, cb) {
        return this.request("PullUpload", req, cb);
    }
    /**
     * 修改用户自定义采样截图模板。
     */
    async ModifySampleSnapshotTemplate(req, cb) {
        return this.request("ModifySampleSnapshotTemplate", req, cb);
    }
    /**
     * 该接口用于修改点播域名的加速区域。
1、域名部署状态为 Online 状态时才允许修改加速区域。
     */
    async ModifyVodDomainAccelerateConfig(req, cb) {
        return this.request("ModifyVodDomainAccelerateConfig", req, cb);
    }
    /**
     * 该 API 已经<font color='red'>不再维护</font>，新版播放器签名不再使用播放器配置模板，详细请参考 [播放器签名](https://cloud.tencent.com/document/product/266/45554)。
删除播放器配置。
*注：系统预置播放器配置不允许删除。*
     */
    async DeleteSuperPlayerConfig(req, cb) {
        return this.request("DeleteSuperPlayerConfig", req, cb);
    }
    /**
     * 对点播中的音视频媒体发起审核任务，智能检测视频画面、画面中的文字、语音中的文字、声音出现的违规内容。

如使用事件通知，事件通知的类型为 [音视频审核完成](https://cloud.tencent.com/document/product/266/81258)。
     */
    async ReviewAudioVideo(req, cb) {
        return this.request("ReviewAudioVideo", req, cb);
    }
    /**
     * 根据任务流模板名字，获取任务流模板详情列表。
     */
    async DescribeProcedureTemplates(req, cb) {
        return this.request("DescribeProcedureTemplates", req, cb);
    }
    /**
     * 该接口返回查询时间范围内客户端上传加速统计信息。
   1. 可以查询最近365天内的客户端上传加速统计数据。
   2. 查询时间跨度不超过90天。
   3. 查询时间跨度超过1天的，返回以天为粒度的数据，否则，返回以5分钟为粒度的数据。
     */
    async DescribeClientUploadAccelerationUsageData(req, cb) {
        return this.request("DescribeClientUploadAccelerationUsageData", req, cb);
    }
    /**
     * 上传 HLS 视频时，解析索引文件内容，返回待上传的分片文件列表。分片文件路径必须是当前目录或子目录的相对路径，不能是 URL，不能是绝对路径。
     */
    async ParseStreamingManifest(req, cb) {
        return this.request("ParseStreamingManifest", req, cb);
    }
    /**
     * 该 API 已经<font color='red'>不再维护</font>，智能识别任务请使用图片智能识别 [ReviewImage](https://cloud.tencent.com/document/api/266/73217) 接口。

对点播中的图片文件发起处理任务，功能包括：

1. 智能识别（令人反感的信息、不安全的信息、不适宜的信息）;

><li>图片文件大小支持：文件 < 5M；</li>
><li>图片文件分辨率支持：建议分辨率大于256x256，否则可能会影响识别效果；</li>
><li>图片文件支持格式：PNG、JPG、JPEG、BMP、GIF、WEBP格式。</li>
     */
    async ProcessImage(req, cb) {
        return this.request("ProcessImage", req, cb);
    }
    /**
     * 对点播中的音视频媒体发起音画质重生任务。
     */
    async EnhanceMediaQuality(req, cb) {
        return this.request("EnhanceMediaQuality", req, cb);
    }
    /**
     * 创建用户自定义的任务流模板，模板上限：50。
     */
    async CreateProcedureTemplate(req, cb) {
        return this.request("CreateProcedureTemplate", req, cb);
    }
    /**
     * 1. 预热指定的 URL 列表。
2. URL 的域名必须已在云点播中注册。
3. 单次请求最多指定20个 URL。
4. 默认预热配额为每天10000个 URL。
     */
    async PushUrlCache(req, cb) {
        return this.request("PushUrlCache", req, cb);
    }
    /**
     * * 删除媒体及其对应的视频处理文件（原始文件、如转码视频、雪碧图、截图、微信发布视频等）；
* 可单独删除指定 ID 的视频文件下的原文件、转码视频、微信发布视频等；
* 注意：原文件删除后，无法发起转码、微信发布等任何视频处理操作。
     */
    async DeleteMedia(req, cb) {
        return this.request("DeleteMedia", req, cb);
    }
    /**
     * 操作轮播当前播放列表。支持的操作有：<li> Insert：向当前播列表插入播放节目。</li><li> Delete：删除播列表中的播放节目。</li>
     */
    async HandleCurrentPlaylist(req, cb) {
        return this.request("HandleCurrentPlaylist", req, cb);
    }
    /**
     * 该 API 已经<font color='red'>不再维护</font>，新版播放器签名不再使用播放器配置模板，详细请参考 [播放器签名](https://cloud.tencent.com/document/product/266/45554)。
创建播放器配置，数量上限：100。
     */
    async CreateSuperPlayerConfig(req, cb) {
        return this.request("CreateSuperPlayerConfig", req, cb);
    }
    /**
     * 查询点播域名下日志投递的目标主题。
     */
    async DescribeCLSPushTargets(req, cb) {
        return this.request("DescribeCLSPushTargets", req, cb);
    }
    /**
     * 该 API 已经<font color=red>不再维护</font>，请使用新版接口 [音画质重生](https://cloud.tencent.com/document/api/266/102571)。
使用模板发起音画质重生。
     */
    async EnhanceMediaByTemplate(req, cb) {
        return this.request("EnhanceMediaByTemplate", req, cb);
    }
    /**
     * 该接口用于根据素材 ID，修改素材样本信息，包括名称、描述的修改，以及五官、标签的添加、删除、重置操作。五官删除操作需保证至少剩余 1 张图片，否则，请使用重置操作。
     */
    async ModifyPersonSample(req, cb) {
        return this.request("ModifyPersonSample", req, cb);
    }
    /**
     * 该 API 已经<font color=red>不再维护</font>，新版 [音画质重生](https://cloud.tencent.com/document/product/266/102571) 接口使用预置模板，详情请参见 [音画质重生模板](https://cloud.tencent.com/document/product/266/102586#50604b3f-0286-4a10-a3f7-18218116aff7)。
创建音画质重生模板。
     */
    async CreateEnhanceMediaTemplate(req, cb) {
        return this.request("CreateEnhanceMediaTemplate", req, cb);
    }
    /**
     * 该 API 已经<font color=red>不再维护</font>，新版 [音画质重生](https://cloud.tencent.com/document/product/266/102571) 接口使用预置模板，详情请参见 [音画质重生模板](https://cloud.tencent.com/document/product/266/102586#50604b3f-0286-4a10-a3f7-18218116aff7)。
创建视频重生模板。
     */
    async CreateRebuildMediaTemplate(req, cb) {
        return this.request("CreateRebuildMediaTemplate", req, cb);
    }
    /**
     * 查询轮播当前播放列表。
     */
    async DescribeCurrentPlaylist(req, cb) {
        return this.request("DescribeCurrentPlaylist", req, cb);
    }
    /**
     * 该接口用于查询指定日期范围内每天的播放统计数据。
* 可以查询最近一年的播放统计数据。
* 结束日期和起始日期的时间跨度最大为90天。
* 播放统计仅针对 VOD 域名（即 EdgeOne 域名的分发不计入播放统计）。
     */
    async DescribeDailyMediaPlayStat(req, cb) {
        return this.request("DescribeDailyMediaPlayStat", req, cb);
    }
    /**
     * 删除用户自定义转动图模板。
     */
    async DeleteAnimatedGraphicsTemplate(req, cb) {
        return this.request("DeleteAnimatedGraphicsTemplate", req, cb);
    }
    /**
     * 查询 VOD 创建的 CLS 日志主题列表。
     */
    async DescribeCLSTopics(req, cb) {
        return this.request("DescribeCLSTopics", req, cb);
    }
    /**
     * 创建 VOD 下新的 CLS 日志主题
     */
    async CreateCLSTopic(req, cb) {
        return this.request("CreateCLSTopic", req, cb);
    }
    /**
     * 该 API 已经<font color=red>不再维护</font>，新版审核模板支持音视频审核和图片审核，详细请参考 [删除审核模板](https://cloud.tencent.com/document/api/266/84390)。
删除用户自定义音视频内容审核模板。
     */
    async DeleteContentReviewTemplate(req, cb) {
        return this.request("DeleteContentReviewTemplate", req, cb);
    }
    /**
     * 创建用户自定义音视频内容分析模板，数量上限：50。暂时不支持 HLS 格式。
     */
    async CreateAIAnalysisTemplate(req, cb) {
        return this.request("CreateAIAnalysisTemplate", req, cb);
    }
    /**
     * 该接口用于查询每日播放Top100 的媒体文件的播放统计数据。
* 可以查询最近一年的播放统计数据。
* 可以按播放次数或者播放流量查询。
* 播放次数统计说明：
    1. HLS 文件：访问 M3U8 文件时统计播放次数；访问 TS 文件不统计播放次数。
    2. 其它文件（如 MP4 文件）：播放请求带有 range 参数且 range 的 start 参数不等于0时不统计播放次数，其它情况统计播放次数。
* 播放统计仅针对 VOD 域名（即 EdgeOne 域名的分发不计入播放统计）。
     */
    async DescribeDailyMostPlayedStat(req, cb) {
        return this.request("DescribeDailyMostPlayedStat", req, cb);
    }
    /**
     * 该 API 已经<font color='red'>不再维护</font>。如果有盗录溯源需求，请参考 [幽灵水印](https://cloud.tencent.com/document/product/266/94228)。
     */
    async ExtractCopyRightWatermark(req, cb) {
        return this.request("ExtractCopyRightWatermark", req, cb);
    }
    /**
     * 该接口用于：
  1. 查询点播可开通的所有存储园区列表。
  2. 查询已经开通的园区列表。
  3. 查询默认使用的存储园区。
     */
    async DescribeStorageRegions(req, cb) {
        return this.request("DescribeStorageRegions", req, cb);
    }
    /**
     * 1. 刷新指定的 URL 列表。
2. URL 的域名必须已在云点播中注册。
3. 单次请求最多指定20个 URL。
4. 默认刷新配额为每天100000个 URL。
     */
    async RefreshUrlCache(req, cb) {
        return this.request("RefreshUrlCache", req, cb);
    }
    /**
     * * 该接口用于业务服务器获取 [可靠回调](https://cloud.tencent.com/document/product/266/33779#.E5.8F.AF.E9.9D.A0.E5.9B.9E.E8.B0.83) 事件通知的状态。
     */
    async DescribeEventsState(req, cb) {
        return this.request("DescribeEventsState", req, cb);
    }
    /**
     * 修改音画质检测模板。
     */
    async ModifyQualityInspectTemplate(req, cb) {
        return this.request("ModifyQualityInspectTemplate", req, cb);
    }
    /**
     * 该接口用于验证域名解析值。
     */
    async VerifyDomainRecord(req, cb) {
        return this.request("VerifyDomainRecord", req, cb);
    }
    /**
     * 该接口返回查询时间范围内每天使用的图片审核用量信息。
   1. 可以查询最近365天内的图片审核统计数据。
   2. 查询时间跨度不超过90天。
   3. 查询时间跨度超过1天的，返回以天为粒度的数据，否则，返回以5分钟为粒度的数据。
     */
    async DescribeImageReviewUsageData(req, cb) {
        return this.request("DescribeImageReviewUsageData", req, cb);
    }
    /**
     * 该接口用于修改域名配置，可以修改域名的防盗链配置。
1、域名部署状态为 Online 状态时才允许修改域名的配置。
     */
    async ModifyVodDomainConfig(req, cb) {
        return this.request("ModifyVodDomainConfig", req, cb);
    }
    /**
     * * 开发者调用拉取事件通知，获取到事件后，必须调用该接口来确认消息已经收到；
* 开发者获取到事件句柄后，等待确认的有效时间为 30 秒，超出 30 秒会报参数错误（4000）；
* 更多参考事件通知的[可靠回调](https://cloud.tencent.com/document/product/266/33779#.E5.8F.AF.E9.9D.A0.E5.9B.9E.E8.B0.83)。
     */
    async ConfirmEvents(req, cb) {
        return this.request("ConfirmEvents", req, cb);
    }
    /**
     * 该接口用于获取轮播播单列表。
     */
    async DescribeRoundPlays(req, cb) {
        return this.request("DescribeRoundPlays", req, cb);
    }
    /**
     * 该 API 已经<font color='red'>不再维护</font>，请使用 MPS 产品的 [ProcessMedia](https://cloud.tencent.com/document/product/862/37578) 接口，在入参 InputInfo.UrlInputInfo.Url 中指定视频 URL。
     */
    async ProcessMediaByUrl(req, cb) {
        return this.request("ProcessMediaByUrl", req, cb);
    }
    /**
     * 发起复杂自适应码流处理任务，功能包括：
1. 按指定的自适应码流模板输出 HLS、DASH 自适应码流；
2. 自适应码流的内容保护方案可选择无加密、Widevine 或 FairPlay；
3. 支持添加片头片尾；
4. 输出的自适应码流可包含多语言音频流，每种语言分别来自不同的媒体文件；
5. 输出的自适应码流可包含多语言字幕流。

注意事项：
1. 当使用片头时，片头媒体中的视频流需要和音频流对齐，否则将导致输出的内容音画不同步；
2. 如果输出的自适应码流需要包含主媒体的音频，那么需要在 AudioSet 参数中指定主媒体的 FileId；
3. 使用字幕时，需要先将字幕添加到主媒体，可通过 ModifyMediaInfo 接口或控制台的音视频详情页进行添加；
4. 暂不支持极速高清、水印。
     */
    async CreateComplexAdaptiveDynamicStreamingTask(req, cb) {
        return this.request("CreateComplexAdaptiveDynamicStreamingTask", req, cb);
    }
    /**
     * 修改用户自定义转码模板信息。
     */
    async ModifyTranscodeTemplate(req, cb) {
        return this.request("ModifyTranscodeTemplate", req, cb);
    }
    /**
     * 该 API 已经<font color=red>不再维护</font>，新版审核模板支持音视频审核和图片审核，详细请参考 [获取审核模板列表](https://cloud.tencent.com/document/api/266/84389)。
根据音视频内容审核模板唯一标识，获取音视频内容审核模板详情列表。返回结果包含符合条件的所有用户自定义模板及[系统预置内容审核模板](https://cloud.tencent.com/document/product/266/33476#.E9.A2.84.E7.BD.AE.E8.A7.86.E9.A2.91.E5.86.85.E5.AE.B9.E5.AE.A1.E6.A0.B8.E6.A8.A1.E6.9D.BF)。
     */
    async DescribeContentReviewTemplates(req, cb) {
        return this.request("DescribeContentReviewTemplates", req, cb);
    }
    /**
     * 修改片头片尾模板。
     */
    async ModifyHeadTailTemplate(req, cb) {
        return this.request("ModifyHeadTailTemplate", req, cb);
    }
    /**
     * 删除用户自定义图片处理模板。
     */
    async DeleteImageProcessingTemplate(req, cb) {
        return this.request("DeleteImageProcessingTemplate", req, cb);
    }
    /**
     * 对点播中的音视频媒体发起处理任务，功能包括：
1. 视频转码（带水印）；
2. 视频转动图；
3. 对视频按指定时间点截图；
4. 对视频采样截图；
5. 对视频截取雪碧图；
6. 对视频截取一张图做封面；
7. 对视频转自适应码流（并加密）；
8. 内容审核（令人反感的信息、不安全的信息、不适宜的信息），<font color=red>不建议</font> 使用该接口发起，推荐使用 [音视频审核(ReviewAudioVideo)](https://cloud.tencent.com/document/api/266/80283) 或 [图片审核(ReviewImage)](https://cloud.tencent.com/document/api/266/73217)；
9. 内容分析（标签、分类、封面、按帧标签），暂时不支持 HLS 格式；
10. 内容识别（视频片头片尾、人脸、文本全文、文本关键词、语音全文、语音关键词、物体）。

如使用事件通知，事件通知的类型为 [任务流状态变更](https://cloud.tencent.com/document/product/266/9636)。
     */
    async ProcessMedia(req, cb) {
        return this.request("ProcessMedia", req, cb);
    }
    /**
     * 创建片头片尾模板。
- 最大支持模板数量为 100 个。
     */
    async CreateHeadTailTemplate(req, cb) {
        return this.request("CreateHeadTailTemplate", req, cb);
    }
    /**
     * 修改用户自定义水印模板，水印类型不允许修改。
     */
    async ModifyWatermarkTemplate(req, cb) {
        return this.request("ModifyWatermarkTemplate", req, cb);
    }
    /**
     * 该接口返回查询时间范围内使用的点播存储空间，单位：字节。
    1. 可以查询最近365天内的存储空间数据；
    2. 查询时间跨度不超过90天；
    3. 分钟粒度查询跨度不超过7天；
     */
    async DescribeStorageDetails(req, cb) {
        return this.request("DescribeStorageDetails", req, cb);
    }
    /**
     * 该接口用于批量删除关键词样本。
     */
    async DeleteWordSamples(req, cb) {
        return this.request("DeleteWordSamples", req, cb);
    }
    /**
     * 对云点播的 HLS 视频实现快速拼接和快速剪辑，生成新的 HLS 格式的媒体。

快速拼接或剪辑生成的视频，将产生新的 FileId 并进行固化，固化成功后新视频的文件独立于原始输入视频存在，不受原始视频删除等影响。

<font color='red'>注意：</font>通过 ModifyEventConfig 接口启用接收剪辑固化事件通知，固化成功后将会收到一个 PersitenceComplete 类型的事件通知。在收到这个事件通知之前，不应该对原始输入的视频进行删除、降冷等操作，否则拼接剪辑生成的视频播放可能出现异常。
     */
    async FastEditMedia(req, cb) {
        return this.request("FastEditMedia", req, cb);
    }
    /**
     * 该接口用于将加速域名添加到点播，一个用户最多添加20个加速域名。
1.域名添加成功后点播会进行域名的部署，域名由部署状态变为在线状态大概需要2分钟的时间。
     */
    async CreateVodDomain(req, cb) {
        return this.request("CreateVodDomain", req, cb);
    }
    /**
     * 创建用户自定义雪碧图模板，数量上限：16。
     */
    async CreateImageSpriteTemplate(req, cb) {
        return this.request("CreateImageSpriteTemplate", req, cb);
    }
    /**
     * 该接口用于查询素材样本信息，支持根据素材 ID、名称、标签，分页查询。
     */
    async DescribePersonSamples(req, cb) {
        return this.request("DescribePersonSamples", req, cb);
    }
    /**
     * 删除用户自定义音视频内容识别模板。
     */
    async DeleteAIRecognitionTemplate(req, cb) {
        return this.request("DeleteAIRecognitionTemplate", req, cb);
    }
    /**
     * 该接口用于创建点播应用。
     */
    async CreateSubAppId(req, cb) {
        return this.request("CreateSubAppId", req, cb);
    }
    /**
     * 查询转动图模板列表，支持根据条件，分页查询。
     */
    async DescribeAnimatedGraphicsTemplates(req, cb) {
        return this.request("DescribeAnimatedGraphicsTemplates", req, cb);
    }
    /**
     * * 对媒体禁播后，除了点播控制台预览，其他场景访问视频各种资源的 URL（原始文件、转码输出文件、截图等）均会返回 403。
  禁播/解禁操作全网生效时间约 5~10 分钟。
* 注意：禁播媒体仅能操作标准存储和低频存储的媒体。低频存储媒体，必须存储至少 30 天，提前删除或变更存储类型，仍旧按照 30 天计费；如果禁播低频存储媒体，该媒体低频存储的时长不足 30 天，会产生提前删除计费；同时，禁播后该媒体的低频存储时长会从当前时间重新开始计算，如果不满 30 天继续对该媒体进行删除或变更存储类型，也将产生提前删除计费。例：媒体 001 已经低频存储了 10 天，此时对 001 进行禁播，低频存储的计费仍旧按 30 天计算（提前删除计费时长为 30 - 10 = 20 天）；禁播后 001 的低频存储时长重新开始计算，如果禁播后第 5 天删除了 001，低频存储计费也会按 30 天计算（提前删除计费时长为 30 - 5 = 25 天）；001 实际的低频存储时长为 10 + 5 = 15 天，低频存储计费时长为 10 + 20(提前删除计费)+ 5 + 25(提前删除计费) = 60 天。
     */
    async ForbidMediaDistribution(req, cb) {
        return this.request("ForbidMediaDistribution", req, cb);
    }
    /**
     * 对已发起的任务进行管理。
     */
    async ManageTask(req, cb) {
        return this.request("ManageTask", req, cb);
    }
    /**
     * 修改用户自定义音视频内容分析模板。

注意：模板 ID 10000 以下的为系统预置模板，不允许修改。
     */
    async ModifyAIAnalysisTemplate(req, cb) {
        return this.request("ModifyAIAnalysisTemplate", req, cb);
    }
    /**
     * 修改用户自定义指定时间点截图模板。
     */
    async ModifySnapshotByTimeOffsetTemplate(req, cb) {
        return this.request("ModifySnapshotByTimeOffsetTemplate", req, cb);
    }
    /**
     * 该 API 已经<font color='red'>不再维护</font>，新版播放器签名不再使用播放器配置模板，详细请参考 [播放器签名](https://cloud.tencent.com/document/product/266/45554)。
修改播放器配置。
     */
    async ModifySuperPlayerConfig(req, cb) {
        return this.request("ModifySuperPlayerConfig", req, cb);
    }
    /**
     * * 用于对媒体进行分类管理；
* 该接口不影响既有媒体的分类，如需修改媒体分类，请调用[修改媒体文件属性](/document/product/266/31762)接口。
* 分类层次不可超过 4 层。
* 每个分类的子类数量不可超过 500 个。
     */
    async CreateClass(req, cb) {
        return this.request("CreateClass", req, cb);
    }
    /**
     * 该接口用于批量创建关键词样本，样本用于通过OCR、ASR技术，进行不适宜内容识别、内容识别等视频处理。
     */
    async CreateWordSamples(req, cb) {
        return this.request("CreateWordSamples", req, cb);
    }
    /**
     * 腾讯云点播为客户提供了媒体上传、媒体管理、媒体处理等等服务，在这些服务执行过程或执行结束时，腾讯云点播也提供各种对应的事件通知，方便开发者感知服务处理状态，并做下一步的业务操作。

开发者可以通过本接口来查询当前配置事件通知的接收方式、接收地址以及哪些事件开启了接收回调通知。

默认接口请求频率限制：100次/秒。
     */
    async DescribeEventConfig(req, cb) {
        return this.request("DescribeEventConfig", req, cb);
    }
    /**
     * 该接口用于修改应用信息，但不允许修改默认应用信息。
     */
    async ModifySubAppIdInfo(req, cb) {
        return this.request("ModifySubAppIdInfo", req, cb);
    }
    /**
     * 该接口用于修改轮播播单。
修改后只有新的播放请求会生效，已经在播放中的用户在七天之内还可以播放修改前的播单。
     */
    async ModifyRoundPlay(req, cb) {
        return this.request("ModifyRoundPlay", req, cb);
    }
    /**
     * 查询转自适应码流模板，支持根据条件，分页查询。
     */
    async DescribeAdaptiveDynamicStreamingTemplates(req, cb) {
        return this.request("DescribeAdaptiveDynamicStreamingTemplates", req, cb);
    }
    /**
     * 查询采样截图模板，支持根据条件，分页查询。
     */
    async DescribeSampleSnapshotTemplates(req, cb) {
        return this.request("DescribeSampleSnapshotTemplates", req, cb);
    }
    /**
     * 该接口用于修改关键词的应用场景、标签，关键词本身不可修改，如需修改，可删除重建。
     */
    async ModifyWordSample(req, cb) {
        return this.request("ModifyWordSample", req, cb);
    }
    /**
     * 该 API 已经<font color=red>不再维护</font>，新版 [音画质重生](https://cloud.tencent.com/document/product/266/102571) 接口使用预置模板，详情请参见 [音画质重生模板](https://cloud.tencent.com/document/product/266/102586#50604b3f-0286-4a10-a3f7-18218116aff7)。
修改音画质重生模板。
     */
    async ModifyEnhanceMediaTemplate(req, cb) {
        return this.request("ModifyEnhanceMediaTemplate", req, cb);
    }
    /**
     * 查询雪碧图模板，支持根据条件，分页查询。
     */
    async DescribeImageSpriteTemplates(req, cb) {
        return this.request("DescribeImageSpriteTemplates", req, cb);
    }
    /**
     * * 获得用户的所有分类信息。
     */
    async DescribeAllClass(req, cb) {
        return this.request("DescribeAllClass", req, cb);
    }
    /**
     * 查询用户自定义水印模板，支持根据条件，分页查询。
     */
    async DescribeWatermarkTemplates(req, cb) {
        return this.request("DescribeWatermarkTemplates", req, cb);
    }
    /**
     * 创建用户自定义水印模板，数量上限：1000。
     */
    async CreateWatermarkTemplate(req, cb) {
        return this.request("CreateWatermarkTemplate", req, cb);
    }
    /**
     * 设置 DRM 密钥提供商信息。
     */
    async SetDrmKeyProviderInfo(req, cb) {
        return this.request("SetDrmKeyProviderInfo", req, cb);
    }
    /**
     * 获取即时转码模板列表。
     */
    async DescribeJustInTimeTranscodeTemplates(req, cb) {
        return this.request("DescribeJustInTimeTranscodeTemplates", req, cb);
    }
    /**
     * 创建用户自定义审核模板，数量上限：50。
>模板仅适用于 [音视频审核(ReviewAudioVideo)](https://cloud.tencent.com/document/api/266/80283) 和 [图片审核(ReviewImage)](https://cloud.tencent.com/document/api/266/73217) 接口。
     */
    async CreateReviewTemplate(req, cb) {
        return this.request("CreateReviewTemplate", req, cb);
    }
    /**
     * 根据音视频内容识别模板唯一标识，获取音视频内容识别模板详情列表。返回结果包含符合条件的所有用户自定义音视频内容识别模板及[系统预置音视频内容识别模板](https://cloud.tencent.com/document/product/266/33476#.E9.A2.84.E7.BD.AE.E8.A7.86.E9.A2.91.E5.86.85.E5.AE.B9.E8.AF.86.E5.88.AB.E6.A8.A1.E6.9D.BF)。
     */
    async DescribeAIRecognitionTemplates(req, cb) {
        return this.request("DescribeAIRecognitionTemplates", req, cb);
    }
    /**
     * 删除音画质检测模板。
     */
    async DeleteQualityInspectTemplate(req, cb) {
        return this.request("DeleteQualityInspectTemplate", req, cb);
    }
    /**
     * 获取音画质检测模板列表。
     */
    async DescribeQualityInspectTemplates(req, cb) {
        return this.request("DescribeQualityInspectTemplates", req, cb);
    }
    /**
     * 创建即时转码模板。
     */
    async CreateJustInTimeTranscodeTemplate(req, cb) {
        return this.request("CreateJustInTimeTranscodeTemplate", req, cb);
    }
    /**
     * 该 API 已经<font color='red'>不再维护</font>，新版播放器签名不再使用播放器配置模板，详细请参考 [播放器签名](https://cloud.tencent.com/document/product/266/45554)。
查询播放器配置，支持根据条件，分页查询。
     */
    async DescribeSuperPlayerConfigs(req, cb) {
        return this.request("DescribeSuperPlayerConfigs", req, cb);
    }
    /**
     * 该接口用于获取当前账号的应用列表。
     */
    async DescribeSubAppIds(req, cb) {
        return this.request("DescribeSubAppIds", req, cb);
    }
    /**
     * 获取片头片尾模板列表。
     */
    async DescribeHeadTailTemplates(req, cb) {
        return this.request("DescribeHeadTailTemplates", req, cb);
    }
    /**
     * 该接口用于查询默认分发配置。
* 分发域名和分发协议，即媒体文件分发 URL 中的域名和协议。媒体文件按默认分发配置进行分发。
* 播放密钥，用于计算播放器签名。
     */
    async DescribeDefaultDistributionConfig(req, cb) {
        return this.request("DescribeDefaultDistributionConfig", req, cb);
    }
    /**
     * 获取审核模板列表。
>模板仅适用于 [音视频审核(ReviewAudioVideo)](https://cloud.tencent.com/document/api/266/80283) 和 [图片审核(ReviewImage)](https://cloud.tencent.com/document/api/266/73217) 接口。
     */
    async DescribeReviewTemplates(req, cb) {
        return this.request("DescribeReviewTemplates", req, cb);
    }
    /**
     * 该接口用于确认媒体文件（和封面文件）上传到腾讯云点播的结果，并存储媒体信息，返回文件的播放地址和文件 ID。
     */
    async CommitUpload(req, cb) {
        return this.request("CommitUpload", req, cb);
    }
    /**
     * 修改用户自定义音视频内容识别模板。
     */
    async ModifyAIRecognitionTemplate(req, cb) {
        return this.request("ModifyAIRecognitionTemplate", req, cb);
    }
    /**
     * 修改转自适应码流模板
     */
    async ModifyAdaptiveDynamicStreamingTemplate(req, cb) {
        return this.request("ModifyAdaptiveDynamicStreamingTemplate", req, cb);
    }
    /**
     * 搜索媒体信息，支持多种条件筛选，以及支持对返回结果排序、过滤等功能，具体包括：
- 指定文件 ID 集合 FileIds ，返回匹配集合中任意 ID 的媒体。
- 根据多个媒体文件名 Names 或描述信息 Descriptions 进行模糊搜索。
- 根据多个文件名前缀 NamePrefixes 进行搜索。
- 指定分类集合 ClassIds（见输入参数），返回满足集合中任意分类的媒体。例如：媒体分类有电影、电视剧、综艺等，其中电影分类下又有子分类历史片、动作片、言情片。如果 ClassIds 指定了电影、电视剧，那么电影和电视剧下的所有子分类都会返回；而如果 ClassIds 指定的是历史片、动作片，那么只有这2个子分类下的媒体才会返回。
- 指定标签集合 Tags（见输入参数），返回满足集合中任意标签的媒体。例如：媒体标签有二次元、宫斗、鬼畜，如果 Tags 指定了二次元、鬼畜2个标签，那么只要符合这2个标签中任意一个的媒体都会被检索出来。
- 指定文件类型集合 Categories（见输入参数），返回满足集合中任意类型的媒体。例如：文件类型有 Video（视频）、 Audio （音频）、 Image （图片）。如果Categories指定了 Video 和 Audio 2个文件类型，那么符合这些类型的媒体都会被检索出来。
- 指定来源集合 SourceTypes（见输入参数），返回满足集合中任意来源的媒体。例如：媒体来源有 Record (直播录制)、Upload （上传）等。如果 SourceTypes 指定了 Record 和 Upload ，那么符合这些来源的媒体都会被检索出来。
- 指定文件封装格式集合 MediaTypes（见输入参数），返回满足集合中任意封装格式的媒体。例如：封装格式有 MP4、AVI、MP3 等。如果 MediaTypes 指定了 MP4 和 MP3，那么符合这些封装格式的媒体都会被检索出来。
- 指定文件状态集合 Status（见输入参数），返回满足集合中任意状态的媒体。例如：文件状态有 Normal（正常）、SystemForbidden（平台封禁）、Forbidden（主动封禁）。如果 Status 指定了 Normal 和 Forbidden 2种文件状态，那么符合这些状态的媒体都会被检索出来。
- 指定文件审核结果集合 ReviewResults（见输入参数），返回满足集合中任意状态的媒体。例如：文件审核结果有 pass（通过）、block（违规）等。如果 ReviewResults 指定了 pass 和 block 2种审核结果，那么符合这些审核结果的媒体都会被检索出来。
- 指定直播推流码集合 StreamIds（见输入参数）筛选直播录制的媒体。
- 指定媒体的创建时间范围筛选媒体。
- 指定 TRTC 应用 ID 集合筛选媒体。
- 指定 TRTC 房间 ID 集合筛选媒体。

- 以上参数之间可以任意组合进行检索。例如：筛选创建时间在2018年12月1日12:00:00到2018年12月8日12:00:00之间、分类为电影或电视剧、带有宫斗和悬疑标签的媒体。注意，任何支持数组输入的参数，其元素之间的搜索逻辑为‘或’。所有参数之间的逻辑关系为‘与’。

- 允许通过 Filters 控制返回的媒体信息种类（默认返回所有信息）。可选输入包括：
    1. 基础信息（basicInfo）：包括媒体名称、分类、播放地址、封面图片等。
    2. 元信息（metaData）：包括大小、时长、视频流信息、音频流信息等。
    3. 转码结果信息（transcodeInfo）：包括该媒体转码生成的各种规格的媒体地址、视频流参数、音频流参数等。
    4. 转动图结果信息（animatedGraphicsInfo）：对视频转动图（如 gif）后的动图信息。
    5. 采样截图信息（sampleSnapshotInfo）：对视频采样截图后的截图信息。
    6. 雪碧图信息（imageSpriteInfo）：对视频截取雪碧图后的雪碧图信息。
    7. 指定时间点截图信息（snapshotByTimeOffsetInfo）：对视频依照指定时间点截图后，的截图信息。
    8. 视频打点信息（keyFrameDescInfo）：对视频设置的打点信息。
    9. 转自适应码流信息（adaptiveDynamicStreamingInfo）：包括规格、加密类型、打包格式等相关信息。

- 允许对结果根据创建时间进行排序并分页返回，通过 Offset 和 Limit （见输入参数）来控制分页。

<div id="maxResultsDesc">接口返回结果数限制：</div>
- <b><a href="#p_offset">Offset</a> 和 <a href="#p_limit">Limit</a> 两个参数影响单次分页查询结果数。特别注意：当这2个值都缺省时，本接口最多只返回10条查询结果。</b>
- <b>最大支持返回5000条搜索结果，超出部分不再支持查询。如果搜索结果量太大，建议使用更精细的筛选条件来减少搜索结果。</b>

<br>不推荐使用的条件筛选：
- （不推荐：应使用 Names、NamePrefixes 或 Descriptions 替代）指定单个文本 Text 对媒体文件名或描述信息进行模糊搜索。
- （不推荐：应使用 SourceTypes 替代）指定单个媒体文件来源 SourceType 进行搜索。
- （不推荐：应使用 StreamIds 替代）指定单个推流直播码 StreamId 进行搜索。
- （不推荐：应使用 CreateTime 替代）指定单个起始创建时间 StartTime 进行搜索。
- （不推荐：应使用 CreateTime 替代）指定单个结尾创建时间 EndTime 进行搜索。
     */
    async SearchMedia(req, cb) {
        return this.request("SearchMedia", req, cb);
    }
    /**
     * 删除用户自定义水印模板。
     */
    async DeleteWatermarkTemplate(req, cb) {
        return this.request("DeleteWatermarkTemplate", req, cb);
    }
    /**
     * 删除即时转码模板。
     */
    async DeleteJustInTimeTranscodeTemplate(req, cb) {
        return this.request("DeleteJustInTimeTranscodeTemplate", req, cb);
    }
    /**
     * 该接口用于根据人物 ID，删除素材样本。
     */
    async DeletePersonSample(req, cb) {
        return this.request("DeletePersonSample", req, cb);
    }
    /**
     * 该 API 已经<font color=red>不再维护</font>，新版 [音画质重生](https://cloud.tencent.com/document/product/266/102571) 接口使用预置模板，详情请参见 [音画质重生模板](https://cloud.tencent.com/document/product/266/102586#50604b3f-0286-4a10-a3f7-18218116aff7)。
获取音画质重生模板列表。
     */
    async DescribeEnhanceMediaTemplates(req, cb) {
        return this.request("DescribeEnhanceMediaTemplates", req, cb);
    }
    /**
     * 创建用户自定义转动图模板，数量上限：16。
     */
    async CreateAnimatedGraphicsTemplate(req, cb) {
        return this.request("CreateAnimatedGraphicsTemplate", req, cb);
    }
    /**
     * 修改用户自定义转动图模板。
     */
    async ModifyAnimatedGraphicsTemplate(req, cb) {
        return this.request("ModifyAnimatedGraphicsTemplate", req, cb);
    }
    /**
     * 关联媒资字幕，将指定的字幕关联到转自适应码流模板号对应的媒体输出文件中（或解除关联）。
     */
    async AttachMediaSubtitles(req, cb) {
        return this.request("AttachMediaSubtitles", req, cb);
    }
    /**
     * 腾讯云点播为客户提供了媒体上传、媒体管理、媒体处理等等服务，在这些服务执行过程或执行结束时，腾讯云点播也提供各种对应的事件通知，方便开发者感知服务处理状态，并做下一步的业务操作。

开发者可以通过调用本接口来实现：
- 设置接收回调通知的类型，目前有[ HTTP 回调通知](https://cloud.tencent.com/document/product/266/33779) 和 [基于消息队列的可靠通知](https://cloud.tencent.com/document/product/266/33779) 两种类型。
- 对于[ HTTP 回调通知](https://cloud.tencent.com/document/product/266/33779)，可设置 3.0 格式回调的地址。3.0 格式回调的说明参见 [历史格式回调](https://cloud.tencent.com/document/product/266/33796)。
- 对具体事件服务的通知事件选择设置接收或者忽略。
     */
    async ModifyEventConfig(req, cb) {
        return this.request("ModifyEventConfig", req, cb);
    }
    /**
     * 修改媒体文件的属性，包括分类、名称、描述、标签、过期时间、打点信息、视频封面、字幕信息等。
     */
    async ModifyMediaInfo(req, cb) {
        return this.request("ModifyMediaInfo", req, cb);
    }
    /**
     * 对点播中的图片文件发起审核（令人反感的信息、不安全的信息、不适宜的信息）任务。

><li>图片文件大小支持：文件 < 5M；</li>
><li>图片文件分辨率支持：建议分辨率大于256x256，否则可能会影响审核效果；</li>
><li>图片文件支持格式：PNG、JPG、JPEG、BMP、GIF、WEBP格式。</li>
     */
    async ReviewImage(req, cb) {
        return this.request("ReviewImage", req, cb);
    }
    /**
     * 删除用户自定义采样截图模板。
     */
    async DeleteSampleSnapshotTemplate(req, cb) {
        return this.request("DeleteSampleSnapshotTemplate", req, cb);
    }
    /**
     * 将点播视频发布到微信小程序，供微信小程序播放器播放。
本接口支持发布原始视频和转码后视频，暂不支持发布自适应码流。
     */
    async WeChatMiniProgramPublish(req, cb) {
        return this.request("WeChatMiniProgramPublish", req, cb);
    }
    /**
     * 对 HLS 视频进行按时间段裁剪，实时生成一个新的视频（HLS 格式），开发者可以将其立即分享出去，或者长久保存起来。

腾讯云点播支持两种剪辑模式：
- 剪辑固化：将剪辑出来的视频保存成独立的视频，拥有独立 FileId；适用于将精彩片段长久保存的场景；
- 剪辑不固化：剪辑得到的视频附属于输入文件，没有独立 FileId；适用于将精彩片段临时分享的场景。

裁剪精度支持粗略裁剪和精确裁剪：
- 粗略剪辑：基于输入 m3u8 文件进行裁剪，其最小剪辑精度为一个 ts 切片，无法实现秒级或者更为精确的剪辑精度。
- 精确剪辑：按照 StartTimeOffset 和 EndTimeOffset 参数进行精确裁剪。使用精确裁剪需要开通[即时转码](/document/product/266/102174)的功能。

### 剪辑固化
所谓剪辑固化，是指将剪辑出来的视频保存成一个独立的视频（拥有独立的 FileId）。其生命周期不受原始输入视频影响（即使原始输入视频被删除，剪辑结果也不会受到任何影响）；也可以对其进行转码、微信发布等二次处理。

举例如下：一场完整的足球比赛，原始视频可能长达 2 个小时，客户出于节省成本的目的可以对这个视频存储 2 个月，但对于剪辑的「精彩时刻」视频却可以指定存储更长时间，同时可以单独对「精彩时刻」视频进行转码、微信发布等额外的点播操作，这时候可以选择剪辑并且固化的方案。

剪辑固化的优势在于其生命周期与原始输入视频相互独立，可以独立管理、长久保存。

<font color='red'>注意：</font>如果剪辑时指定进行固化，通过 ModifyEventConfig 接口启用接收剪辑固化事件通知，固化成功后将会收到一个 PersitenceComplete 类型的事件通知。在收到这个事件通知之前，不应该对原始输入的视频进行删除、降冷等操作，否则剪辑生成的视频播放可能出现异常。

### 剪辑不固化
所谓剪辑不固化，是指剪辑所得到的结果（m3u8 文件）与原始输入视频共享相同的 ts 分片，新生成的视频不是一个独立完整的视频（没有独立 FileId，只有播放 URL），其有效期与原始输入的完整视频有效期是一致的。一旦原始输入的视频被删除，也会导致该片段无法播放。

剪辑不固化，由于其剪辑结果不是一个独立的视频，因而也不会纳入点播媒资视频管理（例如控制台的视频总数不会统计这一片段）中，也无法单独针对这个片段做转码、微信发布等任何视频处理操作。

剪辑不固化的优势在于其剪辑操作十分“轻量化”，不会产生额外的存储开销。但其不足之处在于生命周期与原始录制视频相同，且无法进一步进行转码等视频处理。
     */
    async SimpleHlsClip(req, cb) {
        return this.request("SimpleHlsClip", req, cb);
    }
    /**
     * 设置点播域名 HTTPS 证书。
     */
    async SetVodDomainCertificate(req, cb) {
        return this.request("SetVodDomainCertificate", req, cb);
    }
    /**
     * 1. 该接口可以获取多个媒体文件的多种信息，包括：
    1. 基础信息（basicInfo）：包括媒体名称、分类、播放地址、封面图片等。
    2. 元信息（metaData）：包括大小、时长、视频流信息、音频流信息等。
    3. 转码结果信息（transcodeInfo）：包括该媒体转码生成的各种规格的媒体地址、视频流参数、音频流参数等。
    4. 转动图结果信息（animatedGraphicsInfo）：对视频转动图（如 gif）后的动图信息。
    5. 采样截图信息（sampleSnapshotInfo）：对视频采样截图后的截图信息。
    6. 雪碧图信息（imageSpriteInfo）：对视频截取雪碧图后的雪碧图信息。
    7. 指定时间点截图信息（snapshotByTimeOffsetInfo）：对视频依照指定时间点截图后，的截图信息。
    8. 视频打点信息（keyFrameDescInfo）：对视频设置的打点信息。
    9. 转自适应码流信息（adaptiveDynamicStreamingInfo）：包括规格、加密类型、打包格式等相关信息。
    10. 审核信息（reviewInfo）：包括媒体审核及媒体封面审核信息。
2. 可以指定回包只返回部分信息。
     */
    async DescribeMediaInfos(req, cb) {
        return this.request("DescribeMediaInfos", req, cb);
    }
    /**
     * 该 API 已经<font color=red>不再维护</font>，请使用新版接口 [音画质重生](https://cloud.tencent.com/document/api/266/102571)。
使用模板发起视频重生。
     */
    async RebuildMediaByTemplate(req, cb) {
        return this.request("RebuildMediaByTemplate", req, cb);
    }
    /**
     * 删除片头片尾模板。
     */
    async DeleteHeadTailTemplate(req, cb) {
        return this.request("DeleteHeadTailTemplate", req, cb);
    }
    /**
     * 该接口用于创建素材样本，用于通过五官定位等技术，进行内容识别、不适宜视频识别等视频处理。
     */
    async CreatePersonSample(req, cb) {
        return this.request("CreatePersonSample", req, cb);
    }
    /**
     * 该接口用于启用、停用应用。被停用的应用将封停对应域名，并限制控制台访问。
     */
    async ModifySubAppIdStatus(req, cb) {
        return this.request("ModifySubAppIdStatus", req, cb);
    }
    /**
     * 该接口用于删除轮播播单。
     */
    async DeleteRoundPlay(req, cb) {
        return this.request("DeleteRoundPlay", req, cb);
    }
    /**
     * 修改媒体分类属性。
     */
    async ModifyClass(req, cb) {
        return this.request("ModifyClass", req, cb);
    }
    /**
     * 该 API 已经<font color=red>不再维护</font>，新版审核模板支持音视频审核和图片审核，详细请参考 [修改审核模板](https://cloud.tencent.com/document/api/266/84388)。
修改用户自定义音视频内容审核模板。
     */
    async ModifyContentReviewTemplate(req, cb) {
        return this.request("ModifyContentReviewTemplate", req, cb);
    }
    /**
     * 该接口用于删除点播加速域名。
1、域名删除前需要先关闭所有区域的加速。
     */
    async DeleteVodDomain(req, cb) {
        return this.request("DeleteVodDomain", req, cb);
    }
    /**
     * 创建用户自定义音视频内容识别模板，数量上限：50。
     */
    async CreateAIRecognitionTemplate(req, cb) {
        return this.request("CreateAIRecognitionTemplate", req, cb);
    }
    /**
     * 该 API 已经<font color=red>不再维护</font>，新版 [音画质重生](https://cloud.tencent.com/document/product/266/102571) 接口使用预置模板，详情请参见 [音画质重生模板](https://cloud.tencent.com/document/product/266/102586#50604b3f-0286-4a10-a3f7-18218116aff7)。
删除音画质重生模板。
     */
    async DeleteEnhanceMediaTemplate(req, cb) {
        return this.request("DeleteEnhanceMediaTemplate", req, cb);
    }
    /**
     * 该 API 已经<font color=red>不再维护</font>，新版 [音画质重生](https://cloud.tencent.com/document/product/266/102571) 接口使用预置模板，详情请参见 [音画质重生模板](https://cloud.tencent.com/document/product/266/102586#50604b3f-0286-4a10-a3f7-18218116aff7)。
获取视频重生模板列表。
     */
    async DescribeRebuildMediaTemplates(req, cb) {
        return this.request("DescribeRebuildMediaTemplates", req, cb);
    }
    /**
     * 该接口用于查询播放统计文件的下载地址。
* 可以查询最近一年的播放统计文件下载地址，查询的起始日期和结束日期的时间跨度不超过90天。
* 云点播每天对前一天的 CDN 请求日志进行分析处理，生成播放统计文件。
* 播放统计文件内容包含媒体文件的播放次数、播放流量等统计信息。
* 播放次数统计说明：
    1. HLS 文件：访问M3U8 文件时统计播放次数；访问TS 文件不统计播放次数。
    2. 其它文件（如 MP4 文件）：播放请求带有 range 参数且 range 的 start 参数不等于0时不统计播放次数，其它情况统计播放次数。
* 播放设备的统计：播放请求带了 UserAgent 参数，并且 UserAgent 包含 Android 或者 iPhone 等标识，会统计为移动端播放次数，否则统计为 PC 端播放次数。
* 播放统计仅针对 VOD 域名（即 EdgeOne 域名的分发不计入播放统计）。
     */
    async DescribeDailyPlayStatFileList(req, cb) {
        return this.request("DescribeDailyPlayStatFileList", req, cb);
    }
    /**
     * 删除雪碧图模板。
     */
    async DeleteImageSpriteTemplate(req, cb) {
        return this.request("DeleteImageSpriteTemplate", req, cb);
    }
    /**
     * 当媒体文件的存储类型是归档存储或深度归档存储时，是不可访问的。如需访问，则需要调用本接口进行解冻，解冻后可访问的媒体文件是临时的，在有效期过后，则不可访问。
     */
    async RestoreMedia(req, cb) {
        return this.request("RestoreMedia", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249658, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20240718 = void 0;
const Models = require("./vod_models");
const vod_client_1 = require("./vod_client");
exports.v20240718 = {
    Client: vod_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./vod_models":1738984249659,"./vod_client":1738984249660}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249659, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249660, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * vod client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("vod.tencentcloudapi.com", "2024-07-18", clientConfig);
    }
    /**
     * 用于按指定策略，生成专业版应用的临时访问凭证，比如生成用于客户端上传的临时凭证。
     */
    async CreateStorageCredentials(req, cb) {
        return this.request("CreateStorageCredentials", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249661, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.vpc = void 0;
const v20170312_1 = require("./v20170312");
exports.vpc = {
    v20170312: v20170312_1.v20170312,
};

}, function(modId) { var map = {"./v20170312":1738984249662}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249662, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20170312 = void 0;
const Models = require("./vpc_models");
const vpc_client_1 = require("./vpc_client");
exports.v20170312 = {
    Client: vpc_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./vpc_models":1738984249663,"./vpc_client":1738984249664}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249663, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249664, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * vpc client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("vpc.tencentcloudapi.com", "2017-03-12", clientConfig);
    }
    /**
     * 将专线网关与NAT网关绑定，专线网关默认路由指向NAT网关
     */
    async AssociateDirectConnectGatewayNatGateway(req, cb) {
        return this.request("AssociateDirectConnectGatewayNatGateway", req, cb);
    }
    /**
     * 本接口（ModifyNatGatewayAttribute）用于修改NAT网关的属性。
     */
    async ModifyNatGatewayAttribute(req, cb) {
        return this.request("ModifyNatGatewayAttribute", req, cb);
    }
    /**
     * 查询EIP异步任务执行结果
     */
    async DescribeTaskResult(req, cb) {
        return this.request("DescribeTaskResult", req, cb);
    }
    /**
     * 本接口（DescribeRouteTables）用于查询路由表。
     */
    async DescribeRouteTables(req, cb) {
        return this.request("DescribeRouteTables", req, cb);
    }
    /**
     * 接口用于删除带宽包资源，包括[弹性公网IP](https://cloud.tencent.com/document/product/213/1941)和[负载均衡](https://cloud.tencent.com/document/product/214/517)等
     */
    async RemoveBandwidthPackageResources(req, cb) {
        return this.request("RemoveBandwidthPackageResources", req, cb);
    }
    /**
     * 本接口（ModifyServiceTemplateGroupAttribute）用于修改协议端口模板集合。
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async ModifyServiceTemplateGroupAttribute(req, cb) {
        return this.request("ModifyServiceTemplateGroupAttribute", req, cb);
    }
    /**
     * 该接口用于调整具有带宽属性弹性公网IP的网络计费模式
* 支持BANDWIDTH_PREPAID_BY_MONTH和TRAFFIC_POSTPAID_BY_HOUR两种网络计费模式之间的切换。
* 每个弹性公网IP支持调整两次，次数超出则无法调整。
     */
    async ModifyAddressInternetChargeType(req, cb) {
        return this.request("ModifyAddressInternetChargeType", req, cb);
    }
    /**
     * 本接口（ModifyIPv6AddressesAttributes）用于修改弹性公网 IPv6（简称EIPv6）实例名称。

- 支持对弹性公网 IPv6 和传统弹性公网 IPv6 实例名称进行修改。
     */
    async ModifyIPv6AddressesAttributes(req, cb) {
        return this.request("ModifyIPv6AddressesAttributes", req, cb);
    }
    /**
     * 本接口（CreatePrivateNatGateway）用于创建私网NAT网关。
     */
    async CreatePrivateNatGateway(req, cb) {
        return this.request("CreatePrivateNatGateway", req, cb);
    }
    /**
     * 本接口（AcceptVpcPeeringConnection）用于接受对等连接请求。
     */
    async AcceptVpcPeeringConnection(req, cb) {
        return this.request("AcceptVpcPeeringConnection", req, cb);
    }
    /**
     * 本接口（EnableGatewayFlowMonitor）用于开启网关流量监控。
     */
    async EnableGatewayFlowMonitor(req, cb) {
        return this.request("EnableGatewayFlowMonitor", req, cb);
    }
    /**
     * 本接口 (DescribeAddresses) 用于查询一个或多个[弹性公网IP](https://cloud.tencent.com/document/product/213/1941)（简称 EIP）的详细信息。
* 如果参数为空，返回当前用户一定数量（Limit所指定的数量，默认为20）的 EIP。
     */
    async DescribeAddresses(req, cb) {
        return this.request("DescribeAddresses", req, cb);
    }
    /**
     * 本接口（CreateCcnRouteTables）用于给指定的云联网实例新建路由表。
     */
    async CreateCcnRouteTables(req, cb) {
        return this.request("CreateCcnRouteTables", req, cb);
    }
    /**
     * 本接口(ReplaceCcnRouteTableBroadcastPolicys)用于替换云联网路由表路由传播策略。
> 特别注意：是全量覆盖，非增量添加

**路由条件支持以下四种：**

- 实例类型: `instance-type`，可选值：私有网络 `VPC`、专线网关 `DIRECTCONNECT`、VPN网关 `VPNGW`
- 实例ID: `instance-id`，例如：`dcg-8zljkrft`、`vpc-jdevjrup`，暂不支持 `Edge` 实例
- 实例地域: `instance-region`，例如：`ap-guangzhou`<br />产品支持的所有地域列表可通过接口 [DescribeRegions](https://cloud.tencent.com/document/product/1596/77930) 查询，其中参数 `Product` 设置为 `ccn`
- 路由前缀: `cidr-block`，例如：`10.1.0.0/16`


**传播条件支持以下三种：**

- 实例类型: `instance-type`，格式同路由条件
- 实例ID: `instance-id`，格式同路由条件
- 实例地域: `instance-region`，格式同路由条件


**使用限制：**
- 一条策略内的单个条件类型，最大支持设置 `25` 个条件值
- 一张路由表，最大支持 `100` 条路由传播策略
- 路由条件类型中，只有 `cidr-block` 类型支持模糊匹配和精确匹配两种，其它类型只支持精确匹配一种模式
     */
    async ReplaceCcnRouteTableBroadcastPolicys(req, cb) {
        return this.request("ReplaceCcnRouteTableBroadcastPolicys", req, cb);
    }
    /**
     * 更新SslVpnClient证书
     */
    async ModifyVpnGatewaySslClientCert(req, cb) {
        return this.request("ModifyVpnGatewaySslClientCert", req, cb);
    }
    /**
     * 本接口用于修改 SSL-VPN 服务端属性
     */
    async ModifyVpnGatewaySslServer(req, cb) {
        return this.request("ModifyVpnGatewaySslServer", req, cb);
    }
    /**
     * 本接口 (DescribeSpecificTrafficPackageUsedDetails) 用于查询指定 共享流量包 的用量明细。
     */
    async DescribeSpecificTrafficPackageUsedDetails(req, cb) {
        return this.request("DescribeSpecificTrafficPackageUsedDetails", req, cb);
    }
    /**
     * 本接口（ReplaceRouteTableAssociation）用于修改子网（Subnet）关联的路由表（RouteTable）。
* 一个子网只能关联一个路由表。
     */
    async ReplaceRouteTableAssociation(req, cb) {
        return this.request("ReplaceRouteTableAssociation", req, cb);
    }
    /**
     * 删除共享带宽包（仅非活动状态的流量包可删除）。
     */
    async DeleteTrafficPackages(req, cb) {
        return this.request("DeleteTrafficPackages", req, cb);
    }
    /**
     * 本接口（DescribeTemplateLimits）用于查询参数模板配额列表。
     */
    async DescribeTemplateLimits(req, cb) {
        return this.request("DescribeTemplateLimits", req, cb);
    }
    /**
     * 本接口（CheckNetDetectState）用于验证网络探测。
     */
    async CheckNetDetectState(req, cb) {
        return this.request("CheckNetDetectState", req, cb);
    }
    /**
     * 本接口（InquiryPriceResetVpnGatewayInternetMaxBandwidth）用于调整VPN网关带宽上限询价。
     */
    async InquiryPriceResetVpnGatewayInternetMaxBandwidth(req, cb) {
        return this.request("InquiryPriceResetVpnGatewayInternetMaxBandwidth", req, cb);
    }
    /**
     * 判断用户在网络侧的用户类型，如标准（带宽上移），传统（非上移）。
     */
    async DescribeNetworkAccountType(req, cb) {
        return this.request("DescribeNetworkAccountType", req, cb);
    }
    /**
     * 本接口（ModifyAddressesBandwidth）用于调整[弹性公网IP](https://cloud.tencent.com/document/product/213/1941)(简称EIP)带宽，支持后付费EIP, 预付费EIP和带宽包EIP
     */
    async ModifyAddressesBandwidth(req, cb) {
        return this.request("ModifyAddressesBandwidth", req, cb);
    }
    /**
     * 本接口（CreateSubnet）用于创建子网。
* 创建子网前必须创建好 VPC。
* 子网创建成功后，子网网段不能修改。子网网段必须在VPC网段内，可以和VPC网段相同（VPC有且只有一个子网时），建议子网网段在VPC网段内，预留网段给其他子网使用。
* 您可以创建的最小网段子网掩码为28（有16个IP地址），最大网段子网掩码为16（65,536个IP地址）。
* 同一个VPC内，多个子网的网段不能重叠。
* 子网创建后会自动关联到默认路由表。
* 创建子网同时可以绑定标签, 应答里的标签列表代表添加成功的标签。
     */
    async CreateSubnet(req, cb) {
        return this.request("CreateSubnet", req, cb);
    }
    /**
     * 创建SSL-VPN-CLIENT
     */
    async CreateVpnGatewaySslClient(req, cb) {
        return this.request("CreateVpnGatewaySslClient", req, cb);
    }
    /**
     * 本接口（AllocateIp6AddressesBandwidth）用于为传统弹性公网 IPv6 地址开通 IPv6 公网带宽。

- 传统弹性公网 IPv6 地址默认仅具备内网通信能力，需通过控制台或 API 接口为其分配公网带宽后，才能具备 IPv6 公网通信能力、并于传统弹性公网 IPv6 列表页可见。
- 支持为一个或多个传统弹性公网 IPv6 实例开通公网带宽。
     */
    async AllocateIp6AddressesBandwidth(req, cb) {
        return this.request("AllocateIp6AddressesBandwidth", req, cb);
    }
    /**
     * 本接口（LockCcnBandwidths）用户锁定云联网限速实例。
该接口一般用来封禁地域间限速的云联网实例下的限速实例, 目前联通内部运营系统通过云API调用, 如果是出口限速, 一般使用更粗的云联网实例粒度封禁（LockCcns）。
如有需要, 可以封禁任意限速实例, 可接入到内部运营系统。
     */
    async LockCcnBandwidths(req, cb) {
        return this.request("LockCcnBandwidths", req, cb);
    }
    /**
     * 本接口（DeleteServiceTemplateGroup）用于删除协议端口模板集合。
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async DeleteServiceTemplateGroup(req, cb) {
        return this.request("DeleteServiceTemplateGroup", req, cb);
    }
    /**
     * 接口用于添加带宽包资源，包括[弹性公网IP](https://cloud.tencent.com/document/product/213/1941)和[负载均衡](https://cloud.tencent.com/document/product/214/517)等
     */
    async AddBandwidthPackageResources(req, cb) {
        return this.request("AddBandwidthPackageResources", req, cb);
    }
    /**
     * 本接口 (AllocateAddresses) 用于申请一个或多个[弹性公网IP](https://cloud.tencent.com/document/product/213/1941)（简称 EIP）。
* EIP 是专为动态云计算设计的静态 IP 地址。借助 EIP，您可以快速将 EIP 重新映射到您的另一个实例上，从而屏蔽实例故障。
* 您的 EIP 与腾讯云账户相关联，而不是与某个实例相关联。在您选择显式释放该地址，或欠费超过24小时之前，它会一直与您的腾讯云账户保持关联。
* 一个腾讯云账户在每个地域能申请的 EIP 最大配额有所限制，可参见 [EIP 产品简介](https://cloud.tencent.com/document/product/213/5733)，上述配额可通过 DescribeAddressQuota 接口获取。
     */
    async AllocateAddresses(req, cb) {
        return this.request("AllocateAddresses", req, cb);
    }
    /**
     * 删除 IDC通道
     */
    async DeleteCdcLDCXList(req, cb) {
        return this.request("DeleteCdcLDCXList", req, cb);
    }
    /**
     * 本接口（DescribeIp6Addresses）用于查询一个或多个传统弹性公网 IPv6 实例的详细信息。
     */
    async DescribeIp6Addresses(req, cb) {
        return this.request("DescribeIp6Addresses", req, cb);
    }
    /**
     * 本接口（DeleteNetworkAclQuintupleEntries）用于删除网络ACL五元组指定的入站规则和出站规则（但不是全量删除该ACL下的所有条目）。在NetworkAclQuintupleEntrySet参数中：NetworkAclQuintupleEntry需要提供NetworkAclQuintupleEntryId。
     */
    async DeleteNetworkAclQuintupleEntries(req, cb) {
        return this.request("DeleteNetworkAclQuintupleEntries", req, cb);
    }
    /**
     * 本接口（DeleteDirectConnectGateway）用于删除专线网关。
<li>如果是 NAT 网关，删除专线网关后，NAT 规则以及 ACL 策略都被清理了。</li>
<li>删除专线网关后，系统会删除路由表中跟该专线网关相关的路由策略。</li>
本接口是异步完成，如需查询异步任务执行结果，请使用本接口返回的`RequestId`轮询`QueryTask`接口
     */
    async DeleteDirectConnectGateway(req, cb) {
        return this.request("DeleteDirectConnectGateway", req, cb);
    }
    /**
     * 本接口（CreateNetworkInterface）用于创建弹性网卡。
* 创建弹性网卡时可以指定内网IP，并且可以指定一个主IP，指定的内网IP必须在弹性网卡所在子网内，而且不能被占用。
* 创建弹性网卡时可以指定需要申请的内网IP数量，系统会随机生成内网IP地址。
* 一个弹性网卡支持绑定的IP地址是有限制的，更多资源限制信息详见<a href="/document/product/576/18527">弹性网卡使用限制</a>。
* 创建弹性网卡同时可以绑定已有安全组。
* 创建弹性网卡同时可以绑定标签, 响应里的标签列表代表添加成功的标签。
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async CreateNetworkInterface(req, cb) {
        return this.request("CreateNetworkInterface", req, cb);
    }
    /**
     * 本接口(DescribeNetDetectStates)用于查询网络探测验证结果列表。
     */
    async DescribeNetDetectStates(req, cb) {
        return this.request("DescribeNetDetectStates", req, cb);
    }
    /**
     * 修改虚拟连接
     */
    async ModifyCdcNetPlaneAttribute(req, cb) {
        return this.request("ModifyCdcNetPlaneAttribute", req, cb);
    }
    /**
     * 本接口（DescribeCcns）用于查询云联网（CCN）列表。
     */
    async DescribeCcns(req, cb) {
        return this.request("DescribeCcns", req, cb);
    }
    /**
     * 本接口（DeleteCcn）用于删除云联网。
* 删除后，云联网关联的所有实例间路由将被删除，网络将会中断，请务必确认
* 删除云联网是不可逆的操作，请谨慎处理。
     */
    async DeleteCcn(req, cb) {
        return this.request("DeleteCcn", req, cb);
    }
    /**
     * 本接口（ModifyNetworkAclEntries）用于修改（包括添加和删除）网络ACL的入站规则和出站规则。在NetworkAclEntrySet参数中：
* 若同时传入入站规则和出站规则，则重置原有的入站规则和出站规则，并分别导入传入的规则。
* 若仅传入入站规则，则仅重置原有的入站规则，并导入传入的规则，不影响原有的出站规则（若仅传入出站规则，处理方式类似入站方向）。
     */
    async ModifyNetworkAclEntries(req, cb) {
        return this.request("ModifyNetworkAclEntries", req, cb);
    }
    /**
     * 该接口用于查询指定的云联网实例的路由表信息。
     */
    async DescribeCcnRouteTables(req, cb) {
        return this.request("DescribeCcnRouteTables", req, cb);
    }
    /**
     * 本接口（DetachNetworkInterface）用于弹性网卡解绑云服务器。
本接口是异步完成，如需查询异步任务执行结果，请使用本接口返回的`RequestId`轮询`DescribeVpcTaskResult`接口。
     */
    async DetachNetworkInterface(req, cb) {
        return this.request("DetachNetworkInterface", req, cb);
    }
    /**
     * 本接口（ModifyNetworkAclQuintupleEntries）用于修改网络ACL五元组的入站规则和出站规则。在NetworkAclQuintupleEntrySet参数中：NetworkAclQuintupleEntry需要提供NetworkAclQuintupleEntryId。
     */
    async ModifyNetworkAclQuintupleEntries(req, cb) {
        return this.request("ModifyNetworkAclQuintupleEntries", req, cb);
    }
    /**
     * 本接口（DeleteAssistantCidr）用于删除辅助CIDR。
     */
    async DeleteAssistantCidr(req, cb) {
        return this.request("DeleteAssistantCidr", req, cb);
    }
    /**
     * 本接口（DeleteNetworkInterface）用于删除弹性网卡。
* 弹性网卡上绑定了云服务器时，不能被删除。
* 删除指定弹性网卡，弹性网卡必须先和子机解绑才能删除。删除之后弹性网卡上所有内网IP都将被退还。

本接口是异步完成，如需查询异步任务执行结果，请使用本接口返回的`RequestId`轮询`DescribeVpcTaskResult`接口。
     */
    async DeleteNetworkInterface(req, cb) {
        return this.request("DeleteNetworkInterface", req, cb);
    }
    /**
     * 本接口（ModifyLocalGateway）用于修改CDC的本地网关。
     */
    async ModifyLocalGateway(req, cb) {
        return this.request("ModifyLocalGateway", req, cb);
    }
    /**
     * 本接口(DescribeSubnetResourceDashboard)用于查看Subnet资源信息。
     */
    async DescribeSubnetResourceDashboard(req, cb) {
        return this.request("DescribeSubnetResourceDashboard", req, cb);
    }
    /**
     * 本接口（DescribeFlowLog）用于查询流日志实例信息。
     */
    async DescribeFlowLog(req, cb) {
        return this.request("DescribeFlowLog", req, cb);
    }
    /**
     * 本接口（AssociateInstancesToCcnRouteTable）用于将指定的云联网实例关联到指定的云联网路由表。
     */
    async AssociateInstancesToCcnRouteTable(req, cb) {
        return this.request("AssociateInstancesToCcnRouteTable", req, cb);
    }
    /**
     * 该接口用于续费包月带宽计费模式的弹性公网IP
     */
    async RenewAddresses(req, cb) {
        return this.request("RenewAddresses", req, cb);
    }
    /**
     * 本接口（DescribeCcnRegionBandwidthLimits）用于查询云联网各地域出带宽上限，该接口只返回已关联网络实例包含的地域。
     */
    async DescribeCcnRegionBandwidthLimits(req, cb) {
        return this.request("DescribeCcnRegionBandwidthLimits", req, cb);
    }
    /**
     * 1. 该接口用于在转换实例下添加IPV6转换规则。
2. 支持在同一个转换实例下批量添加转换规则，一个账户在一个地域最多50个。
3. 一个完整的转换规则包括vip6:vport6:protocol:vip:vport，其中vip6:vport6:protocol必须是唯一。
     */
    async AddIp6Rules(req, cb) {
        return this.request("AddIp6Rules", req, cb);
    }
    /**
     * 将专线网关与NAT网关解绑，解绑之后，专线网关将不能通过NAT网关访问公网
     */
    async DisassociateDirectConnectGatewayNatGateway(req, cb) {
        return this.request("DisassociateDirectConnectGatewayNatGateway", req, cb);
    }
    /**
     * 本接口(DescribeUsedIpAddress)用于查询Subnet或者Vpc内的ip的使用情况，
如ip被占用，返回占用ip的资源类别与id；如未被占用，返回空值
     */
    async DescribeUsedIpAddress(req, cb) {
        return this.request("DescribeUsedIpAddress", req, cb);
    }
    /**
     * 本接口（DescribeCcnRoutes）用于查询已加入云联网（CCN）的路由。
     */
    async DescribeCcnRoutes(req, cb) {
        return this.request("DescribeCcnRoutes", req, cb);
    }
    /**
     * 本接口（ReplaceDirectConnectGatewayCcnRoutes）根据路由ID（RouteId）修改指定的路由（Route），支持批量修改。
     */
    async ReplaceDirectConnectGatewayCcnRoutes(req, cb) {
        return this.request("ReplaceDirectConnectGatewayCcnRoutes", req, cb);
    }
    /**
     * 本接口（GetCcnRegionBandwidthLimits）用于查询云联网相关地域带宽信息，其中预付费模式的云联网仅支持地域间限速，后付费模式的云联网支持地域间限速和地域出口限速。
     */
    async GetCcnRegionBandwidthLimits(req, cb) {
        return this.request("GetCcnRegionBandwidthLimits", req, cb);
    }
    /**
     * 增加模板对象中的IP地址、协议端口、IP地址组、协议端口组。
     */
    async AddTemplateMember(req, cb) {
        return this.request("AddTemplateMember", req, cb);
    }
    /**
     * 本接口（DeleteAddressTemplate）用于删除IP地址模板。
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async DeleteAddressTemplate(req, cb) {
        return this.request("DeleteAddressTemplate", req, cb);
    }
    /**
     * 本接口（WithdrawNotifyRoutes）用于撤销已发布到云联网的路由。路由表列表页操作增加“从云联网撤销”。
     */
    async WithdrawNotifyRoutes(req, cb) {
        return this.request("WithdrawNotifyRoutes", req, cb);
    }
    /**
     * 创建虚拟连接，用于支持 CDC 多租户模式
     */
    async CreateCdcNetPlanes(req, cb) {
        return this.request("CreateCdcNetPlanes", req, cb);
    }
    /**
     * 本接口(DeleteRoutes)用于对某个路由表批量删除路由策略（Route）。
     */
    async DeleteRoutes(req, cb) {
        return this.request("DeleteRoutes", req, cb);
    }
    /**
     * 本接口（InquiryPriceCreateVpnGateway）用于创建VPN网关询价。
     */
    async InquiryPriceCreateVpnGateway(req, cb) {
        return this.request("InquiryPriceCreateVpnGateway", req, cb);
    }
    /**
     * 删除高优路由表
     */
    async DeleteHighPriorityRouteTables(req, cb) {
        return this.request("DeleteHighPriorityRouteTables", req, cb);
    }
    /**
     * 本接口（DescribeCrossBorderCompliance）用于查询用户创建的合规化资质审批单。
服务商可以查询服务名下的任意 `APPID` 创建的审批单；非服务商，只能查询自己审批单。
     */
    async DescribeCrossBorderCompliance(req, cb) {
        return this.request("DescribeCrossBorderCompliance", req, cb);
    }
    /**
     * 本接口（CreateSecurityGroup）用于创建新的安全组（SecurityGroup）。
* 每个账户下每个地域的每个项目的<a href="https://cloud.tencent.com/document/product/213/12453">安全组数量限制</a>。
* 新建的安全组的入站和出站规则默认都是全部拒绝，在创建后通常您需要再调用CreateSecurityGroupPolicies将安全组的规则设置为需要的规则。
* 创建安全组同时可以绑定标签, 应答里的标签列表代表添加成功的标签。
     */
    async CreateSecurityGroup(req, cb) {
        return this.request("CreateSecurityGroup", req, cb);
    }
    /**
     * 本接口（ModifyNetworkInterfaceAttribute）用于修改弹性网卡属性。
     */
    async ModifyNetworkInterfaceAttribute(req, cb) {
        return this.request("ModifyNetworkInterfaceAttribute", req, cb);
    }
    /**
     * 本接口（ModifyVpcPeeringConnection）用于修改私有网络对等连接属性。
     */
    async ModifyVpcPeeringConnection(req, cb) {
        return this.request("ModifyVpcPeeringConnection", req, cb);
    }
    /**
     * 本接口（DescribeVpcLimits）用于获取私有网络配额，部分私有网络的配额有地域属性。
LimitTypes取值范围：
* appid-max-vpcs （每个开发商每个地域可创建的VPC数）。
* vpc-max-subnets（每个VPC可创建的子网数）。
* vpc-max-route-tables（每个VPC可创建的路由表数）。
* route-table-max-policies（每个路由表可添加的策略数）。
* vpc-max-vpn-gateways（每个VPC可创建的VPN网关数）。
* appid-max-custom-gateways（每个开发商可创建的对端网关数）。
* appid-max-vpn-connections（每个开发商可创建的VPN通道数）。
* custom-gateway-max-vpn-connections（每个对端网关可创建的VPN通道数）。
* vpn-gateway-max-custom-gateways（每个VPNGW可以创建的通道数）。
* vpc-max-network-acls（每个VPC可创建的网络ACL数）。
* network-acl-max-inbound-policies（每个网络ACL可添加的入站规则数）。
* network-acl-max-outbound-policies（每个网络ACL可添加的出站规则数）。
* vpc-max-vpcpeers（每个VPC可创建的对等连接数）。
* vpc-max-available-vpcpeers（每个VPC可创建的有效对等连接数）。
* vpc-max-basic-network-interconnections（每个VPC可创建的基础网络云主机与VPC互通数）。
* direct-connection-max-snats（每个专线网关可创建的SNAT数）。
* direct-connection-max-dnats（每个专线网关可创建的DNAT数）。
* direct-connection-max-snapts（每个专线网关可创建的SNAPT数）。
* direct-connection-max-dnapts（每个专线网关可创建的DNAPT数）。
* vpc-max-nat-gateways（每个VPC可创建的NAT网关数）。
* nat-gateway-max-eips（每个NAT可以购买的外网IP数量）。
* vpc-max-enis（每个VPC可创建弹性网卡数）。
* vpc-max-havips（每个VPC可创建HAVIP数）。
* eni-max-private-ips（每个ENI可以绑定的内网IP数（ENI未绑定子机））。
* nat-gateway-max-dnapts（每个NAT网关可创建的DNAPT数）。
* vpc-max-ipv6s（每个VPC可分配的IPv6地址数）。
* eni-max-ipv6s（每个ENI可分配的IPv6地址数）。
* vpc-max-assistant_cidrs（每个VPC可分配的辅助CIDR数）。
* appid-max-end-point-services （每个开发商每个地域可创建的终端节点服务个数）。
* appid-max-end-point-service-white-lists （每个开发商每个地域可创建的终端节点服务白名单个数）。
* vpc-max-cmcc-ipv6-cidrs （每个VPC可创建的移动IPv6 CIDR个数）。
* vpc-max-ctcc-ipv6-cidrs （每个VPC可创建的电信IPv6 CIDR个数）。
* vpc-max-cucc-ipv6-cidrs （每个VPC可创建的联调IPv6 CIDR个数）。
* vpc-max-bgp-ipv6-cidrs （每个VPC可创建的默认IPv6 CIDR个数）。
* vpc-max-custom-ipv6-cidrs （每个VPC可创建的自定义IPv6 CIDR个数）。
* vpc-max-ula-ipv6-cidrs （每个VPC可创建的ULA IPv6 CIDR个数）。
     */
    async DescribeVpcLimits(req, cb) {
        return this.request("DescribeVpcLimits", req, cb);
    }
    /**
     * 本接口（DescribeSnapshotAttachedInstances）用于查询快照策略关联实例列表。
     */
    async DescribeSnapshotAttachedInstances(req, cb) {
        return this.request("DescribeSnapshotAttachedInstances", req, cb);
    }
    /**
     * 本接口（DeleteHaVip）用于删除高可用虚拟IP（HAVIP）。<br />
本接口是异步完成，如需查询异步任务执行结果，请使用本接口返回的`RequestId`轮询`DescribeVpcTaskResult`接口。
     */
    async DeleteHaVip(req, cb) {
        return this.request("DeleteHaVip", req, cb);
    }
    /**
     * 本接口（DescribeProductQuota）用于查询网络产品的配额信息。
     */
    async DescribeProductQuota(req, cb) {
        return this.request("DescribeProductQuota", req, cb);
    }
    /**
     * 接口用于修改带宽包属性，包括带宽包名字等
     */
    async ModifyBandwidthPackageAttribute(req, cb) {
        return this.request("ModifyBandwidthPackageAttribute", req, cb);
    }
    /**
     * 本接口（CreateVpnGatewaySslServer）用于创建SSL-VPN Server端。
     */
    async CreateVpnGatewaySslServer(req, cb) {
        return this.request("CreateVpnGatewaySslServer", req, cb);
    }
    /**
     * 本接口（ModifyVpnGatewayAttribute）用于修改VPN网关属性。
     */
    async ModifyVpnGatewayAttribute(req, cb) {
        return this.request("ModifyVpnGatewayAttribute", req, cb);
    }
    /**
     * 本接口（DeleteVpc）用于删除私有网络。
* 删除前请确保 VPC 内已经没有相关资源，例如云服务器、云数据库、NoSQL、VPN网关、专线网关、负载均衡、对等连接、与之互通的基础网络设备等。
* 删除私有网络是不可逆的操作，请谨慎处理。
     */
    async DeleteVpc(req, cb) {
        return this.request("DeleteVpc", req, cb);
    }
    /**
     * 本接口（DescribeSubnets）用于查询子网列表。
     */
    async DescribeSubnets(req, cb) {
        return this.request("DescribeSubnets", req, cb);
    }
    /**
     * 本接口（ModifyPrivateNatGatewayTranslationAclRule）用于修改私网NAT网关源端转换访问控制规则
     */
    async ModifyPrivateNatGatewayTranslationAclRule(req, cb) {
        return this.request("ModifyPrivateNatGatewayTranslationAclRule", req, cb);
    }
    /**
     * 本接口（ModifyPrivateIpAddressesAttribute）用于修改弹性网卡内网IP属性。
     */
    async ModifyPrivateIpAddressesAttribute(req, cb) {
        return this.request("ModifyPrivateIpAddressesAttribute", req, cb);
    }
    /**
     * 本接口(ReplaceRouteTableInputPolicys)用于替换云联网路由表路由接收策略。
> 特别注意：是全量覆盖，非增量添加

**路由条件支持以下四种：**

- 实例类型: `instance-type`，可选值：私有网络 `VPC`、专线网关 `DIRECTCONNECT`、专线网关 `VPNGW`
- 实例ID: `instance-id`，例如：`dcg-8zljkrft`、`vpc-jdevjrup`，暂不支持 `Edge` 实例
- 实例地域: `instance-region`，例如：`ap-guangzhou`<br />产品支持的所有地域列表可通过接口 [DescribeRegions](https://cloud.tencent.com/document/product/1596/77930) 查询，其中参数 `Product` 设置为 `ccn`
- 路由前缀: `cidr-block`，例如：`10.1.0.0/16`


**使用限制：**
- 一条策略内的单个条件类型，最大支持设置 `25` 个条件值
- 一张路由表，最大支持 `100` 条路由接收策略
- 路由条件类型中，只有 `cidr-block` 类型支持模糊匹配和精确匹配两种，其它类型只支持精确匹配一种模式
     */
    async ReplaceCcnRouteTableInputPolicys(req, cb) {
        return this.request("ReplaceCcnRouteTableInputPolicys", req, cb);
    }
    /**
     * 本接口（ModifyNetworkInterfaceQos）用于修改弹性网卡服务质量。
     */
    async ModifyNetworkInterfaceQos(req, cb) {
        return this.request("ModifyNetworkInterfaceQos", req, cb);
    }
    /**
     * 本接口（DetachCcnInstances）用于从云联网实例中解关联指定的网络实例。<br />
解关联网络实例后，相应的路由策略会一并删除。
     */
    async DetachCcnInstances(req, cb) {
        return this.request("DetachCcnInstances", req, cb);
    }
    /**
     * 创建内网保留IP
     */
    async CreateReserveIpAddresses(req, cb) {
        return this.request("CreateReserveIpAddresses", req, cb);
    }
    /**
     * 本接口（EnableRoutes）用于启用已禁用的子网路由。<br />
本接口会校验启用后，是否与已有路由冲突，如果冲突，则无法启用，失败处理。路由冲突时，需要先禁用与之冲突的路由，才能启用该路由。
     */
    async EnableRoutes(req, cb) {
        return this.request("EnableRoutes", req, cb);
    }
    /**
     * 本接口（SetCcnRegionBandwidthLimits）用于设置云联网（CCN）各地域出带宽上限，或者地域间带宽上限。
     */
    async SetCcnRegionBandwidthLimits(req, cb) {
        return this.request("SetCcnRegionBandwidthLimits", req, cb);
    }
    /**
     * 本接口（ModifyRouteTableAttribute）用于修改路由表（RouteTable）属性。
     */
    async ModifyRouteTableAttribute(req, cb) {
        return this.request("ModifyRouteTableAttribute", req, cb);
    }
    /**
     * 本接口（ModifyHaVipAttribute）用于修改高可用虚拟IP（HAVIP）属性。
     */
    async ModifyHaVipAttribute(req, cb) {
        return this.request("ModifyHaVipAttribute", req, cb);
    }
    /**
     * 本接口 (ReleaseAddresses) 用于释放一个或多个[弹性公网IP](https://cloud.tencent.com/document/product/213/1941)（简称 EIP）。
* 该操作不可逆，释放后 EIP 关联的 IP 地址将不再属于您的名下。
* 只有状态为 UNBIND 的 EIP 才能进行释放操作。
     */
    async ReleaseAddresses(req, cb) {
        return this.request("ReleaseAddresses", req, cb);
    }
    /**
     * 查询内网保留 IP
     */
    async DescribeReserveIpAddresses(req, cb) {
        return this.request("DescribeReserveIpAddresses", req, cb);
    }
    /**
     * 本接口（ReplaceRoutes）根据路由策略ID（RouteId）修改指定的路由策略（Route），支持批量修改。
     */
    async ReplaceRoutes(req, cb) {
        return this.request("ReplaceRoutes", req, cb);
    }
    /**
     * 本接口（DescribeVpcPrivateIpAddresses）用于查询VPC内网IP信息。<br />
只能查询已使用的IP信息，当查询未使用的IP时，本接口不会报错，但不会出现在返回结果里。
     */
    async DescribeVpcPrivateIpAddresses(req, cb) {
        return this.request("DescribeVpcPrivateIpAddresses", req, cb);
    }
    /**
     * 该接口用于修改IP6转换实例属性，当前仅支持修改实例名称。
     */
    async ModifyIp6Translator(req, cb) {
        return this.request("ModifyIp6Translator", req, cb);
    }
    /**
     * 本接口（DescribeAddressTemplates）用于查询IP地址模板。
     */
    async DescribeAddressTemplates(req, cb) {
        return this.request("DescribeAddressTemplates", req, cb);
    }
    /**
     * 本接口（CreateAddressTemplate）用于创建IP地址模板。
     */
    async CreateAddressTemplate(req, cb) {
        return this.request("CreateAddressTemplate", req, cb);
    }
    /**
     * 本接口 (TransformAddress) 用于将实例的普通公网 IP 转换为[弹性公网IP](https://cloud.tencent.com/document/product/213/1941)（简称 EIP）。
* 平台对用户每地域每日解绑 EIP 重新分配普通公网 IP 次数有所限制（可参见 [EIP 产品简介](/document/product/213/1941)）。上述配额可通过 [DescribeAddressQuota](https://cloud.tencent.com/document/api/213/1378) 接口获取。
     */
    async TransformAddress(req, cb) {
        return this.request("TransformAddress", req, cb);
    }
    /**
     * 本接口（DescribeVpcEndPoint）用于查询终端节点列表。
     */
    async DescribeVpcEndPoint(req, cb) {
        return this.request("DescribeVpcEndPoint", req, cb);
    }
    /**
     * 查询账户在指定地域IPV6转换实例和规则的配额
     */
    async DescribeIp6TranslatorQuota(req, cb) {
        return this.request("DescribeIp6TranslatorQuota", req, cb);
    }
    /**
     * 本接口（CreateVpcEndPointServiceWhiteList）创建终端服务白名单。
     */
    async CreateVpcEndPointServiceWhiteList(req, cb) {
        return this.request("CreateVpcEndPointServiceWhiteList", req, cb);
    }
    /**
     * 本接口（DownloadCustomerGatewayConfiguration）用于下载VPN通道配置。
     */
    async DownloadCustomerGatewayConfiguration(req, cb) {
        return this.request("DownloadCustomerGatewayConfiguration", req, cb);
    }
    /**
     * 本接口（DescribeCustomerGateways）用于查询对端网关列表。
     */
    async DescribeCustomerGateways(req, cb) {
        return this.request("DescribeCustomerGateways", req, cb);
    }
    /**
     * 本接口（DescribeNetworkAcls）用于查询网络ACL列表。
     */
    async DescribeNetworkAcls(req, cb) {
        return this.request("DescribeNetworkAcls", req, cb);
    }
    /**
     * 本接口（DescribeServiceTemplateGroups）用于查询协议端口模板集合。
     */
    async DescribeServiceTemplateGroups(req, cb) {
        return this.request("DescribeServiceTemplateGroups", req, cb);
    }
    /**
     * 本接口（AssignIpv6CidrBlock）用于分配IPv6网段。
* 使用本接口前，您需要已有VPC实例，如果没有可通过接口<a href="https://cloud.tencent.com/document/api/215/15774" title="CreateVpc" target="_blank">CreateVpc</a>创建。
* 每个VPC只能申请一个IPv6网段。
     */
    async AssignIpv6CidrBlock(req, cb) {
        return this.request("AssignIpv6CidrBlock", req, cb);
    }
    /**
     * 本接口（DescribeNatGatewayDestinationIpPortTranslationNatRules）用于查询NAT网关端口转发规则对象数组。
     */
    async DescribeNatGatewayDestinationIpPortTranslationNatRules(req, cb) {
        return this.request("DescribeNatGatewayDestinationIpPortTranslationNatRules", req, cb);
    }
    /**
     * 本接口（DescribeCcnAttachedInstances）用于查询云联网实例下已关联的网络实例。
     */
    async DescribeCcnAttachedInstances(req, cb) {
        return this.request("DescribeCcnAttachedInstances", req, cb);
    }
    /**
     * 本接口（DescribePrivateNatGatewayRegions）用于查询查询私网NAT网关可支持地域
     */
    async DescribePrivateNatGatewayRegions(req, cb) {
        return this.request("DescribePrivateNatGatewayRegions", req, cb);
    }
    /**
     * 修改内网保留 IP
     */
    async ModifyReserveIpAddress(req, cb) {
        return this.request("ModifyReserveIpAddress", req, cb);
    }
    /**
     * 本接口（DisassociateNatGatewayAddress）用于NAT网关解绑弹性IP。
     */
    async DisassociateNatGatewayAddress(req, cb) {
        return this.request("DisassociateNatGatewayAddress", req, cb);
    }
    /**
     * 本接口（DescribeGatewayFlowMonitorDetail）用于查询网关流量监控明细。
* 只支持单个网关实例查询。即入参 `VpnId`、 `DirectConnectGatewayId`、 `PeeringConnectionId`、 `NatId` 最多只支持传一个，且必须传一个。
* 如果网关有流量，但调用本接口没有返回数据，请在控制台对应网关详情页确认是否开启网关流量监控。
     */
    async DescribeGatewayFlowMonitorDetail(req, cb) {
        return this.request("DescribeGatewayFlowMonitorDetail", req, cb);
    }
    /**
     * 本接口（UnassignIpv6Addresses）用于释放弹性网卡`IPv6`地址。<br />
本接口是异步完成，如需查询异步任务执行结果，请使用本接口返回的`RequestId`轮询`DescribeVpcTaskResult`接口。
     */
    async UnassignIpv6Addresses(req, cb) {
        return this.request("UnassignIpv6Addresses", req, cb);
    }
    /**
     * 本接口（AssociateIPv6Address）用于将弹性公网IPv6（简称EIPv6）实例绑定到 CVM 或弹性网卡配置的内网 IPv6 地址上。

- 将 EIPv6 绑定到 CVM 上，其本质是将 EIPv6 绑定到 CVM 弹性网卡所配置的内网 IPv6 地址上。
- 将 EIPv6 绑定到指定网卡的内网 IPv6 时，需确保该内网 IPv6 地址为未绑定状态，才能执行绑定操作。
     */
    async AssociateIPv6Address(req, cb) {
        return this.request("AssociateIPv6Address", req, cb);
    }
    /**
     * 本接口（DeleteAddressTemplateGroup）用于删除IP地址模板集合。
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async DeleteAddressTemplateGroup(req, cb) {
        return this.request("DeleteAddressTemplateGroup", req, cb);
    }
    /**
     * 本接口（DescribeVpcTaskResult）用于查询VPC任务执行结果。
     */
    async DescribeVpcTaskResult(req, cb) {
        return this.request("DescribeVpcTaskResult", req, cb);
    }
    /**
     * 本接口（CreateDirectConnectGateway）用于创建专线网关。
     */
    async CreateDirectConnectGateway(req, cb) {
        return this.request("CreateDirectConnectGateway", req, cb);
    }
    /**
     * 本接口(AssociateNatGatewayAddress)用于NAT网关绑定弹性IP（EIP）。
     */
    async AssociateNatGatewayAddress(req, cb) {
        return this.request("AssociateNatGatewayAddress", req, cb);
    }
    /**
     * 本接口（DeleteCcnRouteTables）用于删除云联网路由表。
     */
    async DeleteCcnRouteTables(req, cb) {
        return this.request("DeleteCcnRouteTables", req, cb);
    }
    /**
     * 本接口（ModifyPrivateNatGatewayTranslationNatRule）用于修改私网NAT网关源端转换规则
     */
    async ModifyPrivateNatGatewayTranslationNatRule(req, cb) {
        return this.request("ModifyPrivateNatGatewayTranslationNatRule", req, cb);
    }
    /**
     * 本接口（ModifyVpnGatewayRoutes）用于修改VPN路由是否启用。
     */
    async ModifyVpnGatewayRoutes(req, cb) {
        return this.request("ModifyVpnGatewayRoutes", req, cb);
    }
    /**
     * 本接口（ModifyIPv6AddressesBandwidth）用于调整弹性公网 IPv6（简称EIPv6）实例的带宽上限。
     */
    async ModifyIPv6AddressesBandwidth(req, cb) {
        return this.request("ModifyIPv6AddressesBandwidth", req, cb);
    }
    /**
     * 本接口（DescribeCrossBorderCcnRegionBandwidthLimits）用于获取要锁定的限速实例列表。
该接口一般用来封禁地域间限速的云联网实例下的限速实例, 目前联通内部运营系统通过云API调用, 如果是出口限速, 一般使用更粗的云联网实例粒度封禁（DescribeTenantCcns）
如有需要, 可以封禁任意限速实例, 可接入到内部运营系统
     */
    async DescribeCrossBorderCcnRegionBandwidthLimits(req, cb) {
        return this.request("DescribeCrossBorderCcnRegionBandwidthLimits", req, cb);
    }
    /**
     * 本接口（ModifySnapshotPolicies）用于修改快照策略。
     */
    async ModifySnapshotPolicies(req, cb) {
        return this.request("ModifySnapshotPolicies", req, cb);
    }
    /**
     * 本接口（DeleteVpnGatewaySslClient）用于删除SSL-VPN-CLIENT。
     */
    async DeleteVpnGatewaySslClient(req, cb) {
        return this.request("DeleteVpnGatewaySslClient", req, cb);
    }
    /**
     * 本接口(CreateNatGatewayDestinationIpPortTranslationNatRule)用于创建NAT网关端口转发规则。
     */
    async CreateNatGatewayDestinationIpPortTranslationNatRule(req, cb) {
        return this.request("CreateNatGatewayDestinationIpPortTranslationNatRule", req, cb);
    }
    /**
     * 本接口（ModifyAddressTemplateAttribute）用于修改IP地址模板。
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async ModifyAddressTemplateAttribute(req, cb) {
        return this.request("ModifyAddressTemplateAttribute", req, cb);
    }
    /**
     * 删除模板对象中的IP地址、协议端口、IP地址组、协议端口组。
     */
    async DeleteTemplateMember(req, cb) {
        return this.request("DeleteTemplateMember", req, cb);
    }
    /**
     * 本接口（AssignIpv6SubnetCidrBlock）用于分配IPv6子网段。
* 给子网分配 `IPv6` 网段，要求子网所属 `VPC` 已获得 `IPv6` 网段。如果尚未分配，请先通过接口 `AssignIpv6CidrBlock` 给子网所属 `VPC` 分配一个 `IPv6` 网段。否则无法分配 `IPv6` 子网段。
* 每个子网只能分配一个IPv6网段。
     */
    async AssignIpv6SubnetCidrBlock(req, cb) {
        return this.request("AssignIpv6SubnetCidrBlock", req, cb);
    }
    /**
     * 本接口（DescribeVpnGatewayCcnRoutes）用于查询VPN网关云联网路由。
     */
    async DescribeVpnGatewayCcnRoutes(req, cb) {
        return this.request("DescribeVpnGatewayCcnRoutes", req, cb);
    }
    /**
     * 本接口（AttachCcnInstances）用于将网络实例加载到云联网实例中，网络实例包括VPC和专线网关。<br />
每个云联网能够关联的网络实例个数是有限的，详情请参考产品文档。如果需要扩充请联系在线客服。
     */
    async AttachCcnInstances(req, cb) {
        return this.request("AttachCcnInstances", req, cb);
    }
    /**
     * 本接口（DeleteSubnet）用于删除子网（Subnet）。
* 删除子网前，请清理该子网下所有资源，包括云服务器、负载均衡、云数据、NoSQL、弹性网卡等资源。
     */
    async DeleteSubnet(req, cb) {
        return this.request("DeleteSubnet", req, cb);
    }
    /**
     * 本接口(AttachClassicLinkVpc)用于创建私有网络和基础网络设备互通。
* 私有网络和基础网络设备必须在同一个地域。
* 私有网络和基础网络的区别详见vpc产品文档-<a href="https://cloud.tencent.com/document/product/215/30720">私有网络与基础网络</a>。
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async AttachClassicLinkVpc(req, cb) {
        return this.request("AttachClassicLinkVpc", req, cb);
    }
    /**
     * 修改模板对象中的IP地址、协议端口、IP地址组、协议端口组。
     */
    async ModifyTemplateMember(req, cb) {
        return this.request("ModifyTemplateMember", req, cb);
    }
    /**
     * 本接口 (DescribeTrafficPackages)  用于查询共享流量包详细信息，包括共享流量包唯一标识ID，名称，流量使用信息等
     */
    async DescribeTrafficPackages(req, cb) {
        return this.request("DescribeTrafficPackages", req, cb);
    }
    /**
     * 本接口（CreateVpcEndPointService）用于创建终端节点服务。
     */
    async CreateVpcEndPointService(req, cb) {
        return this.request("CreateVpcEndPointService", req, cb);
    }
    /**
     * 本接口（ResetVpnConnection）用于重置VPN通道。
     */
    async ResetVpnConnection(req, cb) {
        return this.request("ResetVpnConnection", req, cb);
    }
    /**
     * 本接口（ModifyVpnGatewayCcnRoutes）用于修改VPN网关云联网路由。
     */
    async ModifyVpnGatewayCcnRoutes(req, cb) {
        return this.request("ModifyVpnGatewayCcnRoutes", req, cb);
    }
    /**
     * 本接口（DeletePrivateNatGatewayDestinationIpPortTranslationNatRule）用于删除私网NAT网关目的端口转换规则
     */
    async DeletePrivateNatGatewayDestinationIpPortTranslationNatRule(req, cb) {
        return this.request("DeletePrivateNatGatewayDestinationIpPortTranslationNatRule", req, cb);
    }
    /**
     * 本接口（ModifyDhcpIpAttribute）用于修改DhcpIp属性
     */
    async ModifyDhcpIpAttribute(req, cb) {
        return this.request("ModifyDhcpIpAttribute", req, cb);
    }
    /**
     * 本接口 (DescribeBandwidthPackageResources) 用于根据共享带宽包唯一ID查询共享带宽包内的资源列表，支持按条件过滤查询结果和分页查询。
     */
    async DescribeBandwidthPackageResources(req, cb) {
        return this.request("DescribeBandwidthPackageResources", req, cb);
    }
    /**
     * 查询私有网络对等连接。
     */
    async DescribeVpcPeeringConnections(req, cb) {
        return this.request("DescribeVpcPeeringConnections", req, cb);
    }
    /**
     * 高优路由表创建
     */
    async CreateHighPriorityRouteTable(req, cb) {
        return this.request("CreateHighPriorityRouteTable", req, cb);
    }
    /**
     * 本接口（InquiryPriceRenewAddresses）用于续费预付费弹性公网IP询价。
     */
    async InquiryPriceRenewAddresses(req, cb) {
        return this.request("InquiryPriceRenewAddresses", req, cb);
    }
    /**
     * 本接口（ModifyGatewayFlowQos）用于调整网关流控带宽。
     */
    async ModifyGatewayFlowQos(req, cb) {
        return this.request("ModifyGatewayFlowQos", req, cb);
    }
    /**
     * 本接口（DescribeRouteConflicts）用于查询自定义路由策略与云联网路由策略冲突列表。
     */
    async DescribeRouteConflicts(req, cb) {
        return this.request("DescribeRouteConflicts", req, cb);
    }
    /**
     * 本接口（CreateDefaultSecurityGroup）用于创建（如果项目下未存在默认安全组，则创建；已存在则获取。）默认安全组（SecurityGroup）。
* 每个账户下每个地域的每个项目的<a href="https://cloud.tencent.com/document/product/213/12453">安全组数量限制</a>。
* 默认安全组会放通所有IPv4规则，在创建后通常您需要再调用CreateSecurityGroupPolicies将安全组的规则设置为需要的规则。
* 创建安全组同时可以绑定标签, 应答里的标签列表代表添加成功的标签。
     */
    async CreateDefaultSecurityGroup(req, cb) {
        return this.request("CreateDefaultSecurityGroup", req, cb);
    }
    /**
     * 本接口（AssociateDhcpIpWithAddressIp）用于DhcpIp绑定弹性公网IP（EIP）。<br />
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async AssociateDhcpIpWithAddressIp(req, cb) {
        return this.request("AssociateDhcpIpWithAddressIp", req, cb);
    }
    /**
     * 本接口（DeleteServiceTemplate）用于删除协议端口模板。
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async DeleteServiceTemplate(req, cb) {
        return this.request("DeleteServiceTemplate", req, cb);
    }
    /**
     * 本接口（UnassignPrivateIpAddresses）用于弹性网卡退还内网 IP。
* 退还弹性网卡上的辅助内网IP，接口自动解除关联弹性公网 IP。不能退还弹性网卡的主内网IP。

本接口是异步完成，如需查询异步任务执行结果，请使用本接口返回的`RequestId`轮询`DescribeVpcTaskResult`接口。
     */
    async UnassignPrivateIpAddresses(req, cb) {
        return this.request("UnassignPrivateIpAddresses", req, cb);
    }
    /**
     * 本接口（ModifyAddressTemplateGroupAttribute）用于修改IP地址模板集合。
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async ModifyAddressTemplateGroupAttribute(req, cb) {
        return this.request("ModifyAddressTemplateGroupAttribute", req, cb);
    }
    /**
     * 1. 该接口用于创建IPV6转换IPV4实例，支持批量
2. 同一个账户在一个地域最多允许创建10个转换实例
     */
    async CreateIp6Translators(req, cb) {
        return this.request("CreateIp6Translators", req, cb);
    }
    /**
     * 本接口（CreateDefaultVpc）用于创建默认私有网络(VPC）。

默认VPC适用于快速入门和启动公共实例，您可以像使用任何其他VPC一样使用默认VPC。如果您想创建标准VPC，即指定VPC名称、VPC网段、子网网段、子网可用区，请使用常规创建VPC接口（CreateVpc）

正常情况，本接口并不一定生产默认VPC，而是根据用户账号的网络属性（DescribeAccountAttributes）来决定的
* 支持基础网络、VPC，返回VpcId为0
* 只支持VPC，返回默认VPC信息

您也可以通过 Force 参数，强制返回默认VPC。
     */
    async CreateDefaultVpc(req, cb) {
        return this.request("CreateDefaultVpc", req, cb);
    }
    /**
     * 本接口（AttachNetworkInterface）用于弹性网卡绑定云服务器。
* 一个弹性网卡请至少绑定一个安全组，如需绑定请参见<a href="https://cloud.tencent.com/document/product/215/43132">弹性网卡绑定安全组</a>。
* 一个云服务器可以绑定多个弹性网卡，但只能绑定一个主网卡。更多限制信息详见<a href="https://cloud.tencent.com/document/product/576/18527">弹性网卡使用限制</a>。
* 一个弹性网卡只能同时绑定一个云服务器。
* 只有运行中或者已关机状态的云服务器才能绑定弹性网卡，查看云服务器状态详见<a href="https://cloud.tencent.com/document/api/213/9452#InstanceStatus">腾讯云服务器信息</a>。
* 弹性网卡绑定的云服务器必须是私有网络的，而且云服务器所在可用区必须和弹性网卡子网的可用区相同。

本接口是异步完成，如需查询异步任务执行结果，请使用本接口返回的`RequestId`轮询`DescribeVpcTaskResult`接口。
     */
    async AttachNetworkInterface(req, cb) {
        return this.request("AttachNetworkInterface", req, cb);
    }
    /**
     * 本接口（DeleteSecurityGroupPolicies）用于用于删除安全组规则（SecurityGroupPolicy）。
* SecurityGroupPolicySet.Version 用于指定要操作的安全组的版本。传入 Version 版本号若不等于当前安全组的最新版本，将返回失败；若不传 Version 则直接删除指定PolicyIndex的规则。
     */
    async DeleteSecurityGroupPolicies(req, cb) {
        return this.request("DeleteSecurityGroupPolicies", req, cb);
    }
    /**
     * 本接口（DescribeNetworkAclQuintupleEntries）查询入方向或出方向网络ACL五元组条目列表。
     */
    async DescribeNetworkAclQuintupleEntries(req, cb) {
        return this.request("DescribeNetworkAclQuintupleEntries", req, cb);
    }
    /**
     * 本接口（ModifySecurityGroupAttribute）用于修改安全组（SecurityGroupPolicy）属性。
     */
    async ModifySecurityGroupAttribute(req, cb) {
        return this.request("ModifySecurityGroupAttribute", req, cb);
    }
    /**
     * 本接口（DeletePrivateNatGatewayTranslationAclRule）用于删除私网NAT网关源端转换访问控制规则
     */
    async DeletePrivateNatGatewayTranslationAclRule(req, cb) {
        return this.request("DeletePrivateNatGatewayTranslationAclRule", req, cb);
    }
    /**
     * 本接口（DescribePrivateNatGatewayTranslationAclRules）用于查询私网NAT网关源端转换访问控制规则
     */
    async DescribePrivateNatGatewayTranslationAclRules(req, cb) {
        return this.request("DescribePrivateNatGatewayTranslationAclRules", req, cb);
    }
    /**
     * 本接口（DisableFlowLogs）用于停止流日志。
     */
    async DisableFlowLogs(req, cb) {
        return this.request("DisableFlowLogs", req, cb);
    }
    /**
     * 本接口（CreateCustomerGateway）用于创建对端网关。
     */
    async CreateCustomerGateway(req, cb) {
        return this.request("CreateCustomerGateway", req, cb);
    }
    /**
     * 本接口（AuditCrossBorderCompliance）用于服务商操作合规化资质审批。
* 服务商只能操作提交到本服务商的审批单，后台会校验身份。即只授权给服务商的`APPID` 调用本接口。
* `APPROVED` 状态的审批单，可以再次操作为 `DENY`；`DENY` 状态的审批单，也可以再次操作为 `APPROVED`。
     */
    async AuditCrossBorderCompliance(req, cb) {
        return this.request("AuditCrossBorderCompliance", req, cb);
    }
    /**
     * 本接口（DescribeVpcInstances）用于查询VPC下的云主机实例列表。
     */
    async DescribeVpcInstances(req, cb) {
        return this.request("DescribeVpcInstances", req, cb);
    }
    /**
     * 本接口（DescribeVpnGatewaySslServers）用于查询SSL-VPN SERVER 列表信息。
     */
    async DescribeVpnGatewaySslServers(req, cb) {
        return this.request("DescribeVpnGatewaySslServers", req, cb);
    }
    /**
     * 本接口（DeleteRouteTable）用于删除路由表。
     */
    async DeleteRouteTable(req, cb) {
        return this.request("DeleteRouteTable", req, cb);
    }
    /**
     * 本接口（DescribeAccountAttributes）用于查询用户账号私有属性。
     */
    async DescribeAccountAttributes(req, cb) {
        return this.request("DescribeAccountAttributes", req, cb);
    }
    /**
     * 本接口（AssignIpv6Addresses）用于弹性网卡申请`IPv6`地址。<br />
本接口是异步完成，如需查询异步任务执行结果，请使用本接口返回的`RequestId`轮询`DescribeVpcTaskResult`接口。
* 一个弹性网卡支持绑定的IP地址是有限制的，更多资源限制信息详见<a href="/document/product/576/18527">弹性网卡使用限制</a>。
* 可以指定`IPv6`地址申请，地址类型不能为主`IP`，`IPv6`地址暂时只支持作为辅助`IP`。
* 地址必须要在弹性网卡所在子网内，而且不能被占用。
* 在弹性网卡上申请一个到多个辅助`IPv6`地址，接口会在弹性网卡所在子网段内返回指定数量的辅助`IPv6`地址。
     */
    async AssignIpv6Addresses(req, cb) {
        return this.request("AssignIpv6Addresses", req, cb);
    }
    /**
     * 本接口（DescribeRouteTableSelectionPolicies）用于查询云联网路由表选择策略。
     */
    async DescribeRouteTableSelectionPolicies(req, cb) {
        return this.request("DescribeRouteTableSelectionPolicies", req, cb);
    }
    /**
     * 本接口（DescribeIpGeolocationInfos）用于查询IP地址信息，包括地理位置信息和网络信息。
<font color="#FF0000">本接口即将下线，仅供存量客户使用，暂停新增用户。</font>
     */
    async DescribeIpGeolocationInfos(req, cb) {
        return this.request("DescribeIpGeolocationInfos", req, cb);
    }
    /**
     * 本接口（UnassignIpv6CidrBlock）用于释放IPv6网段。<br />
网段如果还有IP占用且未回收，则网段无法释放。
     */
    async UnassignIpv6CidrBlock(req, cb) {
        return this.request("UnassignIpv6CidrBlock", req, cb);
    }
    /**
     * 本接口(CreateNatGatewaySourceIpTranslationNatRule)用于创建NAT网关SNAT规则
     */
    async CreateNatGatewaySourceIpTranslationNatRule(req, cb) {
        return this.request("CreateNatGatewaySourceIpTranslationNatRule", req, cb);
    }
    /**
     * 1. 该接口用于删除IPV6转换规则
2. 支持批量删除同一个转换实例下的多个转换规则
     */
    async RemoveIp6Rules(req, cb) {
        return this.request("RemoveIp6Rules", req, cb);
    }
    /**
     * 本接口（RejectVpcPeeringConnection）用于驳回对等连接请求。
     */
    async RejectVpcPeeringConnection(req, cb) {
        return this.request("RejectVpcPeeringConnection", req, cb);
    }
    /**
     * 本接口（DescribePrivateNatGateways）用于查询私网NAT网关
     */
    async DescribePrivateNatGateways(req, cb) {
        return this.request("DescribePrivateNatGateways", req, cb);
    }
    /**
     * 本接口（CreateVpnConnection）用于创建VPN通道。
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async CreateVpnConnection(req, cb) {
        return this.request("CreateVpnConnection", req, cb);
    }
    /**
     * 本接口（ModifyCustomerGatewayAttribute）用于修改对端网关信息。
     */
    async ModifyCustomerGatewayAttribute(req, cb) {
        return this.request("ModifyCustomerGatewayAttribute", req, cb);
    }
    /**
     * 本接口（EnableCcnRoutes）用于启用已经加入云联网（CCN）的路由。<br />
本接口会校验启用后，是否与已有路由冲突，如果冲突，则无法启用，失败处理。路由冲突时，需要先禁用与之冲突的路由，才能启用该路由。
     */
    async EnableCcnRoutes(req, cb) {
        return this.request("EnableCcnRoutes", req, cb);
    }
    /**
     * 本接口（CreatePrivateNatGatewayDestinationIpPortTranslationNatRule）用于创建私网NAT网关目的端口转换规则
     */
    async CreatePrivateNatGatewayDestinationIpPortTranslationNatRule(req, cb) {
        return this.request("CreatePrivateNatGatewayDestinationIpPortTranslationNatRule", req, cb);
    }
    /**
     * 本接口（DeleteSecurityGroup）用于删除安全组（SecurityGroup）。
* 只有当前账号下的安全组允许被删除。
* 安全组实例ID如果在其他安全组的规则中被引用，则无法直接删除。这种情况下，需要先进行规则修改，再删除安全组。
* 删除的安全组无法再找回，请谨慎调用。
     */
    async DeleteSecurityGroup(req, cb) {
        return this.request("DeleteSecurityGroup", req, cb);
    }
    /**
     * 本接口（DescribeNatGatewaySourceIpTranslationNatRules）用于查询NAT网关SNAT转发规则对象数组。
     */
    async DescribeNatGatewaySourceIpTranslationNatRules(req, cb) {
        return this.request("DescribeNatGatewaySourceIpTranslationNatRules", req, cb);
    }
    /**
     * 本接口(ModifyNetDetect)用于修改网络探测参数。
     */
    async ModifyNetDetect(req, cb) {
        return this.request("ModifyNetDetect", req, cb);
    }
    /**
     * 接口用于查询账户在当前地域的带宽包上限数量以及使用数量
     */
    async DescribeBandwidthPackageQuota(req, cb) {
        return this.request("DescribeBandwidthPackageQuota", req, cb);
    }
    /**
     * 本接口（CreateSnapshotPolicies）用于创建快照策略。
     */
    async CreateSnapshotPolicies(req, cb) {
        return this.request("CreateSnapshotPolicies", req, cb);
    }
    /**
     * 本接口（ResetAttachCcnInstances）用于跨账号关联实例申请过期时，重新申请关联操作。
     */
    async ResetAttachCcnInstances(req, cb) {
        return this.request("ResetAttachCcnInstances", req, cb);
    }
    /**
     * 本接口（ModifyVpcEndPointServiceAttribute）用于修改终端节点服务属性。
     */
    async ModifyVpcEndPointServiceAttribute(req, cb) {
        return this.request("ModifyVpcEndPointServiceAttribute", req, cb);
    }
    /**
     * 接口用于查询带宽包详细信息，包括带宽包唯一标识ID，类型，计费模式，名称，资源信息等
     */
    async DescribeBandwidthPackages(req, cb) {
        return this.request("DescribeBandwidthPackages", req, cb);
    }
    /**
     * 本接口（DescribeRouteTableAssociatedInstances）用于查询指定的云联网关联的实例所绑定的路由表信息。
     */
    async DescribeRouteTableAssociatedInstances(req, cb) {
        return this.request("DescribeRouteTableAssociatedInstances", req, cb);
    }
    /**
     * 本接口（CreateServiceTemplateGroup）用于创建协议端口模板集合。
     */
    async CreateServiceTemplateGroup(req, cb) {
        return this.request("CreateServiceTemplateGroup", req, cb);
    }
    /**
     * 本接口（ReleaseIp6AddressesBandwidth）用于为传统弹性公网 IPv6 实例关闭 IPv6 公网带宽。

- 传统弹性公网 IPv6 实例关闭公网带宽后，仍具备 IPv6 内网通信能力。
- 如需再次开通 IPv6 公网带宽，请使用 AllocateIp6AddressesBandwidth 接口进行开通。
     */
    async ReleaseIp6AddressesBandwidth(req, cb) {
        return this.request("ReleaseIp6AddressesBandwidth", req, cb);
    }
    /**
     * 本接口（ModifyCcnAttribute）用于修改云联网（CCN）的相关属性。
     */
    async ModifyCcnAttribute(req, cb) {
        return this.request("ModifyCcnAttribute", req, cb);
    }
    /**
     * 本接口（DescribePriceCreateDirectConnectGateway）用于创建专线网关询价。
     */
    async InquirePriceCreateDirectConnectGateway(req, cb) {
        return this.request("InquirePriceCreateDirectConnectGateway", req, cb);
    }
    /**
     * 本接口（DescribeAddressTemplateGroups）用于查询IP地址模板集合。
     */
    async DescribeAddressTemplateGroups(req, cb) {
        return this.request("DescribeAddressTemplateGroups", req, cb);
    }
    /**
     * 本接口(DetachClassicLinkVpc)用于删除私有网络和基础网络设备互通。
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async DetachClassicLinkVpc(req, cb) {
        return this.request("DetachClassicLinkVpc", req, cb);
    }
    /**
     * 本接口（CreateSecurityGroupPolicies）用于创建安全组规则（SecurityGroupPolicy）。

在 SecurityGroupPolicySet 参数中：
<ul>
<li>Version 安全组规则版本号，用户每次更新安全规则版本会自动加1，防止您更新的路由规则已过期，不填不考虑冲突。</li>
<li>在创建出站和入站规则（Egress 和 Ingress）时：<ul>
<li>Protocol 字段支持输入TCP, UDP, ICMP, ICMPV6, GRE, ALL。</li>
<li>CidrBlock 字段允许输入符合cidr格式标准的任意字符串。在基础网络中，如果 CidrBlock 包含您的账户内的云服务器之外的设备在腾讯云的内网 IP，并不代表此规则允许您访问这些设备，租户之间网络隔离规则优先于安全组中的内网规则。</li>
<li>Ipv6CidrBlock 字段允许输入符合IPv6 cidr格式标准的任意字符串。在基础网络中，如果Ipv6CidrBlock 包含您的账户内的云服务器之外的设备在腾讯云的内网 IPv6，并不代表此规则允许您访问这些设备，租户之间网络隔离规则优先于安全组中的内网规则。</li>
<li>SecurityGroupId 字段允许输入与待修改的安全组位于相同项目中的安全组 ID，包括这个安全组 ID 本身，代表安全组下所有云服务器的内网 IP。使用这个字段时，这条规则用来匹配网络报文的过程中会随着被使用的这个 ID 所关联的云服务器变化而变化，不需要重新修改。</li>
<li>Port 字段允许输入一个单独端口号，或者用减号分隔的两个端口号代表端口范围，例如80或8000-8010。只有当 Protocol 字段是 TCP 或 UDP 时，Port 字段才被接受，即 Protocol 字段不是 TCP 或 UDP 时，Protocol 和 Port 是排他关系，不允许同时输入，否则会接口报错。</li>
<li>Action 字段只允许输入 ACCEPT 或 DROP。</li>
<li>CidrBlock, Ipv6CidrBlock, SecurityGroupId, AddressTemplate 四者是排他关系，不允许同时输入，Protocol + Port 和 ServiceTemplate 二者是排他关系，不允许同时输入。IPv6CidrBlock和ICMP是排他关系，如需使用，请输入ICMPV6。</li>
<li>一次请求中只能创建单个方向的规则, 如果需要指定索引（PolicyIndex）参数, 多条规则的索引必须一致。如想在规则最前面插入一条，则填0即可，如果想在最后追加，该字段可不填。</li>
</ul></li></ul>
     */
    async CreateSecurityGroupPolicies(req, cb) {
        return this.request("CreateSecurityGroupPolicies", req, cb);
    }
    /**
     * 本接口（ResetNatGatewayConnection）用来NAT网关并发连接上限。
     */
    async ResetNatGatewayConnection(req, cb) {
        return this.request("ResetNatGatewayConnection", req, cb);
    }
    /**
     * 本接口（AttachSnapshotInstances）用于快照策略关联实例。
     */
    async AttachSnapshotInstances(req, cb) {
        return this.request("AttachSnapshotInstances", req, cb);
    }
    /**
     * 本接口(DescribeVpcResourceDashboard)用于查看VPC资源信息。
     */
    async DescribeVpcResourceDashboard(req, cb) {
        return this.request("DescribeVpcResourceDashboard", req, cb);
    }
    /**
     * 本接口（ReplaceSecurityGroupPolicy）用于替换单条安全组规则（SecurityGroupPolicy）。
单个请求中只能替换单个方向的一条规则, 必须要指定索引（PolicyIndex）。
     */
    async ReplaceSecurityGroupPolicy(req, cb) {
        return this.request("ReplaceSecurityGroupPolicy", req, cb);
    }
    /**
     * 本接口 (AdjustPublicAddress) 用于更换IP地址，支持更换CVM实例的普通公网IP和包月带宽的EIP。
     */
    async AdjustPublicAddress(req, cb) {
        return this.request("AdjustPublicAddress", req, cb);
    }
    /**
     * 本接口（CreateNetworkAcl）用于创建新的<a href="https://cloud.tencent.com/document/product/215/20088">网络ACL</a>。
* 新建的网络ACL的入站和出站规则默认都是全部拒绝，在创建后通常您需要再调用ModifyNetworkAclEntries将网络ACL的规则设置为需要的规则。
     */
    async CreateNetworkAcl(req, cb) {
        return this.request("CreateNetworkAcl", req, cb);
    }
    /**
     * 本接口 (CreateBandwidthPackage) 支持创建[设备带宽包](https://cloud.tencent.com/document/product/684/15245#bwptype)和[IP带宽包](https://cloud.tencent.com/document/product/684/15245#bwptype)。
     */
    async CreateBandwidthPackage(req, cb) {
        return this.request("CreateBandwidthPackage", req, cb);
    }
    /**
     * 本接口（DeleteFlowLog）用于删除流日志。
     */
    async DeleteFlowLog(req, cb) {
        return this.request("DeleteFlowLog", req, cb);
    }
    /**
     * 本接口（GenerateVpnConnectionDefaultHealthCheckIp）用于获取一对VPN通道健康检查地址。
     */
    async GenerateVpnConnectionDefaultHealthCheckIp(req, cb) {
        return this.request("GenerateVpnConnectionDefaultHealthCheckIp", req, cb);
    }
    /**
     * 删除SSL-VPN-SERVER 实例
     */
    async DeleteVpnGatewaySslServer(req, cb) {
        return this.request("DeleteVpnGatewaySslServer", req, cb);
    }
    /**
     * 本接口（DescribeNetworkInterfaceLimit）根据CVM实例ID或弹性网卡ID查询弹性网卡配额，返回该CVM实例或弹性网卡能绑定的弹性网卡配额，以及弹性网卡可以分配的IP配额。
     */
    async DescribeNetworkInterfaceLimit(req, cb) {
        return this.request("DescribeNetworkInterfaceLimit", req, cb);
    }
    /**
     * 本接口（EnableSnapshotPolicies）用于启用快照策略。
     */
    async EnableSnapshotPolicies(req, cb) {
        return this.request("EnableSnapshotPolicies", req, cb);
    }
    /**
     * 本接口（DeleteVpnConnection）用于删除VPN通道。
>?本接口为异步接口
>
     */
    async DeleteVpnConnection(req, cb) {
        return this.request("DeleteVpnConnection", req, cb);
    }
    /**
     * 本接口（DescribeCustomerGatewayVendors）用于查询可支持的对端网关厂商信息。
     */
    async DescribeCustomerGatewayVendors(req, cb) {
        return this.request("DescribeCustomerGatewayVendors", req, cb);
    }
    /**
     * 删除虚拟连接
     */
    async DeleteCdcNetPlanes(req, cb) {
        return this.request("DeleteCdcNetPlanes", req, cb);
    }
    /**
     * 本接口（DeleteLocalGateway）用于删除CDC的本地网关。
     */
    async DeleteLocalGateway(req, cb) {
        return this.request("DeleteLocalGateway", req, cb);
    }
    /**
     * 本接口（ModifyServiceTemplateAttribute）用于修改协议端口模板。
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async ModifyServiceTemplateAttribute(req, cb) {
        return this.request("ModifyServiceTemplateAttribute", req, cb);
    }
    /**
     * 本接口（DisassociateNetworkAclSubnets）用于网络ACL解关联VPC下的子网。
     */
    async DisassociateNetworkAclSubnets(req, cb) {
        return this.request("DisassociateNetworkAclSubnets", req, cb);
    }
    /**
     * 本接口（ModifyPrivateNatGatewayDestinationIpPortTranslationNatRule）用于修改私网NAT网关目的端口转换规则
     */
    async ModifyPrivateNatGatewayDestinationIpPortTranslationNatRule(req, cb) {
        return this.request("ModifyPrivateNatGatewayDestinationIpPortTranslationNatRule", req, cb);
    }
    /**
     * 本接口（DescribeVpnGatewayRoutes）用于查询VPN网关路由。
     */
    async DescribeVpnGatewayRoutes(req, cb) {
        return this.request("DescribeVpnGatewayRoutes", req, cb);
    }
    /**
     * 本接口（ReplaceSecurityGroupPolicies）用于批量修改安全组规则（SecurityGroupPolicy）。
单个请求中只能替换单个方向的一条或多条规则, 必须要指定索引（PolicyIndex）。
     */
    async ReplaceSecurityGroupPolicies(req, cb) {
        return this.request("ReplaceSecurityGroupPolicies", req, cb);
    }
    /**
     * 本接口（CreateDirectConnectGatewayCcnRoutes）用于创建专线网关的云联网路由（IDC网段）
     */
    async CreateDirectConnectGatewayCcnRoutes(req, cb) {
        return this.request("CreateDirectConnectGatewayCcnRoutes", req, cb);
    }
    /**
     * 本接口（AssignPrivateIpAddresses）用于弹性网卡申请内网 IP。
* 一个弹性网卡支持绑定的IP地址是有限制的，更多资源限制信息详见<a href="/document/product/576/18527">弹性网卡使用限制</a>。
* 可以指定内网IP地址申请，内网IP地址类型不能为主IP，主IP已存在，不能修改，内网IP必须要在弹性网卡所在子网内，而且不能被占用。
* 在弹性网卡上申请一个到多个辅助内网IP，接口会在弹性网卡所在子网网段内返回指定数量的辅助内网IP。
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async AssignPrivateIpAddresses(req, cb) {
        return this.request("AssignPrivateIpAddresses", req, cb);
    }
    /**
     * 本接口（DescribeCrossBorderFlowMonitor）用于查询跨境带宽监控数据，该接口目前只提供给服务商联通使用。
     */
    async DescribeCrossBorderFlowMonitor(req, cb) {
        return this.request("DescribeCrossBorderFlowMonitor", req, cb);
    }
    /**
     * 本接口（CreateSubnets）用于批量创建子网。
* 创建子网前必须创建好 VPC。
* 子网创建成功后，子网网段不能修改。子网网段必须在VPC网段内，可以和VPC网段相同（VPC有且只有一个子网时），建议子网网段在VPC网段内，预留网段给其他子网使用。
* 您可以创建的最小网段子网掩码为28（有16个IP地址），最大网段子网掩码为16（65,536个IP地址）。
* 同一个VPC内，多个子网的网段不能重叠。
* 子网创建后会自动关联到默认路由表。
* 创建子网同时可以绑定标签, 应答里的标签列表代表添加成功的标签。
     */
    async CreateSubnets(req, cb) {
        return this.request("CreateSubnets", req, cb);
    }
    /**
     * 本接口（CreateVpcPeeringConnection）用于创建私有网络对等连接。
     */
    async CreateVpcPeeringConnection(req, cb) {
        return this.request("CreateVpcPeeringConnection", req, cb);
    }
    /**
     * 本接口（DeleteDirectConnectGatewayCcnRoutes）用于删除专线网关的云联网路由（IDC网段）
     */
    async DeleteDirectConnectGatewayCcnRoutes(req, cb) {
        return this.request("DeleteDirectConnectGatewayCcnRoutes", req, cb);
    }
    /**
     * 本接口（RejectAttachCcnInstances）用于跨账号关联实例时，云联网所有者拒绝关联操作。

     */
    async RejectAttachCcnInstances(req, cb) {
        return this.request("RejectAttachCcnInstances", req, cb);
    }
    /**
     * 本接口（DescribeVpnConnections）用于查询VPN通道列表。
     */
    async DescribeVpnConnections(req, cb) {
        return this.request("DescribeVpnConnections", req, cb);
    }
    /**
     * 本接口（DeleteDhcpIp）用于删除DhcpIp。
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async DeleteDhcpIp(req, cb) {
        return this.request("DeleteDhcpIp", req, cb);
    }
    /**
     * 本接口（DescribePrivateNatGatewayDestinationIpPortTranslationNatRules）用于查询私网NAT网关目的端口转换规则
     */
    async DescribePrivateNatGatewayDestinationIpPortTranslationNatRules(req, cb) {
        return this.request("DescribePrivateNatGatewayDestinationIpPortTranslationNatRules", req, cb);
    }
    /**
     * 查询高优路由表条目信息。
     */
    async DescribeHighPriorityRoutes(req, cb) {
        return this.request("DescribeHighPriorityRoutes", req, cb);
    }
    /**
     * 本接口 (DisassociateAddress) 用于解绑[弹性公网IP](https://cloud.tencent.com/document/product/213/1941)（简称 EIP）。
* 支持CVM实例，弹性网卡上的EIP解绑
* 不支持NAT上的EIP解绑。NAT上的EIP解绑请参考[DisassociateNatGatewayAddress](https://cloud.tencent.com/document/api/215/36716)
* 只有状态为 BIND 和 BIND_ENI 的 EIP 才能进行解绑定操作。
     */
    async DisassociateAddress(req, cb) {
        return this.request("DisassociateAddress", req, cb);
    }
    /**
     * 查询 IDC通道信息
     */
    async DescribeCdcLDCXList(req, cb) {
        return this.request("DescribeCdcLDCXList", req, cb);
    }
    /**
     * 该接口用于修改IPV6转换规则，当前仅支持修改转换规则名称，IPV4地址和IPV4端口号
     */
    async ModifyIp6Rule(req, cb) {
        return this.request("ModifyIp6Rule", req, cb);
    }
    /**
     * 本接口（DescribeVpcIpv6Addresses）用于查询 `VPC` `IPv6` 信息。
只能查询已使用的`IPv6`信息，当查询未使用的IP时，本接口不会报错，但不会出现在返回结果里。
     */
    async DescribeVpcIpv6Addresses(req, cb) {
        return this.request("DescribeVpcIpv6Addresses", req, cb);
    }
    /**
     * 本接口（UnlockCcnBandwidths）用户解锁云联网限速实例。
该接口一般用来封禁地域间限速的云联网实例下的限速实例, 目前联通内部运营系统通过云API调用, 如果是出口限速, 一般使用更粗的云联网实例粒度封禁（SecurityUnlockCcns）。
如有需要, 可以封禁任意限速实例, 可接入到内部运营系统。
     */
    async UnlockCcnBandwidths(req, cb) {
        return this.request("UnlockCcnBandwidths", req, cb);
    }
    /**
     * 本接口（DeleteCustomerGateway）用于删除对端网关。
     */
    async DeleteCustomerGateway(req, cb) {
        return this.request("DeleteCustomerGateway", req, cb);
    }
    /**
     * 本接口（DescribeLocalGateway）用于查询CDC的本地网关。
     */
    async DescribeLocalGateway(req, cb) {
        return this.request("DescribeLocalGateway", req, cb);
    }
    /**
     * 本接口（DescribeNetDetects）用于查询网络探测列表。
     */
    async DescribeNetDetects(req, cb) {
        return this.request("DescribeNetDetects", req, cb);
    }
    /**
     * 本接口 (DescribeBandwidthPackageBillUsage) 用于查询后付费共享带宽包当前的计费用量.
     */
    async DescribeBandwidthPackageBillUsage(req, cb) {
        return this.request("DescribeBandwidthPackageBillUsage", req, cb);
    }
    /**
     * 该接口用于修改云联网路由表名称和备注。
     */
    async ModifyCcnRouteTables(req, cb) {
        return this.request("ModifyCcnRouteTables", req, cb);
    }
    /**
     * 调整EIP续费标识
     */
    async ModifyAddressesRenewFlag(req, cb) {
        return this.request("ModifyAddressesRenewFlag", req, cb);
    }
    /**
     * 修改高优路由表 HASH 策略。
     */
    async ModifyHighPriorityRouteECMPAlgorithm(req, cb) {
        return this.request("ModifyHighPriorityRouteECMPAlgorithm", req, cb);
    }
    /**
     * 本接口（DeleteNatGatewaySourceIpTranslationNatRule）用于删除NAT网关端口SNAT转发规则。
     */
    async DeleteNatGatewaySourceIpTranslationNatRule(req, cb) {
        return this.request("DeleteNatGatewaySourceIpTranslationNatRule", req, cb);
    }
    /**
     * 本接口（DisassociateIPv6Address）用于解绑弹性公网 IPv6（简称EIPv6）实例。

- 支持对 CVM、弹性网卡绑定的 EIPv6 实例进行解绑操作。
- 只有状态为 BIND 和 BIND_ENI 的 EIPv6 实例才能进行解绑操作。
     */
    async DisassociateIPv6Address(req, cb) {
        return this.request("DisassociateIPv6Address", req, cb);
    }
    /**
     * 本接口（ModifyNatGatewaySourceIpTranslationNatRule）用于修改NAT网关SNAT转发规则。
     */
    async ModifyNatGatewaySourceIpTranslationNatRule(req, cb) {
        return this.request("ModifyNatGatewaySourceIpTranslationNatRule", req, cb);
    }
    /**
     * 本接口（UnassignIpv6SubnetCidrBlock）用于释放IPv6子网段。<br />
子网段如果还有IP占用且未回收，则子网段无法释放。
     */
    async UnassignIpv6SubnetCidrBlock(req, cb) {
        return this.request("UnassignIpv6SubnetCidrBlock", req, cb);
    }
    /**
     * 本接口（DisableRoutes）用于禁用已启用的子网路由
     */
    async DisableRoutes(req, cb) {
        return this.request("DisableRoutes", req, cb);
    }
    /**
     * 本接口（EnableVpnGatewaySslClientCert）用于启用SSL-VPN-CLIENT 证书。
     */
    async EnableVpnGatewaySslClientCert(req, cb) {
        return this.request("EnableVpnGatewaySslClientCert", req, cb);
    }
    /**
     * 本接口（CreateAssistantCidr）用于批量创建辅助CIDR。
     */
    async CreateAssistantCidr(req, cb) {
        return this.request("CreateAssistantCidr", req, cb);
    }
    /**
     * 本接口（DescribeVpnGatewaySslClients）用于查询SSL-VPN-CLIENT 列表。
     */
    async DescribeVpnGatewaySslClients(req, cb) {
        return this.request("DescribeVpnGatewaySslClients", req, cb);
    }
    /**
     * 本接口(CreateNatGateway)用于创建NAT网关。
在对新建的NAT网关做其他操作前，需先确认此网关已被创建完成（DescribeNatGateway接口返回的实例State字段为AVAILABLE）。
     */
    async CreateNatGateway(req, cb) {
        return this.request("CreateNatGateway", req, cb);
    }
    /**
     * 本接口（DeleteNetDetect）用于删除网络探测实例。
     */
    async DeleteNetDetect(req, cb) {
        return this.request("DeleteNetDetect", req, cb);
    }
    /**
     * 本接口（NotifyRoutes）用于路由表列表页操作增加“发布到云联网”，发布路由到云联网。
     */
    async NotifyRoutes(req, cb) {
        return this.request("NotifyRoutes", req, cb);
    }
    /**
     * 本接口（DeleteVpcEndPoint）用于删除终端节点。
     */
    async DeleteVpcEndPoint(req, cb) {
        return this.request("DeleteVpcEndPoint", req, cb);
    }
    /**
     * 删除高优路由表的路由条目。
     */
    async DeleteHighPriorityRoutes(req, cb) {
        return this.request("DeleteHighPriorityRoutes", req, cb);
    }
    /**
     * 本接口（CreateServiceTemplate）用于创建协议端口模板。
     */
    async CreateServiceTemplate(req, cb) {
        return this.request("CreateServiceTemplate", req, cb);
    }
    /**
     * 本接口（InquiryPriceAllocateAddresses）用于新购弹性公网IP询价。
     */
    async InquiryPriceAllocateAddresses(req, cb) {
        return this.request("InquiryPriceAllocateAddresses", req, cb);
    }
    /**
     * 本接口（ModifyDirectConnectGatewayAttribute）用于修改专线网关属性
     */
    async ModifyDirectConnectGatewayAttribute(req, cb) {
        return this.request("ModifyDirectConnectGatewayAttribute", req, cb);
    }
    /**
     * 本接口（ModifySubnetAttribute）用于修改子网属性。
     */
    async ModifySubnetAttribute(req, cb) {
        return this.request("ModifySubnetAttribute", req, cb);
    }
    /**
     * 本接口（DescribeSgSnapshotFileContent）用于查询安全组快照文件内容。
     */
    async DescribeSgSnapshotFileContent(req, cb) {
        return this.request("DescribeSgSnapshotFileContent", req, cb);
    }
    /**
     * 本接口（DescribeNetworkInterfaces）用于查询弹性网卡列表。
     */
    async DescribeNetworkInterfaces(req, cb) {
        return this.request("DescribeNetworkInterfaces", req, cb);
    }
    /**
     * 本接口（DisableCcnRoutes）用于禁用已经启用的云联网（CCN）路由。
     */
    async DisableCcnRoutes(req, cb) {
        return this.request("DisableCcnRoutes", req, cb);
    }
    /**
     * 本接口(DescribeCcnRouteTableBroadcastPolicys)用于查询指定云联网路由表的路由传播策略。
     */
    async DescribeCcnRouteTableBroadcastPolicys(req, cb) {
        return this.request("DescribeCcnRouteTableBroadcastPolicys", req, cb);
    }
    /**
     * 本接口（CreateAddressTemplateGroup）用于创建IP地址模板集合。
     */
    async CreateAddressTemplateGroup(req, cb) {
        return this.request("CreateAddressTemplateGroup", req, cb);
    }
    /**
     * 本接口（AssociateNetworkAclSubnets）用于网络ACL关联VPC下的子网。
     */
    async AssociateNetworkAclSubnets(req, cb) {
        return this.request("AssociateNetworkAclSubnets", req, cb);
    }
    /**
     * 本接口（DescribeVpnGateways）用于查询VPN网关列表。
     */
    async DescribeVpnGateways(req, cb) {
        return this.request("DescribeVpnGateways", req, cb);
    }
    /**
     * 本接口（AssociateNetworkInterfaceSecurityGroups）用于弹性网卡绑定安全组（SecurityGroup）。
     */
    async AssociateNetworkInterfaceSecurityGroups(req, cb) {
        return this.request("AssociateNetworkInterfaceSecurityGroups", req, cb);
    }
    /**
     * 替换高优路由表和子网绑定关系。
     */
    async ReplaceHighPriorityRouteTableAssociation(req, cb) {
        return this.request("ReplaceHighPriorityRouteTableAssociation", req, cb);
    }
    /**
     * 本接口（EnableFlowLogs）用于启动流日志。
     */
    async EnableFlowLogs(req, cb) {
        return this.request("EnableFlowLogs", req, cb);
    }
    /**
     * 创建 IDC 通道
     */
    async CreateCdcLDCXList(req, cb) {
        return this.request("CreateCdcLDCXList", req, cb);
    }
    /**
     * 本接口（ModifyNatGatewayDestinationIpPortTranslationNatRule）用于修改NAT网关端口转发规则。
     */
    async ModifyNatGatewayDestinationIpPortTranslationNatRule(req, cb) {
        return this.request("ModifyNatGatewayDestinationIpPortTranslationNatRule", req, cb);
    }
    /**
     * 禁用SSL-VPN-CLIENT 证书
     */
    async DisableVpnGatewaySslClientCert(req, cb) {
        return this.request("DisableVpnGatewaySslClientCert", req, cb);
    }
    /**
     * 本接口（DescribeHaVips）用于查询高可用虚拟IP（HAVIP）列表。
     */
    async DescribeHaVips(req, cb) {
        return this.request("DescribeHaVips", req, cb);
    }
    /**
     * 本接口（CreateLocalGateway）用于创建用于CDC的本地网关。
     */
    async CreateLocalGateway(req, cb) {
        return this.request("CreateLocalGateway", req, cb);
    }
    /**
     * 本接口（ResetVpnGatewayInternetMaxBandwidth）用于调整VPN网关带宽上限。VPN网关带宽目前仅支持部分带宽范围内升降配，如【5,100】Mbps和【200,1000】Mbps，在各自带宽范围内可提升配额，跨范围提升配额和降配暂不支持，如果是包年包月VPN网关需要在有效期内。
     */
    async ResetVpnGatewayInternetMaxBandwidth(req, cb) {
        return this.request("ResetVpnGatewayInternetMaxBandwidth", req, cb);
    }
    /**
     * 本接口（ModifyVpnConnectionAttribute）用于修改VPN通道。
     */
    async ModifyVpnConnectionAttribute(req, cb) {
        return this.request("ModifyVpnConnectionAttribute", req, cb);
    }
    /**
     * 本接口（DescribePrivateNatGatewayTranslationNatRules）用于查询私网NAT网关源端转换规则
     */
    async DescribePrivateNatGatewayTranslationNatRules(req, cb) {
        return this.request("DescribePrivateNatGatewayTranslationNatRules", req, cb);
    }
    /**
     * 本接口（DisassociateDhcpIpWithAddressIp）用于将DhcpIp已绑定的弹性公网IP（EIP）解除绑定。<br />
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async DisassociateDhcpIpWithAddressIp(req, cb) {
        return this.request("DisassociateDhcpIpWithAddressIp", req, cb);
    }
    /**
     * 本接口（CreateHaVip）用于创建高可用虚拟IP（HAVIP）。
     */
    async CreateHaVip(req, cb) {
        return this.request("CreateHaVip", req, cb);
    }
    /**
     * 本接口（DescribeTenantCcns）用于获取要锁定的云联网实例列表。
该接口一般用来封禁出口限速的云联网实例, 目前联通内部运营系统通过云API调用, 因为出口限速无法按地域间封禁, 只能按更粗的云联网实例粒度封禁, 如果是地域间限速, 一般可以通过更细的限速实例粒度封禁（DescribeCrossBorderCcnRegionBandwidthLimits）
如有需要, 可以封禁任意云联网实例, 可接入到内部运营系统
     */
    async DescribeTenantCcns(req, cb) {
        return this.request("DescribeTenantCcns", req, cb);
    }
    /**
     * 创建高优路由表条目。
     */
    async CreateHighPriorityRoutes(req, cb) {
        return this.request("CreateHighPriorityRoutes", req, cb);
    }
    /**
     * 本接口（LockCcns）用于锁定云联网实例

该接口一般用来封禁出口限速的云联网实例, 目前联通内部运营系统通过云API调用, 因为出口限速无法按地域间封禁, 只能按更粗的云联网实例粒度封禁, 如果是地域间限速, 一般可以通过更细的限速实例粒度封禁（LockCcnBandwidths）

如有需要, 可以封禁任意限速实例, 可接入到内部运营系统
     */
    async LockCcns(req, cb) {
        return this.request("LockCcns", req, cb);
    }
    /**
     * 本接口（CreateRoutes）用于创建路由策略。
* 向指定路由表批量新增路由策略。
     */
    async CreateRoutes(req, cb) {
        return this.request("CreateRoutes", req, cb);
    }
    /**
     * 该接口用于编辑云联网路由表选择策略
     */
    async ModifyRouteTableSelectionPolicies(req, cb) {
        return this.request("ModifyRouteTableSelectionPolicies", req, cb);
    }
    /**
     * 本接口（DescribeSecurityGroupAssociationStatistics）用于查询安全组关联的实例统计。
     */
    async DescribeSecurityGroupAssociationStatistics(req, cb) {
        return this.request("DescribeSecurityGroupAssociationStatistics", req, cb);
    }
    /**
     * 本接口（DescribeIpGeolocationDatabaseUrl）用于获取IP地理位置库下载链接。
<font color="#FF0000">本接口即将下线，仅供存量用户使用，暂停新增用户。</font>
     */
    async DescribeIpGeolocationDatabaseUrl(req, cb) {
        return this.request("DescribeIpGeolocationDatabaseUrl", req, cb);
    }
    /**
     * 本接口 (ModifyAddressAttribute) 用于修改[弹性公网IP](https://cloud.tencent.com/document/product/213/1941)（简称 EIP）的名称。
     */
    async ModifyAddressAttribute(req, cb) {
        return this.request("ModifyAddressAttribute", req, cb);
    }
    /**
     * 查询流量调度规则
     */
    async DescribeTrafficQosPolicy(req, cb) {
        return this.request("DescribeTrafficQosPolicy", req, cb);
    }
    /**
     * 本接口（DescribeIPv6Addresses）用于查询一个或多个弹性公网 IPv6（简称 EIPv6）实例的详细信息。

- 支持查询您在指定地域的弹性公网 IPv6 和传统弹性公网 IPv6 实例信息
- 如果参数为空，返回当前用户一定数量（Limit所指定的数量，默认为20）的 EIPv6。
     */
    async DescribeIPv6Addresses(req, cb) {
        return this.request("DescribeIPv6Addresses", req, cb);
    }
    /**
     * 本接口（CreateFlowLog）用于创建网络流日志。
     */
    async CreateFlowLog(req, cb) {
        return this.request("CreateFlowLog", req, cb);
    }
    /**
     * 本接口(CreateRouteTable)用于创建路由表。
* 创建了VPC后，系统会创建一个默认路由表，所有新建的子网都会关联到默认路由表。默认情况下您可以直接使用默认路由表来管理您的路由策略。当您的路由策略较多时，您可以调用创建路由表接口创建更多路由表管理您的路由策略。
* 创建路由表同时可以绑定标签, 应答里的标签列表代表添加成功的标签。
     */
    async CreateRouteTable(req, cb) {
        return this.request("CreateRouteTable", req, cb);
    }
    /**
     * 本接口（ModifyPrivateNatGatewayAttribute）用于修改私网NAT网关属性
     */
    async ModifyPrivateNatGatewayAttribute(req, cb) {
        return this.request("ModifyPrivateNatGatewayAttribute", req, cb);
    }
    /**
     * 本接口（DeleteNetworkAcl）用于删除网络ACL。
     */
    async DeleteNetworkAcl(req, cb) {
        return this.request("DeleteNetworkAcl", req, cb);
    }
    /**
     * 本接口（DeleteVpcEndPointServiceWhiteList）用于删除终端节点服务白名单。
     */
    async DeleteVpcEndPointServiceWhiteList(req, cb) {
        return this.request("DeleteVpcEndPointServiceWhiteList", req, cb);
    }
    /**
     * 本接口（ModifyFlowLogAttribute）用于修改流日志属性。
     */
    async ModifyFlowLogAttribute(req, cb) {
        return this.request("ModifyFlowLogAttribute", req, cb);
    }
    /**
     * 本接口（DisassociateNetworkInterfaceSecurityGroups）用于弹性网卡解绑安全组。支持弹性网卡完全解绑安全组。
     */
    async DisassociateNetworkInterfaceSecurityGroups(req, cb) {
        return this.request("DisassociateNetworkInterfaceSecurityGroups", req, cb);
    }
    /**
     * 本接口（ResetRoutes）用于对某个路由表名称和所有路由策略（Route）进行重新设置。<br /> 注意: 调用本接口时先删除当前路由表中所有路由策略, 再保存新提交的路由策略内容, 会引起网络中断。
     */
    async ResetRoutes(req, cb) {
        return this.request("ResetRoutes", req, cb);
    }
    /**
     * 本接口（DeleteNetworkAclEntries）用于删除三元组网络ACL的入站规则和出站规则。在NetworkAclEntrySet参数中：
* 删除IPv4规则，需要传入NetworkAclIpv4EntryId。
* 删除IPv6规则，需要传入NetworkAclIpv6EntryId。
     */
    async DeleteNetworkAclEntries(req, cb) {
        return this.request("DeleteNetworkAclEntries", req, cb);
    }
    /**
     * 本接口（ModifyCcnRegionBandwidthLimitsType）用于修改后付费云联网实例修改带宽限速策略。
     */
    async ModifyCcnRegionBandwidthLimitsType(req, cb) {
        return this.request("ModifyCcnRegionBandwidthLimitsType", req, cb);
    }
    /**
     * 本接口(DescribeCcnRouteTableInputPolicys)用于查询指定云联网路由表的路由接收策略。
     */
    async DescribeCcnRouteTableInputPolicys(req, cb) {
        return this.request("DescribeCcnRouteTableInputPolicys", req, cb);
    }
    /**
     * 本接口（InquiryPriceRenewVpnGateway）用于续费VPN网关询价。目前仅支持IPSEC类型网关的询价。
     */
    async InquiryPriceRenewVpnGateway(req, cb) {
        return this.request("InquiryPriceRenewVpnGateway", req, cb);
    }
    /**
     * 本接口（DeleteSnapshotPolicies）用于删除快照策略。
     */
    async DeleteSnapshotPolicies(req, cb) {
        return this.request("DeleteSnapshotPolicies", req, cb);
    }
    /**
     * 本接口（DescribeVpcEndPointService）用于查询终端节点服务列表。
     */
    async DescribeVpcEndPointService(req, cb) {
        return this.request("DescribeVpcEndPointService", req, cb);
    }
    /**
     * 刷新专线直连nat路由，更新nat到专线的路由表
     */
    async RefreshDirectConnectGatewayRouteToNatGateway(req, cb) {
        return this.request("RefreshDirectConnectGatewayRouteToNatGateway", req, cb);
    }
    /**
     * 本接口（CreatePrivateNatGatewayTranslationNatRule）用于创建私网NAT网关源端转换规则。
     */
    async CreatePrivateNatGatewayTranslationNatRule(req, cb) {
        return this.request("CreatePrivateNatGatewayTranslationNatRule", req, cb);
    }
    /**
     * 本接口（ModifyVpcEndPointAttribute）用于修改终端节点属性。
     */
    async ModifyVpcEndPointAttribute(req, cb) {
        return this.request("ModifyVpcEndPointAttribute", req, cb);
    }
    /**
     * 修改高优路由表条目属性。
     */
    async ModifyHighPriorityRouteAttribute(req, cb) {
        return this.request("ModifyHighPriorityRouteAttribute", req, cb);
    }
    /**
     * 本接口（DisassociateVpcEndPointSecurityGroups）用于终端节点解绑安全组。
     */
    async DisassociateVpcEndPointSecurityGroups(req, cb) {
        return this.request("DisassociateVpcEndPointSecurityGroups", req, cb);
    }
    /**
     * 本接口（CloneSecurityGroup）用于根据存量的安全组，克隆创建出同样规则配置的安全组。默认仅克隆安全组及其规则信息，可通过入参开启克隆安全组标签信息。
     */
    async CloneSecurityGroup(req, cb) {
        return this.request("CloneSecurityGroup", req, cb);
    }
    /**
     * 本接口（EnableVpcEndPointConnect）用于是否接受终端节点连接请求。
     */
    async EnableVpcEndPointConnect(req, cb) {
        return this.request("EnableVpcEndPointConnect", req, cb);
    }
    /**
     * 本接口（CreateAndAttachNetworkInterface）用于创建弹性网卡并绑定云服务器。
* 创建弹性网卡时可以指定内网IP，并且可以指定一个主IP，指定的内网IP必须在弹性网卡所在子网内，而且不能被占用。
* 创建弹性网卡时可以指定需要申请的内网IP数量，系统会随机生成内网IP地址。
* 一个弹性网卡支持绑定的IP地址是有限制的，更多资源限制信息详见<a href="/document/product/576/18527">弹性网卡使用限制</a>。
* 创建弹性网卡同时可以绑定已有安全组。
* 创建弹性网卡同时可以绑定标签, 应答里的标签列表代表添加成功的标签。
>?本接口为异步接口，可调用 [DescribeVpcTaskResult](https://cloud.tencent.com/document/api/215/59037) 接口查询任务执行结果，待任务执行成功后再进行其他操作。
>
     */
    async CreateAndAttachNetworkInterface(req, cb) {
        return this.request("CreateAndAttachNetworkInterface", req, cb);
    }
    /**
     * 本接口（ModifyVpcEndPointServiceWhiteList）用于修改终端节点服务白名单属性。
     */
    async ModifyVpcEndPointServiceWhiteList(req, cb) {
        return this.request("ModifyVpcEndPointServiceWhiteList", req, cb);
    }
    /**
     * 本接口（DescribeNatGateways）用于查询 NAT 网关。
     */
    async DescribeNatGateways(req, cb) {
        return this.request("DescribeNatGateways", req, cb);
    }
    /**
     * 重置高优路由表。
     */
    async ResetHighPriorityRoutes(req, cb) {
        return this.request("ResetHighPriorityRoutes", req, cb);
    }
    /**
     * 本接口（DescribeVpcs）用于查询私有网络列表。
     */
    async DescribeVpcs(req, cb) {
        return this.request("DescribeVpcs", req, cb);
    }
    /**
     * 本接口（MigrateNetworkInterface）用于弹性网卡迁移。
本接口是异步完成，如需查询异步任务执行结果，请使用本接口返回的`RequestId`轮询`DescribeVpcTaskResult`接口。
     */
    async MigrateNetworkInterface(req, cb) {
        return this.request("MigrateNetworkInterface", req, cb);
    }
    /**
     * 查询高优路由表。
     */
    async DescribeHighPriorityRouteTables(req, cb) {
        return this.request("DescribeHighPriorityRouteTables", req, cb);
    }
    /**
     * 本接口（AcceptAttachCcnInstances）用于跨账号关联实例时，云联网所有者接受并同意关联操作。
     */
    async AcceptAttachCcnInstances(req, cb) {
        return this.request("AcceptAttachCcnInstances", req, cb);
    }
    /**
     * 本接口（DescribeGatewayFlowQos）用于查询网关来访IP流控带宽。
     */
    async DescribeGatewayFlowQos(req, cb) {
        return this.request("DescribeGatewayFlowQos", req, cb);
    }
    /**
     * 1. 该接口用于查询账户下的IPV6转换实例及其绑定的转换规则信息
2. 支持过滤查询
     */
    async DescribeIp6Translators(req, cb) {
        return this.request("DescribeIp6Translators", req, cb);
    }
    /**
     * 本接口（DisableGatewayFlowMonitor）用于关闭网关流量监控。
     */
    async DisableGatewayFlowMonitor(req, cb) {
        return this.request("DisableGatewayFlowMonitor", req, cb);
    }
    /**
     * 本接口（CreateVpc）用于创建私有网络（VPC）。
* 用户可以创建的最小网段子网掩码为28（有16个IP地址），10.0.0.0/12，172.16.0.0/12最大网段子网掩码为12（1,048,576个IP地址），192.168.0.0/16最大网段子网掩码为16（65,536个IP地址）如果需要规划VPC网段请参见[网络规划](https://cloud.tencent.com/document/product/215/30313)。
* 同一个地域能创建的VPC资源个数也是有限制的，详见 <a href="https://cloud.tencent.com/doc/product/215/537" title="VPC使用限制">VPC使用限制</a>，如果需要申请更多资源，请提交[工单申请](https://console.cloud.tencent.com/workorder/category)。
* 创建VPC同时可以绑定标签, 应答里的标签列表代表添加成功的标签。
     */
    async CreateVpc(req, cb) {
        return this.request("CreateVpc", req, cb);
    }
    /**
     * 本接口（CheckAssistantCidr）用于检查辅助CIDR是否与存量路由、对等连接（对端VPC的CIDR）等资源存在冲突。如果存在重叠，则返回重叠的资源。
* 检测辅助CIDR是否与当前VPC的主CIDR和辅助CIDR存在重叠。
* 检测辅助CIDR是否与当前VPC的路由的目的端存在重叠。
* 检测辅助CIDR是否与当前VPC的对等连接，对端VPC下的主CIDR或辅助CIDR存在重叠。
     */
    async CheckAssistantCidr(req, cb) {
        return this.request("CheckAssistantCidr", req, cb);
    }
    /**
     * 本接口（ModifyNetworkAclAttribute）用于修改网络ACL属性。
     */
    async ModifyNetworkAclAttribute(req, cb) {
        return this.request("ModifyNetworkAclAttribute", req, cb);
    }
    /**
     * 本接口（DisableSnapshotPolicies）用于停用快照策略。
     */
    async DisableSnapshotPolicies(req, cb) {
        return this.request("DisableSnapshotPolicies", req, cb);
    }
    /**
     * 本接口（DeletePrivateNatGatewayTranslationNatRule）用于删除私网NAT网关源端转换规则
     */
    async DeletePrivateNatGatewayTranslationNatRule(req, cb) {
        return this.request("DeletePrivateNatGatewayTranslationNatRule", req, cb);
    }
    /**
     * 本接口（DescribeDhcpIps）用于查询DhcpIp列表
     */
    async DescribeDhcpIps(req, cb) {
        return this.request("DescribeDhcpIps", req, cb);
    }
    /**
     * 本接口 (AssociateAddress) 用于将[弹性公网IP](https://cloud.tencent.com/document/product/213/1941)（简称 EIP）绑定到实例或弹性网卡的指定内网 IP 上。
* 将 EIP 绑定到实例（CVM）上，其本质是将 EIP 绑定到实例上主网卡的主内网 IP 上。
* 将 EIP 绑定到主网卡的主内网IP时，如主内网IP已绑定普通公网IP，必须先退还才能绑定EIP。
* 将 EIP 绑定到指定网卡的内网 IP上（非主网卡的主内网IP），则必须先解绑该 EIP，才能再绑定新的。
* 将 EIP 绑定到内网型CLB实例的功能处于内测阶段，如需使用，请提交[内测申请](https://cloud.tencent.com/apply/p/4kxj7picqci)。
* 将 EIP 绑定到NAT网关，请使用接口[AssociateNatGatewayAddress](https://cloud.tencent.com/document/product/215/36722)
* EIP 如果欠费或被封堵，则不能被绑定。
* 只有状态为 UNBIND 的 EIP 才能够被绑定。
     */
    async AssociateAddress(req, cb) {
        return this.request("AssociateAddress", req, cb);
    }
    /**
     * 本接口（DeleteVpcPeeringConnection）用于删除私有网络对等连接。
     */
    async DeleteVpcPeeringConnection(req, cb) {
        return this.request("DeleteVpcPeeringConnection", req, cb);
    }
    /**
     * 本接口（DescribeFlowLogs）用于查询获取流日志集合。
     */
    async DescribeFlowLogs(req, cb) {
        return this.request("DescribeFlowLogs", req, cb);
    }
    /**
     * 本接口（DescribeDirectConnectGatewayCcnRoutes）用于查询专线网关的云联网路由（IDC网段）
     */
    async DescribeDirectConnectGatewayCcnRoutes(req, cb) {
        return this.request("DescribeDirectConnectGatewayCcnRoutes", req, cb);
    }
    /**
     * 本接口（CreateNetworkAclEntries）用于增量添加网络ACL三元组的入站规则和出站规则。
     */
    async CreateNetworkAclEntries(req, cb) {
        return this.request("CreateNetworkAclEntries", req, cb);
    }
    /**
     * 接口支持删除共享带宽包，包括[设备带宽包](https://cloud.tencent.com/document/product/684/15246#.E8.AE.BE.E5.A4.87.E5.B8.A6.E5.AE.BD.E5.8C.85)和[IP带宽包](https://cloud.tencent.com/document/product/684/15246#ip-.E5.B8.A6.E5.AE.BD.E5.8C.85)
     */
    async DeleteBandwidthPackage(req, cb) {
        return this.request("DeleteBandwidthPackage", req, cb);
    }
    /**
     * 1. 该接口用于释放IPV6转换实例，支持批量。
2.  如果IPV6转换实例建立有转换规则，会一并删除。
     */
    async DeleteIp6Translators(req, cb) {
        return this.request("DeleteIp6Translators", req, cb);
    }
    /**
     * 本接口（DescribeRoutes）用于查询路由列表。
     */
    async DescribeRoutes(req, cb) {
        return this.request("DescribeRoutes", req, cb);
    }
    /**
     * 本接口（DeleteVpnGatewayRoutes）用于删除VPN网关路由
     */
    async DeleteVpnGatewayRoutes(req, cb) {
        return this.request("DeleteVpnGatewayRoutes", req, cb);
    }
    /**
     * 替换高优路由表条目信息。
     */
    async ReplaceHighPriorityRoutes(req, cb) {
        return this.request("ReplaceHighPriorityRoutes", req, cb);
    }
    /**
     * 修改CCN关联实例属性，目前仅修改备注description
     */
    async ModifyCcnAttachedInstancesAttribute(req, cb) {
        return this.request("ModifyCcnAttachedInstancesAttribute", req, cb);
    }
    /**
     * 本接口（DeleteNatGateway）用于删除NAT网关。
删除 NAT 网关后，系统会自动删除路由表中包含此 NAT 网关的路由项，同时也会解绑弹性公网IP（EIP）。
     */
    async DeleteNatGateway(req, cb) {
        return this.request("DeleteNatGateway", req, cb);
    }
    /**
     * 本接口（DescribeRouteList）用于查询路由条目列表。
     */
    async DescribeRouteList(req, cb) {
        return this.request("DescribeRouteList", req, cb);
    }
    /**
     * 本接口（CreateNetDetect）用于创建网络探测。
     */
    async CreateNetDetect(req, cb) {
        return this.request("CreateNetDetect", req, cb);
    }
    /**
     * 修改高优路由表属性
     */
    async ModifyHighPriorityRouteTableAttribute(req, cb) {
        return this.request("ModifyHighPriorityRouteTableAttribute", req, cb);
    }
    /**
     * 本接口（ReleaseIPv6Addresses）用于释放一个或多个弹性公网IPv6（简称EIPv6）实例。

- 支持对已申请到的弹性公网 IPv6 实例进行释放操作，如需再次使用，请重新申请。
- 只有状态为 UNBIND 的 EIPv6 实例才能进行释放操作。
     */
    async ReleaseIPv6Addresses(req, cb) {
        return this.request("ReleaseIPv6Addresses", req, cb);
    }
    /**
     * 删除内网保留IP
     */
    async DeleteReserveIpAddresses(req, cb) {
        return this.request("DeleteReserveIpAddresses", req, cb);
    }
    /**
     * 修改 IDC通道信息
     */
    async ModifyCdcLDCXAttribute(req, cb) {
        return this.request("ModifyCdcLDCXAttribute", req, cb);
    }
    /**
     * 本接口（DeleteVpcEndPointService）用于删除终端节点服务。
     */
    async DeleteVpcEndPointService(req, cb) {
        return this.request("DeleteVpcEndPointService", req, cb);
    }
    /**
     * 本接口（CreateNetworkAclQuintupleEntries）用于增量网络ACL五元组的入站规则和出站规则。
     */
    async CreateNetworkAclQuintupleEntries(req, cb) {
        return this.request("CreateNetworkAclQuintupleEntries", req, cb);
    }
    /**
     * 本接口（DeleteVpnGateway）用于删除VPN网关。
     */
    async DeleteVpnGateway(req, cb) {
        return this.request("DeleteVpnGateway", req, cb);
    }
    /**
     * 本接口（DescribeVpcEndPointServiceWhiteList）用于查询终端节点服务的服务白名单列表。
     */
    async DescribeVpcEndPointServiceWhiteList(req, cb) {
        return this.request("DescribeVpcEndPointServiceWhiteList", req, cb);
    }
    /**
     * 接口用于调整[共享带宽包](https://cloud.tencent.com/document/product/684/15245)(BWP)带宽
     */
    async ModifyBandwidthPackageBandwidth(req, cb) {
        return this.request("ModifyBandwidthPackageBandwidth", req, cb);
    }
    /**
     * 本接口（DescribePrivateNatGatewayLimits）用于查询可创建的私网NAT网关配额数量
     */
    async DescribePrivateNatGatewayLimits(req, cb) {
        return this.request("DescribePrivateNatGatewayLimits", req, cb);
    }
    /**
     * 本接口（ModifySecurityGroupPolicies）用于重置安全组出站和入站规则（SecurityGroupPolicy）。

<ul>
<li>该接口不支持自定义索引 PolicyIndex。</li>
<li>在 SecurityGroupPolicySet 参数中：<ul>
    <li> 如果指定 SecurityGroupPolicySet.Version 为0, 表示清空所有规则，并忽略 Egress 和 Ingress。</li>
    <li> 如果指定 SecurityGroupPolicySet.Version 不为0, 在添加出站和入站规则（Egress 和 Ingress）时：<ul>
        <li>Protocol 字段支持输入 TCP, UDP, ICMP, ICMPV6, GRE, ALL。</li>
        <li>CidrBlock 字段允许输入符合 cidr 格式标准的任意字符串。在基础网络中，如果 CidrBlock 包含您的账户内的云服务器之外的设备在腾讯云的内网 IP，并不代表此规则允许您访问这些设备，租户之间网络隔离规则优先于安全组中的内网规则。</li>
        <li>Ipv6CidrBlock 字段允许输入符合 IPv6 cidr 格式标准的任意字符串。在基础网络中，如果Ipv6CidrBlock 包含您的账户内的云服务器之外的设备在腾讯云的内网 IPv6，并不代表此规则允许您访问这些设备，租户之间网络隔离规则优先于安全组中的内网规则。</li>
        <li>SecurityGroupId 字段允许输入与待修改的安全组位于相同项目中的安全组 ID，包括这个安全组 ID 本身，代表安全组下所有云服务器的内网 IP。使用这个字段时，这条规则用来匹配网络报文的过程中会随着被使用的这个ID所关联的云服务器变化而变化，不需要重新修改。</li>
        <li>Port 字段允许输入一个单独端口号，或者用减号分隔的两个端口号代表端口范围，例如80或8000-8010。只有当 Protocol 字段是 TCP 或 UDP 时，Port 字段才被接受。</li>
        <li>Action 字段只允许输入 ACCEPT 或 DROP。</li>
        <li>CidrBlock, Ipv6CidrBlock, SecurityGroupId, AddressTemplate 四者是排他关系，不允许同时输入，Protocol + Port 和 ServiceTemplate 二者是排他关系，不允许同时输入。</li>
</ul></li></ul></li>
</ul>
     */
    async ModifySecurityGroupPolicies(req, cb) {
        return this.request("ModifySecurityGroupPolicies", req, cb);
    }
    /**
     * 本接口（ CreatePrivateNatGatewayTranslationAclRule）用于创建私网NAT网关源端转换访问控制规则
     */
    async CreatePrivateNatGatewayTranslationAclRule(req, cb) {
        return this.request("CreatePrivateNatGatewayTranslationAclRule", req, cb);
    }
    /**
     * 本接口(DescribeSecurityGroupLimits)用于查询用户安全组配额。
     */
    async DescribeSecurityGroupLimits(req, cb) {
        return this.request("DescribeSecurityGroupLimits", req, cb);
    }
    /**
     * 查询IDC使用的 VLAN
     */
    async DescribeCdcUsedIdcVlan(req, cb) {
        return this.request("DescribeCdcUsedIdcVlan", req, cb);
    }
    /**
     * 本接口（DescribeSecurityGroupReferences）用于查询安全组被引用信息。
     */
    async DescribeSecurityGroupReferences(req, cb) {
        return this.request("DescribeSecurityGroupReferences", req, cb);
    }
    /**
     * 本接口（ModifyIpv6AddressesAttribute）用于修改弹性网卡内网IPv6地址属性。
     */
    async ModifyIpv6AddressesAttribute(req, cb) {
        return this.request("ModifyIpv6AddressesAttribute", req, cb);
    }
    /**
     * 本接口（DescribeDirectConnectGateways）用于查询专线网关。
     */
    async DescribeDirectConnectGateways(req, cb) {
        return this.request("DescribeDirectConnectGateways", req, cb);
    }
    /**
     * 本接口（RenewVpnGateway）用于预付费（包年包月）VPN网关续费。目前只支持IPSEC网关。
     */
    async RenewVpnGateway(req, cb) {
        return this.request("RenewVpnGateway", req, cb);
    }
    /**
     * 本接口（MigratePrivateIpAddress）用于弹性网卡内网IP迁移。
* 该接口用于将一个内网IP从一个弹性网卡上迁移到另外一个弹性网卡，主IP地址不支持迁移。
* 迁移前后的弹性网卡必须在同一个子网内。

本接口是异步完成，如需查询异步任务执行结果，请使用本接口返回的`RequestId`轮询`DescribeVpcTaskResult`接口。
     */
    async MigratePrivateIpAddress(req, cb) {
        return this.request("MigratePrivateIpAddress", req, cb);
    }
    /**
     * 本接口（DetachSnapshotInstances）用于快照策略解关联实例。
     */
    async DetachSnapshotInstances(req, cb) {
        return this.request("DetachSnapshotInstances", req, cb);
    }
    /**
     * 本接口（DescribeServiceTemplates）用于查询协议端口模板。
     */
    async DescribeServiceTemplates(req, cb) {
        return this.request("DescribeServiceTemplates", req, cb);
    }
    /**
     * 本接口（HaVipDisassociateAddressIp）用于将高可用虚拟IP（HAVIP）已绑定的弹性公网IP（EIP）解除绑定。<br />
本接口是异步完成，如需查询异步任务执行结果，请使用本接口返回的`RequestId`轮询`DescribeVpcTaskResult`接口。
     */
    async HaVipDisassociateAddressIp(req, cb) {
        return this.request("HaVipDisassociateAddressIp", req, cb);
    }
    /**
     * 查询专线绑定NAT的路由
     */
    async DescribeNatGatewayDirectConnectGatewayRoute(req, cb) {
        return this.request("DescribeNatGatewayDirectConnectGatewayRoute", req, cb);
    }
    /**
     * 本接口（UnlockCcns）用于解锁云联网实例

该接口一般用来解封禁出口限速的云联网实例, 目前联通内部运营系统通过云API调用, 因为出口限速无法按地域间解封禁, 只能按更粗的云联网实例粒度解封禁, 如果是地域间限速, 一般可以通过更细的限速实例粒度解封禁（UnlockCcnBandwidths）

如有需要, 可以封禁任意限速实例, 可接入到内部运营系统
     */
    async UnlockCcns(req, cb) {
        return this.request("UnlockCcns", req, cb);
    }
    /**
     * 本接口（HaVipAssociateAddressIp）用于高可用虚拟IP（HAVIP）绑定弹性公网IP（EIP）。<br />
本接口是异步完成，如需查询异步任务执行结果，请使用本接口返回的`RequestId`轮询`DescribeVpcTaskResult`接口。
     */
    async HaVipAssociateAddressIp(req, cb) {
        return this.request("HaVipAssociateAddressIp", req, cb);
    }
    /**
     * 本接口（CheckDefaultSubnet）用于预判是否可建默认子网。
     */
    async CheckDefaultSubnet(req, cb) {
        return this.request("CheckDefaultSubnet", req, cb);
    }
    /**
     * 本接口（DownloadVpnGatewaySslClientCert）用于下载SSL-VPN-CLIENT 客户端证书。
     */
    async DownloadVpnGatewaySslClientCert(req, cb) {
        return this.request("DownloadVpnGatewaySslClientCert", req, cb);
    }
    /**
     * 本接口 (DescribeAddressQuota) 用于查询您账户的[弹性公网IP](https://cloud.tencent.com/document/product/213/1941)（简称 EIP）在当前地域的配额信息。配额详情可参见 [EIP 产品简介](https://cloud.tencent.com/document/product/213/5733)。
     */
    async DescribeAddressQuota(req, cb) {
        return this.request("DescribeAddressQuota", req, cb);
    }
    /**
     * 本接口（CreateCcn）用于创建云联网（CCN）。<br />
* 创建云联网同时可以绑定标签, 应答里的标签列表代表添加成功的标签。
* 每个账号能创建的云联网实例个数是有限的，详请参考产品文档。如果需要扩充请联系在线客服。
     */
    async CreateCcn(req, cb) {
        return this.request("CreateCcn", req, cb);
    }
    /**
     * 本接口（DescribeSecurityGroups）用于查询安全组。
     */
    async DescribeSecurityGroups(req, cb) {
        return this.request("DescribeSecurityGroups", req, cb);
    }
    /**
     * 本接口（CreateVpnGateway）用于创建VPN网关。
     */
    async CreateVpnGateway(req, cb) {
        return this.request("CreateVpnGateway", req, cb);
    }
    /**
     * 本接口（DescribeSecurityGroupPolicies）用于查询安全组规则。
     */
    async DescribeSecurityGroupPolicies(req, cb) {
        return this.request("DescribeSecurityGroupPolicies", req, cb);
    }
    /**
     * 本接口（DescribeAssistantCidr）用于查询辅助CIDR列表。
     */
    async DescribeAssistantCidr(req, cb) {
        return this.request("DescribeAssistantCidr", req, cb);
    }
    /**
     * 本接口（DescribeClassicLinkInstances）用于查询私有网络和基础网络设备互通列表。
     */
    async DescribeClassicLinkInstances(req, cb) {
        return this.request("DescribeClassicLinkInstances", req, cb);
    }
    /**
     * 本接口（ClearRouteTableSelectionPolicies）用于清空指定云联网的路由表选择策略。
     */
    async ClearRouteTableSelectionPolicies(req, cb) {
        return this.request("ClearRouteTableSelectionPolicies", req, cb);
    }
    /**
     * EIP修改带宽询价
     */
    async InquiryPriceModifyAddressesBandwidth(req, cb) {
        return this.request("InquiryPriceModifyAddressesBandwidth", req, cb);
    }
    /**
     * 本接口（AllocateIPv6Addresses）用于申请一个或多个弹性公网IPv6（简称EIPv6）实例。

- EIPv6 是您在腾讯云某个地域可以独立申请和持有的，固定不变的公网 IPv6 地址，提供与弹性公网 IPv4 一致的产品体验。
- 通过弹性公网 IPv6，您可以快速将 EIPv6 实例绑定到云资源的内网 IPv6 地址上，实现为云资源快速开通 IPv6 公网带宽。
- 您还可以按需将 EIPv6 实例绑定到其他云资源上，从而屏蔽实例故障。
     */
    async AllocateIPv6Addresses(req, cb) {
        return this.request("AllocateIPv6Addresses", req, cb);
    }
    /**
     * 本接口（ModifyAssistantCidr）用于批量修改辅助CIDR，支持新增和删除。
     */
    async ModifyAssistantCidr(req, cb) {
        return this.request("ModifyAssistantCidr", req, cb);
    }
    /**
     * 本接口（DeleteNatGatewayDestinationIpPortTranslationNatRule）用于删除NAT网关端口转发规则。
     */
    async DeleteNatGatewayDestinationIpPortTranslationNatRule(req, cb) {
        return this.request("DeleteNatGatewayDestinationIpPortTranslationNatRule", req, cb);
    }
    /**
     * 本接口 (CreateTrafficPackages) 用于创建共享流量包。
     */
    async CreateTrafficPackages(req, cb) {
        return this.request("CreateTrafficPackages", req, cb);
    }
    /**
     * 本接口（DescribeSnapshotFiles）用于查询快照文件。
     */
    async DescribeSnapshotFiles(req, cb) {
        return this.request("DescribeSnapshotFiles", req, cb);
    }
    /**
     * 本接口（CreateDhcpIp）用于创建DhcpIp。
     */
    async CreateDhcpIp(req, cb) {
        return this.request("CreateDhcpIp", req, cb);
    }
    /**
     * 查询虚拟连接
     */
    async DescribeCdcNetPlanes(req, cb) {
        return this.request("DescribeCdcNetPlanes", req, cb);
    }
    /**
     * 本接口（ResumeSnapshotInstance）用于根据备份内容恢复安全组策略。
     */
    async ResumeSnapshotInstance(req, cb) {
        return this.request("ResumeSnapshotInstance", req, cb);
    }
    /**
     * 本接口（SetVpnGatewaysRenewFlag）用于设置VPNGW续费标记。
     */
    async SetVpnGatewaysRenewFlag(req, cb) {
        return this.request("SetVpnGatewaysRenewFlag", req, cb);
    }
    /**
     * 本接口（DescribeSnapshotPolicies）用于查询快照策略。
     */
    async DescribeSnapshotPolicies(req, cb) {
        return this.request("DescribeSnapshotPolicies", req, cb);
    }
    /**
     * 本接口（ModifyIp6AddressesBandwidth）用于调整传统弹性公网 IPv6 实例的带宽上限。

- 仅支持对传统弹性公网 IPv6 实例的带宽上限进行调整。
- 如需调整弹性公网 IPv6 实例的带宽上限，请使用 ModifyIPv6AddressesBandwidth 接口。
     */
    async ModifyIp6AddressesBandwidth(req, cb) {
        return this.request("ModifyIp6AddressesBandwidth", req, cb);
    }
    /**
     * 本接口（CreateVpcEndPoint）用于创建终端节点。
     */
    async CreateVpcEndPoint(req, cb) {
        return this.request("CreateVpcEndPoint", req, cb);
    }
    /**
     * 本接口（CreateSecurityGroupWithPolicies）用于创建新的安全组（SecurityGroup），并且可以同时添加安全组规则（SecurityGroupPolicy）。
* 每个账户下每个地域的每个项目的<a href="https://cloud.tencent.com/document/product/213/12453">安全组数量限制</a>。
* 新建的安全组的入站和出站规则默认都是全部拒绝，在创建后通常您需要再调用<a href="https://cloud.tencent.com/document/product/215/15807">CreateSecurityGroupPolicies</a>
将安全组的规则设置为需要的规则。

安全组规则说明：
* Version安全组规则版本号，用户每次更新安全规则版本会自动加1，防止您更新的路由规则已过期，不填不考虑冲突。
* Protocol字段支持输入TCP, UDP, ICMP, ICMPV6, GRE, ALL。
* CidrBlock字段允许输入符合cidr格式标准的任意字符串。(展开)在基础网络中，如果CidrBlock包含您的账户内的云服务器之外的设备在腾讯云的内网IP，并不代表此规则允许您访问这些设备，租户之间网络隔离规则优先于安全组中的内网规则。
* Ipv6CidrBlock字段允许输入符合IPv6 cidr格式标准的任意字符串。(展开)在基础网络中，如果Ipv6CidrBlock包含您的账户内的云服务器之外的设备在腾讯云的内网IPv6，并不代表此规则允许您访问这些设备，租户之间网络隔离规则优先于安全组中的内网规则。
* SecurityGroupId字段允许输入与待修改的安全组位于相同项目中的安全组ID，包括这个安全组ID本身，代表安全组下所有云服务器的内网IP。使用这个字段时，这条规则用来匹配网络报文的过程中会随着被使用的这个ID所关联的云服务器变化而变化，不需要重新修改。
* Port字段允许输入一个单独端口号，或者用减号分隔的两个端口号代表端口范围，例如80或8000-8010。只有当Protocol字段是TCP或UDP时，Port字段才被接受，即Protocol字段不是TCP或UDP时，Protocol和Port是排他关系，不允许同时输入，否则会接口报错。
* Action字段只允许输入ACCEPT或DROP。
* CidrBlock, Ipv6CidrBlock, SecurityGroupId, AddressTemplate四者是排他关系，不允许同时输入，Protocol + Port和ServiceTemplate二者是排他关系，不允许同时输入。
* 一次请求中只能创建单个方向的规则, 如果需要指定索引（PolicyIndex）参数, 多条规则的索引必须一致。
     */
    async CreateSecurityGroupWithPolicies(req, cb) {
        return this.request("CreateSecurityGroupWithPolicies", req, cb);
    }
    /**
     * 本接口（ReturnNormalAddresses）用于解绑并释放普通公网IP。
为完善公网IP的访问管理功能，此接口于2022年12月15日升级优化鉴权功能，升级后子用户调用此接口需向主账号申请CAM策略授权，否则可能调用失败。您可以提前为子账号配置操作授权，详情见[授权指南](https://cloud.tencent.com/document/product/598/34545)。
     */
    async ReturnNormalAddresses(req, cb) {
        return this.request("ReturnNormalAddresses", req, cb);
    }
    /**
     * 本接口（ModifyVpcAttribute）用于修改私有网络（VPC）的相关属性。
     */
    async ModifyVpcAttribute(req, cb) {
        return this.request("ModifyVpcAttribute", req, cb);
    }
    /**
     * 本接口（DeletePrivateNatGateway）用于删除私网NAT网关。
     */
    async DeletePrivateNatGateway(req, cb) {
        return this.request("DeletePrivateNatGateway", req, cb);
    }
    /**
     * 创建路由型VPN网关的目的路由
     */
    async CreateVpnGatewayRoutes(req, cb) {
        return this.request("CreateVpnGatewayRoutes", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249665, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.vrs = void 0;
const v20200824_1 = require("./v20200824");
exports.vrs = {
    v20200824: v20200824_1.v20200824,
};

}, function(modId) { var map = {"./v20200824":1738984249666}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249666, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20200824 = void 0;
const Models = require("./vrs_models");
const vrs_client_1 = require("./vrs_client");
exports.v20200824 = {
    Client: vrs_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./vrs_models":1738984249667,"./vrs_client":1738984249668}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249667, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249668, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * vrs client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("vrs.tencentcloudapi.com", "2020-08-24", clientConfig);
    }
    /**
     * 该接口用于查询复刻音色详细信息。
     */
    async GetVRSVoiceTypeInfo(req, cb) {
        return this.request("GetVRSVoiceTypeInfo", req, cb);
    }
    /**
     * 下载声音复刻离线模型
     */
    async DownloadVRSModel(req, cb) {
        return this.request("DownloadVRSModel", req, cb);
    }
    /**
     * 声音复刻取消任务接口
     */
    async CancelVRSTask(req, cb) {
        return this.request("CancelVRSTask", req, cb);
    }
    /**
     * 本接口用于检测音频的环境和音频质量。
对于一句话声音复刻，音频时长需大于3s，小于15s，文件大小不能超过2MB，音频需为单声道，位深为16bit。建议格式：wav、单声道、采样率48kHz或24kHz
• 请求方法为 HTTP POST , Content-Type为"application/json; charset=utf-8"
• 签名方法参考 公共参数 中签名方法v3。
     */
    async DetectEnvAndSoundQuality(req, cb) {
        return this.request("DetectEnvAndSoundQuality", req, cb);
    }
    /**
     * 在调用声音复刻创建任务请求接口后，有回调和轮询两种方式获取识别结果。（注意：回调方式目前仅支持轻量版声音复刻）
• 当采用回调方式时，识别完成后会将结果通过 POST 请求的形式通知到用户在请求时填写的回调 URL，具体请参见 [“声音复刻任务创建接口”](https://cloud.tencent.com/document/product/1283/90064) CallbackUrl参数说明 。
• 当采用轮询方式时，需要主动提交任务ID来轮询识别结果，共有任务成功、等待、执行中和失败四种结果，具体信息请参见下文说明。
• 请求方法为 HTTP POST , Content-Type为"application/json; charset=utf-8"
• 签名方法参考 公共参数 中签名方法v3。
     */
    async DescribeVRSTaskStatus(req, cb) {
        return this.request("DescribeVRSTaskStatus", req, cb);
    }
    /**
     * 本接口服务对提交音频进行声音复刻任务创建接口，异步返回复刻结果。
• 请求方法为 HTTP POST , Content-Type为"application/json; charset=utf-8"
• 签名方法参考 公共参数 中签名方法v3。
     */
    async CreateVRSTask(req, cb) {
        return this.request("CreateVRSTask", req, cb);
    }
    /**
     * 查询复刻音色
     */
    async GetVRSVoiceTypes(req, cb) {
        return this.request("GetVRSVoiceTypes", req, cb);
    }
    /**
     * 本接口用于获取声音复刻训练文本信息。
 请求方法为 HTTP POST , Content-Type为"application/json; charset=utf-8"
• 签名方法参考 公共参数 中签名方法v3。
• 当复刻类型为一句话声音复刻时，生成的TextId有效期为7天，且在成功创建一次复刻任务后失效。
     */
    async GetTrainingText(req, cb) {
        return this.request("GetTrainingText", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249669, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.vtc = void 0;
const v20240223_1 = require("./v20240223");
exports.vtc = {
    v20240223: v20240223_1.v20240223,
};

}, function(modId) { var map = {"./v20240223":1738984249670}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249670, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20240223 = void 0;
const Models = require("./vtc_models");
const vtc_client_1 = require("./vtc_client");
exports.v20240223 = {
    Client: vtc_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./vtc_models":1738984249671,"./vtc_client":1738984249672}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249671, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249672, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * vtc client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("vtc.tencentcloudapi.com", "2024-02-23", clientConfig);
    }
    /**
     * ###### 支持音色种别列表
| 音色名称                 | 性别 | 目标语言         | 音色ID |
| ------------------------ | ---- | ---------------- | ------ |
| Florian Multilingual     | 男 | 德语(德国)       | 701001 |
| Seraphina                | 女  | 德语(德国)       | 701002 |
| Ada Multilingual         | 女 | 英语(英国)       | 701003 |
| Ollie Multilingual       | 男  | 英语(英国)       | 701004 |
| Ava Multilingual         | 女 | 英语(美国)       | 701005 |
| Andrew Multilingual      | 男  | 英语(美国)       | 701006 |
| Emma Multilingual        | 女  | 英语(美国)       | 701007 |
| Brian Multilingual       | 男  | 英语(美国)       | 701008 |
| Jenny Multilingual       | 女  | 英语(美国)       | 701009 |
| Ryan Multilingual        | 男  | 英语(美国)       | 701010 |
| Adam Multilingual        | 男  | 英语(美国)       | 701011 |
| AlloyTurbo Multilingual  | 男  | 英语(美国)       | 701012 |
| Amanda Multilingual      | 女  | 英语(美国)       | 701013 |
| Brandon Multilingual     | 男  | 英语(美国)       | 701014 |
| Christopher Multilingual | 男  | 英语(美国)       | 701015 |
| Cora Multilingual        | 女  | 英语(美国)       | 701016 |
| Davis Multilingual       | 男  | 英语(美国)       | 701017 |
| Derek Multilingual       | 男  | 英语(美国)       | 701018 |
| Dustin Multilingual      | 男  | 英语(美国)       | 701019 |
| Evelyn Multilingual      | 女  | 英语(美国)       | 701020 |
| Lewis Multilingual       | 男  | 英语(美国)       | 701021 |
| Lola Multilingual        | 女  | 英语(美国)       | 701022 |
| Nancy Multilingual       | 女  | 英语(美国)       | 701023 |
| NovaTurbo Multilingual   | 女   | 英语(美国)       | 701024 |
| Phoebe Multilingual      | 女  | 英语(美国)       | 701025 |
| Samuel Multilingual      | 男  | 英语(美国)       | 701026 |
| Serena Multilingual      | 女  | 英语(美国)       | 701027 |
| Steffan Multilingual     | 男  | 英语(美国)       | 701028 |
| Arabella Multilingual    | 女  | 西班牙语(西班牙) | 701029 |
| Isidora Multilingual     | 女  | 西班牙语(西班牙) | 701030 |
| Tristan Multilingual     | 男  | 西班牙语(西班牙) | 701031 |
| Ximena Multilingual      | 女  | 西班牙语(西班牙) | 701032 |
| Remy Multilingual        | 男  | 法语(法国)       | 701033 |
| Vivienne Multilingual    | 女  | 法语(法国)       | 701034 |
| Lucien Multilingual      | 男  | 法语(法国)       | 701035 |
| Alessio Multilingual     | 男  | 意大利语(意大利) | 701036 |
| Giuseppe Multilingual    | 男  | 意大利语(意大利) | 701037 |
| Isabella Multilingual    | 女  | 意大利语(意大利) | 701038 |
| Marcello Multilingual    | 男  | 意大利语(意大利) | 701039 |
| Masaru Multilingual      | 男  | 日语(日本)       | 701040 |
| Hyunsu Multilingual      | 男  | 韩语(韩国)       | 701041 |
| Macerio Multilingual     | 男  | 葡萄牙语(巴西)   | 701042 |
| Thalita Multilingual     | 女  | 葡萄牙语(巴西)   | 701043 |
| 晓辰 多语言              | 女  | 中文(普通话)     | 701044 |
| 晓晓 多语言              | 女  | 中文(普通话)     | 701045 |
| 晓宇 多语言              | 女  | 中文(普通话)     | 701046 |
| 云逸 多语言              | 男 | 中文(普通话)     | 701047 |
| Yunfan Multilingual      | 男  | 中文(普通话)     | 701048 |
| Yunxiao Multilingual     | 男  | 中文(普通话)     | 701049 |
| 晓晓 方言                | 女  | 中文(普通话)     | 701050 |
     */
    async SubmitVideoTranslateJob(req, cb) {
        return this.request("SubmitVideoTranslateJob", req, cb);
    }
    /**
     * 查询视频翻译任务
     */
    async DescribeVideoTranslateJob(req, cb) {
        return this.request("DescribeVideoTranslateJob", req, cb);
    }
    /**
     * 确认视频翻译结果
     */
    async ConfirmVideoTranslateJob(req, cb) {
        return this.request("ConfirmVideoTranslateJob", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249673, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.waf = void 0;
const v20180125_1 = require("./v20180125");
exports.waf = {
    v20180125: v20180125_1.v20180125,
};

}, function(modId) { var map = {"./v20180125":1738984249674}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249674, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180125 = void 0;
const Models = require("./waf_models");
const waf_client_1 = require("./waf_client");
exports.v20180125 = {
    Client: waf_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./waf_models":1738984249675,"./waf_client":1738984249676}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249675, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249676, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * waf client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("waf.tencentcloudapi.com", "2018-01-25", clientConfig);
    }
    /**
     * 查询指定域名TOP N攻击类型
     */
    async DescribeAttackType(req, cb) {
        return this.request("DescribeAttackType", req, cb);
    }
    /**
     * 获取一个clbwaf域名详情
     */
    async DescribeDomainDetailsClb(req, cb) {
        return this.request("DescribeDomainDetailsClb", req, cb);
    }
    /**
     * 查询用户所有域名的详细信息
     */
    async DescribeDomains(req, cb) {
        return this.request("DescribeDomains", req, cb);
    }
    /**
     * 本接口用于获取访问日志索引配置信息
     */
    async DescribeAccessIndex(req, cb) {
        return this.request("DescribeAccessIndex", req, cb);
    }
    /**
     * 按照条件查询展示攻击总次数
     */
    async GetAttackTotalCount(req, cb) {
        return this.request("GetAttackTotalCount", req, cb);
    }
    /**
     * 导入IP黑白名单
     */
    async ImportIpAccessControl(req, cb) {
        return this.request("ImportIpAccessControl", req, cb);
    }
    /**
     * 增加精准白名单规则
     */
    async AddCustomWhiteRule(req, cb) {
        return this.request("AddCustomWhiteRule", req, cb);
    }
    /**
     * Waf IP黑白名单Delete接口（建议使用DeleteIpAccessControlV2来替换当前接口）
     */
    async DeleteIpAccessControl(req, cb) {
        return this.request("DeleteIpAccessControl", req, cb);
    }
    /**
     * 获取地域封禁配置包括地域封禁开关，设置封禁的地区信息
     */
    async DescribeAreaBanAreas(req, cb) {
        return this.request("DescribeAreaBanAreas", req, cb);
    }
    /**
     * 编辑自定义规则
     */
    async ModifyCustomRule(req, cb) {
        return this.request("ModifyCustomRule", req, cb);
    }
    /**
     * 设置负载均衡型WAF防护域名的流量模式，切换镜像模式和清洗模式
     */
    async ModifyHostFlowMode(req, cb) {
        return this.request("ModifyHostFlowMode", req, cb);
    }
    /**
     * 设置套餐实例的弹性qps上限
     */
    async ModifyInstanceQpsLimit(req, cb) {
        return this.request("ModifyInstanceQpsLimit", req, cb);
    }
    /**
     * api资产列表
     */
    async DescribeApiListVersionTwo(req, cb) {
        return this.request("DescribeApiListVersionTwo", req, cb);
    }
    /**
     * waf斯巴达-获取防护域名信息
     */
    async DescribeSpartaProtectionInfo(req, cb) {
        return this.request("DescribeSpartaProtectionInfo", req, cb);
    }
    /**
     * 描述WAF自动封禁IP详情,对齐自动封堵状态
     */
    async DescribeAutoDenyIP(req, cb) {
        return this.request("DescribeAutoDenyIP", req, cb);
    }
    /**
     * 删除精准白名单规则
     */
    async DeleteCustomWhiteRule(req, cb) {
        return this.request("DeleteCustomWhiteRule", req, cb);
    }
    /**
     * 查询下载攻击日志任务记录列表
     */
    async GetAttackDownloadRecords(req, cb) {
        return this.request("GetAttackDownloadRecords", req, cb);
    }
    /**
     * 获取Api请求详情信息
     */
    async DescribeApiDetail(req, cb) {
        return this.request("DescribeApiDetail", req, cb);
    }
    /**
     * 查询扫描ip
     */
    async DescribeScanIp(req, cb) {
        return this.request("DescribeScanIp", req, cb);
    }
    /**
     * 删除自定义规则
     */
    async DeleteCustomRule(req, cb) {
        return this.request("DeleteCustomRule", req, cb);
    }
    /**
     * 编辑防篡改url
     */
    async ModifyAntiFakeUrl(req, cb) {
        return this.request("ModifyAntiFakeUrl", req, cb);
    }
    /**
     * 编辑SaaS型WAF域名配置
     */
    async ModifySpartaProtection(req, cb) {
        return this.request("ModifySpartaProtection", req, cb);
    }
    /**
     * 修改实例的QPS弹性计费开关
     */
    async ModifyInstanceElasticMode(req, cb) {
        return this.request("ModifyInstanceElasticMode", req, cb);
    }
    /**
     * api分析页面开关
     */
    async ModifyApiAnalyzeStatus(req, cb) {
        return this.request("ModifyApiAnalyzeStatus", req, cb);
    }
    /**
     * 修改ip惩罚规则
     */
    async ModifyWafAutoDenyRules(req, cb) {
        return this.request("ModifyWafAutoDenyRules", req, cb);
    }
    /**
     * 查询saas和clb的域名信息
     */
    async DescribeUserDomainInfo(req, cb) {
        return this.request("DescribeUserDomainInfo", req, cb);
    }
    /**
     * 查询Tiga引擎大类规则及其防护模式
     */
    async DescribeProtectionModes(req, cb) {
        return this.request("DescribeProtectionModes", req, cb);
    }
    /**
     * 取得信息防泄漏规则列表
     */
    async DescribeAntiInfoLeakageRules(req, cb) {
        return this.request("DescribeAntiInfoLeakageRules", req, cb);
    }
    /**
     * 本接口用于搜索WAF访问日志
     */
    async SearchAccessLog(req, cb) {
        return this.request("SearchAccessLog", req, cb);
    }
    /**
     * 描述WAF威胁情报封禁模块配置详情
     */
    async DescribeWafThreatenIntelligence(req, cb) {
        return this.request("DescribeWafThreatenIntelligence", req, cb);
    }
    /**
     * Waf  IP封堵状态查询
     */
    async DescribeIpHitItems(req, cb) {
        return this.request("DescribeIpHitItems", req, cb);
    }
    /**
     * 删除CC攻击的session设置
     */
    async DeleteSession(req, cb) {
        return this.request("DeleteSession", req, cb);
    }
    /**
     * 查询多种条件的聚类分析
     */
    async DescribeHistogram(req, cb) {
        return this.request("DescribeHistogram", req, cb);
    }
    /**
     * 获取域名的webshell状态
     */
    async DescribeWebshellStatus(req, cb) {
        return this.request("DescribeWebshellStatus", req, cb);
    }
    /**
     * 计费资源购买、续费下单接口
     */
    async GenerateDealsAndPayNew(req, cb) {
        return this.request("GenerateDealsAndPayNew", req, cb);
    }
    /**
     * 信息防泄漏删除规则
     */
    async DeleteAntiInfoLeakRule(req, cb) {
        return this.request("DeleteAntiInfoLeakRule", req, cb);
    }
    /**
     * 添加（编辑）地域封禁中的地域信息
     */
    async CreateAreaBanRule(req, cb) {
        return this.request("CreateAreaBanRule", req, cb);
    }
    /**
     * 修改地域封禁中的地域信息
     */
    async ModifyAreaBanAreas(req, cb) {
        return this.request("ModifyAreaBanAreas", req, cb);
    }
    /**
     * 计费资源购买、续费下单接口
     */
    async CreateDeals(req, cb) {
        return this.request("CreateDeals", req, cb);
    }
    /**
     * 获取WAF地域封禁支持的地域列表
     */
    async DescribeAreaBanSupportAreas(req, cb) {
        return this.request("DescribeAreaBanSupportAreas", req, cb);
    }
    /**
     * 编辑SAAS型接入的紧急CC防护状态
     */
    async UpsertCCAutoStatus(req, cb) {
        return this.request("UpsertCCAutoStatus", req, cb);
    }
    /**
     * 获取各个模块具体的规格限制
     */
    async DescribeRuleLimit(req, cb) {
        return this.request("DescribeRuleLimit", req, cb);
    }
    /**
     * 添加信息防泄漏规则
     */
    async AddAntiInfoLeakRules(req, cb) {
        return this.request("AddAntiInfoLeakRules", req, cb);
    }
    /**
     * clb-waf 设置防护域名WAF开关
支持批量操作。
     */
    async ModifyHostStatus(req, cb) {
        return this.request("ModifyHostStatus", req, cb);
    }
    /**
     * 查询各个waf基础安全模块的开关状态，看每个模块是否开启
     */
    async DescribeModuleStatus(req, cb) {
        return this.request("DescribeModuleStatus", req, cb);
    }
    /**
     * Waf IP黑白名单Upsert接口（建议使用CreateIpAccessControl、ModifyIpAccessControl来替换当前接口）
     */
    async UpsertIpAccessControl(req, cb) {
        return this.request("UpsertIpAccessControl", req, cb);
    }
    /**
     * 生成攻击日志的产生时间柱状图
     */
    async GetAttackHistogram(req, cb) {
        return this.request("GetAttackHistogram", req, cb);
    }
    /**
     * 修改域名列表的访问日志开关
     */
    async ModifyDomainsCLSStatus(req, cb) {
        return this.request("ModifyDomainsCLSStatus", req, cb);
    }
    /**
     * 获取用户特征规则列表
     */
    async DescribeUserSignatureRuleV2(req, cb) {
        return this.request("DescribeUserSignatureRuleV2", req, cb);
    }
    /**
     * 根据过滤条件查询VIP信息
     */
    async DescribeVipInfo(req, cb) {
        return this.request("DescribeVipInfo", req, cb);
    }
    /**
     * 删除负载均衡型域名，支持批量操作。
     */
    async DeleteHost(req, cb) {
        return this.request("DeleteHost", req, cb);
    }
    /**
     * 本接口用于访问日志的快速分析
     */
    async DescribeAccessFastAnalysis(req, cb) {
        return this.request("DescribeAccessFastAnalysis", req, cb);
    }
    /**
     * 查询业务和攻击概要趋势
     */
    async DescribePeakPoints(req, cb) {
        return this.request("DescribePeakPoints", req, cb);
    }
    /**
     * 编辑精准白名单
     */
    async ModifyCustomWhiteRule(req, cb) {
        return this.request("ModifyCustomWhiteRule", req, cb);
    }
    /**
     * 获取证书的检查结果
     */
    async DescribeCertificateVerifyResult(req, cb) {
        return this.request("DescribeCertificateVerifyResult", req, cb);
    }
    /**
     * Waf IP黑白名单最新版本删除接口
     */
    async DeleteIpAccessControlV2(req, cb) {
        return this.request("DeleteIpAccessControlV2", req, cb);
    }
    /**
     * 切换弹性的开关
     */
    async SwitchElasticMode(req, cb) {
        return this.request("SwitchElasticMode", req, cb);
    }
    /**
     * 修改实例的自动续费开关
     */
    async ModifyInstanceRenewFlag(req, cb) {
        return this.request("ModifyInstanceRenewFlag", req, cb);
    }
    /**
     * 获取用户防护规则等级
     */
    async DescribeUserLevel(req, cb) {
        return this.request("DescribeUserLevel", req, cb);
    }
    /**
     * Waf  CC V2 Query接口
     */
    async DescribeCCRule(req, cb) {
        return this.request("DescribeCCRule", req, cb);
    }
    /**
     * 获取业务和攻击概览峰值
     */
    async DescribePeakValue(req, cb) {
        return this.request("DescribePeakValue", req, cb);
    }
    /**
     * 配置WAF威胁情报封禁模块详情
     */
    async ModifyWafThreatenIntelligence(req, cb) {
        return this.request("ModifyWafThreatenIntelligence", req, cb);
    }
    /**
     * 设置waf防护状态
     */
    async ModifySpartaProtectionMode(req, cb) {
        return this.request("ModifySpartaProtectionMode", req, cb);
    }
    /**
     * 删除攻击日志下载任务记录
     */
    async DeleteAttackDownloadRecord(req, cb) {
        return this.request("DeleteAttackDownloadRecord", req, cb);
    }
    /**
     * 获取防护配置中的访问控制策略列表
     */
    async DescribeCustomRuleList(req, cb) {
        return this.request("DescribeCustomRuleList", req, cb);
    }
    /**
     * 攻击总览
     */
    async DescribeAttackOverview(req, cb) {
        return this.request("DescribeAttackOverview", req, cb);
    }
    /**
     * 获取用户规则白名单列表
     */
    async DescribeAttackWhiteRule(req, cb) {
        return this.request("DescribeAttackWhiteRule", req, cb);
    }
    /**
     * clb-waf中获取防护域名列表
     */
    async DescribeHosts(req, cb) {
        return this.request("DescribeHosts", req, cb);
    }
    /**
     * 添加SaaS型WAF防护域名
     */
    async AddSpartaProtection(req, cb) {
        return this.request("AddSpartaProtection", req, cb);
    }
    /**
     * 获取防护状态以及生效的实例id
     */
    async DescribePolicyStatus(req, cb) {
        return this.request("DescribePolicyStatus", req, cb);
    }
    /**
     * Waf 会话定义查询接口
     */
    async DescribeSession(req, cb) {
        return this.request("DescribeSession", req, cb);
    }
    /**
     * 查询Top5的攻击域名
     */
    async DescribeTopAttackDomain(req, cb) {
        return this.request("DescribeTopAttackDomain", req, cb);
    }
    /**
     * 编辑负载均衡型WAF防护域名配置
     */
    async ModifyHost(req, cb) {
        return this.request("ModifyHost", req, cb);
    }
    /**
     * 查询Tiga引擎规则类型及状态
     */
    async DescribeUserSignatureClass(req, cb) {
        return this.request("DescribeUserSignatureClass", req, cb);
    }
    /**
     * Bot_V2 bot总开关更新
     */
    async ModifyBotStatus(req, cb) {
        return this.request("ModifyBotStatus", req, cb);
    }
    /**
     * 开启、关闭WAF开关
     */
    async ModifyProtectionStatus(req, cb) {
        return this.request("ModifyProtectionStatus", req, cb);
    }
    /**
     * Saas型WAF接入查询加密套件信息
     */
    async DescribeCiphersDetail(req, cb) {
        return this.request("DescribeCiphersDetail", req, cb);
    }
    /**
     * 修改防护域名的地域封禁状态
     */
    async ModifyAreaBanStatus(req, cb) {
        return this.request("ModifyAreaBanStatus", req, cb);
    }
    /**
     * Waf IP黑白名单编辑接口
     */
    async ModifyIpAccessControl(req, cb) {
        return this.request("ModifyIpAccessControl", req, cb);
    }
    /**
     * 获取防篡改url
     */
    async DescribeAntiFakeRules(req, cb) {
        return this.request("DescribeAntiFakeRules", req, cb);
    }
    /**
     * 获取发现域名列表接口
     */
    async DescribeFindDomainList(req, cb) {
        return this.request("DescribeFindDomainList", req, cb);
    }
    /**
     * 切换防篡改开关
     */
    async ModifyAntiFakeUrlStatus(req, cb) {
        return this.request("ModifyAntiFakeUrlStatus", req, cb);
    }
    /**
     * 本接口用于访问日志柱状趋势图
     */
    async DescribeAccessHistogram(req, cb) {
        return this.request("DescribeAccessHistogram", req, cb);
    }
    /**
     * 查询SaaS型WAF支持的TLS版本
     */
    async DescribeTlsVersion(req, cb) {
        return this.request("DescribeTlsVersion", req, cb);
    }
    /**
     * 编辑信息防泄漏规则
     */
    async ModifyAntiInfoLeakRules(req, cb) {
        return this.request("ModifyAntiInfoLeakRules", req, cb);
    }
    /**
     * Waf IP黑白名单新增接口
     */
    async CreateIpAccessControl(req, cb) {
        return this.request("CreateIpAccessControl", req, cb);
    }
    /**
     * 添加防篡改url
     */
    async AddAntiFakeUrl(req, cb) {
        return this.request("AddAntiFakeUrl", req, cb);
    }
    /**
     * 获取waf流量访问趋势
     */
    async DescribeFlowTrend(req, cb) {
        return this.request("DescribeFlowTrend", req, cb);
    }
    /**
     * 查看防护对象列表
     */
    async DescribeObjects(req, cb) {
        return this.request("DescribeObjects", req, cb);
    }
    /**
     * 更改某一条规则
     */
    async ModifyDomainWhiteRule(req, cb) {
        return this.request("ModifyDomainWhiteRule", req, cb);
    }
    /**
     * 开启或禁用访问控制（自定义策略）
     */
    async ModifyCustomRuleStatus(req, cb) {
        return this.request("ModifyCustomRuleStatus", req, cb);
    }
    /**
     * 供用户控制台调用，删除Tiga规则引擎白名单。
     */
    async DeleteAttackWhiteRule(req, cb) {
        return this.request("DeleteAttackWhiteRule", req, cb);
    }
    /**
     * Waf ip黑白名单查询
     */
    async DescribeIpAccessControl(req, cb) {
        return this.request("DescribeIpAccessControl", req, cb);
    }
    /**
     * 供用户控制台调用，增加Tiga规则引擎白名单。
     */
    async AddAttackWhiteRule(req, cb) {
        return this.request("AddAttackWhiteRule", req, cb);
    }
    /**
     * 添加地域封禁中的地域信息
     */
    async AddAreaBanAreas(req, cb) {
        return this.request("AddAreaBanAreas", req, cb);
    }
    /**
     * 获取域名概况
     */
    async DescribeDomainCountInfo(req, cb) {
        return this.request("DescribeDomainCountInfo", req, cb);
    }
    /**
     * SaaS型WAF删除防护域名
     */
    async DeleteSpartaProtection(req, cb) {
        return this.request("DeleteSpartaProtection", req, cb);
    }
    /**
     * 切换域名的规则开关
     */
    async SwitchDomainRules(req, cb) {
        return this.request("SwitchDomainRules", req, cb);
    }
    /**
     * Waf 批量防护IP黑白名单查询
     */
    async DescribeBatchIpAccessControl(req, cb) {
        return this.request("DescribeBatchIpAccessControl", req, cb);
    }
    /**
     * 返回ip惩罚规则详细信息
     */
    async DescribeWafAutoDenyRules(req, cb) {
        return this.request("DescribeWafAutoDenyRules", req, cb);
    }
    /**
     * 增加访问控制（自定义策略）
     */
    async AddCustomRule(req, cb) {
        return this.request("AddCustomRule", req, cb);
    }
    /**
     * 获取域名的规则白名单
     */
    async DescribeDomainWhiteRules(req, cb) {
        return this.request("DescribeDomainWhiteRules", req, cb);
    }
    /**
     * 设置域名的webshell状态。
     */
    async ModifyWebshellStatus(req, cb) {
        return this.request("ModifyWebshellStatus", req, cb);
    }
    /**
     * 信息防泄漏切换规则开关
     */
    async ModifyAntiInfoLeakRuleStatus(req, cb) {
        return this.request("ModifyAntiInfoLeakRuleStatus", req, cb);
    }
    /**
     * 刷新接入检查的结果，后台会生成接入检查任务
     */
    async RefreshAccessCheckResult(req, cb) {
        return this.request("RefreshAccessCheckResult", req, cb);
    }
    /**
     * 创建搜索下载攻击日志任务，使用CLS新版本的搜索下载getlog接口
     */
    async PostAttackDownloadTask(req, cb) {
        return this.request("PostAttackDownloadTask", req, cb);
    }
    /**
     * 获取防护配置中的精准白名单策略列表
     */
    async DescribeCustomWhiteRule(req, cb) {
        return this.request("DescribeCustomWhiteRule", req, cb);
    }
    /**
     * clb-waf获取防护域名详情
     */
    async DescribeHost(req, cb) {
        return this.request("DescribeHost", req, cb);
    }
    /**
     * 修改用户防护规则，开启关闭具体的某条规则
     */
    async ModifyUserSignatureRuleV2(req, cb) {
        return this.request("ModifyUserSignatureRuleV2", req, cb);
    }
    /**
     * 本接口用于获取访问日志导出列表
     */
    async DescribeAccessExports(req, cb) {
        return this.request("DescribeAccessExports", req, cb);
    }
    /**
     * 添加域名的首先验证是否购买了套餐，是否没有达到购买套餐的限制，域名是否已经添加
     */
    async DescribeHostLimit(req, cb) {
        return this.request("DescribeHostLimit", req, cb);
    }
    /**
     * 获取套餐实例的弹性qps上限
     */
    async GetInstanceQpsLimit(req, cb) {
        return this.request("GetInstanceQpsLimit", req, cb);
    }
    /**
     * 获取地域封禁规则配置
     */
    async DescribeAreaBanRule(req, cb) {
        return this.request("DescribeAreaBanRule", req, cb);
    }
    /**
     * 本接口用于删除访问日志导出
     */
    async DeleteAccessExport(req, cb) {
        return this.request("DeleteAccessExport", req, cb);
    }
    /**
     * 删除域名规则白名单
     */
    async DeleteDomainWhiteRules(req, cb) {
        return this.request("DeleteDomainWhiteRules", req, cb);
    }
    /**
     * 获取添加域名操作的结果
     */
    async DescribeDomainVerifyResult(req, cb) {
        return this.request("DescribeDomainVerifyResult", req, cb);
    }
    /**
     * 本接口用于创建访问日志导出
     */
    async CreateAccessExport(req, cb) {
        return this.request("CreateAccessExport", req, cb);
    }
    /**
     * 新版本CLS接口存在参数变化，query改成了query_string支持lucence语法接口搜索查询。
     */
    async SearchAttackLog(req, cb) {
        return this.request("SearchAttackLog", req, cb);
    }
    /**
     * 查询用户所有实例的详细信息
     */
    async DescribeInstances(req, cb) {
        return this.request("DescribeInstances", req, cb);
    }
    /**
     * 供用户控制台调用，修改Tiga规则引擎白名单。
     */
    async ModifyAttackWhiteRule(req, cb) {
        return this.request("ModifyAttackWhiteRule", req, cb);
    }
    /**
     * 查询单个saaswaf域名详情
     */
    async DescribeDomainDetailsSaas(req, cb) {
        return this.request("DescribeDomainDetailsSaas", req, cb);
    }
    /**
     * 修改用户防护规则，开启关闭具体的某条规则
     */
    async ModifyUserSignatureRule(req, cb) {
        return this.request("ModifyUserSignatureRule", req, cb);
    }
    /**
     * 提供给clb等使用的waf实例下单接口，目前只支持clb旗舰版实例的下单，该接口会进行入参校验，然后调用是否为收购用户，然后调用计费接口下单。目前只支持预付费下单，计费侧接口：https://tcb.woa.com/magical-brush/docs/754661947
     */
    async ModifyGenerateDeals(req, cb) {
        return this.request("ModifyGenerateDeals", req, cb);
    }
    /**
     * 修改实例的名称
     */
    async ModifyInstanceName(req, cb) {
        return this.request("ModifyInstanceName", req, cb);
    }
    /**
     * 设置某个domain下基础安全模块的开关
     */
    async ModifyModuleStatus(req, cb) {
        return this.request("ModifyModuleStatus", req, cb);
    }
    /**
     * 在CDC场景下，负载均衡型WAF的添加、编辑域名配置的时候，需要展示CDC负载均衡型WAF（cdc-clb-waf)支持的地域列表，通过DescribeUserCdcClbWafRegions既可以获得当前对客户已经开放的地域列表
     */
    async DescribeUserCdcClbWafRegions(req, cb) {
        return this.request("DescribeUserCdcClbWafRegions", req, cb);
    }
    /**
     * 添加（编辑）地域封禁中的地域信息
     */
    async ModifyAreaBanRule(req, cb) {
        return this.request("ModifyAreaBanRule", req, cb);
    }
    /**
     * 废弃接口

描述WAF自动封禁模块详情
     */
    async DescribeWafAutoDenyStatus(req, cb) {
        return this.request("DescribeWafAutoDenyStatus", req, cb);
    }
    /**
     * 开启或禁用精准白名单
     */
    async ModifyCustomWhiteRuleStatus(req, cb) {
        return this.request("ModifyCustomWhiteRuleStatus", req, cb);
    }
    /**
     * 获取Saas型WAF防护端口列表
     */
    async DescribePorts(req, cb) {
        return this.request("DescribePorts", req, cb);
    }
    /**
     * clb-waf设置防护域名防护状态
     */
    async ModifyHostMode(req, cb) {
        return this.request("ModifyHostMode", req, cb);
    }
    /**
     * 修改域名投递状态
     */
    async ModifyDomainPostAction(req, cb) {
        return this.request("ModifyDomainPostAction", req, cb);
    }
    /**
     * 在负载均衡型WAF的添加、编辑域名配置的时候，需要展示负载均衡型WAF（clb-waf)支持的地域列表，通过DescribeUserClbWafRegions既可以获得当前对客户已经开放的地域列表
     */
    async DescribeUserClbWafRegions(req, cb) {
        return this.request("DescribeUserClbWafRegions", req, cb);
    }
    /**
     * Waf  CC V2 Upsert接口
     */
    async UpsertCCRule(req, cb) {
        return this.request("UpsertCCRule", req, cb);
    }
    /**
     * 修改防护对象
     */
    async ModifyObject(req, cb) {
        return this.request("ModifyObject", req, cb);
    }
    /**
     * 删除防篡改url
     */
    async DeleteAntiFakeUrl(req, cb) {
        return this.request("DeleteAntiFakeUrl", req, cb);
    }
    /**
     * 根据多条件查询CC规则
     */
    async DescribeCCRuleList(req, cb) {
        return this.request("DescribeCCRuleList", req, cb);
    }
    /**
     * Waf  CC V2 Delete接口
     */
    async DeleteCCRule(req, cb) {
        return this.request("DeleteCCRule", req, cb);
    }
    /**
     * clb-waf中添加防护域名
     */
    async CreateHost(req, cb) {
        return this.request("CreateHost", req, cb);
    }
    /**
     * Waf  会话定义 Upsert接口
     */
    async UpsertSession(req, cb) {
        return this.request("UpsertSession", req, cb);
    }
    /**
     * 获取SAAS型接入的紧急CC防护状态
     */
    async DescribeCCAutoStatus(req, cb) {
        return this.request("DescribeCCAutoStatus", req, cb);
    }
    /**
     * 获取用户特征规则列表
     */
    async DescribeUserSignatureRule(req, cb) {
        return this.request("DescribeUserSignatureRule", req, cb);
    }
    /**
     * 批量操作tiga子规则
     */
    async BatchOperateUserSignatureRules(req, cb) {
        return this.request("BatchOperateUserSignatureRules", req, cb);
    }
    /**
     * 刷新防篡改url
     */
    async FreshAntiFakeUrl(req, cb) {
        return this.request("FreshAntiFakeUrl", req, cb);
    }
    /**
     * 拉取域名的防护规则列表
     */
    async DescribeDomainRules(req, cb) {
        return this.request("DescribeDomainRules", req, cb);
    }
    /**
     * api安全状态变更接口
     */
    async ModifyApiSecEventChange(req, cb) {
        return this.request("ModifyApiSecEventChange", req, cb);
    }
    /**
     * 增加域名规则白名单
     */
    async AddDomainWhiteRule(req, cb) {
        return this.request("AddDomainWhiteRule", req, cb);
    }
    /**
     * 切换ipv6开关
     */
    async ModifyDomainIpv6Status(req, cb) {
        return this.request("ModifyDomainIpv6Status", req, cb);
    }
    /**
     * 修改用户防护规则等级
     */
    async ModifyUserLevel(req, cb) {
        return this.request("ModifyUserLevel", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249677, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.wav = void 0;
const v20210129_1 = require("./v20210129");
exports.wav = {
    v20210129: v20210129_1.v20210129,
};

}, function(modId) { var map = {"./v20210129":1738984249678}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249678, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210129 = void 0;
const Models = require("./wav_models");
const wav_client_1 = require("./wav_client");
exports.v20210129 = {
    Client: wav_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./wav_models":1738984249679,"./wav_client":1738984249680}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249679, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249680, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * wav client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("wav.tencentcloudapi.com", "2021-01-29", clientConfig);
    }
    /**
     * 根据游标拉取活动活码列表信息
     */
    async QueryActivityLiveCodeList(req, cb) {
        return this.request("QueryActivityLiveCodeList", req, cb);
    }
    /**
     * 根据游标拉取活动列表信息
     */
    async QueryActivityList(req, cb) {
        return this.request("QueryActivityList", req, cb);
    }
    /**
     * 通过接口拉取SaaS内C端外部联系人在指定时间范围内的行为事件明细。此接口提供的数据以天为维度，查询的时间范围为[start_time,end_time]，即前后均为闭区间，支持的最大查询跨度为365天。
     */
    async QueryCustomerEventDetailStatistics(req, cb) {
        return this.request("QueryCustomerEventDetailStatistics", req, cb);
    }
    /**
     * 根据游标拉取活动参与列表信息
     */
    async QueryActivityJoinList(req, cb) {
        return this.request("QueryActivityJoinList", req, cb);
    }
    /**
     * 查询指定时间范围内发生过到店的潜客到店信息
     */
    async QueryArrivalList(req, cb) {
        return this.request("QueryArrivalList", req, cb);
    }
    /**
     * 根据游标拉取渠道活码列表信息
     */
    async QueryChannelCodeList(req, cb) {
        return this.request("QueryChannelCodeList", req, cb);
    }
    /**
     * 企业可通过此接口基于外部联系人获取指定成员添加的客户列表。客户是指配置了客户联系功能的成员所添加的外部联系人。没有配置客户联系功能的成员，所添加的外部联系人将不会作为客户返回。
     */
    async QueryExternalContactList(req, cb) {
        return this.request("QueryExternalContactList", req, cb);
    }
    /**
     * 通过接口拉取租户已有潜客客户档案列表信息
     */
    async QueryCustomerProfileList(req, cb) {
        return this.request("QueryCustomerProfileList", req, cb);
    }
    /**
     * 查询企业成员信息列表接口
     */
    async QueryUserInfoList(req, cb) {
        return this.request("QueryUserInfoList", req, cb);
    }
    /**
     * 通过接口拉取租户在指定时间范围内的外部联系人添加/删除明细，此接口提供的数据以天为维度，查询的时间范围为[StarTime, EndTime]，即前后均为闭区间，支持的最大查询跨度为365天；
     */
    async QueryExternalUserEventList(req, cb) {
        return this.request("QueryExternalUserEventList", req, cb);
    }
    /**
     * 该接口获取license对应的详细信息
     */
    async QueryLicenseInfo(req, cb) {
        return this.request("QueryLicenseInfo", req, cb);
    }
    /**
     * 查询指定时间范围内发生过跟进的潜客信息
     */
    async QueryFollowList(req, cb) {
        return this.request("QueryFollowList", req, cb);
    }
    /**
     * 企业可通过此接口获取线索列表。
     */
    async QueryClueInfoList(req, cb) {
        return this.request("QueryClueInfoList", req, cb);
    }
    /**
     * 企业可通过此接口，根据外部联系人的userid，拉取外部联系人详情
     */
    async QueryExternalContactDetail(req, cb) {
        return this.request("QueryExternalContactDetail", req, cb);
    }
    /**
     * 企业可通过此接口获取企微SaaS平台上的车系车型信息。
     */
    async QueryVehicleInfoList(req, cb) {
        return this.request("QueryVehicleInfoList", req, cb);
    }
    /**
     * 通过接口拉取SaaS内企业成员在指定时间范围内的行为事件明细。此接口提供的数据以天为维度，查询的时间范围为[start_time,end_time]，即前后均为闭区间，支持的最大查询跨度为365天。
     */
    async QueryStaffEventDetailStatistics(req, cb) {
        return this.request("QueryStaffEventDetailStatistics", req, cb);
    }
    /**
     * 线索回收接口
     */
    async CreateLead(req, cb) {
        return this.request("CreateLead", req, cb);
    }
    /**
     * 根据游标拉取会话存档列表信息
     */
    async QueryChatArchivingList(req, cb) {
        return this.request("QueryChatArchivingList", req, cb);
    }
    /**
     * 该接口用户设置标签库, 每个企业最多可配置3000个企业标签。
     */
    async CreateCorpTag(req, cb) {
        return this.request("CreateCorpTag", req, cb);
    }
    /**
     * 新增渠道活码接口
     */
    async CreateChannelCode(req, cb) {
        return this.request("CreateChannelCode", req, cb);
    }
    /**
     * 通过接口按类型拉取租户当前的素材列表及关键信息
     */
    async QueryMaterialList(req, cb) {
        return this.request("QueryMaterialList", req, cb);
    }
    /**
     * 通过接口拉取租户/指定成员/部门在指定日期范围内的CRM跟进统计数据
     */
    async QueryCrmStatistics(req, cb) {
        return this.request("QueryCrmStatistics", req, cb);
    }
    /**
     * 查询小程序码列表接口
     */
    async QueryMiniAppCodeList(req, cb) {
        return this.request("QueryMiniAppCodeList", req, cb);
    }
    /**
     * 企业可通过此接口获取录入在企微SaaS平台上的经销商信息。
     */
    async QueryDealerInfoList(req, cb) {
        return this.request("QueryDealerInfoList", req, cb);
    }
    /**
     * 企业可通过传入起始和结束时间，获取该时间段的外部联系人详情列表
     */
    async QueryExternalContactDetailByDate(req, cb) {
        return this.request("QueryExternalContactDetailByDate", req, cb);
    }
    /**
     * 企业可通过此接口将企业主体对应的外部联系人id转换为乐销车应用主体对应的外部联系人。
     */
    async QueryExternalUserMappingInfo(req, cb) {
        return this.request("QueryExternalUserMappingInfo", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249681, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.wedata = void 0;
const v20210820_1 = require("./v20210820");
exports.wedata = {
    v20210820: v20210820_1.v20210820,
};

}, function(modId) { var map = {"./v20210820":1738984249682}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249682, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20210820 = void 0;
const Models = require("./wedata_models");
const wedata_client_1 = require("./wedata_client");
exports.v20210820 = {
    Client: wedata_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./wedata_models":1738984249683,"./wedata_client":1738984249684}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249683, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249684, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * wedata client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("wedata.tencentcloudapi.com", "2021-08-20", clientConfig);
    }
    /**
     * 创建任务
     */
    async CreateTask(req, cb) {
        return this.request("CreateTask", req, cb);
    }
    /**
     * 创建任务告警规则
     */
    async CreateTaskAlarmRegular(req, cb) {
        return this.request("CreateTaskAlarmRegular", req, cb);
    }
    /**
     * 数据集成大屏同步条数统计趋势
     */
    async DescribeIntegrationStatisticsRecordsTrend(req, cb) {
        return this.request("DescribeIntegrationStatisticsRecordsTrend", req, cb);
    }
    /**
     * 删除集成任务
     */
    async DeleteIntegrationTask(req, cb) {
        return this.request("DeleteIntegrationTask", req, cb);
    }
    /**
     * 批量终止实例
     */
    async KillScheduleInstances(req, cb) {
        return this.request("KillScheduleInstances", req, cb);
    }
    /**
     * 开发空间-获取数据开发脚本信息
     */
    async GetFileInfo(req, cb) {
        return this.request("GetFileInfo", req, cb);
    }
    /**
     * 查询任务脚本
     */
    async DescribeTaskScript(req, cb) {
        return this.request("DescribeTaskScript", req, cb);
    }
    /**
     * 创建规则模板
     */
    async CreateRuleTemplate(req, cb) {
        return this.request("CreateRuleTemplate", req, cb);
    }
    /**
     * 实例诊断，用于诊断 INITIAL、DEPENDENCE、ALLOCATED、LAUNCHED、EVENT_LISTENING、BEFORE_ASPECT、EXPIRED、FAILED状态的实例
     */
    async DiagnosePro(req, cb) {
        return this.request("DiagnosePro", req, cb);
    }
    /**
     * 实时任务运行指标概览
     */
    async DescribeRealTimeTaskMetricOverview(req, cb) {
        return this.request("DescribeRealTimeTaskMetricOverview", req, cb);
    }
    /**
     * 获取实例列表
     */
    async DescribeScheduleInstances(req, cb) {
        return this.request("DescribeScheduleInstances", req, cb);
    }
    /**
     * 仅对任务状态为”调度中“和”已暂停“有效，对所选任务的任务实例进行终止，并停止调度
     */
    async BatchStopOpsTasks(req, cb) {
        return this.request("BatchStopOpsTasks", req, cb);
    }
    /**
     * 任务状态周期增长趋势
     */
    async DescribeTaskByCycleReport(req, cb) {
        return this.request("DescribeTaskByCycleReport", req, cb);
    }
    /**
     * 数据质量的概览页面数据监测情况接口
     */
    async DescribeDataCheckStat(req, cb) {
        return this.request("DescribeDataCheckStat", req, cb);
    }
    /**
     * 批量终止集成任务实例
     */
    async BatchKillIntegrationTaskInstances(req, cb) {
        return this.request("BatchKillIntegrationTaskInstances", req, cb);
    }
    /**
     * 更新规则组执行策略
     */
    async ModifyExecStrategy(req, cb) {
        return this.request("ModifyExecStrategy", req, cb);
    }
    /**
     * 数据集成大屏任务状态统计趋势
     */
    async DescribeIntegrationStatisticsTaskStatusTrend(req, cb) {
        return this.request("DescribeIntegrationStatisticsTaskStatusTrend", req, cb);
    }
    /**
     * 建hive表
     */
    async CreateHiveTable(req, cb) {
        return this.request("CreateHiveTable", req, cb);
    }
    /**
     * 任务运维列表组合条件查询
     */
    async DescribeOperateOpsTasks(req, cb) {
        return this.request("DescribeOperateOpsTasks", req, cb);
    }
    /**
     * 根据周期类型查询所有实例
     */
    async DescribeInstanceByCycle(req, cb) {
        return this.request("DescribeInstanceByCycle", req, cb);
    }
    /**
     * 查询集成节点
     */
    async DescribeIntegrationNode(req, cb) {
        return this.request("DescribeIntegrationNode", req, cb);
    }
    /**
     * 资源管理-上传资源
     */
    async UploadResource(req, cb) {
        return this.request("UploadResource", req, cb);
    }
    /**
     * 根据周期类型 查询所有任务
     */
    async DescribeTaskByCycle(req, cb) {
        return this.request("DescribeTaskByCycle", req, cb);
    }
    /**
     * 批量暂停集成任务
     */
    async BatchSuspendIntegrationTasks(req, cb) {
        return this.request("BatchSuspendIntegrationTasks", req, cb);
    }
    /**
     * 元数据模型-字段基础信息查询接口
     */
    async DescribeFieldBasicInfo(req, cb) {
        return this.request("DescribeFieldBasicInfo", req, cb);
    }
    /**
     * 查询表得分趋势
     */
    async DescribeTableScoreTrend(req, cb) {
        return this.request("DescribeTableScoreTrend", req, cb);
    }
    /**
     * 删除编排空间工作流
     */
    async RemoveWorkflowDs(req, cb) {
        return this.request("RemoveWorkflowDs", req, cb);
    }
    /**
     * 获取第三方运行日志
     */
    async DescribeThirdTaskRunLog(req, cb) {
        return this.request("DescribeThirdTaskRunLog", req, cb);
    }
    /**
     * 查询父目录树，用于工作流、任务定位
     */
    async DescribeDsParentFolderTree(req, cb) {
        return this.request("DescribeDsParentFolderTree", req, cb);
    }
    /**
     * 继续集成任务
     */
    async ResumeIntegrationTask(req, cb) {
        return this.request("ResumeIntegrationTask", req, cb);
    }
    /**
     * 重命名任务（任务编辑）
     */
    async ModifyTaskName(req, cb) {
        return this.request("ModifyTaskName", req, cb);
    }
    /**
     * 离线任务实例运行日志列表
     */
    async DescribeInstanceLogList(req, cb) {
        return this.request("DescribeInstanceLogList", req, cb);
    }
    /**
     * 提交任务版本
     */
    async CreateTaskVersionDs(req, cb) {
        return this.request("CreateTaskVersionDs", req, cb);
    }
    /**
     * 批量修改任务责任人
     */
    async BatchModifyOpsOwners(req, cb) {
        return this.request("BatchModifyOpsOwners", req, cb);
    }
    /**
     * 创建用户自定义函数
     */
    async CreateCustomFunction(req, cb) {
        return this.request("CreateCustomFunction", req, cb);
    }
    /**
     * 解锁集成任务
     */
    async UnlockIntegrationTask(req, cb) {
        return this.request("UnlockIntegrationTask", req, cb);
    }
    /**
     * 批量停止集成任务
     */
    async BatchStopIntegrationTasks(req, cb) {
        return this.request("BatchStopIntegrationTasks", req, cb);
    }
    /**
     * 运维大屏-任务状态分布
     */
    async DescribeSchedulerTaskTypeCnt(req, cb) {
        return this.request("DescribeSchedulerTaskTypeCnt", req, cb);
    }
    /**
     * 删除项目参数
     */
    async DeleteProjectParamDs(req, cb) {
        return this.request("DeleteProjectParamDs", req, cb);
    }
    /**
     * 编排空间-工作流-移动任务到工作流文件夹
     */
    async MoveTasksToFolder(req, cb) {
        return this.request("MoveTasksToFolder", req, cb);
    }
    /**
     * 根据项目id 获取项目下所有工作流列表
     */
    async DescribeWorkflowListByProjectId(req, cb) {
        return this.request("DescribeWorkflowListByProjectId", req, cb);
    }
    /**
     * 创建数据源
     */
    async CreateDataSource(req, cb) {
        return this.request("CreateDataSource", req, cb);
    }
    /**
     * 实例运维-获取实例日志列表
     */
    async DescribeOpsInstanceLogList(req, cb) {
        return this.request("DescribeOpsInstanceLogList", req, cb);
    }
    /**
     * 查看事件实例的消费任务
     */
    async DescribeEventConsumeTasks(req, cb) {
        return this.request("DescribeEventConsumeTasks", req, cb);
    }
    /**
     * 更新工作流下任务调度信息
     */
    async RenewWorkflowSchedulerInfoDs(req, cb) {
        return this.request("RenewWorkflowSchedulerInfoDs", req, cb);
    }
    /**
     * 获取离线任务长连接Token
     */
    async DescribeOfflineTaskToken(req, cb) {
        return this.request("DescribeOfflineTaskToken", req, cb);
    }
    /**
     * 删除规则模板
     */
    async DeleteRuleTemplate(req, cb) {
        return this.request("DeleteRuleTemplate", req, cb);
    }
    /**
     * 数语向wedata注册，提供自身cam角色信息，跳转域名、ip、端口信息等
     */
    async UpdateDataModelRegistryInfo(req, cb) {
        return this.request("UpdateDataModelRegistryInfo", req, cb);
    }
    /**
     * 获取待审批列表
     */
    async DescribeApproveList(req, cb) {
        return this.request("DescribeApproveList", req, cb);
    }
    /**
     * 抢占锁定集成任务
     */
    async RobAndLockIntegrationTask(req, cb) {
        return this.request("RobAndLockIntegrationTask", req, cb);
    }
    /**
     * 判断集成节点名称是否存在
     */
    async CheckIntegrationNodeNameExists(req, cb) {
        return this.request("CheckIntegrationNodeNameExists", req, cb);
    }
    /**
     * 告警事件列表
     */
    async DescribeAlarmEvents(req, cb) {
        return this.request("DescribeAlarmEvents", req, cb);
    }
    /**
     * 批量启动工作流
     */
    async RunTasksByMultiWorkflow(req, cb) {
        return this.request("RunTasksByMultiWorkflow", req, cb);
    }
    /**
     * 质量报告-质量评分
     */
    async DescribeQualityScore(req, cb) {
        return this.request("DescribeQualityScore", req, cb);
    }
    /**
     * 获取cos token
     */
    async GetCosToken(req, cb) {
        return this.request("GetCosToken", req, cb);
    }
    /**
     * 数据质量概览页面触发维度分布统计接口
     */
    async DescribeRuleDimStat(req, cb) {
        return this.request("DescribeRuleDimStat", req, cb);
    }
    /**
     * 生成建hive表的sql
     */
    async GenHiveTableDDLSql(req, cb) {
        return this.request("GenHiveTableDDLSql", req, cb);
    }
    /**
     * 分页查询任务运行历史
     */
    async DescribeTaskRunHistory(req, cb) {
        return this.request("DescribeTaskRunHistory", req, cb);
    }
    /**
     * 查看补录计划任务
     */
    async DescribeOpsMakePlanTasks(req, cb) {
        return this.request("DescribeOpsMakePlanTasks", req, cb);
    }
    /**
     * 数据质量概览页面表排行接口
     */
    async DescribeTopTableStat(req, cb) {
        return this.request("DescribeTopTableStat", req, cb);
    }
    /**
     * 查询全量函数
     */
    async DescribeOrganizationalFunctions(req, cb) {
        return this.request("DescribeOrganizationalFunctions", req, cb);
    }
    /**
     * 实例批量置成功
     */
    async RunForceSucScheduleInstances(req, cb) {
        return this.request("RunForceSucScheduleInstances", req, cb);
    }
    /**
     * 查询目录树
     */
    async DescribeDsFolderTree(req, cb) {
        return this.request("DescribeDsFolderTree", req, cb);
    }
    /**
     * 查询实时任务表粒度指标概览
     */
    async DescribeTaskTableMetricOverview(req, cb) {
        return this.request("DescribeTaskTableMetricOverview", req, cb);
    }
    /**
     * 无
     */
    async SubmitTaskTestRun(req, cb) {
        return this.request("SubmitTaskTestRun", req, cb);
    }
    /**
     * 获取审批分类列表
     */
    async DescribeApproveTypeList(req, cb) {
        return this.request("DescribeApproveTypeList", req, cb);
    }
    /**
     * 规则执行日志查询
     */
    async DescribeRuleExecLog(req, cb) {
        return this.request("DescribeRuleExecLog", req, cb);
    }
    /**
     * 开发空间-批量删除目录和文件
     */
    async DeleteFilePath(req, cb) {
        return this.request("DeleteFilePath", req, cb);
    }
    /**
     * 编排空间-创建文件夹
     */
    async CreateDsFolder(req, cb) {
        return this.request("CreateDsFolder", req, cb);
    }
    /**
     * 获取下游任务信息
     */
    async DescribeSuccessorOpsTaskInfos(req, cb) {
        return this.request("DescribeSuccessorOpsTaskInfos", req, cb);
    }
    /**
     * 调试运行集成任务
     */
    async DryRunDIOfflineTask(req, cb) {
        return this.request("DryRunDIOfflineTask", req, cb);
    }
    /**
     * 质量报告-查询质量评分
     */
    async DescribeDimensionScore(req, cb) {
        return this.request("DescribeDimensionScore", req, cb);
    }
    /**
     * 查询表绑定执行规则组信息
     */
    async DescribeRuleGroupTable(req, cb) {
        return this.request("DescribeRuleGroupTable", req, cb);
    }
    /**
     * 创建集成任务
     */
    async CreateIntegrationTask(req, cb) {
        return this.request("CreateIntegrationTask", req, cb);
    }
    /**
     * 查询规则详情
     */
    async DescribeRule(req, cb) {
        return this.request("DescribeRule", req, cb);
    }
    /**
     * 按补录计划批量终止实例。
     */
    async KillOpsMakePlanInstances(req, cb) {
        return this.request("KillOpsMakePlanInstances", req, cb);
    }
    /**
     * 数据源详情
     */
    async DescribeDataSourceList(req, cb) {
        return this.request("DescribeDataSourceList", req, cb);
    }
    /**
     * <p style="color:red;">[注意：该版本只满足广州区部分白名单客户使用]</p>
更新任务
     */
    async ModifyTaskInfo(req, cb) {
        return this.request("ModifyTaskInfo", req, cb);
    }
    /**
     * 事件管理-触发事件
     */
    async TriggerDsEvent(req, cb) {
        return this.request("TriggerDsEvent", req, cb);
    }
    /**
     * 运维大屏-实例运行时长排行
     */
    async DescribeSchedulerRunTimeInstanceCntByStatus(req, cb) {
        return this.request("DescribeSchedulerRunTimeInstanceCntByStatus", req, cb);
    }
    /**
     * 任务状态统计
     */
    async DescribeSchedulerTaskCntByStatus(req, cb) {
        return this.request("DescribeSchedulerTaskCntByStatus", req, cb);
    }
    /**
     * 更新集成任务
     */
    async ModifyIntegrationTask(req, cb) {
        return this.request("ModifyIntegrationTask", req, cb);
    }
    /**
     * 获取值班日历
     */
    async DescribeDutyScheduleDetails(req, cb) {
        return this.request("DescribeDutyScheduleDetails", req, cb);
    }
    /**
     * 数据集成大屏任务状态分布统计
     */
    async DescribeIntegrationStatisticsTaskStatus(req, cb) {
        return this.request("DescribeIntegrationStatisticsTaskStatus", req, cb);
    }
    /**
     * 批量运行集成任务
     */
    async BatchStartIntegrationTasks(req, cb) {
        return this.request("BatchStartIntegrationTasks", req, cb);
    }
    /**
     * 质量报告-修改维度权限
     */
    async ModifyDimensionWeight(req, cb) {
        return this.request("ModifyDimensionWeight", req, cb);
    }
    /**
     * 查询规则执行结果详情
     */
    async DescribeRuleExecDetail(req, cb) {
        return this.request("DescribeRuleExecDetail", req, cb);
    }
    /**
     * 离线任务重名校验
     */
    async CheckTaskNameExist(req, cb) {
        return this.request("CheckTaskNameExist", req, cb);
    }
    /**
     * 根据补录计划和补录任务获取补录实例列表。
     */
    async DescribeOpsMakePlanInstances(req, cb) {
        return this.request("DescribeOpsMakePlanInstances", req, cb);
    }
    /**
     * 数据源详情
     */
    async DescribeDatasource(req, cb) {
        return this.request("DescribeDatasource", req, cb);
    }
    /**
     * 数据开发模块-文件夹更新
     */
    async ModifyDsFolder(req, cb) {
        return this.request("ModifyDsFolder", req, cb);
    }
    /**
     * 通过工作流id，查询工作流详情
     */
    async DescribeWorkflowInfoById(req, cb) {
        return this.request("DescribeWorkflowInfoById", req, cb);
    }
    /**
     * 任务状态趋势
     */
    async DescribeTaskByStatusReport(req, cb) {
        return this.request("DescribeTaskByStatusReport", req, cb);
    }
    /**
     * 获取离线任务实例
     */
    async GetOfflineInstanceList(req, cb) {
        return this.request("GetOfflineInstanceList", req, cb);
    }
    /**
     * 创建离线任务
     */
    async CreateOfflineTask(req, cb) {
        return this.request("CreateOfflineTask", req, cb);
    }
    /**
     * 更新工作流调度
     */
    async ModifyWorkflowSchedule(req, cb) {
        return this.request("ModifyWorkflowSchedule", req, cb);
    }
    /**
     * 获取表schema信息
     */
    async DescribeTableSchemaInfo(req, cb) {
        return this.request("DescribeTableSchemaInfo", req, cb);
    }
    /**
     * 更新质量规则接口
     */
    async ModifyRule(req, cb) {
        return this.request("ModifyRule", req, cb);
    }
    /**
     * 查询函数类型
     */
    async DescribeFunctionTypes(req, cb) {
        return this.request("DescribeFunctionTypes", req, cb);
    }
    /**
     * 删除数据源
     */
    async DeleteDataSources(req, cb) {
        return this.request("DeleteDataSources", req, cb);
    }
    /**
     * 删除集成节点
     */
    async DeleteIntegrationNode(req, cb) {
        return this.request("DeleteIntegrationNode", req, cb);
    }
    /**
     * 停止集成任务
     */
    async StopIntegrationTask(req, cb) {
        return this.request("StopIntegrationTask", req, cb);
    }
    /**
     * 获取表元数据list
     */
    async DescribeTableMetas(req, cb) {
        return this.request("DescribeTableMetas", req, cb);
    }
    /**
     * 实时任务同步速度趋势
     */
    async DescribeRealTimeTaskSpeed(req, cb) {
        return this.request("DescribeRealTimeTaskSpeed", req, cb);
    }
    /**
     * 获取实例列表
     */
    async DescribeInstanceList(req, cb) {
        return this.request("DescribeInstanceList", req, cb);
    }
    /**
     * 元数据模型-表基础信息查询接口
     */
    async DescribeTableBasicInfo(req, cb) {
        return this.request("DescribeTableBasicInfo", req, cb);
    }
    /**
     * 告警接收人详情
     */
    async DescribeAlarmReceiver(req, cb) {
        return this.request("DescribeAlarmReceiver", req, cb);
    }
    /**
     * 查看任务锁状态信息
     */
    async DescribeTaskLockStatus(req, cb) {
        return this.request("DescribeTaskLockStatus", req, cb);
    }
    /**
     * 运维大屏-实例状态分布
     */
    async DescribeSchedulerInstanceStatus(req, cb) {
        return this.request("DescribeSchedulerInstanceStatus", req, cb);
    }
    /**
     * 获取实例运行日志
     */
    async DescribeInstanceLog(req, cb) {
        return this.request("DescribeInstanceLog", req, cb);
    }
    /**
     * 批量更新集成任务（暂时仅支持批量更新责任人）
     */
    async BatchUpdateIntegrationTasks(req, cb) {
        return this.request("BatchUpdateIntegrationTasks", req, cb);
    }
    /**
     * 资源管理-批量删除资源文件
     */
    async DeleteResourceFiles(req, cb) {
        return this.request("DeleteResourceFiles", req, cb);
    }
    /**
     * 批量补数据（创建补录任务）
     */
    async CreateOpsMakePlan(req, cb) {
        return this.request("CreateOpsMakePlan", req, cb);
    }
    /**
     * 任务运维-批量暂停任务
     */
    async FreezeOpsTasks(req, cb) {
        return this.request("FreezeOpsTasks", req, cb);
    }
    /**
     * 查询规则组详情接口
     */
    async DescribeRuleGroup(req, cb) {
        return this.request("DescribeRuleGroup", req, cb);
    }
    /**
     * <p style="color:red;">[注意：该版本只满足广州区部分白名单客户使用]</p>
修改任务脚本
     */
    async ModifyTaskScript(req, cb) {
        return this.request("ModifyTaskScript", req, cb);
    }
    /**
     * 获取具体实例相关日志信息
     */
    async DescribeInstanceLogDetail(req, cb) {
        return this.request("DescribeInstanceLogDetail", req, cb);
    }
    /**
     * 编排空间批量操作页面查找全部的文件夹
     */
    async FindAllFolder(req, cb) {
        return this.request("FindAllFolder", req, cb);
    }
    /**
     * 获取数据库信息
     */
    async DescribeDatabaseInfoList(req, cb) {
        return this.request("DescribeDatabaseInfoList", req, cb);
    }
    /**
     * 根据层级查找上/下游任务节点
     */
    async DescribeDependOpsTasks(req, cb) {
        return this.request("DescribeDependOpsTasks", req, cb);
    }
    /**
     * 资源管理-判断资源文件是否存在
     */
    async JudgeResourceFile(req, cb) {
        return this.request("JudgeResourceFile", req, cb);
    }
    /**
     * 提交集成任务
     */
    async CommitIntegrationTask(req, cb) {
        return this.request("CommitIntegrationTask", req, cb);
    }
    /**
     * 删除任务
     */
    async DeleteOfflineTask(req, cb) {
        return this.request("DeleteOfflineTask", req, cb);
    }
    /**
     * 创建hive表，返回表名称
     */
    async CreateHiveTableByDDL(req, cb) {
        return this.request("CreateHiveTableByDDL", req, cb);
    }
    /**
     * 编排空间-删除文件夹
     */
    async DeleteDsFolder(req, cb) {
        return this.request("DeleteDsFolder", req, cb);
    }
    /**
     * 批量操作页面获取任务列表
     */
    async DescribeBatchOperateTask(req, cb) {
        return this.request("DescribeBatchOperateTask", req, cb);
    }
    /**
     * 通过任务查询表的血缘关系
     */
    async DescribeTaskLineage(req, cb) {
        return this.request("DescribeTaskLineage", req, cb);
    }
    /**
     * 获取资源管理目录树
     */
    async DescribeResourceManagePathTrees(req, cb) {
        return this.request("DescribeResourceManagePathTrees", req, cb);
    }
    /**
     * 批量置成功集成任务实例
     */
    async BatchForceSuccessIntegrationTaskInstances(req, cb) {
        return this.request("BatchForceSuccessIntegrationTaskInstances", req, cb);
    }
    /**
     * 查询实时任务日志列表
     */
    async DescribeStreamTaskLogList(req, cb) {
        return this.request("DescribeStreamTaskLogList", req, cb);
    }
    /**
     * 创建质量规则接口
     */
    async CreateRule(req, cb) {
        return this.request("CreateRule", req, cb);
    }
    /**
     * 编辑规则模板
     */
    async ModifyRuleTemplate(req, cb) {
        return this.request("ModifyRuleTemplate", req, cb);
    }
    /**
     * 根据项目ID和事件名称查看事件详情
     */
    async DescribeEvent(req, cb) {
        return this.request("DescribeEvent", req, cb);
    }
    /**
     * 查询父目录下所有子文件夹+工作流
     */
    async DescribeAllByFolderNew(req, cb) {
        return this.request("DescribeAllByFolderNew", req, cb);
    }
    /**
     * 质量报告-查询表质量详情
     */
    async DescribeTableQualityDetails(req, cb) {
        return this.request("DescribeTableQualityDetails", req, cb);
    }
    /**
     * 【过滤条件】
{表名称TableName,支持模糊匹配}       {表负责人TableOwnerName,支持模糊匹配}      {监控方式MonitorTypes，1.未配置 2.关联生产调度 3.离线周期检测,支持多选}  {订阅人ReceiverUin}
【必要字段】
{数据来源DatasourceId}
     */
    async DescribeRuleGroupsByPage(req, cb) {
        return this.request("DescribeRuleGroupsByPage", req, cb);
    }
    /**
     * 查询表的所有列元数据
     */
    async DescribeColumnsMeta(req, cb) {
        return this.request("DescribeColumnsMeta", req, cb);
    }
    /**
     * <p style="color:red;">[注意：该版本只满足广州区部分白名单客户使用]</p>
注册事件监听器
     */
    async RegisterEventListener(req, cb) {
        return this.request("RegisterEventListener", req, cb);
    }
    /**
     * 获取值班表列表
     */
    async DescribeDutyScheduleList(req, cb) {
        return this.request("DescribeDutyScheduleList", req, cb);
    }
    /**
     * 删除质量规则接口
     */
    async DeleteRule(req, cb) {
        return this.request("DeleteRule", req, cb);
    }
    /**
     * 判断告警规则重名
     */
    async CheckAlarmRegularNameExist(req, cb) {
        return this.request("CheckAlarmRegularNameExist", req, cb);
    }
    /**
     * 判断集成任务名称是否存在
     */
    async CheckIntegrationTaskNameExists(req, cb) {
        return this.request("CheckIntegrationTaskNameExists", req, cb);
    }
    /**
     * 查询表的分区详情信息
     */
    async DescribeTablePartitions(req, cb) {
        return this.request("DescribeTablePartitions", req, cb);
    }
    /**
     * 分页查询质量规则
     */
    async DescribeRulesByPage(req, cb) {
        return this.request("DescribeRulesByPage", req, cb);
    }
    /**
     * 删除项目用户
     */
    async DeleteProjectUsers(req, cb) {
        return this.request("DeleteProjectUsers", req, cb);
    }
    /**
     * 删除文件
     */
    async DeleteFile(req, cb) {
        return this.request("DeleteFile", req, cb);
    }
    /**
     * 对集成离线任务执行批量补数据操作
     */
    async BatchMakeUpIntegrationTasks(req, cb) {
        return this.request("BatchMakeUpIntegrationTasks", req, cb);
    }
    /**
     * 保存任务信息
     */
    async UploadContent(req, cb) {
        return this.request("UploadContent", req, cb);
    }
    /**
     * 查询模板详情
     */
    async DescribeRuleTemplate(req, cb) {
        return this.request("DescribeRuleTemplate", req, cb);
    }
    /**
     * 任务运维-任务列表 批量启动
     */
    async BatchRunOpsTask(req, cb) {
        return this.request("BatchRunOpsTask", req, cb);
    }
    /**
     * 【过滤条件】 {模板名称Name,支持模糊匹配} {模板类型type，1.系统模板 2.自定义模板} {质量检测维度QualityDims, 1.准确性 2.唯一性 3.完整性 4.一致性 5.及时性 6.有效性} 【排序字段】 { 引用数排序类型CitationOrderType，根据引用数量排序 ASC DESC}
     */
    async DescribeRuleTemplatesByPage(req, cb) {
        return this.request("DescribeRuleTemplatesByPage", req, cb);
    }
    /**
     * 更新工作流信息
     */
    async ModifyWorkflowInfo(req, cb) {
        return this.request("ModifyWorkflowInfo", req, cb);
    }
    /**
     * 数据质量概览页面规则运行情况接口
     */
    async DescribeRuleExecStat(req, cb) {
        return this.request("DescribeRuleExecStat", req, cb);
    }
    /**
     * 实例批量重跑
     */
    async RunRerunScheduleInstances(req, cb) {
        return this.request("RunRerunScheduleInstances", req, cb);
    }
    /**
     * 规则组执行结果分页查询接口
     */
    async DescribeRuleGroupExecResultsByPage(req, cb) {
        return this.request("DescribeRuleGroupExecResultsByPage", req, cb);
    }
    /**
     * 资源管理-删除资源文件
     */
    async DeleteResourceFile(req, cb) {
        return this.request("DeleteResourceFile", req, cb);
    }
    /**
     * 批量创建任务告警规则
     */
    async BatchCreateIntegrationTaskAlarms(req, cb) {
        return this.request("BatchCreateIntegrationTaskAlarms", req, cb);
    }
    /**
     * 拉取dag实例
     */
    async DagInstances(req, cb) {
        return this.request("DagInstances", req, cb);
    }
    /**
     * 获取数据服务API的发布态信息列表
     */
    async DescribeDataServicePublishedApiList(req, cb) {
        return this.request("DescribeDataServicePublishedApiList", req, cb);
    }
    /**
     * 修改审批单状态
     */
    async ModifyApproveStatus(req, cb) {
        return this.request("ModifyApproveStatus", req, cb);
    }
    /**
     * 下载日志文件，返回日志下载URL
     */
    async DescribeInstanceLogFile(req, cb) {
        return this.request("DescribeInstanceLogFile", req, cb);
    }
    /**
     * 异步批量创建任务版本
     */
    async BatchCreateTaskVersionAsync(req, cb) {
        return this.request("BatchCreateTaskVersionAsync", req, cb);
    }
    /**
     * 更新监控状态
     */
    async ModifyMonitorStatus(req, cb) {
        return this.request("ModifyMonitorStatus", req, cb);
    }
    /**
     * 查询规则组执行策略
     */
    async DescribeExecStrategy(req, cb) {
        return this.request("DescribeExecStrategy", req, cb);
    }
    /**
     * 列出表血缘信息
     */
    async DescribeTableLineage(req, cb) {
        return this.request("DescribeTableLineage", req, cb);
    }
    /**
     * 暂停集成任务
     */
    async SuspendIntegrationTask(req, cb) {
        return this.request("SuspendIntegrationTask", req, cb);
    }
    /**
     * 创建工作流
     */
    async CreateWorkflowDs(req, cb) {
        return this.request("CreateWorkflowDs", req, cb);
    }
    /**
     * 根据条件查找事件实例
     */
    async DescribeEventCases(req, cb) {
        return this.request("DescribeEventCases", req, cb);
    }
    /**
     * 获取离线任务实例列表(新)
     */
    async GetOfflineDIInstanceList(req, cb) {
        return this.request("GetOfflineDIInstanceList", req, cb);
    }
    /**
     * 通过工作流Id删除工作流
     */
    async DeleteWorkflowById(req, cb) {
        return this.request("DeleteWorkflowById", req, cb);
    }
    /**
     * 查询质量规则列表
     */
    async DescribeRules(req, cb) {
        return this.request("DescribeRules", req, cb);
    }
    /**
     * 启动集成任务
     */
    async StartIntegrationTask(req, cb) {
        return this.request("StartIntegrationTask", req, cb);
    }
    /**
     * 锁定集成任务
     */
    async LockIntegrationTask(req, cb) {
        return this.request("LockIntegrationTask", req, cb);
    }
    /**
     * 提交工作流
     */
    async SubmitWorkflow(req, cb) {
        return this.request("SubmitWorkflow", req, cb);
    }
    /**
     * 批量删除集成任务
     */
    async BatchDeleteIntegrationTasks(req, cb) {
        return this.request("BatchDeleteIntegrationTasks", req, cb);
    }
    /**
     * 查询集成任务列表
     */
    async DescribeIntegrationTasks(req, cb) {
        return this.request("DescribeIntegrationTasks", req, cb);
    }
    /**
     * 任务状态趋势
     */
    async DescribeStatisticInstanceStatusTrendOps(req, cb) {
        return this.request("DescribeStatisticInstanceStatusTrendOps", req, cb);
    }
    /**
     * 列出字段血缘信息
     */
    async DescribeColumnLineage(req, cb) {
        return this.request("DescribeColumnLineage", req, cb);
    }
    /**
     * 数据质量概览页面趋势变化接口
     */
    async DescribeTrendStat(req, cb) {
        return this.request("DescribeTrendStat", req, cb);
    }
    /**
     * 获取数据表信息
     */
    async DescribeTableInfoList(req, cb) {
        return this.request("DescribeTableInfoList", req, cb);
    }
    /**
     * 查询规则组订阅信息
     */
    async DescribeRuleGroupSubscription(req, cb) {
        return this.request("DescribeRuleGroupSubscription", req, cb);
    }
    /**
     * 删除编排空间任务
     */
    async DeleteTaskDs(req, cb) {
        return this.request("DeleteTaskDs", req, cb);
    }
    /**
     * 更新规则组订阅信息
     */
    async ModifyRuleGroupSubscription(req, cb) {
        return this.request("ModifyRuleGroupSubscription", req, cb);
    }
    /**
     * 删除任务告警规则
     */
    async DeleteTaskAlarmRegular(req, cb) {
        return this.request("DeleteTaskAlarmRegular", req, cb);
    }
    /**
     * 获取待提交任务预提交校验信息（注意：工作流编号或者任务编号列表，必须填一项）
     */
    async DescribePendingSubmitTaskList(req, cb) {
        return this.request("DescribePendingSubmitTaskList", req, cb);
    }
    /**
     * 规则执行结果列表查询
     */
    async DescribeRuleExecResults(req, cb) {
        return this.request("DescribeRuleExecResults", req, cb);
    }
    /**
     * <p style="color:red;">[注意：该版本只满足广州区部分白名单客户使用]</p>
触发事件
     */
    async TriggerEvent(req, cb) {
        return this.request("TriggerEvent", req, cb);
    }
    /**
     * 暂停工作流下的所有任务
     */
    async FreezeTasksByWorkflowIds(req, cb) {
        return this.request("FreezeTasksByWorkflowIds", req, cb);
    }
    /**
     * 资源管理删除资源
     */
    async DeleteResource(req, cb) {
        return this.request("DeleteResource", req, cb);
    }
    /**
     * 质量报告-质量分周期趋势
     */
    async DescribeQualityScoreTrend(req, cb) {
        return this.request("DescribeQualityScoreTrend", req, cb);
    }
    /**
     * 通过taskIds查询task详情列表
     */
    async DescribeDependTaskLists(req, cb) {
        return this.request("DescribeDependTaskLists", req, cb);
    }
    /**
     * 保存用户自定义函数
     */
    async SaveCustomFunction(req, cb) {
        return this.request("SaveCustomFunction", req, cb);
    }
    /**
     * 修改数据源
     */
    async ModifyDataSource(req, cb) {
        return this.request("ModifyDataSource", req, cb);
    }
    /**
     * 查询任务告警规则列表
     */
    async DescribeTaskAlarmRegulations(req, cb) {
        return this.request("DescribeTaskAlarmRegulations", req, cb);
    }
    /**
     * 查询集成任务版本节点信息
     */
    async DescribeIntegrationVersionNodesInfo(req, cb) {
        return this.request("DescribeIntegrationVersionNodesInfo", req, cb);
    }
    /**
     * 获取项目下的用户，分页返回
     */
    async DescribeProjectUsers(req, cb) {
        return this.request("DescribeProjectUsers", req, cb);
    }
    /**
     * 获取工作流调度信息
     */
    async DescribeWorkflowSchedulerInfoDs(req, cb) {
        return this.request("DescribeWorkflowSchedulerInfoDs", req, cb);
    }
    /**
     * 删除用户自定义函数
     */
    async DeleteCustomFunction(req, cb) {
        return this.request("DeleteCustomFunction", req, cb);
    }
    /**
     * 查询规则模板维度分布情况
     */
    async DescribeTemplateDimCount(req, cb) {
        return this.request("DescribeTemplateDimCount", req, cb);
    }
    /**
     * 根据项目id 获取项目下所有工作流列表
     */
    async DescribeFolderWorkflowList(req, cb) {
        return this.request("DescribeFolderWorkflowList", req, cb);
    }
    /**
     * 查询集成任务
     */
    async DescribeIntegrationTask(req, cb) {
        return this.request("DescribeIntegrationTask", req, cb);
    }
    /**
     * 查询数据服务API的发布态信息
     */
    async DescribeDataServicePublishedApiDetail(req, cb) {
        return this.request("DescribeDataServicePublishedApiDetail", req, cb);
    }
    /**
     * 查询工作流任务数
     */
    async DescribeWorkflowTaskCount(req, cb) {
        return this.request("DescribeWorkflowTaskCount", req, cb);
    }
    /**
     * 统计任务实例状态
     */
    async CountOpsInstanceState(req, cb) {
        return this.request("CountOpsInstanceState", req, cb);
    }
    /**
     * 数据集成大屏实例状态统计趋势
     */
    async DescribeIntegrationStatisticsInstanceTrend(req, cb) {
        return this.request("DescribeIntegrationStatisticsInstanceTrend", req, cb);
    }
    /**
     * 查询工作流画布运行起止时间
     */
    async DescribeWorkflowExecuteById(req, cb) {
        return this.request("DescribeWorkflowExecuteById", req, cb);
    }
    /**
     * 创建集成节点
     */
    async CreateIntegrationNode(req, cb) {
        return this.request("CreateIntegrationNode", req, cb);
    }
    /**
     * 任务运维-批量删除任务
     */
    async BatchDeleteOpsTasks(req, cb) {
        return this.request("BatchDeleteOpsTasks", req, cb);
    }
    /**
     * 提交规则组运行任务接口
     */
    async CommitRuleGroupTask(req, cb) {
        return this.request("CommitRuleGroupTask", req, cb);
    }
    /**
     * 日志获取详情页面
     */
    async DescribeInstanceLastLog(req, cb) {
        return this.request("DescribeInstanceLastLog", req, cb);
    }
    /**
     * <p style="color:red;">[注意：该版本只满足广州区部分白名单客户使用]</p>
添加父任务依赖
     */
    async ModifyTaskLinks(req, cb) {
        return this.request("ModifyTaskLinks", req, cb);
    }
    /**
     * <p style="color:red;">[注意：该版本只满足广州区部分白名单客户使用]</p>
注册事件
     */
    async RegisterEvent(req, cb) {
        return this.request("RegisterEvent", req, cb);
    }
    /**
     * 根据条件分页查询补录计划
     */
    async DescribeOpsMakePlans(req, cb) {
        return this.request("DescribeOpsMakePlans", req, cb);
    }
    /**
     * 查询工作流画布
     */
    async DescribeWorkflowCanvasInfo(req, cb) {
        return this.request("DescribeWorkflowCanvasInfo", req, cb);
    }
    /**
     * 查询数据库列表
     */
    async DescribeDatabaseMetas(req, cb) {
        return this.request("DescribeDatabaseMetas", req, cb);
    }
    /**
     * 编排空间-工作流-创建任务文件夹
     */
    async CreateTaskFolder(req, cb) {
        return this.request("CreateTaskFolder", req, cb);
    }
    /**
     * 修改任务告警规则
     */
    async ModifyTaskAlarmRegular(req, cb) {
        return this.request("ModifyTaskAlarmRegular", req, cb);
    }
    /**
     * 批量继续执行集成实时任务
     */
    async BatchResumeIntegrationTasks(req, cb) {
        return this.request("BatchResumeIntegrationTasks", req, cb);
    }
    /**
     * <p style="color:red;">[注意：该版本只满足广州区部分白名单客户使用]</p>
设置任务告警，新建/更新告警信息（最新）
     */
    async SetTaskAlarmNew(req, cb) {
        return this.request("SetTaskAlarmNew", req, cb);
    }
    /**
     * <p style="color:red;">[注意：该版本只满足广州区部分白名单客户使用]</p>
提交任务
     */
    async SubmitTask(req, cb) {
        return this.request("SubmitTask", req, cb);
    }
    /**
     * 即席分析提交SQL任务
     */
    async SubmitSqlTask(req, cb) {
        return this.request("SubmitSqlTask", req, cb);
    }
    /**
     * 获取数据源信息-数据源分页列表
     */
    async DescribeDataSourceInfoList(req, cb) {
        return this.request("DescribeDataSourceInfoList", req, cb);
    }
    /**
     * 查询函数分类
     */
    async DescribeFunctionKinds(req, cb) {
        return this.request("DescribeFunctionKinds", req, cb);
    }
    /**
     * 查询Inlong manager日志
     */
    async TaskLog(req, cb) {
        return this.request("TaskLog", req, cb);
    }
    /**
     * 查询规则模板列表
     */
    async DescribeRuleTemplates(req, cb) {
        return this.request("DescribeRuleTemplates", req, cb);
    }
    /**
     * 修改工作流责任人
     */
    async UpdateWorkflowOwner(req, cb) {
        return this.request("UpdateWorkflowOwner", req, cb);
    }
    /**
     * 更新集成节点
     */
    async ModifyIntegrationNode(req, cb) {
        return this.request("ModifyIntegrationNode", req, cb);
    }
    /**
     * 获取项目信息
     */
    async DescribeProject(req, cb) {
        return this.request("DescribeProject", req, cb);
    }
    /**
     * 查询表元数据详情
     */
    async DescribeTableMeta(req, cb) {
        return this.request("DescribeTableMeta", req, cb);
    }
    /**
     * 创建数据建模，提供给云应用使用，实现“Wedata数据建模”的下单发货
     */
    async CreateDataModel(req, cb) {
        return this.request("CreateDataModel", req, cb);
    }
    /**
     * 提取数据集成节点字段Schema
     */
    async GetIntegrationNodeColumnSchema(req, cb) {
        return this.request("GetIntegrationNodeColumnSchema", req, cb);
    }
    /**
     * 查询用户生产工作流列表
     */
    async DescribeOpsWorkflows(req, cb) {
        return this.request("DescribeOpsWorkflows", req, cb);
    }
    /**
     * 批量重跑集成任务实例
     */
    async BatchRerunIntegrationTaskInstances(req, cb) {
        return this.request("BatchRerunIntegrationTaskInstances", req, cb);
    }
    /**
     * 列出表血缘信息
     */
    async DescribeTableLineageInfo(req, cb) {
        return this.request("DescribeTableLineageInfo", req, cb);
    }
    /**
     * 提交自定义函数
     */
    async SubmitCustomFunction(req, cb) {
        return this.request("SubmitCustomFunction", req, cb);
    }
    /**
     * 查询实时任务实例节点信息
     */
    async DescribeRealTimeTaskInstanceNodeInfo(req, cb) {
        return this.request("DescribeRealTimeTaskInstanceNodeInfo", req, cb);
    }
    /**
     * 数据集成大屏概览
     */
    async DescribeIntegrationStatistics(req, cb) {
        return this.request("DescribeIntegrationStatistics", req, cb);
    }
    /**
     * 批量停止工作流
     */
    async BatchStopWorkflowsByIds(req, cb) {
        return this.request("BatchStopWorkflowsByIds", req, cb);
    }
    /**
     * 分页查询试运行实例列表
     */
    async DescribeDrInstancePage(req, cb) {
        return this.request("DescribeDrInstancePage", req, cb);
    }
    /**
     * 销毁数据建模，提供给云应用使用，实现“Wedata数据建模”的销毁
     */
    async DeleteDataModel(req, cb) {
        return this.request("DeleteDataModel", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249685, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.weilingwith = void 0;
const v20230427_1 = require("./v20230427");
exports.weilingwith = {
    v20230427: v20230427_1.v20230427,
};

}, function(modId) { var map = {"./v20230427":1738984249686}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249686, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20230427 = void 0;
const Models = require("./weilingwith_models");
const weilingwith_client_1 = require("./weilingwith_client");
exports.v20230427 = {
    Client: weilingwith_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./weilingwith_models":1738984249687,"./weilingwith_client":1738984249688}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249687, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249688, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * weilingwith client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("weilingwith.tencentcloudapi.com", "2023-04-27", clientConfig);
    }
    /**
     * 云录像接口
     */
    async DescribeVideoCloudRecord(req, cb) {
        return this.request("DescribeVideoCloudRecord", req, cb);
    }
    /**
     * 查询建筑信息
     */
    async DescribeBuildingProfile(req, cb) {
        return this.request("DescribeBuildingProfile", req, cb);
    }
    /**
     * 变更告警状态
     */
    async ChangeAlarmStatus(req, cb) {
        return this.request("ChangeAlarmStatus", req, cb);
    }
    /**
     * 联动规则列表查询
     */
    async DescribeLinkRuleList(req, cb) {
        return this.request("DescribeLinkRuleList", req, cb);
    }
    /**
     * 查询构件树
     */
    async DescribeElementProfileTree(req, cb) {
        return this.request("DescribeElementProfileTree", req, cb);
    }
    /**
     * 用来查询系统中的告警状态列表
     */
    async DescribeAlarmStatusList(req, cb) {
        return this.request("DescribeAlarmStatusList", req, cb);
    }
    /**
     * 设备状态统计
     */
    async DescribeDeviceStatusStat(req, cb) {
        return this.request("DescribeDeviceStatusStat", req, cb);
    }
    /**
     * 查询指定空间设备编号列表
     */
    async DescribeSpaceDeviceIdList(req, cb) {
        return this.request("DescribeSpaceDeviceIdList", req, cb);
    }
    /**
     * 实时流接口
     */
    async DescribeVideoLiveStream(req, cb) {
        return this.request("DescribeVideoLiveStream", req, cb);
    }
    /**
     * 查询租户组织部门列表
     */
    async DescribeTenantDepartmentList(req, cb) {
        return this.request("DescribeTenantDepartmentList", req, cb);
    }
    /**
     * 上报应用消息
     */
    async ReportAppMessage(req, cb) {
        return this.request("ReportAppMessage", req, cb);
    }
    /**
     * 查询租户楼栋数量和楼栋建筑面积
     */
    async DescribeTenantBuildingCountAndArea(req, cb) {
        return this.request("DescribeTenantBuildingCountAndArea", req, cb);
    }
    /**
     * 查询项目空间楼栋数量与建筑面积
     */
    async DescribeWorkSpaceBuildingCountAndArea(req, cb) {
        return this.request("DescribeWorkSpaceBuildingCountAndArea", req, cb);
    }
    /**
     * 获取设备影子数据
     */
    async DescribeDeviceShadowList(req, cb) {
        return this.request("DescribeDeviceShadowList", req, cb);
    }
    /**
     * 标签列表查询
     */
    async DescribeDeviceTagList(req, cb) {
        return this.request("DescribeDeviceTagList", req, cb);
    }
    /**
     * 设备分组列表
     */
    async DescribeDeviceGroupList(req, cb) {
        return this.request("DescribeDeviceGroupList", req, cb);
    }
    /**
     * 告警类型获取
     */
    async DescribeAlarmTypeList(req, cb) {
        return this.request("DescribeAlarmTypeList", req, cb);
    }
    /**
     * 查询空间分类
     */
    async DescribeSpaceTypeList(req, cb) {
        return this.request("DescribeSpaceTypeList", req, cb);
    }
    /**
     * 批量修改设备组
     */
    async ModifyDeviceGroup(req, cb) {
        return this.request("ModifyDeviceGroup", req, cb);
    }
    /**
     * 拉取设备的设备类型列表
     */
    async DescribeDeviceTypeList(req, cb) {
        return this.request("DescribeDeviceTypeList", req, cb);
    }
    /**
     * 查询设备绑定的空间信息
     */
    async DescribeSpaceInfoByDeviceId(req, cb) {
        return this.request("DescribeSpaceInfoByDeviceId", req, cb);
    }
    /**
     * 获取租户下的空间列表
     */
    async DescribeWorkspaceList(req, cb) {
        return this.request("DescribeWorkspaceList", req, cb);
    }
    /**
     * 联动规则详情查询
     */
    async DescribeRuleDetail(req, cb) {
        return this.request("DescribeRuleDetail", req, cb);
    }
    /**
     * 修改工作空间园区属性
     */
    async UpdateWorkspaceParkAttributes(req, cb) {
        return this.request("UpdateWorkspaceParkAttributes", req, cb);
    }
    /**
     * 断流接口
     */
    async StopVideoStreaming(req, cb) {
        return this.request("StopVideoStreaming", req, cb);
    }
    /**
     * 模型列表查询/单个查询（产品模型/标准模型）
     */
    async DescribeModelList(req, cb) {
        return this.request("DescribeModelList", req, cb);
    }
    /**
     * 查询构件属性（详情）
     */
    async DescribePropertyList(req, cb) {
        return this.request("DescribePropertyList", req, cb);
    }
    /**
     * 产品列表查询
     */
    async DescribeProductList(req, cb) {
        return this.request("DescribeProductList", req, cb);
    }
    /**
     * 批量删除设备
     */
    async BatchDeleteDevice(req, cb) {
        return this.request("BatchDeleteDevice", req, cb);
    }
    /**
     * 动作列表查询
     */
    async DescribeActionList(req, cb) {
        return this.request("DescribeActionList", req, cb);
    }
    /**
     * 查询场景列表
     */
    async DescribeSceneList(req, cb) {
        return this.request("DescribeSceneList", req, cb);
    }
    /**
     * 查询设备绑定的空间层级关系
     */
    async DescribeSpaceRelationByDeviceId(req, cb) {
        return this.request("DescribeSpaceRelationByDeviceId", req, cb);
    }
    /**
     * 设备列表查询/单个查询（支持通过筛选条件查询，设备类型、标签、PID、空间）
     */
    async DescribeDeviceList(req, cb) {
        return this.request("DescribeDeviceList", req, cb);
    }
    /**
     * 批量消警
     */
    async BatchKillAlarm(req, cb) {
        return this.request("BatchKillAlarm", req, cb);
    }
    /**
     * 查询项目空间人员列表
     */
    async DescribeWorkspaceUserList(req, cb) {
        return this.request("DescribeWorkspaceUserList", req, cb);
    }
    /**
     * 设备控制（单个、批量控制）
     */
    async ControlDevice(req, cb) {
        return this.request("ControlDevice", req, cb);
    }
    /**
     * 批量上报应用消息
     */
    async BatchReportAppMessage(req, cb) {
        return this.request("BatchReportAppMessage", req, cb);
    }
    /**
     * 查询分页构件信息
     */
    async DescribeElementProfilePage(req, cb) {
        return this.request("DescribeElementProfilePage", req, cb);
    }
    /**
     * 批量修改设备名字
     */
    async ModifyDeviceName(req, cb) {
        return this.request("ModifyDeviceName", req, cb);
    }
    /**
     * 事件列表查询
     */
    async DescribeEventList(req, cb) {
        return this.request("DescribeEventList", req, cb);
    }
    /**
     * 根据标签获取行政区划列表
     */
    async DescribeAdministrationByTag(req, cb) {
        return this.request("DescribeAdministrationByTag", req, cb);
    }
    /**
     * 单个/批量新增设备
     */
    async BatchCreateDevice(req, cb) {
        return this.request("BatchCreateDevice", req, cb);
    }
    /**
     * 批量修改设备标签
     */
    async ModifyDeviceTag(req, cb) {
        return this.request("ModifyDeviceTag", req, cb);
    }
    /**
     * 获取视频扩展信息
     */
    async DescribeCameraExtendInfo(req, cb) {
        return this.request("DescribeCameraExtendInfo", req, cb);
    }
    /**
     * 获取文件下载URL
     */
    async DescribeFileDownloadURL(req, cb) {
        return this.request("DescribeFileDownloadURL", req, cb);
    }
    /**
     * 通过城市id查询工作空间列表
     */
    async DescribeCityWorkspaceList(req, cb) {
        return this.request("DescribeCityWorkspaceList", req, cb);
    }
    /**
     * 查询边缘应用凭证
     */
    async DescribeEdgeApplicationToken(req, cb) {
        return this.request("DescribeEdgeApplicationToken", req, cb);
    }
    /**
     * 查询建筑三维模型
     */
    async DescribeBuildingModel(req, cb) {
        return this.request("DescribeBuildingModel", req, cb);
    }
    /**
     * 删除设备分组
     */
    async DeleteDeviceGroup(req, cb) {
        return this.request("DeleteDeviceGroup", req, cb);
    }
    /**
     * 查询指定空间下设备与构件绑定关系列表
     */
    async DescribeSpaceDeviceRelationList(req, cb) {
        return this.request("DescribeSpaceDeviceRelationList", req, cb);
    }
    /**
     * 查询建筑列表
     */
    async DescribeBuildingList(req, cb) {
        return this.request("DescribeBuildingList", req, cb);
    }
    /**
     * 设备分组新增/修改
     */
    async SaveDeviceGroup(req, cb) {
        return this.request("SaveDeviceGroup", req, cb);
    }
    /**
     * 云台控制
     */
    async ControlCameraPTZ(req, cb) {
        return this.request("ControlCameraPTZ", req, cb);
    }
    /**
     * 查询接口列表
     */
    async DescribeInterfaceList(req, cb) {
        return this.request("DescribeInterfaceList", req, cb);
    }
    /**
     * 历史流接口
     */
    async DescribeVideoRecordStream(req, cb) {
        return this.request("DescribeVideoRecordStream", req, cb);
    }
    /**
     * 告警列表查询
     */
    async DescribeAlarmList(req, cb) {
        return this.request("DescribeAlarmList", req, cb);
    }
    /**
     * 查询指定空间关联的应用列表
     */
    async DescribeApplicationList(req, cb) {
        return this.request("DescribeApplicationList", req, cb);
    }
    /**
     * 添加告警处理记录
     */
    async AddAlarmProcessRecord(req, cb) {
        return this.request("AddAlarmProcessRecord", req, cb);
    }
    /**
     * 文件上传接口
     */
    async DescribeFileUploadURL(req, cb) {
        return this.request("DescribeFileUploadURL", req, cb);
    }
    /**
     * 查询租户人员列表
     */
    async DescribeTenantUserList(req, cb) {
        return this.request("DescribeTenantUserList", req, cb);
    }
    /**
     * 告警级别枚举获取
     */
    async DescribeAlarmLevelList(req, cb) {
        return this.request("DescribeAlarmLevelList", req, cb);
    }
    /**
     * 调用方应用，创建调用租户API的授权令牌。
     */
    async CreateApplicationToken(req, cb) {
        return this.request("CreateApplicationToken", req, cb);
    }
    /**
     * 设备状态获取
     */
    async DescribeDeviceStatusList(req, cb) {
        return this.request("DescribeDeviceStatusList", req, cb);
    }
    /**
     * 批量修改设备自定义字段值
     */
    async ModifyDeviceField(req, cb) {
        return this.request("ModifyDeviceField", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249689, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.wss = void 0;
const v20180426_1 = require("./v20180426");
exports.wss = {
    v20180426: v20180426_1.v20180426,
};

}, function(modId) { var map = {"./v20180426":1738984249690}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249690, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180426 = void 0;
const Models = require("./wss_models");
const wss_client_1 = require("./wss_client");
exports.v20180426 = {
    Client: wss_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./wss_models":1738984249691,"./wss_client":1738984249692}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249691, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249692, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * wss client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("wss.tencentcloudapi.com", "2018-04-26", clientConfig);
    }
    /**
     * 本接口（DeleteCert）用于删除证书。
     */
    async DeleteCert(req, cb) {
        return this.request("DeleteCert", req, cb);
    }
    /**
     * 本接口(DescribeCertList)用于获取证书列表。
     */
    async DescribeCertList(req, cb) {
        return this.request("DescribeCertList", req, cb);
    }
    /**
     * 本接口（UploadCert）用于上传证书。
     */
    async UploadCert(req, cb) {
        return this.request("UploadCert", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249693, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.yinsuda = void 0;
const v20220527_1 = require("./v20220527");
exports.yinsuda = {
    v20220527: v20220527_1.v20220527,
};

}, function(modId) { var map = {"./v20220527":1738984249694}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249694, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20220527 = void 0;
const Models = require("./yinsuda_models");
const yinsuda_client_1 = require("./yinsuda_client");
exports.v20220527 = {
    Client: yinsuda_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./yinsuda_models":1738984249695,"./yinsuda_client":1738984249696}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249695, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249696, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * yinsuda client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("yinsuda.tencentcloudapi.com", "2022-05-27", clientConfig);
    }
    /**
     * 创建机器人，支持进入 RTC 房间，播放曲库歌曲。
     */
    async CreateKTVRobot(req, cb) {
        return this.request("CreateKTVRobot", req, cb);
    }
    /**
     * 充值直播会员，使该用户可以在直播场景使用
     */
    async RechargeLiveVip(req, cb) {
        return this.request("RechargeLiveVip", req, cb);
    }
    /**
     * 获取标签分组及分组下的标签列表信息。
     */
    async DescribeKTVTags(req, cb) {
        return this.request("DescribeKTVTags", req, cb);
    }
    /**
     * 充值会员
     */
    async RechargeVip(req, cb) {
        return this.request("RechargeVip", req, cb);
    }
    /**
     * 根据歌单 Id 获取歌单详情。
     */
    async DescribeKTVPlaylistDetail(req, cb) {
        return this.request("DescribeKTVPlaylistDetail", req, cb);
    }
    /**
     * 获取会员信息：获取用户是否开通会员
     */
    async DescribeVipUserInfo(req, cb) {
        return this.request("DescribeVipUserInfo", req, cb);
    }
    /**
     * 销毁机器人，机器人退出 RTC 房间。
     */
    async DestroyKTVRobot(req, cb) {
        return this.request("DestroyKTVRobot", req, cb);
    }
    /**
     * 获取歌曲伴奏高潮的开始、结束时间，可用于抢唱
     */
    async DescribeKTVMusicAccompanySegmentUrlVip(req, cb) {
        return this.request("DescribeKTVMusicAccompanySegmentUrlVip", req, cb);
    }
    /**
     * 根据关键词获取联想词列表。
     */
    async DescribeKTVSuggestions(req, cb) {
        return this.request("DescribeKTVSuggestions", req, cb);
    }
    /**
     * 获取用户信息，包括是否为直播会员，及直播会员信息等
     */
    async DescribeUserInfo(req, cb) {
        return this.request("DescribeUserInfo", req, cb);
    }
    /**
     * 批量获取直播会员充值流水详细信息，包括：流水号，订单状态，下订单时间等
     */
    async DescribeLiveVipTradeInfos(req, cb) {
        return this.request("DescribeLiveVipTradeInfos", req, cb);
    }
    /**
     * 批量获取歌曲详细信息，包括：歌词下载链接、播放凭证、音高数据下载链接信息等。
     */
    async BatchDescribeKTVMusicDetails(req, cb) {
        return this.request("BatchDescribeKTVMusicDetails", req, cb);
    }
    /**
     * 获取歌单列表。
     */
    async DescribeKTVPlaylists(req, cb) {
        return this.request("DescribeKTVPlaylists", req, cb);
    }
    /**
     * 申请合唱相关信息，用于标记用户的演唱是在合唱场景下。
     */
    async ApplyChorus(req, cb) {
        return this.request("ApplyChorus", req, cb);
    }
    /**
     * 获取机器人列表，支持 Id、状态等过滤条件。
     */
    async DescribeKTVRobots(req, cb) {
        return this.request("DescribeKTVRobots", req, cb);
    }
    /**
     * 获取歌曲伴奏片段链接，可用于抢唱
     */
    async DescribeKTVMusicAccompanySegmentUrl(req, cb) {
        return this.request("DescribeKTVMusicAccompanySegmentUrl", req, cb);
    }
    /**
     * 下发操作机器人指令，支持播放、暂停、恢复、歌单设置等操作指令，实现对机器人行为的控制。
     */
    async SyncKTVRobotCommand(req, cb) {
        return this.request("SyncKTVRobotCommand", req, cb);
    }
    /**
     * 根据输入的规则匹配曲库中的歌曲。
     */
    async DescribeKTVMatchMusics(req, cb) {
        return this.request("DescribeKTVMatchMusics", req, cb);
    }
    /**
     * 根据关键词搜索歌曲，返回相关歌曲列表。
     */
    async SearchKTVMusics(req, cb) {
        return this.request("SearchKTVMusics", req, cb);
    }
    /**
     * 通过标签过滤歌曲列表。
     */
    async DescribeKTVMusicsByTag(req, cb) {
        return this.request("DescribeKTVMusicsByTag", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249697, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.youmall = void 0;
const v20180228_1 = require("./v20180228");
exports.youmall = {
    v20180228: v20180228_1.v20180228,
};

}, function(modId) { var map = {"./v20180228":1738984249698}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249698, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180228 = void 0;
const Models = require("./youmall_models");
const youmall_client_1 = require("./youmall_client");
exports.v20180228 = {
    Client: youmall_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./youmall_models":1738984249699,"./youmall_client":1738984249700}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249699, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249700, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * youmall client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("youmall.tencentcloudapi.com", "2018-02-28", clientConfig);
    }
    /**
     * 通过指定设备ID和指定时段，获取该时段内中收银台摄像设备抓取到顾客头像及身份ID
     */
    async DescribeCameraPerson(req, cb) {
        return this.request("DescribeCameraPerson", req, cb);
    }
    /**
     * 指定门店获取所有顾客详情列表，包含客户ID、图片、年龄、性别
     */
    async DescribePersonInfo(req, cb) {
        return this.request("DescribePersonInfo", req, cb);
    }
    /**
     * 按天提供查询日期范围内，客户指定门店下的所有区域（优Mall部署时已配置区域）的累计客流人次和平均停留时间。支持的时间范围：过去365天，含当天。
     */
    async DescribeZoneTrafficInfo(req, cb) {
        return this.request("DescribeZoneTrafficInfo", req, cb);
    }
    /**
     * 获取指定区域人流各年龄占比
     */
    async DescribeZoneFlowAgeInfoByZoneId(req, cb) {
        return this.request("DescribeZoneFlowAgeInfoByZoneId", req, cb);
    }
    /**
     * 调用本接口在优Mall中注册自己集团的到店通知回调接口地址，接口协议为HTTP或HTTPS。注册后，若集团有特殊身份（例如老客）到店通知，优Mall后台将主动将到店信息push给该接口
     */
    async RegisterCallback(req, cb) {
        return this.request("RegisterCallback", req, cb);
    }
    /**
     * 获取指定区域不同年龄段男女平均停留时间
     */
    async DescribeZoneFlowGenderAvrStayTimeByZoneId(req, cb) {
        return this.request("DescribeZoneFlowGenderAvrStayTimeByZoneId", req, cb);
    }
    /**
     * 获取区域人流和停留时间
     */
    async DescribeZoneFlowAndStayTime(req, cb) {
        return this.request("DescribeZoneFlowAndStayTime", req, cb);
    }
    /**
     * 获取门店指定时间范围内的所有用户到访信息记录，支持的时间范围：过去365天，含当天。
     */
    async DescribePersonVisitInfo(req, cb) {
        return this.request("DescribePersonVisitInfo", req, cb);
    }
    /**
     * 获取指定区域分时客流量
     */
    async DescribeZoneFlowHourlyByZoneId(req, cb) {
        return this.request("DescribeZoneFlowHourlyByZoneId", req, cb);
    }
    /**
     * 根据客户身份标识获取客户下所有的门店信息列表
     */
    async DescribeShopInfo(req, cb) {
        return this.request("DescribeShopInfo", req, cb);
    }
    /**
     * 通过DescribeCameraPerson接口上报的收银台身份ID查询顾客的FaceID。查询最佳时间为收银台上报的次日1点后。
     */
    async DescribeFaceIdByTempId(req, cb) {
        return this.request("DescribeFaceIdByTempId", req, cb);
    }
    /**
     * 获取指定区域性别占比
     */
    async DescribeZoneFlowGenderInfoByZoneId(req, cb) {
        return this.request("DescribeZoneFlowGenderInfoByZoneId", req, cb);
    }
    /**
     * 按天提供查询日期范围内门店的单日累计客流人数，支持的时间范围：过去365天，含当天。
     */
    async DescribeShopTrafficInfo(req, cb) {
        return this.request("DescribeShopTrafficInfo", req, cb);
    }
    /**
     * 通过上传人脸图片检索系统face id、顾客身份信息及底图
     */
    async DescribePersonInfoByFacePicture(req, cb) {
        return this.request("DescribePersonInfoByFacePicture", req, cb);
    }
    /**
     * 通过上传指定规格的人脸图片，创建黑名单用户或者白名单用户。
     */
    async CreateFacePicture(req, cb) {
        return this.request("CreateFacePicture", req, cb);
    }
    /**
     * 创建集团门店管理员账号
     */
    async CreateAccount(req, cb) {
        return this.request("CreateAccount", req, cb);
    }
    /**
     * 按小时提供查询日期范围内门店的每天每小时累计客流人数数据，支持的时间范围：过去365天，含当天。
     */
    async DescribeShopHourTrafficInfo(req, cb) {
        return this.request("DescribeShopHourTrafficInfo", req, cb);
    }
    /**
     * 输出开始时间到结束时间段内的进出场数据。
     */
    async DescribePersonTrace(req, cb) {
        return this.request("DescribePersonTrace", req, cb);
    }
    /**
     * 获取指定区域每日客流量
     */
    async DescribeZoneFlowDailyByZoneId(req, cb) {
        return this.request("DescribeZoneFlowDailyByZoneId", req, cb);
    }
    /**
     * 输出开始时间到结束时间段内的进出场数据。不做按天聚合的情况下，每次进出场，产生一条进出场数据。


     */
    async DescribePersonArrivedMall(req, cb) {
        return this.request("DescribePersonArrivedMall", req, cb);
    }
    /**
     * 输出开始时间到结束时间段内的进出场数据。按天聚合的情况下，每天多次进出场算一次，以最初进场时间为进场时间，最后离场时间为离场时间。停留时间为多次进出场的停留时间之和。
     */
    async DescribeClusterPersonArrivedMall(req, cb) {
        return this.request("DescribeClusterPersonArrivedMall", req, cb);
    }
    /**
     * 查询客户单次到场轨迹明细
     */
    async DescribePersonTraceDetail(req, cb) {
        return this.request("DescribePersonTraceDetail", req, cb);
    }
    /**
     * 修改顾客身份类型接口
     */
    async ModifyPersonType(req, cb) {
        return this.request("ModifyPersonType", req, cb);
    }
    /**
     * 支持修改黑白名单类型的顾客特征
     */
    async ModifyPersonFeatureInfo(req, cb) {
        return this.request("ModifyPersonFeatureInfo", req, cb);
    }
    /**
     * 返回当前门店历史网络状态数据
     */
    async DescribeHistoryNetworkInfo(req, cb) {
        return this.request("DescribeHistoryNetworkInfo", req, cb);
    }
    /**
     * 返回当前门店最新网络状态数据
     */
    async DescribeNetworkInfo(req, cb) {
        return this.request("DescribeNetworkInfo", req, cb);
    }
    /**
     * 删除顾客特征，仅支持删除黑名单或者白名单用户特征。
     */
    async DeletePersonFeature(req, cb) {
        return this.request("DeletePersonFeature", req, cb);
    }
    /**
     * 标记到店顾客的身份类型，例如黑名单、白名单等

     */
    async ModifyPersonTagInfo(req, cb) {
        return this.request("ModifyPersonTagInfo", req, cb);
    }
    /**
     * 查询指定某一卖场的用户信息
     */
    async DescribePerson(req, cb) {
        return this.request("DescribePerson", req, cb);
    }
    /**
     * 输出开始时间到结束时间段内的进出场数据。按天聚合的情况下，每天多次进出场算一次，以最初进场时间为进场时间，最后离场时间为离场时间。
     */
    async DescribeClusterPersonTrace(req, cb) {
        return this.request("DescribeClusterPersonTrace", req, cb);
    }
    /**
     * 获取动线轨迹信息
     */
    async DescribeTrajectoryData(req, cb) {
        return this.request("DescribeTrajectoryData", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249701, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.yunjing = void 0;
const v20180228_1 = require("./v20180228");
exports.yunjing = {
    v20180228: v20180228_1.v20180228,
};

}, function(modId) { var map = {"./v20180228":1738984249702}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249702, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180228 = void 0;
const Models = require("./yunjing_models");
const yunjing_client_1 = require("./yunjing_client");
exports.v20180228 = {
    Client: yunjing_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./yunjing_models":1738984249703,"./yunjing_client":1738984249704}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249703, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249704, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * yunjing client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("yunjing.tencentcloudapi.com", "2018-02-28", clientConfig);
    }
    /**
     * 删除标签
     */
    async DeleteTags(req, cb) {
        return this.request("DeleteTags", req, cb);
    }
    /**
     * 本接口(TrustMalwares)将被识别木马文件设为信任。
     */
    async TrustMalwares(req, cb) {
        return this.request("TrustMalwares", req, cb);
    }
    /**
     * 本接口 (DescribeComponentStatistics) 用于获取组件统计列表数据。
     */
    async DescribeComponentStatistics(req, cb) {
        return this.request("DescribeComponentStatistics", req, cb);
    }
    /**
     * 删除服务器关联的标签
     */
    async DeleteMachineTag(req, cb) {
        return this.request("DeleteMachineTag", req, cb);
    }
    /**
     * 按分页形式展示网络攻击日志列表
     */
    async DescribeAttackLogs(req, cb) {
        return this.request("DescribeAttackLogs", req, cb);
    }
    /**
     * 本接口 (OpenProVersion) 用于开通专业版。
     */
    async OpenProVersion(req, cb) {
        return this.request("OpenProVersion", req, cb);
    }
    /**
     * 本接口 (DescribeWeeklyReportMalwares) 用于获取专业周报木马数据。
     */
    async DescribeWeeklyReportMalwares(req, cb) {
        return this.request("DescribeWeeklyReportMalwares", req, cb);
    }
    /**
     * 本接口 (DescribeVulInfo) 用于获取漏洞详情。
     */
    async DescribeVulInfo(req, cb) {
        return this.request("DescribeVulInfo", req, cb);
    }
    /**
     * 新增或修改高危命令规则
     */
    async EditBashRule(req, cb) {
        return this.request("EditBashRule", req, cb);
    }
    /**
     * 本接口（DeleteUsualLoginPlaces）用于删除常用登录地。
     */
    async DeleteUsualLoginPlaces(req, cb) {
        return this.request("DeleteUsualLoginPlaces", req, cb);
    }
    /**
     * 本接口 (DescribeVuls) 用于获取漏洞列表数据。
     */
    async DescribeVuls(req, cb) {
        return this.request("DescribeVuls", req, cb);
    }
    /**
     * 本接口{MisAlarmNonlocalLoginPlaces}将设置当前地点为常用登录地。
     */
    async MisAlarmNonlocalLoginPlaces(req, cb) {
        return this.request("MisAlarmNonlocalLoginPlaces", req, cb);
    }
    /**
     * 根据策略信息创建基线策略
     */
    async CreateBaselineStrategy(req, cb) {
        return this.request("CreateBaselineStrategy", req, cb);
    }
    /**
     * 获取高危命令规则列表
     */
    async DescribeBashRules(req, cb) {
        return this.request("DescribeBashRules", req, cb);
    }
    /**
     * 根据Ids删除本地提权
     */
    async DeletePrivilegeEvents(req, cb) {
        return this.request("DeletePrivilegeEvents", req, cb);
    }
    /**
     * 本接口 (RenewProVersion) 用于续费专业版(包年包月)。
     */
    async RenewProVersion(req, cb) {
        return this.request("RenewProVersion", req, cb);
    }
    /**
     * 导出网络攻击日志
     */
    async ExportAttackLogs(req, cb) {
        return this.request("ExportAttackLogs", req, cb);
    }
    /**
     * 此接口（DescribeUsualLoginPlaces）用于查询常用登录地。
     */
    async DescribeUsualLoginPlaces(req, cb) {
        return this.request("DescribeUsualLoginPlaces", req, cb);
    }
    /**
     * 根据Ids删除高危命令事件
     */
    async DeleteBashEvents(req, cb) {
        return this.request("DeleteBashEvents", req, cb);
    }
    /**
     * 本接口 (DeleteMaliciousRequests) 用于删除恶意请求记录。
     */
    async DeleteMaliciousRequests(req, cb) {
        return this.request("DeleteMaliciousRequests", req, cb);
    }
    /**
     * 获取反弹Shell规则列表
     */
    async DescribeReverseShellRules(req, cb) {
        return this.request("DescribeReverseShellRules", req, cb);
    }
    /**
     * 本接口（RecoverMalwares）用于批量恢复已经被隔离的木马文件。
     */
    async RecoverMalwares(req, cb) {
        return this.request("RecoverMalwares", req, cb);
    }
    /**
     * 删除反弹Shell规则
     */
    async DeleteReverseShellRules(req, cb) {
        return this.request("DeleteReverseShellRules", req, cb);
    }
    /**
     * 本接口 (DeleteBruteAttacks) 用于删除暴力破解记录。
     */
    async DeleteBruteAttacks(req, cb) {
        return this.request("DeleteBruteAttacks", req, cb);
    }
    /**
     * 导出高危命令事件
     */
    async ExportBashEvents(req, cb) {
        return this.request("ExportBashEvents", req, cb);
    }
    /**
     * 本接口 (CreateProcessTask) 用于创建实时拉取进程任务。
     */
    async CreateProcessTask(req, cb) {
        return this.request("CreateProcessTask", req, cb);
    }
    /**
     * 编辑反弹Shell规则
     */
    async EditReverseShellRule(req, cb) {
        return this.request("EditReverseShellRule", req, cb);
    }
    /**
     * 本接口 (DescribeProcesses) 用于获取进程列表数据。
     */
    async DescribeProcesses(req, cb) {
        return this.request("DescribeProcesses", req, cb);
    }
    /**
     * 本接口（DescribeMalwares）用于获取木马事件列表。
     */
    async DescribeMalwares(req, cb) {
        return this.request("DescribeMalwares", req, cb);
    }
    /**
     * 编辑白名单规则
     */
    async ModifyLoginWhiteList(req, cb) {
        return this.request("ModifyLoginWhiteList", req, cb);
    }
    /**
     * 获取本地提权规则列表
     */
    async DescribePrivilegeRules(req, cb) {
        return this.request("DescribePrivilegeRules", req, cb);
    }
    /**
     * 本接口 (UntrustMaliciousRequest) 用于取消信任恶意请求。
     */
    async UntrustMaliciousRequest(req, cb) {
        return this.request("UntrustMaliciousRequest", req, cb);
    }
    /**
     * 本接口 (DescribeImpactedHosts) 用于获取漏洞受影响机器列表。
     */
    async DescribeImpactedHosts(req, cb) {
        return this.request("DescribeImpactedHosts", req, cb);
    }
    /**
     * 本接口 (DeleteNonlocalLoginPlaces) 用于删除异地登录记录。
     */
    async DeleteNonlocalLoginPlaces(req, cb) {
        return this.request("DeleteNonlocalLoginPlaces", req, cb);
    }
    /**
     * 本接口 (DescribeOpenPorts) 用于获取端口列表数据。

     */
    async DescribeOpenPorts(req, cb) {
        return this.request("DescribeOpenPorts", req, cb);
    }
    /**
     * 本接口 (ExportMaliciousRequests) 用于导出下载恶意请求文件。
     */
    async ExportMaliciousRequests(req, cb) {
        return this.request("ExportMaliciousRequests", req, cb);
    }
    /**
     * 获取指定标签关联的服务器信息
     */
    async DescribeTagMachines(req, cb) {
        return this.request("DescribeTagMachines", req, cb);
    }
    /**
     * 本接口(DescribeNonlocalLoginPlaces)用于获取异地登录事件。
     */
    async DescribeNonlocalLoginPlaces(req, cb) {
        return this.request("DescribeNonlocalLoginPlaces", req, cb);
    }
    /**
     * 导出本地提权事件
     */
    async ExportPrivilegeEvents(req, cb) {
        return this.request("ExportPrivilegeEvents", req, cb);
    }
    /**
     * 本接口用于（DescribeOverviewStatistics）获取概览统计数据。
     */
    async DescribeOverviewStatistics(req, cb) {
        return this.request("DescribeOverviewStatistics", req, cb);
    }
    /**
     * 本接口 (DescribeOpenPortTaskStatus) 用于获取实时拉取端口任务状态。
     */
    async DescribeOpenPortTaskStatus(req, cb) {
        return this.request("DescribeOpenPortTaskStatus", req, cb);
    }
    /**
     * 本接口 (DescribeSecurityDynamics) 用于获取安全事件消息数据。
     */
    async DescribeSecurityDynamics(req, cb) {
        return this.request("DescribeSecurityDynamics", req, cb);
    }
    /**
     * 根据Ids删除反弹Shell事件
     */
    async DeleteReverseShellEvents(req, cb) {
        return this.request("DeleteReverseShellEvents", req, cb);
    }
    /**
     * 删除本地提权规则
     */
    async DeletePrivilegeRules(req, cb) {
        return this.request("DeletePrivilegeRules", req, cb);
    }
    /**
     * 本接口 (DeleteMalwares) 用于删除木马记录。
     */
    async DeleteMalwares(req, cb) {
        return this.request("DeleteMalwares", req, cb);
    }
    /**
     * 本接口 (DescribeWeeklyReportNonlocalLoginPlaces) 用于获取专业周报异地登录数据。
     */
    async DescribeWeeklyReportNonlocalLoginPlaces(req, cb) {
        return this.request("DescribeWeeklyReportNonlocalLoginPlaces", req, cb);
    }
    /**
     * 删除白名单规则
     */
    async DeleteLoginWhiteList(req, cb) {
        return this.request("DeleteLoginWhiteList", req, cb);
    }
    /**
     * 本接口 (CreateOpenPortTask) 用于创建实时获取端口任务。
     */
    async CreateOpenPortTask(req, cb) {
        return this.request("CreateOpenPortTask", req, cb);
    }
    /**
     * 本接口 (CloseProVersion) 用于关闭专业版。
     */
    async CloseProVersion(req, cb) {
        return this.request("CloseProVersion", req, cb);
    }
    /**
     * 本接口 (DescribeAccountStatistics) 用于获取帐号统计列表数据。
     */
    async DescribeAccountStatistics(req, cb) {
        return this.request("DescribeAccountStatistics", req, cb);
    }
    /**
     * 本接口（ModifyAlarmAttribute）用于修改告警设置。
     */
    async ModifyAlarmAttribute(req, cb) {
        return this.request("ModifyAlarmAttribute", req, cb);
    }
    /**
     * 本接口 (DescribeOpenPortStatistics) 用于获取端口统计列表。
     */
    async DescribeOpenPortStatistics(req, cb) {
        return this.request("DescribeOpenPortStatistics", req, cb);
    }
    /**
     * 本接口 (ExportBruteAttacks) 用于导出密码破解记录成CSV文件。
     */
    async ExportBruteAttacks(req, cb) {
        return this.request("ExportBruteAttacks", req, cb);
    }
    /**
     * 本接口 (TrustMaliciousRequest) 用于恶意请求添加信任。
     */
    async TrustMaliciousRequest(req, cb) {
        return this.request("TrustMaliciousRequest", req, cb);
    }
    /**
     * 切换高危命令规则状态
     */
    async SwitchBashRules(req, cb) {
        return this.request("SwitchBashRules", req, cb);
    }
    /**
     * 新增或修改本地提权规则
     */
    async EditPrivilegeRule(req, cb) {
        return this.request("EditPrivilegeRule", req, cb);
    }
    /**
     * 本接口 (ExportMalwares) 用于导出木马记录CSV文件。
     */
    async ExportMalwares(req, cb) {
        return this.request("ExportMalwares", req, cb);
    }
    /**
     * 本接口{DescribeBruteAttacks}用于获取暴力破解事件列表。
     */
    async DescribeBruteAttacks(req, cb) {
        return this.request("DescribeBruteAttacks", req, cb);
    }
    /**
     * 本接口 (OpenProVersionPrepaid) 用于开通专业版(包年包月)。
     */
    async OpenProVersionPrepaid(req, cb) {
        return this.request("OpenProVersionPrepaid", req, cb);
    }
    /**
     * 增加机器关联标签
     */
    async AddMachineTag(req, cb) {
        return this.request("AddMachineTag", req, cb);
    }
    /**
     * 新增或编辑标签
     */
    async EditTags(req, cb) {
        return this.request("EditTags", req, cb);
    }
    /**
     * 本接口（SeparateMalwares）用于隔离木马。
     */
    async SeparateMalwares(req, cb) {
        return this.request("SeparateMalwares", req, cb);
    }
    /**
     * 本接口（AddLoginWhiteList）用于添加白名单规则
     */
    async AddLoginWhiteList(req, cb) {
        return this.request("AddLoginWhiteList", req, cb);
    }
    /**
     * 本接口 (ExportNonlocalLoginPlaces) 用于导出异地登录事件记录CSV文件。
     */
    async ExportNonlocalLoginPlaces(req, cb) {
        return this.request("ExportNonlocalLoginPlaces", req, cb);
    }
    /**
     * 本接口 (DescribeMaliciousRequests) 用于获取恶意请求数据。
     */
    async DescribeMaliciousRequests(req, cb) {
        return this.request("DescribeMaliciousRequests", req, cb);
    }
    /**
     * 删除高危命令规则
     */
    async DeleteBashRules(req, cb) {
        return this.request("DeleteBashRules", req, cb);
    }
    /**
     * 获取反弹Shell列表
     */
    async DescribeReverseShellEvents(req, cb) {
        return this.request("DescribeReverseShellEvents", req, cb);
    }
    /**
     * 本接口 (ModifyAutoOpenProVersionConfig) 用于设置新增主机自动开通专业版配置。
     */
    async ModifyAutoOpenProVersionConfig(req, cb) {
        return this.request("ModifyAutoOpenProVersionConfig", req, cb);
    }
    /**
     * 本接口 (DescribeAgentVuls) 用于获取单台主机的漏洞列表。
     */
    async DescribeAgentVuls(req, cb) {
        return this.request("DescribeAgentVuls", req, cb);
    }
    /**
     * 本接口 (DescribeAccounts) 用于获取帐号列表数据。
     */
    async DescribeAccounts(req, cb) {
        return this.request("DescribeAccounts", req, cb);
    }
    /**
     * 本接口 (DescribeWeeklyReports) 用于获取周报列表数据。
     */
    async DescribeWeeklyReports(req, cb) {
        return this.request("DescribeWeeklyReports", req, cb);
    }
    /**
     * 本接口 (DescribeProVersionInfo) 用于获取专业版信息。
     */
    async DescribeProVersionInfo(req, cb) {
        return this.request("DescribeProVersionInfo", req, cb);
    }
    /**
     * 获取本地提权事件列表
     */
    async DescribePrivilegeEvents(req, cb) {
        return this.request("DescribePrivilegeEvents", req, cb);
    }
    /**
     * 本接口（DescribeMachineInfo）用于获取机器详细信息。
     */
    async DescribeMachineInfo(req, cb) {
        return this.request("DescribeMachineInfo", req, cb);
    }
    /**
     * 本接口 (DescribeAlarmAttribute) 用于获取告警设置。
     */
    async DescribeAlarmAttribute(req, cb) {
        return this.request("DescribeAlarmAttribute", req, cb);
    }
    /**
     * 本接口 (DescribeComponents) 用于获取组件列表数据。
     */
    async DescribeComponents(req, cb) {
        return this.request("DescribeComponents", req, cb);
    }
    /**
     * 获取异地登录白名单列表
     */
    async DescribeLoginWhiteList(req, cb) {
        return this.request("DescribeLoginWhiteList", req, cb);
    }
    /**
     * 本接口 (DescribeVulScanResult) 用于获取漏洞检测结果。

     */
    async DescribeVulScanResult(req, cb) {
        return this.request("DescribeVulScanResult", req, cb);
    }
    /**
     * 本接口 (DescribeHistoryAccounts) 用于获取帐号变更历史列表数据。
     */
    async DescribeHistoryAccounts(req, cb) {
        return this.request("DescribeHistoryAccounts", req, cb);
    }
    /**
     * 本接口 (DescribeProcessStatistics) 用于获取进程统计列表数据。
     */
    async DescribeProcessStatistics(req, cb) {
        return this.request("DescribeProcessStatistics", req, cb);
    }
    /**
     * 本接口 (DescribeWeeklyReportBruteAttacks) 用于获取专业周报密码破解数据。
     */
    async DescribeWeeklyReportBruteAttacks(req, cb) {
        return this.request("DescribeWeeklyReportBruteAttacks", req, cb);
    }
    /**
     * 本接口（UntrustMalwares）用于取消信任木马文件。
     */
    async UntrustMalwares(req, cb) {
        return this.request("UntrustMalwares", req, cb);
    }
    /**
     * 本接口 (DescribeWeeklyReportVuls) 用于专业版周报漏洞数据。

     */
    async DescribeWeeklyReportVuls(req, cb) {
        return this.request("DescribeWeeklyReportVuls", req, cb);
    }
    /**
     * 本接口 (DescribeWeeklyReportInfo) 用于获取专业周报详情数据。
     */
    async DescribeWeeklyReportInfo(req, cb) {
        return this.request("DescribeWeeklyReportInfo", req, cb);
    }
    /**
     * 本接口 (DescribeComponentInfo) 用于获取组件信息数据。
     */
    async DescribeComponentInfo(req, cb) {
        return this.request("DescribeComponentInfo", req, cb);
    }
    /**
     * 本接口 (ModifyProVersionRenewFlag) 用于修改专业版包年包月续费标识。
     */
    async ModifyProVersionRenewFlag(req, cb) {
        return this.request("ModifyProVersionRenewFlag", req, cb);
    }
    /**
     * 设置高危命令事件状态
     */
    async SetBashEventsStatus(req, cb) {
        return this.request("SetBashEventsStatus", req, cb);
    }
    /**
     * 导出反弹Shell事件
     */
    async ExportReverseShellEvents(req, cb) {
        return this.request("ExportReverseShellEvents", req, cb);
    }
    /**
     * 删除网络攻击日志
     */
    async DeleteAttackLogs(req, cb) {
        return this.request("DeleteAttackLogs", req, cb);
    }
    /**
     * 本接口（DeleteMachine）用于卸载云镜客户端。
     */
    async DeleteMachine(req, cb) {
        return this.request("DeleteMachine", req, cb);
    }
    /**
     * 本接口 (DescribeProcessTaskStatus) 用于获取实时拉取进程任务状态。
     */
    async DescribeProcessTaskStatus(req, cb) {
        return this.request("DescribeProcessTaskStatus", req, cb);
    }
    /**
     * 本接口 (RescanImpactedHost) 用于漏洞重新检测。
     */
    async RescanImpactedHost(req, cb) {
        return this.request("RescanImpactedHost", req, cb);
    }
    /**
     * 获取所有主机标签
     */
    async DescribeTags(req, cb) {
        return this.request("DescribeTags", req, cb);
    }
    /**
     * 本接口 (DescribeSecurityTrends) 用于获取安全事件统计数据。
     */
    async DescribeSecurityTrends(req, cb) {
        return this.request("DescribeSecurityTrends", req, cb);
    }
    /**
     * 网络攻击日志详情
     */
    async DescribeAttackLogInfo(req, cb) {
        return this.request("DescribeAttackLogInfo", req, cb);
    }
    /**
     * 本接口 (IgnoreImpactedHosts) 用于忽略漏洞。
     */
    async IgnoreImpactedHosts(req, cb) {
        return this.request("IgnoreImpactedHosts", req, cb);
    }
    /**
     * 获取高危命令列表
     */
    async DescribeBashEvents(req, cb) {
        return this.request("DescribeBashEvents", req, cb);
    }
    /**
     * 本接口 (DescribeMachines) 用于获取区域主机列表。
     */
    async DescribeMachines(req, cb) {
        return this.request("DescribeMachines", req, cb);
    }
    /**
     * 此接口（CreateUsualLoginPlaces）用于添加常用登录地。
     */
    async CreateUsualLoginPlaces(req, cb) {
        return this.request("CreateUsualLoginPlaces", req, cb);
    }
    /**
     * 本接口 (InquiryPriceOpenProVersionPrepaid) 用于开通专业版询价(预付费)。
     */
    async InquiryPriceOpenProVersionPrepaid(req, cb) {
        return this.request("InquiryPriceOpenProVersionPrepaid", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249705, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.yunsou = void 0;
const v20191115_1 = require("./v20191115");
const v20180504_1 = require("./v20180504");
exports.yunsou = {
    v20191115: v20191115_1.v20191115,
    v20180504: v20180504_1.v20180504,
};

}, function(modId) { var map = {"./v20191115":1738984249706,"./v20180504":1738984249709}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249706, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20191115 = void 0;
const Models = require("./yunsou_models");
const yunsou_client_1 = require("./yunsou_client");
exports.v20191115 = {
    Client: yunsou_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./yunsou_models":1738984249707,"./yunsou_client":1738984249708}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249707, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249708, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * yunsou client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("yunsou.tencentcloudapi.com", "2019-11-15", clientConfig);
    }
    /**
     * 上传云搜数据的API接口。

     */
    async DataManipulation(req, cb) {
        return this.request("DataManipulation", req, cb);
    }
    /**
     * 用于检索云搜中的数据。

     */
    async DataSearch(req, cb) {
        return this.request("DataSearch", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249709, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.v20180504 = void 0;
const Models = require("./yunsou_models");
const yunsou_client_1 = require("./yunsou_client");
exports.v20180504 = {
    Client: yunsou_client_1.Client,
    Models: Models
};

}, function(modId) { var map = {"./yunsou_models":1738984249710,"./yunsou_client":1738984249711}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249710, function(require, module, exports) {

/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });

}, function(modId) { var map = {}; return __REQUIRE__(map[modId], modId); })
__DEFINE__(1738984249711, function(require, module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const abstract_client_1 = require("../../../common/abstract_client");
/**
 * yunsou client
 * @class
 */
class Client extends abstract_client_1.AbstractClient {
    constructor(clientConfig) {
        super("yunsou.tencentcloudapi.com", "2018-05-04", clientConfig);
    }
    /**
     * 上传云搜数据的API接口
     */
    async DataManipulation(req, cb) {
        return this.request("DataManipulation", req, cb);
    }
    /**
     * 用于检索云搜中的数据
     */
    async DataSearch(req, cb) {
        return this.request("DataSearch", req, cb);
    }
}
exports.Client = Client;

}, function(modId) { var map = {"../../../common/abstract_client":1738984248561}; return __REQUIRE__(map[modId], modId); })
return __REQUIRE__(1738984248555);
})()
//miniprogram-npm-outsideDeps=["tslib","uuid","crypto","url","json-bigint","querystring","is-stream","get-stream","form-data","node-fetch","https-proxy-agent","events"]
//# sourceMappingURL=index.js.map